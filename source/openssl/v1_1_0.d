module openssl.v1_1_0;


        import core.stdc.config;
        import core.stdc.stdarg: va_list;
        static import core.simd;
        static import std.conv;

        struct Int128 { long lower; long upper; }
        struct UInt128 { ulong lower; ulong upper; }

        struct __locale_data { int dummy; }



alias _Bool = bool;
struct dpp {
    static struct Opaque(int N) {
        void[N] bytes;
    }

    static bool isEmpty(T)() {
        return T.tupleof.length == 0;
    }
    static struct Move(T) {
        T* ptr;
    }


    static auto move(T)(ref T value) {
        return Move!T(&value);
    }
    mixin template EnumD(string name, T, string prefix) if(is(T == enum)) {
        private static string _memberMixinStr(string member) {
            import std.conv: text;
            import std.array: replace;
            return text(` `, member.replace(prefix, ""), ` = `, T.stringof, `.`, member, `,`);
        }
        private static string _enumMixinStr() {
            import std.array: join;
            string[] ret;
            ret ~= "enum " ~ name ~ "{";
            static foreach(member; __traits(allMembers, T)) {
                ret ~= _memberMixinStr(member);
            }
            ret ~= "}";
            return ret.join("\n");
        }
        mixin(_enumMixinStr());
    }
}

extern(C)
{
    alias wchar_t = int;
    alias size_t = c_ulong;
    alias ptrdiff_t = c_long;
    struct max_align_t
    {
        long __clang_max_align_nonce1;
        real __clang_max_align_nonce2;
    }
    int timespec_get(timespec*, int) @nogc nothrow;
    int timer_getoverrun(void*) @nogc nothrow;
    int timer_gettime(void*, itimerspec*) @nogc nothrow;
    int timer_settime(void*, int, const(itimerspec)*, itimerspec*) @nogc nothrow;
    int timer_delete(void*) @nogc nothrow;
    int timer_create(int, sigevent*, void**) @nogc nothrow;
    int clock_getcpuclockid(int, int*) @nogc nothrow;
    int clock_nanosleep(int, int, const(timespec)*, timespec*) @nogc nothrow;
    int clock_settime(int, const(timespec)*) @nogc nothrow;
    int clock_gettime(int, timespec*) @nogc nothrow;
    int clock_getres(int, timespec*) @nogc nothrow;
    int nanosleep(const(timespec)*, timespec*) @nogc nothrow;
    int dysize(int) @nogc nothrow;
    c_long timelocal(tm*) @nogc nothrow;
    c_long timegm(tm*) @nogc nothrow;
    extern __gshared c_long timezone;
    extern __gshared int daylight;
    void tzset() @nogc nothrow;
    extern __gshared char*[2] tzname;
    extern __gshared c_long __timezone;
    extern __gshared int __daylight;
    extern __gshared char*[2] __tzname;
    char* ctime_r(const(c_long)*, char*) @nogc nothrow;
    char* asctime_r(const(tm)*, char*) @nogc nothrow;
    char* ctime(const(c_long)*) @nogc nothrow;
    char* asctime(const(tm)*) @nogc nothrow;
    tm* localtime_r(const(c_long)*, tm*) @nogc nothrow;
    tm* gmtime_r(const(c_long)*, tm*) @nogc nothrow;
    tm* localtime(const(c_long)*) @nogc nothrow;
    tm* gmtime(const(c_long)*) @nogc nothrow;
    c_ulong strftime_l(char*, c_ulong, const(char)*, const(tm)*, __locale_struct*) @nogc nothrow;
    c_ulong strftime(char*, c_ulong, const(char)*, const(tm)*) @nogc nothrow;
    c_long mktime(tm*) @nogc nothrow;
    double difftime(c_long, c_long) @nogc nothrow;
    c_long time(c_long*) @nogc nothrow;
    c_long clock() @nogc nothrow;
    struct sigevent;
    alias fsfilcnt_t = c_ulong;
    alias fsblkcnt_t = c_ulong;
    alias blkcnt_t = c_long;
    alias blksize_t = c_long;
    alias register_t = c_long;
    alias u_int64_t = c_ulong;
    alias u_int32_t = uint;
    alias u_int16_t = ushort;
    alias u_int8_t = ubyte;
    alias key_t = int;
    alias caddr_t = char*;
    alias daddr_t = int;
    alias id_t = uint;
    alias pid_t = int;
    alias uid_t = uint;
    alias nlink_t = c_ulong;
    alias mode_t = uint;
    alias gid_t = uint;
    alias dev_t = c_ulong;
    alias ino_t = c_ulong;
    alias loff_t = c_long;
    alias fsid_t = __fsid_t;
    alias u_quad_t = c_ulong;
    alias quad_t = c_long;
    alias u_long = c_ulong;
    alias u_int = uint;
    alias u_short = ushort;
    alias u_char = ubyte;
    int pselect(int, fd_set*, fd_set*, fd_set*, const(timespec)*, const(__sigset_t)*) @nogc nothrow;
    int select(int, fd_set*, fd_set*, fd_set*, timeval*) @nogc nothrow;
    alias fd_mask = c_long;
    struct fd_set
    {
        c_long[16] __fds_bits;
    }
    alias __fd_mask = c_long;
    alias suseconds_t = c_long;
    void bio_free_ex_data(bio_st*) @nogc nothrow;
    void bio_cleanup() @nogc nothrow;
    void comp_zlib_cleanup_int() @nogc nothrow;
    void openssl_config_int(const(char)*) @nogc nothrow;
    void openssl_no_config_int() @nogc nothrow;
    void conf_modules_free_int() @nogc nothrow;
    static uint constant_time_msb(uint) @nogc nothrow;
    static uint constant_time_lt(uint, uint) @nogc nothrow;
    static ubyte constant_time_lt_8(uint, uint) @nogc nothrow;
    static uint constant_time_ge(uint, uint) @nogc nothrow;
    static ubyte constant_time_ge_8(uint, uint) @nogc nothrow;
    static uint constant_time_is_zero(uint) @nogc nothrow;
    static ubyte constant_time_is_zero_8(uint) @nogc nothrow;
    static uint constant_time_eq(uint, uint) @nogc nothrow;
    static ubyte constant_time_eq_8(uint, uint) @nogc nothrow;
    static uint constant_time_eq_int(int, int) @nogc nothrow;
    static ubyte constant_time_eq_int_8(int, int) @nogc nothrow;
    static uint constant_time_select(uint, uint, uint) @nogc nothrow;
    static ubyte constant_time_select_8(ubyte, ubyte, ubyte) @nogc nothrow;
    static int constant_time_select_int(uint, int, int) @nogc nothrow;
    alias danetls_record = danetls_record_st;
    struct danetls_record_st
    {
        ubyte usage;
        ubyte selector;
        ubyte mtype;
        ubyte* data;
        c_ulong dlen;
        evp_pkey_st* spki;
    }
    static int sk_danetls_record_find_ex(stack_st_danetls_record*, danetls_record_st*) @nogc nothrow;
    static int sk_danetls_record_find(stack_st_danetls_record*, danetls_record_st*) @nogc nothrow;
    static danetls_record_st* sk_danetls_record_set(stack_st_danetls_record*, int, danetls_record_st*) @nogc nothrow;
    static int sk_danetls_record_insert(stack_st_danetls_record*, danetls_record_st*, int) @nogc nothrow;
    static void sk_danetls_record_pop_free(stack_st_danetls_record*, void function(danetls_record_st*)) @nogc nothrow;
    static danetls_record_st* sk_danetls_record_shift(stack_st_danetls_record*) @nogc nothrow;
    static danetls_record_st* sk_danetls_record_pop(stack_st_danetls_record*) @nogc nothrow;
    static int sk_danetls_record_unshift(stack_st_danetls_record*, danetls_record_st*) @nogc nothrow;
    static int sk_danetls_record_push(stack_st_danetls_record*, danetls_record_st*) @nogc nothrow;
    static danetls_record_st* sk_danetls_record_delete_ptr(stack_st_danetls_record*, danetls_record_st*) @nogc nothrow;
    static danetls_record_st* sk_danetls_record_delete(stack_st_danetls_record*, int) @nogc nothrow;
    static void sk_danetls_record_sort(stack_st_danetls_record*) @nogc nothrow;
    static void sk_danetls_record_free(stack_st_danetls_record*) @nogc nothrow;
    static int sk_danetls_record_reserve(stack_st_danetls_record*, int) @nogc nothrow;
    static stack_st_danetls_record* sk_danetls_record_new_reserve(int function(const(const(danetls_record_st)*)*, const(const(danetls_record_st)*)*), int) @nogc nothrow;
    static stack_st_danetls_record* sk_danetls_record_new_null() @nogc nothrow;
    static stack_st_danetls_record* sk_danetls_record_new(int function(const(const(danetls_record_st)*)*, const(const(danetls_record_st)*)*)) @nogc nothrow;
    static danetls_record_st* sk_danetls_record_value(const(stack_st_danetls_record)*, int) @nogc nothrow;
    static int sk_danetls_record_num(const(stack_st_danetls_record)*) @nogc nothrow;
    alias sk_danetls_record_copyfunc = danetls_record_st* function(const(danetls_record_st)*);
    alias sk_danetls_record_freefunc = void function(danetls_record_st*);
    alias sk_danetls_record_compfunc = int function(const(const(danetls_record_st)*)*, const(const(danetls_record_st)*)*);
    struct stack_st_danetls_record;
    static int sk_danetls_record_is_sorted(const(stack_st_danetls_record)*) @nogc nothrow;
    static stack_st_danetls_record* sk_danetls_record_dup(const(stack_st_danetls_record)*) @nogc nothrow;
    static stack_st_danetls_record* sk_danetls_record_deep_copy(const(stack_st_danetls_record)*, danetls_record_st* function(const(danetls_record_st)*), void function(danetls_record_st*)) @nogc nothrow;
    static int function(const(const(danetls_record_st)*)*, const(const(danetls_record_st)*)*) sk_danetls_record_set_cmp_func(stack_st_danetls_record*, int function(const(const(danetls_record_st)*)*, const(const(danetls_record_st)*)*)) @nogc nothrow;
    static void sk_danetls_record_zero(stack_st_danetls_record*) @nogc nothrow;
    struct dane_ctx_st
    {
        const(evp_md_st)** mdevp;
        ubyte* mdord;
        ubyte mdmax;
        c_ulong flags;
    }
    struct stack_st_X509;
    int strncasecmp_l(const(char)*, const(char)*, c_ulong, __locale_struct*) @nogc nothrow;
    int strcasecmp_l(const(char)*, const(char)*, __locale_struct*) @nogc nothrow;
    int strncasecmp(const(char)*, const(char)*, c_ulong) @nogc nothrow;
    int strcasecmp(const(char)*, const(char)*) @nogc nothrow;
    int ffsll(long) @nogc nothrow;
    alias DSO_FUNC_TYPE = void function();
    alias DSO = dso_st;
    struct dso_st;
    alias DSO_METHOD = dso_meth_st;
    struct dso_meth_st;
    alias DSO_NAME_CONVERTER_FUNC = char* function(dso_st*, const(char)*);
    alias DSO_MERGER_FUNC = char* function(dso_st*, const(char)*, const(char)*);
    dso_st* DSO_new() @nogc nothrow;
    int DSO_free(dso_st*) @nogc nothrow;
    int DSO_flags(dso_st*) @nogc nothrow;
    int DSO_up_ref(dso_st*) @nogc nothrow;
    c_long DSO_ctrl(dso_st*, int, c_long, void*) @nogc nothrow;
    const(char)* DSO_get_filename(dso_st*) @nogc nothrow;
    int DSO_set_filename(dso_st*, const(char)*) @nogc nothrow;
    char* DSO_convert_filename(dso_st*, const(char)*) @nogc nothrow;
    char* DSO_merge(dso_st*, const(char)*, const(char)*) @nogc nothrow;
    dso_st* DSO_load(dso_st*, const(char)*, dso_meth_st*, int) @nogc nothrow;
    void function() DSO_bind_func(dso_st*, const(char)*) @nogc nothrow;
    dso_meth_st* DSO_METHOD_openssl() @nogc nothrow;
    void* DSO_global_lookup(const(char)*) @nogc nothrow;
    int ERR_load_DSO_strings() @nogc nothrow;
    int ffsl(c_long) @nogc nothrow;
    int ffs(int) @nogc nothrow;
    char* rindex(const(char)*, int) @nogc nothrow;
    char* index(const(char)*, int) @nogc nothrow;
    void bzero(void*, c_ulong) @nogc nothrow;
    void bcopy(const(void)*, void*, c_ulong) @nogc nothrow;
    int bcmp(const(void)*, const(void)*, c_ulong) @nogc nothrow;
    char* stpncpy(char*, const(char)*, c_ulong) @nogc nothrow;
    char* __stpncpy(char*, const(char)*, c_ulong) @nogc nothrow;
    char* stpcpy(char*, const(char)*) @nogc nothrow;
    char* __stpcpy(char*, const(char)*) @nogc nothrow;
    char* strsignal(int) @nogc nothrow;
    void err_free_strings_int() @nogc nothrow;
    char* strsep(char**, const(char)*) @nogc nothrow;
    alias OPENSSL_DIR_CTX = OPENSSL_dir_context_st;
    struct OPENSSL_dir_context_st;
    const(char)* OPENSSL_DIR_read(OPENSSL_dir_context_st**, const(char)*) @nogc nothrow;
    int OPENSSL_DIR_end(OPENSSL_dir_context_st**) @nogc nothrow;
    int OPENSSL_memcmp(const(void)*, const(void)*, c_ulong) @nogc nothrow;
    void explicit_bzero(void*, c_ulong) @nogc nothrow;
    char* strerror_l(int, __locale_struct*) @nogc nothrow;
    struct aes_key_st
    {
        uint[60] rd_key;
        int rounds;
    }
    alias AES_KEY = aes_key_st;
    const(char)* AES_options() @nogc nothrow;
    int AES_set_encrypt_key(const(ubyte)*, const(int), aes_key_st*) @nogc nothrow;
    int AES_set_decrypt_key(const(ubyte)*, const(int), aes_key_st*) @nogc nothrow;
    void AES_encrypt(const(ubyte)*, ubyte*, const(aes_key_st)*) @nogc nothrow;
    void AES_decrypt(const(ubyte)*, ubyte*, const(aes_key_st)*) @nogc nothrow;
    void AES_ecb_encrypt(const(ubyte)*, ubyte*, const(aes_key_st)*, const(int)) @nogc nothrow;
    void AES_cbc_encrypt(const(ubyte)*, ubyte*, c_ulong, const(aes_key_st)*, ubyte*, const(int)) @nogc nothrow;
    void AES_cfb128_encrypt(const(ubyte)*, ubyte*, c_ulong, const(aes_key_st)*, ubyte*, int*, const(int)) @nogc nothrow;
    void AES_cfb1_encrypt(const(ubyte)*, ubyte*, c_ulong, const(aes_key_st)*, ubyte*, int*, const(int)) @nogc nothrow;
    void AES_cfb8_encrypt(const(ubyte)*, ubyte*, c_ulong, const(aes_key_st)*, ubyte*, int*, const(int)) @nogc nothrow;
    void AES_ofb128_encrypt(const(ubyte)*, ubyte*, c_ulong, const(aes_key_st)*, ubyte*, int*) @nogc nothrow;
    void AES_ige_encrypt(const(ubyte)*, ubyte*, c_ulong, const(aes_key_st)*, ubyte*, const(int)) @nogc nothrow;
    void AES_bi_ige_encrypt(const(ubyte)*, ubyte*, c_ulong, const(aes_key_st)*, const(aes_key_st)*, const(ubyte)*, const(int)) @nogc nothrow;
    int AES_wrap_key(aes_key_st*, const(ubyte)*, ubyte*, const(ubyte)*, uint) @nogc nothrow;
    int AES_unwrap_key(aes_key_st*, const(ubyte)*, ubyte*, const(ubyte)*, uint) @nogc nothrow;
    int strerror_r(int, char*, c_ulong) @nogc nothrow;
    char* strerror(int) @nogc nothrow;
    c_ulong strnlen(const(char)*, c_ulong) @nogc nothrow;
    c_ulong strlen(const(char)*) @nogc nothrow;
    char* strtok_r(char*, const(char)*, char**) @nogc nothrow;
    char* __strtok_r(char*, const(char)*, char**) @nogc nothrow;
    char* strtok(char*, const(char)*) @nogc nothrow;
    char* strstr(const(char)*, const(char)*) @nogc nothrow;
    char* strpbrk(const(char)*, const(char)*) @nogc nothrow;
    c_ulong strspn(const(char)*, const(char)*) @nogc nothrow;
    c_ulong strcspn(const(char)*, const(char)*) @nogc nothrow;
    char* strrchr(const(char)*, int) @nogc nothrow;
    char* strchr(const(char)*, int) @nogc nothrow;
    char* strndup(const(char)*, c_ulong) @nogc nothrow;
    char* strdup(const(char)*) @nogc nothrow;
    c_ulong strxfrm_l(char*, const(char)*, c_ulong, __locale_struct*) @nogc nothrow;
    alias ASN1_ADB_TABLE = ASN1_ADB_TABLE_st;
    struct ASN1_ADB_TABLE_st
    {
        c_long value;
        const(ASN1_TEMPLATE_st) tt;
    }
    alias ASN1_ADB = ASN1_ADB_st;
    struct ASN1_ADB_st
    {
        c_ulong flags;
        c_ulong offset;
        int function(c_long*) adb_cb;
        const(ASN1_ADB_TABLE_st)* tbl;
        c_long tblcount;
        const(ASN1_TEMPLATE_st)* default_tt;
        const(ASN1_TEMPLATE_st)* null_tt;
    }
    int strcoll_l(const(char)*, const(char)*, __locale_struct*) @nogc nothrow;
    c_ulong strxfrm(char*, const(char)*, c_ulong) @nogc nothrow;
    int strcoll(const(char)*, const(char)*) @nogc nothrow;
    int strncmp(const(char)*, const(char)*, c_ulong) @nogc nothrow;
    int strcmp(const(char)*, const(char)*) @nogc nothrow;
    char* strncat(char*, const(char)*, c_ulong) @nogc nothrow;
    char* strcat(char*, const(char)*) @nogc nothrow;
    alias ASN1_ex_d2i = int function(ASN1_VALUE_st**, const(ubyte)**, c_long, const(ASN1_ITEM_st)*, int, int, char, ASN1_TLC_st*);
    alias ASN1_ex_i2d = int function(ASN1_VALUE_st**, ubyte**, const(ASN1_ITEM_st)*, int, int);
    alias ASN1_ex_new_func = int function(ASN1_VALUE_st**, const(ASN1_ITEM_st)*);
    alias ASN1_ex_free_func = void function(ASN1_VALUE_st**, const(ASN1_ITEM_st)*);
    alias ASN1_ex_print_func = int function(bio_st*, ASN1_VALUE_st**, int, const(char)*, const(asn1_pctx_st)*);
    alias ASN1_primitive_i2c = int function(ASN1_VALUE_st**, ubyte*, int*, const(ASN1_ITEM_st)*);
    alias ASN1_primitive_c2i = int function(ASN1_VALUE_st**, const(ubyte)*, int, int, char*, const(ASN1_ITEM_st)*);
    alias ASN1_primitive_print = int function(bio_st*, ASN1_VALUE_st**, const(ASN1_ITEM_st)*, int, const(asn1_pctx_st)*);
    alias ASN1_EXTERN_FUNCS = ASN1_EXTERN_FUNCS_st;
    struct ASN1_EXTERN_FUNCS_st
    {
        void* app_data;
        int function(ASN1_VALUE_st**, const(ASN1_ITEM_st)*) asn1_ex_new;
        void function(ASN1_VALUE_st**, const(ASN1_ITEM_st)*) asn1_ex_free;
        void function(ASN1_VALUE_st**, const(ASN1_ITEM_st)*) asn1_ex_clear;
        int function(ASN1_VALUE_st**, const(ubyte)**, c_long, const(ASN1_ITEM_st)*, int, int, char, ASN1_TLC_st*) asn1_ex_d2i;
        int function(ASN1_VALUE_st**, ubyte**, const(ASN1_ITEM_st)*, int, int) asn1_ex_i2d;
        int function(bio_st*, ASN1_VALUE_st**, int, const(char)*, const(asn1_pctx_st)*) asn1_ex_print;
    }
    alias ASN1_PRIMITIVE_FUNCS = ASN1_PRIMITIVE_FUNCS_st;
    struct ASN1_PRIMITIVE_FUNCS_st
    {
        void* app_data;
        c_ulong flags;
        int function(ASN1_VALUE_st**, const(ASN1_ITEM_st)*) prim_new;
        void function(ASN1_VALUE_st**, const(ASN1_ITEM_st)*) prim_free;
        void function(ASN1_VALUE_st**, const(ASN1_ITEM_st)*) prim_clear;
        int function(ASN1_VALUE_st**, const(ubyte)*, int, int, char*, const(ASN1_ITEM_st)*) prim_c2i;
        int function(ASN1_VALUE_st**, ubyte*, int*, const(ASN1_ITEM_st)*) prim_i2c;
        int function(bio_st*, ASN1_VALUE_st**, const(ASN1_ITEM_st)*, int, const(asn1_pctx_st)*) prim_print;
    }
    alias ASN1_aux_cb = int function(int, ASN1_VALUE_st**, const(ASN1_ITEM_st)*, void*);
    alias ASN1_AUX = ASN1_AUX_st;
    struct ASN1_AUX_st
    {
        void* app_data;
        int flags;
        int ref_offset;
        int ref_lock;
        int function(int, ASN1_VALUE_st**, const(ASN1_ITEM_st)*, void*) asn1_cb;
        int enc_offset;
    }
    alias ASN1_PRINT_ARG = ASN1_PRINT_ARG_st;
    struct ASN1_PRINT_ARG_st
    {
        bio_st* out_;
        int indent;
        const(asn1_pctx_st)* pctx;
    }
    alias ASN1_STREAM_ARG = ASN1_STREAM_ARG_st;
    struct ASN1_STREAM_ARG_st
    {
        bio_st* out_;
        bio_st* ndef_bio;
        ubyte** boundary;
    }
    char* strncpy(char*, const(char)*, c_ulong) @nogc nothrow;
    char* strcpy(char*, const(char)*) @nogc nothrow;
    void* memchr(const(void)*, int, c_ulong) @nogc nothrow;
    int memcmp(const(void)*, const(void)*, c_ulong) @nogc nothrow;
    void* memset(void*, int, c_ulong) @nogc nothrow;
    void* memccpy(void*, const(void)*, int, c_ulong) @nogc nothrow;
    void* memmove(void*, const(void)*, c_ulong) @nogc nothrow;
    void* memcpy(void*, const(void)*, c_ulong) @nogc nothrow;
    extern __gshared const(ASN1_ITEM_st) ASN1_BOOLEAN_it;
    extern __gshared const(ASN1_ITEM_st) ASN1_TBOOLEAN_it;
    extern __gshared const(ASN1_ITEM_st) ASN1_FBOOLEAN_it;
    extern __gshared const(ASN1_ITEM_st) ASN1_SEQUENCE_it;
    extern __gshared const(ASN1_ITEM_st) CBIGNUM_it;
    extern __gshared const(ASN1_ITEM_st) BIGNUM_it;
    extern __gshared const(ASN1_ITEM_st) LONG_it;
    extern __gshared const(ASN1_ITEM_st) ZLONG_it;
    static stack_st_ASN1_VALUE* sk_ASN1_VALUE_dup(const(stack_st_ASN1_VALUE)*) @nogc nothrow;
    alias sk_ASN1_VALUE_compfunc = int function(const(const(ASN1_VALUE_st)*)*, const(const(ASN1_VALUE_st)*)*);
    alias sk_ASN1_VALUE_freefunc = void function(ASN1_VALUE_st*);
    alias sk_ASN1_VALUE_copyfunc = ASN1_VALUE_st* function(const(ASN1_VALUE_st)*);
    static int sk_ASN1_VALUE_num(const(stack_st_ASN1_VALUE)*) @nogc nothrow;
    static ASN1_VALUE_st* sk_ASN1_VALUE_value(const(stack_st_ASN1_VALUE)*, int) @nogc nothrow;
    static stack_st_ASN1_VALUE* sk_ASN1_VALUE_new(int function(const(const(ASN1_VALUE_st)*)*, const(const(ASN1_VALUE_st)*)*)) @nogc nothrow;
    static stack_st_ASN1_VALUE* sk_ASN1_VALUE_new_null() @nogc nothrow;
    static int sk_ASN1_VALUE_reserve(stack_st_ASN1_VALUE*, int) @nogc nothrow;
    static void sk_ASN1_VALUE_free(stack_st_ASN1_VALUE*) @nogc nothrow;
    static void sk_ASN1_VALUE_zero(stack_st_ASN1_VALUE*) @nogc nothrow;
    static ASN1_VALUE_st* sk_ASN1_VALUE_delete(stack_st_ASN1_VALUE*, int) @nogc nothrow;
    static ASN1_VALUE_st* sk_ASN1_VALUE_delete_ptr(stack_st_ASN1_VALUE*, ASN1_VALUE_st*) @nogc nothrow;
    static int sk_ASN1_VALUE_push(stack_st_ASN1_VALUE*, ASN1_VALUE_st*) @nogc nothrow;
    static int sk_ASN1_VALUE_unshift(stack_st_ASN1_VALUE*, ASN1_VALUE_st*) @nogc nothrow;
    static ASN1_VALUE_st* sk_ASN1_VALUE_pop(stack_st_ASN1_VALUE*) @nogc nothrow;
    struct stack_st_ASN1_VALUE;
    static void sk_ASN1_VALUE_pop_free(stack_st_ASN1_VALUE*, void function(ASN1_VALUE_st*)) @nogc nothrow;
    static int sk_ASN1_VALUE_insert(stack_st_ASN1_VALUE*, ASN1_VALUE_st*, int) @nogc nothrow;
    static ASN1_VALUE_st* sk_ASN1_VALUE_shift(stack_st_ASN1_VALUE*) @nogc nothrow;
    static int sk_ASN1_VALUE_find(stack_st_ASN1_VALUE*, ASN1_VALUE_st*) @nogc nothrow;
    static int sk_ASN1_VALUE_find_ex(stack_st_ASN1_VALUE*, ASN1_VALUE_st*) @nogc nothrow;
    static void sk_ASN1_VALUE_sort(stack_st_ASN1_VALUE*) @nogc nothrow;
    static int sk_ASN1_VALUE_is_sorted(const(stack_st_ASN1_VALUE)*) @nogc nothrow;
    static stack_st_ASN1_VALUE* sk_ASN1_VALUE_deep_copy(const(stack_st_ASN1_VALUE)*, ASN1_VALUE_st* function(const(ASN1_VALUE_st)*), void function(ASN1_VALUE_st*)) @nogc nothrow;
    static int function(const(const(ASN1_VALUE_st)*)*, const(const(ASN1_VALUE_st)*)*) sk_ASN1_VALUE_set_cmp_func(stack_st_ASN1_VALUE*, int function(const(const(ASN1_VALUE_st)*)*, const(const(ASN1_VALUE_st)*)*)) @nogc nothrow;
    static stack_st_ASN1_VALUE* sk_ASN1_VALUE_new_reserve(int function(const(const(ASN1_VALUE_st)*)*, const(const(ASN1_VALUE_st)*)*), int) @nogc nothrow;
    static ASN1_VALUE_st* sk_ASN1_VALUE_set(stack_st_ASN1_VALUE*, int, ASN1_VALUE_st*) @nogc nothrow;
    int ASN1_item_ex_new(ASN1_VALUE_st**, const(ASN1_ITEM_st)*) @nogc nothrow;
    void ASN1_item_ex_free(ASN1_VALUE_st**, const(ASN1_ITEM_st)*) @nogc nothrow;
    int ASN1_item_ex_d2i(ASN1_VALUE_st**, const(ubyte)**, c_long, const(ASN1_ITEM_st)*, int, int, char, ASN1_TLC_st*) @nogc nothrow;
    int ASN1_item_ex_i2d(ASN1_VALUE_st**, ubyte**, const(ASN1_ITEM_st)*, int, int) @nogc nothrow;
    alias ASYNC_JOB = async_job_st;
    struct async_job_st;
    alias ASYNC_WAIT_CTX = async_wait_ctx_st;
    struct async_wait_ctx_st;
    int getloadavg(double*, int) @nogc nothrow;
    int ASYNC_init_thread(c_ulong, c_ulong) @nogc nothrow;
    void ASYNC_cleanup_thread() @nogc nothrow;
    async_wait_ctx_st* ASYNC_WAIT_CTX_new() @nogc nothrow;
    void ASYNC_WAIT_CTX_free(async_wait_ctx_st*) @nogc nothrow;
    int ASYNC_WAIT_CTX_set_wait_fd(async_wait_ctx_st*, const(void)*, int, void*, void function(async_wait_ctx_st*, const(void)*, int, void*)) @nogc nothrow;
    int ASYNC_WAIT_CTX_get_fd(async_wait_ctx_st*, const(void)*, int*, void**) @nogc nothrow;
    int ASYNC_WAIT_CTX_get_all_fds(async_wait_ctx_st*, int*, c_ulong*) @nogc nothrow;
    int ASYNC_WAIT_CTX_get_changed_fds(async_wait_ctx_st*, int*, c_ulong*, int*, c_ulong*) @nogc nothrow;
    int ASYNC_WAIT_CTX_clear_fd(async_wait_ctx_st*, const(void)*) @nogc nothrow;
    int ASYNC_is_capable() @nogc nothrow;
    int ASYNC_start_job(async_job_st**, async_wait_ctx_st*, int*, int function(void*), void*, c_ulong) @nogc nothrow;
    int ASYNC_pause_job() @nogc nothrow;
    async_job_st* ASYNC_get_current_job() @nogc nothrow;
    async_wait_ctx_st* ASYNC_get_wait_ctx(async_job_st*) @nogc nothrow;
    void ASYNC_block_pause() @nogc nothrow;
    void ASYNC_unblock_pause() @nogc nothrow;
    int ERR_load_ASYNC_strings() @nogc nothrow;
    int getsubopt(char**, char**, char**) @nogc nothrow;
    int rpmatch(const(char)*) @nogc nothrow;
    c_ulong wcstombs(char*, const(int)*, c_ulong) @nogc nothrow;
    alias BF_KEY = bf_key_st;
    struct bf_key_st
    {
        uint[18] P;
        uint[1024] S;
    }
    void BF_set_key(bf_key_st*, int, const(ubyte)*) @nogc nothrow;
    void BF_encrypt(uint*, const(bf_key_st)*) @nogc nothrow;
    void BF_decrypt(uint*, const(bf_key_st)*) @nogc nothrow;
    void BF_ecb_encrypt(const(ubyte)*, ubyte*, const(bf_key_st)*, int) @nogc nothrow;
    void BF_cbc_encrypt(const(ubyte)*, ubyte*, c_long, const(bf_key_st)*, ubyte*, int) @nogc nothrow;
    void BF_cfb64_encrypt(const(ubyte)*, ubyte*, c_long, const(bf_key_st)*, ubyte*, int*, int) @nogc nothrow;
    void BF_ofb64_encrypt(const(ubyte)*, ubyte*, c_long, const(bf_key_st)*, ubyte*, int*) @nogc nothrow;
    const(char)* BF_options() @nogc nothrow;
    c_ulong mbstowcs(int*, const(char)*, c_ulong) @nogc nothrow;
    int wctomb(char*, int) @nogc nothrow;
    int mbtowc(int*, const(char)*, c_ulong) @nogc nothrow;
    alias KEY_TABLE_TYPE = uint[68];
    struct camellia_key_st
    {
        static union _Anonymous_0
        {
            double d;
            uint[68] rd_key;
        }
        _Anonymous_0 u;
        int grand_rounds;
    }
    alias CAMELLIA_KEY = camellia_key_st;
    int Camellia_set_key(const(ubyte)*, const(int), camellia_key_st*) @nogc nothrow;
    void Camellia_encrypt(const(ubyte)*, ubyte*, const(camellia_key_st)*) @nogc nothrow;
    void Camellia_decrypt(const(ubyte)*, ubyte*, const(camellia_key_st)*) @nogc nothrow;
    void Camellia_ecb_encrypt(const(ubyte)*, ubyte*, const(camellia_key_st)*, const(int)) @nogc nothrow;
    void Camellia_cbc_encrypt(const(ubyte)*, ubyte*, c_ulong, const(camellia_key_st)*, ubyte*, const(int)) @nogc nothrow;
    void Camellia_cfb128_encrypt(const(ubyte)*, ubyte*, c_ulong, const(camellia_key_st)*, ubyte*, int*, const(int)) @nogc nothrow;
    void Camellia_cfb1_encrypt(const(ubyte)*, ubyte*, c_ulong, const(camellia_key_st)*, ubyte*, int*, const(int)) @nogc nothrow;
    void Camellia_cfb8_encrypt(const(ubyte)*, ubyte*, c_ulong, const(camellia_key_st)*, ubyte*, int*, const(int)) @nogc nothrow;
    void Camellia_ofb128_encrypt(const(ubyte)*, ubyte*, c_ulong, const(camellia_key_st)*, ubyte*, int*) @nogc nothrow;
    void Camellia_ctr128_encrypt(const(ubyte)*, ubyte*, c_ulong, const(camellia_key_st)*, ubyte*, ubyte*, uint*) @nogc nothrow;
    int mblen(const(char)*, c_ulong) @nogc nothrow;
    int qfcvt_r(real, int, int*, int*, char*, c_ulong) @nogc nothrow;
    alias CAST_KEY = cast_key_st;
    struct cast_key_st
    {
        uint[32] data;
        int short_key;
    }
    void CAST_set_key(cast_key_st*, int, const(ubyte)*) @nogc nothrow;
    void CAST_ecb_encrypt(const(ubyte)*, ubyte*, const(cast_key_st)*, int) @nogc nothrow;
    void CAST_encrypt(uint*, const(cast_key_st)*) @nogc nothrow;
    void CAST_decrypt(uint*, const(cast_key_st)*) @nogc nothrow;
    void CAST_cbc_encrypt(const(ubyte)*, ubyte*, c_long, const(cast_key_st)*, ubyte*, int) @nogc nothrow;
    void CAST_cfb64_encrypt(const(ubyte)*, ubyte*, c_long, const(cast_key_st)*, ubyte*, int*, int) @nogc nothrow;
    void CAST_ofb64_encrypt(const(ubyte)*, ubyte*, c_long, const(cast_key_st)*, ubyte*, int*) @nogc nothrow;
    int qecvt_r(real, int, int*, int*, char*, c_ulong) @nogc nothrow;
    alias CMAC_CTX = CMAC_CTX_st;
    struct CMAC_CTX_st;
    CMAC_CTX_st* CMAC_CTX_new() @nogc nothrow;
    void CMAC_CTX_cleanup(CMAC_CTX_st*) @nogc nothrow;
    void CMAC_CTX_free(CMAC_CTX_st*) @nogc nothrow;
    evp_cipher_ctx_st* CMAC_CTX_get0_cipher_ctx(CMAC_CTX_st*) @nogc nothrow;
    int CMAC_CTX_copy(CMAC_CTX_st*, const(CMAC_CTX_st)*) @nogc nothrow;
    int CMAC_Init(CMAC_CTX_st*, const(void)*, c_ulong, const(evp_cipher_st)*, engine_st*) @nogc nothrow;
    int CMAC_Update(CMAC_CTX_st*, const(void)*, c_ulong) @nogc nothrow;
    int CMAC_Final(CMAC_CTX_st*, ubyte*, c_ulong*) @nogc nothrow;
    int CMAC_resume(CMAC_CTX_st*) @nogc nothrow;
    alias CMS_ContentInfo = CMS_ContentInfo_st;
    struct CMS_ContentInfo_st;
    alias CMS_SignerInfo = CMS_SignerInfo_st;
    struct CMS_SignerInfo_st;
    struct CMS_CertificateChoices;
    alias CMS_RevocationInfoChoice = CMS_RevocationInfoChoice_st;
    struct CMS_RevocationInfoChoice_st;
    alias CMS_RecipientInfo = CMS_RecipientInfo_st;
    struct CMS_RecipientInfo_st;
    alias CMS_ReceiptRequest = CMS_ReceiptRequest_st;
    struct CMS_ReceiptRequest_st;
    alias CMS_Receipt = CMS_Receipt_st;
    struct CMS_Receipt_st;
    alias CMS_RecipientEncryptedKey = CMS_RecipientEncryptedKey_st;
    struct CMS_RecipientEncryptedKey_st;
    alias CMS_OtherKeyAttribute = CMS_OtherKeyAttribute_st;
    struct CMS_OtherKeyAttribute_st;
    static CMS_SignerInfo_st* sk_CMS_SignerInfo_delete_ptr(stack_st_CMS_SignerInfo*, CMS_SignerInfo_st*) @nogc nothrow;
    struct stack_st_CMS_SignerInfo;
    alias sk_CMS_SignerInfo_compfunc = int function(const(const(CMS_SignerInfo_st)*)*, const(const(CMS_SignerInfo_st)*)*);
    alias sk_CMS_SignerInfo_freefunc = void function(CMS_SignerInfo_st*);
    alias sk_CMS_SignerInfo_copyfunc = CMS_SignerInfo_st* function(const(CMS_SignerInfo_st)*);
    static int sk_CMS_SignerInfo_num(const(stack_st_CMS_SignerInfo)*) @nogc nothrow;
    static CMS_SignerInfo_st* sk_CMS_SignerInfo_value(const(stack_st_CMS_SignerInfo)*, int) @nogc nothrow;
    static stack_st_CMS_SignerInfo* sk_CMS_SignerInfo_new(int function(const(const(CMS_SignerInfo_st)*)*, const(const(CMS_SignerInfo_st)*)*)) @nogc nothrow;
    static stack_st_CMS_SignerInfo* sk_CMS_SignerInfo_new_null() @nogc nothrow;
    static stack_st_CMS_SignerInfo* sk_CMS_SignerInfo_new_reserve(int function(const(const(CMS_SignerInfo_st)*)*, const(const(CMS_SignerInfo_st)*)*), int) @nogc nothrow;
    static int sk_CMS_SignerInfo_reserve(stack_st_CMS_SignerInfo*, int) @nogc nothrow;
    static void sk_CMS_SignerInfo_zero(stack_st_CMS_SignerInfo*) @nogc nothrow;
    static void sk_CMS_SignerInfo_free(stack_st_CMS_SignerInfo*) @nogc nothrow;
    static CMS_SignerInfo_st* sk_CMS_SignerInfo_delete(stack_st_CMS_SignerInfo*, int) @nogc nothrow;
    static CMS_SignerInfo_st* sk_CMS_SignerInfo_set(stack_st_CMS_SignerInfo*, int, CMS_SignerInfo_st*) @nogc nothrow;
    static int function(const(const(CMS_SignerInfo_st)*)*, const(const(CMS_SignerInfo_st)*)*) sk_CMS_SignerInfo_set_cmp_func(stack_st_CMS_SignerInfo*, int function(const(const(CMS_SignerInfo_st)*)*, const(const(CMS_SignerInfo_st)*)*)) @nogc nothrow;
    static stack_st_CMS_SignerInfo* sk_CMS_SignerInfo_deep_copy(const(stack_st_CMS_SignerInfo)*, CMS_SignerInfo_st* function(const(CMS_SignerInfo_st)*), void function(CMS_SignerInfo_st*)) @nogc nothrow;
    static stack_st_CMS_SignerInfo* sk_CMS_SignerInfo_dup(const(stack_st_CMS_SignerInfo)*) @nogc nothrow;
    static int sk_CMS_SignerInfo_is_sorted(const(stack_st_CMS_SignerInfo)*) @nogc nothrow;
    static void sk_CMS_SignerInfo_sort(stack_st_CMS_SignerInfo*) @nogc nothrow;
    static int sk_CMS_SignerInfo_find_ex(stack_st_CMS_SignerInfo*, CMS_SignerInfo_st*) @nogc nothrow;
    static int sk_CMS_SignerInfo_push(stack_st_CMS_SignerInfo*, CMS_SignerInfo_st*) @nogc nothrow;
    static int sk_CMS_SignerInfo_insert(stack_st_CMS_SignerInfo*, CMS_SignerInfo_st*, int) @nogc nothrow;
    static void sk_CMS_SignerInfo_pop_free(stack_st_CMS_SignerInfo*, void function(CMS_SignerInfo_st*)) @nogc nothrow;
    static CMS_SignerInfo_st* sk_CMS_SignerInfo_shift(stack_st_CMS_SignerInfo*) @nogc nothrow;
    static CMS_SignerInfo_st* sk_CMS_SignerInfo_pop(stack_st_CMS_SignerInfo*) @nogc nothrow;
    static int sk_CMS_SignerInfo_unshift(stack_st_CMS_SignerInfo*, CMS_SignerInfo_st*) @nogc nothrow;
    static int sk_CMS_SignerInfo_find(stack_st_CMS_SignerInfo*, CMS_SignerInfo_st*) @nogc nothrow;
    static int function(const(const(CMS_RecipientEncryptedKey_st)*)*, const(const(CMS_RecipientEncryptedKey_st)*)*) sk_CMS_RecipientEncryptedKey_set_cmp_func(stack_st_CMS_RecipientEncryptedKey*, int function(const(const(CMS_RecipientEncryptedKey_st)*)*, const(const(CMS_RecipientEncryptedKey_st)*)*)) @nogc nothrow;
    static stack_st_CMS_RecipientEncryptedKey* sk_CMS_RecipientEncryptedKey_new_null() @nogc nothrow;
    static stack_st_CMS_RecipientEncryptedKey* sk_CMS_RecipientEncryptedKey_new_reserve(int function(const(const(CMS_RecipientEncryptedKey_st)*)*, const(const(CMS_RecipientEncryptedKey_st)*)*), int) @nogc nothrow;
    static int sk_CMS_RecipientEncryptedKey_reserve(stack_st_CMS_RecipientEncryptedKey*, int) @nogc nothrow;
    static void sk_CMS_RecipientEncryptedKey_free(stack_st_CMS_RecipientEncryptedKey*) @nogc nothrow;
    static void sk_CMS_RecipientEncryptedKey_zero(stack_st_CMS_RecipientEncryptedKey*) @nogc nothrow;
    static CMS_RecipientEncryptedKey_st* sk_CMS_RecipientEncryptedKey_delete(stack_st_CMS_RecipientEncryptedKey*, int) @nogc nothrow;
    static CMS_RecipientEncryptedKey_st* sk_CMS_RecipientEncryptedKey_delete_ptr(stack_st_CMS_RecipientEncryptedKey*, CMS_RecipientEncryptedKey_st*) @nogc nothrow;
    static int sk_CMS_RecipientEncryptedKey_push(stack_st_CMS_RecipientEncryptedKey*, CMS_RecipientEncryptedKey_st*) @nogc nothrow;
    static stack_st_CMS_RecipientEncryptedKey* sk_CMS_RecipientEncryptedKey_new(int function(const(const(CMS_RecipientEncryptedKey_st)*)*, const(const(CMS_RecipientEncryptedKey_st)*)*)) @nogc nothrow;
    static CMS_RecipientEncryptedKey_st* sk_CMS_RecipientEncryptedKey_value(const(stack_st_CMS_RecipientEncryptedKey)*, int) @nogc nothrow;
    static int sk_CMS_RecipientEncryptedKey_num(const(stack_st_CMS_RecipientEncryptedKey)*) @nogc nothrow;
    static int sk_CMS_RecipientEncryptedKey_unshift(stack_st_CMS_RecipientEncryptedKey*, CMS_RecipientEncryptedKey_st*) @nogc nothrow;
    static CMS_RecipientEncryptedKey_st* sk_CMS_RecipientEncryptedKey_pop(stack_st_CMS_RecipientEncryptedKey*) @nogc nothrow;
    static CMS_RecipientEncryptedKey_st* sk_CMS_RecipientEncryptedKey_shift(stack_st_CMS_RecipientEncryptedKey*) @nogc nothrow;
    static void sk_CMS_RecipientEncryptedKey_pop_free(stack_st_CMS_RecipientEncryptedKey*, void function(CMS_RecipientEncryptedKey_st*)) @nogc nothrow;
    static int sk_CMS_RecipientEncryptedKey_insert(stack_st_CMS_RecipientEncryptedKey*, CMS_RecipientEncryptedKey_st*, int) @nogc nothrow;
    static CMS_RecipientEncryptedKey_st* sk_CMS_RecipientEncryptedKey_set(stack_st_CMS_RecipientEncryptedKey*, int, CMS_RecipientEncryptedKey_st*) @nogc nothrow;
    static int sk_CMS_RecipientEncryptedKey_find(stack_st_CMS_RecipientEncryptedKey*, CMS_RecipientEncryptedKey_st*) @nogc nothrow;
    static int sk_CMS_RecipientEncryptedKey_find_ex(stack_st_CMS_RecipientEncryptedKey*, CMS_RecipientEncryptedKey_st*) @nogc nothrow;
    static void sk_CMS_RecipientEncryptedKey_sort(stack_st_CMS_RecipientEncryptedKey*) @nogc nothrow;
    static stack_st_CMS_RecipientEncryptedKey* sk_CMS_RecipientEncryptedKey_dup(const(stack_st_CMS_RecipientEncryptedKey)*) @nogc nothrow;
    static int sk_CMS_RecipientEncryptedKey_is_sorted(const(stack_st_CMS_RecipientEncryptedKey)*) @nogc nothrow;
    static stack_st_CMS_RecipientEncryptedKey* sk_CMS_RecipientEncryptedKey_deep_copy(const(stack_st_CMS_RecipientEncryptedKey)*, CMS_RecipientEncryptedKey_st* function(const(CMS_RecipientEncryptedKey_st)*), void function(CMS_RecipientEncryptedKey_st*)) @nogc nothrow;
    alias sk_CMS_RecipientEncryptedKey_copyfunc = CMS_RecipientEncryptedKey_st* function(const(CMS_RecipientEncryptedKey_st)*);
    alias sk_CMS_RecipientEncryptedKey_freefunc = void function(CMS_RecipientEncryptedKey_st*);
    alias sk_CMS_RecipientEncryptedKey_compfunc = int function(const(const(CMS_RecipientEncryptedKey_st)*)*, const(const(CMS_RecipientEncryptedKey_st)*)*);
    struct stack_st_CMS_RecipientEncryptedKey;
    static int sk_CMS_RecipientInfo_reserve(stack_st_CMS_RecipientInfo*, int) @nogc nothrow;
    static void sk_CMS_RecipientInfo_free(stack_st_CMS_RecipientInfo*) @nogc nothrow;
    static void sk_CMS_RecipientInfo_zero(stack_st_CMS_RecipientInfo*) @nogc nothrow;
    static CMS_RecipientInfo_st* sk_CMS_RecipientInfo_delete(stack_st_CMS_RecipientInfo*, int) @nogc nothrow;
    static CMS_RecipientInfo_st* sk_CMS_RecipientInfo_delete_ptr(stack_st_CMS_RecipientInfo*, CMS_RecipientInfo_st*) @nogc nothrow;
    static int sk_CMS_RecipientInfo_push(stack_st_CMS_RecipientInfo*, CMS_RecipientInfo_st*) @nogc nothrow;
    static int sk_CMS_RecipientInfo_unshift(stack_st_CMS_RecipientInfo*, CMS_RecipientInfo_st*) @nogc nothrow;
    static CMS_RecipientInfo_st* sk_CMS_RecipientInfo_pop(stack_st_CMS_RecipientInfo*) @nogc nothrow;
    static CMS_RecipientInfo_st* sk_CMS_RecipientInfo_shift(stack_st_CMS_RecipientInfo*) @nogc nothrow;
    static void sk_CMS_RecipientInfo_pop_free(stack_st_CMS_RecipientInfo*, void function(CMS_RecipientInfo_st*)) @nogc nothrow;
    static int sk_CMS_RecipientInfo_insert(stack_st_CMS_RecipientInfo*, CMS_RecipientInfo_st*, int) @nogc nothrow;
    static CMS_RecipientInfo_st* sk_CMS_RecipientInfo_set(stack_st_CMS_RecipientInfo*, int, CMS_RecipientInfo_st*) @nogc nothrow;
    static int sk_CMS_RecipientInfo_find(stack_st_CMS_RecipientInfo*, CMS_RecipientInfo_st*) @nogc nothrow;
    static int sk_CMS_RecipientInfo_find_ex(stack_st_CMS_RecipientInfo*, CMS_RecipientInfo_st*) @nogc nothrow;
    static void sk_CMS_RecipientInfo_sort(stack_st_CMS_RecipientInfo*) @nogc nothrow;
    static int sk_CMS_RecipientInfo_is_sorted(const(stack_st_CMS_RecipientInfo)*) @nogc nothrow;
    static stack_st_CMS_RecipientInfo* sk_CMS_RecipientInfo_dup(const(stack_st_CMS_RecipientInfo)*) @nogc nothrow;
    static stack_st_CMS_RecipientInfo* sk_CMS_RecipientInfo_deep_copy(const(stack_st_CMS_RecipientInfo)*, CMS_RecipientInfo_st* function(const(CMS_RecipientInfo_st)*), void function(CMS_RecipientInfo_st*)) @nogc nothrow;
    static stack_st_CMS_RecipientInfo* sk_CMS_RecipientInfo_new_null() @nogc nothrow;
    static stack_st_CMS_RecipientInfo* sk_CMS_RecipientInfo_new_reserve(int function(const(const(CMS_RecipientInfo_st)*)*, const(const(CMS_RecipientInfo_st)*)*), int) @nogc nothrow;
    static stack_st_CMS_RecipientInfo* sk_CMS_RecipientInfo_new(int function(const(const(CMS_RecipientInfo_st)*)*, const(const(CMS_RecipientInfo_st)*)*)) @nogc nothrow;
    static int sk_CMS_RecipientInfo_num(const(stack_st_CMS_RecipientInfo)*) @nogc nothrow;
    alias sk_CMS_RecipientInfo_copyfunc = CMS_RecipientInfo_st* function(const(CMS_RecipientInfo_st)*);
    alias sk_CMS_RecipientInfo_freefunc = void function(CMS_RecipientInfo_st*);
    alias sk_CMS_RecipientInfo_compfunc = int function(const(const(CMS_RecipientInfo_st)*)*, const(const(CMS_RecipientInfo_st)*)*);
    struct stack_st_CMS_RecipientInfo;
    static CMS_RecipientInfo_st* sk_CMS_RecipientInfo_value(const(stack_st_CMS_RecipientInfo)*, int) @nogc nothrow;
    static int function(const(const(CMS_RecipientInfo_st)*)*, const(const(CMS_RecipientInfo_st)*)*) sk_CMS_RecipientInfo_set_cmp_func(stack_st_CMS_RecipientInfo*, int function(const(const(CMS_RecipientInfo_st)*)*, const(const(CMS_RecipientInfo_st)*)*)) @nogc nothrow;
    static int sk_CMS_RevocationInfoChoice_find(stack_st_CMS_RevocationInfoChoice*, CMS_RevocationInfoChoice_st*) @nogc nothrow;
    static int sk_CMS_RevocationInfoChoice_find_ex(stack_st_CMS_RevocationInfoChoice*, CMS_RevocationInfoChoice_st*) @nogc nothrow;
    static void sk_CMS_RevocationInfoChoice_sort(stack_st_CMS_RevocationInfoChoice*) @nogc nothrow;
    static int sk_CMS_RevocationInfoChoice_is_sorted(const(stack_st_CMS_RevocationInfoChoice)*) @nogc nothrow;
    static stack_st_CMS_RevocationInfoChoice* sk_CMS_RevocationInfoChoice_dup(const(stack_st_CMS_RevocationInfoChoice)*) @nogc nothrow;
    static stack_st_CMS_RevocationInfoChoice* sk_CMS_RevocationInfoChoice_deep_copy(const(stack_st_CMS_RevocationInfoChoice)*, CMS_RevocationInfoChoice_st* function(const(CMS_RevocationInfoChoice_st)*), void function(CMS_RevocationInfoChoice_st*)) @nogc nothrow;
    static int function(const(const(CMS_RevocationInfoChoice_st)*)*, const(const(CMS_RevocationInfoChoice_st)*)*) sk_CMS_RevocationInfoChoice_set_cmp_func(stack_st_CMS_RevocationInfoChoice*, int function(const(const(CMS_RevocationInfoChoice_st)*)*, const(const(CMS_RevocationInfoChoice_st)*)*)) @nogc nothrow;
    static CMS_RevocationInfoChoice_st* sk_CMS_RevocationInfoChoice_set(stack_st_CMS_RevocationInfoChoice*, int, CMS_RevocationInfoChoice_st*) @nogc nothrow;
    static int sk_CMS_RevocationInfoChoice_insert(stack_st_CMS_RevocationInfoChoice*, CMS_RevocationInfoChoice_st*, int) @nogc nothrow;
    static void sk_CMS_RevocationInfoChoice_pop_free(stack_st_CMS_RevocationInfoChoice*, void function(CMS_RevocationInfoChoice_st*)) @nogc nothrow;
    static CMS_RevocationInfoChoice_st* sk_CMS_RevocationInfoChoice_shift(stack_st_CMS_RevocationInfoChoice*) @nogc nothrow;
    static CMS_RevocationInfoChoice_st* sk_CMS_RevocationInfoChoice_pop(stack_st_CMS_RevocationInfoChoice*) @nogc nothrow;
    static int sk_CMS_RevocationInfoChoice_unshift(stack_st_CMS_RevocationInfoChoice*, CMS_RevocationInfoChoice_st*) @nogc nothrow;
    static int sk_CMS_RevocationInfoChoice_push(stack_st_CMS_RevocationInfoChoice*, CMS_RevocationInfoChoice_st*) @nogc nothrow;
    static CMS_RevocationInfoChoice_st* sk_CMS_RevocationInfoChoice_delete_ptr(stack_st_CMS_RevocationInfoChoice*, CMS_RevocationInfoChoice_st*) @nogc nothrow;
    static CMS_RevocationInfoChoice_st* sk_CMS_RevocationInfoChoice_delete(stack_st_CMS_RevocationInfoChoice*, int) @nogc nothrow;
    static void sk_CMS_RevocationInfoChoice_zero(stack_st_CMS_RevocationInfoChoice*) @nogc nothrow;
    struct stack_st_CMS_RevocationInfoChoice;
    alias sk_CMS_RevocationInfoChoice_compfunc = int function(const(const(CMS_RevocationInfoChoice_st)*)*, const(const(CMS_RevocationInfoChoice_st)*)*);
    alias sk_CMS_RevocationInfoChoice_freefunc = void function(CMS_RevocationInfoChoice_st*);
    alias sk_CMS_RevocationInfoChoice_copyfunc = CMS_RevocationInfoChoice_st* function(const(CMS_RevocationInfoChoice_st)*);
    static int sk_CMS_RevocationInfoChoice_num(const(stack_st_CMS_RevocationInfoChoice)*) @nogc nothrow;
    static CMS_RevocationInfoChoice_st* sk_CMS_RevocationInfoChoice_value(const(stack_st_CMS_RevocationInfoChoice)*, int) @nogc nothrow;
    static stack_st_CMS_RevocationInfoChoice* sk_CMS_RevocationInfoChoice_new(int function(const(const(CMS_RevocationInfoChoice_st)*)*, const(const(CMS_RevocationInfoChoice_st)*)*)) @nogc nothrow;
    static void sk_CMS_RevocationInfoChoice_free(stack_st_CMS_RevocationInfoChoice*) @nogc nothrow;
    static stack_st_CMS_RevocationInfoChoice* sk_CMS_RevocationInfoChoice_new_reserve(int function(const(const(CMS_RevocationInfoChoice_st)*)*, const(const(CMS_RevocationInfoChoice_st)*)*), int) @nogc nothrow;
    static int sk_CMS_RevocationInfoChoice_reserve(stack_st_CMS_RevocationInfoChoice*, int) @nogc nothrow;
    static stack_st_CMS_RevocationInfoChoice* sk_CMS_RevocationInfoChoice_new_null() @nogc nothrow;
    extern __gshared const(ASN1_ITEM_st) CMS_ContentInfo_it;
    void CMS_ContentInfo_free(CMS_ContentInfo_st*) @nogc nothrow;
    int i2d_CMS_ContentInfo(CMS_ContentInfo_st*, ubyte**) @nogc nothrow;
    CMS_ContentInfo_st* d2i_CMS_ContentInfo(CMS_ContentInfo_st**, const(ubyte)**, c_long) @nogc nothrow;
    CMS_ContentInfo_st* CMS_ContentInfo_new() @nogc nothrow;
    void CMS_ReceiptRequest_free(CMS_ReceiptRequest_st*) @nogc nothrow;
    int i2d_CMS_ReceiptRequest(CMS_ReceiptRequest_st*, ubyte**) @nogc nothrow;
    extern __gshared const(ASN1_ITEM_st) CMS_ReceiptRequest_it;
    CMS_ReceiptRequest_st* CMS_ReceiptRequest_new() @nogc nothrow;
    CMS_ReceiptRequest_st* d2i_CMS_ReceiptRequest(CMS_ReceiptRequest_st**, const(ubyte)**, c_long) @nogc nothrow;
    int CMS_ContentInfo_print_ctx(bio_st*, CMS_ContentInfo_st*, int, const(asn1_pctx_st)*) @nogc nothrow;
    int fcvt_r(double, int, int*, int*, char*, c_ulong) @nogc nothrow;
    int ecvt_r(double, int, int*, int*, char*, c_ulong) @nogc nothrow;
    char* qgcvt(real, int, char*) @nogc nothrow;
    char* qfcvt(real, int, int*, int*) @nogc nothrow;
    char* qecvt(real, int, int*, int*) @nogc nothrow;
    char* gcvt(double, int, char*) @nogc nothrow;
    char* fcvt(double, int, int*, int*) @nogc nothrow;
    char* ecvt(double, int, int*, int*) @nogc nothrow;
    const(asn1_object_st)* CMS_get0_type(const(CMS_ContentInfo_st)*) @nogc nothrow;
    bio_st* CMS_dataInit(CMS_ContentInfo_st*, bio_st*) @nogc nothrow;
    int CMS_dataFinal(CMS_ContentInfo_st*, bio_st*) @nogc nothrow;
    asn1_string_st** CMS_get0_content(CMS_ContentInfo_st*) @nogc nothrow;
    int CMS_is_detached(CMS_ContentInfo_st*) @nogc nothrow;
    int CMS_set_detached(CMS_ContentInfo_st*, int) @nogc nothrow;
    int PEM_write_bio_CMS(bio_st*, const(CMS_ContentInfo_st)*) @nogc nothrow;
    int PEM_write_CMS(_IO_FILE*, const(CMS_ContentInfo_st)*) @nogc nothrow;
    CMS_ContentInfo_st* PEM_read_bio_CMS(bio_st*, CMS_ContentInfo_st**, int function(char*, int, int, void*), void*) @nogc nothrow;
    CMS_ContentInfo_st* PEM_read_CMS(_IO_FILE*, CMS_ContentInfo_st**, int function(char*, int, int, void*), void*) @nogc nothrow;
    int CMS_stream(ubyte***, CMS_ContentInfo_st*) @nogc nothrow;
    CMS_ContentInfo_st* d2i_CMS_bio(bio_st*, CMS_ContentInfo_st**) @nogc nothrow;
    int i2d_CMS_bio(bio_st*, CMS_ContentInfo_st*) @nogc nothrow;
    bio_st* BIO_new_CMS(bio_st*, CMS_ContentInfo_st*) @nogc nothrow;
    int i2d_CMS_bio_stream(bio_st*, CMS_ContentInfo_st*, bio_st*, int) @nogc nothrow;
    int PEM_write_bio_CMS_stream(bio_st*, CMS_ContentInfo_st*, bio_st*, int) @nogc nothrow;
    CMS_ContentInfo_st* SMIME_read_CMS(bio_st*, bio_st**) @nogc nothrow;
    int SMIME_write_CMS(bio_st*, CMS_ContentInfo_st*, bio_st*, int) @nogc nothrow;
    int CMS_final(CMS_ContentInfo_st*, bio_st*, bio_st*, uint) @nogc nothrow;
    CMS_ContentInfo_st* CMS_sign(x509_st*, evp_pkey_st*, stack_st_X509*, bio_st*, uint) @nogc nothrow;
    CMS_ContentInfo_st* CMS_sign_receipt(CMS_SignerInfo_st*, x509_st*, evp_pkey_st*, stack_st_X509*, uint) @nogc nothrow;
    int CMS_data(CMS_ContentInfo_st*, bio_st*, uint) @nogc nothrow;
    CMS_ContentInfo_st* CMS_data_create(bio_st*, uint) @nogc nothrow;
    int CMS_digest_verify(CMS_ContentInfo_st*, bio_st*, bio_st*, uint) @nogc nothrow;
    CMS_ContentInfo_st* CMS_digest_create(bio_st*, const(evp_md_st)*, uint) @nogc nothrow;
    int CMS_EncryptedData_decrypt(CMS_ContentInfo_st*, const(ubyte)*, c_ulong, bio_st*, bio_st*, uint) @nogc nothrow;
    CMS_ContentInfo_st* CMS_EncryptedData_encrypt(bio_st*, const(evp_cipher_st)*, const(ubyte)*, c_ulong, uint) @nogc nothrow;
    int CMS_EncryptedData_set1_key(CMS_ContentInfo_st*, const(evp_cipher_st)*, const(ubyte)*, c_ulong) @nogc nothrow;
    int CMS_verify(CMS_ContentInfo_st*, stack_st_X509*, x509_store_st*, bio_st*, bio_st*, uint) @nogc nothrow;
    int CMS_verify_receipt(CMS_ContentInfo_st*, CMS_ContentInfo_st*, stack_st_X509*, x509_store_st*, uint) @nogc nothrow;
    stack_st_X509* CMS_get0_signers(CMS_ContentInfo_st*) @nogc nothrow;
    CMS_ContentInfo_st* CMS_encrypt(stack_st_X509*, bio_st*, const(evp_cipher_st)*, uint) @nogc nothrow;
    int CMS_decrypt(CMS_ContentInfo_st*, evp_pkey_st*, x509_st*, bio_st*, bio_st*, uint) @nogc nothrow;
    int CMS_decrypt_set1_pkey(CMS_ContentInfo_st*, evp_pkey_st*, x509_st*) @nogc nothrow;
    int CMS_decrypt_set1_key(CMS_ContentInfo_st*, ubyte*, c_ulong, const(ubyte)*, c_ulong) @nogc nothrow;
    int CMS_decrypt_set1_password(CMS_ContentInfo_st*, ubyte*, c_long) @nogc nothrow;
    stack_st_CMS_RecipientInfo* CMS_get0_RecipientInfos(CMS_ContentInfo_st*) @nogc nothrow;
    int CMS_RecipientInfo_type(CMS_RecipientInfo_st*) @nogc nothrow;
    evp_pkey_ctx_st* CMS_RecipientInfo_get0_pkey_ctx(CMS_RecipientInfo_st*) @nogc nothrow;
    CMS_ContentInfo_st* CMS_EnvelopedData_create(const(evp_cipher_st)*) @nogc nothrow;
    CMS_RecipientInfo_st* CMS_add1_recipient_cert(CMS_ContentInfo_st*, x509_st*, uint) @nogc nothrow;
    int CMS_RecipientInfo_set0_pkey(CMS_RecipientInfo_st*, evp_pkey_st*) @nogc nothrow;
    int CMS_RecipientInfo_ktri_cert_cmp(CMS_RecipientInfo_st*, x509_st*) @nogc nothrow;
    int CMS_RecipientInfo_ktri_get0_algs(CMS_RecipientInfo_st*, evp_pkey_st**, x509_st**, X509_algor_st**) @nogc nothrow;
    int CMS_RecipientInfo_ktri_get0_signer_id(CMS_RecipientInfo_st*, asn1_string_st**, X509_name_st**, asn1_string_st**) @nogc nothrow;
    CMS_RecipientInfo_st* CMS_add0_recipient_key(CMS_ContentInfo_st*, int, ubyte*, c_ulong, ubyte*, c_ulong, asn1_string_st*, asn1_object_st*, asn1_type_st*) @nogc nothrow;
    int CMS_RecipientInfo_kekri_get0_id(CMS_RecipientInfo_st*, X509_algor_st**, asn1_string_st**, asn1_string_st**, asn1_object_st**, asn1_type_st**) @nogc nothrow;
    int CMS_RecipientInfo_set0_key(CMS_RecipientInfo_st*, ubyte*, c_ulong) @nogc nothrow;
    int CMS_RecipientInfo_kekri_id_cmp(CMS_RecipientInfo_st*, const(ubyte)*, c_ulong) @nogc nothrow;
    int CMS_RecipientInfo_set0_password(CMS_RecipientInfo_st*, ubyte*, c_long) @nogc nothrow;
    CMS_RecipientInfo_st* CMS_add0_recipient_password(CMS_ContentInfo_st*, int, int, int, ubyte*, c_long, const(evp_cipher_st)*) @nogc nothrow;
    int CMS_RecipientInfo_decrypt(CMS_ContentInfo_st*, CMS_RecipientInfo_st*) @nogc nothrow;
    int CMS_RecipientInfo_encrypt(CMS_ContentInfo_st*, CMS_RecipientInfo_st*) @nogc nothrow;
    int CMS_uncompress(CMS_ContentInfo_st*, bio_st*, bio_st*, uint) @nogc nothrow;
    CMS_ContentInfo_st* CMS_compress(bio_st*, int, uint) @nogc nothrow;
    int CMS_set1_eContentType(CMS_ContentInfo_st*, const(asn1_object_st)*) @nogc nothrow;
    const(asn1_object_st)* CMS_get0_eContentType(CMS_ContentInfo_st*) @nogc nothrow;
    CMS_CertificateChoices* CMS_add0_CertificateChoices(CMS_ContentInfo_st*) @nogc nothrow;
    int CMS_add0_cert(CMS_ContentInfo_st*, x509_st*) @nogc nothrow;
    int CMS_add1_cert(CMS_ContentInfo_st*, x509_st*) @nogc nothrow;
    stack_st_X509* CMS_get1_certs(CMS_ContentInfo_st*) @nogc nothrow;
    CMS_RevocationInfoChoice_st* CMS_add0_RevocationInfoChoice(CMS_ContentInfo_st*) @nogc nothrow;
    int CMS_add0_crl(CMS_ContentInfo_st*, X509_crl_st*) @nogc nothrow;
    int CMS_add1_crl(CMS_ContentInfo_st*, X509_crl_st*) @nogc nothrow;
    stack_st_X509_CRL* CMS_get1_crls(CMS_ContentInfo_st*) @nogc nothrow;
    int CMS_SignedData_init(CMS_ContentInfo_st*) @nogc nothrow;
    CMS_SignerInfo_st* CMS_add1_signer(CMS_ContentInfo_st*, x509_st*, evp_pkey_st*, const(evp_md_st)*, uint) @nogc nothrow;
    evp_pkey_ctx_st* CMS_SignerInfo_get0_pkey_ctx(CMS_SignerInfo_st*) @nogc nothrow;
    evp_md_ctx_st* CMS_SignerInfo_get0_md_ctx(CMS_SignerInfo_st*) @nogc nothrow;
    stack_st_CMS_SignerInfo* CMS_get0_SignerInfos(CMS_ContentInfo_st*) @nogc nothrow;
    void CMS_SignerInfo_set1_signer_cert(CMS_SignerInfo_st*, x509_st*) @nogc nothrow;
    int CMS_SignerInfo_get0_signer_id(CMS_SignerInfo_st*, asn1_string_st**, X509_name_st**, asn1_string_st**) @nogc nothrow;
    int CMS_SignerInfo_cert_cmp(CMS_SignerInfo_st*, x509_st*) @nogc nothrow;
    int CMS_set1_signers_certs(CMS_ContentInfo_st*, stack_st_X509*, uint) @nogc nothrow;
    void CMS_SignerInfo_get0_algs(CMS_SignerInfo_st*, evp_pkey_st**, x509_st**, X509_algor_st**, X509_algor_st**) @nogc nothrow;
    asn1_string_st* CMS_SignerInfo_get0_signature(CMS_SignerInfo_st*) @nogc nothrow;
    int CMS_SignerInfo_sign(CMS_SignerInfo_st*) @nogc nothrow;
    int CMS_SignerInfo_verify(CMS_SignerInfo_st*) @nogc nothrow;
    int CMS_SignerInfo_verify_content(CMS_SignerInfo_st*, bio_st*) @nogc nothrow;
    int CMS_add_smimecap(CMS_SignerInfo_st*, stack_st_X509_ALGOR*) @nogc nothrow;
    int CMS_add_simple_smimecap(stack_st_X509_ALGOR**, int, int) @nogc nothrow;
    int CMS_add_standard_smimecap(stack_st_X509_ALGOR**) @nogc nothrow;
    int CMS_signed_get_attr_count(const(CMS_SignerInfo_st)*) @nogc nothrow;
    int CMS_signed_get_attr_by_NID(const(CMS_SignerInfo_st)*, int, int) @nogc nothrow;
    int CMS_signed_get_attr_by_OBJ(const(CMS_SignerInfo_st)*, const(asn1_object_st)*, int) @nogc nothrow;
    x509_attributes_st* CMS_signed_get_attr(const(CMS_SignerInfo_st)*, int) @nogc nothrow;
    x509_attributes_st* CMS_signed_delete_attr(CMS_SignerInfo_st*, int) @nogc nothrow;
    int CMS_signed_add1_attr(CMS_SignerInfo_st*, x509_attributes_st*) @nogc nothrow;
    int CMS_signed_add1_attr_by_OBJ(CMS_SignerInfo_st*, const(asn1_object_st)*, int, const(void)*, int) @nogc nothrow;
    int CMS_signed_add1_attr_by_NID(CMS_SignerInfo_st*, int, int, const(void)*, int) @nogc nothrow;
    int CMS_signed_add1_attr_by_txt(CMS_SignerInfo_st*, const(char)*, int, const(void)*, int) @nogc nothrow;
    void* CMS_signed_get0_data_by_OBJ(CMS_SignerInfo_st*, const(asn1_object_st)*, int, int) @nogc nothrow;
    int CMS_unsigned_get_attr_count(const(CMS_SignerInfo_st)*) @nogc nothrow;
    int CMS_unsigned_get_attr_by_NID(const(CMS_SignerInfo_st)*, int, int) @nogc nothrow;
    int CMS_unsigned_get_attr_by_OBJ(const(CMS_SignerInfo_st)*, const(asn1_object_st)*, int) @nogc nothrow;
    x509_attributes_st* CMS_unsigned_get_attr(const(CMS_SignerInfo_st)*, int) @nogc nothrow;
    x509_attributes_st* CMS_unsigned_delete_attr(CMS_SignerInfo_st*, int) @nogc nothrow;
    int CMS_unsigned_add1_attr(CMS_SignerInfo_st*, x509_attributes_st*) @nogc nothrow;
    int CMS_unsigned_add1_attr_by_OBJ(CMS_SignerInfo_st*, const(asn1_object_st)*, int, const(void)*, int) @nogc nothrow;
    int CMS_unsigned_add1_attr_by_NID(CMS_SignerInfo_st*, int, int, const(void)*, int) @nogc nothrow;
    int CMS_unsigned_add1_attr_by_txt(CMS_SignerInfo_st*, const(char)*, int, const(void)*, int) @nogc nothrow;
    void* CMS_unsigned_get0_data_by_OBJ(CMS_SignerInfo_st*, asn1_object_st*, int, int) @nogc nothrow;
    int CMS_get1_ReceiptRequest(CMS_SignerInfo_st*, CMS_ReceiptRequest_st**) @nogc nothrow;
    CMS_ReceiptRequest_st* CMS_ReceiptRequest_create0(ubyte*, int, int, stack_st_GENERAL_NAMES*, stack_st_GENERAL_NAMES*) @nogc nothrow;
    int CMS_add1_ReceiptRequest(CMS_SignerInfo_st*, CMS_ReceiptRequest_st*) @nogc nothrow;
    void CMS_ReceiptRequest_get0_values(CMS_ReceiptRequest_st*, asn1_string_st**, int*, stack_st_GENERAL_NAMES**, stack_st_GENERAL_NAMES**) @nogc nothrow;
    int CMS_RecipientInfo_kari_get0_alg(CMS_RecipientInfo_st*, X509_algor_st**, asn1_string_st**) @nogc nothrow;
    stack_st_CMS_RecipientEncryptedKey* CMS_RecipientInfo_kari_get0_reks(CMS_RecipientInfo_st*) @nogc nothrow;
    int CMS_RecipientInfo_kari_get0_orig_id(CMS_RecipientInfo_st*, X509_algor_st**, asn1_string_st**, asn1_string_st**, X509_name_st**, asn1_string_st**) @nogc nothrow;
    int CMS_RecipientInfo_kari_orig_id_cmp(CMS_RecipientInfo_st*, x509_st*) @nogc nothrow;
    int CMS_RecipientEncryptedKey_get0_id(CMS_RecipientEncryptedKey_st*, asn1_string_st**, asn1_string_st**, CMS_OtherKeyAttribute_st**, X509_name_st**, asn1_string_st**) @nogc nothrow;
    int CMS_RecipientEncryptedKey_cert_cmp(CMS_RecipientEncryptedKey_st*, x509_st*) @nogc nothrow;
    int CMS_RecipientInfo_kari_set0_pkey(CMS_RecipientInfo_st*, evp_pkey_st*) @nogc nothrow;
    evp_cipher_ctx_st* CMS_RecipientInfo_kari_get0_ctx(CMS_RecipientInfo_st*) @nogc nothrow;
    int CMS_RecipientInfo_kari_decrypt(CMS_ContentInfo_st*, CMS_RecipientInfo_st*, CMS_RecipientEncryptedKey_st*) @nogc nothrow;
    int CMS_SharedInfo_encode(ubyte**, X509_algor_st*, asn1_string_st*, int) @nogc nothrow;
    int ERR_load_CMS_strings() @nogc nothrow;
    lldiv_t lldiv(long, long) @nogc nothrow;
    ldiv_t ldiv(c_long, c_long) @nogc nothrow;
    div_t div(int, int) @nogc nothrow;
    long llabs(long) @nogc nothrow;
    c_long labs(c_long) @nogc nothrow;
    int abs(int) @nogc nothrow;
    void qsort(void*, c_ulong, c_ulong, int function(const(void)*, const(void)*)) @nogc nothrow;
    void* bsearch(const(void)*, const(void)*, c_ulong, c_ulong, int function(const(void)*, const(void)*)) @nogc nothrow;
    alias __compar_fn_t = int function(const(void)*, const(void)*);
    char* realpath(const(char)*, char*) @nogc nothrow;
    int system(const(char)*) @nogc nothrow;
    char* mkdtemp(char*) @nogc nothrow;
    int mkstemps(char*, int) @nogc nothrow;
    int mkstemp(char*) @nogc nothrow;
    char* mktemp(char*) @nogc nothrow;
    int clearenv() @nogc nothrow;
    int unsetenv(const(char)*) @nogc nothrow;
    int setenv(const(char)*, const(char)*, int) @nogc nothrow;
    int putenv(char*) @nogc nothrow;
    char* getenv(const(char)*) @nogc nothrow;
    void _Exit(int) @nogc nothrow;
    void quick_exit(int) @nogc nothrow;
    void exit(int) @nogc nothrow;
    int on_exit(void function(int, void*), void*) @nogc nothrow;
    int at_quick_exit(void function()) @nogc nothrow;
    int atexit(void function()) @nogc nothrow;
    void abort() @nogc nothrow;
    void* aligned_alloc(c_ulong, c_ulong) @nogc nothrow;
    int posix_memalign(void**, c_ulong, c_ulong) @nogc nothrow;
    void* valloc(c_ulong) @nogc nothrow;
    void free(void*) @nogc nothrow;
    void* reallocarray(void*, c_ulong, c_ulong) @nogc nothrow;
    void* realloc(void*, c_ulong) @nogc nothrow;
    void* calloc(c_ulong, c_ulong) @nogc nothrow;
    void* malloc(c_ulong) @nogc nothrow;
    int lcong48_r(ushort*, drand48_data*) @nogc nothrow;
    int seed48_r(ushort*, drand48_data*) @nogc nothrow;
    int srand48_r(c_long, drand48_data*) @nogc nothrow;
    int jrand48_r(ushort*, drand48_data*, c_long*) @nogc nothrow;
    int mrand48_r(drand48_data*, c_long*) @nogc nothrow;
    int nrand48_r(ushort*, drand48_data*, c_long*) @nogc nothrow;
    int lrand48_r(drand48_data*, c_long*) @nogc nothrow;
    int erand48_r(ushort*, drand48_data*, double*) @nogc nothrow;
    int drand48_r(drand48_data*, double*) @nogc nothrow;
    struct drand48_data
    {
        ushort[3] __x;
        ushort[3] __old_x;
        ushort __c;
        ushort __init;
        ulong __a;
    }
    CONF_VALUE* _CONF_new_section(conf_st*, const(char)*) @nogc nothrow;
    CONF_VALUE* _CONF_get_section(const(conf_st)*, const(char)*) @nogc nothrow;
    stack_st_CONF_VALUE* _CONF_get_section_values(const(conf_st)*, const(char)*) @nogc nothrow;
    int _CONF_add_string(conf_st*, CONF_VALUE*, CONF_VALUE*) @nogc nothrow;
    char* _CONF_get_string(const(conf_st)*, const(char)*, const(char)*) @nogc nothrow;
    c_long _CONF_get_number(const(conf_st)*, const(char)*, const(char)*) @nogc nothrow;
    int _CONF_new_data(conf_st*) @nogc nothrow;
    void _CONF_free_data(conf_st*) @nogc nothrow;
    void lcong48(ushort*) @nogc nothrow;
    alias ct_log_entry_type_t = _Anonymous_1;
    enum _Anonymous_1
    {
        CT_LOG_ENTRY_TYPE_NOT_SET = -1,
        CT_LOG_ENTRY_TYPE_X509 = 0,
        CT_LOG_ENTRY_TYPE_PRECERT = 1,
    }
    enum CT_LOG_ENTRY_TYPE_NOT_SET = _Anonymous_1.CT_LOG_ENTRY_TYPE_NOT_SET;
    enum CT_LOG_ENTRY_TYPE_X509 = _Anonymous_1.CT_LOG_ENTRY_TYPE_X509;
    enum CT_LOG_ENTRY_TYPE_PRECERT = _Anonymous_1.CT_LOG_ENTRY_TYPE_PRECERT;
    alias sct_version_t = _Anonymous_2;
    enum _Anonymous_2
    {
        SCT_VERSION_NOT_SET = -1,
        SCT_VERSION_V1 = 0,
    }
    enum SCT_VERSION_NOT_SET = _Anonymous_2.SCT_VERSION_NOT_SET;
    enum SCT_VERSION_V1 = _Anonymous_2.SCT_VERSION_V1;
    alias sct_source_t = _Anonymous_3;
    enum _Anonymous_3
    {
        SCT_SOURCE_UNKNOWN = 0,
        SCT_SOURCE_TLS_EXTENSION = 1,
        SCT_SOURCE_X509V3_EXTENSION = 2,
        SCT_SOURCE_OCSP_STAPLED_RESPONSE = 3,
    }
    enum SCT_SOURCE_UNKNOWN = _Anonymous_3.SCT_SOURCE_UNKNOWN;
    enum SCT_SOURCE_TLS_EXTENSION = _Anonymous_3.SCT_SOURCE_TLS_EXTENSION;
    enum SCT_SOURCE_X509V3_EXTENSION = _Anonymous_3.SCT_SOURCE_X509V3_EXTENSION;
    enum SCT_SOURCE_OCSP_STAPLED_RESPONSE = _Anonymous_3.SCT_SOURCE_OCSP_STAPLED_RESPONSE;
    alias sct_validation_status_t = _Anonymous_4;
    enum _Anonymous_4
    {
        SCT_VALIDATION_STATUS_NOT_SET = 0,
        SCT_VALIDATION_STATUS_UNKNOWN_LOG = 1,
        SCT_VALIDATION_STATUS_VALID = 2,
        SCT_VALIDATION_STATUS_INVALID = 3,
        SCT_VALIDATION_STATUS_UNVERIFIED = 4,
        SCT_VALIDATION_STATUS_UNKNOWN_VERSION = 5,
    }
    enum SCT_VALIDATION_STATUS_NOT_SET = _Anonymous_4.SCT_VALIDATION_STATUS_NOT_SET;
    enum SCT_VALIDATION_STATUS_UNKNOWN_LOG = _Anonymous_4.SCT_VALIDATION_STATUS_UNKNOWN_LOG;
    enum SCT_VALIDATION_STATUS_VALID = _Anonymous_4.SCT_VALIDATION_STATUS_VALID;
    enum SCT_VALIDATION_STATUS_INVALID = _Anonymous_4.SCT_VALIDATION_STATUS_INVALID;
    enum SCT_VALIDATION_STATUS_UNVERIFIED = _Anonymous_4.SCT_VALIDATION_STATUS_UNVERIFIED;
    enum SCT_VALIDATION_STATUS_UNKNOWN_VERSION = _Anonymous_4.SCT_VALIDATION_STATUS_UNKNOWN_VERSION;
    static int function(const(const(sct_st)*)*, const(const(sct_st)*)*) sk_SCT_set_cmp_func(stack_st_SCT*, int function(const(const(sct_st)*)*, const(const(sct_st)*)*)) @nogc nothrow;
    static stack_st_SCT* sk_SCT_deep_copy(const(stack_st_SCT)*, sct_st* function(const(sct_st)*), void function(sct_st*)) @nogc nothrow;
    static stack_st_SCT* sk_SCT_dup(const(stack_st_SCT)*) @nogc nothrow;
    static int sk_SCT_is_sorted(const(stack_st_SCT)*) @nogc nothrow;
    static void sk_SCT_sort(stack_st_SCT*) @nogc nothrow;
    static int sk_SCT_find_ex(stack_st_SCT*, sct_st*) @nogc nothrow;
    static int sk_SCT_find(stack_st_SCT*, sct_st*) @nogc nothrow;
    static sct_st* sk_SCT_set(stack_st_SCT*, int, sct_st*) @nogc nothrow;
    static int sk_SCT_insert(stack_st_SCT*, sct_st*, int) @nogc nothrow;
    static void sk_SCT_pop_free(stack_st_SCT*, void function(sct_st*)) @nogc nothrow;
    static sct_st* sk_SCT_pop(stack_st_SCT*) @nogc nothrow;
    static int sk_SCT_unshift(stack_st_SCT*, sct_st*) @nogc nothrow;
    static int sk_SCT_push(stack_st_SCT*, sct_st*) @nogc nothrow;
    static sct_st* sk_SCT_delete_ptr(stack_st_SCT*, sct_st*) @nogc nothrow;
    static sct_st* sk_SCT_delete(stack_st_SCT*, int) @nogc nothrow;
    static void sk_SCT_zero(stack_st_SCT*) @nogc nothrow;
    static void sk_SCT_free(stack_st_SCT*) @nogc nothrow;
    static int sk_SCT_reserve(stack_st_SCT*, int) @nogc nothrow;
    static stack_st_SCT* sk_SCT_new_reserve(int function(const(const(sct_st)*)*, const(const(sct_st)*)*), int) @nogc nothrow;
    static stack_st_SCT* sk_SCT_new_null() @nogc nothrow;
    static stack_st_SCT* sk_SCT_new(int function(const(const(sct_st)*)*, const(const(sct_st)*)*)) @nogc nothrow;
    static sct_st* sk_SCT_value(const(stack_st_SCT)*, int) @nogc nothrow;
    static int sk_SCT_num(const(stack_st_SCT)*) @nogc nothrow;
    alias sk_SCT_copyfunc = sct_st* function(const(sct_st)*);
    alias sk_SCT_freefunc = void function(sct_st*);
    alias sk_SCT_compfunc = int function(const(const(sct_st)*)*, const(const(sct_st)*)*);
    struct stack_st_SCT;
    static sct_st* sk_SCT_shift(stack_st_SCT*) @nogc nothrow;
    static ctlog_st* sk_CTLOG_value(const(stack_st_CTLOG)*, int) @nogc nothrow;
    struct stack_st_CTLOG;
    alias sk_CTLOG_copyfunc = ctlog_st* function(const(ctlog_st)*);
    alias sk_CTLOG_freefunc = void function(ctlog_st*);
    static int sk_CTLOG_num(const(stack_st_CTLOG)*) @nogc nothrow;
    alias sk_CTLOG_compfunc = int function(const(const(ctlog_st)*)*, const(const(ctlog_st)*)*);
    static stack_st_CTLOG* sk_CTLOG_new(int function(const(const(ctlog_st)*)*, const(const(ctlog_st)*)*)) @nogc nothrow;
    static stack_st_CTLOG* sk_CTLOG_deep_copy(const(stack_st_CTLOG)*, ctlog_st* function(const(ctlog_st)*), void function(ctlog_st*)) @nogc nothrow;
    static stack_st_CTLOG* sk_CTLOG_dup(const(stack_st_CTLOG)*) @nogc nothrow;
    static int sk_CTLOG_is_sorted(const(stack_st_CTLOG)*) @nogc nothrow;
    static void sk_CTLOG_sort(stack_st_CTLOG*) @nogc nothrow;
    static int sk_CTLOG_find_ex(stack_st_CTLOG*, ctlog_st*) @nogc nothrow;
    static int sk_CTLOG_find(stack_st_CTLOG*, ctlog_st*) @nogc nothrow;
    static ctlog_st* sk_CTLOG_set(stack_st_CTLOG*, int, ctlog_st*) @nogc nothrow;
    static int sk_CTLOG_insert(stack_st_CTLOG*, ctlog_st*, int) @nogc nothrow;
    static void sk_CTLOG_pop_free(stack_st_CTLOG*, void function(ctlog_st*)) @nogc nothrow;
    static ctlog_st* sk_CTLOG_shift(stack_st_CTLOG*) @nogc nothrow;
    static int function(const(const(ctlog_st)*)*, const(const(ctlog_st)*)*) sk_CTLOG_set_cmp_func(stack_st_CTLOG*, int function(const(const(ctlog_st)*)*, const(const(ctlog_st)*)*)) @nogc nothrow;
    static stack_st_CTLOG* sk_CTLOG_new_null() @nogc nothrow;
    static stack_st_CTLOG* sk_CTLOG_new_reserve(int function(const(const(ctlog_st)*)*, const(const(ctlog_st)*)*), int) @nogc nothrow;
    static int sk_CTLOG_reserve(stack_st_CTLOG*, int) @nogc nothrow;
    static void sk_CTLOG_free(stack_st_CTLOG*) @nogc nothrow;
    static ctlog_st* sk_CTLOG_pop(stack_st_CTLOG*) @nogc nothrow;
    static void sk_CTLOG_zero(stack_st_CTLOG*) @nogc nothrow;
    static int sk_CTLOG_unshift(stack_st_CTLOG*, ctlog_st*) @nogc nothrow;
    static ctlog_st* sk_CTLOG_delete_ptr(stack_st_CTLOG*, ctlog_st*) @nogc nothrow;
    static ctlog_st* sk_CTLOG_delete(stack_st_CTLOG*, int) @nogc nothrow;
    static int sk_CTLOG_push(stack_st_CTLOG*, ctlog_st*) @nogc nothrow;
    ct_policy_eval_ctx_st* CT_POLICY_EVAL_CTX_new() @nogc nothrow;
    void CT_POLICY_EVAL_CTX_free(ct_policy_eval_ctx_st*) @nogc nothrow;
    x509_st* CT_POLICY_EVAL_CTX_get0_cert(const(ct_policy_eval_ctx_st)*) @nogc nothrow;
    int CT_POLICY_EVAL_CTX_set1_cert(ct_policy_eval_ctx_st*, x509_st*) @nogc nothrow;
    x509_st* CT_POLICY_EVAL_CTX_get0_issuer(const(ct_policy_eval_ctx_st)*) @nogc nothrow;
    int CT_POLICY_EVAL_CTX_set1_issuer(ct_policy_eval_ctx_st*, x509_st*) @nogc nothrow;
    const(ctlog_store_st)* CT_POLICY_EVAL_CTX_get0_log_store(const(ct_policy_eval_ctx_st)*) @nogc nothrow;
    void CT_POLICY_EVAL_CTX_set_shared_CTLOG_STORE(ct_policy_eval_ctx_st*, ctlog_store_st*) @nogc nothrow;
    sct_st* SCT_new() @nogc nothrow;
    sct_st* SCT_new_from_base64(ubyte, const(char)*, ct_log_entry_type_t, c_ulong, const(char)*, const(char)*) @nogc nothrow;
    void SCT_free(sct_st*) @nogc nothrow;
    void SCT_LIST_free(stack_st_SCT*) @nogc nothrow;
    sct_version_t SCT_get_version(const(sct_st)*) @nogc nothrow;
    int SCT_set_version(sct_st*, sct_version_t) @nogc nothrow;
    ct_log_entry_type_t SCT_get_log_entry_type(const(sct_st)*) @nogc nothrow;
    int SCT_set_log_entry_type(sct_st*, ct_log_entry_type_t) @nogc nothrow;
    c_ulong SCT_get0_log_id(const(sct_st)*, ubyte**) @nogc nothrow;
    int SCT_set0_log_id(sct_st*, ubyte*, c_ulong) @nogc nothrow;
    int SCT_set1_log_id(sct_st*, const(ubyte)*, c_ulong) @nogc nothrow;
    c_ulong SCT_get_timestamp(const(sct_st)*) @nogc nothrow;
    void SCT_set_timestamp(sct_st*, c_ulong) @nogc nothrow;
    int SCT_get_signature_nid(const(sct_st)*) @nogc nothrow;
    int SCT_set_signature_nid(sct_st*, int) @nogc nothrow;
    c_ulong SCT_get0_extensions(const(sct_st)*, ubyte**) @nogc nothrow;
    void SCT_set0_extensions(sct_st*, ubyte*, c_ulong) @nogc nothrow;
    int SCT_set1_extensions(sct_st*, const(ubyte)*, c_ulong) @nogc nothrow;
    c_ulong SCT_get0_signature(const(sct_st)*, ubyte**) @nogc nothrow;
    void SCT_set0_signature(sct_st*, ubyte*, c_ulong) @nogc nothrow;
    int SCT_set1_signature(sct_st*, const(ubyte)*, c_ulong) @nogc nothrow;
    sct_source_t SCT_get_source(const(sct_st)*) @nogc nothrow;
    int SCT_set_source(sct_st*, sct_source_t) @nogc nothrow;
    const(char)* SCT_validation_status_string(const(sct_st)*) @nogc nothrow;
    void SCT_print(const(sct_st)*, bio_st*, int, const(ctlog_store_st)*) @nogc nothrow;
    void SCT_LIST_print(const(stack_st_SCT)*, bio_st*, int, const(char)*, const(ctlog_store_st)*) @nogc nothrow;
    sct_validation_status_t SCT_get_validation_status(const(sct_st)*) @nogc nothrow;
    int SCT_validate(sct_st*, const(ct_policy_eval_ctx_st)*) @nogc nothrow;
    int SCT_LIST_validate(const(stack_st_SCT)*, ct_policy_eval_ctx_st*) @nogc nothrow;
    int i2o_SCT_LIST(const(stack_st_SCT)*, ubyte**) @nogc nothrow;
    stack_st_SCT* o2i_SCT_LIST(stack_st_SCT**, const(ubyte)**, c_ulong) @nogc nothrow;
    int i2d_SCT_LIST(const(stack_st_SCT)*, ubyte**) @nogc nothrow;
    stack_st_SCT* d2i_SCT_LIST(stack_st_SCT**, const(ubyte)**, c_long) @nogc nothrow;
    int i2o_SCT(const(sct_st)*, ubyte**) @nogc nothrow;
    sct_st* o2i_SCT(sct_st**, const(ubyte)**, c_ulong) @nogc nothrow;
    ctlog_st* CTLOG_new(evp_pkey_st*, const(char)*) @nogc nothrow;
    int CTLOG_new_from_base64(ctlog_st**, const(char)*, const(char)*) @nogc nothrow;
    void CTLOG_free(ctlog_st*) @nogc nothrow;
    const(char)* CTLOG_get0_name(const(ctlog_st)*) @nogc nothrow;
    void CTLOG_get0_log_id(const(ctlog_st)*, const(ubyte)**, c_ulong*) @nogc nothrow;
    evp_pkey_st* CTLOG_get0_public_key(const(ctlog_st)*) @nogc nothrow;
    ctlog_store_st* CTLOG_STORE_new() @nogc nothrow;
    void CTLOG_STORE_free(ctlog_store_st*) @nogc nothrow;
    const(ctlog_st)* CTLOG_STORE_get0_log_by_id(const(ctlog_store_st)*, const(ubyte)*, c_ulong) @nogc nothrow;
    int CTLOG_STORE_load_file(ctlog_store_st*, const(char)*) @nogc nothrow;
    int CTLOG_STORE_load_default_file(ctlog_store_st*) @nogc nothrow;
    int ERR_load_CT_strings() @nogc nothrow;
    ushort* seed48(ushort*) @nogc nothrow;
    void srand48(c_long) @nogc nothrow;
    c_long jrand48(ushort*) @nogc nothrow;
    c_long mrand48() @nogc nothrow;
    c_long nrand48(ushort*) @nogc nothrow;
    c_long lrand48() @nogc nothrow;
    double erand48(ushort*) @nogc nothrow;
    double drand48() @nogc nothrow;
    int rand_r(uint*) @nogc nothrow;
    void srand(uint) @nogc nothrow;
    int rand() @nogc nothrow;
    int setstate_r(char*, random_data*) @nogc nothrow;
    int initstate_r(uint, char*, c_ulong, random_data*) @nogc nothrow;
    int srandom_r(uint, random_data*) @nogc nothrow;
    int random_r(random_data*, int*) @nogc nothrow;
    struct random_data
    {
        int* fptr;
        int* rptr;
        int* state;
        int rand_type;
        int rand_deg;
        int rand_sep;
        int* end_ptr;
    }
    char* setstate(char*) @nogc nothrow;
    alias DES_LONG = uint;
    alias DES_cblock = ubyte[8];
    alias const_DES_cblock = ubyte[8];
    alias DES_key_schedule = DES_ks;
    struct DES_ks
    {
        static union _Anonymous_5
        {
            ubyte[8] cblock;
            uint[2] deslong;
        }
        _Anonymous_5[16] ks;
    }
    char* initstate(uint, char*, c_ulong) @nogc nothrow;
    void srandom(uint) @nogc nothrow;
    c_long random() @nogc nothrow;
    extern __gshared int _shadow_DES_check_key;
    const(char)* DES_options() @nogc nothrow;
    void DES_ecb3_encrypt(ubyte**, ubyte**, DES_ks*, DES_ks*, DES_ks*, int) @nogc nothrow;
    uint DES_cbc_cksum(const(ubyte)*, ubyte**, c_long, DES_ks*, ubyte**) @nogc nothrow;
    void DES_cbc_encrypt(const(ubyte)*, ubyte*, c_long, DES_ks*, ubyte**, int) @nogc nothrow;
    void DES_ncbc_encrypt(const(ubyte)*, ubyte*, c_long, DES_ks*, ubyte**, int) @nogc nothrow;
    void DES_xcbc_encrypt(const(ubyte)*, ubyte*, c_long, DES_ks*, ubyte**, ubyte**, ubyte**, int) @nogc nothrow;
    void DES_cfb_encrypt(const(ubyte)*, ubyte*, int, c_long, DES_ks*, ubyte**, int) @nogc nothrow;
    void DES_ecb_encrypt(ubyte**, ubyte**, DES_ks*, int) @nogc nothrow;
    void DES_encrypt1(uint*, DES_ks*, int) @nogc nothrow;
    void DES_encrypt2(uint*, DES_ks*, int) @nogc nothrow;
    void DES_encrypt3(uint*, DES_ks*, DES_ks*, DES_ks*) @nogc nothrow;
    void DES_decrypt3(uint*, DES_ks*, DES_ks*, DES_ks*) @nogc nothrow;
    void DES_ede3_cbc_encrypt(const(ubyte)*, ubyte*, c_long, DES_ks*, DES_ks*, DES_ks*, ubyte**, int) @nogc nothrow;
    void DES_ede3_cfb64_encrypt(const(ubyte)*, ubyte*, c_long, DES_ks*, DES_ks*, DES_ks*, ubyte**, int*, int) @nogc nothrow;
    void DES_ede3_cfb_encrypt(const(ubyte)*, ubyte*, int, c_long, DES_ks*, DES_ks*, DES_ks*, ubyte**, int) @nogc nothrow;
    void DES_ede3_ofb64_encrypt(const(ubyte)*, ubyte*, c_long, DES_ks*, DES_ks*, DES_ks*, ubyte**, int*) @nogc nothrow;
    char* DES_fcrypt(const(char)*, const(char)*, char*) @nogc nothrow;
    char* DES_crypt(const(char)*, const(char)*) @nogc nothrow;
    void DES_ofb_encrypt(const(ubyte)*, ubyte*, int, c_long, DES_ks*, ubyte**) @nogc nothrow;
    void DES_pcbc_encrypt(const(ubyte)*, ubyte*, c_long, DES_ks*, ubyte**, int) @nogc nothrow;
    uint DES_quad_cksum(const(ubyte)*, ubyte[8]*, c_long, int, ubyte**) @nogc nothrow;
    int DES_random_key(ubyte**) @nogc nothrow;
    void DES_set_odd_parity(ubyte**) @nogc nothrow;
    int DES_check_key_parity(ubyte**) @nogc nothrow;
    int DES_is_weak_key(ubyte**) @nogc nothrow;
    int DES_set_key(ubyte**, DES_ks*) @nogc nothrow;
    int DES_key_sched(ubyte**, DES_ks*) @nogc nothrow;
    int DES_set_key_checked(ubyte**, DES_ks*) @nogc nothrow;
    void DES_set_key_unchecked(ubyte**, DES_ks*) @nogc nothrow;
    void DES_string_to_key(const(char)*, ubyte**) @nogc nothrow;
    void DES_string_to_2keys(const(char)*, ubyte**, ubyte**) @nogc nothrow;
    void DES_cfb64_encrypt(const(ubyte)*, ubyte*, c_long, DES_ks*, ubyte**, int*, int) @nogc nothrow;
    void DES_ofb64_encrypt(const(ubyte)*, ubyte*, c_long, DES_ks*, ubyte**, int*) @nogc nothrow;
    c_long a64l(const(char)*) @nogc nothrow;
    char* l64a(c_long) @nogc nothrow;
    ulong strtoull(const(char)*, char**, int) @nogc nothrow;
    extern __gshared const(ubyte)[256] _openssl_os_toascii;
    extern __gshared const(ubyte)[256] _openssl_os_toebcdic;
    void* _openssl_ebcdic2ascii(void*, const(void)*, c_ulong) @nogc nothrow;
    void* _openssl_ascii2ebcdic(void*, const(void)*, c_ulong) @nogc nothrow;
    long strtoll(const(char)*, char**, int) @nogc nothrow;
    ulong strtouq(const(char)*, char**, int) @nogc nothrow;
    long strtoq(const(char)*, char**, int) @nogc nothrow;
    c_ulong strtoul(const(char)*, char**, int) @nogc nothrow;
    c_long strtol(const(char)*, char**, int) @nogc nothrow;
    real strtold(const(char)*, char**) @nogc nothrow;
    float strtof(const(char)*, char**) @nogc nothrow;
    alias ENGINE_CMD_DEFN = ENGINE_CMD_DEFN_st;
    struct ENGINE_CMD_DEFN_st
    {
        uint cmd_num;
        const(char)* cmd_name;
        const(char)* cmd_desc;
        uint cmd_flags;
    }
    alias ENGINE_GEN_FUNC_PTR = int function();
    alias ENGINE_GEN_INT_FUNC_PTR = int function(engine_st*);
    alias ENGINE_CTRL_FUNC_PTR = int function(engine_st*, int, c_long, void*, void function());
    alias ENGINE_LOAD_KEY_PTR = evp_pkey_st* function(engine_st*, const(char)*, ui_method_st*, void*);
    alias ENGINE_SSL_CLIENT_CERT_PTR = int function(engine_st*, ssl_st*, stack_st_X509_NAME*, x509_st**, evp_pkey_st**, stack_st_X509**, ui_method_st*, void*);
    alias ENGINE_CIPHERS_PTR = int function(engine_st*, const(evp_cipher_st)**, const(int)**, int);
    alias ENGINE_DIGESTS_PTR = int function(engine_st*, const(evp_md_st)**, const(int)**, int);
    alias ENGINE_PKEY_METHS_PTR = int function(engine_st*, evp_pkey_method_st**, const(int)**, int);
    alias ENGINE_PKEY_ASN1_METHS_PTR = int function(engine_st*, evp_pkey_asn1_method_st**, const(int)**, int);
    engine_st* ENGINE_get_first() @nogc nothrow;
    engine_st* ENGINE_get_last() @nogc nothrow;
    engine_st* ENGINE_get_next(engine_st*) @nogc nothrow;
    engine_st* ENGINE_get_prev(engine_st*) @nogc nothrow;
    int ENGINE_add(engine_st*) @nogc nothrow;
    int ENGINE_remove(engine_st*) @nogc nothrow;
    engine_st* ENGINE_by_id(const(char)*) @nogc nothrow;
    double strtod(const(char)*, char**) @nogc nothrow;
    void ENGINE_load_builtin_engines() @nogc nothrow;
    uint ENGINE_get_table_flags() @nogc nothrow;
    void ENGINE_set_table_flags(uint) @nogc nothrow;
    int ENGINE_register_RSA(engine_st*) @nogc nothrow;
    void ENGINE_unregister_RSA(engine_st*) @nogc nothrow;
    void ENGINE_register_all_RSA() @nogc nothrow;
    int ENGINE_register_DSA(engine_st*) @nogc nothrow;
    void ENGINE_unregister_DSA(engine_st*) @nogc nothrow;
    void ENGINE_register_all_DSA() @nogc nothrow;
    int ENGINE_register_EC(engine_st*) @nogc nothrow;
    void ENGINE_unregister_EC(engine_st*) @nogc nothrow;
    void ENGINE_register_all_EC() @nogc nothrow;
    int ENGINE_register_DH(engine_st*) @nogc nothrow;
    void ENGINE_unregister_DH(engine_st*) @nogc nothrow;
    void ENGINE_register_all_DH() @nogc nothrow;
    int ENGINE_register_RAND(engine_st*) @nogc nothrow;
    void ENGINE_unregister_RAND(engine_st*) @nogc nothrow;
    void ENGINE_register_all_RAND() @nogc nothrow;
    int ENGINE_register_ciphers(engine_st*) @nogc nothrow;
    void ENGINE_unregister_ciphers(engine_st*) @nogc nothrow;
    void ENGINE_register_all_ciphers() @nogc nothrow;
    int ENGINE_register_digests(engine_st*) @nogc nothrow;
    void ENGINE_unregister_digests(engine_st*) @nogc nothrow;
    void ENGINE_register_all_digests() @nogc nothrow;
    int ENGINE_register_pkey_meths(engine_st*) @nogc nothrow;
    void ENGINE_unregister_pkey_meths(engine_st*) @nogc nothrow;
    void ENGINE_register_all_pkey_meths() @nogc nothrow;
    int ENGINE_register_pkey_asn1_meths(engine_st*) @nogc nothrow;
    void ENGINE_unregister_pkey_asn1_meths(engine_st*) @nogc nothrow;
    void ENGINE_register_all_pkey_asn1_meths() @nogc nothrow;
    int ENGINE_register_complete(engine_st*) @nogc nothrow;
    int ENGINE_register_all_complete() @nogc nothrow;
    int ENGINE_ctrl(engine_st*, int, c_long, void*, void function()) @nogc nothrow;
    int ENGINE_cmd_is_executable(engine_st*, int) @nogc nothrow;
    int ENGINE_ctrl_cmd(engine_st*, const(char)*, c_long, void*, void function(), int) @nogc nothrow;
    int ENGINE_ctrl_cmd_string(engine_st*, const(char)*, const(char)*, int) @nogc nothrow;
    engine_st* ENGINE_new() @nogc nothrow;
    int ENGINE_free(engine_st*) @nogc nothrow;
    int ENGINE_up_ref(engine_st*) @nogc nothrow;
    int ENGINE_set_id(engine_st*, const(char)*) @nogc nothrow;
    int ENGINE_set_name(engine_st*, const(char)*) @nogc nothrow;
    int ENGINE_set_RSA(engine_st*, const(rsa_meth_st)*) @nogc nothrow;
    int ENGINE_set_DSA(engine_st*, const(dsa_method)*) @nogc nothrow;
    int ENGINE_set_EC(engine_st*, const(ec_key_method_st)*) @nogc nothrow;
    int ENGINE_set_DH(engine_st*, const(dh_method)*) @nogc nothrow;
    int ENGINE_set_RAND(engine_st*, const(rand_meth_st)*) @nogc nothrow;
    int ENGINE_set_destroy_function(engine_st*, int function(engine_st*)) @nogc nothrow;
    int ENGINE_set_init_function(engine_st*, int function(engine_st*)) @nogc nothrow;
    int ENGINE_set_finish_function(engine_st*, int function(engine_st*)) @nogc nothrow;
    int ENGINE_set_ctrl_function(engine_st*, int function(engine_st*, int, c_long, void*, void function())) @nogc nothrow;
    int ENGINE_set_load_privkey_function(engine_st*, evp_pkey_st* function(engine_st*, const(char)*, ui_method_st*, void*)) @nogc nothrow;
    int ENGINE_set_load_pubkey_function(engine_st*, evp_pkey_st* function(engine_st*, const(char)*, ui_method_st*, void*)) @nogc nothrow;
    int ENGINE_set_load_ssl_client_cert_function(engine_st*, int function(engine_st*, ssl_st*, stack_st_X509_NAME*, x509_st**, evp_pkey_st**, stack_st_X509**, ui_method_st*, void*)) @nogc nothrow;
    int ENGINE_set_ciphers(engine_st*, int function(engine_st*, const(evp_cipher_st)**, const(int)**, int)) @nogc nothrow;
    int ENGINE_set_digests(engine_st*, int function(engine_st*, const(evp_md_st)**, const(int)**, int)) @nogc nothrow;
    int ENGINE_set_pkey_meths(engine_st*, int function(engine_st*, evp_pkey_method_st**, const(int)**, int)) @nogc nothrow;
    int ENGINE_set_pkey_asn1_meths(engine_st*, int function(engine_st*, evp_pkey_asn1_method_st**, const(int)**, int)) @nogc nothrow;
    int ENGINE_set_flags(engine_st*, int) @nogc nothrow;
    int ENGINE_set_cmd_defns(engine_st*, const(ENGINE_CMD_DEFN_st)*) @nogc nothrow;
    int ENGINE_set_ex_data(engine_st*, int, void*) @nogc nothrow;
    void* ENGINE_get_ex_data(const(engine_st)*, int) @nogc nothrow;
    long atoll(const(char)*) @nogc nothrow;
    const(char)* ENGINE_get_id(const(engine_st)*) @nogc nothrow;
    const(char)* ENGINE_get_name(const(engine_st)*) @nogc nothrow;
    const(rsa_meth_st)* ENGINE_get_RSA(const(engine_st)*) @nogc nothrow;
    const(dsa_method)* ENGINE_get_DSA(const(engine_st)*) @nogc nothrow;
    const(ec_key_method_st)* ENGINE_get_EC(const(engine_st)*) @nogc nothrow;
    const(dh_method)* ENGINE_get_DH(const(engine_st)*) @nogc nothrow;
    const(rand_meth_st)* ENGINE_get_RAND(const(engine_st)*) @nogc nothrow;
    int function(engine_st*) ENGINE_get_destroy_function(const(engine_st)*) @nogc nothrow;
    int function(engine_st*) ENGINE_get_init_function(const(engine_st)*) @nogc nothrow;
    int function(engine_st*) ENGINE_get_finish_function(const(engine_st)*) @nogc nothrow;
    int function(engine_st*, int, c_long, void*, void function()) ENGINE_get_ctrl_function(const(engine_st)*) @nogc nothrow;
    evp_pkey_st* function(engine_st*, const(char)*, ui_method_st*, void*) ENGINE_get_load_privkey_function(const(engine_st)*) @nogc nothrow;
    evp_pkey_st* function(engine_st*, const(char)*, ui_method_st*, void*) ENGINE_get_load_pubkey_function(const(engine_st)*) @nogc nothrow;
    int function(engine_st*, ssl_st*, stack_st_X509_NAME*, x509_st**, evp_pkey_st**, stack_st_X509**, ui_method_st*, void*) ENGINE_get_ssl_client_cert_function(const(engine_st)*) @nogc nothrow;
    int function(engine_st*, const(evp_cipher_st)**, const(int)**, int) ENGINE_get_ciphers(const(engine_st)*) @nogc nothrow;
    int function(engine_st*, const(evp_md_st)**, const(int)**, int) ENGINE_get_digests(const(engine_st)*) @nogc nothrow;
    int function(engine_st*, evp_pkey_method_st**, const(int)**, int) ENGINE_get_pkey_meths(const(engine_st)*) @nogc nothrow;
    int function(engine_st*, evp_pkey_asn1_method_st**, const(int)**, int) ENGINE_get_pkey_asn1_meths(const(engine_st)*) @nogc nothrow;
    const(evp_cipher_st)* ENGINE_get_cipher(engine_st*, int) @nogc nothrow;
    const(evp_md_st)* ENGINE_get_digest(engine_st*, int) @nogc nothrow;
    const(evp_pkey_method_st)* ENGINE_get_pkey_meth(engine_st*, int) @nogc nothrow;
    const(evp_pkey_asn1_method_st)* ENGINE_get_pkey_asn1_meth(engine_st*, int) @nogc nothrow;
    const(evp_pkey_asn1_method_st)* ENGINE_get_pkey_asn1_meth_str(engine_st*, const(char)*, int) @nogc nothrow;
    const(evp_pkey_asn1_method_st)* ENGINE_pkey_asn1_find_str(engine_st**, const(char)*, int) @nogc nothrow;
    const(ENGINE_CMD_DEFN_st)* ENGINE_get_cmd_defns(const(engine_st)*) @nogc nothrow;
    int ENGINE_get_flags(const(engine_st)*) @nogc nothrow;
    int ENGINE_init(engine_st*) @nogc nothrow;
    int ENGINE_finish(engine_st*) @nogc nothrow;
    evp_pkey_st* ENGINE_load_private_key(engine_st*, const(char)*, ui_method_st*, void*) @nogc nothrow;
    evp_pkey_st* ENGINE_load_public_key(engine_st*, const(char)*, ui_method_st*, void*) @nogc nothrow;
    int ENGINE_load_ssl_client_cert(engine_st*, ssl_st*, stack_st_X509_NAME*, x509_st**, evp_pkey_st**, stack_st_X509**, ui_method_st*, void*) @nogc nothrow;
    engine_st* ENGINE_get_default_RSA() @nogc nothrow;
    engine_st* ENGINE_get_default_DSA() @nogc nothrow;
    engine_st* ENGINE_get_default_EC() @nogc nothrow;
    engine_st* ENGINE_get_default_DH() @nogc nothrow;
    engine_st* ENGINE_get_default_RAND() @nogc nothrow;
    engine_st* ENGINE_get_cipher_engine(int) @nogc nothrow;
    engine_st* ENGINE_get_digest_engine(int) @nogc nothrow;
    engine_st* ENGINE_get_pkey_meth_engine(int) @nogc nothrow;
    engine_st* ENGINE_get_pkey_asn1_meth_engine(int) @nogc nothrow;
    int ENGINE_set_default_RSA(engine_st*) @nogc nothrow;
    int ENGINE_set_default_string(engine_st*, const(char)*) @nogc nothrow;
    int ENGINE_set_default_DSA(engine_st*) @nogc nothrow;
    int ENGINE_set_default_EC(engine_st*) @nogc nothrow;
    int ENGINE_set_default_DH(engine_st*) @nogc nothrow;
    int ENGINE_set_default_RAND(engine_st*) @nogc nothrow;
    int ENGINE_set_default_ciphers(engine_st*) @nogc nothrow;
    int ENGINE_set_default_digests(engine_st*) @nogc nothrow;
    int ENGINE_set_default_pkey_meths(engine_st*) @nogc nothrow;
    int ENGINE_set_default_pkey_asn1_meths(engine_st*) @nogc nothrow;
    int ENGINE_set_default(engine_st*, uint) @nogc nothrow;
    void ENGINE_add_conf_module() @nogc nothrow;
    alias dyn_MEM_malloc_fn = void* function(c_ulong, const(char)*, int);
    alias dyn_MEM_realloc_fn = void* function(void*, c_ulong, const(char)*, int);
    alias dyn_MEM_free_fn = void function(void*, const(char)*, int);
    alias dynamic_MEM_fns = st_dynamic_MEM_fns;
    struct st_dynamic_MEM_fns
    {
        void* function(c_ulong, const(char)*, int) malloc_fn;
        void* function(void*, c_ulong, const(char)*, int) realloc_fn;
        void function(void*, const(char)*, int) free_fn;
    }
    alias dynamic_fns = st_dynamic_fns;
    struct st_dynamic_fns
    {
        void* static_state;
        st_dynamic_MEM_fns mem_fns;
    }
    alias dynamic_v_check_fn = c_ulong function(c_ulong);
    alias dynamic_bind_engine = int function(engine_st*, const(char)*, const(st_dynamic_fns)*);
    void* ENGINE_get_static_state() @nogc nothrow;
    int ERR_load_ENGINE_strings() @nogc nothrow;
    c_long atol(const(char)*) @nogc nothrow;
    int atoi(const(char)*) @nogc nothrow;
    double atof(const(char)*) @nogc nothrow;
    c_ulong __ctype_get_mb_cur_max() @nogc nothrow;
    struct lldiv_t
    {
        long quot;
        long rem;
    }
    struct ldiv_t
    {
        c_long quot;
        c_long rem;
    }
    struct div_t
    {
        int quot;
        int rem;
    }
    int __overflow(_IO_FILE*, int) @nogc nothrow;
    int __uflow(_IO_FILE*) @nogc nothrow;
    void funlockfile(_IO_FILE*) @nogc nothrow;
    int ftrylockfile(_IO_FILE*) @nogc nothrow;
    void flockfile(_IO_FILE*) @nogc nothrow;
    char* ctermid(char*) @nogc nothrow;
    int pclose(_IO_FILE*) @nogc nothrow;
    _IO_FILE* popen(const(char)*, const(char)*) @nogc nothrow;
    int fileno_unlocked(_IO_FILE*) @nogc nothrow;
    int fileno(_IO_FILE*) @nogc nothrow;
    void perror(const(char)*) @nogc nothrow;
    int ferror_unlocked(_IO_FILE*) @nogc nothrow;
    int feof_unlocked(_IO_FILE*) @nogc nothrow;
    void clearerr_unlocked(_IO_FILE*) @nogc nothrow;
    int ferror(_IO_FILE*) @nogc nothrow;
    int feof(_IO_FILE*) @nogc nothrow;
    alias ERR_STATE = err_state_st;
    struct err_state_st
    {
        int[16] err_flags;
        c_ulong[16] err_buffer;
        char*[16] err_data;
        int[16] err_data_flags;
        const(char)*[16] err_file;
        int[16] err_line;
        int top;
        int bottom;
    }
    void clearerr(_IO_FILE*) @nogc nothrow;
    int fsetpos(_IO_FILE*, const(_G_fpos_t)*) @nogc nothrow;
    int fgetpos(_IO_FILE*, _G_fpos_t*) @nogc nothrow;
    c_long ftello(_IO_FILE*) @nogc nothrow;
    int fseeko(_IO_FILE*, c_long, int) @nogc nothrow;
    void rewind(_IO_FILE*) @nogc nothrow;
    c_long ftell(_IO_FILE*) @nogc nothrow;
    int fseek(_IO_FILE*, c_long, int) @nogc nothrow;
    c_ulong fwrite_unlocked(const(void)*, c_ulong, c_ulong, _IO_FILE*) @nogc nothrow;
    c_ulong fread_unlocked(void*, c_ulong, c_ulong, _IO_FILE*) @nogc nothrow;
    c_ulong fwrite(const(void)*, c_ulong, c_ulong, _IO_FILE*) @nogc nothrow;
    c_ulong fread(void*, c_ulong, c_ulong, _IO_FILE*) @nogc nothrow;
    int ungetc(int, _IO_FILE*) @nogc nothrow;
    int puts(const(char)*) @nogc nothrow;
    int fputs(const(char)*, _IO_FILE*) @nogc nothrow;
    c_long getline(char**, c_ulong*, _IO_FILE*) @nogc nothrow;
    c_long getdelim(char**, c_ulong*, int, _IO_FILE*) @nogc nothrow;
    c_long __getdelim(char**, c_ulong*, int, _IO_FILE*) @nogc nothrow;
    char* fgets(char*, int, _IO_FILE*) @nogc nothrow;
    int putw(int, _IO_FILE*) @nogc nothrow;
    int getw(_IO_FILE*) @nogc nothrow;
    int putchar_unlocked(int) @nogc nothrow;
    int putc_unlocked(int, _IO_FILE*) @nogc nothrow;
    int fputc_unlocked(int, _IO_FILE*) @nogc nothrow;
    int putchar(int) @nogc nothrow;
    int putc(int, _IO_FILE*) @nogc nothrow;
    int fputc(int, _IO_FILE*) @nogc nothrow;
    int fgetc_unlocked(_IO_FILE*) @nogc nothrow;
    int getchar_unlocked() @nogc nothrow;
    int getc_unlocked(_IO_FILE*) @nogc nothrow;
    int getchar() @nogc nothrow;
    int getc(_IO_FILE*) @nogc nothrow;
    int fgetc(_IO_FILE*) @nogc nothrow;
    int vsscanf(const(char)*, const(char)*, va_list*) @nogc nothrow;
    int vscanf(const(char)*, va_list*) @nogc nothrow;
    int vfscanf(_IO_FILE*, const(char)*, va_list*) @nogc nothrow;
    int sscanf(const(char)*, const(char)*, ...) @nogc nothrow;
    int scanf(const(char)*, ...) @nogc nothrow;
    int fscanf(_IO_FILE*, const(char)*, ...) @nogc nothrow;
    int dprintf(int, const(char)*, ...) @nogc nothrow;
    int vdprintf(int, const(char)*, va_list*) @nogc nothrow;
    int vsnprintf(char*, c_ulong, const(char)*, va_list*) @nogc nothrow;
    int snprintf(char*, c_ulong, const(char)*, ...) @nogc nothrow;
    int vsprintf(char*, const(char)*, va_list*) @nogc nothrow;
    int vprintf(const(char)*, va_list*) @nogc nothrow;
    int vfprintf(_IO_FILE*, const(char)*, va_list*) @nogc nothrow;
    int sprintf(char*, const(char)*, ...) @nogc nothrow;
    int printf(const(char)*, ...) @nogc nothrow;
    int fprintf(_IO_FILE*, const(char)*, ...) @nogc nothrow;
    void setlinebuf(_IO_FILE*) @nogc nothrow;
    void setbuffer(_IO_FILE*, char*, c_ulong) @nogc nothrow;
    int setvbuf(_IO_FILE*, char*, int, c_ulong) @nogc nothrow;
    void setbuf(_IO_FILE*, char*) @nogc nothrow;
    _IO_FILE* open_memstream(char**, c_ulong*) @nogc nothrow;
    _IO_FILE* fmemopen(void*, c_ulong, const(char)*) @nogc nothrow;
    _IO_FILE* fdopen(int, const(char)*) @nogc nothrow;
    alias ERR_STRING_DATA = ERR_string_data_st;
    struct ERR_string_data_st
    {
        c_ulong error;
        const(char)* string_;
    }
    static void lh_ERR_STRING_DATA_free(lhash_st_ERR_STRING_DATA*) @nogc nothrow;
    static ERR_string_data_st* lh_ERR_STRING_DATA_insert(lhash_st_ERR_STRING_DATA*, ERR_string_data_st*) @nogc nothrow;
    static ERR_string_data_st* lh_ERR_STRING_DATA_delete(lhash_st_ERR_STRING_DATA*, const(ERR_string_data_st)*) @nogc nothrow;
    static ERR_string_data_st* lh_ERR_STRING_DATA_retrieve(lhash_st_ERR_STRING_DATA*, const(ERR_string_data_st)*) @nogc nothrow;
    static int lh_ERR_STRING_DATA_error(lhash_st_ERR_STRING_DATA*) @nogc nothrow;
    static void lh_ERR_STRING_DATA_doall(lhash_st_ERR_STRING_DATA*, void function(ERR_string_data_st*)) @nogc nothrow;
    static void lh_ERR_STRING_DATA_node_stats_bio(const(lhash_st_ERR_STRING_DATA)*, bio_st*) @nogc nothrow;
    static void lh_ERR_STRING_DATA_node_usage_stats_bio(const(lhash_st_ERR_STRING_DATA)*, bio_st*) @nogc nothrow;
    static void lh_ERR_STRING_DATA_stats_bio(const(lhash_st_ERR_STRING_DATA)*, bio_st*) @nogc nothrow;
    static c_ulong lh_ERR_STRING_DATA_get_down_load(lhash_st_ERR_STRING_DATA*) @nogc nothrow;
    static void lh_ERR_STRING_DATA_set_down_load(lhash_st_ERR_STRING_DATA*, c_ulong) @nogc nothrow;
    struct lhash_st_ERR_STRING_DATA
    {
        union lh_ERR_STRING_DATA_dummy
        {
            void* d1;
            c_ulong d2;
            int d3;
        }
        lhash_st_ERR_STRING_DATA.lh_ERR_STRING_DATA_dummy dummy;
    }
    static c_ulong lh_ERR_STRING_DATA_num_items(lhash_st_ERR_STRING_DATA*) @nogc nothrow;
    static lhash_st_ERR_STRING_DATA* lh_ERR_STRING_DATA_new(c_ulong function(const(ERR_string_data_st)*), int function(const(ERR_string_data_st)*, const(ERR_string_data_st)*)) @nogc nothrow;
    void ERR_put_error(int, int, int, const(char)*, int) @nogc nothrow;
    void ERR_set_error_data(char*, int) @nogc nothrow;
    c_ulong ERR_get_error() @nogc nothrow;
    c_ulong ERR_get_error_line(const(char)**, int*) @nogc nothrow;
    c_ulong ERR_get_error_line_data(const(char)**, int*, const(char)**, int*) @nogc nothrow;
    c_ulong ERR_peek_error() @nogc nothrow;
    c_ulong ERR_peek_error_line(const(char)**, int*) @nogc nothrow;
    c_ulong ERR_peek_error_line_data(const(char)**, int*, const(char)**, int*) @nogc nothrow;
    c_ulong ERR_peek_last_error() @nogc nothrow;
    c_ulong ERR_peek_last_error_line(const(char)**, int*) @nogc nothrow;
    c_ulong ERR_peek_last_error_line_data(const(char)**, int*, const(char)**, int*) @nogc nothrow;
    void ERR_clear_error() @nogc nothrow;
    char* ERR_error_string(c_ulong, char*) @nogc nothrow;
    void ERR_error_string_n(c_ulong, char*, c_ulong) @nogc nothrow;
    const(char)* ERR_lib_error_string(c_ulong) @nogc nothrow;
    const(char)* ERR_func_error_string(c_ulong) @nogc nothrow;
    const(char)* ERR_reason_error_string(c_ulong) @nogc nothrow;
    void ERR_print_errors_cb(int function(const(char)*, c_ulong, void*), void*) @nogc nothrow;
    void ERR_print_errors_fp(_IO_FILE*) @nogc nothrow;
    void ERR_print_errors(bio_st*) @nogc nothrow;
    void ERR_add_error_data(int, ...) @nogc nothrow;
    void ERR_add_error_vdata(int, va_list*) @nogc nothrow;
    int ERR_load_strings(int, ERR_string_data_st*) @nogc nothrow;
    int ERR_unload_strings(int, ERR_string_data_st*) @nogc nothrow;
    int ERR_load_ERR_strings() @nogc nothrow;
    _IO_FILE* freopen(const(char)*, const(char)*, _IO_FILE*) @nogc nothrow;
    void ERR_remove_thread_state(void*) @nogc nothrow;
    void ERR_remove_state(c_ulong) @nogc nothrow;
    err_state_st* ERR_get_state() @nogc nothrow;
    int ERR_get_next_error_library() @nogc nothrow;
    int ERR_set_mark() @nogc nothrow;
    int ERR_pop_to_mark() @nogc nothrow;
    _IO_FILE* fopen(const(char)*, const(char)*) @nogc nothrow;
    c_ulong HMAC_size(const(hmac_ctx_st)*) @nogc nothrow;
    hmac_ctx_st* HMAC_CTX_new() @nogc nothrow;
    int HMAC_CTX_reset(hmac_ctx_st*) @nogc nothrow;
    void HMAC_CTX_free(hmac_ctx_st*) @nogc nothrow;
    int HMAC_Init(hmac_ctx_st*, const(void)*, int, const(evp_md_st)*) @nogc nothrow;
    int HMAC_Init_ex(hmac_ctx_st*, const(void)*, int, const(evp_md_st)*, engine_st*) @nogc nothrow;
    int HMAC_Update(hmac_ctx_st*, const(ubyte)*, c_ulong) @nogc nothrow;
    int HMAC_Final(hmac_ctx_st*, ubyte*, uint*) @nogc nothrow;
    ubyte* HMAC(const(evp_md_st)*, const(void)*, int, const(ubyte)*, c_ulong, ubyte*, uint*) @nogc nothrow;
    int HMAC_CTX_copy(hmac_ctx_st*, hmac_ctx_st*) @nogc nothrow;
    void HMAC_CTX_set_flags(hmac_ctx_st*, c_ulong) @nogc nothrow;
    const(evp_md_st)* HMAC_CTX_get_md(const(hmac_ctx_st)*) @nogc nothrow;
    int fflush_unlocked(_IO_FILE*) @nogc nothrow;
    alias IDEA_INT = uint;
    int fflush(_IO_FILE*) @nogc nothrow;
    int fclose(_IO_FILE*) @nogc nothrow;
    alias IDEA_KEY_SCHEDULE = idea_key_st;
    struct idea_key_st
    {
        uint[6][9] data;
    }
    const(char)* IDEA_options() @nogc nothrow;
    void IDEA_ecb_encrypt(const(ubyte)*, ubyte*, idea_key_st*) @nogc nothrow;
    void IDEA_set_encrypt_key(const(ubyte)*, idea_key_st*) @nogc nothrow;
    void IDEA_set_decrypt_key(idea_key_st*, idea_key_st*) @nogc nothrow;
    void IDEA_cbc_encrypt(const(ubyte)*, ubyte*, c_long, idea_key_st*, ubyte*, int) @nogc nothrow;
    void IDEA_cfb64_encrypt(const(ubyte)*, ubyte*, c_long, idea_key_st*, ubyte*, int*, int) @nogc nothrow;
    void IDEA_ofb64_encrypt(const(ubyte)*, ubyte*, c_long, idea_key_st*, ubyte*, int*) @nogc nothrow;
    void IDEA_encrypt(c_ulong*, idea_key_st*) @nogc nothrow;
    char* tempnam(const(char)*, const(char)*) @nogc nothrow;
    char* tmpnam_r(char*) @nogc nothrow;
    char* tmpnam(char*) @nogc nothrow;
    _IO_FILE* tmpfile() @nogc nothrow;
    int renameat(int, const(char)*, int, const(char)*) @nogc nothrow;
    int rename(const(char)*, const(char)*) @nogc nothrow;
    int remove(const(char)*) @nogc nothrow;
    extern __gshared _IO_FILE* stderr;
    extern __gshared _IO_FILE* stdout;
    extern __gshared _IO_FILE* stdin;
    int ERR_load_KDF_strings() @nogc nothrow;
    alias fpos_t = _G_fpos_t;
    alias ssize_t = c_long;
    alias off_t = c_long;
    alias MD4_CTX = MD4state_st;
    struct MD4state_st
    {
        uint A;
        uint B;
        uint C;
        uint D;
        uint Nl;
        uint Nh;
        uint[16] data;
        uint num;
    }
    int MD4_Init(MD4state_st*) @nogc nothrow;
    int MD4_Update(MD4state_st*, const(void)*, c_ulong) @nogc nothrow;
    int MD4_Final(ubyte*, MD4state_st*) @nogc nothrow;
    ubyte* MD4(const(ubyte)*, c_ulong, ubyte*) @nogc nothrow;
    void MD4_Transform(MD4state_st*, const(ubyte)*) @nogc nothrow;
    alias MD5_CTX = MD5state_st;
    struct MD5state_st
    {
        uint A;
        uint B;
        uint C;
        uint D;
        uint Nl;
        uint Nh;
        uint[16] data;
        uint num;
    }
    int MD5_Init(MD5state_st*) @nogc nothrow;
    int MD5_Update(MD5state_st*, const(void)*, c_ulong) @nogc nothrow;
    int MD5_Final(ubyte*, MD5state_st*) @nogc nothrow;
    ubyte* MD5(const(ubyte)*, c_ulong, ubyte*) @nogc nothrow;
    void MD5_Transform(MD5state_st*, const(ubyte)*) @nogc nothrow;
    alias MDC2_CTX = mdc2_ctx_st;
    struct mdc2_ctx_st
    {
        uint num;
        ubyte[8] data;
        ubyte[8] h;
        ubyte[8] hh;
        int pad_type;
    }
    int MDC2_Init(mdc2_ctx_st*) @nogc nothrow;
    int MDC2_Update(mdc2_ctx_st*, const(ubyte)*, c_ulong) @nogc nothrow;
    int MDC2_Final(ubyte*, mdc2_ctx_st*) @nogc nothrow;
    ubyte* MDC2(const(ubyte)*, c_ulong, ubyte*) @nogc nothrow;
    alias block128_f = void function(const(ubyte)*, ubyte*, const(void)*);
    alias cbc128_f = void function(const(ubyte)*, ubyte*, c_ulong, const(void)*, ubyte*, int);
    alias ctr128_f = void function(const(ubyte)*, ubyte*, c_ulong, const(void)*, const(ubyte)*);
    alias ccm128_f = void function(const(ubyte)*, ubyte*, c_ulong, const(void)*, const(ubyte)*, ubyte*);
    void CRYPTO_cbc128_encrypt(const(ubyte)*, ubyte*, c_ulong, const(void)*, ubyte*, void function(const(ubyte)[16], ubyte[16], const(void)*)) @nogc nothrow;
    void CRYPTO_cbc128_decrypt(const(ubyte)*, ubyte*, c_ulong, const(void)*, ubyte*, void function(const(ubyte)[16], ubyte[16], const(void)*)) @nogc nothrow;
    void CRYPTO_ctr128_encrypt(const(ubyte)*, ubyte*, c_ulong, const(void)*, ubyte*, ubyte*, uint*, void function(const(ubyte)[16], ubyte[16], const(void)*)) @nogc nothrow;
    void CRYPTO_ctr128_encrypt_ctr32(const(ubyte)*, ubyte*, c_ulong, const(void)*, ubyte*, ubyte*, uint*, void function(const(ubyte)*, ubyte*, c_ulong, const(void)*, const(ubyte)[16])) @nogc nothrow;
    void CRYPTO_ofb128_encrypt(const(ubyte)*, ubyte*, c_ulong, const(void)*, ubyte*, int*, void function(const(ubyte)[16], ubyte[16], const(void)*)) @nogc nothrow;
    void CRYPTO_cfb128_encrypt(const(ubyte)*, ubyte*, c_ulong, const(void)*, ubyte*, int*, int, void function(const(ubyte)[16], ubyte[16], const(void)*)) @nogc nothrow;
    void CRYPTO_cfb128_8_encrypt(const(ubyte)*, ubyte*, c_ulong, const(void)*, ubyte*, int*, int, void function(const(ubyte)[16], ubyte[16], const(void)*)) @nogc nothrow;
    void CRYPTO_cfb128_1_encrypt(const(ubyte)*, ubyte*, c_ulong, const(void)*, ubyte*, int*, int, void function(const(ubyte)[16], ubyte[16], const(void)*)) @nogc nothrow;
    c_ulong CRYPTO_cts128_encrypt_block(const(ubyte)*, ubyte*, c_ulong, const(void)*, ubyte*, void function(const(ubyte)[16], ubyte[16], const(void)*)) @nogc nothrow;
    c_ulong CRYPTO_cts128_encrypt(const(ubyte)*, ubyte*, c_ulong, const(void)*, ubyte*, void function(const(ubyte)*, ubyte*, c_ulong, const(void)*, ubyte[16], int)) @nogc nothrow;
    c_ulong CRYPTO_cts128_decrypt_block(const(ubyte)*, ubyte*, c_ulong, const(void)*, ubyte*, void function(const(ubyte)[16], ubyte[16], const(void)*)) @nogc nothrow;
    c_ulong CRYPTO_cts128_decrypt(const(ubyte)*, ubyte*, c_ulong, const(void)*, ubyte*, void function(const(ubyte)*, ubyte*, c_ulong, const(void)*, ubyte[16], int)) @nogc nothrow;
    c_ulong CRYPTO_nistcts128_encrypt_block(const(ubyte)*, ubyte*, c_ulong, const(void)*, ubyte*, void function(const(ubyte)[16], ubyte[16], const(void)*)) @nogc nothrow;
    c_ulong CRYPTO_nistcts128_encrypt(const(ubyte)*, ubyte*, c_ulong, const(void)*, ubyte*, void function(const(ubyte)*, ubyte*, c_ulong, const(void)*, ubyte[16], int)) @nogc nothrow;
    c_ulong CRYPTO_nistcts128_decrypt_block(const(ubyte)*, ubyte*, c_ulong, const(void)*, ubyte*, void function(const(ubyte)[16], ubyte[16], const(void)*)) @nogc nothrow;
    c_ulong CRYPTO_nistcts128_decrypt(const(ubyte)*, ubyte*, c_ulong, const(void)*, ubyte*, void function(const(ubyte)*, ubyte*, c_ulong, const(void)*, ubyte[16], int)) @nogc nothrow;
    alias GCM128_CONTEXT = gcm128_context;
    struct gcm128_context;
    gcm128_context* CRYPTO_gcm128_new(void*, void function(const(ubyte)[16], ubyte[16], const(void)*)) @nogc nothrow;
    void CRYPTO_gcm128_init(gcm128_context*, void*, void function(const(ubyte)[16], ubyte[16], const(void)*)) @nogc nothrow;
    void CRYPTO_gcm128_setiv(gcm128_context*, const(ubyte)*, c_ulong) @nogc nothrow;
    int CRYPTO_gcm128_aad(gcm128_context*, const(ubyte)*, c_ulong) @nogc nothrow;
    int CRYPTO_gcm128_encrypt(gcm128_context*, const(ubyte)*, ubyte*, c_ulong) @nogc nothrow;
    int CRYPTO_gcm128_decrypt(gcm128_context*, const(ubyte)*, ubyte*, c_ulong) @nogc nothrow;
    int CRYPTO_gcm128_encrypt_ctr32(gcm128_context*, const(ubyte)*, ubyte*, c_ulong, void function(const(ubyte)*, ubyte*, c_ulong, const(void)*, const(ubyte)[16])) @nogc nothrow;
    int CRYPTO_gcm128_decrypt_ctr32(gcm128_context*, const(ubyte)*, ubyte*, c_ulong, void function(const(ubyte)*, ubyte*, c_ulong, const(void)*, const(ubyte)[16])) @nogc nothrow;
    int CRYPTO_gcm128_finish(gcm128_context*, const(ubyte)*, c_ulong) @nogc nothrow;
    void CRYPTO_gcm128_tag(gcm128_context*, ubyte*, c_ulong) @nogc nothrow;
    void CRYPTO_gcm128_release(gcm128_context*) @nogc nothrow;
    alias CCM128_CONTEXT = ccm128_context;
    struct ccm128_context;
    void CRYPTO_ccm128_init(ccm128_context*, uint, uint, void*, void function(const(ubyte)[16], ubyte[16], const(void)*)) @nogc nothrow;
    int CRYPTO_ccm128_setiv(ccm128_context*, const(ubyte)*, c_ulong, c_ulong) @nogc nothrow;
    void CRYPTO_ccm128_aad(ccm128_context*, const(ubyte)*, c_ulong) @nogc nothrow;
    int CRYPTO_ccm128_encrypt(ccm128_context*, const(ubyte)*, ubyte*, c_ulong) @nogc nothrow;
    int CRYPTO_ccm128_decrypt(ccm128_context*, const(ubyte)*, ubyte*, c_ulong) @nogc nothrow;
    int CRYPTO_ccm128_encrypt_ccm64(ccm128_context*, const(ubyte)*, ubyte*, c_ulong, void function(const(ubyte)*, ubyte*, c_ulong, const(void)*, const(ubyte)[16], ubyte[16])) @nogc nothrow;
    int CRYPTO_ccm128_decrypt_ccm64(ccm128_context*, const(ubyte)*, ubyte*, c_ulong, void function(const(ubyte)*, ubyte*, c_ulong, const(void)*, const(ubyte)[16], ubyte[16])) @nogc nothrow;
    c_ulong CRYPTO_ccm128_tag(ccm128_context*, ubyte*, c_ulong) @nogc nothrow;
    alias XTS128_CONTEXT = xts128_context;
    struct xts128_context;
    int CRYPTO_xts128_encrypt(const(xts128_context)*, const(ubyte)*, const(ubyte)*, ubyte*, c_ulong, int) @nogc nothrow;
    c_ulong CRYPTO_128_wrap(void*, const(ubyte)*, ubyte*, const(ubyte)*, c_ulong, void function(const(ubyte)[16], ubyte[16], const(void)*)) @nogc nothrow;
    c_ulong CRYPTO_128_unwrap(void*, const(ubyte)*, ubyte*, const(ubyte)*, c_ulong, void function(const(ubyte)[16], ubyte[16], const(void)*)) @nogc nothrow;
    c_ulong CRYPTO_128_wrap_pad(void*, const(ubyte)*, ubyte*, const(ubyte)*, c_ulong, void function(const(ubyte)[16], ubyte[16], const(void)*)) @nogc nothrow;
    c_ulong CRYPTO_128_unwrap_pad(void*, const(ubyte)*, ubyte*, const(ubyte)*, c_ulong, void function(const(ubyte)[16], ubyte[16], const(void)*)) @nogc nothrow;
    alias OCB128_CONTEXT = ocb128_context;
    struct ocb128_context;
    alias ocb128_f = void function(const(ubyte)*, ubyte*, c_ulong, const(void)*, c_ulong, ubyte*, ubyte**, ubyte*);
    ocb128_context* CRYPTO_ocb128_new(void*, void*, void function(const(ubyte)[16], ubyte[16], const(void)*), void function(const(ubyte)[16], ubyte[16], const(void)*), void function(const(ubyte)*, ubyte*, c_ulong, const(void)*, c_ulong, ubyte[16], const(ubyte)[16][0], ubyte[16])) @nogc nothrow;
    int CRYPTO_ocb128_init(ocb128_context*, void*, void*, void function(const(ubyte)[16], ubyte[16], const(void)*), void function(const(ubyte)[16], ubyte[16], const(void)*), void function(const(ubyte)*, ubyte*, c_ulong, const(void)*, c_ulong, ubyte[16], const(ubyte)[16][0], ubyte[16])) @nogc nothrow;
    int CRYPTO_ocb128_copy_ctx(ocb128_context*, ocb128_context*, void*, void*) @nogc nothrow;
    int CRYPTO_ocb128_setiv(ocb128_context*, const(ubyte)*, c_ulong, c_ulong) @nogc nothrow;
    int CRYPTO_ocb128_aad(ocb128_context*, const(ubyte)*, c_ulong) @nogc nothrow;
    int CRYPTO_ocb128_encrypt(ocb128_context*, const(ubyte)*, ubyte*, c_ulong) @nogc nothrow;
    int CRYPTO_ocb128_decrypt(ocb128_context*, const(ubyte)*, ubyte*, c_ulong) @nogc nothrow;
    int CRYPTO_ocb128_finish(ocb128_context*, const(ubyte)*, c_ulong) @nogc nothrow;
    int CRYPTO_ocb128_tag(ocb128_context*, ubyte*, c_ulong) @nogc nothrow;
    void CRYPTO_ocb128_cleanup(ocb128_context*) @nogc nothrow;
    alias uintmax_t = c_ulong;
    alias intmax_t = c_long;
    alias uintptr_t = c_ulong;
    alias intptr_t = c_long;
    alias uint_fast64_t = c_ulong;
    alias uint_fast32_t = c_ulong;
    alias uint_fast16_t = c_ulong;
    alias uint_fast8_t = ubyte;
    alias int_fast64_t = c_long;
    alias int_fast32_t = c_long;
    alias int_fast16_t = c_long;
    alias int_fast8_t = byte;
    alias uint_least64_t = c_ulong;
    alias uint_least32_t = uint;
    alias uint_least16_t = ushort;
    alias uint_least8_t = ubyte;
    alias int_least64_t = c_long;
    alias int_least32_t = int;
    alias int_least16_t = short;
    alias int_least8_t = byte;
    int sched_rr_get_interval(int, timespec*) @nogc nothrow;
    int sched_get_priority_min(int) @nogc nothrow;
    int sched_get_priority_max(int) @nogc nothrow;
    int sched_yield() @nogc nothrow;
    int sched_getscheduler(int) @nogc nothrow;
    int sched_setscheduler(int, int, const(sched_param)*) @nogc nothrow;
    int sched_getparam(int, sched_param*) @nogc nothrow;
    int sched_setparam(int, const(sched_param)*) @nogc nothrow;
    int pthread_atfork(void function(), void function(), void function()) @nogc nothrow;
    int pthread_getcpuclockid(c_ulong, int*) @nogc nothrow;
    int pthread_setspecific(uint, const(void)*) @nogc nothrow;
    void* pthread_getspecific(uint) @nogc nothrow;
    int pthread_key_delete(uint) @nogc nothrow;
    int pthread_key_create(uint*, void function(void*)) @nogc nothrow;
    int pthread_barrierattr_setpshared(pthread_barrierattr_t*, int) @nogc nothrow;
    int pthread_barrierattr_getpshared(const(pthread_barrierattr_t)*, int*) @nogc nothrow;
    int pthread_barrierattr_destroy(pthread_barrierattr_t*) @nogc nothrow;
    int pthread_barrierattr_init(pthread_barrierattr_t*) @nogc nothrow;
    int pthread_barrier_wait(pthread_barrier_t*) @nogc nothrow;
    int pthread_barrier_destroy(pthread_barrier_t*) @nogc nothrow;
    int pthread_barrier_init(pthread_barrier_t*, const(pthread_barrierattr_t)*, uint) @nogc nothrow;
    int pthread_spin_unlock(int*) @nogc nothrow;
    int pthread_spin_trylock(int*) @nogc nothrow;
    int pthread_spin_lock(int*) @nogc nothrow;
    int pthread_spin_destroy(int*) @nogc nothrow;
    int pthread_spin_init(int*, int) @nogc nothrow;
    int pthread_condattr_setclock(pthread_condattr_t*, int) @nogc nothrow;
    int pthread_condattr_getclock(const(pthread_condattr_t)*, int*) @nogc nothrow;
    int pthread_condattr_setpshared(pthread_condattr_t*, int) @nogc nothrow;
    int pthread_condattr_getpshared(const(pthread_condattr_t)*, int*) @nogc nothrow;
    int pthread_condattr_destroy(pthread_condattr_t*) @nogc nothrow;
    int pthread_condattr_init(pthread_condattr_t*) @nogc nothrow;
    int pthread_cond_timedwait(pthread_cond_t*, pthread_mutex_t*, const(timespec)*) @nogc nothrow;
    int pthread_cond_wait(pthread_cond_t*, pthread_mutex_t*) @nogc nothrow;
    int pthread_cond_broadcast(pthread_cond_t*) @nogc nothrow;
    int pthread_cond_signal(pthread_cond_t*) @nogc nothrow;
    int pthread_cond_destroy(pthread_cond_t*) @nogc nothrow;
    int pthread_cond_init(pthread_cond_t*, const(pthread_condattr_t)*) @nogc nothrow;
    int pthread_rwlockattr_setkind_np(pthread_rwlockattr_t*, int) @nogc nothrow;
    int pthread_rwlockattr_getkind_np(const(pthread_rwlockattr_t)*, int*) @nogc nothrow;
    int pthread_rwlockattr_setpshared(pthread_rwlockattr_t*, int) @nogc nothrow;
    int pthread_rwlockattr_getpshared(const(pthread_rwlockattr_t)*, int*) @nogc nothrow;
    int pthread_rwlockattr_destroy(pthread_rwlockattr_t*) @nogc nothrow;
    int pthread_rwlockattr_init(pthread_rwlockattr_t*) @nogc nothrow;
    int pthread_rwlock_unlock(pthread_rwlock_t*) @nogc nothrow;
    int pthread_rwlock_timedwrlock(pthread_rwlock_t*, const(timespec)*) @nogc nothrow;
    int pthread_rwlock_trywrlock(pthread_rwlock_t*) @nogc nothrow;
    int pthread_rwlock_wrlock(pthread_rwlock_t*) @nogc nothrow;
    int pthread_rwlock_timedrdlock(pthread_rwlock_t*, const(timespec)*) @nogc nothrow;
    int pthread_rwlock_tryrdlock(pthread_rwlock_t*) @nogc nothrow;
    int pthread_rwlock_rdlock(pthread_rwlock_t*) @nogc nothrow;
    int pthread_rwlock_destroy(pthread_rwlock_t*) @nogc nothrow;
    int pthread_rwlock_init(pthread_rwlock_t*, const(pthread_rwlockattr_t)*) @nogc nothrow;
    int pthread_mutexattr_setrobust(pthread_mutexattr_t*, int) @nogc nothrow;
    int pthread_mutexattr_getrobust(const(pthread_mutexattr_t)*, int*) @nogc nothrow;
    int pthread_mutexattr_setprioceiling(pthread_mutexattr_t*, int) @nogc nothrow;
    int pthread_mutexattr_getprioceiling(const(pthread_mutexattr_t)*, int*) @nogc nothrow;
    int pthread_mutexattr_setprotocol(pthread_mutexattr_t*, int) @nogc nothrow;
    int pthread_mutexattr_getprotocol(const(pthread_mutexattr_t)*, int*) @nogc nothrow;
    int pthread_mutexattr_settype(pthread_mutexattr_t*, int) @nogc nothrow;
    int pthread_mutexattr_gettype(const(pthread_mutexattr_t)*, int*) @nogc nothrow;
    int pthread_mutexattr_setpshared(pthread_mutexattr_t*, int) @nogc nothrow;
    int pthread_mutexattr_getpshared(const(pthread_mutexattr_t)*, int*) @nogc nothrow;
    int pthread_mutexattr_destroy(pthread_mutexattr_t*) @nogc nothrow;
    int pthread_mutexattr_init(pthread_mutexattr_t*) @nogc nothrow;
    int pthread_mutex_consistent(pthread_mutex_t*) @nogc nothrow;
    int pthread_mutex_setprioceiling(pthread_mutex_t*, int, int*) @nogc nothrow;
    int pthread_mutex_getprioceiling(const(pthread_mutex_t)*, int*) @nogc nothrow;
    int pthread_mutex_unlock(pthread_mutex_t*) @nogc nothrow;
    int pthread_mutex_timedlock(pthread_mutex_t*, const(timespec)*) @nogc nothrow;
    int pthread_mutex_lock(pthread_mutex_t*) @nogc nothrow;
    int pthread_mutex_trylock(pthread_mutex_t*) @nogc nothrow;
    int pthread_mutex_destroy(pthread_mutex_t*) @nogc nothrow;
    int pthread_mutex_init(pthread_mutex_t*, const(pthread_mutexattr_t)*) @nogc nothrow;
    int __sigsetjmp(__jmp_buf_tag*, int) @nogc nothrow;
    void __pthread_unwind_next(__pthread_unwind_buf_t*) @nogc nothrow;
    void __pthread_unregister_cancel(__pthread_unwind_buf_t*) @nogc nothrow;
    void __pthread_register_cancel(__pthread_unwind_buf_t*) @nogc nothrow;
    struct __pthread_cleanup_frame
    {
        void function(void*) __cancel_routine;
        void* __cancel_arg;
        int __do_it;
        int __cancel_type;
    }
    struct __pthread_unwind_buf_t
    {
        __cancel_jmp_buf_tag[1] __cancel_jmp_buf;
        void*[4] __pad;
    }
    struct __cancel_jmp_buf_tag
    {
        c_long[8] __cancel_jmp_buf;
        int __mask_was_saved;
    }
    void pthread_testcancel() @nogc nothrow;
    int pthread_cancel(c_ulong) @nogc nothrow;
    int pthread_setcanceltype(int, int*) @nogc nothrow;
    int pthread_setcancelstate(int, int*) @nogc nothrow;
    int pthread_once(int*, void function()) @nogc nothrow;
    int pthread_setschedprio(c_ulong, int) @nogc nothrow;
    int pthread_getschedparam(c_ulong, int*, sched_param*) @nogc nothrow;
    int pthread_setschedparam(c_ulong, int, const(sched_param)*) @nogc nothrow;
    int pthread_attr_setstack(pthread_attr_t*, void*, c_ulong) @nogc nothrow;
    int pthread_attr_getstack(const(pthread_attr_t)*, void**, c_ulong*) @nogc nothrow;
    int pthread_attr_setstacksize(pthread_attr_t*, c_ulong) @nogc nothrow;
    int pthread_attr_getstacksize(const(pthread_attr_t)*, c_ulong*) @nogc nothrow;
    int pthread_attr_setstackaddr(pthread_attr_t*, void*) @nogc nothrow;
    int pthread_attr_getstackaddr(const(pthread_attr_t)*, void**) @nogc nothrow;
    int pthread_attr_setscope(pthread_attr_t*, int) @nogc nothrow;
    int pthread_attr_getscope(const(pthread_attr_t)*, int*) @nogc nothrow;
    int pthread_attr_setinheritsched(pthread_attr_t*, int) @nogc nothrow;
    int pthread_attr_getinheritsched(const(pthread_attr_t)*, int*) @nogc nothrow;
    int pthread_attr_setschedpolicy(pthread_attr_t*, int) @nogc nothrow;
    int pthread_attr_getschedpolicy(const(pthread_attr_t)*, int*) @nogc nothrow;
    int pthread_attr_setschedparam(pthread_attr_t*, const(sched_param)*) @nogc nothrow;
    int pthread_attr_getschedparam(const(pthread_attr_t)*, sched_param*) @nogc nothrow;
    int pthread_attr_setguardsize(pthread_attr_t*, c_ulong) @nogc nothrow;
    int pthread_attr_getguardsize(const(pthread_attr_t)*, c_ulong*) @nogc nothrow;
    int pthread_attr_setdetachstate(pthread_attr_t*, int) @nogc nothrow;
    int pthread_attr_getdetachstate(const(pthread_attr_t)*, int*) @nogc nothrow;
    int pthread_attr_destroy(pthread_attr_t*) @nogc nothrow;
    int pthread_attr_init(pthread_attr_t*) @nogc nothrow;
    int pthread_equal(c_ulong, c_ulong) @nogc nothrow;
    c_ulong pthread_self() @nogc nothrow;
    int pthread_detach(c_ulong) @nogc nothrow;
    int pthread_join(c_ulong, void**) @nogc nothrow;
    void pthread_exit(void*) @nogc nothrow;
    int pthread_create(c_ulong*, const(pthread_attr_t)*, void* function(void*), void*) @nogc nothrow;
    enum _Anonymous_6
    {
        PTHREAD_CANCEL_DEFERRED = 0,
        PTHREAD_CANCEL_ASYNCHRONOUS = 1,
    }
    enum PTHREAD_CANCEL_DEFERRED = _Anonymous_6.PTHREAD_CANCEL_DEFERRED;
    enum PTHREAD_CANCEL_ASYNCHRONOUS = _Anonymous_6.PTHREAD_CANCEL_ASYNCHRONOUS;
    enum _Anonymous_7
    {
        PTHREAD_CANCEL_ENABLE = 0,
        PTHREAD_CANCEL_DISABLE = 1,
    }
    enum PTHREAD_CANCEL_ENABLE = _Anonymous_7.PTHREAD_CANCEL_ENABLE;
    enum PTHREAD_CANCEL_DISABLE = _Anonymous_7.PTHREAD_CANCEL_DISABLE;
    struct _pthread_cleanup_buffer
    {
        void function(void*) __routine;
        void* __arg;
        int __canceltype;
        _pthread_cleanup_buffer* __prev;
    }
    enum _Anonymous_8
    {
        PTHREAD_PROCESS_PRIVATE = 0,
        PTHREAD_PROCESS_SHARED = 1,
    }
    enum PTHREAD_PROCESS_PRIVATE = _Anonymous_8.PTHREAD_PROCESS_PRIVATE;
    enum PTHREAD_PROCESS_SHARED = _Anonymous_8.PTHREAD_PROCESS_SHARED;
    enum _Anonymous_9
    {
        PTHREAD_SCOPE_SYSTEM = 0,
        PTHREAD_SCOPE_PROCESS = 1,
    }
    enum PTHREAD_SCOPE_SYSTEM = _Anonymous_9.PTHREAD_SCOPE_SYSTEM;
    enum PTHREAD_SCOPE_PROCESS = _Anonymous_9.PTHREAD_SCOPE_PROCESS;
    enum _Anonymous_10
    {
        PTHREAD_INHERIT_SCHED = 0,
        PTHREAD_EXPLICIT_SCHED = 1,
    }
    enum PTHREAD_INHERIT_SCHED = _Anonymous_10.PTHREAD_INHERIT_SCHED;
    enum PTHREAD_EXPLICIT_SCHED = _Anonymous_10.PTHREAD_EXPLICIT_SCHED;
    enum _Anonymous_11
    {
        PTHREAD_RWLOCK_PREFER_READER_NP = 0,
        PTHREAD_RWLOCK_PREFER_WRITER_NP = 1,
        PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP = 2,
        PTHREAD_RWLOCK_DEFAULT_NP = 0,
    }
    enum PTHREAD_RWLOCK_PREFER_READER_NP = _Anonymous_11.PTHREAD_RWLOCK_PREFER_READER_NP;
    enum PTHREAD_RWLOCK_PREFER_WRITER_NP = _Anonymous_11.PTHREAD_RWLOCK_PREFER_WRITER_NP;
    enum PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP = _Anonymous_11.PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP;
    enum PTHREAD_RWLOCK_DEFAULT_NP = _Anonymous_11.PTHREAD_RWLOCK_DEFAULT_NP;
    enum _Anonymous_12
    {
        PTHREAD_PRIO_NONE = 0,
        PTHREAD_PRIO_INHERIT = 1,
        PTHREAD_PRIO_PROTECT = 2,
    }
    enum PTHREAD_PRIO_NONE = _Anonymous_12.PTHREAD_PRIO_NONE;
    enum PTHREAD_PRIO_INHERIT = _Anonymous_12.PTHREAD_PRIO_INHERIT;
    enum PTHREAD_PRIO_PROTECT = _Anonymous_12.PTHREAD_PRIO_PROTECT;
    enum _Anonymous_13
    {
        PTHREAD_MUTEX_STALLED = 0,
        PTHREAD_MUTEX_STALLED_NP = 0,
        PTHREAD_MUTEX_ROBUST = 1,
        PTHREAD_MUTEX_ROBUST_NP = 1,
    }
    enum PTHREAD_MUTEX_STALLED = _Anonymous_13.PTHREAD_MUTEX_STALLED;
    enum PTHREAD_MUTEX_STALLED_NP = _Anonymous_13.PTHREAD_MUTEX_STALLED_NP;
    enum PTHREAD_MUTEX_ROBUST = _Anonymous_13.PTHREAD_MUTEX_ROBUST;
    enum PTHREAD_MUTEX_ROBUST_NP = _Anonymous_13.PTHREAD_MUTEX_ROBUST_NP;
    enum _Anonymous_14
    {
        PTHREAD_MUTEX_TIMED_NP = 0,
        PTHREAD_MUTEX_RECURSIVE_NP = 1,
        PTHREAD_MUTEX_ERRORCHECK_NP = 2,
        PTHREAD_MUTEX_ADAPTIVE_NP = 3,
        PTHREAD_MUTEX_NORMAL = 0,
        PTHREAD_MUTEX_RECURSIVE = 1,
        PTHREAD_MUTEX_ERRORCHECK = 2,
        PTHREAD_MUTEX_DEFAULT = 0,
    }
    enum PTHREAD_MUTEX_TIMED_NP = _Anonymous_14.PTHREAD_MUTEX_TIMED_NP;
    enum PTHREAD_MUTEX_RECURSIVE_NP = _Anonymous_14.PTHREAD_MUTEX_RECURSIVE_NP;
    enum PTHREAD_MUTEX_ERRORCHECK_NP = _Anonymous_14.PTHREAD_MUTEX_ERRORCHECK_NP;
    enum PTHREAD_MUTEX_ADAPTIVE_NP = _Anonymous_14.PTHREAD_MUTEX_ADAPTIVE_NP;
    enum PTHREAD_MUTEX_NORMAL = _Anonymous_14.PTHREAD_MUTEX_NORMAL;
    enum PTHREAD_MUTEX_RECURSIVE = _Anonymous_14.PTHREAD_MUTEX_RECURSIVE;
    enum PTHREAD_MUTEX_ERRORCHECK = _Anonymous_14.PTHREAD_MUTEX_ERRORCHECK;
    enum PTHREAD_MUTEX_DEFAULT = _Anonymous_14.PTHREAD_MUTEX_DEFAULT;
    enum _Anonymous_15
    {
        PTHREAD_CREATE_JOINABLE = 0,
        PTHREAD_CREATE_DETACHED = 1,
    }
    enum PTHREAD_CREATE_JOINABLE = _Anonymous_15.PTHREAD_CREATE_JOINABLE;
    enum PTHREAD_CREATE_DETACHED = _Anonymous_15.PTHREAD_CREATE_DETACHED;
    int ERR_load_X509V3_strings() @nogc nothrow;
    void PROFESSION_INFO_set0_registrationNumber(ProfessionInfo_st*, asn1_string_st*) @nogc nothrow;
    const(asn1_string_st)* PROFESSION_INFO_get0_registrationNumber(const(ProfessionInfo_st)*) @nogc nothrow;
    void PROFESSION_INFO_set0_professionOIDs(ProfessionInfo_st*, stack_st_ASN1_OBJECT*) @nogc nothrow;
    const(stack_st_ASN1_OBJECT)* PROFESSION_INFO_get0_professionOIDs(const(ProfessionInfo_st)*) @nogc nothrow;
    void PROFESSION_INFO_set0_professionItems(ProfessionInfo_st*, stack_st_ASN1_STRING*) @nogc nothrow;
    const(stack_st_ASN1_STRING)* PROFESSION_INFO_get0_professionItems(const(ProfessionInfo_st)*) @nogc nothrow;
    void PROFESSION_INFO_set0_namingAuthority(ProfessionInfo_st*, NamingAuthority_st*) @nogc nothrow;
    const(NamingAuthority_st)* PROFESSION_INFO_get0_namingAuthority(const(ProfessionInfo_st)*) @nogc nothrow;
    void PROFESSION_INFO_set0_addProfessionInfo(ProfessionInfo_st*, asn1_string_st*) @nogc nothrow;
    const(asn1_string_st)* PROFESSION_INFO_get0_addProfessionInfo(const(ProfessionInfo_st)*) @nogc nothrow;
    void ADMISSIONS_set0_professionInfos(Admissions_st*, stack_st_PROFESSION_INFO*) @nogc nothrow;
    const(stack_st_PROFESSION_INFO)* ADMISSIONS_get0_professionInfos(const(Admissions_st)*) @nogc nothrow;
    void ADMISSIONS_set0_namingAuthority(Admissions_st*, NamingAuthority_st*) @nogc nothrow;
    const(NamingAuthority_st)* ADMISSIONS_get0_namingAuthority(const(Admissions_st)*) @nogc nothrow;
    void ADMISSIONS_set0_admissionAuthority(Admissions_st*, GENERAL_NAME_st*) @nogc nothrow;
    const(GENERAL_NAME_st)* ADMISSIONS_get0_admissionAuthority(const(Admissions_st)*) @nogc nothrow;
    void ADMISSION_SYNTAX_set0_contentsOfAdmissions(AdmissionSyntax_st*, stack_st_ADMISSIONS*) @nogc nothrow;
    const(stack_st_ADMISSIONS)* ADMISSION_SYNTAX_get0_contentsOfAdmissions(const(AdmissionSyntax_st)*) @nogc nothrow;
    void ADMISSION_SYNTAX_set0_admissionAuthority(AdmissionSyntax_st*, GENERAL_NAME_st*) @nogc nothrow;
    const(GENERAL_NAME_st)* ADMISSION_SYNTAX_get0_admissionAuthority(const(AdmissionSyntax_st)*) @nogc nothrow;
    void NAMING_AUTHORITY_set0_authorityText(NamingAuthority_st*, asn1_string_st*) @nogc nothrow;
    void NAMING_AUTHORITY_set0_authorityURL(NamingAuthority_st*, asn1_string_st*) @nogc nothrow;
    void NAMING_AUTHORITY_set0_authorityId(NamingAuthority_st*, asn1_object_st*) @nogc nothrow;
    const(asn1_string_st)* NAMING_AUTHORITY_get0_authorityText(const(NamingAuthority_st)*) @nogc nothrow;
    const(asn1_string_st)* NAMING_AUTHORITY_get0_authorityURL(const(NamingAuthority_st)*) @nogc nothrow;
    const(asn1_object_st)* NAMING_AUTHORITY_get0_authorityId(const(NamingAuthority_st)*) @nogc nothrow;
    alias PROFESSION_INFOS = stack_st_PROFESSION_INFO;
    static void sk_PROFESSION_INFO_pop_free(stack_st_PROFESSION_INFO*, void function(ProfessionInfo_st*)) @nogc nothrow;
    static void sk_PROFESSION_INFO_sort(stack_st_PROFESSION_INFO*) @nogc nothrow;
    static int function(const(const(ProfessionInfo_st)*)*, const(const(ProfessionInfo_st)*)*) sk_PROFESSION_INFO_set_cmp_func(stack_st_PROFESSION_INFO*, int function(const(const(ProfessionInfo_st)*)*, const(const(ProfessionInfo_st)*)*)) @nogc nothrow;
    static stack_st_PROFESSION_INFO* sk_PROFESSION_INFO_deep_copy(const(stack_st_PROFESSION_INFO)*, ProfessionInfo_st* function(const(ProfessionInfo_st)*), void function(ProfessionInfo_st*)) @nogc nothrow;
    static stack_st_PROFESSION_INFO* sk_PROFESSION_INFO_dup(const(stack_st_PROFESSION_INFO)*) @nogc nothrow;
    alias sk_PROFESSION_INFO_freefunc = void function(ProfessionInfo_st*);
    static int sk_PROFESSION_INFO_find_ex(stack_st_PROFESSION_INFO*, ProfessionInfo_st*) @nogc nothrow;
    static int sk_PROFESSION_INFO_find(stack_st_PROFESSION_INFO*, ProfessionInfo_st*) @nogc nothrow;
    static ProfessionInfo_st* sk_PROFESSION_INFO_set(stack_st_PROFESSION_INFO*, int, ProfessionInfo_st*) @nogc nothrow;
    static int sk_PROFESSION_INFO_insert(stack_st_PROFESSION_INFO*, ProfessionInfo_st*, int) @nogc nothrow;
    struct stack_st_PROFESSION_INFO;
    static ProfessionInfo_st* sk_PROFESSION_INFO_shift(stack_st_PROFESSION_INFO*) @nogc nothrow;
    static ProfessionInfo_st* sk_PROFESSION_INFO_pop(stack_st_PROFESSION_INFO*) @nogc nothrow;
    static int sk_PROFESSION_INFO_unshift(stack_st_PROFESSION_INFO*, ProfessionInfo_st*) @nogc nothrow;
    static int sk_PROFESSION_INFO_push(stack_st_PROFESSION_INFO*, ProfessionInfo_st*) @nogc nothrow;
    static ProfessionInfo_st* sk_PROFESSION_INFO_delete_ptr(stack_st_PROFESSION_INFO*, ProfessionInfo_st*) @nogc nothrow;
    static ProfessionInfo_st* sk_PROFESSION_INFO_delete(stack_st_PROFESSION_INFO*, int) @nogc nothrow;
    static void sk_PROFESSION_INFO_zero(stack_st_PROFESSION_INFO*) @nogc nothrow;
    static void sk_PROFESSION_INFO_free(stack_st_PROFESSION_INFO*) @nogc nothrow;
    static int sk_PROFESSION_INFO_reserve(stack_st_PROFESSION_INFO*, int) @nogc nothrow;
    static stack_st_PROFESSION_INFO* sk_PROFESSION_INFO_new_reserve(int function(const(const(ProfessionInfo_st)*)*, const(const(ProfessionInfo_st)*)*), int) @nogc nothrow;
    static stack_st_PROFESSION_INFO* sk_PROFESSION_INFO_new_null() @nogc nothrow;
    alias sk_PROFESSION_INFO_compfunc = int function(const(const(ProfessionInfo_st)*)*, const(const(ProfessionInfo_st)*)*);
    static stack_st_PROFESSION_INFO* sk_PROFESSION_INFO_new(int function(const(const(ProfessionInfo_st)*)*, const(const(ProfessionInfo_st)*)*)) @nogc nothrow;
    static ProfessionInfo_st* sk_PROFESSION_INFO_value(const(stack_st_PROFESSION_INFO)*, int) @nogc nothrow;
    static int sk_PROFESSION_INFO_num(const(stack_st_PROFESSION_INFO)*) @nogc nothrow;
    alias sk_PROFESSION_INFO_copyfunc = ProfessionInfo_st* function(const(ProfessionInfo_st)*);
    static int sk_PROFESSION_INFO_is_sorted(const(stack_st_PROFESSION_INFO)*) @nogc nothrow;
    static stack_st_ADMISSIONS* sk_ADMISSIONS_dup(const(stack_st_ADMISSIONS)*) @nogc nothrow;
    alias sk_ADMISSIONS_copyfunc = Admissions_st* function(const(Admissions_st)*);
    alias sk_ADMISSIONS_freefunc = void function(Admissions_st*);
    alias sk_ADMISSIONS_compfunc = int function(const(const(Admissions_st)*)*, const(const(Admissions_st)*)*);
    struct stack_st_ADMISSIONS;
    static stack_st_ADMISSIONS* sk_ADMISSIONS_new(int function(const(const(Admissions_st)*)*, const(const(Admissions_st)*)*)) @nogc nothrow;
    static stack_st_ADMISSIONS* sk_ADMISSIONS_new_null() @nogc nothrow;
    static void sk_ADMISSIONS_zero(stack_st_ADMISSIONS*) @nogc nothrow;
    static stack_st_ADMISSIONS* sk_ADMISSIONS_new_reserve(int function(const(const(Admissions_st)*)*, const(const(Admissions_st)*)*), int) @nogc nothrow;
    static int sk_ADMISSIONS_reserve(stack_st_ADMISSIONS*, int) @nogc nothrow;
    static Admissions_st* sk_ADMISSIONS_value(const(stack_st_ADMISSIONS)*, int) @nogc nothrow;
    static int function(const(const(Admissions_st)*)*, const(const(Admissions_st)*)*) sk_ADMISSIONS_set_cmp_func(stack_st_ADMISSIONS*, int function(const(const(Admissions_st)*)*, const(const(Admissions_st)*)*)) @nogc nothrow;
    static stack_st_ADMISSIONS* sk_ADMISSIONS_deep_copy(const(stack_st_ADMISSIONS)*, Admissions_st* function(const(Admissions_st)*), void function(Admissions_st*)) @nogc nothrow;
    static int sk_ADMISSIONS_num(const(stack_st_ADMISSIONS)*) @nogc nothrow;
    static int sk_ADMISSIONS_is_sorted(const(stack_st_ADMISSIONS)*) @nogc nothrow;
    static void sk_ADMISSIONS_sort(stack_st_ADMISSIONS*) @nogc nothrow;
    static int sk_ADMISSIONS_find_ex(stack_st_ADMISSIONS*, Admissions_st*) @nogc nothrow;
    static int sk_ADMISSIONS_find(stack_st_ADMISSIONS*, Admissions_st*) @nogc nothrow;
    static Admissions_st* sk_ADMISSIONS_set(stack_st_ADMISSIONS*, int, Admissions_st*) @nogc nothrow;
    static int sk_ADMISSIONS_insert(stack_st_ADMISSIONS*, Admissions_st*, int) @nogc nothrow;
    static void sk_ADMISSIONS_pop_free(stack_st_ADMISSIONS*, void function(Admissions_st*)) @nogc nothrow;
    static Admissions_st* sk_ADMISSIONS_shift(stack_st_ADMISSIONS*) @nogc nothrow;
    static Admissions_st* sk_ADMISSIONS_pop(stack_st_ADMISSIONS*) @nogc nothrow;
    static int sk_ADMISSIONS_unshift(stack_st_ADMISSIONS*, Admissions_st*) @nogc nothrow;
    static int sk_ADMISSIONS_push(stack_st_ADMISSIONS*, Admissions_st*) @nogc nothrow;
    static Admissions_st* sk_ADMISSIONS_delete_ptr(stack_st_ADMISSIONS*, Admissions_st*) @nogc nothrow;
    static Admissions_st* sk_ADMISSIONS_delete(stack_st_ADMISSIONS*, int) @nogc nothrow;
    static void sk_ADMISSIONS_free(stack_st_ADMISSIONS*) @nogc nothrow;
    AdmissionSyntax_st* ADMISSION_SYNTAX_new() @nogc nothrow;
    AdmissionSyntax_st* d2i_ADMISSION_SYNTAX(AdmissionSyntax_st**, const(ubyte)**, c_long) @nogc nothrow;
    void ADMISSION_SYNTAX_free(AdmissionSyntax_st*) @nogc nothrow;
    int i2d_ADMISSION_SYNTAX(AdmissionSyntax_st*, ubyte**) @nogc nothrow;
    extern __gshared const(ASN1_ITEM_st) ADMISSION_SYNTAX_it;
    Admissions_st* ADMISSIONS_new() @nogc nothrow;
    Admissions_st* d2i_ADMISSIONS(Admissions_st**, const(ubyte)**, c_long) @nogc nothrow;
    void ADMISSIONS_free(Admissions_st*) @nogc nothrow;
    extern __gshared const(ASN1_ITEM_st) ADMISSIONS_it;
    int i2d_ADMISSIONS(Admissions_st*, ubyte**) @nogc nothrow;
    ProfessionInfo_st* PROFESSION_INFO_new() @nogc nothrow;
    ProfessionInfo_st* d2i_PROFESSION_INFO(ProfessionInfo_st**, const(ubyte)**, c_long) @nogc nothrow;
    extern __gshared const(ASN1_ITEM_st) PROFESSION_INFO_it;
    void PROFESSION_INFO_free(ProfessionInfo_st*) @nogc nothrow;
    int i2d_PROFESSION_INFO(ProfessionInfo_st*, ubyte**) @nogc nothrow;
    NamingAuthority_st* NAMING_AUTHORITY_new() @nogc nothrow;
    NamingAuthority_st* d2i_NAMING_AUTHORITY(NamingAuthority_st**, const(ubyte)**, c_long) @nogc nothrow;
    int i2d_NAMING_AUTHORITY(NamingAuthority_st*, ubyte**) @nogc nothrow;
    extern __gshared const(ASN1_ITEM_st) NAMING_AUTHORITY_it;
    void NAMING_AUTHORITY_free(NamingAuthority_st*) @nogc nothrow;
    struct AdmissionSyntax_st;
    alias ADMISSION_SYNTAX = AdmissionSyntax_st;
    struct Admissions_st;
    alias ADMISSIONS = Admissions_st;
    struct ProfessionInfo_st;
    alias PROFESSION_INFO = ProfessionInfo_st;
    struct NamingAuthority_st;
    alias NAMING_AUTHORITY = NamingAuthority_st;
    static asn1_string_st* sk_ASN1_STRING_value(const(stack_st_ASN1_STRING)*, int) @nogc nothrow;
    static void sk_ASN1_STRING_sort(stack_st_ASN1_STRING*) @nogc nothrow;
    struct stack_st_ASN1_STRING;
    static int sk_ASN1_STRING_unshift(stack_st_ASN1_STRING*, asn1_string_st*) @nogc nothrow;
    static int sk_ASN1_STRING_push(stack_st_ASN1_STRING*, asn1_string_st*) @nogc nothrow;
    static asn1_string_st* sk_ASN1_STRING_delete_ptr(stack_st_ASN1_STRING*, asn1_string_st*) @nogc nothrow;
    static asn1_string_st* sk_ASN1_STRING_delete(stack_st_ASN1_STRING*, int) @nogc nothrow;
    static void sk_ASN1_STRING_zero(stack_st_ASN1_STRING*) @nogc nothrow;
    static void sk_ASN1_STRING_free(stack_st_ASN1_STRING*) @nogc nothrow;
    static int sk_ASN1_STRING_reserve(stack_st_ASN1_STRING*, int) @nogc nothrow;
    alias sk_ASN1_STRING_compfunc = int function(const(const(asn1_string_st)*)*, const(const(asn1_string_st)*)*);
    alias sk_ASN1_STRING_freefunc = void function(asn1_string_st*);
    alias sk_ASN1_STRING_copyfunc = asn1_string_st* function(const(asn1_string_st)*);
    static int sk_ASN1_STRING_num(const(stack_st_ASN1_STRING)*) @nogc nothrow;
    static asn1_string_st* sk_ASN1_STRING_shift(stack_st_ASN1_STRING*) @nogc nothrow;
    static stack_st_ASN1_STRING* sk_ASN1_STRING_new(int function(const(const(asn1_string_st)*)*, const(const(asn1_string_st)*)*)) @nogc nothrow;
    static stack_st_ASN1_STRING* sk_ASN1_STRING_new_null() @nogc nothrow;
    static asn1_string_st* sk_ASN1_STRING_pop(stack_st_ASN1_STRING*) @nogc nothrow;
    static void sk_ASN1_STRING_pop_free(stack_st_ASN1_STRING*, void function(asn1_string_st*)) @nogc nothrow;
    static int sk_ASN1_STRING_insert(stack_st_ASN1_STRING*, asn1_string_st*, int) @nogc nothrow;
    static asn1_string_st* sk_ASN1_STRING_set(stack_st_ASN1_STRING*, int, asn1_string_st*) @nogc nothrow;
    static int sk_ASN1_STRING_find(stack_st_ASN1_STRING*, asn1_string_st*) @nogc nothrow;
    static int sk_ASN1_STRING_find_ex(stack_st_ASN1_STRING*, asn1_string_st*) @nogc nothrow;
    static int sk_ASN1_STRING_is_sorted(const(stack_st_ASN1_STRING)*) @nogc nothrow;
    static stack_st_ASN1_STRING* sk_ASN1_STRING_new_reserve(int function(const(const(asn1_string_st)*)*, const(const(asn1_string_st)*)*), int) @nogc nothrow;
    static stack_st_ASN1_STRING* sk_ASN1_STRING_dup(const(stack_st_ASN1_STRING)*) @nogc nothrow;
    static stack_st_ASN1_STRING* sk_ASN1_STRING_deep_copy(const(stack_st_ASN1_STRING)*, asn1_string_st* function(const(asn1_string_st)*), void function(asn1_string_st*)) @nogc nothrow;
    static int function(const(const(asn1_string_st)*)*, const(const(asn1_string_st)*)*) sk_ASN1_STRING_set_cmp_func(stack_st_ASN1_STRING*, int function(const(const(asn1_string_st)*)*, const(const(asn1_string_st)*)*)) @nogc nothrow;
    int X509v3_addr_validate_resource_set(stack_st_X509*, stack_st_IPAddressFamily*, int) @nogc nothrow;
    int X509v3_asid_validate_resource_set(stack_st_X509*, ASIdentifiers_st*, int) @nogc nothrow;
    int X509v3_addr_validate_path(x509_store_ctx_st*) @nogc nothrow;
    int X509v3_asid_validate_path(x509_store_ctx_st*) @nogc nothrow;
    int X509v3_addr_subset(stack_st_IPAddressFamily*, stack_st_IPAddressFamily*) @nogc nothrow;
    int X509v3_asid_subset(ASIdentifiers_st*, ASIdentifiers_st*) @nogc nothrow;
    int X509v3_addr_inherits(stack_st_IPAddressFamily*) @nogc nothrow;
    int X509v3_asid_inherits(ASIdentifiers_st*) @nogc nothrow;
    int X509v3_addr_canonize(stack_st_IPAddressFamily*) @nogc nothrow;
    int X509v3_asid_canonize(ASIdentifiers_st*) @nogc nothrow;
    int X509v3_addr_is_canonical(stack_st_IPAddressFamily*) @nogc nothrow;
    int X509v3_asid_is_canonical(ASIdentifiers_st*) @nogc nothrow;
    int X509v3_addr_get_range(IPAddressOrRange_st*, const(uint), ubyte*, ubyte*, const(int)) @nogc nothrow;
    uint X509v3_addr_get_afi(const(IPAddressFamily_st)*) @nogc nothrow;
    int X509v3_addr_add_range(stack_st_IPAddressFamily*, const(uint), const(uint)*, ubyte*, ubyte*) @nogc nothrow;
    int X509v3_addr_add_prefix(stack_st_IPAddressFamily*, const(uint), const(uint)*, ubyte*, const(int)) @nogc nothrow;
    int X509v3_addr_add_inherit(stack_st_IPAddressFamily*, const(uint), const(uint)*) @nogc nothrow;
    int X509v3_asid_add_id_or_range(ASIdentifiers_st*, int, asn1_string_st*, asn1_string_st*) @nogc nothrow;
    int X509v3_asid_add_inherit(ASIdentifiers_st*, int) @nogc nothrow;
    IPAddressFamily_st* IPAddressFamily_new() @nogc nothrow;
    IPAddressFamily_st* d2i_IPAddressFamily(IPAddressFamily_st**, const(ubyte)**, c_long) @nogc nothrow;
    void IPAddressFamily_free(IPAddressFamily_st*) @nogc nothrow;
    int i2d_IPAddressFamily(IPAddressFamily_st*, ubyte**) @nogc nothrow;
    extern __gshared const(ASN1_ITEM_st) IPAddressFamily_it;
    IPAddressChoice_st* d2i_IPAddressChoice(IPAddressChoice_st**, const(ubyte)**, c_long) @nogc nothrow;
    IPAddressChoice_st* IPAddressChoice_new() @nogc nothrow;
    extern __gshared const(ASN1_ITEM_st) IPAddressChoice_it;
    int i2d_IPAddressChoice(IPAddressChoice_st*, ubyte**) @nogc nothrow;
    void IPAddressChoice_free(IPAddressChoice_st*) @nogc nothrow;
    IPAddressOrRange_st* d2i_IPAddressOrRange(IPAddressOrRange_st**, const(ubyte)**, c_long) @nogc nothrow;
    IPAddressOrRange_st* IPAddressOrRange_new() @nogc nothrow;
    int i2d_IPAddressOrRange(IPAddressOrRange_st*, ubyte**) @nogc nothrow;
    void IPAddressOrRange_free(IPAddressOrRange_st*) @nogc nothrow;
    extern __gshared const(ASN1_ITEM_st) IPAddressOrRange_it;
    IPAddressRange_st* d2i_IPAddressRange(IPAddressRange_st**, const(ubyte)**, c_long) @nogc nothrow;
    IPAddressRange_st* IPAddressRange_new() @nogc nothrow;
    extern __gshared const(ASN1_ITEM_st) IPAddressRange_it;
    int i2d_IPAddressRange(IPAddressRange_st*, ubyte**) @nogc nothrow;
    void IPAddressRange_free(IPAddressRange_st*) @nogc nothrow;
    static int function(const(const(IPAddressFamily_st)*)*, const(const(IPAddressFamily_st)*)*) sk_IPAddressFamily_set_cmp_func(stack_st_IPAddressFamily*, int function(const(const(IPAddressFamily_st)*)*, const(const(IPAddressFamily_st)*)*)) @nogc nothrow;
    static stack_st_IPAddressFamily* sk_IPAddressFamily_deep_copy(const(stack_st_IPAddressFamily)*, IPAddressFamily_st* function(const(IPAddressFamily_st)*), void function(IPAddressFamily_st*)) @nogc nothrow;
    static stack_st_IPAddressFamily* sk_IPAddressFamily_dup(const(stack_st_IPAddressFamily)*) @nogc nothrow;
    static int sk_IPAddressFamily_is_sorted(const(stack_st_IPAddressFamily)*) @nogc nothrow;
    static void sk_IPAddressFamily_sort(stack_st_IPAddressFamily*) @nogc nothrow;
    static int sk_IPAddressFamily_find_ex(stack_st_IPAddressFamily*, IPAddressFamily_st*) @nogc nothrow;
    static int sk_IPAddressFamily_find(stack_st_IPAddressFamily*, IPAddressFamily_st*) @nogc nothrow;
    static IPAddressFamily_st* sk_IPAddressFamily_set(stack_st_IPAddressFamily*, int, IPAddressFamily_st*) @nogc nothrow;
    static int sk_IPAddressFamily_insert(stack_st_IPAddressFamily*, IPAddressFamily_st*, int) @nogc nothrow;
    static stack_st_IPAddressFamily* sk_IPAddressFamily_new(int function(const(const(IPAddressFamily_st)*)*, const(const(IPAddressFamily_st)*)*)) @nogc nothrow;
    static int sk_IPAddressFamily_push(stack_st_IPAddressFamily*, IPAddressFamily_st*) @nogc nothrow;
    static IPAddressFamily_st* sk_IPAddressFamily_value(const(stack_st_IPAddressFamily)*, int) @nogc nothrow;
    static int sk_IPAddressFamily_num(const(stack_st_IPAddressFamily)*) @nogc nothrow;
    alias sk_IPAddressFamily_copyfunc = IPAddressFamily_st* function(const(IPAddressFamily_st)*);
    alias sk_IPAddressFamily_freefunc = void function(IPAddressFamily_st*);
    alias sk_IPAddressFamily_compfunc = int function(const(const(IPAddressFamily_st)*)*, const(const(IPAddressFamily_st)*)*);
    static stack_st_IPAddressFamily* sk_IPAddressFamily_new_null() @nogc nothrow;
    static stack_st_IPAddressFamily* sk_IPAddressFamily_new_reserve(int function(const(const(IPAddressFamily_st)*)*, const(const(IPAddressFamily_st)*)*), int) @nogc nothrow;
    static int sk_IPAddressFamily_reserve(stack_st_IPAddressFamily*, int) @nogc nothrow;
    static void sk_IPAddressFamily_free(stack_st_IPAddressFamily*) @nogc nothrow;
    static void sk_IPAddressFamily_zero(stack_st_IPAddressFamily*) @nogc nothrow;
    static IPAddressFamily_st* sk_IPAddressFamily_shift(stack_st_IPAddressFamily*) @nogc nothrow;
    static IPAddressFamily_st* sk_IPAddressFamily_pop(stack_st_IPAddressFamily*) @nogc nothrow;
    static int sk_IPAddressFamily_unshift(stack_st_IPAddressFamily*, IPAddressFamily_st*) @nogc nothrow;
    static IPAddressFamily_st* sk_IPAddressFamily_delete(stack_st_IPAddressFamily*, int) @nogc nothrow;
    static void sk_IPAddressFamily_pop_free(stack_st_IPAddressFamily*, void function(IPAddressFamily_st*)) @nogc nothrow;
    static IPAddressFamily_st* sk_IPAddressFamily_delete_ptr(stack_st_IPAddressFamily*, IPAddressFamily_st*) @nogc nothrow;
    struct stack_st_IPAddressFamily;
    alias IPAddrBlocks = stack_st_IPAddressFamily;
    struct IPAddressFamily_st
    {
        asn1_string_st* addressFamily;
        IPAddressChoice_st* ipAddressChoice;
    }
    alias IPAddressFamily = IPAddressFamily_st;
    struct IPAddressChoice_st
    {
        int type;
        static union _Anonymous_16
        {
            int* inherit;
            stack_st_IPAddressOrRange* addressesOrRanges;
        }
        _Anonymous_16 u;
    }
    alias IPAddressChoice = IPAddressChoice_st;
    static stack_st_IPAddressOrRange* sk_IPAddressOrRange_new_reserve(int function(const(const(IPAddressOrRange_st)*)*, const(const(IPAddressOrRange_st)*)*), int) @nogc nothrow;
    static int function(const(const(IPAddressOrRange_st)*)*, const(const(IPAddressOrRange_st)*)*) sk_IPAddressOrRange_set_cmp_func(stack_st_IPAddressOrRange*, int function(const(const(IPAddressOrRange_st)*)*, const(const(IPAddressOrRange_st)*)*)) @nogc nothrow;
    static stack_st_IPAddressOrRange* sk_IPAddressOrRange_deep_copy(const(stack_st_IPAddressOrRange)*, IPAddressOrRange_st* function(const(IPAddressOrRange_st)*), void function(IPAddressOrRange_st*)) @nogc nothrow;
    static stack_st_IPAddressOrRange* sk_IPAddressOrRange_dup(const(stack_st_IPAddressOrRange)*) @nogc nothrow;
    static int sk_IPAddressOrRange_is_sorted(const(stack_st_IPAddressOrRange)*) @nogc nothrow;
    static void sk_IPAddressOrRange_sort(stack_st_IPAddressOrRange*) @nogc nothrow;
    static int sk_IPAddressOrRange_find_ex(stack_st_IPAddressOrRange*, IPAddressOrRange_st*) @nogc nothrow;
    static int sk_IPAddressOrRange_find(stack_st_IPAddressOrRange*, IPAddressOrRange_st*) @nogc nothrow;
    static IPAddressOrRange_st* sk_IPAddressOrRange_set(stack_st_IPAddressOrRange*, int, IPAddressOrRange_st*) @nogc nothrow;
    static int sk_IPAddressOrRange_insert(stack_st_IPAddressOrRange*, IPAddressOrRange_st*, int) @nogc nothrow;
    static void sk_IPAddressOrRange_pop_free(stack_st_IPAddressOrRange*, void function(IPAddressOrRange_st*)) @nogc nothrow;
    static IPAddressOrRange_st* sk_IPAddressOrRange_shift(stack_st_IPAddressOrRange*) @nogc nothrow;
    static IPAddressOrRange_st* sk_IPAddressOrRange_pop(stack_st_IPAddressOrRange*) @nogc nothrow;
    static int sk_IPAddressOrRange_unshift(stack_st_IPAddressOrRange*, IPAddressOrRange_st*) @nogc nothrow;
    static int sk_IPAddressOrRange_push(stack_st_IPAddressOrRange*, IPAddressOrRange_st*) @nogc nothrow;
    static IPAddressOrRange_st* sk_IPAddressOrRange_delete_ptr(stack_st_IPAddressOrRange*, IPAddressOrRange_st*) @nogc nothrow;
    static IPAddressOrRange_st* sk_IPAddressOrRange_delete(stack_st_IPAddressOrRange*, int) @nogc nothrow;
    static void sk_IPAddressOrRange_zero(stack_st_IPAddressOrRange*) @nogc nothrow;
    static void sk_IPAddressOrRange_free(stack_st_IPAddressOrRange*) @nogc nothrow;
    static int sk_IPAddressOrRange_reserve(stack_st_IPAddressOrRange*, int) @nogc nothrow;
    alias sk_IPAddressOrRange_freefunc = void function(IPAddressOrRange_st*);
    static stack_st_IPAddressOrRange* sk_IPAddressOrRange_new_null() @nogc nothrow;
    static stack_st_IPAddressOrRange* sk_IPAddressOrRange_new(int function(const(const(IPAddressOrRange_st)*)*, const(const(IPAddressOrRange_st)*)*)) @nogc nothrow;
    alias sk_IPAddressOrRange_compfunc = int function(const(const(IPAddressOrRange_st)*)*, const(const(IPAddressOrRange_st)*)*);
    static IPAddressOrRange_st* sk_IPAddressOrRange_value(const(stack_st_IPAddressOrRange)*, int) @nogc nothrow;
    static int sk_IPAddressOrRange_num(const(stack_st_IPAddressOrRange)*) @nogc nothrow;
    alias sk_IPAddressOrRange_copyfunc = IPAddressOrRange_st* function(const(IPAddressOrRange_st)*);
    struct stack_st_IPAddressOrRange;
    alias IPAddressOrRanges = stack_st_IPAddressOrRange;
    struct IPAddressOrRange_st
    {
        int type;
        static union _Anonymous_17
        {
            asn1_string_st* addressPrefix;
            IPAddressRange_st* addressRange;
        }
        _Anonymous_17 u;
    }
    alias IPAddressOrRange = IPAddressOrRange_st;
    struct IPAddressRange_st
    {
        asn1_string_st* min;
        asn1_string_st* max;
    }
    alias IPAddressRange = IPAddressRange_st;
    ASIdentifiers_st* d2i_ASIdentifiers(ASIdentifiers_st**, const(ubyte)**, c_long) @nogc nothrow;
    ASIdentifiers_st* ASIdentifiers_new() @nogc nothrow;
    extern __gshared const(ASN1_ITEM_st) ASIdentifiers_it;
    int i2d_ASIdentifiers(ASIdentifiers_st*, ubyte**) @nogc nothrow;
    void ASIdentifiers_free(ASIdentifiers_st*) @nogc nothrow;
    ASIdentifierChoice_st* d2i_ASIdentifierChoice(ASIdentifierChoice_st**, const(ubyte)**, c_long) @nogc nothrow;
    ASIdentifierChoice_st* ASIdentifierChoice_new() @nogc nothrow;
    int i2d_ASIdentifierChoice(ASIdentifierChoice_st*, ubyte**) @nogc nothrow;
    void ASIdentifierChoice_free(ASIdentifierChoice_st*) @nogc nothrow;
    extern __gshared const(ASN1_ITEM_st) ASIdentifierChoice_it;
    ASIdOrRange_st* d2i_ASIdOrRange(ASIdOrRange_st**, const(ubyte)**, c_long) @nogc nothrow;
    ASIdOrRange_st* ASIdOrRange_new() @nogc nothrow;
    extern __gshared const(ASN1_ITEM_st) ASIdOrRange_it;
    int i2d_ASIdOrRange(ASIdOrRange_st*, ubyte**) @nogc nothrow;
    void ASIdOrRange_free(ASIdOrRange_st*) @nogc nothrow;
    ASRange_st* ASRange_new() @nogc nothrow;
    ASRange_st* d2i_ASRange(ASRange_st**, const(ubyte)**, c_long) @nogc nothrow;
    int i2d_ASRange(ASRange_st*, ubyte**) @nogc nothrow;
    extern __gshared const(ASN1_ITEM_st) ASRange_it;
    void ASRange_free(ASRange_st*) @nogc nothrow;
    struct ASIdentifiers_st
    {
        ASIdentifierChoice_st* asnum;
        ASIdentifierChoice_st* rdi;
    }
    alias ASIdentifiers = ASIdentifiers_st;
    struct ASIdentifierChoice_st
    {
        int type;
        static union _Anonymous_18
        {
            int* inherit;
            stack_st_ASIdOrRange* asIdsOrRanges;
        }
        _Anonymous_18 u;
    }
    alias ASIdentifierChoice = ASIdentifierChoice_st;
    static ASIdOrRange_st* sk_ASIdOrRange_set(stack_st_ASIdOrRange*, int, ASIdOrRange_st*) @nogc nothrow;
    static void sk_ASIdOrRange_pop_free(stack_st_ASIdOrRange*, void function(ASIdOrRange_st*)) @nogc nothrow;
    static ASIdOrRange_st* sk_ASIdOrRange_shift(stack_st_ASIdOrRange*) @nogc nothrow;
    static ASIdOrRange_st* sk_ASIdOrRange_pop(stack_st_ASIdOrRange*) @nogc nothrow;
    static int sk_ASIdOrRange_unshift(stack_st_ASIdOrRange*, ASIdOrRange_st*) @nogc nothrow;
    static ASIdOrRange_st* sk_ASIdOrRange_value(const(stack_st_ASIdOrRange)*, int) @nogc nothrow;
    static int sk_ASIdOrRange_num(const(stack_st_ASIdOrRange)*) @nogc nothrow;
    static stack_st_ASIdOrRange* sk_ASIdOrRange_new(int function(const(const(ASIdOrRange_st)*)*, const(const(ASIdOrRange_st)*)*)) @nogc nothrow;
    alias sk_ASIdOrRange_copyfunc = ASIdOrRange_st* function(const(ASIdOrRange_st)*);
    static int sk_ASIdOrRange_find(stack_st_ASIdOrRange*, ASIdOrRange_st*) @nogc nothrow;
    static int sk_ASIdOrRange_find_ex(stack_st_ASIdOrRange*, ASIdOrRange_st*) @nogc nothrow;
    static void sk_ASIdOrRange_sort(stack_st_ASIdOrRange*) @nogc nothrow;
    static int sk_ASIdOrRange_is_sorted(const(stack_st_ASIdOrRange)*) @nogc nothrow;
    static stack_st_ASIdOrRange* sk_ASIdOrRange_dup(const(stack_st_ASIdOrRange)*) @nogc nothrow;
    static stack_st_ASIdOrRange* sk_ASIdOrRange_deep_copy(const(stack_st_ASIdOrRange)*, ASIdOrRange_st* function(const(ASIdOrRange_st)*), void function(ASIdOrRange_st*)) @nogc nothrow;
    static int function(const(const(ASIdOrRange_st)*)*, const(const(ASIdOrRange_st)*)*) sk_ASIdOrRange_set_cmp_func(stack_st_ASIdOrRange*, int function(const(const(ASIdOrRange_st)*)*, const(const(ASIdOrRange_st)*)*)) @nogc nothrow;
    static int sk_ASIdOrRange_push(stack_st_ASIdOrRange*, ASIdOrRange_st*) @nogc nothrow;
    static ASIdOrRange_st* sk_ASIdOrRange_delete_ptr(stack_st_ASIdOrRange*, ASIdOrRange_st*) @nogc nothrow;
    static ASIdOrRange_st* sk_ASIdOrRange_delete(stack_st_ASIdOrRange*, int) @nogc nothrow;
    static void sk_ASIdOrRange_zero(stack_st_ASIdOrRange*) @nogc nothrow;
    alias sk_ASIdOrRange_compfunc = int function(const(const(ASIdOrRange_st)*)*, const(const(ASIdOrRange_st)*)*);
    alias sk_ASIdOrRange_freefunc = void function(ASIdOrRange_st*);
    static int sk_ASIdOrRange_insert(stack_st_ASIdOrRange*, ASIdOrRange_st*, int) @nogc nothrow;
    static stack_st_ASIdOrRange* sk_ASIdOrRange_new_null() @nogc nothrow;
    static stack_st_ASIdOrRange* sk_ASIdOrRange_new_reserve(int function(const(const(ASIdOrRange_st)*)*, const(const(ASIdOrRange_st)*)*), int) @nogc nothrow;
    static int sk_ASIdOrRange_reserve(stack_st_ASIdOrRange*, int) @nogc nothrow;
    static void sk_ASIdOrRange_free(stack_st_ASIdOrRange*) @nogc nothrow;
    struct stack_st_ASIdOrRange;
    alias ASIdOrRanges = stack_st_ASIdOrRange;
    struct ASIdOrRange_st
    {
        int type;
        static union _Anonymous_19
        {
            asn1_string_st* id;
            ASRange_st* range;
        }
        _Anonymous_19 u;
    }
    alias ASIdOrRange = ASIdOrRange_st;
    struct ASRange_st
    {
        asn1_string_st* min;
        asn1_string_st* max;
    }
    alias ASRange = ASRange_st;
    static X509_POLICY_NODE_st* sk_X509_POLICY_NODE_shift(stack_st_X509_POLICY_NODE*) @nogc nothrow;
    static int function(const(const(X509_POLICY_NODE_st)*)*, const(const(X509_POLICY_NODE_st)*)*) sk_X509_POLICY_NODE_set_cmp_func(stack_st_X509_POLICY_NODE*, int function(const(const(X509_POLICY_NODE_st)*)*, const(const(X509_POLICY_NODE_st)*)*)) @nogc nothrow;
    static stack_st_X509_POLICY_NODE* sk_X509_POLICY_NODE_deep_copy(const(stack_st_X509_POLICY_NODE)*, X509_POLICY_NODE_st* function(const(X509_POLICY_NODE_st)*), void function(X509_POLICY_NODE_st*)) @nogc nothrow;
    static stack_st_X509_POLICY_NODE* sk_X509_POLICY_NODE_dup(const(stack_st_X509_POLICY_NODE)*) @nogc nothrow;
    static int sk_X509_POLICY_NODE_is_sorted(const(stack_st_X509_POLICY_NODE)*) @nogc nothrow;
    static void sk_X509_POLICY_NODE_sort(stack_st_X509_POLICY_NODE*) @nogc nothrow;
    static int sk_X509_POLICY_NODE_reserve(stack_st_X509_POLICY_NODE*, int) @nogc nothrow;
    static int sk_X509_POLICY_NODE_find(stack_st_X509_POLICY_NODE*, X509_POLICY_NODE_st*) @nogc nothrow;
    static X509_POLICY_NODE_st* sk_X509_POLICY_NODE_set(stack_st_X509_POLICY_NODE*, int, X509_POLICY_NODE_st*) @nogc nothrow;
    static int sk_X509_POLICY_NODE_insert(stack_st_X509_POLICY_NODE*, X509_POLICY_NODE_st*, int) @nogc nothrow;
    static void sk_X509_POLICY_NODE_pop_free(stack_st_X509_POLICY_NODE*, void function(X509_POLICY_NODE_st*)) @nogc nothrow;
    static int sk_X509_POLICY_NODE_find_ex(stack_st_X509_POLICY_NODE*, X509_POLICY_NODE_st*) @nogc nothrow;
    static int sk_X509_POLICY_NODE_unshift(stack_st_X509_POLICY_NODE*, X509_POLICY_NODE_st*) @nogc nothrow;
    static X509_POLICY_NODE_st* sk_X509_POLICY_NODE_delete_ptr(stack_st_X509_POLICY_NODE*, X509_POLICY_NODE_st*) @nogc nothrow;
    static int sk_X509_POLICY_NODE_push(stack_st_X509_POLICY_NODE*, X509_POLICY_NODE_st*) @nogc nothrow;
    static X509_POLICY_NODE_st* sk_X509_POLICY_NODE_delete(stack_st_X509_POLICY_NODE*, int) @nogc nothrow;
    static void sk_X509_POLICY_NODE_zero(stack_st_X509_POLICY_NODE*) @nogc nothrow;
    static stack_st_X509_POLICY_NODE* sk_X509_POLICY_NODE_new_reserve(int function(const(const(X509_POLICY_NODE_st)*)*, const(const(X509_POLICY_NODE_st)*)*), int) @nogc nothrow;
    static stack_st_X509_POLICY_NODE* sk_X509_POLICY_NODE_new_null() @nogc nothrow;
    static stack_st_X509_POLICY_NODE* sk_X509_POLICY_NODE_new(int function(const(const(X509_POLICY_NODE_st)*)*, const(const(X509_POLICY_NODE_st)*)*)) @nogc nothrow;
    static void sk_X509_POLICY_NODE_free(stack_st_X509_POLICY_NODE*) @nogc nothrow;
    static X509_POLICY_NODE_st* sk_X509_POLICY_NODE_value(const(stack_st_X509_POLICY_NODE)*, int) @nogc nothrow;
    static int sk_X509_POLICY_NODE_num(const(stack_st_X509_POLICY_NODE)*) @nogc nothrow;
    alias sk_X509_POLICY_NODE_copyfunc = X509_POLICY_NODE_st* function(const(X509_POLICY_NODE_st)*);
    alias sk_X509_POLICY_NODE_freefunc = void function(X509_POLICY_NODE_st*);
    alias sk_X509_POLICY_NODE_compfunc = int function(const(const(X509_POLICY_NODE_st)*)*, const(const(X509_POLICY_NODE_st)*)*);
    static X509_POLICY_NODE_st* sk_X509_POLICY_NODE_pop(stack_st_X509_POLICY_NODE*) @nogc nothrow;
    void X509_POLICY_NODE_print(bio_st*, X509_POLICY_NODE_st*, int) @nogc nothrow;
    int X509V3_NAME_from_section(X509_name_st*, stack_st_CONF_VALUE*, c_ulong) @nogc nothrow;
    asn1_string_st* a2i_IPADDRESS_NC(const(char)*) @nogc nothrow;
    asn1_string_st* a2i_IPADDRESS(const(char)*) @nogc nothrow;
    int X509_check_ip_asc(x509_st*, const(char)*, uint) @nogc nothrow;
    int X509_check_ip(x509_st*, const(ubyte)*, c_ulong, uint) @nogc nothrow;
    int X509_check_email(x509_st*, const(char)*, c_ulong, uint) @nogc nothrow;
    int X509_check_host(x509_st*, const(char)*, c_ulong, uint, char**) @nogc nothrow;
    stack_st_OPENSSL_STRING* X509_get1_ocsp(x509_st*) @nogc nothrow;
    void X509_email_free(stack_st_OPENSSL_STRING*) @nogc nothrow;
    stack_st_OPENSSL_STRING* X509_REQ_get1_email(X509_req_st*) @nogc nothrow;
    stack_st_OPENSSL_STRING* X509_get1_email(x509_st*) @nogc nothrow;
    int X509_PURPOSE_get_id(const(x509_purpose_st)*) @nogc nothrow;
    void X509_PURPOSE_cleanup() @nogc nothrow;
    int X509_PURPOSE_get_trust(const(x509_purpose_st)*) @nogc nothrow;
    char* X509_PURPOSE_get0_sname(const(x509_purpose_st)*) @nogc nothrow;
    char* X509_PURPOSE_get0_name(const(x509_purpose_st)*) @nogc nothrow;
    int X509_PURPOSE_add(int, int, int, int function(const(x509_purpose_st)*, const(x509_st)*, int), const(char)*, const(char)*, void*) @nogc nothrow;
    int X509_PURPOSE_get_by_id(int) @nogc nothrow;
    int X509_PURPOSE_get_by_sname(const(char)*) @nogc nothrow;
    x509_purpose_st* X509_PURPOSE_get0(int) @nogc nothrow;
    int X509_PURPOSE_get_count() @nogc nothrow;
    const(asn1_string_st)* X509_get0_authority_serial(x509_st*) @nogc nothrow;
    const(stack_st_GENERAL_NAME)* X509_get0_authority_issuer(x509_st*) @nogc nothrow;
    const(asn1_string_st)* X509_get0_authority_key_id(x509_st*) @nogc nothrow;
    const(asn1_string_st)* X509_get0_subject_key_id(x509_st*) @nogc nothrow;
    uint X509_get_extended_key_usage(x509_st*) @nogc nothrow;
    uint X509_get_key_usage(x509_st*) @nogc nothrow;
    uint X509_get_extension_flags(x509_st*) @nogc nothrow;
    c_long X509_get_proxy_pathlen(x509_st*) @nogc nothrow;
    void X509_set_proxy_pathlen(x509_st*, c_long) @nogc nothrow;
    void X509_set_proxy_flag(x509_st*) @nogc nothrow;
    int X509_check_akid(x509_st*, AUTHORITY_KEYID_st*) @nogc nothrow;
    int X509_check_issued(x509_st*, x509_st*) @nogc nothrow;
    int X509_PURPOSE_set(int*, int) @nogc nothrow;
    int X509_supported_extension(X509_extension_st*) @nogc nothrow;
    int X509_check_purpose(x509_st*, int, int) @nogc nothrow;
    int X509_check_ca(x509_st*) @nogc nothrow;
    int X509V3_extensions_print(bio_st*, const(char)*, const(stack_st_X509_EXTENSION)*, c_ulong, int) @nogc nothrow;
    int X509V3_EXT_print_fp(_IO_FILE*, X509_extension_st*, int, int) @nogc nothrow;
    int X509V3_EXT_print(bio_st*, X509_extension_st*, c_ulong, int) @nogc nothrow;
    void X509V3_EXT_val_prn(bio_st*, stack_st_CONF_VALUE*, int, int) @nogc nothrow;
    int X509V3_add1_i2d(stack_st_X509_EXTENSION**, int, void*, int, c_ulong) @nogc nothrow;
    X509_extension_st* X509V3_EXT_i2d(int, int, void*) @nogc nothrow;
    void* X509V3_get_d2i(const(stack_st_X509_EXTENSION)*, int, int*, int*) @nogc nothrow;
    void* X509V3_EXT_d2i(X509_extension_st*) @nogc nothrow;
    stack_st_CONF_VALUE* X509V3_parse_list(const(char)*) @nogc nothrow;
    int X509V3_add_standard_extensions() @nogc nothrow;
    const(v3_ext_method)* X509V3_EXT_get_nid(int) @nogc nothrow;
    const(v3_ext_method)* X509V3_EXT_get(X509_extension_st*) @nogc nothrow;
    void X509V3_EXT_cleanup() @nogc nothrow;
    int X509V3_EXT_add_alias(int, int) @nogc nothrow;
    int X509V3_EXT_add_list(v3_ext_method*) @nogc nothrow;
    int X509V3_EXT_add(v3_ext_method*) @nogc nothrow;
    char* i2s_ASN1_ENUMERATED_TABLE(v3_ext_method*, const(asn1_string_st)*) @nogc nothrow;
    char* i2s_ASN1_ENUMERATED(v3_ext_method*, const(asn1_string_st)*) @nogc nothrow;
    asn1_string_st* s2i_ASN1_INTEGER(v3_ext_method*, const(char)*) @nogc nothrow;
    char* i2s_ASN1_INTEGER(v3_ext_method*, const(asn1_string_st)*) @nogc nothrow;
    int X509V3_add_value_int(const(char)*, const(asn1_string_st)*, stack_st_CONF_VALUE**) @nogc nothrow;
    int X509V3_add_value_bool(const(char)*, int, stack_st_CONF_VALUE**) @nogc nothrow;
    int X509V3_add_value_uchar(const(char)*, const(ubyte)*, stack_st_CONF_VALUE**) @nogc nothrow;
    int X509V3_add_value(const(char)*, const(char)*, stack_st_CONF_VALUE**) @nogc nothrow;
    void X509V3_set_ctx(v3_ext_ctx*, x509_st*, x509_st*, X509_req_st*, X509_crl_st*, int) @nogc nothrow;
    void X509V3_section_free(v3_ext_ctx*, stack_st_CONF_VALUE*) @nogc nothrow;
    void X509V3_string_free(v3_ext_ctx*, char*) @nogc nothrow;
    stack_st_CONF_VALUE* X509V3_get_section(v3_ext_ctx*, const(char)*) @nogc nothrow;
    char* X509V3_get_string(v3_ext_ctx*, const(char)*, const(char)*) @nogc nothrow;
    void X509V3_set_conf_lhash(v3_ext_ctx*, lhash_st_CONF_VALUE*) @nogc nothrow;
    void X509V3_set_nconf(v3_ext_ctx*, conf_st*) @nogc nothrow;
    int X509V3_get_value_int(const(CONF_VALUE)*, asn1_string_st**) @nogc nothrow;
    int X509V3_get_value_bool(const(CONF_VALUE)*, int*) @nogc nothrow;
    int X509V3_add_value_bool_nf(const(char)*, int, stack_st_CONF_VALUE**) @nogc nothrow;
    int X509V3_EXT_CRL_add_conf(lhash_st_CONF_VALUE*, v3_ext_ctx*, const(char)*, X509_crl_st*) @nogc nothrow;
    int X509V3_EXT_REQ_add_conf(lhash_st_CONF_VALUE*, v3_ext_ctx*, const(char)*, X509_req_st*) @nogc nothrow;
    int X509V3_EXT_add_conf(lhash_st_CONF_VALUE*, v3_ext_ctx*, const(char)*, x509_st*) @nogc nothrow;
    X509_extension_st* X509V3_EXT_conf(lhash_st_CONF_VALUE*, v3_ext_ctx*, const(char)*, const(char)*) @nogc nothrow;
    X509_extension_st* X509V3_EXT_conf_nid(lhash_st_CONF_VALUE*, v3_ext_ctx*, int, const(char)*) @nogc nothrow;
    int X509V3_EXT_CRL_add_nconf(conf_st*, v3_ext_ctx*, const(char)*, X509_crl_st*) @nogc nothrow;
    int X509V3_EXT_REQ_add_nconf(conf_st*, v3_ext_ctx*, const(char)*, X509_req_st*) @nogc nothrow;
    int X509V3_EXT_add_nconf(conf_st*, v3_ext_ctx*, const(char)*, x509_st*) @nogc nothrow;
    int X509V3_EXT_add_nconf_sk(conf_st*, v3_ext_ctx*, const(char)*, stack_st_X509_EXTENSION**) @nogc nothrow;
    X509_extension_st* X509V3_EXT_nconf(conf_st*, v3_ext_ctx*, const(char)*, const(char)*) @nogc nothrow;
    X509_extension_st* X509V3_EXT_nconf_nid(conf_st*, v3_ext_ctx*, int, const(char)*) @nogc nothrow;
    void X509V3_conf_free(CONF_VALUE*) @nogc nothrow;
    GENERAL_NAME_st* v2i_GENERAL_NAME_ex(GENERAL_NAME_st*, const(v3_ext_method)*, v3_ext_ctx*, CONF_VALUE*, int) @nogc nothrow;
    GENERAL_NAME_st* v2i_GENERAL_NAME(const(v3_ext_method)*, v3_ext_ctx*, CONF_VALUE*) @nogc nothrow;
    GENERAL_NAME_st* a2i_GENERAL_NAME(GENERAL_NAME_st*, const(v3_ext_method)*, v3_ext_ctx*, int, const(char)*, int) @nogc nothrow;
    extern __gshared const(ASN1_ITEM_st) POLICY_CONSTRAINTS_it;
    POLICY_CONSTRAINTS_st* POLICY_CONSTRAINTS_new() @nogc nothrow;
    void POLICY_CONSTRAINTS_free(POLICY_CONSTRAINTS_st*) @nogc nothrow;
    NAME_CONSTRAINTS_st* NAME_CONSTRAINTS_new() @nogc nothrow;
    void NAME_CONSTRAINTS_free(NAME_CONSTRAINTS_st*) @nogc nothrow;
    extern __gshared const(ASN1_ITEM_st) NAME_CONSTRAINTS_it;
    GENERAL_SUBTREE_st* GENERAL_SUBTREE_new() @nogc nothrow;
    void GENERAL_SUBTREE_free(GENERAL_SUBTREE_st*) @nogc nothrow;
    extern __gshared const(ASN1_ITEM_st) GENERAL_SUBTREE_it;
    extern __gshared const(ASN1_ITEM_st) POLICY_MAPPINGS_it;
    POLICY_MAPPING_st* POLICY_MAPPING_new() @nogc nothrow;
    void POLICY_MAPPING_free(POLICY_MAPPING_st*) @nogc nothrow;
    extern __gshared const(ASN1_ITEM_st) POLICY_MAPPING_it;
    stack_st_ACCESS_DESCRIPTION* d2i_AUTHORITY_INFO_ACCESS(stack_st_ACCESS_DESCRIPTION**, const(ubyte)**, c_long) @nogc nothrow;
    stack_st_ACCESS_DESCRIPTION* AUTHORITY_INFO_ACCESS_new() @nogc nothrow;
    void AUTHORITY_INFO_ACCESS_free(stack_st_ACCESS_DESCRIPTION*) @nogc nothrow;
    int i2d_AUTHORITY_INFO_ACCESS(stack_st_ACCESS_DESCRIPTION*, ubyte**) @nogc nothrow;
    extern __gshared const(ASN1_ITEM_st) AUTHORITY_INFO_ACCESS_it;
    ACCESS_DESCRIPTION_st* d2i_ACCESS_DESCRIPTION(ACCESS_DESCRIPTION_st**, const(ubyte)**, c_long) @nogc nothrow;
    ACCESS_DESCRIPTION_st* ACCESS_DESCRIPTION_new() @nogc nothrow;
    extern __gshared const(ASN1_ITEM_st) ACCESS_DESCRIPTION_it;
    int i2d_ACCESS_DESCRIPTION(ACCESS_DESCRIPTION_st*, ubyte**) @nogc nothrow;
    void ACCESS_DESCRIPTION_free(ACCESS_DESCRIPTION_st*) @nogc nothrow;
    int NAME_CONSTRAINTS_check_CN(x509_st*, NAME_CONSTRAINTS_st*) @nogc nothrow;
    int NAME_CONSTRAINTS_check(x509_st*, NAME_CONSTRAINTS_st*) @nogc nothrow;
    int DIST_POINT_set_dpname(DIST_POINT_NAME_st*, X509_name_st*) @nogc nothrow;
    ISSUING_DIST_POINT_st* ISSUING_DIST_POINT_new() @nogc nothrow;
    ISSUING_DIST_POINT_st* d2i_ISSUING_DIST_POINT(ISSUING_DIST_POINT_st**, const(ubyte)**, c_long) @nogc nothrow;
    void ISSUING_DIST_POINT_free(ISSUING_DIST_POINT_st*) @nogc nothrow;
    int i2d_ISSUING_DIST_POINT(ISSUING_DIST_POINT_st*, ubyte**) @nogc nothrow;
    extern __gshared const(ASN1_ITEM_st) ISSUING_DIST_POINT_it;
    DIST_POINT_NAME_st* d2i_DIST_POINT_NAME(DIST_POINT_NAME_st**, const(ubyte)**, c_long) @nogc nothrow;
    DIST_POINT_NAME_st* DIST_POINT_NAME_new() @nogc nothrow;
    extern __gshared const(ASN1_ITEM_st) DIST_POINT_NAME_it;
    int i2d_DIST_POINT_NAME(DIST_POINT_NAME_st*, ubyte**) @nogc nothrow;
    void DIST_POINT_NAME_free(DIST_POINT_NAME_st*) @nogc nothrow;
    DIST_POINT_st* d2i_DIST_POINT(DIST_POINT_st**, const(ubyte)**, c_long) @nogc nothrow;
    DIST_POINT_st* DIST_POINT_new() @nogc nothrow;
    extern __gshared const(ASN1_ITEM_st) DIST_POINT_it;
    int i2d_DIST_POINT(DIST_POINT_st*, ubyte**) @nogc nothrow;
    void DIST_POINT_free(DIST_POINT_st*) @nogc nothrow;
    stack_st_DIST_POINT* d2i_CRL_DIST_POINTS(stack_st_DIST_POINT**, const(ubyte)**, c_long) @nogc nothrow;
    stack_st_DIST_POINT* CRL_DIST_POINTS_new() @nogc nothrow;
    extern __gshared const(ASN1_ITEM_st) CRL_DIST_POINTS_it;
    int i2d_CRL_DIST_POINTS(stack_st_DIST_POINT*, ubyte**) @nogc nothrow;
    void CRL_DIST_POINTS_free(stack_st_DIST_POINT*) @nogc nothrow;
    NOTICEREF_st* d2i_NOTICEREF(NOTICEREF_st**, const(ubyte)**, c_long) @nogc nothrow;
    NOTICEREF_st* NOTICEREF_new() @nogc nothrow;
    extern __gshared const(ASN1_ITEM_st) NOTICEREF_it;
    int i2d_NOTICEREF(NOTICEREF_st*, ubyte**) @nogc nothrow;
    void NOTICEREF_free(NOTICEREF_st*) @nogc nothrow;
    USERNOTICE_st* USERNOTICE_new() @nogc nothrow;
    USERNOTICE_st* d2i_USERNOTICE(USERNOTICE_st**, const(ubyte)**, c_long) @nogc nothrow;
    extern __gshared const(ASN1_ITEM_st) USERNOTICE_it;
    int i2d_USERNOTICE(USERNOTICE_st*, ubyte**) @nogc nothrow;
    void USERNOTICE_free(USERNOTICE_st*) @nogc nothrow;
    POLICYQUALINFO_st* d2i_POLICYQUALINFO(POLICYQUALINFO_st**, const(ubyte)**, c_long) @nogc nothrow;
    POLICYQUALINFO_st* POLICYQUALINFO_new() @nogc nothrow;
    extern __gshared const(ASN1_ITEM_st) POLICYQUALINFO_it;
    int i2d_POLICYQUALINFO(POLICYQUALINFO_st*, ubyte**) @nogc nothrow;
    void POLICYQUALINFO_free(POLICYQUALINFO_st*) @nogc nothrow;
    POLICYINFO_st* POLICYINFO_new() @nogc nothrow;
    POLICYINFO_st* d2i_POLICYINFO(POLICYINFO_st**, const(ubyte)**, c_long) @nogc nothrow;
    void POLICYINFO_free(POLICYINFO_st*) @nogc nothrow;
    extern __gshared const(ASN1_ITEM_st) POLICYINFO_it;
    int i2d_POLICYINFO(POLICYINFO_st*, ubyte**) @nogc nothrow;
    stack_st_POLICYINFO* CERTIFICATEPOLICIES_new() @nogc nothrow;
    stack_st_POLICYINFO* d2i_CERTIFICATEPOLICIES(stack_st_POLICYINFO**, const(ubyte)**, c_long) @nogc nothrow;
    void CERTIFICATEPOLICIES_free(stack_st_POLICYINFO*) @nogc nothrow;
    int i2d_CERTIFICATEPOLICIES(stack_st_POLICYINFO*, ubyte**) @nogc nothrow;
    extern __gshared const(ASN1_ITEM_st) CERTIFICATEPOLICIES_it;
    stack_st_ASN1_INTEGER* TLS_FEATURE_new() @nogc nothrow;
    void TLS_FEATURE_free(stack_st_ASN1_INTEGER*) @nogc nothrow;
    int i2a_ACCESS_DESCRIPTION(bio_st*, const(ACCESS_DESCRIPTION_st)*) @nogc nothrow;
    stack_st_ASN1_OBJECT* EXTENDED_KEY_USAGE_new() @nogc nothrow;
    stack_st_ASN1_OBJECT* d2i_EXTENDED_KEY_USAGE(stack_st_ASN1_OBJECT**, const(ubyte)**, c_long) @nogc nothrow;
    void EXTENDED_KEY_USAGE_free(stack_st_ASN1_OBJECT*) @nogc nothrow;
    int i2d_EXTENDED_KEY_USAGE(stack_st_ASN1_OBJECT*, ubyte**) @nogc nothrow;
    extern __gshared const(ASN1_ITEM_st) EXTENDED_KEY_USAGE_it;
    asn1_string_st* s2i_ASN1_OCTET_STRING(v3_ext_method*, v3_ext_ctx*, const(char)*) @nogc nothrow;
    char* i2s_ASN1_OCTET_STRING(v3_ext_method*, const(asn1_string_st)*) @nogc nothrow;
    int GENERAL_NAME_get0_otherName(const(GENERAL_NAME_st)*, asn1_object_st**, asn1_type_st**) @nogc nothrow;
    int GENERAL_NAME_set0_othername(GENERAL_NAME_st*, asn1_object_st*, asn1_type_st*) @nogc nothrow;
    void* GENERAL_NAME_get0_value(const(GENERAL_NAME_st)*, int*) @nogc nothrow;
    void GENERAL_NAME_set0_value(GENERAL_NAME_st*, int, void*) @nogc nothrow;
    int OTHERNAME_cmp(otherName_st*, otherName_st*) @nogc nothrow;
    EDIPartyName_st* d2i_EDIPARTYNAME(EDIPartyName_st**, const(ubyte)**, c_long) @nogc nothrow;
    EDIPartyName_st* EDIPARTYNAME_new() @nogc nothrow;
    void EDIPARTYNAME_free(EDIPartyName_st*) @nogc nothrow;
    int i2d_EDIPARTYNAME(EDIPartyName_st*, ubyte**) @nogc nothrow;
    extern __gshared const(ASN1_ITEM_st) EDIPARTYNAME_it;
    otherName_st* d2i_OTHERNAME(otherName_st**, const(ubyte)**, c_long) @nogc nothrow;
    otherName_st* OTHERNAME_new() @nogc nothrow;
    int i2d_OTHERNAME(otherName_st*, ubyte**) @nogc nothrow;
    void OTHERNAME_free(otherName_st*) @nogc nothrow;
    extern __gshared const(ASN1_ITEM_st) OTHERNAME_it;
    stack_st_GENERAL_NAME* v2i_GENERAL_NAMES(const(v3_ext_method)*, v3_ext_ctx*, stack_st_CONF_VALUE*) @nogc nothrow;
    stack_st_CONF_VALUE* i2v_GENERAL_NAMES(v3_ext_method*, stack_st_GENERAL_NAME*, stack_st_CONF_VALUE*) @nogc nothrow;
    stack_st_GENERAL_NAME* d2i_GENERAL_NAMES(stack_st_GENERAL_NAME**, const(ubyte)**, c_long) @nogc nothrow;
    stack_st_GENERAL_NAME* GENERAL_NAMES_new() @nogc nothrow;
    extern __gshared const(ASN1_ITEM_st) GENERAL_NAMES_it;
    int i2d_GENERAL_NAMES(stack_st_GENERAL_NAME*, ubyte**) @nogc nothrow;
    void GENERAL_NAMES_free(stack_st_GENERAL_NAME*) @nogc nothrow;
    int GENERAL_NAME_print(bio_st*, GENERAL_NAME_st*) @nogc nothrow;
    stack_st_CONF_VALUE* i2v_GENERAL_NAME(v3_ext_method*, GENERAL_NAME_st*, stack_st_CONF_VALUE*) @nogc nothrow;
    asn1_string_st* s2i_ASN1_IA5STRING(v3_ext_method*, v3_ext_ctx*, const(char)*) @nogc nothrow;
    char* i2s_ASN1_IA5STRING(v3_ext_method*, asn1_string_st*) @nogc nothrow;
    stack_st_CONF_VALUE* i2v_ASN1_BIT_STRING(v3_ext_method*, asn1_string_st*, stack_st_CONF_VALUE*) @nogc nothrow;
    asn1_string_st* v2i_ASN1_BIT_STRING(v3_ext_method*, v3_ext_ctx*, stack_st_CONF_VALUE*) @nogc nothrow;
    int GENERAL_NAME_cmp(GENERAL_NAME_st*, GENERAL_NAME_st*) @nogc nothrow;
    GENERAL_NAME_st* GENERAL_NAME_dup(GENERAL_NAME_st*) @nogc nothrow;
    GENERAL_NAME_st* d2i_GENERAL_NAME(GENERAL_NAME_st**, const(ubyte)**, c_long) @nogc nothrow;
    GENERAL_NAME_st* GENERAL_NAME_new() @nogc nothrow;
    extern __gshared const(ASN1_ITEM_st) GENERAL_NAME_it;
    int i2d_GENERAL_NAME(GENERAL_NAME_st*, ubyte**) @nogc nothrow;
    void GENERAL_NAME_free(GENERAL_NAME_st*) @nogc nothrow;
    PKEY_USAGE_PERIOD_st* d2i_PKEY_USAGE_PERIOD(PKEY_USAGE_PERIOD_st**, const(ubyte)**, c_long) @nogc nothrow;
    PKEY_USAGE_PERIOD_st* PKEY_USAGE_PERIOD_new() @nogc nothrow;
    int i2d_PKEY_USAGE_PERIOD(PKEY_USAGE_PERIOD_st*, ubyte**) @nogc nothrow;
    extern __gshared const(ASN1_ITEM_st) PKEY_USAGE_PERIOD_it;
    void PKEY_USAGE_PERIOD_free(PKEY_USAGE_PERIOD_st*) @nogc nothrow;
    AUTHORITY_KEYID_st* d2i_AUTHORITY_KEYID(AUTHORITY_KEYID_st**, const(ubyte)**, c_long) @nogc nothrow;
    AUTHORITY_KEYID_st* AUTHORITY_KEYID_new() @nogc nothrow;
    extern __gshared const(ASN1_ITEM_st) AUTHORITY_KEYID_it;
    int i2d_AUTHORITY_KEYID(AUTHORITY_KEYID_st*, ubyte**) @nogc nothrow;
    void AUTHORITY_KEYID_free(AUTHORITY_KEYID_st*) @nogc nothrow;
    asn1_string_st* SXNET_get_id_INTEGER(SXNET_st*, asn1_string_st*) @nogc nothrow;
    asn1_string_st* SXNET_get_id_ulong(SXNET_st*, c_ulong) @nogc nothrow;
    asn1_string_st* SXNET_get_id_asc(SXNET_st*, const(char)*) @nogc nothrow;
    int SXNET_add_id_INTEGER(SXNET_st**, asn1_string_st*, const(char)*, int) @nogc nothrow;
    int SXNET_add_id_ulong(SXNET_st**, c_ulong, const(char)*, int) @nogc nothrow;
    int SXNET_add_id_asc(SXNET_st**, const(char)*, const(char)*, int) @nogc nothrow;
    SXNET_ID_st* d2i_SXNETID(SXNET_ID_st**, const(ubyte)**, c_long) @nogc nothrow;
    SXNET_ID_st* SXNETID_new() @nogc nothrow;
    int i2d_SXNETID(SXNET_ID_st*, ubyte**) @nogc nothrow;
    void SXNETID_free(SXNET_ID_st*) @nogc nothrow;
    extern __gshared const(ASN1_ITEM_st) SXNETID_it;
    SXNET_st* d2i_SXNET(SXNET_st**, const(ubyte)**, c_long) @nogc nothrow;
    SXNET_st* SXNET_new() @nogc nothrow;
    int i2d_SXNET(SXNET_st*, ubyte**) @nogc nothrow;
    void SXNET_free(SXNET_st*) @nogc nothrow;
    extern __gshared const(ASN1_ITEM_st) SXNET_it;
    BASIC_CONSTRAINTS_st* BASIC_CONSTRAINTS_new() @nogc nothrow;
    BASIC_CONSTRAINTS_st* d2i_BASIC_CONSTRAINTS(BASIC_CONSTRAINTS_st**, const(ubyte)**, c_long) @nogc nothrow;
    void BASIC_CONSTRAINTS_free(BASIC_CONSTRAINTS_st*) @nogc nothrow;
    int i2d_BASIC_CONSTRAINTS(BASIC_CONSTRAINTS_st*, ubyte**) @nogc nothrow;
    extern __gshared const(ASN1_ITEM_st) BASIC_CONSTRAINTS_it;
    static x509_purpose_st* sk_X509_PURPOSE_delete_ptr(stack_st_X509_PURPOSE*, x509_purpose_st*) @nogc nothrow;
    static void sk_X509_PURPOSE_sort(stack_st_X509_PURPOSE*) @nogc nothrow;
    static int sk_X509_PURPOSE_is_sorted(const(stack_st_X509_PURPOSE)*) @nogc nothrow;
    static stack_st_X509_PURPOSE* sk_X509_PURPOSE_dup(const(stack_st_X509_PURPOSE)*) @nogc nothrow;
    static stack_st_X509_PURPOSE* sk_X509_PURPOSE_deep_copy(const(stack_st_X509_PURPOSE)*, x509_purpose_st* function(const(x509_purpose_st)*), void function(x509_purpose_st*)) @nogc nothrow;
    static int function(const(const(x509_purpose_st)*)*, const(const(x509_purpose_st)*)*) sk_X509_PURPOSE_set_cmp_func(stack_st_X509_PURPOSE*, int function(const(const(x509_purpose_st)*)*, const(const(x509_purpose_st)*)*)) @nogc nothrow;
    static int sk_X509_PURPOSE_find(stack_st_X509_PURPOSE*, x509_purpose_st*) @nogc nothrow;
    static x509_purpose_st* sk_X509_PURPOSE_set(stack_st_X509_PURPOSE*, int, x509_purpose_st*) @nogc nothrow;
    static int sk_X509_PURPOSE_insert(stack_st_X509_PURPOSE*, x509_purpose_st*, int) @nogc nothrow;
    static void sk_X509_PURPOSE_pop_free(stack_st_X509_PURPOSE*, void function(x509_purpose_st*)) @nogc nothrow;
    static x509_purpose_st* sk_X509_PURPOSE_shift(stack_st_X509_PURPOSE*) @nogc nothrow;
    static x509_purpose_st* sk_X509_PURPOSE_pop(stack_st_X509_PURPOSE*) @nogc nothrow;
    static int sk_X509_PURPOSE_unshift(stack_st_X509_PURPOSE*, x509_purpose_st*) @nogc nothrow;
    static int sk_X509_PURPOSE_find_ex(stack_st_X509_PURPOSE*, x509_purpose_st*) @nogc nothrow;
    static int sk_X509_PURPOSE_push(stack_st_X509_PURPOSE*, x509_purpose_st*) @nogc nothrow;
    static x509_purpose_st* sk_X509_PURPOSE_delete(stack_st_X509_PURPOSE*, int) @nogc nothrow;
    static void sk_X509_PURPOSE_free(stack_st_X509_PURPOSE*) @nogc nothrow;
    static void sk_X509_PURPOSE_zero(stack_st_X509_PURPOSE*) @nogc nothrow;
    static int sk_X509_PURPOSE_reserve(stack_st_X509_PURPOSE*, int) @nogc nothrow;
    static stack_st_X509_PURPOSE* sk_X509_PURPOSE_new_reserve(int function(const(const(x509_purpose_st)*)*, const(const(x509_purpose_st)*)*), int) @nogc nothrow;
    static stack_st_X509_PURPOSE* sk_X509_PURPOSE_new_null() @nogc nothrow;
    static stack_st_X509_PURPOSE* sk_X509_PURPOSE_new(int function(const(const(x509_purpose_st)*)*, const(const(x509_purpose_st)*)*)) @nogc nothrow;
    static x509_purpose_st* sk_X509_PURPOSE_value(const(stack_st_X509_PURPOSE)*, int) @nogc nothrow;
    static int sk_X509_PURPOSE_num(const(stack_st_X509_PURPOSE)*) @nogc nothrow;
    alias sk_X509_PURPOSE_copyfunc = x509_purpose_st* function(const(x509_purpose_st)*);
    alias sk_X509_PURPOSE_freefunc = void function(x509_purpose_st*);
    alias sk_X509_PURPOSE_compfunc = int function(const(const(x509_purpose_st)*)*, const(const(x509_purpose_st)*)*);
    struct stack_st_X509_PURPOSE;
    struct x509_purpose_st
    {
        int purpose;
        int trust;
        int flags;
        int function(const(x509_purpose_st)*, const(x509_st)*, int) check_purpose;
        char* name;
        char* sname;
        void* usr_data;
    }
    alias X509_PURPOSE = x509_purpose_st;
    PROXY_CERT_INFO_EXTENSION_st* PROXY_CERT_INFO_EXTENSION_new() @nogc nothrow;
    PROXY_CERT_INFO_EXTENSION_st* d2i_PROXY_CERT_INFO_EXTENSION(PROXY_CERT_INFO_EXTENSION_st**, const(ubyte)**, c_long) @nogc nothrow;
    extern __gshared const(ASN1_ITEM_st) PROXY_CERT_INFO_EXTENSION_it;
    int i2d_PROXY_CERT_INFO_EXTENSION(PROXY_CERT_INFO_EXTENSION_st*, ubyte**) @nogc nothrow;
    void PROXY_CERT_INFO_EXTENSION_free(PROXY_CERT_INFO_EXTENSION_st*) @nogc nothrow;
    PROXY_POLICY_st* d2i_PROXY_POLICY(PROXY_POLICY_st**, const(ubyte)**, c_long) @nogc nothrow;
    PROXY_POLICY_st* PROXY_POLICY_new() @nogc nothrow;
    extern __gshared const(ASN1_ITEM_st) PROXY_POLICY_it;
    int i2d_PROXY_POLICY(PROXY_POLICY_st*, ubyte**) @nogc nothrow;
    void PROXY_POLICY_free(PROXY_POLICY_st*) @nogc nothrow;
    struct PROXY_CERT_INFO_EXTENSION_st
    {
        asn1_string_st* pcPathLengthConstraint;
        PROXY_POLICY_st* proxyPolicy;
    }
    alias PROXY_CERT_INFO_EXTENSION = PROXY_CERT_INFO_EXTENSION_st;
    struct PROXY_POLICY_st
    {
        asn1_object_st* policyLanguage;
        asn1_string_st* policy;
    }
    alias PROXY_POLICY = PROXY_POLICY_st;
    struct POLICY_CONSTRAINTS_st
    {
        asn1_string_st* requireExplicitPolicy;
        asn1_string_st* inhibitPolicyMapping;
    }
    alias POLICY_CONSTRAINTS = POLICY_CONSTRAINTS_st;
    static int sk_GENERAL_SUBTREE_find(stack_st_GENERAL_SUBTREE*, GENERAL_SUBTREE_st*) @nogc nothrow;
    static int sk_GENERAL_SUBTREE_find_ex(stack_st_GENERAL_SUBTREE*, GENERAL_SUBTREE_st*) @nogc nothrow;
    static void sk_GENERAL_SUBTREE_sort(stack_st_GENERAL_SUBTREE*) @nogc nothrow;
    static int sk_GENERAL_SUBTREE_is_sorted(const(stack_st_GENERAL_SUBTREE)*) @nogc nothrow;
    static stack_st_GENERAL_SUBTREE* sk_GENERAL_SUBTREE_dup(const(stack_st_GENERAL_SUBTREE)*) @nogc nothrow;
    alias sk_GENERAL_SUBTREE_freefunc = void function(GENERAL_SUBTREE_st*);
    alias sk_GENERAL_SUBTREE_copyfunc = GENERAL_SUBTREE_st* function(const(GENERAL_SUBTREE_st)*);
    static int sk_GENERAL_SUBTREE_num(const(stack_st_GENERAL_SUBTREE)*) @nogc nothrow;
    static GENERAL_SUBTREE_st* sk_GENERAL_SUBTREE_value(const(stack_st_GENERAL_SUBTREE)*, int) @nogc nothrow;
    static stack_st_GENERAL_SUBTREE* sk_GENERAL_SUBTREE_new(int function(const(const(GENERAL_SUBTREE_st)*)*, const(const(GENERAL_SUBTREE_st)*)*)) @nogc nothrow;
    static GENERAL_SUBTREE_st* sk_GENERAL_SUBTREE_pop(stack_st_GENERAL_SUBTREE*) @nogc nothrow;
    static stack_st_GENERAL_SUBTREE* sk_GENERAL_SUBTREE_new_null() @nogc nothrow;
    static int sk_GENERAL_SUBTREE_push(stack_st_GENERAL_SUBTREE*, GENERAL_SUBTREE_st*) @nogc nothrow;
    static stack_st_GENERAL_SUBTREE* sk_GENERAL_SUBTREE_deep_copy(const(stack_st_GENERAL_SUBTREE)*, GENERAL_SUBTREE_st* function(const(GENERAL_SUBTREE_st)*), void function(GENERAL_SUBTREE_st*)) @nogc nothrow;
    static stack_st_GENERAL_SUBTREE* sk_GENERAL_SUBTREE_new_reserve(int function(const(const(GENERAL_SUBTREE_st)*)*, const(const(GENERAL_SUBTREE_st)*)*), int) @nogc nothrow;
    static int function(const(const(GENERAL_SUBTREE_st)*)*, const(const(GENERAL_SUBTREE_st)*)*) sk_GENERAL_SUBTREE_set_cmp_func(stack_st_GENERAL_SUBTREE*, int function(const(const(GENERAL_SUBTREE_st)*)*, const(const(GENERAL_SUBTREE_st)*)*)) @nogc nothrow;
    static int sk_GENERAL_SUBTREE_reserve(stack_st_GENERAL_SUBTREE*, int) @nogc nothrow;
    static GENERAL_SUBTREE_st* sk_GENERAL_SUBTREE_shift(stack_st_GENERAL_SUBTREE*) @nogc nothrow;
    static void sk_GENERAL_SUBTREE_free(stack_st_GENERAL_SUBTREE*) @nogc nothrow;
    static void sk_GENERAL_SUBTREE_zero(stack_st_GENERAL_SUBTREE*) @nogc nothrow;
    static GENERAL_SUBTREE_st* sk_GENERAL_SUBTREE_delete(stack_st_GENERAL_SUBTREE*, int) @nogc nothrow;
    static void sk_GENERAL_SUBTREE_pop_free(stack_st_GENERAL_SUBTREE*, void function(GENERAL_SUBTREE_st*)) @nogc nothrow;
    static int sk_GENERAL_SUBTREE_insert(stack_st_GENERAL_SUBTREE*, GENERAL_SUBTREE_st*, int) @nogc nothrow;
    static GENERAL_SUBTREE_st* sk_GENERAL_SUBTREE_set(stack_st_GENERAL_SUBTREE*, int, GENERAL_SUBTREE_st*) @nogc nothrow;
    alias sk_GENERAL_SUBTREE_compfunc = int function(const(const(GENERAL_SUBTREE_st)*)*, const(const(GENERAL_SUBTREE_st)*)*);
    struct stack_st_GENERAL_SUBTREE;
    static GENERAL_SUBTREE_st* sk_GENERAL_SUBTREE_delete_ptr(stack_st_GENERAL_SUBTREE*, GENERAL_SUBTREE_st*) @nogc nothrow;
    static int sk_GENERAL_SUBTREE_unshift(stack_st_GENERAL_SUBTREE*, GENERAL_SUBTREE_st*) @nogc nothrow;
    struct GENERAL_SUBTREE_st
    {
        GENERAL_NAME_st* base;
        asn1_string_st* minimum;
        asn1_string_st* maximum;
    }
    alias GENERAL_SUBTREE = GENERAL_SUBTREE_st;
    alias POLICY_MAPPINGS = stack_st_POLICY_MAPPING;
    static int sk_POLICY_MAPPING_push(stack_st_POLICY_MAPPING*, POLICY_MAPPING_st*) @nogc nothrow;
    static void sk_POLICY_MAPPING_zero(stack_st_POLICY_MAPPING*) @nogc nothrow;
    static void sk_POLICY_MAPPING_free(stack_st_POLICY_MAPPING*) @nogc nothrow;
    static int sk_POLICY_MAPPING_reserve(stack_st_POLICY_MAPPING*, int) @nogc nothrow;
    static stack_st_POLICY_MAPPING* sk_POLICY_MAPPING_new_reserve(int function(const(const(POLICY_MAPPING_st)*)*, const(const(POLICY_MAPPING_st)*)*), int) @nogc nothrow;
    static stack_st_POLICY_MAPPING* sk_POLICY_MAPPING_new_null() @nogc nothrow;
    static stack_st_POLICY_MAPPING* sk_POLICY_MAPPING_new(int function(const(const(POLICY_MAPPING_st)*)*, const(const(POLICY_MAPPING_st)*)*)) @nogc nothrow;
    static POLICY_MAPPING_st* sk_POLICY_MAPPING_value(const(stack_st_POLICY_MAPPING)*, int) @nogc nothrow;
    static int sk_POLICY_MAPPING_num(const(stack_st_POLICY_MAPPING)*) @nogc nothrow;
    alias sk_POLICY_MAPPING_copyfunc = POLICY_MAPPING_st* function(const(POLICY_MAPPING_st)*);
    alias sk_POLICY_MAPPING_freefunc = void function(POLICY_MAPPING_st*);
    alias sk_POLICY_MAPPING_compfunc = int function(const(const(POLICY_MAPPING_st)*)*, const(const(POLICY_MAPPING_st)*)*);
    struct stack_st_POLICY_MAPPING;
    static POLICY_MAPPING_st* sk_POLICY_MAPPING_delete_ptr(stack_st_POLICY_MAPPING*, POLICY_MAPPING_st*) @nogc nothrow;
    static POLICY_MAPPING_st* sk_POLICY_MAPPING_delete(stack_st_POLICY_MAPPING*, int) @nogc nothrow;
    static int sk_POLICY_MAPPING_find_ex(stack_st_POLICY_MAPPING*, POLICY_MAPPING_st*) @nogc nothrow;
    static int sk_POLICY_MAPPING_unshift(stack_st_POLICY_MAPPING*, POLICY_MAPPING_st*) @nogc nothrow;
    static void sk_POLICY_MAPPING_pop_free(stack_st_POLICY_MAPPING*, void function(POLICY_MAPPING_st*)) @nogc nothrow;
    static POLICY_MAPPING_st* sk_POLICY_MAPPING_shift(stack_st_POLICY_MAPPING*) @nogc nothrow;
    static POLICY_MAPPING_st* sk_POLICY_MAPPING_pop(stack_st_POLICY_MAPPING*) @nogc nothrow;
    static POLICY_MAPPING_st* sk_POLICY_MAPPING_set(stack_st_POLICY_MAPPING*, int, POLICY_MAPPING_st*) @nogc nothrow;
    static int sk_POLICY_MAPPING_find(stack_st_POLICY_MAPPING*, POLICY_MAPPING_st*) @nogc nothrow;
    static int sk_POLICY_MAPPING_insert(stack_st_POLICY_MAPPING*, POLICY_MAPPING_st*, int) @nogc nothrow;
    static int sk_POLICY_MAPPING_is_sorted(const(stack_st_POLICY_MAPPING)*) @nogc nothrow;
    static stack_st_POLICY_MAPPING* sk_POLICY_MAPPING_dup(const(stack_st_POLICY_MAPPING)*) @nogc nothrow;
    static stack_st_POLICY_MAPPING* sk_POLICY_MAPPING_deep_copy(const(stack_st_POLICY_MAPPING)*, POLICY_MAPPING_st* function(const(POLICY_MAPPING_st)*), void function(POLICY_MAPPING_st*)) @nogc nothrow;
    static int function(const(const(POLICY_MAPPING_st)*)*, const(const(POLICY_MAPPING_st)*)*) sk_POLICY_MAPPING_set_cmp_func(stack_st_POLICY_MAPPING*, int function(const(const(POLICY_MAPPING_st)*)*, const(const(POLICY_MAPPING_st)*)*)) @nogc nothrow;
    static void sk_POLICY_MAPPING_sort(stack_st_POLICY_MAPPING*) @nogc nothrow;
    struct POLICY_MAPPING_st
    {
        asn1_object_st* issuerDomainPolicy;
        asn1_object_st* subjectDomainPolicy;
    }
    alias POLICY_MAPPING = POLICY_MAPPING_st;
    static int sk_POLICYINFO_unshift(stack_st_POLICYINFO*, POLICYINFO_st*) @nogc nothrow;
    alias sk_POLICYINFO_compfunc = int function(const(const(POLICYINFO_st)*)*, const(const(POLICYINFO_st)*)*);
    alias sk_POLICYINFO_freefunc = void function(POLICYINFO_st*);
    alias sk_POLICYINFO_copyfunc = POLICYINFO_st* function(const(POLICYINFO_st)*);
    static int sk_POLICYINFO_num(const(stack_st_POLICYINFO)*) @nogc nothrow;
    static POLICYINFO_st* sk_POLICYINFO_value(const(stack_st_POLICYINFO)*, int) @nogc nothrow;
    static stack_st_POLICYINFO* sk_POLICYINFO_new(int function(const(const(POLICYINFO_st)*)*, const(const(POLICYINFO_st)*)*)) @nogc nothrow;
    static stack_st_POLICYINFO* sk_POLICYINFO_new_null() @nogc nothrow;
    static stack_st_POLICYINFO* sk_POLICYINFO_new_reserve(int function(const(const(POLICYINFO_st)*)*, const(const(POLICYINFO_st)*)*), int) @nogc nothrow;
    static int sk_POLICYINFO_reserve(stack_st_POLICYINFO*, int) @nogc nothrow;
    static void sk_POLICYINFO_free(stack_st_POLICYINFO*) @nogc nothrow;
    static void sk_POLICYINFO_zero(stack_st_POLICYINFO*) @nogc nothrow;
    static POLICYINFO_st* sk_POLICYINFO_delete(stack_st_POLICYINFO*, int) @nogc nothrow;
    static POLICYINFO_st* sk_POLICYINFO_delete_ptr(stack_st_POLICYINFO*, POLICYINFO_st*) @nogc nothrow;
    static int sk_POLICYINFO_push(stack_st_POLICYINFO*, POLICYINFO_st*) @nogc nothrow;
    static POLICYINFO_st* sk_POLICYINFO_pop(stack_st_POLICYINFO*) @nogc nothrow;
    static POLICYINFO_st* sk_POLICYINFO_shift(stack_st_POLICYINFO*) @nogc nothrow;
    static void sk_POLICYINFO_pop_free(stack_st_POLICYINFO*, void function(POLICYINFO_st*)) @nogc nothrow;
    static int sk_POLICYINFO_insert(stack_st_POLICYINFO*, POLICYINFO_st*, int) @nogc nothrow;
    static POLICYINFO_st* sk_POLICYINFO_set(stack_st_POLICYINFO*, int, POLICYINFO_st*) @nogc nothrow;
    static int sk_POLICYINFO_find(stack_st_POLICYINFO*, POLICYINFO_st*) @nogc nothrow;
    static int sk_POLICYINFO_find_ex(stack_st_POLICYINFO*, POLICYINFO_st*) @nogc nothrow;
    static void sk_POLICYINFO_sort(stack_st_POLICYINFO*) @nogc nothrow;
    static int sk_POLICYINFO_is_sorted(const(stack_st_POLICYINFO)*) @nogc nothrow;
    static stack_st_POLICYINFO* sk_POLICYINFO_dup(const(stack_st_POLICYINFO)*) @nogc nothrow;
    static stack_st_POLICYINFO* sk_POLICYINFO_deep_copy(const(stack_st_POLICYINFO)*, POLICYINFO_st* function(const(POLICYINFO_st)*), void function(POLICYINFO_st*)) @nogc nothrow;
    static int function(const(const(POLICYINFO_st)*)*, const(const(POLICYINFO_st)*)*) sk_POLICYINFO_set_cmp_func(stack_st_POLICYINFO*, int function(const(const(POLICYINFO_st)*)*, const(const(POLICYINFO_st)*)*)) @nogc nothrow;
    struct stack_st_POLICYINFO;
    alias CERTIFICATEPOLICIES = stack_st_POLICYINFO;
    struct POLICYINFO_st
    {
        asn1_object_st* policyid;
        stack_st_POLICYQUALINFO* qualifiers;
    }
    alias POLICYINFO = POLICYINFO_st;
    static POLICYQUALINFO_st* sk_POLICYQUALINFO_set(stack_st_POLICYQUALINFO*, int, POLICYQUALINFO_st*) @nogc nothrow;
    static int sk_POLICYQUALINFO_insert(stack_st_POLICYQUALINFO*, POLICYQUALINFO_st*, int) @nogc nothrow;
    static int sk_POLICYQUALINFO_find(stack_st_POLICYQUALINFO*, POLICYQUALINFO_st*) @nogc nothrow;
    static int sk_POLICYQUALINFO_find_ex(stack_st_POLICYQUALINFO*, POLICYQUALINFO_st*) @nogc nothrow;
    static void sk_POLICYQUALINFO_pop_free(stack_st_POLICYQUALINFO*, void function(POLICYQUALINFO_st*)) @nogc nothrow;
    static POLICYQUALINFO_st* sk_POLICYQUALINFO_shift(stack_st_POLICYQUALINFO*) @nogc nothrow;
    static POLICYQUALINFO_st* sk_POLICYQUALINFO_pop(stack_st_POLICYQUALINFO*) @nogc nothrow;
    static void sk_POLICYQUALINFO_sort(stack_st_POLICYQUALINFO*) @nogc nothrow;
    static int sk_POLICYQUALINFO_is_sorted(const(stack_st_POLICYQUALINFO)*) @nogc nothrow;
    static stack_st_POLICYQUALINFO* sk_POLICYQUALINFO_dup(const(stack_st_POLICYQUALINFO)*) @nogc nothrow;
    static stack_st_POLICYQUALINFO* sk_POLICYQUALINFO_deep_copy(const(stack_st_POLICYQUALINFO)*, POLICYQUALINFO_st* function(const(POLICYQUALINFO_st)*), void function(POLICYQUALINFO_st*)) @nogc nothrow;
    static int function(const(const(POLICYQUALINFO_st)*)*, const(const(POLICYQUALINFO_st)*)*) sk_POLICYQUALINFO_set_cmp_func(stack_st_POLICYQUALINFO*, int function(const(const(POLICYQUALINFO_st)*)*, const(const(POLICYQUALINFO_st)*)*)) @nogc nothrow;
    alias sk_POLICYQUALINFO_freefunc = void function(POLICYQUALINFO_st*);
    static POLICYQUALINFO_st* sk_POLICYQUALINFO_delete_ptr(stack_st_POLICYQUALINFO*, POLICYQUALINFO_st*) @nogc nothrow;
    static int sk_POLICYQUALINFO_unshift(stack_st_POLICYQUALINFO*, POLICYQUALINFO_st*) @nogc nothrow;
    static int sk_POLICYQUALINFO_push(stack_st_POLICYQUALINFO*, POLICYQUALINFO_st*) @nogc nothrow;
    static POLICYQUALINFO_st* sk_POLICYQUALINFO_delete(stack_st_POLICYQUALINFO*, int) @nogc nothrow;
    static void sk_POLICYQUALINFO_zero(stack_st_POLICYQUALINFO*) @nogc nothrow;
    static void sk_POLICYQUALINFO_free(stack_st_POLICYQUALINFO*) @nogc nothrow;
    static int sk_POLICYQUALINFO_reserve(stack_st_POLICYQUALINFO*, int) @nogc nothrow;
    static stack_st_POLICYQUALINFO* sk_POLICYQUALINFO_new_reserve(int function(const(const(POLICYQUALINFO_st)*)*, const(const(POLICYQUALINFO_st)*)*), int) @nogc nothrow;
    static stack_st_POLICYQUALINFO* sk_POLICYQUALINFO_new_null() @nogc nothrow;
    static stack_st_POLICYQUALINFO* sk_POLICYQUALINFO_new(int function(const(const(POLICYQUALINFO_st)*)*, const(const(POLICYQUALINFO_st)*)*)) @nogc nothrow;
    static POLICYQUALINFO_st* sk_POLICYQUALINFO_value(const(stack_st_POLICYQUALINFO)*, int) @nogc nothrow;
    static int sk_POLICYQUALINFO_num(const(stack_st_POLICYQUALINFO)*) @nogc nothrow;
    alias sk_POLICYQUALINFO_copyfunc = POLICYQUALINFO_st* function(const(POLICYQUALINFO_st)*);
    alias sk_POLICYQUALINFO_compfunc = int function(const(const(POLICYQUALINFO_st)*)*, const(const(POLICYQUALINFO_st)*)*);
    struct POLICYQUALINFO_st
    {
        asn1_object_st* pqualid;
        static union _Anonymous_20
        {
            asn1_string_st* cpsuri;
            USERNOTICE_st* usernotice;
            asn1_type_st* other;
        }
        _Anonymous_20 d;
    }
    alias POLICYQUALINFO = POLICYQUALINFO_st;
    struct USERNOTICE_st
    {
        NOTICEREF_st* noticeref;
        asn1_string_st* exptext;
    }
    alias USERNOTICE = USERNOTICE_st;
    struct NOTICEREF_st
    {
        asn1_string_st* organization;
        stack_st_ASN1_INTEGER* noticenos;
    }
    alias NOTICEREF = NOTICEREF_st;
    struct SXNET_st
    {
        asn1_string_st* version_;
        stack_st_SXNETID* ids;
    }
    alias SXNET = SXNET_st;
    static SXNET_ID_st* sk_SXNETID_delete(stack_st_SXNETID*, int) @nogc nothrow;
    static void sk_SXNETID_zero(stack_st_SXNETID*) @nogc nothrow;
    static void sk_SXNETID_free(stack_st_SXNETID*) @nogc nothrow;
    static int sk_SXNETID_reserve(stack_st_SXNETID*, int) @nogc nothrow;
    static stack_st_SXNETID* sk_SXNETID_new_reserve(int function(const(const(SXNET_ID_st)*)*, const(const(SXNET_ID_st)*)*), int) @nogc nothrow;
    static SXNET_ID_st* sk_SXNETID_delete_ptr(stack_st_SXNETID*, SXNET_ID_st*) @nogc nothrow;
    static stack_st_SXNETID* sk_SXNETID_new_null() @nogc nothrow;
    static stack_st_SXNETID* sk_SXNETID_new(int function(const(const(SXNET_ID_st)*)*, const(const(SXNET_ID_st)*)*)) @nogc nothrow;
    static SXNET_ID_st* sk_SXNETID_value(const(stack_st_SXNETID)*, int) @nogc nothrow;
    static int sk_SXNETID_num(const(stack_st_SXNETID)*) @nogc nothrow;
    alias sk_SXNETID_copyfunc = SXNET_ID_st* function(const(SXNET_ID_st)*);
    alias sk_SXNETID_freefunc = void function(SXNET_ID_st*);
    alias sk_SXNETID_compfunc = int function(const(const(SXNET_ID_st)*)*, const(const(SXNET_ID_st)*)*);
    struct stack_st_SXNETID;
    static int sk_SXNETID_insert(stack_st_SXNETID*, SXNET_ID_st*, int) @nogc nothrow;
    static int sk_SXNETID_push(stack_st_SXNETID*, SXNET_ID_st*) @nogc nothrow;
    static int sk_SXNETID_unshift(stack_st_SXNETID*, SXNET_ID_st*) @nogc nothrow;
    static SXNET_ID_st* sk_SXNETID_pop(stack_st_SXNETID*) @nogc nothrow;
    static SXNET_ID_st* sk_SXNETID_shift(stack_st_SXNETID*) @nogc nothrow;
    static void sk_SXNETID_pop_free(stack_st_SXNETID*, void function(SXNET_ID_st*)) @nogc nothrow;
    static SXNET_ID_st* sk_SXNETID_set(stack_st_SXNETID*, int, SXNET_ID_st*) @nogc nothrow;
    static int sk_SXNETID_find(stack_st_SXNETID*, SXNET_ID_st*) @nogc nothrow;
    static int sk_SXNETID_find_ex(stack_st_SXNETID*, SXNET_ID_st*) @nogc nothrow;
    static void sk_SXNETID_sort(stack_st_SXNETID*) @nogc nothrow;
    static int sk_SXNETID_is_sorted(const(stack_st_SXNETID)*) @nogc nothrow;
    static stack_st_SXNETID* sk_SXNETID_dup(const(stack_st_SXNETID)*) @nogc nothrow;
    static stack_st_SXNETID* sk_SXNETID_deep_copy(const(stack_st_SXNETID)*, SXNET_ID_st* function(const(SXNET_ID_st)*), void function(SXNET_ID_st*)) @nogc nothrow;
    static int function(const(const(SXNET_ID_st)*)*, const(const(SXNET_ID_st)*)*) sk_SXNETID_set_cmp_func(stack_st_SXNETID*, int function(const(const(SXNET_ID_st)*)*, const(const(SXNET_ID_st)*)*)) @nogc nothrow;
    struct SXNET_ID_st
    {
        asn1_string_st* zone;
        asn1_string_st* user;
    }
    alias SXNETID = SXNET_ID_st;
    static int sk_DIST_POINT_num(const(stack_st_DIST_POINT)*) @nogc nothrow;
    alias sk_DIST_POINT_copyfunc = DIST_POINT_st* function(const(DIST_POINT_st)*);
    alias sk_DIST_POINT_freefunc = void function(DIST_POINT_st*);
    alias sk_DIST_POINT_compfunc = int function(const(const(DIST_POINT_st)*)*, const(const(DIST_POINT_st)*)*);
    static stack_st_DIST_POINT* sk_DIST_POINT_new(int function(const(const(DIST_POINT_st)*)*, const(const(DIST_POINT_st)*)*)) @nogc nothrow;
    static DIST_POINT_st* sk_DIST_POINT_value(const(stack_st_DIST_POINT)*, int) @nogc nothrow;
    static int function(const(const(DIST_POINT_st)*)*, const(const(DIST_POINT_st)*)*) sk_DIST_POINT_set_cmp_func(stack_st_DIST_POINT*, int function(const(const(DIST_POINT_st)*)*, const(const(DIST_POINT_st)*)*)) @nogc nothrow;
    static stack_st_DIST_POINT* sk_DIST_POINT_deep_copy(const(stack_st_DIST_POINT)*, DIST_POINT_st* function(const(DIST_POINT_st)*), void function(DIST_POINT_st*)) @nogc nothrow;
    static stack_st_DIST_POINT* sk_DIST_POINT_dup(const(stack_st_DIST_POINT)*) @nogc nothrow;
    static int sk_DIST_POINT_is_sorted(const(stack_st_DIST_POINT)*) @nogc nothrow;
    static void sk_DIST_POINT_sort(stack_st_DIST_POINT*) @nogc nothrow;
    static int sk_DIST_POINT_find_ex(stack_st_DIST_POINT*, DIST_POINT_st*) @nogc nothrow;
    static int sk_DIST_POINT_find(stack_st_DIST_POINT*, DIST_POINT_st*) @nogc nothrow;
    static DIST_POINT_st* sk_DIST_POINT_set(stack_st_DIST_POINT*, int, DIST_POINT_st*) @nogc nothrow;
    static int sk_DIST_POINT_insert(stack_st_DIST_POINT*, DIST_POINT_st*, int) @nogc nothrow;
    static void sk_DIST_POINT_pop_free(stack_st_DIST_POINT*, void function(DIST_POINT_st*)) @nogc nothrow;
    static DIST_POINT_st* sk_DIST_POINT_shift(stack_st_DIST_POINT*) @nogc nothrow;
    static DIST_POINT_st* sk_DIST_POINT_pop(stack_st_DIST_POINT*) @nogc nothrow;
    static int sk_DIST_POINT_unshift(stack_st_DIST_POINT*, DIST_POINT_st*) @nogc nothrow;
    static int sk_DIST_POINT_push(stack_st_DIST_POINT*, DIST_POINT_st*) @nogc nothrow;
    static DIST_POINT_st* sk_DIST_POINT_delete_ptr(stack_st_DIST_POINT*, DIST_POINT_st*) @nogc nothrow;
    static DIST_POINT_st* sk_DIST_POINT_delete(stack_st_DIST_POINT*, int) @nogc nothrow;
    static void sk_DIST_POINT_zero(stack_st_DIST_POINT*) @nogc nothrow;
    static void sk_DIST_POINT_free(stack_st_DIST_POINT*) @nogc nothrow;
    static int sk_DIST_POINT_reserve(stack_st_DIST_POINT*, int) @nogc nothrow;
    static stack_st_DIST_POINT* sk_DIST_POINT_new_reserve(int function(const(const(DIST_POINT_st)*)*, const(const(DIST_POINT_st)*)*), int) @nogc nothrow;
    static stack_st_DIST_POINT* sk_DIST_POINT_new_null() @nogc nothrow;
    struct stack_st_DIST_POINT;
    alias CRL_DIST_POINTS = stack_st_DIST_POINT;
    struct DIST_POINT_NAME_st
    {
        int type;
        static union _Anonymous_21
        {
            stack_st_GENERAL_NAME* fullname;
            stack_st_X509_NAME_ENTRY* relativename;
        }
        _Anonymous_21 name;
        X509_name_st* dpname;
    }
    alias DIST_POINT_NAME = DIST_POINT_NAME_st;
    static int sk_ACCESS_DESCRIPTION_unshift(stack_st_ACCESS_DESCRIPTION*, ACCESS_DESCRIPTION_st*) @nogc nothrow;
    static int sk_ACCESS_DESCRIPTION_insert(stack_st_ACCESS_DESCRIPTION*, ACCESS_DESCRIPTION_st*, int) @nogc nothrow;
    static ACCESS_DESCRIPTION_st* sk_ACCESS_DESCRIPTION_set(stack_st_ACCESS_DESCRIPTION*, int, ACCESS_DESCRIPTION_st*) @nogc nothrow;
    static int sk_ACCESS_DESCRIPTION_find(stack_st_ACCESS_DESCRIPTION*, ACCESS_DESCRIPTION_st*) @nogc nothrow;
    static int sk_ACCESS_DESCRIPTION_find_ex(stack_st_ACCESS_DESCRIPTION*, ACCESS_DESCRIPTION_st*) @nogc nothrow;
    static void sk_ACCESS_DESCRIPTION_sort(stack_st_ACCESS_DESCRIPTION*) @nogc nothrow;
    static int sk_ACCESS_DESCRIPTION_is_sorted(const(stack_st_ACCESS_DESCRIPTION)*) @nogc nothrow;
    static stack_st_ACCESS_DESCRIPTION* sk_ACCESS_DESCRIPTION_dup(const(stack_st_ACCESS_DESCRIPTION)*) @nogc nothrow;
    static stack_st_ACCESS_DESCRIPTION* sk_ACCESS_DESCRIPTION_deep_copy(const(stack_st_ACCESS_DESCRIPTION)*, ACCESS_DESCRIPTION_st* function(const(ACCESS_DESCRIPTION_st)*), void function(ACCESS_DESCRIPTION_st*)) @nogc nothrow;
    static int function(const(const(ACCESS_DESCRIPTION_st)*)*, const(const(ACCESS_DESCRIPTION_st)*)*) sk_ACCESS_DESCRIPTION_set_cmp_func(stack_st_ACCESS_DESCRIPTION*, int function(const(const(ACCESS_DESCRIPTION_st)*)*, const(const(ACCESS_DESCRIPTION_st)*)*)) @nogc nothrow;
    static ACCESS_DESCRIPTION_st* sk_ACCESS_DESCRIPTION_shift(stack_st_ACCESS_DESCRIPTION*) @nogc nothrow;
    static ACCESS_DESCRIPTION_st* sk_ACCESS_DESCRIPTION_pop(stack_st_ACCESS_DESCRIPTION*) @nogc nothrow;
    static stack_st_ACCESS_DESCRIPTION* sk_ACCESS_DESCRIPTION_new_null() @nogc nothrow;
    static int sk_ACCESS_DESCRIPTION_push(stack_st_ACCESS_DESCRIPTION*, ACCESS_DESCRIPTION_st*) @nogc nothrow;
    static ACCESS_DESCRIPTION_st* sk_ACCESS_DESCRIPTION_delete_ptr(stack_st_ACCESS_DESCRIPTION*, ACCESS_DESCRIPTION_st*) @nogc nothrow;
    static ACCESS_DESCRIPTION_st* sk_ACCESS_DESCRIPTION_delete(stack_st_ACCESS_DESCRIPTION*, int) @nogc nothrow;
    static void sk_ACCESS_DESCRIPTION_zero(stack_st_ACCESS_DESCRIPTION*) @nogc nothrow;
    static void sk_ACCESS_DESCRIPTION_free(stack_st_ACCESS_DESCRIPTION*) @nogc nothrow;
    static int sk_ACCESS_DESCRIPTION_reserve(stack_st_ACCESS_DESCRIPTION*, int) @nogc nothrow;
    static stack_st_ACCESS_DESCRIPTION* sk_ACCESS_DESCRIPTION_new_reserve(int function(const(const(ACCESS_DESCRIPTION_st)*)*, const(const(ACCESS_DESCRIPTION_st)*)*), int) @nogc nothrow;
    static void sk_ACCESS_DESCRIPTION_pop_free(stack_st_ACCESS_DESCRIPTION*, void function(ACCESS_DESCRIPTION_st*)) @nogc nothrow;
    static stack_st_ACCESS_DESCRIPTION* sk_ACCESS_DESCRIPTION_new(int function(const(const(ACCESS_DESCRIPTION_st)*)*, const(const(ACCESS_DESCRIPTION_st)*)*)) @nogc nothrow;
    static ACCESS_DESCRIPTION_st* sk_ACCESS_DESCRIPTION_value(const(stack_st_ACCESS_DESCRIPTION)*, int) @nogc nothrow;
    static int sk_ACCESS_DESCRIPTION_num(const(stack_st_ACCESS_DESCRIPTION)*) @nogc nothrow;
    alias sk_ACCESS_DESCRIPTION_copyfunc = ACCESS_DESCRIPTION_st* function(const(ACCESS_DESCRIPTION_st)*);
    alias sk_ACCESS_DESCRIPTION_freefunc = void function(ACCESS_DESCRIPTION_st*);
    alias sk_ACCESS_DESCRIPTION_compfunc = int function(const(const(ACCESS_DESCRIPTION_st)*)*, const(const(ACCESS_DESCRIPTION_st)*)*);
    static int sk_GENERAL_NAMES_is_sorted(const(stack_st_GENERAL_NAMES)*) @nogc nothrow;
    static stack_st_GENERAL_NAMES* sk_GENERAL_NAMES_dup(const(stack_st_GENERAL_NAMES)*) @nogc nothrow;
    static int sk_GENERAL_NAMES_find_ex(stack_st_GENERAL_NAMES*, stack_st_GENERAL_NAME*) @nogc nothrow;
    static void sk_GENERAL_NAMES_sort(stack_st_GENERAL_NAMES*) @nogc nothrow;
    static stack_st_GENERAL_NAMES* sk_GENERAL_NAMES_deep_copy(const(stack_st_GENERAL_NAMES)*, stack_st_GENERAL_NAME* function(const(stack_st_GENERAL_NAME)*), void function(stack_st_GENERAL_NAME*)) @nogc nothrow;
    static int sk_GENERAL_NAMES_find(stack_st_GENERAL_NAMES*, stack_st_GENERAL_NAME*) @nogc nothrow;
    static stack_st_GENERAL_NAME* sk_GENERAL_NAMES_set(stack_st_GENERAL_NAMES*, int, stack_st_GENERAL_NAME*) @nogc nothrow;
    static int sk_GENERAL_NAMES_insert(stack_st_GENERAL_NAMES*, stack_st_GENERAL_NAME*, int) @nogc nothrow;
    static void sk_GENERAL_NAMES_pop_free(stack_st_GENERAL_NAMES*, void function(stack_st_GENERAL_NAME*)) @nogc nothrow;
    static stack_st_GENERAL_NAME* sk_GENERAL_NAMES_shift(stack_st_GENERAL_NAMES*) @nogc nothrow;
    static stack_st_GENERAL_NAME* sk_GENERAL_NAMES_pop(stack_st_GENERAL_NAMES*) @nogc nothrow;
    static int sk_GENERAL_NAMES_unshift(stack_st_GENERAL_NAMES*, stack_st_GENERAL_NAME*) @nogc nothrow;
    static stack_st_GENERAL_NAME* sk_GENERAL_NAMES_delete_ptr(stack_st_GENERAL_NAMES*, stack_st_GENERAL_NAME*) @nogc nothrow;
    static stack_st_GENERAL_NAME* sk_GENERAL_NAMES_delete(stack_st_GENERAL_NAMES*, int) @nogc nothrow;
    static void sk_GENERAL_NAMES_zero(stack_st_GENERAL_NAMES*) @nogc nothrow;
    static void sk_GENERAL_NAMES_free(stack_st_GENERAL_NAMES*) @nogc nothrow;
    static int sk_GENERAL_NAMES_reserve(stack_st_GENERAL_NAMES*, int) @nogc nothrow;
    static stack_st_GENERAL_NAMES* sk_GENERAL_NAMES_new_reserve(int function(const(const(stack_st_GENERAL_NAME)*)*, const(const(stack_st_GENERAL_NAME)*)*), int) @nogc nothrow;
    static stack_st_GENERAL_NAMES* sk_GENERAL_NAMES_new_null() @nogc nothrow;
    static stack_st_GENERAL_NAMES* sk_GENERAL_NAMES_new(int function(const(const(stack_st_GENERAL_NAME)*)*, const(const(stack_st_GENERAL_NAME)*)*)) @nogc nothrow;
    static stack_st_GENERAL_NAME* sk_GENERAL_NAMES_value(const(stack_st_GENERAL_NAMES)*, int) @nogc nothrow;
    static int sk_GENERAL_NAMES_num(const(stack_st_GENERAL_NAMES)*) @nogc nothrow;
    alias sk_GENERAL_NAMES_copyfunc = stack_st_GENERAL_NAME* function(const(stack_st_GENERAL_NAME)*);
    static int function(const(const(stack_st_GENERAL_NAME)*)*, const(const(stack_st_GENERAL_NAME)*)*) sk_GENERAL_NAMES_set_cmp_func(stack_st_GENERAL_NAMES*, int function(const(const(stack_st_GENERAL_NAME)*)*, const(const(stack_st_GENERAL_NAME)*)*)) @nogc nothrow;
    alias sk_GENERAL_NAMES_freefunc = void function(stack_st_GENERAL_NAME*);
    static int sk_GENERAL_NAMES_push(stack_st_GENERAL_NAMES*, stack_st_GENERAL_NAME*) @nogc nothrow;
    alias sk_GENERAL_NAMES_compfunc = int function(const(const(stack_st_GENERAL_NAME)*)*, const(const(stack_st_GENERAL_NAME)*)*);
    struct stack_st_GENERAL_NAMES;
    alias GENERAL_NAMES = stack_st_GENERAL_NAME;
    static int function(const(const(GENERAL_NAME_st)*)*, const(const(GENERAL_NAME_st)*)*) sk_GENERAL_NAME_set_cmp_func(stack_st_GENERAL_NAME*, int function(const(const(GENERAL_NAME_st)*)*, const(const(GENERAL_NAME_st)*)*)) @nogc nothrow;
    static stack_st_GENERAL_NAME* sk_GENERAL_NAME_deep_copy(const(stack_st_GENERAL_NAME)*, GENERAL_NAME_st* function(const(GENERAL_NAME_st)*), void function(GENERAL_NAME_st*)) @nogc nothrow;
    static stack_st_GENERAL_NAME* sk_GENERAL_NAME_dup(const(stack_st_GENERAL_NAME)*) @nogc nothrow;
    static int sk_GENERAL_NAME_is_sorted(const(stack_st_GENERAL_NAME)*) @nogc nothrow;
    static void sk_GENERAL_NAME_sort(stack_st_GENERAL_NAME*) @nogc nothrow;
    static int sk_GENERAL_NAME_find_ex(stack_st_GENERAL_NAME*, GENERAL_NAME_st*) @nogc nothrow;
    static int sk_GENERAL_NAME_find(stack_st_GENERAL_NAME*, GENERAL_NAME_st*) @nogc nothrow;
    static GENERAL_NAME_st* sk_GENERAL_NAME_set(stack_st_GENERAL_NAME*, int, GENERAL_NAME_st*) @nogc nothrow;
    static int sk_GENERAL_NAME_insert(stack_st_GENERAL_NAME*, GENERAL_NAME_st*, int) @nogc nothrow;
    static void sk_GENERAL_NAME_pop_free(stack_st_GENERAL_NAME*, void function(GENERAL_NAME_st*)) @nogc nothrow;
    static GENERAL_NAME_st* sk_GENERAL_NAME_shift(stack_st_GENERAL_NAME*) @nogc nothrow;
    static GENERAL_NAME_st* sk_GENERAL_NAME_pop(stack_st_GENERAL_NAME*) @nogc nothrow;
    static int sk_GENERAL_NAME_unshift(stack_st_GENERAL_NAME*, GENERAL_NAME_st*) @nogc nothrow;
    static int sk_GENERAL_NAME_push(stack_st_GENERAL_NAME*, GENERAL_NAME_st*) @nogc nothrow;
    static GENERAL_NAME_st* sk_GENERAL_NAME_delete_ptr(stack_st_GENERAL_NAME*, GENERAL_NAME_st*) @nogc nothrow;
    static GENERAL_NAME_st* sk_GENERAL_NAME_delete(stack_st_GENERAL_NAME*, int) @nogc nothrow;
    static void sk_GENERAL_NAME_zero(stack_st_GENERAL_NAME*) @nogc nothrow;
    static void sk_GENERAL_NAME_free(stack_st_GENERAL_NAME*) @nogc nothrow;
    static int sk_GENERAL_NAME_reserve(stack_st_GENERAL_NAME*, int) @nogc nothrow;
    static stack_st_GENERAL_NAME* sk_GENERAL_NAME_new_reserve(int function(const(const(GENERAL_NAME_st)*)*, const(const(GENERAL_NAME_st)*)*), int) @nogc nothrow;
    static stack_st_GENERAL_NAME* sk_GENERAL_NAME_new_null() @nogc nothrow;
    static stack_st_GENERAL_NAME* sk_GENERAL_NAME_new(int function(const(const(GENERAL_NAME_st)*)*, const(const(GENERAL_NAME_st)*)*)) @nogc nothrow;
    static GENERAL_NAME_st* sk_GENERAL_NAME_value(const(stack_st_GENERAL_NAME)*, int) @nogc nothrow;
    static int sk_GENERAL_NAME_num(const(stack_st_GENERAL_NAME)*) @nogc nothrow;
    alias sk_GENERAL_NAME_copyfunc = GENERAL_NAME_st* function(const(GENERAL_NAME_st)*);
    alias sk_GENERAL_NAME_freefunc = void function(GENERAL_NAME_st*);
    alias sk_GENERAL_NAME_compfunc = int function(const(const(GENERAL_NAME_st)*)*, const(const(GENERAL_NAME_st)*)*);
    struct stack_st_GENERAL_NAME;
    alias TLS_FEATURE = stack_st_ASN1_INTEGER;
    alias EXTENDED_KEY_USAGE = stack_st_ASN1_OBJECT;
    struct stack_st_ACCESS_DESCRIPTION;
    alias AUTHORITY_INFO_ACCESS = stack_st_ACCESS_DESCRIPTION;
    struct ACCESS_DESCRIPTION_st
    {
        asn1_object_st* method;
        GENERAL_NAME_st* location;
    }
    alias ACCESS_DESCRIPTION = ACCESS_DESCRIPTION_st;
    struct GENERAL_NAME_st
    {
        int type;
        static union _Anonymous_22
        {
            char* ptr;
            otherName_st* otherName;
            asn1_string_st* rfc822Name;
            asn1_string_st* dNSName;
            asn1_type_st* x400Address;
            X509_name_st* directoryName;
            EDIPartyName_st* ediPartyName;
            asn1_string_st* uniformResourceIdentifier;
            asn1_string_st* iPAddress;
            asn1_object_st* registeredID;
            asn1_string_st* ip;
            X509_name_st* dirn;
            asn1_string_st* ia5;
            asn1_object_st* rid;
            asn1_type_st* other;
        }
        _Anonymous_22 d;
    }
    alias GENERAL_NAME = GENERAL_NAME_st;
    struct EDIPartyName_st
    {
        asn1_string_st* nameAssigner;
        asn1_string_st* partyName;
    }
    alias EDIPARTYNAME = EDIPartyName_st;
    struct otherName_st
    {
        asn1_object_st* type_id;
        asn1_type_st* value;
    }
    alias OTHERNAME = otherName_st;
    struct PKEY_USAGE_PERIOD_st
    {
        asn1_string_st* notBefore;
        asn1_string_st* notAfter;
    }
    alias PKEY_USAGE_PERIOD = PKEY_USAGE_PERIOD_st;
    struct BASIC_CONSTRAINTS_st
    {
        int ca;
        asn1_string_st* pathlen;
    }
    alias BASIC_CONSTRAINTS = BASIC_CONSTRAINTS_st;
    alias ENUMERATED_NAMES = BIT_STRING_BITNAME_st;
    static int function(const(const(v3_ext_method)*)*, const(const(v3_ext_method)*)*) sk_X509V3_EXT_METHOD_set_cmp_func(stack_st_X509V3_EXT_METHOD*, int function(const(const(v3_ext_method)*)*, const(const(v3_ext_method)*)*)) @nogc nothrow;
    static stack_st_X509V3_EXT_METHOD* sk_X509V3_EXT_METHOD_deep_copy(const(stack_st_X509V3_EXT_METHOD)*, v3_ext_method* function(const(v3_ext_method)*), void function(v3_ext_method*)) @nogc nothrow;
    static v3_ext_method* sk_X509V3_EXT_METHOD_pop(stack_st_X509V3_EXT_METHOD*) @nogc nothrow;
    static v3_ext_method* sk_X509V3_EXT_METHOD_delete(stack_st_X509V3_EXT_METHOD*, int) @nogc nothrow;
    static stack_st_X509V3_EXT_METHOD* sk_X509V3_EXT_METHOD_dup(const(stack_st_X509V3_EXT_METHOD)*) @nogc nothrow;
    alias sk_X509V3_EXT_METHOD_compfunc = int function(const(const(v3_ext_method)*)*, const(const(v3_ext_method)*)*);
    alias sk_X509V3_EXT_METHOD_freefunc = void function(v3_ext_method*);
    alias sk_X509V3_EXT_METHOD_copyfunc = v3_ext_method* function(const(v3_ext_method)*);
    static int sk_X509V3_EXT_METHOD_num(const(stack_st_X509V3_EXT_METHOD)*) @nogc nothrow;
    static v3_ext_method* sk_X509V3_EXT_METHOD_value(const(stack_st_X509V3_EXT_METHOD)*, int) @nogc nothrow;
    static stack_st_X509V3_EXT_METHOD* sk_X509V3_EXT_METHOD_new(int function(const(const(v3_ext_method)*)*, const(const(v3_ext_method)*)*)) @nogc nothrow;
    static stack_st_X509V3_EXT_METHOD* sk_X509V3_EXT_METHOD_new_null() @nogc nothrow;
    static stack_st_X509V3_EXT_METHOD* sk_X509V3_EXT_METHOD_new_reserve(int function(const(const(v3_ext_method)*)*, const(const(v3_ext_method)*)*), int) @nogc nothrow;
    static int sk_X509V3_EXT_METHOD_reserve(stack_st_X509V3_EXT_METHOD*, int) @nogc nothrow;
    static void sk_X509V3_EXT_METHOD_free(stack_st_X509V3_EXT_METHOD*) @nogc nothrow;
    static void sk_X509V3_EXT_METHOD_zero(stack_st_X509V3_EXT_METHOD*) @nogc nothrow;
    struct stack_st_X509V3_EXT_METHOD;
    static int sk_X509V3_EXT_METHOD_push(stack_st_X509V3_EXT_METHOD*, v3_ext_method*) @nogc nothrow;
    static v3_ext_method* sk_X509V3_EXT_METHOD_delete_ptr(stack_st_X509V3_EXT_METHOD*, v3_ext_method*) @nogc nothrow;
    static int sk_X509V3_EXT_METHOD_unshift(stack_st_X509V3_EXT_METHOD*, v3_ext_method*) @nogc nothrow;
    static v3_ext_method* sk_X509V3_EXT_METHOD_shift(stack_st_X509V3_EXT_METHOD*) @nogc nothrow;
    static void sk_X509V3_EXT_METHOD_pop_free(stack_st_X509V3_EXT_METHOD*, void function(v3_ext_method*)) @nogc nothrow;
    static int sk_X509V3_EXT_METHOD_insert(stack_st_X509V3_EXT_METHOD*, v3_ext_method*, int) @nogc nothrow;
    static v3_ext_method* sk_X509V3_EXT_METHOD_set(stack_st_X509V3_EXT_METHOD*, int, v3_ext_method*) @nogc nothrow;
    static int sk_X509V3_EXT_METHOD_find(stack_st_X509V3_EXT_METHOD*, v3_ext_method*) @nogc nothrow;
    static int sk_X509V3_EXT_METHOD_find_ex(stack_st_X509V3_EXT_METHOD*, v3_ext_method*) @nogc nothrow;
    static void sk_X509V3_EXT_METHOD_sort(stack_st_X509V3_EXT_METHOD*) @nogc nothrow;
    static int sk_X509V3_EXT_METHOD_is_sorted(const(stack_st_X509V3_EXT_METHOD)*) @nogc nothrow;
    alias X509V3_EXT_METHOD = v3_ext_method;
    struct X509V3_CONF_METHOD_st
    {
        char* function(void*, const(char)*, const(char)*) get_string;
        stack_st_CONF_VALUE* function(void*, const(char)*) get_section;
        void function(void*, char*) free_string;
        void function(void*, stack_st_CONF_VALUE*) free_section;
    }
    alias X509V3_CONF_METHOD = X509V3_CONF_METHOD_st;
    alias X509V3_EXT_R2I = void* function(const(v3_ext_method)*, v3_ext_ctx*, const(char)*);
    alias X509V3_EXT_I2R = int function(const(v3_ext_method)*, void*, bio_st*, int);
    alias X509V3_EXT_S2I = void* function(const(v3_ext_method)*, v3_ext_ctx*, const(char)*);
    alias X509V3_EXT_I2S = char* function(const(v3_ext_method)*, void*);
    alias X509V3_EXT_V2I = void* function(const(v3_ext_method)*, v3_ext_ctx*, stack_st_CONF_VALUE*);
    alias X509V3_EXT_I2V = stack_st_CONF_VALUE* function(const(v3_ext_method)*, void*, stack_st_CONF_VALUE*);
    alias X509V3_EXT_I2D = int function(void*, ubyte**);
    alias X509V3_EXT_D2I = void* function(void*, const(ubyte)**, c_long);
    alias X509V3_EXT_FREE = void function(void*);
    alias X509V3_EXT_NEW = void* function();
    struct v3_ext_method
    {
        int ext_nid;
        int ext_flags;
        const(ASN1_ITEM_st)* it;
        void* function() ext_new;
        void function(void*) ext_free;
        void* function(void*, const(ubyte)**, c_long) d2i;
        int function(void*, ubyte**) i2d;
        char* function(const(v3_ext_method)*, void*) i2s;
        void* function(const(v3_ext_method)*, v3_ext_ctx*, const(char)*) s2i;
        stack_st_CONF_VALUE* function(const(v3_ext_method)*, void*, stack_st_CONF_VALUE*) i2v;
        void* function(const(v3_ext_method)*, v3_ext_ctx*, stack_st_CONF_VALUE*) v2i;
        int function(const(v3_ext_method)*, void*, bio_st*, int) i2r;
        void* function(const(v3_ext_method)*, v3_ext_ctx*, const(char)*) r2i;
        void* usr_data;
    }
    int ERR_load_X509_strings() @nogc nothrow;
    const(X509_POLICY_NODE_st)* X509_policy_node_get0_parent(const(X509_POLICY_NODE_st)*) @nogc nothrow;
    stack_st_POLICYQUALINFO* X509_policy_node_get0_qualifiers(const(X509_POLICY_NODE_st)*) @nogc nothrow;
    struct stack_st_POLICYQUALINFO;
    const(asn1_object_st)* X509_policy_node_get0_policy(const(X509_POLICY_NODE_st)*) @nogc nothrow;
    X509_POLICY_NODE_st* X509_policy_level_get0_node(X509_POLICY_LEVEL_st*, int) @nogc nothrow;
    int X509_policy_level_node_count(X509_POLICY_LEVEL_st*) @nogc nothrow;
    stack_st_X509_POLICY_NODE* X509_policy_tree_get0_user_policies(const(X509_POLICY_TREE_st)*) @nogc nothrow;
    stack_st_X509_POLICY_NODE* X509_policy_tree_get0_policies(const(X509_POLICY_TREE_st)*) @nogc nothrow;
    struct stack_st_X509_POLICY_NODE;
    X509_POLICY_LEVEL_st* X509_policy_tree_get0_level(const(X509_POLICY_TREE_st)*, int) @nogc nothrow;
    int X509_policy_tree_level_count(const(X509_POLICY_TREE_st)*) @nogc nothrow;
    void X509_policy_tree_free(X509_POLICY_TREE_st*) @nogc nothrow;
    int X509_policy_check(X509_POLICY_TREE_st**, int*, stack_st_X509*, stack_st_ASN1_OBJECT*, uint) @nogc nothrow;
    void X509_VERIFY_PARAM_table_cleanup() @nogc nothrow;
    const(X509_VERIFY_PARAM_st)* X509_VERIFY_PARAM_lookup(const(char)*) @nogc nothrow;
    const(X509_VERIFY_PARAM_st)* X509_VERIFY_PARAM_get0(int) @nogc nothrow;
    int X509_VERIFY_PARAM_get_count() @nogc nothrow;
    int X509_VERIFY_PARAM_add0_table(X509_VERIFY_PARAM_st*) @nogc nothrow;
    const(char)* X509_VERIFY_PARAM_get0_name(const(X509_VERIFY_PARAM_st)*) @nogc nothrow;
    int X509_VERIFY_PARAM_get_auth_level(const(X509_VERIFY_PARAM_st)*) @nogc nothrow;
    int X509_VERIFY_PARAM_get_depth(const(X509_VERIFY_PARAM_st)*) @nogc nothrow;
    int X509_VERIFY_PARAM_set1_ip_asc(X509_VERIFY_PARAM_st*, const(char)*) @nogc nothrow;
    int X509_VERIFY_PARAM_set1_ip(X509_VERIFY_PARAM_st*, const(ubyte)*, c_ulong) @nogc nothrow;
    int X509_VERIFY_PARAM_set1_email(X509_VERIFY_PARAM_st*, const(char)*, c_ulong) @nogc nothrow;
    void X509_VERIFY_PARAM_move_peername(X509_VERIFY_PARAM_st*, X509_VERIFY_PARAM_st*) @nogc nothrow;
    char* X509_VERIFY_PARAM_get0_peername(X509_VERIFY_PARAM_st*) @nogc nothrow;
    uint X509_VERIFY_PARAM_get_hostflags(const(X509_VERIFY_PARAM_st)*) @nogc nothrow;
    void X509_VERIFY_PARAM_set_hostflags(X509_VERIFY_PARAM_st*, uint) @nogc nothrow;
    int X509_VERIFY_PARAM_add1_host(X509_VERIFY_PARAM_st*, const(char)*, c_ulong) @nogc nothrow;
    int X509_VERIFY_PARAM_set1_host(X509_VERIFY_PARAM_st*, const(char)*, c_ulong) @nogc nothrow;
    uint X509_VERIFY_PARAM_get_inh_flags(const(X509_VERIFY_PARAM_st)*) @nogc nothrow;
    int X509_VERIFY_PARAM_set_inh_flags(X509_VERIFY_PARAM_st*, uint) @nogc nothrow;
    int X509_VERIFY_PARAM_set1_policies(X509_VERIFY_PARAM_st*, stack_st_ASN1_OBJECT*) @nogc nothrow;
    int X509_VERIFY_PARAM_add0_policy(X509_VERIFY_PARAM_st*, asn1_object_st*) @nogc nothrow;
    void X509_VERIFY_PARAM_set_time(X509_VERIFY_PARAM_st*, c_long) @nogc nothrow;
    c_long X509_VERIFY_PARAM_get_time(const(X509_VERIFY_PARAM_st)*) @nogc nothrow;
    void X509_VERIFY_PARAM_set_auth_level(X509_VERIFY_PARAM_st*, int) @nogc nothrow;
    void X509_VERIFY_PARAM_set_depth(X509_VERIFY_PARAM_st*, int) @nogc nothrow;
    int X509_VERIFY_PARAM_set_trust(X509_VERIFY_PARAM_st*, int) @nogc nothrow;
    int X509_VERIFY_PARAM_set_purpose(X509_VERIFY_PARAM_st*, int) @nogc nothrow;
    c_ulong X509_VERIFY_PARAM_get_flags(X509_VERIFY_PARAM_st*) @nogc nothrow;
    int X509_VERIFY_PARAM_clear_flags(X509_VERIFY_PARAM_st*, c_ulong) @nogc nothrow;
    int X509_VERIFY_PARAM_set_flags(X509_VERIFY_PARAM_st*, c_ulong) @nogc nothrow;
    int X509_VERIFY_PARAM_set1_name(X509_VERIFY_PARAM_st*, const(char)*) @nogc nothrow;
    int X509_VERIFY_PARAM_set1(X509_VERIFY_PARAM_st*, const(X509_VERIFY_PARAM_st)*) @nogc nothrow;
    int X509_VERIFY_PARAM_inherit(X509_VERIFY_PARAM_st*, const(X509_VERIFY_PARAM_st)*) @nogc nothrow;
    void X509_VERIFY_PARAM_free(X509_VERIFY_PARAM_st*) @nogc nothrow;
    X509_VERIFY_PARAM_st* X509_VERIFY_PARAM_new() @nogc nothrow;
    void X509_STORE_CTX_set0_dane(x509_store_ctx_st*, ssl_dane_st*) @nogc nothrow;
    int X509_STORE_CTX_set_default(x509_store_ctx_st*, const(char)*) @nogc nothrow;
    void X509_STORE_CTX_set0_param(x509_store_ctx_st*, X509_VERIFY_PARAM_st*) @nogc nothrow;
    X509_VERIFY_PARAM_st* X509_STORE_CTX_get0_param(x509_store_ctx_st*) @nogc nothrow;
    int X509_STORE_CTX_get_num_untrusted(x509_store_ctx_st*) @nogc nothrow;
    int X509_STORE_CTX_get_explicit_policy(x509_store_ctx_st*) @nogc nothrow;
    X509_POLICY_TREE_st* X509_STORE_CTX_get0_policy_tree(x509_store_ctx_st*) @nogc nothrow;
    void X509_STORE_CTX_set_time(x509_store_ctx_st*, c_ulong, c_long) @nogc nothrow;
    void X509_STORE_CTX_set_flags(x509_store_ctx_st*, c_ulong) @nogc nothrow;
    int X509_STORE_CTX_purpose_inherit(x509_store_ctx_st*, int, int, int) @nogc nothrow;
    int X509_STORE_CTX_set_trust(x509_store_ctx_st*, int) @nogc nothrow;
    int X509_STORE_CTX_set_purpose(x509_store_ctx_st*, int) @nogc nothrow;
    void X509_STORE_CTX_set0_crls(x509_store_ctx_st*, stack_st_X509_CRL*) @nogc nothrow;
    void X509_STORE_CTX_set0_verified_chain(x509_store_ctx_st*, stack_st_X509*) @nogc nothrow;
    void X509_STORE_CTX_set_cert(x509_store_ctx_st*, x509_st*) @nogc nothrow;
    stack_st_X509* X509_STORE_CTX_get1_chain(x509_store_ctx_st*) @nogc nothrow;
    stack_st_X509* X509_STORE_CTX_get0_chain(x509_store_ctx_st*) @nogc nothrow;
    x509_store_ctx_st* X509_STORE_CTX_get0_parent_ctx(x509_store_ctx_st*) @nogc nothrow;
    X509_crl_st* X509_STORE_CTX_get0_current_crl(x509_store_ctx_st*) @nogc nothrow;
    x509_st* X509_STORE_CTX_get0_current_issuer(x509_store_ctx_st*) @nogc nothrow;
    void X509_STORE_CTX_set_current_cert(x509_store_ctx_st*, x509_st*) @nogc nothrow;
    x509_st* X509_STORE_CTX_get_current_cert(x509_store_ctx_st*) @nogc nothrow;
    void X509_STORE_CTX_set_error_depth(x509_store_ctx_st*, int) @nogc nothrow;
    int X509_STORE_CTX_get_error_depth(x509_store_ctx_st*) @nogc nothrow;
    void X509_STORE_CTX_set_error(x509_store_ctx_st*, int) @nogc nothrow;
    int X509_STORE_CTX_get_error(x509_store_ctx_st*) @nogc nothrow;
    void* X509_STORE_CTX_get_ex_data(x509_store_ctx_st*, int) @nogc nothrow;
    int X509_STORE_CTX_set_ex_data(x509_store_ctx_st*, int, void*) @nogc nothrow;
    int X509_STORE_set_default_paths(x509_store_st*) @nogc nothrow;
    int X509_STORE_load_locations(x509_store_st*, const(char)*, const(char)*) @nogc nothrow;
    int X509_LOOKUP_shutdown(x509_lookup_st*) @nogc nothrow;
    x509_store_st* X509_LOOKUP_get_store(const(x509_lookup_st)*) @nogc nothrow;
    void* X509_LOOKUP_get_method_data(const(x509_lookup_st)*) @nogc nothrow;
    int X509_LOOKUP_set_method_data(x509_lookup_st*, void*) @nogc nothrow;
    int X509_LOOKUP_by_alias(x509_lookup_st*, X509_LOOKUP_TYPE, const(char)*, int, x509_object_st*) @nogc nothrow;
    int X509_LOOKUP_by_fingerprint(x509_lookup_st*, X509_LOOKUP_TYPE, const(ubyte)*, int, x509_object_st*) @nogc nothrow;
    int X509_LOOKUP_by_issuer_serial(x509_lookup_st*, X509_LOOKUP_TYPE, X509_name_st*, asn1_string_st*, x509_object_st*) @nogc nothrow;
    int X509_LOOKUP_by_subject(x509_lookup_st*, X509_LOOKUP_TYPE, X509_name_st*, x509_object_st*) @nogc nothrow;
    int X509_LOOKUP_init(x509_lookup_st*) @nogc nothrow;
    void X509_LOOKUP_free(x509_lookup_st*) @nogc nothrow;
    x509_lookup_st* X509_LOOKUP_new(x509_lookup_method_st*) @nogc nothrow;
    int X509_load_cert_crl_file(x509_lookup_st*, const(char)*, int) @nogc nothrow;
    int X509_load_crl_file(x509_lookup_st*, const(char)*, int) @nogc nothrow;
    int X509_load_cert_file(x509_lookup_st*, const(char)*, int) @nogc nothrow;
    int X509_LOOKUP_ctrl(x509_lookup_st*, int, const(char)*, c_long, char**) @nogc nothrow;
    x509_object_st* X509_STORE_CTX_get_obj_by_subject(x509_store_ctx_st*, X509_LOOKUP_TYPE, X509_name_st*) @nogc nothrow;
    int X509_STORE_CTX_get_by_subject(x509_store_ctx_st*, X509_LOOKUP_TYPE, X509_name_st*, x509_object_st*) @nogc nothrow;
    int X509_STORE_add_crl(x509_store_st*, X509_crl_st*) @nogc nothrow;
    int X509_STORE_add_cert(x509_store_st*, x509_st*) @nogc nothrow;
    int function(x509_lookup_st*, X509_LOOKUP_TYPE, const(char)*, int, x509_object_st*) X509_LOOKUP_meth_get_get_by_alias(const(x509_lookup_method_st)*) @nogc nothrow;
    int X509_LOOKUP_meth_set_get_by_alias(x509_lookup_method_st*, int function(x509_lookup_st*, X509_LOOKUP_TYPE, const(char)*, int, x509_object_st*)) @nogc nothrow;
    int function(x509_lookup_st*, X509_LOOKUP_TYPE, const(ubyte)*, int, x509_object_st*) X509_LOOKUP_meth_get_get_by_fingerprint(const(x509_lookup_method_st)*) @nogc nothrow;
    int X509_LOOKUP_meth_set_get_by_fingerprint(x509_lookup_method_st*, int function(x509_lookup_st*, X509_LOOKUP_TYPE, const(ubyte)*, int, x509_object_st*)) @nogc nothrow;
    int function(x509_lookup_st*, X509_LOOKUP_TYPE, X509_name_st*, asn1_string_st*, x509_object_st*) X509_LOOKUP_meth_get_get_by_issuer_serial(const(x509_lookup_method_st)*) @nogc nothrow;
    int X509_LOOKUP_meth_set_get_by_issuer_serial(x509_lookup_method_st*, int function(x509_lookup_st*, X509_LOOKUP_TYPE, X509_name_st*, asn1_string_st*, x509_object_st*)) @nogc nothrow;
    int function(x509_lookup_st*, X509_LOOKUP_TYPE, X509_name_st*, x509_object_st*) X509_LOOKUP_meth_get_get_by_subject(const(x509_lookup_method_st)*) @nogc nothrow;
    int X509_LOOKUP_meth_set_get_by_subject(x509_lookup_method_st*, int function(x509_lookup_st*, X509_LOOKUP_TYPE, X509_name_st*, x509_object_st*)) @nogc nothrow;
    int function(x509_lookup_st*, int, const(char)*, c_long, char**) X509_LOOKUP_meth_get_ctrl(const(x509_lookup_method_st)*) @nogc nothrow;
    int X509_LOOKUP_meth_set_ctrl(x509_lookup_method_st*, int function(x509_lookup_st*, int, const(char)*, c_long, char**)) @nogc nothrow;
    int function(x509_lookup_st*) X509_LOOKUP_meth_get_shutdown(const(x509_lookup_method_st)*) @nogc nothrow;
    int X509_LOOKUP_meth_set_shutdown(x509_lookup_method_st*, int function(x509_lookup_st*)) @nogc nothrow;
    int function(x509_lookup_st*) X509_LOOKUP_meth_get_init(const(x509_lookup_method_st)*) @nogc nothrow;
    int X509_LOOKUP_meth_set_init(x509_lookup_method_st*, int function(x509_lookup_st*)) @nogc nothrow;
    void function(x509_lookup_st*) X509_LOOKUP_meth_get_free(const(x509_lookup_method_st)*) @nogc nothrow;
    int X509_LOOKUP_meth_set_free(x509_lookup_method_st*, void function(x509_lookup_st*)) @nogc nothrow;
    int function(x509_lookup_st*) X509_LOOKUP_meth_get_new_item(const(x509_lookup_method_st)*) @nogc nothrow;
    int X509_LOOKUP_meth_set_new_item(x509_lookup_method_st*, int function(x509_lookup_st*)) @nogc nothrow;
    void X509_LOOKUP_meth_free(x509_lookup_method_st*) @nogc nothrow;
    x509_lookup_method_st* X509_LOOKUP_meth_new(const(char)*) @nogc nothrow;
    alias X509_LOOKUP_get_by_alias_fn = int function(x509_lookup_st*, X509_LOOKUP_TYPE, const(char)*, int, x509_object_st*);
    alias X509_LOOKUP_get_by_fingerprint_fn = int function(x509_lookup_st*, X509_LOOKUP_TYPE, const(ubyte)*, int, x509_object_st*);
    alias X509_LOOKUP_get_by_issuer_serial_fn = int function(x509_lookup_st*, X509_LOOKUP_TYPE, X509_name_st*, asn1_string_st*, x509_object_st*);
    alias X509_LOOKUP_get_by_subject_fn = int function(x509_lookup_st*, X509_LOOKUP_TYPE, X509_name_st*, x509_object_st*);
    alias X509_LOOKUP_ctrl_fn = int function(x509_lookup_st*, int, const(char)*, c_long, char**);
    x509_lookup_method_st* X509_LOOKUP_file() @nogc nothrow;
    x509_lookup_method_st* X509_LOOKUP_hash_dir() @nogc nothrow;
    x509_lookup_st* X509_STORE_add_lookup(x509_store_st*, x509_lookup_method_st*) @nogc nothrow;
    int function(x509_store_ctx_st*) X509_STORE_CTX_get_cleanup(x509_store_ctx_st*) @nogc nothrow;
    stack_st_X509_CRL* function(x509_store_ctx_st*, X509_name_st*) X509_STORE_CTX_get_lookup_crls(x509_store_ctx_st*) @nogc nothrow;
    stack_st_X509* function(x509_store_ctx_st*, X509_name_st*) X509_STORE_CTX_get_lookup_certs(x509_store_ctx_st*) @nogc nothrow;
    int function(x509_store_ctx_st*) X509_STORE_CTX_get_check_policy(x509_store_ctx_st*) @nogc nothrow;
    int function(x509_store_ctx_st*, X509_crl_st*, x509_st*) X509_STORE_CTX_get_cert_crl(x509_store_ctx_st*) @nogc nothrow;
    int function(x509_store_ctx_st*, X509_crl_st*) X509_STORE_CTX_get_check_crl(x509_store_ctx_st*) @nogc nothrow;
    int function(x509_store_ctx_st*, X509_crl_st**, x509_st*) X509_STORE_CTX_get_get_crl(x509_store_ctx_st*) @nogc nothrow;
    int function(x509_store_ctx_st*) X509_STORE_CTX_get_check_revocation(x509_store_ctx_st*) @nogc nothrow;
    int function(x509_store_ctx_st*, x509_st*, x509_st*) X509_STORE_CTX_get_check_issued(x509_store_ctx_st*) @nogc nothrow;
    int function(x509_st**, x509_store_ctx_st*, x509_st*) X509_STORE_CTX_get_get_issuer(x509_store_ctx_st*) @nogc nothrow;
    int function(x509_store_ctx_st*) X509_STORE_CTX_get_verify(x509_store_ctx_st*) @nogc nothrow;
    int function(int, x509_store_ctx_st*) X509_STORE_CTX_get_verify_cb(x509_store_ctx_st*) @nogc nothrow;
    void X509_STORE_CTX_set_verify_cb(x509_store_ctx_st*, int function(int, x509_store_ctx_st*)) @nogc nothrow;
    void X509_STORE_CTX_set0_untrusted(x509_store_ctx_st*, stack_st_X509*) @nogc nothrow;
    stack_st_X509* X509_STORE_CTX_get0_untrusted(x509_store_ctx_st*) @nogc nothrow;
    x509_st* X509_STORE_CTX_get0_cert(x509_store_ctx_st*) @nogc nothrow;
    x509_store_st* X509_STORE_CTX_get0_store(x509_store_ctx_st*) @nogc nothrow;
    void X509_STORE_CTX_cleanup(x509_store_ctx_st*) @nogc nothrow;
    void X509_STORE_CTX_set0_trusted_stack(x509_store_ctx_st*, stack_st_X509*) @nogc nothrow;
    int X509_STORE_CTX_init(x509_store_ctx_st*, x509_store_st*, x509_st*, stack_st_X509*) @nogc nothrow;
    void X509_STORE_CTX_free(x509_store_ctx_st*) @nogc nothrow;
    int X509_STORE_CTX_get1_issuer(x509_st**, x509_store_ctx_st*, x509_st*) @nogc nothrow;
    x509_store_ctx_st* X509_STORE_CTX_new() @nogc nothrow;
    void* X509_STORE_get_ex_data(x509_store_st*, int) @nogc nothrow;
    int X509_STORE_set_ex_data(x509_store_st*, int, void*) @nogc nothrow;
    int function(x509_store_ctx_st*) X509_STORE_get_cleanup(x509_store_st*) @nogc nothrow;
    void X509_STORE_set_cleanup(x509_store_st*, int function(x509_store_ctx_st*)) @nogc nothrow;
    stack_st_X509_CRL* function(x509_store_ctx_st*, X509_name_st*) X509_STORE_get_lookup_crls(x509_store_st*) @nogc nothrow;
    void X509_STORE_set_lookup_crls(x509_store_st*, stack_st_X509_CRL* function(x509_store_ctx_st*, X509_name_st*)) @nogc nothrow;
    stack_st_X509* function(x509_store_ctx_st*, X509_name_st*) X509_STORE_get_lookup_certs(x509_store_st*) @nogc nothrow;
    void X509_STORE_set_lookup_certs(x509_store_st*, stack_st_X509* function(x509_store_ctx_st*, X509_name_st*)) @nogc nothrow;
    int function(x509_store_ctx_st*) X509_STORE_get_check_policy(x509_store_st*) @nogc nothrow;
    void X509_STORE_set_check_policy(x509_store_st*, int function(x509_store_ctx_st*)) @nogc nothrow;
    int function(x509_store_ctx_st*, X509_crl_st*, x509_st*) X509_STORE_get_cert_crl(x509_store_st*) @nogc nothrow;
    void X509_STORE_set_cert_crl(x509_store_st*, int function(x509_store_ctx_st*, X509_crl_st*, x509_st*)) @nogc nothrow;
    int function(x509_store_ctx_st*, X509_crl_st*) X509_STORE_get_check_crl(x509_store_st*) @nogc nothrow;
    void X509_STORE_set_check_crl(x509_store_st*, int function(x509_store_ctx_st*, X509_crl_st*)) @nogc nothrow;
    int function(x509_store_ctx_st*, X509_crl_st**, x509_st*) X509_STORE_get_get_crl(x509_store_st*) @nogc nothrow;
    void X509_STORE_set_get_crl(x509_store_st*, int function(x509_store_ctx_st*, X509_crl_st**, x509_st*)) @nogc nothrow;
    int function(x509_store_ctx_st*) X509_STORE_get_check_revocation(x509_store_st*) @nogc nothrow;
    void X509_STORE_set_check_revocation(x509_store_st*, int function(x509_store_ctx_st*)) @nogc nothrow;
    int function(x509_store_ctx_st*, x509_st*, x509_st*) X509_STORE_get_check_issued(x509_store_st*) @nogc nothrow;
    void X509_STORE_set_check_issued(x509_store_st*, int function(x509_store_ctx_st*, x509_st*, x509_st*)) @nogc nothrow;
    int function(x509_st**, x509_store_ctx_st*, x509_st*) X509_STORE_get_get_issuer(x509_store_st*) @nogc nothrow;
    void X509_STORE_set_get_issuer(x509_store_st*, int function(x509_st**, x509_store_ctx_st*, x509_st*)) @nogc nothrow;
    int function(int, x509_store_ctx_st*) X509_STORE_get_verify_cb(x509_store_st*) @nogc nothrow;
    void X509_STORE_set_verify_cb(x509_store_st*, int function(int, x509_store_ctx_st*)) @nogc nothrow;
    int function(x509_store_ctx_st*) X509_STORE_get_verify(x509_store_st*) @nogc nothrow;
    void X509_STORE_CTX_set_verify(x509_store_ctx_st*, int function(x509_store_ctx_st*)) @nogc nothrow;
    void X509_STORE_set_verify(x509_store_st*, int function(x509_store_ctx_st*)) @nogc nothrow;
    X509_VERIFY_PARAM_st* X509_STORE_get0_param(x509_store_st*) @nogc nothrow;
    int X509_STORE_set1_param(x509_store_st*, X509_VERIFY_PARAM_st*) @nogc nothrow;
    int X509_STORE_set_trust(x509_store_st*, int) @nogc nothrow;
    int X509_STORE_set_purpose(x509_store_st*, int) @nogc nothrow;
    int X509_STORE_set_flags(x509_store_st*, c_ulong) @nogc nothrow;
    stack_st_X509_CRL* X509_STORE_CTX_get1_crls(x509_store_ctx_st*, X509_name_st*) @nogc nothrow;
    stack_st_X509* X509_STORE_CTX_get1_certs(x509_store_ctx_st*, X509_name_st*) @nogc nothrow;
    stack_st_X509_OBJECT* X509_STORE_get0_objects(x509_store_st*) @nogc nothrow;
    int X509_STORE_up_ref(x509_store_st*) @nogc nothrow;
    int X509_STORE_unlock(x509_store_st*) @nogc nothrow;
    int X509_STORE_lock(x509_store_st*) @nogc nothrow;
    void X509_STORE_free(x509_store_st*) @nogc nothrow;
    x509_store_st* X509_STORE_new() @nogc nothrow;
    int X509_OBJECT_set1_X509_CRL(x509_object_st*, X509_crl_st*) @nogc nothrow;
    X509_crl_st* X509_OBJECT_get0_X509_CRL(x509_object_st*) @nogc nothrow;
    int X509_OBJECT_set1_X509(x509_object_st*, x509_st*) @nogc nothrow;
    x509_st* X509_OBJECT_get0_X509(const(x509_object_st)*) @nogc nothrow;
    X509_LOOKUP_TYPE X509_OBJECT_get_type(const(x509_object_st)*) @nogc nothrow;
    void X509_OBJECT_free(x509_object_st*) @nogc nothrow;
    x509_object_st* X509_OBJECT_new() @nogc nothrow;
    int X509_OBJECT_up_ref_count(x509_object_st*) @nogc nothrow;
    x509_object_st* X509_OBJECT_retrieve_match(stack_st_X509_OBJECT*, x509_object_st*) @nogc nothrow;
    x509_object_st* X509_OBJECT_retrieve_by_subject(stack_st_X509_OBJECT*, X509_LOOKUP_TYPE, X509_name_st*) @nogc nothrow;
    int X509_OBJECT_idx_by_subject(stack_st_X509_OBJECT*, X509_LOOKUP_TYPE, X509_name_st*) @nogc nothrow;
    void X509_STORE_CTX_set_depth(x509_store_ctx_st*, int) @nogc nothrow;
    alias X509_STORE_CTX_cleanup_fn = int function(x509_store_ctx_st*);
    alias X509_STORE_CTX_lookup_crls_fn = stack_st_X509_CRL* function(x509_store_ctx_st*, X509_name_st*);
    alias X509_STORE_CTX_lookup_certs_fn = stack_st_X509* function(x509_store_ctx_st*, X509_name_st*);
    alias X509_STORE_CTX_check_policy_fn = int function(x509_store_ctx_st*);
    alias X509_STORE_CTX_cert_crl_fn = int function(x509_store_ctx_st*, X509_crl_st*, x509_st*);
    alias X509_STORE_CTX_check_crl_fn = int function(x509_store_ctx_st*, X509_crl_st*);
    alias X509_STORE_CTX_get_crl_fn = int function(x509_store_ctx_st*, X509_crl_st**, x509_st*);
    alias X509_STORE_CTX_check_revocation_fn = int function(x509_store_ctx_st*);
    alias X509_STORE_CTX_check_issued_fn = int function(x509_store_ctx_st*, x509_st*, x509_st*);
    alias X509_STORE_CTX_get_issuer_fn = int function(x509_st**, x509_store_ctx_st*, x509_st*);
    alias X509_STORE_CTX_verify_fn = int function(x509_store_ctx_st*);
    alias X509_STORE_CTX_verify_cb = int function(int, x509_store_ctx_st*);
    int X509_STORE_set_depth(x509_store_st*, int) @nogc nothrow;
    static int sk_X509_VERIFY_PARAM_reserve(stack_st_X509_VERIFY_PARAM*, int) @nogc nothrow;
    static void sk_X509_VERIFY_PARAM_free(stack_st_X509_VERIFY_PARAM*) @nogc nothrow;
    static stack_st_X509_VERIFY_PARAM* sk_X509_VERIFY_PARAM_new_reserve(int function(const(const(X509_VERIFY_PARAM_st)*)*, const(const(X509_VERIFY_PARAM_st)*)*), int) @nogc nothrow;
    static X509_VERIFY_PARAM_st* sk_X509_VERIFY_PARAM_delete_ptr(stack_st_X509_VERIFY_PARAM*, X509_VERIFY_PARAM_st*) @nogc nothrow;
    static void sk_X509_VERIFY_PARAM_zero(stack_st_X509_VERIFY_PARAM*) @nogc nothrow;
    static X509_VERIFY_PARAM_st* sk_X509_VERIFY_PARAM_delete(stack_st_X509_VERIFY_PARAM*, int) @nogc nothrow;
    static stack_st_X509_VERIFY_PARAM* sk_X509_VERIFY_PARAM_new_null() @nogc nothrow;
    static int sk_X509_VERIFY_PARAM_push(stack_st_X509_VERIFY_PARAM*, X509_VERIFY_PARAM_st*) @nogc nothrow;
    static stack_st_X509_VERIFY_PARAM* sk_X509_VERIFY_PARAM_new(int function(const(const(X509_VERIFY_PARAM_st)*)*, const(const(X509_VERIFY_PARAM_st)*)*)) @nogc nothrow;
    static X509_VERIFY_PARAM_st* sk_X509_VERIFY_PARAM_value(const(stack_st_X509_VERIFY_PARAM)*, int) @nogc nothrow;
    static int sk_X509_VERIFY_PARAM_num(const(stack_st_X509_VERIFY_PARAM)*) @nogc nothrow;
    alias sk_X509_VERIFY_PARAM_copyfunc = X509_VERIFY_PARAM_st* function(const(X509_VERIFY_PARAM_st)*);
    alias sk_X509_VERIFY_PARAM_freefunc = void function(X509_VERIFY_PARAM_st*);
    alias sk_X509_VERIFY_PARAM_compfunc = int function(const(const(X509_VERIFY_PARAM_st)*)*, const(const(X509_VERIFY_PARAM_st)*)*);
    struct stack_st_X509_VERIFY_PARAM;
    static stack_st_X509_VERIFY_PARAM* sk_X509_VERIFY_PARAM_deep_copy(const(stack_st_X509_VERIFY_PARAM)*, X509_VERIFY_PARAM_st* function(const(X509_VERIFY_PARAM_st)*), void function(X509_VERIFY_PARAM_st*)) @nogc nothrow;
    static int sk_X509_VERIFY_PARAM_unshift(stack_st_X509_VERIFY_PARAM*, X509_VERIFY_PARAM_st*) @nogc nothrow;
    static X509_VERIFY_PARAM_st* sk_X509_VERIFY_PARAM_pop(stack_st_X509_VERIFY_PARAM*) @nogc nothrow;
    static X509_VERIFY_PARAM_st* sk_X509_VERIFY_PARAM_shift(stack_st_X509_VERIFY_PARAM*) @nogc nothrow;
    static void sk_X509_VERIFY_PARAM_pop_free(stack_st_X509_VERIFY_PARAM*, void function(X509_VERIFY_PARAM_st*)) @nogc nothrow;
    static int sk_X509_VERIFY_PARAM_insert(stack_st_X509_VERIFY_PARAM*, X509_VERIFY_PARAM_st*, int) @nogc nothrow;
    static X509_VERIFY_PARAM_st* sk_X509_VERIFY_PARAM_set(stack_st_X509_VERIFY_PARAM*, int, X509_VERIFY_PARAM_st*) @nogc nothrow;
    static int sk_X509_VERIFY_PARAM_find(stack_st_X509_VERIFY_PARAM*, X509_VERIFY_PARAM_st*) @nogc nothrow;
    static int sk_X509_VERIFY_PARAM_find_ex(stack_st_X509_VERIFY_PARAM*, X509_VERIFY_PARAM_st*) @nogc nothrow;
    static void sk_X509_VERIFY_PARAM_sort(stack_st_X509_VERIFY_PARAM*) @nogc nothrow;
    static int sk_X509_VERIFY_PARAM_is_sorted(const(stack_st_X509_VERIFY_PARAM)*) @nogc nothrow;
    static stack_st_X509_VERIFY_PARAM* sk_X509_VERIFY_PARAM_dup(const(stack_st_X509_VERIFY_PARAM)*) @nogc nothrow;
    static int function(const(const(X509_VERIFY_PARAM_st)*)*, const(const(X509_VERIFY_PARAM_st)*)*) sk_X509_VERIFY_PARAM_set_cmp_func(stack_st_X509_VERIFY_PARAM*, int function(const(const(X509_VERIFY_PARAM_st)*)*, const(const(X509_VERIFY_PARAM_st)*)*)) @nogc nothrow;
    static x509_object_st* sk_X509_OBJECT_shift(stack_st_X509_OBJECT*) @nogc nothrow;
    static int function(const(const(x509_object_st)*)*, const(const(x509_object_st)*)*) sk_X509_OBJECT_set_cmp_func(stack_st_X509_OBJECT*, int function(const(const(x509_object_st)*)*, const(const(x509_object_st)*)*)) @nogc nothrow;
    static stack_st_X509_OBJECT* sk_X509_OBJECT_deep_copy(const(stack_st_X509_OBJECT)*, x509_object_st* function(const(x509_object_st)*), void function(x509_object_st*)) @nogc nothrow;
    static stack_st_X509_OBJECT* sk_X509_OBJECT_dup(const(stack_st_X509_OBJECT)*) @nogc nothrow;
    static int sk_X509_OBJECT_is_sorted(const(stack_st_X509_OBJECT)*) @nogc nothrow;
    static void sk_X509_OBJECT_sort(stack_st_X509_OBJECT*) @nogc nothrow;
    static int sk_X509_OBJECT_find_ex(stack_st_X509_OBJECT*, x509_object_st*) @nogc nothrow;
    static int sk_X509_OBJECT_find(stack_st_X509_OBJECT*, x509_object_st*) @nogc nothrow;
    static x509_object_st* sk_X509_OBJECT_set(stack_st_X509_OBJECT*, int, x509_object_st*) @nogc nothrow;
    static int sk_X509_OBJECT_insert(stack_st_X509_OBJECT*, x509_object_st*, int) @nogc nothrow;
    static void sk_X509_OBJECT_pop_free(stack_st_X509_OBJECT*, void function(x509_object_st*)) @nogc nothrow;
    static void sk_X509_OBJECT_free(stack_st_X509_OBJECT*) @nogc nothrow;
    struct stack_st_X509_OBJECT;
    static int sk_X509_OBJECT_unshift(stack_st_X509_OBJECT*, x509_object_st*) @nogc nothrow;
    static int sk_X509_OBJECT_push(stack_st_X509_OBJECT*, x509_object_st*) @nogc nothrow;
    static x509_object_st* sk_X509_OBJECT_delete_ptr(stack_st_X509_OBJECT*, x509_object_st*) @nogc nothrow;
    static x509_object_st* sk_X509_OBJECT_delete(stack_st_X509_OBJECT*, int) @nogc nothrow;
    static void sk_X509_OBJECT_zero(stack_st_X509_OBJECT*) @nogc nothrow;
    static int sk_X509_OBJECT_reserve(stack_st_X509_OBJECT*, int) @nogc nothrow;
    static stack_st_X509_OBJECT* sk_X509_OBJECT_new_reserve(int function(const(const(x509_object_st)*)*, const(const(x509_object_st)*)*), int) @nogc nothrow;
    static stack_st_X509_OBJECT* sk_X509_OBJECT_new_null() @nogc nothrow;
    static stack_st_X509_OBJECT* sk_X509_OBJECT_new(int function(const(const(x509_object_st)*)*, const(const(x509_object_st)*)*)) @nogc nothrow;
    static x509_object_st* sk_X509_OBJECT_value(const(stack_st_X509_OBJECT)*, int) @nogc nothrow;
    static x509_object_st* sk_X509_OBJECT_pop(stack_st_X509_OBJECT*) @nogc nothrow;
    alias sk_X509_OBJECT_copyfunc = x509_object_st* function(const(x509_object_st)*);
    alias sk_X509_OBJECT_freefunc = void function(x509_object_st*);
    alias sk_X509_OBJECT_compfunc = int function(const(const(x509_object_st)*)*, const(const(x509_object_st)*)*);
    static int sk_X509_OBJECT_num(const(stack_st_X509_OBJECT)*) @nogc nothrow;
    static int function(const(const(x509_lookup_st)*)*, const(const(x509_lookup_st)*)*) sk_X509_LOOKUP_set_cmp_func(stack_st_X509_LOOKUP*, int function(const(const(x509_lookup_st)*)*, const(const(x509_lookup_st)*)*)) @nogc nothrow;
    static stack_st_X509_LOOKUP* sk_X509_LOOKUP_deep_copy(const(stack_st_X509_LOOKUP)*, x509_lookup_st* function(const(x509_lookup_st)*), void function(x509_lookup_st*)) @nogc nothrow;
    static stack_st_X509_LOOKUP* sk_X509_LOOKUP_dup(const(stack_st_X509_LOOKUP)*) @nogc nothrow;
    static int sk_X509_LOOKUP_is_sorted(const(stack_st_X509_LOOKUP)*) @nogc nothrow;
    static void sk_X509_LOOKUP_sort(stack_st_X509_LOOKUP*) @nogc nothrow;
    static int sk_X509_LOOKUP_find_ex(stack_st_X509_LOOKUP*, x509_lookup_st*) @nogc nothrow;
    static int sk_X509_LOOKUP_find(stack_st_X509_LOOKUP*, x509_lookup_st*) @nogc nothrow;
    static x509_lookup_st* sk_X509_LOOKUP_set(stack_st_X509_LOOKUP*, int, x509_lookup_st*) @nogc nothrow;
    static int sk_X509_LOOKUP_insert(stack_st_X509_LOOKUP*, x509_lookup_st*, int) @nogc nothrow;
    static void sk_X509_LOOKUP_pop_free(stack_st_X509_LOOKUP*, void function(x509_lookup_st*)) @nogc nothrow;
    static x509_lookup_st* sk_X509_LOOKUP_shift(stack_st_X509_LOOKUP*) @nogc nothrow;
    static stack_st_X509_LOOKUP* sk_X509_LOOKUP_new_reserve(int function(const(const(x509_lookup_st)*)*, const(const(x509_lookup_st)*)*), int) @nogc nothrow;
    static stack_st_X509_LOOKUP* sk_X509_LOOKUP_new_null() @nogc nothrow;
    static stack_st_X509_LOOKUP* sk_X509_LOOKUP_new(int function(const(const(x509_lookup_st)*)*, const(const(x509_lookup_st)*)*)) @nogc nothrow;
    static x509_lookup_st* sk_X509_LOOKUP_value(const(stack_st_X509_LOOKUP)*, int) @nogc nothrow;
    static int sk_X509_LOOKUP_num(const(stack_st_X509_LOOKUP)*) @nogc nothrow;
    alias sk_X509_LOOKUP_copyfunc = x509_lookup_st* function(const(x509_lookup_st)*);
    alias sk_X509_LOOKUP_freefunc = void function(x509_lookup_st*);
    alias sk_X509_LOOKUP_compfunc = int function(const(const(x509_lookup_st)*)*, const(const(x509_lookup_st)*)*);
    struct stack_st_X509_LOOKUP;
    static x509_lookup_st* sk_X509_LOOKUP_pop(stack_st_X509_LOOKUP*) @nogc nothrow;
    static int sk_X509_LOOKUP_unshift(stack_st_X509_LOOKUP*, x509_lookup_st*) @nogc nothrow;
    static int sk_X509_LOOKUP_push(stack_st_X509_LOOKUP*, x509_lookup_st*) @nogc nothrow;
    static x509_lookup_st* sk_X509_LOOKUP_delete_ptr(stack_st_X509_LOOKUP*, x509_lookup_st*) @nogc nothrow;
    static x509_lookup_st* sk_X509_LOOKUP_delete(stack_st_X509_LOOKUP*, int) @nogc nothrow;
    static void sk_X509_LOOKUP_zero(stack_st_X509_LOOKUP*) @nogc nothrow;
    static int sk_X509_LOOKUP_reserve(stack_st_X509_LOOKUP*, int) @nogc nothrow;
    static void sk_X509_LOOKUP_free(stack_st_X509_LOOKUP*) @nogc nothrow;
    enum _Anonymous_23
    {
        X509_LU_NONE = 0,
        X509_LU_X509 = 1,
        X509_LU_CRL = 2,
    }
    enum X509_LU_NONE = _Anonymous_23.X509_LU_NONE;
    enum X509_LU_X509 = _Anonymous_23.X509_LU_X509;
    enum X509_LU_CRL = _Anonymous_23.X509_LU_CRL;
    alias X509_LOOKUP_TYPE = _Anonymous_23;
    int X509_TRUST_get_trust(const(x509_trust_st)*) @nogc nothrow;
    char* X509_TRUST_get0_name(const(x509_trust_st)*) @nogc nothrow;
    int X509_TRUST_get_flags(const(x509_trust_st)*) @nogc nothrow;
    void X509_TRUST_cleanup() @nogc nothrow;
    int X509_TRUST_add(int, int, int function(x509_trust_st*, x509_st*, int), const(char)*, int, void*) @nogc nothrow;
    int X509_TRUST_get_by_id(int) @nogc nothrow;
    x509_trust_st* X509_TRUST_get0(int) @nogc nothrow;
    int X509_TRUST_get_count() @nogc nothrow;
    int X509_check_trust(x509_st*, int, int) @nogc nothrow;
    int X509_PUBKEY_get0_param(asn1_object_st**, const(ubyte)**, int*, X509_algor_st**, X509_pubkey_st*) @nogc nothrow;
    int X509_PUBKEY_set0_param(X509_pubkey_st*, asn1_object_st*, int, void*, ubyte*, int) @nogc nothrow;
    int PKCS8_pkey_add1_attr_by_NID(pkcs8_priv_key_info_st*, int, int, const(ubyte)*, int) @nogc nothrow;
    const(stack_st_X509_ATTRIBUTE)* PKCS8_pkey_get0_attrs(const(pkcs8_priv_key_info_st)*) @nogc nothrow;
    int PKCS8_pkey_get0(const(asn1_object_st)**, const(ubyte)**, int*, const(X509_algor_st)**, const(pkcs8_priv_key_info_st)*) @nogc nothrow;
    int PKCS8_pkey_set0(pkcs8_priv_key_info_st*, asn1_object_st*, int, int, void*, ubyte*, int) @nogc nothrow;
    pkcs8_priv_key_info_st* EVP_PKEY2PKCS8(evp_pkey_st*) @nogc nothrow;
    evp_pkey_st* EVP_PKCS82PKEY(const(pkcs8_priv_key_info_st)*) @nogc nothrow;
    pkcs8_priv_key_info_st* d2i_PKCS8_PRIV_KEY_INFO(pkcs8_priv_key_info_st**, const(ubyte)**, c_long) @nogc nothrow;
    pkcs8_priv_key_info_st* PKCS8_PRIV_KEY_INFO_new() @nogc nothrow;
    extern __gshared const(ASN1_ITEM_st) PKCS8_PRIV_KEY_INFO_it;
    int i2d_PKCS8_PRIV_KEY_INFO(pkcs8_priv_key_info_st*, ubyte**) @nogc nothrow;
    void PKCS8_PRIV_KEY_INFO_free(pkcs8_priv_key_info_st*) @nogc nothrow;
    X509_algor_st* PKCS5_pbkdf2_set(int, ubyte*, int, int, int) @nogc nothrow;
    X509_algor_st* PKCS5_pbe2_set_scrypt(const(evp_cipher_st)*, const(ubyte)*, int, ubyte*, c_ulong, c_ulong, c_ulong) @nogc nothrow;
    X509_algor_st* PKCS5_pbe2_set_iv(const(evp_cipher_st)*, int, ubyte*, int, ubyte*, int) @nogc nothrow;
    X509_algor_st* PKCS5_pbe2_set(const(evp_cipher_st)*, int, ubyte*, int) @nogc nothrow;
    X509_algor_st* PKCS5_pbe_set(int, int, const(ubyte)*, int) @nogc nothrow;
    int PKCS5_pbe_set0_algor(X509_algor_st*, int, int, const(ubyte)*, int) @nogc nothrow;
    SCRYPT_PARAMS_st* d2i_SCRYPT_PARAMS(SCRYPT_PARAMS_st**, const(ubyte)**, c_long) @nogc nothrow;
    SCRYPT_PARAMS_st* SCRYPT_PARAMS_new() @nogc nothrow;
    void SCRYPT_PARAMS_free(SCRYPT_PARAMS_st*) @nogc nothrow;
    extern __gshared const(ASN1_ITEM_st) SCRYPT_PARAMS_it;
    int i2d_SCRYPT_PARAMS(SCRYPT_PARAMS_st*, ubyte**) @nogc nothrow;
    PBKDF2PARAM_st* PBKDF2PARAM_new() @nogc nothrow;
    PBKDF2PARAM_st* d2i_PBKDF2PARAM(PBKDF2PARAM_st**, const(ubyte)**, c_long) @nogc nothrow;
    extern __gshared const(ASN1_ITEM_st) PBKDF2PARAM_it;
    int i2d_PBKDF2PARAM(PBKDF2PARAM_st*, ubyte**) @nogc nothrow;
    void PBKDF2PARAM_free(PBKDF2PARAM_st*) @nogc nothrow;
    PBE2PARAM_st* d2i_PBE2PARAM(PBE2PARAM_st**, const(ubyte)**, c_long) @nogc nothrow;
    PBE2PARAM_st* PBE2PARAM_new() @nogc nothrow;
    extern __gshared const(ASN1_ITEM_st) PBE2PARAM_it;
    int i2d_PBE2PARAM(PBE2PARAM_st*, ubyte**) @nogc nothrow;
    void PBE2PARAM_free(PBE2PARAM_st*) @nogc nothrow;
    PBEPARAM_st* d2i_PBEPARAM(PBEPARAM_st**, const(ubyte)**, c_long) @nogc nothrow;
    PBEPARAM_st* PBEPARAM_new() @nogc nothrow;
    extern __gshared const(ASN1_ITEM_st) PBEPARAM_it;
    int i2d_PBEPARAM(PBEPARAM_st*, ubyte**) @nogc nothrow;
    void PBEPARAM_free(PBEPARAM_st*) @nogc nothrow;
    x509_st* X509_find_by_subject(stack_st_X509*, X509_name_st*) @nogc nothrow;
    x509_st* X509_find_by_issuer_and_serial(stack_st_X509*, X509_name_st*, asn1_string_st*) @nogc nothrow;
    int X509_verify_cert(x509_store_ctx_st*) @nogc nothrow;
    int EVP_PKEY_add1_attr_by_txt(evp_pkey_st*, const(char)*, int, const(ubyte)*, int) @nogc nothrow;
    int EVP_PKEY_add1_attr_by_NID(evp_pkey_st*, int, int, const(ubyte)*, int) @nogc nothrow;
    int EVP_PKEY_add1_attr_by_OBJ(evp_pkey_st*, const(asn1_object_st)*, int, const(ubyte)*, int) @nogc nothrow;
    int EVP_PKEY_add1_attr(evp_pkey_st*, x509_attributes_st*) @nogc nothrow;
    x509_attributes_st* EVP_PKEY_delete_attr(evp_pkey_st*, int) @nogc nothrow;
    x509_attributes_st* EVP_PKEY_get_attr(const(evp_pkey_st)*, int) @nogc nothrow;
    int EVP_PKEY_get_attr_by_OBJ(const(evp_pkey_st)*, const(asn1_object_st)*, int) @nogc nothrow;
    int EVP_PKEY_get_attr_by_NID(const(evp_pkey_st)*, int, int) @nogc nothrow;
    int EVP_PKEY_get_attr_count(const(evp_pkey_st)*) @nogc nothrow;
    asn1_type_st* X509_ATTRIBUTE_get0_type(x509_attributes_st*, int) @nogc nothrow;
    asn1_object_st* X509_ATTRIBUTE_get0_object(x509_attributes_st*) @nogc nothrow;
    int X509_ATTRIBUTE_count(const(x509_attributes_st)*) @nogc nothrow;
    void* X509_ATTRIBUTE_get0_data(x509_attributes_st*, int, int, void*) @nogc nothrow;
    int X509_ATTRIBUTE_set1_data(x509_attributes_st*, int, const(void)*, int) @nogc nothrow;
    int X509_ATTRIBUTE_set1_object(x509_attributes_st*, const(asn1_object_st)*) @nogc nothrow;
    x509_attributes_st* X509_ATTRIBUTE_create_by_txt(x509_attributes_st**, const(char)*, int, const(ubyte)*, int) @nogc nothrow;
    x509_attributes_st* X509_ATTRIBUTE_create_by_OBJ(x509_attributes_st**, const(asn1_object_st)*, int, const(void)*, int) @nogc nothrow;
    x509_attributes_st* X509_ATTRIBUTE_create_by_NID(x509_attributes_st**, int, int, const(void)*, int) @nogc nothrow;
    void* X509at_get0_data_by_OBJ(const(stack_st_X509_ATTRIBUTE)*, const(asn1_object_st)*, int, int) @nogc nothrow;
    stack_st_X509_ATTRIBUTE* X509at_add1_attr_by_txt(stack_st_X509_ATTRIBUTE**, const(char)*, int, const(ubyte)*, int) @nogc nothrow;
    stack_st_X509_ATTRIBUTE* X509at_add1_attr_by_NID(stack_st_X509_ATTRIBUTE**, int, int, const(ubyte)*, int) @nogc nothrow;
    stack_st_X509_ATTRIBUTE* X509at_add1_attr_by_OBJ(stack_st_X509_ATTRIBUTE**, const(asn1_object_st)*, int, const(ubyte)*, int) @nogc nothrow;
    stack_st_X509_ATTRIBUTE* X509at_add1_attr(stack_st_X509_ATTRIBUTE**, x509_attributes_st*) @nogc nothrow;
    x509_attributes_st* X509at_delete_attr(stack_st_X509_ATTRIBUTE*, int) @nogc nothrow;
    x509_attributes_st* X509at_get_attr(const(stack_st_X509_ATTRIBUTE)*, int) @nogc nothrow;
    int X509at_get_attr_by_OBJ(const(stack_st_X509_ATTRIBUTE)*, const(asn1_object_st)*, int) @nogc nothrow;
    int X509at_get_attr_by_NID(const(stack_st_X509_ATTRIBUTE)*, int, int) @nogc nothrow;
    int X509at_get_attr_count(const(stack_st_X509_ATTRIBUTE)*) @nogc nothrow;
    int X509_EXTENSION_get_critical(const(X509_extension_st)*) @nogc nothrow;
    asn1_string_st* X509_EXTENSION_get_data(X509_extension_st*) @nogc nothrow;
    asn1_object_st* X509_EXTENSION_get_object(X509_extension_st*) @nogc nothrow;
    int X509_EXTENSION_set_data(X509_extension_st*, asn1_string_st*) @nogc nothrow;
    int X509_EXTENSION_set_critical(X509_extension_st*, int) @nogc nothrow;
    int X509_EXTENSION_set_object(X509_extension_st*, const(asn1_object_st)*) @nogc nothrow;
    X509_extension_st* X509_EXTENSION_create_by_OBJ(X509_extension_st**, const(asn1_object_st)*, int, asn1_string_st*) @nogc nothrow;
    X509_extension_st* X509_EXTENSION_create_by_NID(X509_extension_st**, int, int, asn1_string_st*) @nogc nothrow;
    int X509_REVOKED_add1_ext_i2d(x509_revoked_st*, int, void*, int, c_ulong) @nogc nothrow;
    void* X509_REVOKED_get_ext_d2i(const(x509_revoked_st)*, int, int*, int*) @nogc nothrow;
    int X509_REVOKED_add_ext(x509_revoked_st*, X509_extension_st*, int) @nogc nothrow;
    X509_extension_st* X509_REVOKED_delete_ext(x509_revoked_st*, int) @nogc nothrow;
    X509_extension_st* X509_REVOKED_get_ext(const(x509_revoked_st)*, int) @nogc nothrow;
    int X509_REVOKED_get_ext_by_critical(const(x509_revoked_st)*, int, int) @nogc nothrow;
    int X509_REVOKED_get_ext_by_OBJ(const(x509_revoked_st)*, const(asn1_object_st)*, int) @nogc nothrow;
    int X509_REVOKED_get_ext_by_NID(const(x509_revoked_st)*, int, int) @nogc nothrow;
    int X509_REVOKED_get_ext_count(const(x509_revoked_st)*) @nogc nothrow;
    int X509_CRL_add1_ext_i2d(X509_crl_st*, int, void*, int, c_ulong) @nogc nothrow;
    void* X509_CRL_get_ext_d2i(const(X509_crl_st)*, int, int*, int*) @nogc nothrow;
    int X509_CRL_add_ext(X509_crl_st*, X509_extension_st*, int) @nogc nothrow;
    X509_extension_st* X509_CRL_delete_ext(X509_crl_st*, int) @nogc nothrow;
    X509_extension_st* X509_CRL_get_ext(const(X509_crl_st)*, int) @nogc nothrow;
    int X509_CRL_get_ext_by_critical(const(X509_crl_st)*, int, int) @nogc nothrow;
    int X509_CRL_get_ext_by_OBJ(const(X509_crl_st)*, const(asn1_object_st)*, int) @nogc nothrow;
    int X509_CRL_get_ext_by_NID(const(X509_crl_st)*, int, int) @nogc nothrow;
    int X509_CRL_get_ext_count(const(X509_crl_st)*) @nogc nothrow;
    int X509_add1_ext_i2d(x509_st*, int, void*, int, c_ulong) @nogc nothrow;
    void* X509_get_ext_d2i(const(x509_st)*, int, int*, int*) @nogc nothrow;
    int X509_add_ext(x509_st*, X509_extension_st*, int) @nogc nothrow;
    X509_extension_st* X509_delete_ext(x509_st*, int) @nogc nothrow;
    X509_extension_st* X509_get_ext(const(x509_st)*, int) @nogc nothrow;
    int X509_get_ext_by_critical(const(x509_st)*, int, int) @nogc nothrow;
    int X509_get_ext_by_OBJ(const(x509_st)*, const(asn1_object_st)*, int) @nogc nothrow;
    int X509_get_ext_by_NID(const(x509_st)*, int, int) @nogc nothrow;
    int X509_get_ext_count(const(x509_st)*) @nogc nothrow;
    stack_st_X509_EXTENSION* X509v3_add_ext(stack_st_X509_EXTENSION**, X509_extension_st*, int) @nogc nothrow;
    X509_extension_st* X509v3_delete_ext(stack_st_X509_EXTENSION*, int) @nogc nothrow;
    X509_extension_st* X509v3_get_ext(const(stack_st_X509_EXTENSION)*, int) @nogc nothrow;
    int X509v3_get_ext_by_critical(const(stack_st_X509_EXTENSION)*, int, int) @nogc nothrow;
    int X509v3_get_ext_by_OBJ(const(stack_st_X509_EXTENSION)*, const(asn1_object_st)*, int) @nogc nothrow;
    int X509v3_get_ext_by_NID(const(stack_st_X509_EXTENSION)*, int, int) @nogc nothrow;
    int X509v3_get_ext_count(const(stack_st_X509_EXTENSION)*) @nogc nothrow;
    int X509_NAME_get0_der(X509_name_st*, const(ubyte)**, c_ulong*) @nogc nothrow;
    int X509_NAME_ENTRY_set(const(X509_name_entry_st)*) @nogc nothrow;
    asn1_string_st* X509_NAME_ENTRY_get_data(const(X509_name_entry_st)*) @nogc nothrow;
    asn1_object_st* X509_NAME_ENTRY_get_object(const(X509_name_entry_st)*) @nogc nothrow;
    int X509_NAME_ENTRY_set_data(X509_name_entry_st*, int, const(ubyte)*, int) @nogc nothrow;
    int X509_NAME_ENTRY_set_object(X509_name_entry_st*, const(asn1_object_st)*) @nogc nothrow;
    X509_name_entry_st* X509_NAME_ENTRY_create_by_OBJ(X509_name_entry_st**, const(asn1_object_st)*, int, const(ubyte)*, int) @nogc nothrow;
    int X509_NAME_add_entry_by_txt(X509_name_st*, const(char)*, int, const(ubyte)*, int, int, int) @nogc nothrow;
    X509_name_entry_st* X509_NAME_ENTRY_create_by_NID(X509_name_entry_st**, int, int, const(ubyte)*, int) @nogc nothrow;
    X509_name_entry_st* X509_NAME_ENTRY_create_by_txt(X509_name_entry_st**, const(char)*, int, const(ubyte)*, int) @nogc nothrow;
    int X509_NAME_add_entry_by_NID(X509_name_st*, int, int, const(ubyte)*, int, int, int) @nogc nothrow;
    int X509_NAME_add_entry_by_OBJ(X509_name_st*, const(asn1_object_st)*, int, const(ubyte)*, int, int, int) @nogc nothrow;
    int X509_NAME_add_entry(X509_name_st*, const(X509_name_entry_st)*, int, int) @nogc nothrow;
    X509_name_entry_st* X509_NAME_delete_entry(X509_name_st*, int) @nogc nothrow;
    X509_name_entry_st* X509_NAME_get_entry(const(X509_name_st)*, int) @nogc nothrow;
    int X509_NAME_get_index_by_OBJ(X509_name_st*, const(asn1_object_st)*, int) @nogc nothrow;
    int X509_NAME_get_index_by_NID(X509_name_st*, int, int) @nogc nothrow;
    int X509_NAME_get_text_by_OBJ(X509_name_st*, const(asn1_object_st)*, char*, int) @nogc nothrow;
    int X509_NAME_get_text_by_NID(X509_name_st*, int, char*, int) @nogc nothrow;
    int X509_NAME_entry_count(const(X509_name_st)*) @nogc nothrow;
    int X509_REQ_print(bio_st*, X509_req_st*) @nogc nothrow;
    int X509_REQ_print_ex(bio_st*, X509_req_st*, c_ulong, c_ulong) @nogc nothrow;
    int X509_CRL_print(bio_st*, X509_crl_st*) @nogc nothrow;
    int X509_CRL_print_ex(bio_st*, X509_crl_st*, c_ulong) @nogc nothrow;
    int X509_ocspid_print(bio_st*, x509_st*) @nogc nothrow;
    int X509_print(bio_st*, x509_st*) @nogc nothrow;
    int X509_print_ex(bio_st*, x509_st*, c_ulong, c_ulong) @nogc nothrow;
    int X509_NAME_print_ex(bio_st*, const(X509_name_st)*, int, c_ulong) @nogc nothrow;
    int X509_NAME_print(bio_st*, const(X509_name_st)*, int) @nogc nothrow;
    int X509_NAME_print_ex_fp(_IO_FILE*, const(X509_name_st)*, int, c_ulong) @nogc nothrow;
    int X509_REQ_print_fp(_IO_FILE*, X509_req_st*) @nogc nothrow;
    int X509_CRL_print_fp(_IO_FILE*, X509_crl_st*) @nogc nothrow;
    int X509_print_fp(_IO_FILE*, x509_st*) @nogc nothrow;
    int X509_print_ex_fp(_IO_FILE*, x509_st*, c_ulong, c_ulong) @nogc nothrow;
    int X509_aux_print(bio_st*, x509_st*, int) @nogc nothrow;
    int X509_CRL_match(const(X509_crl_st)*, const(X509_crl_st)*) @nogc nothrow;
    int X509_CRL_cmp(const(X509_crl_st)*, const(X509_crl_st)*) @nogc nothrow;
    c_ulong X509_NAME_hash_old(X509_name_st*) @nogc nothrow;
    c_ulong X509_NAME_hash(X509_name_st*) @nogc nothrow;
    int X509_NAME_cmp(const(X509_name_st)*, const(X509_name_st)*) @nogc nothrow;
    int X509_cmp(const(x509_st)*, const(x509_st)*) @nogc nothrow;
    c_ulong X509_subject_name_hash_old(x509_st*) @nogc nothrow;
    c_ulong X509_issuer_name_hash_old(x509_st*) @nogc nothrow;
    c_ulong X509_subject_name_hash(x509_st*) @nogc nothrow;
    int X509_subject_name_cmp(const(x509_st)*, const(x509_st)*) @nogc nothrow;
    c_ulong X509_issuer_name_hash(x509_st*) @nogc nothrow;
    int X509_issuer_name_cmp(const(x509_st)*, const(x509_st)*) @nogc nothrow;
    c_ulong X509_issuer_and_serial_hash(x509_st*) @nogc nothrow;
    int X509_issuer_and_serial_cmp(const(x509_st)*, const(x509_st)*) @nogc nothrow;
    stack_st_X509* X509_chain_up_ref(stack_st_X509*) @nogc nothrow;
    int X509_CRL_check_suiteb(X509_crl_st*, evp_pkey_st*, c_ulong) @nogc nothrow;
    int X509_chain_check_suiteb(int*, x509_st*, stack_st_X509*, c_ulong) @nogc nothrow;
    int X509_check_private_key(const(x509_st)*, const(evp_pkey_st)*) @nogc nothrow;
    int X509_REQ_check_private_key(X509_req_st*, evp_pkey_st*) @nogc nothrow;
    X509_crl_st* X509_CRL_diff(X509_crl_st*, X509_crl_st*, evp_pkey_st*, const(evp_md_st)*, uint) @nogc nothrow;
    const(stack_st_X509_EXTENSION)* X509_REVOKED_get0_extensions(const(x509_revoked_st)*) @nogc nothrow;
    int X509_REVOKED_set_revocationDate(x509_revoked_st*, asn1_string_st*) @nogc nothrow;
    const(asn1_string_st)* X509_REVOKED_get0_revocationDate(const(x509_revoked_st)*) @nogc nothrow;
    int X509_REVOKED_set_serialNumber(x509_revoked_st*, asn1_string_st*) @nogc nothrow;
    const(asn1_string_st)* X509_REVOKED_get0_serialNumber(const(x509_revoked_st)*) @nogc nothrow;
    int i2d_re_X509_CRL_tbs(X509_crl_st*, ubyte**) @nogc nothrow;
    int X509_CRL_get_signature_nid(const(X509_crl_st)*) @nogc nothrow;
    void X509_CRL_get0_signature(const(X509_crl_st)*, const(asn1_string_st)**, const(X509_algor_st)**) @nogc nothrow;
    stack_st_X509_REVOKED* X509_CRL_get_REVOKED(X509_crl_st*) @nogc nothrow;
    const(stack_st_X509_EXTENSION)* X509_CRL_get0_extensions(const(X509_crl_st)*) @nogc nothrow;
    X509_name_st* X509_CRL_get_issuer(const(X509_crl_st)*) @nogc nothrow;
    asn1_string_st* X509_CRL_get_nextUpdate(X509_crl_st*) @nogc nothrow;
    asn1_string_st* X509_CRL_get_lastUpdate(X509_crl_st*) @nogc nothrow;
    const(asn1_string_st)* X509_CRL_get0_nextUpdate(const(X509_crl_st)*) @nogc nothrow;
    const(asn1_string_st)* X509_CRL_get0_lastUpdate(const(X509_crl_st)*) @nogc nothrow;
    c_long X509_CRL_get_version(const(X509_crl_st)*) @nogc nothrow;
    int X509_CRL_up_ref(X509_crl_st*) @nogc nothrow;
    int X509_CRL_sort(X509_crl_st*) @nogc nothrow;
    int X509_CRL_set1_nextUpdate(X509_crl_st*, const(asn1_string_st)*) @nogc nothrow;
    int X509_CRL_set1_lastUpdate(X509_crl_st*, const(asn1_string_st)*) @nogc nothrow;
    int X509_CRL_set_issuer_name(X509_crl_st*, X509_name_st*) @nogc nothrow;
    int X509_CRL_set_version(X509_crl_st*, c_long) @nogc nothrow;
    int X509_REQ_add1_attr_by_txt(X509_req_st*, const(char)*, int, const(ubyte)*, int) @nogc nothrow;
    int X509_REQ_add1_attr_by_NID(X509_req_st*, int, int, const(ubyte)*, int) @nogc nothrow;
    int X509_REQ_add1_attr_by_OBJ(X509_req_st*, const(asn1_object_st)*, int, const(ubyte)*, int) @nogc nothrow;
    int X509_REQ_add1_attr(X509_req_st*, x509_attributes_st*) @nogc nothrow;
    x509_attributes_st* X509_REQ_delete_attr(X509_req_st*, int) @nogc nothrow;
    x509_attributes_st* X509_REQ_get_attr(const(X509_req_st)*, int) @nogc nothrow;
    int X509_REQ_get_attr_by_OBJ(const(X509_req_st)*, const(asn1_object_st)*, int) @nogc nothrow;
    int X509_REQ_get_attr_by_NID(const(X509_req_st)*, int, int) @nogc nothrow;
    int X509_REQ_get_attr_count(const(X509_req_st)*) @nogc nothrow;
    int X509_REQ_add_extensions(X509_req_st*, stack_st_X509_EXTENSION*) @nogc nothrow;
    int X509_REQ_add_extensions_nid(X509_req_st*, stack_st_X509_EXTENSION*, int) @nogc nothrow;
    stack_st_X509_EXTENSION* X509_REQ_get_extensions(X509_req_st*) @nogc nothrow;
    void X509_REQ_set_extension_nids(int*) @nogc nothrow;
    int* X509_REQ_get_extension_nids() @nogc nothrow;
    int X509_REQ_extension_nid(int) @nogc nothrow;
    X509_pubkey_st* X509_REQ_get_X509_PUBKEY(X509_req_st*) @nogc nothrow;
    evp_pkey_st* X509_REQ_get0_pubkey(X509_req_st*) @nogc nothrow;
    evp_pkey_st* X509_REQ_get_pubkey(X509_req_st*) @nogc nothrow;
    int X509_REQ_set_pubkey(X509_req_st*, evp_pkey_st*) @nogc nothrow;
    int i2d_re_X509_REQ_tbs(X509_req_st*, ubyte**) @nogc nothrow;
    int X509_REQ_get_signature_nid(const(X509_req_st)*) @nogc nothrow;
    int X509_REQ_set1_signature_algo(X509_req_st*, X509_algor_st*) @nogc nothrow;
    void X509_REQ_set0_signature(X509_req_st*, asn1_string_st*) @nogc nothrow;
    void X509_REQ_get0_signature(const(X509_req_st)*, const(asn1_string_st)**, const(X509_algor_st)**) @nogc nothrow;
    int X509_REQ_set_subject_name(X509_req_st*, X509_name_st*) @nogc nothrow;
    X509_name_st* X509_REQ_get_subject_name(const(X509_req_st)*) @nogc nothrow;
    int X509_REQ_set_version(X509_req_st*, c_long) @nogc nothrow;
    c_long X509_REQ_get_version(const(X509_req_st)*) @nogc nothrow;
    int X509_certificate_type(const(x509_st)*, const(evp_pkey_st)*) @nogc nothrow;
    asn1_string_st* X509_get0_pubkey_bitstr(const(x509_st)*) @nogc nothrow;
    evp_pkey_st* X509_get_pubkey(x509_st*) @nogc nothrow;
    evp_pkey_st* X509_get0_pubkey(const(x509_st)*) @nogc nothrow;
    const(X509_algor_st)* X509_get0_tbs_sigalg(const(x509_st)*) @nogc nothrow;
    void X509_get0_uids(const(x509_st)*, const(asn1_string_st)**, const(asn1_string_st)**) @nogc nothrow;
    const(stack_st_X509_EXTENSION)* X509_get0_extensions(const(x509_st)*) @nogc nothrow;
    X509_pubkey_st* X509_get_X509_PUBKEY(const(x509_st)*) @nogc nothrow;
    int X509_get_signature_type(const(x509_st)*) @nogc nothrow;
    int X509_up_ref(x509_st*) @nogc nothrow;
    int X509_set_pubkey(x509_st*, evp_pkey_st*) @nogc nothrow;
    int X509_set1_notAfter(x509_st*, const(asn1_string_st)*) @nogc nothrow;
    asn1_string_st* X509_getm_notAfter(const(x509_st)*) @nogc nothrow;
    const(asn1_string_st)* X509_get0_notAfter(const(x509_st)*) @nogc nothrow;
    int X509_set1_notBefore(x509_st*, const(asn1_string_st)*) @nogc nothrow;
    asn1_string_st* X509_getm_notBefore(const(x509_st)*) @nogc nothrow;
    const(asn1_string_st)* X509_get0_notBefore(const(x509_st)*) @nogc nothrow;
    X509_name_st* X509_get_subject_name(const(x509_st)*) @nogc nothrow;
    int X509_set_subject_name(x509_st*, X509_name_st*) @nogc nothrow;
    X509_name_st* X509_get_issuer_name(const(x509_st)*) @nogc nothrow;
    int X509_set_issuer_name(x509_st*, X509_name_st*) @nogc nothrow;
    const(asn1_string_st)* X509_get0_serialNumber(const(x509_st)*) @nogc nothrow;
    asn1_string_st* X509_get_serialNumber(x509_st*) @nogc nothrow;
    int X509_set_serialNumber(x509_st*, asn1_string_st*) @nogc nothrow;
    int X509_set_version(x509_st*, c_long) @nogc nothrow;
    c_long X509_get_version(const(x509_st)*) @nogc nothrow;
    int ASN1_item_sign_ctx(const(ASN1_ITEM_st)*, X509_algor_st*, X509_algor_st*, asn1_string_st*, void*, evp_md_ctx_st*) @nogc nothrow;
    int ASN1_item_sign(const(ASN1_ITEM_st)*, X509_algor_st*, X509_algor_st*, asn1_string_st*, void*, evp_pkey_st*, const(evp_md_st)*) @nogc nothrow;
    int ASN1_item_verify(const(ASN1_ITEM_st)*, X509_algor_st*, asn1_string_st*, void*, evp_pkey_st*) @nogc nothrow;
    int ASN1_item_digest(const(ASN1_ITEM_st)*, const(evp_md_st)*, void*, ubyte*, uint*) @nogc nothrow;
    int ASN1_sign(int function(void*, ubyte**), X509_algor_st*, X509_algor_st*, asn1_string_st*, char*, evp_pkey_st*, const(evp_md_st)*) @nogc nothrow;
    int ASN1_digest(int function(void*, ubyte**), const(evp_md_st)*, char*, ubyte*, uint*) @nogc nothrow;
    int ASN1_verify(int function(void*, ubyte**), X509_algor_st*, asn1_string_st*, char*, evp_pkey_st*) @nogc nothrow;
    char* X509_NAME_oneline(const(X509_name_st)*, char*, int) @nogc nothrow;
    void X509_INFO_free(X509_info_st*) @nogc nothrow;
    X509_info_st* X509_INFO_new() @nogc nothrow;
    Netscape_certificate_sequence* d2i_NETSCAPE_CERT_SEQUENCE(Netscape_certificate_sequence**, const(ubyte)**, c_long) @nogc nothrow;
    Netscape_certificate_sequence* NETSCAPE_CERT_SEQUENCE_new() @nogc nothrow;
    extern __gshared const(ASN1_ITEM_st) NETSCAPE_CERT_SEQUENCE_it;
    int i2d_NETSCAPE_CERT_SEQUENCE(Netscape_certificate_sequence*, ubyte**) @nogc nothrow;
    void NETSCAPE_CERT_SEQUENCE_free(Netscape_certificate_sequence*) @nogc nothrow;
    Netscape_spkac_st* d2i_NETSCAPE_SPKAC(Netscape_spkac_st**, const(ubyte)**, c_long) @nogc nothrow;
    Netscape_spkac_st* NETSCAPE_SPKAC_new() @nogc nothrow;
    extern __gshared const(ASN1_ITEM_st) NETSCAPE_SPKAC_it;
    int i2d_NETSCAPE_SPKAC(Netscape_spkac_st*, ubyte**) @nogc nothrow;
    void NETSCAPE_SPKAC_free(Netscape_spkac_st*) @nogc nothrow;
    Netscape_spki_st* d2i_NETSCAPE_SPKI(Netscape_spki_st**, const(ubyte)**, c_long) @nogc nothrow;
    Netscape_spki_st* NETSCAPE_SPKI_new() @nogc nothrow;
    extern __gshared const(ASN1_ITEM_st) NETSCAPE_SPKI_it;
    int i2d_NETSCAPE_SPKI(Netscape_spki_st*, ubyte**) @nogc nothrow;
    void NETSCAPE_SPKI_free(Netscape_spki_st*) @nogc nothrow;
    void X509_PKEY_free(private_key_st*) @nogc nothrow;
    private_key_st* X509_PKEY_new() @nogc nothrow;
    int X509_CRL_get0_by_cert(X509_crl_st*, x509_revoked_st**, x509_st*) @nogc nothrow;
    int X509_CRL_get0_by_serial(X509_crl_st*, x509_revoked_st**, asn1_string_st*) @nogc nothrow;
    int X509_CRL_add0_revoked(X509_crl_st*, x509_revoked_st*) @nogc nothrow;
    X509_crl_st* d2i_X509_CRL(X509_crl_st**, const(ubyte)**, c_long) @nogc nothrow;
    X509_crl_st* X509_CRL_new() @nogc nothrow;
    extern __gshared const(ASN1_ITEM_st) X509_CRL_it;
    int i2d_X509_CRL(X509_crl_st*, ubyte**) @nogc nothrow;
    void X509_CRL_free(X509_crl_st*) @nogc nothrow;
    X509_crl_info_st* X509_CRL_INFO_new() @nogc nothrow;
    X509_crl_info_st* d2i_X509_CRL_INFO(X509_crl_info_st**, const(ubyte)**, c_long) @nogc nothrow;
    void X509_CRL_INFO_free(X509_crl_info_st*) @nogc nothrow;
    int i2d_X509_CRL_INFO(X509_crl_info_st*, ubyte**) @nogc nothrow;
    extern __gshared const(ASN1_ITEM_st) X509_CRL_INFO_it;
    x509_revoked_st* d2i_X509_REVOKED(x509_revoked_st**, const(ubyte)**, c_long) @nogc nothrow;
    x509_revoked_st* X509_REVOKED_new() @nogc nothrow;
    void X509_REVOKED_free(x509_revoked_st*) @nogc nothrow;
    extern __gshared const(ASN1_ITEM_st) X509_REVOKED_it;
    int i2d_X509_REVOKED(x509_revoked_st*, ubyte**) @nogc nothrow;
    stack_st_ASN1_OBJECT* X509_get0_reject_objects(x509_st*) @nogc nothrow;
    stack_st_ASN1_OBJECT* X509_get0_trust_objects(x509_st*) @nogc nothrow;
    void X509_reject_clear(x509_st*) @nogc nothrow;
    void X509_trust_clear(x509_st*) @nogc nothrow;
    int X509_add1_reject_object(x509_st*, const(asn1_object_st)*) @nogc nothrow;
    int X509_add1_trust_object(x509_st*, const(asn1_object_st)*) @nogc nothrow;
    int X509_TRUST_set(int*, int) @nogc nothrow;
    int function(int, x509_st*, int) X509_TRUST_set_default(int function(int, x509_st*, int)) @nogc nothrow;
    ubyte* X509_keyid_get0(x509_st*, int*) @nogc nothrow;
    ubyte* X509_alias_get0(x509_st*, int*) @nogc nothrow;
    int X509_keyid_set1(x509_st*, const(ubyte)*, int) @nogc nothrow;
    int X509_alias_set1(x509_st*, const(ubyte)*, int) @nogc nothrow;
    int X509_trusted(const(x509_st)*) @nogc nothrow;
    int X509_get_signature_nid(const(x509_st)*) @nogc nothrow;
    void X509_get0_signature(const(asn1_string_st)**, const(X509_algor_st)**, const(x509_st)*) @nogc nothrow;
    int X509_get_signature_info(x509_st*, int*, int*, int*, uint*) @nogc nothrow;
    void X509_SIG_INFO_set(x509_sig_info_st*, int, int, int, uint) @nogc nothrow;
    int X509_SIG_INFO_get(const(x509_sig_info_st)*, int*, int*, int*, uint*) @nogc nothrow;
    int i2d_re_X509_tbs(x509_st*, ubyte**) @nogc nothrow;
    x509_st* d2i_X509_AUX(x509_st**, const(ubyte)**, c_long) @nogc nothrow;
    int i2d_X509_AUX(x509_st*, ubyte**) @nogc nothrow;
    void* X509_get_ex_data(x509_st*, int) @nogc nothrow;
    int X509_set_ex_data(x509_st*, int, void*) @nogc nothrow;
    x509_cert_aux_st* d2i_X509_CERT_AUX(x509_cert_aux_st**, const(ubyte)**, c_long) @nogc nothrow;
    x509_cert_aux_st* X509_CERT_AUX_new() @nogc nothrow;
    extern __gshared const(ASN1_ITEM_st) X509_CERT_AUX_it;
    int i2d_X509_CERT_AUX(x509_cert_aux_st*, ubyte**) @nogc nothrow;
    void X509_CERT_AUX_free(x509_cert_aux_st*) @nogc nothrow;
    x509_st* X509_new() @nogc nothrow;
    x509_st* d2i_X509(x509_st**, const(ubyte)**, c_long) @nogc nothrow;
    void X509_free(x509_st*) @nogc nothrow;
    extern __gshared const(ASN1_ITEM_st) X509_it;
    int i2d_X509(x509_st*, ubyte**) @nogc nothrow;
    x509_cinf_st* X509_CINF_new() @nogc nothrow;
    x509_cinf_st* d2i_X509_CINF(x509_cinf_st**, const(ubyte)**, c_long) @nogc nothrow;
    void X509_CINF_free(x509_cinf_st*) @nogc nothrow;
    int i2d_X509_CINF(x509_cinf_st*, ubyte**) @nogc nothrow;
    extern __gshared const(ASN1_ITEM_st) X509_CINF_it;
    int X509_NAME_set(X509_name_st**, X509_name_st*) @nogc nothrow;
    X509_name_st* d2i_X509_NAME(X509_name_st**, const(ubyte)**, c_long) @nogc nothrow;
    X509_name_st* X509_NAME_new() @nogc nothrow;
    void X509_NAME_free(X509_name_st*) @nogc nothrow;
    int i2d_X509_NAME(X509_name_st*, ubyte**) @nogc nothrow;
    extern __gshared const(ASN1_ITEM_st) X509_NAME_it;
    X509_name_entry_st* d2i_X509_NAME_ENTRY(X509_name_entry_st**, const(ubyte)**, c_long) @nogc nothrow;
    X509_name_entry_st* X509_NAME_ENTRY_new() @nogc nothrow;
    extern __gshared const(ASN1_ITEM_st) X509_NAME_ENTRY_it;
    int i2d_X509_NAME_ENTRY(X509_name_entry_st*, ubyte**) @nogc nothrow;
    void X509_NAME_ENTRY_free(X509_name_entry_st*) @nogc nothrow;
    stack_st_X509_EXTENSION* d2i_X509_EXTENSIONS(stack_st_X509_EXTENSION**, const(ubyte)**, c_long) @nogc nothrow;
    extern __gshared const(ASN1_ITEM_st) X509_EXTENSIONS_it;
    int i2d_X509_EXTENSIONS(stack_st_X509_EXTENSION*, ubyte**) @nogc nothrow;
    X509_extension_st* d2i_X509_EXTENSION(X509_extension_st**, const(ubyte)**, c_long) @nogc nothrow;
    X509_extension_st* X509_EXTENSION_new() @nogc nothrow;
    extern __gshared const(ASN1_ITEM_st) X509_EXTENSION_it;
    int i2d_X509_EXTENSION(X509_extension_st*, ubyte**) @nogc nothrow;
    void X509_EXTENSION_free(X509_extension_st*) @nogc nothrow;
    x509_attributes_st* X509_ATTRIBUTE_create(int, int, void*) @nogc nothrow;
    x509_attributes_st* X509_ATTRIBUTE_new() @nogc nothrow;
    x509_attributes_st* d2i_X509_ATTRIBUTE(x509_attributes_st**, const(ubyte)**, c_long) @nogc nothrow;
    int i2d_X509_ATTRIBUTE(x509_attributes_st*, ubyte**) @nogc nothrow;
    extern __gshared const(ASN1_ITEM_st) X509_ATTRIBUTE_it;
    void X509_ATTRIBUTE_free(x509_attributes_st*) @nogc nothrow;
    X509_req_st* X509_REQ_new() @nogc nothrow;
    X509_req_st* d2i_X509_REQ(X509_req_st**, const(ubyte)**, c_long) @nogc nothrow;
    void X509_REQ_free(X509_req_st*) @nogc nothrow;
    extern __gshared const(ASN1_ITEM_st) X509_REQ_it;
    int i2d_X509_REQ(X509_req_st*, ubyte**) @nogc nothrow;
    X509_req_info_st* X509_REQ_INFO_new() @nogc nothrow;
    X509_req_info_st* d2i_X509_REQ_INFO(X509_req_info_st**, const(ubyte)**, c_long) @nogc nothrow;
    void X509_REQ_INFO_free(X509_req_info_st*) @nogc nothrow;
    int i2d_X509_REQ_INFO(X509_req_info_st*, ubyte**) @nogc nothrow;
    extern __gshared const(ASN1_ITEM_st) X509_REQ_INFO_it;
    void X509_SIG_getm(X509_sig_st*, X509_algor_st**, asn1_string_st**) @nogc nothrow;
    void X509_SIG_get0(const(X509_sig_st)*, const(X509_algor_st)**, const(asn1_string_st)**) @nogc nothrow;
    X509_sig_st* X509_SIG_new() @nogc nothrow;
    X509_sig_st* d2i_X509_SIG(X509_sig_st**, const(ubyte)**, c_long) @nogc nothrow;
    void X509_SIG_free(X509_sig_st*) @nogc nothrow;
    int i2d_X509_SIG(X509_sig_st*, ubyte**) @nogc nothrow;
    extern __gshared const(ASN1_ITEM_st) X509_SIG_it;
    ec_key_st* d2i_EC_PUBKEY(ec_key_st**, const(ubyte)**, c_long) @nogc nothrow;
    int i2d_EC_PUBKEY(ec_key_st*, ubyte**) @nogc nothrow;
    dsa_st* d2i_DSA_PUBKEY(dsa_st**, const(ubyte)**, c_long) @nogc nothrow;
    int i2d_DSA_PUBKEY(dsa_st*, ubyte**) @nogc nothrow;
    rsa_st* d2i_RSA_PUBKEY(rsa_st**, const(ubyte)**, c_long) @nogc nothrow;
    int i2d_RSA_PUBKEY(rsa_st*, ubyte**) @nogc nothrow;
    evp_pkey_st* d2i_PUBKEY(evp_pkey_st**, const(ubyte)**, c_long) @nogc nothrow;
    int i2d_PUBKEY(evp_pkey_st*, ubyte**) @nogc nothrow;
    c_long X509_get_pathlen(x509_st*) @nogc nothrow;
    int X509_get_pubkey_parameters(evp_pkey_st*, stack_st_X509*) @nogc nothrow;
    evp_pkey_st* X509_PUBKEY_get(X509_pubkey_st*) @nogc nothrow;
    evp_pkey_st* X509_PUBKEY_get0(X509_pubkey_st*) @nogc nothrow;
    int X509_PUBKEY_set(X509_pubkey_st**, evp_pkey_st*) @nogc nothrow;
    X509_pubkey_st* X509_PUBKEY_new() @nogc nothrow;
    X509_pubkey_st* d2i_X509_PUBKEY(X509_pubkey_st**, const(ubyte)**, c_long) @nogc nothrow;
    void X509_PUBKEY_free(X509_pubkey_st*) @nogc nothrow;
    int i2d_X509_PUBKEY(X509_pubkey_st*, ubyte**) @nogc nothrow;
    extern __gshared const(ASN1_ITEM_st) X509_PUBKEY_it;
    X509_val_st* X509_VAL_new() @nogc nothrow;
    X509_val_st* d2i_X509_VAL(X509_val_st**, const(ubyte)**, c_long) @nogc nothrow;
    void X509_VAL_free(X509_val_st*) @nogc nothrow;
    int i2d_X509_VAL(X509_val_st*, ubyte**) @nogc nothrow;
    extern __gshared const(ASN1_ITEM_st) X509_VAL_it;
    stack_st_X509_ALGOR* d2i_X509_ALGORS(stack_st_X509_ALGOR**, const(ubyte)**, c_long) @nogc nothrow;
    extern __gshared const(ASN1_ITEM_st) X509_ALGORS_it;
    int i2d_X509_ALGORS(stack_st_X509_ALGOR*, ubyte**) @nogc nothrow;
    X509_algor_st* X509_ALGOR_new() @nogc nothrow;
    X509_algor_st* d2i_X509_ALGOR(X509_algor_st**, const(ubyte)**, c_long) @nogc nothrow;
    void X509_ALGOR_free(X509_algor_st*) @nogc nothrow;
    extern __gshared const(ASN1_ITEM_st) X509_ALGOR_it;
    int i2d_X509_ALGOR(X509_algor_st*, ubyte**) @nogc nothrow;
    x509_st* X509_REQ_to_X509(X509_req_st*, int, evp_pkey_st*) @nogc nothrow;
    X509_req_st* X509_to_X509_REQ(x509_st*, evp_pkey_st*, const(evp_md_st)*) @nogc nothrow;
    const(char)* X509_get_default_private_dir() @nogc nothrow;
    const(char)* X509_get_default_cert_file_env() @nogc nothrow;
    const(char)* X509_get_default_cert_dir_env() @nogc nothrow;
    const(char)* X509_get_default_cert_file() @nogc nothrow;
    const(char)* X509_get_default_cert_dir() @nogc nothrow;
    const(char)* X509_get_default_cert_area() @nogc nothrow;
    asn1_string_st* X509_gmtime_adj(asn1_string_st*, c_long) @nogc nothrow;
    asn1_string_st* X509_time_adj_ex(asn1_string_st*, int, c_long, c_long*) @nogc nothrow;
    asn1_string_st* X509_time_adj(asn1_string_st*, c_long, c_long*) @nogc nothrow;
    int X509_cmp_current_time(const(asn1_string_st)*) @nogc nothrow;
    int X509_cmp_time(const(asn1_string_st)*, c_long*) @nogc nothrow;
    X509_name_entry_st* X509_NAME_ENTRY_dup(X509_name_entry_st*) @nogc nothrow;
    X509_name_st* X509_NAME_dup(X509_name_st*) @nogc nothrow;
    int X509_ALGOR_copy(X509_algor_st*, const(X509_algor_st)*) @nogc nothrow;
    int X509_ALGOR_cmp(const(X509_algor_st)*, const(X509_algor_st)*) @nogc nothrow;
    void X509_ALGOR_set_md(X509_algor_st*, const(evp_md_st)*) @nogc nothrow;
    void X509_ALGOR_get0(const(asn1_object_st)**, int*, const(void)**, const(X509_algor_st)*) @nogc nothrow;
    int X509_ALGOR_set0(X509_algor_st*, asn1_object_st*, int, void*) @nogc nothrow;
    X509_algor_st* X509_ALGOR_dup(X509_algor_st*) @nogc nothrow;
    X509_req_st* X509_REQ_dup(X509_req_st*) @nogc nothrow;
    x509_revoked_st* X509_REVOKED_dup(x509_revoked_st*) @nogc nothrow;
    X509_crl_st* X509_CRL_dup(X509_crl_st*) @nogc nothrow;
    X509_extension_st* X509_EXTENSION_dup(X509_extension_st*) @nogc nothrow;
    x509_attributes_st* X509_ATTRIBUTE_dup(x509_attributes_st*) @nogc nothrow;
    x509_st* X509_dup(x509_st*) @nogc nothrow;
    evp_pkey_st* d2i_PUBKEY_bio(bio_st*, evp_pkey_st**) @nogc nothrow;
    int i2d_PUBKEY_bio(bio_st*, evp_pkey_st*) @nogc nothrow;
    evp_pkey_st* d2i_PrivateKey_bio(bio_st*, evp_pkey_st**) @nogc nothrow;
    int i2d_PrivateKey_bio(bio_st*, evp_pkey_st*) @nogc nothrow;
    int i2d_PKCS8PrivateKeyInfo_bio(bio_st*, evp_pkey_st*) @nogc nothrow;
    int i2d_PKCS8_PRIV_KEY_INFO_bio(bio_st*, pkcs8_priv_key_info_st*) @nogc nothrow;
    pkcs8_priv_key_info_st* d2i_PKCS8_PRIV_KEY_INFO_bio(bio_st*, pkcs8_priv_key_info_st**) @nogc nothrow;
    int i2d_PKCS8_bio(bio_st*, X509_sig_st*) @nogc nothrow;
    X509_sig_st* d2i_PKCS8_bio(bio_st*, X509_sig_st**) @nogc nothrow;
    int i2d_ECPrivateKey_bio(bio_st*, ec_key_st*) @nogc nothrow;
    ec_key_st* d2i_ECPrivateKey_bio(bio_st*, ec_key_st**) @nogc nothrow;
    int i2d_EC_PUBKEY_bio(bio_st*, ec_key_st*) @nogc nothrow;
    ec_key_st* d2i_EC_PUBKEY_bio(bio_st*, ec_key_st**) @nogc nothrow;
    int i2d_DSAPrivateKey_bio(bio_st*, dsa_st*) @nogc nothrow;
    dsa_st* d2i_DSAPrivateKey_bio(bio_st*, dsa_st**) @nogc nothrow;
    int i2d_DSA_PUBKEY_bio(bio_st*, dsa_st*) @nogc nothrow;
    dsa_st* d2i_DSA_PUBKEY_bio(bio_st*, dsa_st**) @nogc nothrow;
    int i2d_RSA_PUBKEY_bio(bio_st*, rsa_st*) @nogc nothrow;
    rsa_st* d2i_RSA_PUBKEY_bio(bio_st*, rsa_st**) @nogc nothrow;
    int i2d_RSAPublicKey_bio(bio_st*, rsa_st*) @nogc nothrow;
    rsa_st* d2i_RSAPublicKey_bio(bio_st*, rsa_st**) @nogc nothrow;
    int i2d_RSAPrivateKey_bio(bio_st*, rsa_st*) @nogc nothrow;
    rsa_st* d2i_RSAPrivateKey_bio(bio_st*, rsa_st**) @nogc nothrow;
    int i2d_X509_REQ_bio(bio_st*, X509_req_st*) @nogc nothrow;
    X509_req_st* d2i_X509_REQ_bio(bio_st*, X509_req_st**) @nogc nothrow;
    int i2d_X509_CRL_bio(bio_st*, X509_crl_st*) @nogc nothrow;
    X509_crl_st* d2i_X509_CRL_bio(bio_st*, X509_crl_st**) @nogc nothrow;
    int i2d_X509_bio(bio_st*, x509_st*) @nogc nothrow;
    x509_st* d2i_X509_bio(bio_st*, x509_st**) @nogc nothrow;
    evp_pkey_st* d2i_PUBKEY_fp(_IO_FILE*, evp_pkey_st**) @nogc nothrow;
    int i2d_PUBKEY_fp(_IO_FILE*, evp_pkey_st*) @nogc nothrow;
    evp_pkey_st* d2i_PrivateKey_fp(_IO_FILE*, evp_pkey_st**) @nogc nothrow;
    int i2d_PrivateKey_fp(_IO_FILE*, evp_pkey_st*) @nogc nothrow;
    int i2d_PKCS8PrivateKeyInfo_fp(_IO_FILE*, evp_pkey_st*) @nogc nothrow;
    int i2d_PKCS8_PRIV_KEY_INFO_fp(_IO_FILE*, pkcs8_priv_key_info_st*) @nogc nothrow;
    pkcs8_priv_key_info_st* d2i_PKCS8_PRIV_KEY_INFO_fp(_IO_FILE*, pkcs8_priv_key_info_st**) @nogc nothrow;
    int i2d_PKCS8_fp(_IO_FILE*, X509_sig_st*) @nogc nothrow;
    X509_sig_st* d2i_PKCS8_fp(_IO_FILE*, X509_sig_st**) @nogc nothrow;
    int i2d_ECPrivateKey_fp(_IO_FILE*, ec_key_st*) @nogc nothrow;
    ec_key_st* d2i_ECPrivateKey_fp(_IO_FILE*, ec_key_st**) @nogc nothrow;
    int i2d_EC_PUBKEY_fp(_IO_FILE*, ec_key_st*) @nogc nothrow;
    ec_key_st* d2i_EC_PUBKEY_fp(_IO_FILE*, ec_key_st**) @nogc nothrow;
    int i2d_DSAPrivateKey_fp(_IO_FILE*, dsa_st*) @nogc nothrow;
    dsa_st* d2i_DSAPrivateKey_fp(_IO_FILE*, dsa_st**) @nogc nothrow;
    int i2d_DSA_PUBKEY_fp(_IO_FILE*, dsa_st*) @nogc nothrow;
    dsa_st* d2i_DSA_PUBKEY_fp(_IO_FILE*, dsa_st**) @nogc nothrow;
    int i2d_RSA_PUBKEY_fp(_IO_FILE*, rsa_st*) @nogc nothrow;
    rsa_st* d2i_RSA_PUBKEY_fp(_IO_FILE*, rsa_st**) @nogc nothrow;
    int i2d_RSAPublicKey_fp(_IO_FILE*, rsa_st*) @nogc nothrow;
    rsa_st* d2i_RSAPublicKey_fp(_IO_FILE*, rsa_st**) @nogc nothrow;
    int i2d_RSAPrivateKey_fp(_IO_FILE*, rsa_st*) @nogc nothrow;
    rsa_st* d2i_RSAPrivateKey_fp(_IO_FILE*, rsa_st**) @nogc nothrow;
    int i2d_X509_REQ_fp(_IO_FILE*, X509_req_st*) @nogc nothrow;
    X509_req_st* d2i_X509_REQ_fp(_IO_FILE*, X509_req_st**) @nogc nothrow;
    int i2d_X509_CRL_fp(_IO_FILE*, X509_crl_st*) @nogc nothrow;
    X509_crl_st* d2i_X509_CRL_fp(_IO_FILE*, X509_crl_st**) @nogc nothrow;
    int i2d_X509_fp(_IO_FILE*, x509_st*) @nogc nothrow;
    x509_st* d2i_X509_fp(_IO_FILE*, x509_st**) @nogc nothrow;
    int X509_NAME_digest(const(X509_name_st)*, const(evp_md_st)*, ubyte*, uint*) @nogc nothrow;
    int X509_REQ_digest(const(X509_req_st)*, const(evp_md_st)*, ubyte*, uint*) @nogc nothrow;
    int X509_CRL_digest(const(X509_crl_st)*, const(evp_md_st)*, ubyte*, uint*) @nogc nothrow;
    int X509_digest(const(x509_st)*, const(evp_md_st)*, ubyte*, uint*) @nogc nothrow;
    int X509_pubkey_digest(const(x509_st)*, const(evp_md_st)*, ubyte*, uint*) @nogc nothrow;
    int NETSCAPE_SPKI_sign(Netscape_spki_st*, evp_pkey_st*, const(evp_md_st)*) @nogc nothrow;
    int X509_CRL_http_nbio(ocsp_req_ctx_st*, X509_crl_st**) @nogc nothrow;
    int X509_CRL_sign_ctx(X509_crl_st*, evp_md_ctx_st*) @nogc nothrow;
    int X509_CRL_sign(X509_crl_st*, evp_pkey_st*, const(evp_md_st)*) @nogc nothrow;
    int X509_REQ_sign_ctx(X509_req_st*, evp_md_ctx_st*) @nogc nothrow;
    int X509_REQ_sign(X509_req_st*, evp_pkey_st*, const(evp_md_st)*) @nogc nothrow;
    int X509_http_nbio(ocsp_req_ctx_st*, x509_st**) @nogc nothrow;
    int X509_sign_ctx(x509_st*, evp_md_ctx_st*) @nogc nothrow;
    int X509_sign(x509_st*, evp_pkey_st*, const(evp_md_st)*) @nogc nothrow;
    int X509_signature_print(bio_st*, const(X509_algor_st)*, const(asn1_string_st)*) @nogc nothrow;
    int X509_signature_dump(bio_st*, const(asn1_string_st)*, int) @nogc nothrow;
    int NETSCAPE_SPKI_print(bio_st*, Netscape_spki_st*) @nogc nothrow;
    int NETSCAPE_SPKI_set_pubkey(Netscape_spki_st*, evp_pkey_st*) @nogc nothrow;
    evp_pkey_st* NETSCAPE_SPKI_get_pubkey(Netscape_spki_st*) @nogc nothrow;
    char* NETSCAPE_SPKI_b64_encode(Netscape_spki_st*) @nogc nothrow;
    Netscape_spki_st* NETSCAPE_SPKI_b64_decode(const(char)*, int) @nogc nothrow;
    int NETSCAPE_SPKI_verify(Netscape_spki_st*, evp_pkey_st*) @nogc nothrow;
    int X509_CRL_verify(X509_crl_st*, evp_pkey_st*) @nogc nothrow;
    int X509_REQ_verify(X509_req_st*, evp_pkey_st*) @nogc nothrow;
    int X509_verify(x509_st*, evp_pkey_st*) @nogc nothrow;
    const(char)* X509_verify_cert_error_string(c_long) @nogc nothrow;
    void* X509_CRL_get_meth_data(X509_crl_st*) @nogc nothrow;
    void X509_CRL_set_meth_data(X509_crl_st*, void*) @nogc nothrow;
    void X509_CRL_METHOD_free(x509_crl_method_st*) @nogc nothrow;
    x509_crl_method_st* X509_CRL_METHOD_new(int function(X509_crl_st*), int function(X509_crl_st*), int function(X509_crl_st*, x509_revoked_st**, asn1_string_st*, X509_name_st*), int function(X509_crl_st*, evp_pkey_st*)) @nogc nothrow;
    void X509_CRL_set_default_method(const(x509_crl_method_st)*) @nogc nothrow;
    struct SCRYPT_PARAMS_st
    {
        asn1_string_st* salt;
        asn1_string_st* costParameter;
        asn1_string_st* blockSize;
        asn1_string_st* parallelizationParameter;
        asn1_string_st* keyLength;
    }
    alias SCRYPT_PARAMS = SCRYPT_PARAMS_st;
    struct PBKDF2PARAM_st
    {
        asn1_type_st* salt;
        asn1_string_st* iter;
        asn1_string_st* keylength;
        X509_algor_st* prf;
    }
    alias PBKDF2PARAM = PBKDF2PARAM_st;
    struct PBE2PARAM_st
    {
        X509_algor_st* keyfunc;
        X509_algor_st* encryption;
    }
    alias PBE2PARAM = PBE2PARAM_st;
    struct PBEPARAM_st
    {
        asn1_string_st* salt;
        asn1_string_st* iter;
    }
    alias PBEPARAM = PBEPARAM_st;
    struct Netscape_certificate_sequence
    {
        asn1_object_st* type;
        stack_st_X509* certs;
    }
    alias NETSCAPE_CERT_SEQUENCE = Netscape_certificate_sequence;
    struct Netscape_spki_st
    {
        Netscape_spkac_st* spkac;
        X509_algor_st sig_algor;
        asn1_string_st* signature;
    }
    alias NETSCAPE_SPKI = Netscape_spki_st;
    struct Netscape_spkac_st
    {
        X509_pubkey_st* pubkey;
        asn1_string_st* challenge;
    }
    alias NETSCAPE_SPKAC = Netscape_spkac_st;
    static stack_st_X509_INFO* sk_X509_INFO_new_reserve(int function(const(const(X509_info_st)*)*, const(const(X509_info_st)*)*), int) @nogc nothrow;
    struct stack_st_X509_INFO;
    alias sk_X509_INFO_compfunc = int function(const(const(X509_info_st)*)*, const(const(X509_info_st)*)*);
    alias sk_X509_INFO_freefunc = void function(X509_info_st*);
    alias sk_X509_INFO_copyfunc = X509_info_st* function(const(X509_info_st)*);
    static int sk_X509_INFO_num(const(stack_st_X509_INFO)*) @nogc nothrow;
    static X509_info_st* sk_X509_INFO_value(const(stack_st_X509_INFO)*, int) @nogc nothrow;
    static stack_st_X509_INFO* sk_X509_INFO_new(int function(const(const(X509_info_st)*)*, const(const(X509_info_st)*)*)) @nogc nothrow;
    static stack_st_X509_INFO* sk_X509_INFO_new_null() @nogc nothrow;
    static X509_info_st* sk_X509_INFO_shift(stack_st_X509_INFO*) @nogc nothrow;
    static int sk_X509_INFO_reserve(stack_st_X509_INFO*, int) @nogc nothrow;
    static void sk_X509_INFO_free(stack_st_X509_INFO*) @nogc nothrow;
    static void sk_X509_INFO_zero(stack_st_X509_INFO*) @nogc nothrow;
    static X509_info_st* sk_X509_INFO_delete(stack_st_X509_INFO*, int) @nogc nothrow;
    static X509_info_st* sk_X509_INFO_delete_ptr(stack_st_X509_INFO*, X509_info_st*) @nogc nothrow;
    static int sk_X509_INFO_push(stack_st_X509_INFO*, X509_info_st*) @nogc nothrow;
    static int sk_X509_INFO_unshift(stack_st_X509_INFO*, X509_info_st*) @nogc nothrow;
    static X509_info_st* sk_X509_INFO_pop(stack_st_X509_INFO*) @nogc nothrow;
    static void sk_X509_INFO_sort(stack_st_X509_INFO*) @nogc nothrow;
    static void sk_X509_INFO_pop_free(stack_st_X509_INFO*, void function(X509_info_st*)) @nogc nothrow;
    static int sk_X509_INFO_insert(stack_st_X509_INFO*, X509_info_st*, int) @nogc nothrow;
    static X509_info_st* sk_X509_INFO_set(stack_st_X509_INFO*, int, X509_info_st*) @nogc nothrow;
    static int sk_X509_INFO_find(stack_st_X509_INFO*, X509_info_st*) @nogc nothrow;
    static int sk_X509_INFO_find_ex(stack_st_X509_INFO*, X509_info_st*) @nogc nothrow;
    static int function(const(const(X509_info_st)*)*, const(const(X509_info_st)*)*) sk_X509_INFO_set_cmp_func(stack_st_X509_INFO*, int function(const(const(X509_info_st)*)*, const(const(X509_info_st)*)*)) @nogc nothrow;
    static stack_st_X509_INFO* sk_X509_INFO_dup(const(stack_st_X509_INFO)*) @nogc nothrow;
    static stack_st_X509_INFO* sk_X509_INFO_deep_copy(const(stack_st_X509_INFO)*, X509_info_st* function(const(X509_info_st)*), void function(X509_info_st*)) @nogc nothrow;
    static int sk_X509_INFO_is_sorted(const(stack_st_X509_INFO)*) @nogc nothrow;
    struct X509_info_st
    {
        x509_st* x509;
        X509_crl_st* crl;
        private_key_st* x_pkey;
        evp_cipher_info_st enc_cipher;
        int enc_len;
        char* enc_data;
    }
    alias X509_INFO = X509_info_st;
    struct private_key_st
    {
        int version_;
        X509_algor_st* enc_algor;
        asn1_string_st* enc_pkey;
        evp_pkey_st* dec_pkey;
        int key_length;
        char* key_data;
        int key_free;
        evp_cipher_info_st cipher;
    }
    alias X509_PKEY = private_key_st;
    static int sk_X509_CRL_find(stack_st_X509_CRL*, X509_crl_st*) @nogc nothrow;
    static stack_st_X509_CRL* sk_X509_CRL_new_reserve(int function(const(const(X509_crl_st)*)*, const(const(X509_crl_st)*)*), int) @nogc nothrow;
    static stack_st_X509_CRL* sk_X509_CRL_new_null() @nogc nothrow;
    static stack_st_X509_CRL* sk_X509_CRL_new(int function(const(const(X509_crl_st)*)*, const(const(X509_crl_st)*)*)) @nogc nothrow;
    static X509_crl_st* sk_X509_CRL_value(const(stack_st_X509_CRL)*, int) @nogc nothrow;
    static int sk_X509_CRL_num(const(stack_st_X509_CRL)*) @nogc nothrow;
    alias sk_X509_CRL_copyfunc = X509_crl_st* function(const(X509_crl_st)*);
    alias sk_X509_CRL_freefunc = void function(X509_crl_st*);
    alias sk_X509_CRL_compfunc = int function(const(const(X509_crl_st)*)*, const(const(X509_crl_st)*)*);
    struct stack_st_X509_CRL;
    static void sk_X509_CRL_free(stack_st_X509_CRL*) @nogc nothrow;
    static void sk_X509_CRL_zero(stack_st_X509_CRL*) @nogc nothrow;
    static X509_crl_st* sk_X509_CRL_delete(stack_st_X509_CRL*, int) @nogc nothrow;
    static X509_crl_st* sk_X509_CRL_delete_ptr(stack_st_X509_CRL*, X509_crl_st*) @nogc nothrow;
    static int sk_X509_CRL_push(stack_st_X509_CRL*, X509_crl_st*) @nogc nothrow;
    static int sk_X509_CRL_reserve(stack_st_X509_CRL*, int) @nogc nothrow;
    static X509_crl_st* sk_X509_CRL_pop(stack_st_X509_CRL*) @nogc nothrow;
    static X509_crl_st* sk_X509_CRL_shift(stack_st_X509_CRL*) @nogc nothrow;
    static void sk_X509_CRL_pop_free(stack_st_X509_CRL*, void function(X509_crl_st*)) @nogc nothrow;
    static int sk_X509_CRL_insert(stack_st_X509_CRL*, X509_crl_st*, int) @nogc nothrow;
    static X509_crl_st* sk_X509_CRL_set(stack_st_X509_CRL*, int, X509_crl_st*) @nogc nothrow;
    static int sk_X509_CRL_unshift(stack_st_X509_CRL*, X509_crl_st*) @nogc nothrow;
    static void sk_X509_CRL_sort(stack_st_X509_CRL*) @nogc nothrow;
    static stack_st_X509_CRL* sk_X509_CRL_dup(const(stack_st_X509_CRL)*) @nogc nothrow;
    static int sk_X509_CRL_is_sorted(const(stack_st_X509_CRL)*) @nogc nothrow;
    static stack_st_X509_CRL* sk_X509_CRL_deep_copy(const(stack_st_X509_CRL)*, X509_crl_st* function(const(X509_crl_st)*), void function(X509_crl_st*)) @nogc nothrow;
    static int function(const(const(X509_crl_st)*)*, const(const(X509_crl_st)*)*) sk_X509_CRL_set_cmp_func(stack_st_X509_CRL*, int function(const(const(X509_crl_st)*)*, const(const(X509_crl_st)*)*)) @nogc nothrow;
    static int sk_X509_CRL_find_ex(stack_st_X509_CRL*, X509_crl_st*) @nogc nothrow;
    struct X509_crl_info_st;
    alias X509_CRL_INFO = X509_crl_info_st;
    static x509_revoked_st* sk_X509_REVOKED_set(stack_st_X509_REVOKED*, int, x509_revoked_st*) @nogc nothrow;
    struct stack_st_X509_REVOKED;
    alias sk_X509_REVOKED_compfunc = int function(const(const(x509_revoked_st)*)*, const(const(x509_revoked_st)*)*);
    alias sk_X509_REVOKED_freefunc = void function(x509_revoked_st*);
    alias sk_X509_REVOKED_copyfunc = x509_revoked_st* function(const(x509_revoked_st)*);
    static int sk_X509_REVOKED_num(const(stack_st_X509_REVOKED)*) @nogc nothrow;
    static x509_revoked_st* sk_X509_REVOKED_value(const(stack_st_X509_REVOKED)*, int) @nogc nothrow;
    static stack_st_X509_REVOKED* sk_X509_REVOKED_new(int function(const(const(x509_revoked_st)*)*, const(const(x509_revoked_st)*)*)) @nogc nothrow;
    static stack_st_X509_REVOKED* sk_X509_REVOKED_new_null() @nogc nothrow;
    static stack_st_X509_REVOKED* sk_X509_REVOKED_new_reserve(int function(const(const(x509_revoked_st)*)*, const(const(x509_revoked_st)*)*), int) @nogc nothrow;
    static int function(const(const(x509_revoked_st)*)*, const(const(x509_revoked_st)*)*) sk_X509_REVOKED_set_cmp_func(stack_st_X509_REVOKED*, int function(const(const(x509_revoked_st)*)*, const(const(x509_revoked_st)*)*)) @nogc nothrow;
    static stack_st_X509_REVOKED* sk_X509_REVOKED_deep_copy(const(stack_st_X509_REVOKED)*, x509_revoked_st* function(const(x509_revoked_st)*), void function(x509_revoked_st*)) @nogc nothrow;
    static stack_st_X509_REVOKED* sk_X509_REVOKED_dup(const(stack_st_X509_REVOKED)*) @nogc nothrow;
    static int sk_X509_REVOKED_is_sorted(const(stack_st_X509_REVOKED)*) @nogc nothrow;
    static void sk_X509_REVOKED_sort(stack_st_X509_REVOKED*) @nogc nothrow;
    static int sk_X509_REVOKED_find_ex(stack_st_X509_REVOKED*, x509_revoked_st*) @nogc nothrow;
    static int sk_X509_REVOKED_find(stack_st_X509_REVOKED*, x509_revoked_st*) @nogc nothrow;
    static x509_revoked_st* sk_X509_REVOKED_pop(stack_st_X509_REVOKED*) @nogc nothrow;
    static int sk_X509_REVOKED_insert(stack_st_X509_REVOKED*, x509_revoked_st*, int) @nogc nothrow;
    static void sk_X509_REVOKED_pop_free(stack_st_X509_REVOKED*, void function(x509_revoked_st*)) @nogc nothrow;
    static x509_revoked_st* sk_X509_REVOKED_shift(stack_st_X509_REVOKED*) @nogc nothrow;
    static int sk_X509_REVOKED_reserve(stack_st_X509_REVOKED*, int) @nogc nothrow;
    static void sk_X509_REVOKED_free(stack_st_X509_REVOKED*) @nogc nothrow;
    static void sk_X509_REVOKED_zero(stack_st_X509_REVOKED*) @nogc nothrow;
    static x509_revoked_st* sk_X509_REVOKED_delete(stack_st_X509_REVOKED*, int) @nogc nothrow;
    static x509_revoked_st* sk_X509_REVOKED_delete_ptr(stack_st_X509_REVOKED*, x509_revoked_st*) @nogc nothrow;
    static int sk_X509_REVOKED_push(stack_st_X509_REVOKED*, x509_revoked_st*) @nogc nothrow;
    static int sk_X509_REVOKED_unshift(stack_st_X509_REVOKED*, x509_revoked_st*) @nogc nothrow;
    alias sk_X509_TRUST_copyfunc = x509_trust_st* function(const(x509_trust_st)*);
    alias sk_X509_TRUST_freefunc = void function(x509_trust_st*);
    alias sk_X509_TRUST_compfunc = int function(const(const(x509_trust_st)*)*, const(const(x509_trust_st)*)*);
    struct stack_st_X509_TRUST;
    static int sk_X509_TRUST_num(const(stack_st_X509_TRUST)*) @nogc nothrow;
    static int function(const(const(x509_trust_st)*)*, const(const(x509_trust_st)*)*) sk_X509_TRUST_set_cmp_func(stack_st_X509_TRUST*, int function(const(const(x509_trust_st)*)*, const(const(x509_trust_st)*)*)) @nogc nothrow;
    static stack_st_X509_TRUST* sk_X509_TRUST_deep_copy(const(stack_st_X509_TRUST)*, x509_trust_st* function(const(x509_trust_st)*), void function(x509_trust_st*)) @nogc nothrow;
    static stack_st_X509_TRUST* sk_X509_TRUST_dup(const(stack_st_X509_TRUST)*) @nogc nothrow;
    static int sk_X509_TRUST_is_sorted(const(stack_st_X509_TRUST)*) @nogc nothrow;
    static void sk_X509_TRUST_sort(stack_st_X509_TRUST*) @nogc nothrow;
    static int sk_X509_TRUST_find_ex(stack_st_X509_TRUST*, x509_trust_st*) @nogc nothrow;
    static int sk_X509_TRUST_find(stack_st_X509_TRUST*, x509_trust_st*) @nogc nothrow;
    static x509_trust_st* sk_X509_TRUST_set(stack_st_X509_TRUST*, int, x509_trust_st*) @nogc nothrow;
    static int sk_X509_TRUST_insert(stack_st_X509_TRUST*, x509_trust_st*, int) @nogc nothrow;
    static void sk_X509_TRUST_pop_free(stack_st_X509_TRUST*, void function(x509_trust_st*)) @nogc nothrow;
    static x509_trust_st* sk_X509_TRUST_shift(stack_st_X509_TRUST*) @nogc nothrow;
    static x509_trust_st* sk_X509_TRUST_pop(stack_st_X509_TRUST*) @nogc nothrow;
    static int sk_X509_TRUST_unshift(stack_st_X509_TRUST*, x509_trust_st*) @nogc nothrow;
    static int sk_X509_TRUST_push(stack_st_X509_TRUST*, x509_trust_st*) @nogc nothrow;
    static x509_trust_st* sk_X509_TRUST_delete_ptr(stack_st_X509_TRUST*, x509_trust_st*) @nogc nothrow;
    static x509_trust_st* sk_X509_TRUST_delete(stack_st_X509_TRUST*, int) @nogc nothrow;
    static void sk_X509_TRUST_zero(stack_st_X509_TRUST*) @nogc nothrow;
    static void sk_X509_TRUST_free(stack_st_X509_TRUST*) @nogc nothrow;
    static int sk_X509_TRUST_reserve(stack_st_X509_TRUST*, int) @nogc nothrow;
    static stack_st_X509_TRUST* sk_X509_TRUST_new_reserve(int function(const(const(x509_trust_st)*)*, const(const(x509_trust_st)*)*), int) @nogc nothrow;
    static stack_st_X509_TRUST* sk_X509_TRUST_new_null() @nogc nothrow;
    static stack_st_X509_TRUST* sk_X509_TRUST_new(int function(const(const(x509_trust_st)*)*, const(const(x509_trust_st)*)*)) @nogc nothrow;
    static x509_trust_st* sk_X509_TRUST_value(const(stack_st_X509_TRUST)*, int) @nogc nothrow;
    struct x509_trust_st
    {
        int trust;
        int flags;
        int function(x509_trust_st*, x509_st*, int) check_trust;
        char* name;
        int arg1;
        void* arg2;
    }
    alias X509_TRUST = x509_trust_st;
    alias sk_X509_compfunc = int function(const(const(x509_st)*)*, const(const(x509_st)*)*);
    alias sk_X509_freefunc = void function(x509_st*);
    alias sk_X509_copyfunc = x509_st* function(const(x509_st)*);
    static int sk_X509_num(const(stack_st_X509)*) @nogc nothrow;
    static x509_st* sk_X509_value(const(stack_st_X509)*, int) @nogc nothrow;
    static stack_st_X509* sk_X509_new(int function(const(const(x509_st)*)*, const(const(x509_st)*)*)) @nogc nothrow;
    static stack_st_X509* sk_X509_new_null() @nogc nothrow;
    static stack_st_X509* sk_X509_new_reserve(int function(const(const(x509_st)*)*, const(const(x509_st)*)*), int) @nogc nothrow;
    static int sk_X509_reserve(stack_st_X509*, int) @nogc nothrow;
    static void sk_X509_free(stack_st_X509*) @nogc nothrow;
    static void sk_X509_zero(stack_st_X509*) @nogc nothrow;
    static x509_st* sk_X509_delete(stack_st_X509*, int) @nogc nothrow;
    static x509_st* sk_X509_delete_ptr(stack_st_X509*, x509_st*) @nogc nothrow;
    static int sk_X509_push(stack_st_X509*, x509_st*) @nogc nothrow;
    static int sk_X509_unshift(stack_st_X509*, x509_st*) @nogc nothrow;
    static x509_st* sk_X509_pop(stack_st_X509*) @nogc nothrow;
    static x509_st* sk_X509_shift(stack_st_X509*) @nogc nothrow;
    static void sk_X509_pop_free(stack_st_X509*, void function(x509_st*)) @nogc nothrow;
    static int sk_X509_insert(stack_st_X509*, x509_st*, int) @nogc nothrow;
    static x509_st* sk_X509_set(stack_st_X509*, int, x509_st*) @nogc nothrow;
    static int sk_X509_find(stack_st_X509*, x509_st*) @nogc nothrow;
    static int sk_X509_find_ex(stack_st_X509*, x509_st*) @nogc nothrow;
    static void sk_X509_sort(stack_st_X509*) @nogc nothrow;
    static int sk_X509_is_sorted(const(stack_st_X509)*) @nogc nothrow;
    static stack_st_X509* sk_X509_dup(const(stack_st_X509)*) @nogc nothrow;
    static stack_st_X509* sk_X509_deep_copy(const(stack_st_X509)*, x509_st* function(const(x509_st)*), void function(x509_st*)) @nogc nothrow;
    static int function(const(const(x509_st)*)*, const(const(x509_st)*)*) sk_X509_set_cmp_func(stack_st_X509*, int function(const(const(x509_st)*)*, const(const(x509_st)*)*)) @nogc nothrow;
    struct x509_cinf_st;
    alias X509_CINF = x509_cinf_st;
    struct x509_cert_aux_st;
    alias X509_CERT_AUX = x509_cert_aux_st;
    struct X509_req_st;
    alias X509_REQ = X509_req_st;
    struct X509_req_info_st;
    alias X509_REQ_INFO = X509_req_info_st;
    alias sk_X509_ATTRIBUTE_compfunc = int function(const(const(x509_attributes_st)*)*, const(const(x509_attributes_st)*)*);
    struct stack_st_X509_ATTRIBUTE;
    alias sk_X509_ATTRIBUTE_freefunc = void function(x509_attributes_st*);
    alias sk_X509_ATTRIBUTE_copyfunc = x509_attributes_st* function(const(x509_attributes_st)*);
    static int sk_X509_ATTRIBUTE_num(const(stack_st_X509_ATTRIBUTE)*) @nogc nothrow;
    static x509_attributes_st* sk_X509_ATTRIBUTE_value(const(stack_st_X509_ATTRIBUTE)*, int) @nogc nothrow;
    static stack_st_X509_ATTRIBUTE* sk_X509_ATTRIBUTE_new(int function(const(const(x509_attributes_st)*)*, const(const(x509_attributes_st)*)*)) @nogc nothrow;
    static stack_st_X509_ATTRIBUTE* sk_X509_ATTRIBUTE_new_null() @nogc nothrow;
    static stack_st_X509_ATTRIBUTE* sk_X509_ATTRIBUTE_new_reserve(int function(const(const(x509_attributes_st)*)*, const(const(x509_attributes_st)*)*), int) @nogc nothrow;
    static int sk_X509_ATTRIBUTE_reserve(stack_st_X509_ATTRIBUTE*, int) @nogc nothrow;
    static void sk_X509_ATTRIBUTE_free(stack_st_X509_ATTRIBUTE*) @nogc nothrow;
    static void sk_X509_ATTRIBUTE_zero(stack_st_X509_ATTRIBUTE*) @nogc nothrow;
    static x509_attributes_st* sk_X509_ATTRIBUTE_delete(stack_st_X509_ATTRIBUTE*, int) @nogc nothrow;
    static x509_attributes_st* sk_X509_ATTRIBUTE_delete_ptr(stack_st_X509_ATTRIBUTE*, x509_attributes_st*) @nogc nothrow;
    static int sk_X509_ATTRIBUTE_push(stack_st_X509_ATTRIBUTE*, x509_attributes_st*) @nogc nothrow;
    static int sk_X509_ATTRIBUTE_unshift(stack_st_X509_ATTRIBUTE*, x509_attributes_st*) @nogc nothrow;
    static x509_attributes_st* sk_X509_ATTRIBUTE_pop(stack_st_X509_ATTRIBUTE*) @nogc nothrow;
    static x509_attributes_st* sk_X509_ATTRIBUTE_shift(stack_st_X509_ATTRIBUTE*) @nogc nothrow;
    static void sk_X509_ATTRIBUTE_pop_free(stack_st_X509_ATTRIBUTE*, void function(x509_attributes_st*)) @nogc nothrow;
    static int sk_X509_ATTRIBUTE_insert(stack_st_X509_ATTRIBUTE*, x509_attributes_st*, int) @nogc nothrow;
    static x509_attributes_st* sk_X509_ATTRIBUTE_set(stack_st_X509_ATTRIBUTE*, int, x509_attributes_st*) @nogc nothrow;
    static int sk_X509_ATTRIBUTE_find(stack_st_X509_ATTRIBUTE*, x509_attributes_st*) @nogc nothrow;
    static int sk_X509_ATTRIBUTE_find_ex(stack_st_X509_ATTRIBUTE*, x509_attributes_st*) @nogc nothrow;
    static void sk_X509_ATTRIBUTE_sort(stack_st_X509_ATTRIBUTE*) @nogc nothrow;
    static int sk_X509_ATTRIBUTE_is_sorted(const(stack_st_X509_ATTRIBUTE)*) @nogc nothrow;
    static stack_st_X509_ATTRIBUTE* sk_X509_ATTRIBUTE_dup(const(stack_st_X509_ATTRIBUTE)*) @nogc nothrow;
    static stack_st_X509_ATTRIBUTE* sk_X509_ATTRIBUTE_deep_copy(const(stack_st_X509_ATTRIBUTE)*, x509_attributes_st* function(const(x509_attributes_st)*), void function(x509_attributes_st*)) @nogc nothrow;
    static int function(const(const(x509_attributes_st)*)*, const(const(x509_attributes_st)*)*) sk_X509_ATTRIBUTE_set_cmp_func(stack_st_X509_ATTRIBUTE*, int function(const(const(x509_attributes_st)*)*, const(const(x509_attributes_st)*)*)) @nogc nothrow;
    struct x509_attributes_st;
    alias X509_ATTRIBUTE = x509_attributes_st;
    static stack_st_X509_EXTENSION* sk_X509_EXTENSION_new_null() @nogc nothrow;
    static stack_st_X509_EXTENSION* sk_X509_EXTENSION_new_reserve(int function(const(const(X509_extension_st)*)*, const(const(X509_extension_st)*)*), int) @nogc nothrow;
    static stack_st_X509_EXTENSION* sk_X509_EXTENSION_new(int function(const(const(X509_extension_st)*)*, const(const(X509_extension_st)*)*)) @nogc nothrow;
    static X509_extension_st* sk_X509_EXTENSION_value(const(stack_st_X509_EXTENSION)*, int) @nogc nothrow;
    static int sk_X509_EXTENSION_reserve(stack_st_X509_EXTENSION*, int) @nogc nothrow;
    static void sk_X509_EXTENSION_free(stack_st_X509_EXTENSION*) @nogc nothrow;
    static void sk_X509_EXTENSION_zero(stack_st_X509_EXTENSION*) @nogc nothrow;
    static int sk_X509_EXTENSION_num(const(stack_st_X509_EXTENSION)*) @nogc nothrow;
    alias sk_X509_EXTENSION_copyfunc = X509_extension_st* function(const(X509_extension_st)*);
    alias sk_X509_EXTENSION_freefunc = void function(X509_extension_st*);
    alias sk_X509_EXTENSION_compfunc = int function(const(const(X509_extension_st)*)*, const(const(X509_extension_st)*)*);
    static stack_st_X509_EXTENSION* sk_X509_EXTENSION_deep_copy(const(stack_st_X509_EXTENSION)*, X509_extension_st* function(const(X509_extension_st)*), void function(X509_extension_st*)) @nogc nothrow;
    static X509_extension_st* sk_X509_EXTENSION_delete_ptr(stack_st_X509_EXTENSION*, X509_extension_st*) @nogc nothrow;
    static int sk_X509_EXTENSION_unshift(stack_st_X509_EXTENSION*, X509_extension_st*) @nogc nothrow;
    static int sk_X509_EXTENSION_push(stack_st_X509_EXTENSION*, X509_extension_st*) @nogc nothrow;
    static X509_extension_st* sk_X509_EXTENSION_pop(stack_st_X509_EXTENSION*) @nogc nothrow;
    static X509_extension_st* sk_X509_EXTENSION_shift(stack_st_X509_EXTENSION*) @nogc nothrow;
    static void sk_X509_EXTENSION_pop_free(stack_st_X509_EXTENSION*, void function(X509_extension_st*)) @nogc nothrow;
    static int sk_X509_EXTENSION_insert(stack_st_X509_EXTENSION*, X509_extension_st*, int) @nogc nothrow;
    static X509_extension_st* sk_X509_EXTENSION_set(stack_st_X509_EXTENSION*, int, X509_extension_st*) @nogc nothrow;
    static int sk_X509_EXTENSION_find(stack_st_X509_EXTENSION*, X509_extension_st*) @nogc nothrow;
    static int sk_X509_EXTENSION_find_ex(stack_st_X509_EXTENSION*, X509_extension_st*) @nogc nothrow;
    static void sk_X509_EXTENSION_sort(stack_st_X509_EXTENSION*) @nogc nothrow;
    static int function(const(const(X509_extension_st)*)*, const(const(X509_extension_st)*)*) sk_X509_EXTENSION_set_cmp_func(stack_st_X509_EXTENSION*, int function(const(const(X509_extension_st)*)*, const(const(X509_extension_st)*)*)) @nogc nothrow;
    static stack_st_X509_EXTENSION* sk_X509_EXTENSION_dup(const(stack_st_X509_EXTENSION)*) @nogc nothrow;
    static int sk_X509_EXTENSION_is_sorted(const(stack_st_X509_EXTENSION)*) @nogc nothrow;
    static X509_extension_st* sk_X509_EXTENSION_delete(stack_st_X509_EXTENSION*, int) @nogc nothrow;
    struct stack_st_X509_EXTENSION;
    alias X509_EXTENSIONS = stack_st_X509_EXTENSION;
    struct X509_extension_st;
    alias X509_EXTENSION = X509_extension_st;
    static int sk_X509_NAME_num(const(stack_st_X509_NAME)*) @nogc nothrow;
    static stack_st_X509_NAME* sk_X509_NAME_new_reserve(int function(const(const(X509_name_st)*)*, const(const(X509_name_st)*)*), int) @nogc nothrow;
    static stack_st_X509_NAME* sk_X509_NAME_new_null() @nogc nothrow;
    static stack_st_X509_NAME* sk_X509_NAME_new(int function(const(const(X509_name_st)*)*, const(const(X509_name_st)*)*)) @nogc nothrow;
    static X509_name_st* sk_X509_NAME_value(const(stack_st_X509_NAME)*, int) @nogc nothrow;
    alias sk_X509_NAME_copyfunc = X509_name_st* function(const(X509_name_st)*);
    alias sk_X509_NAME_freefunc = void function(X509_name_st*);
    alias sk_X509_NAME_compfunc = int function(const(const(X509_name_st)*)*, const(const(X509_name_st)*)*);
    struct stack_st_X509_NAME;
    static int sk_X509_NAME_reserve(stack_st_X509_NAME*, int) @nogc nothrow;
    static stack_st_X509_NAME* sk_X509_NAME_deep_copy(const(stack_st_X509_NAME)*, X509_name_st* function(const(X509_name_st)*), void function(X509_name_st*)) @nogc nothrow;
    static void sk_X509_NAME_zero(stack_st_X509_NAME*) @nogc nothrow;
    static X509_name_st* sk_X509_NAME_delete_ptr(stack_st_X509_NAME*, X509_name_st*) @nogc nothrow;
    static X509_name_st* sk_X509_NAME_delete(stack_st_X509_NAME*, int) @nogc nothrow;
    static int sk_X509_NAME_push(stack_st_X509_NAME*, X509_name_st*) @nogc nothrow;
    static int sk_X509_NAME_unshift(stack_st_X509_NAME*, X509_name_st*) @nogc nothrow;
    static X509_name_st* sk_X509_NAME_pop(stack_st_X509_NAME*) @nogc nothrow;
    static X509_name_st* sk_X509_NAME_shift(stack_st_X509_NAME*) @nogc nothrow;
    static void sk_X509_NAME_pop_free(stack_st_X509_NAME*, void function(X509_name_st*)) @nogc nothrow;
    static int function(const(const(X509_name_st)*)*, const(const(X509_name_st)*)*) sk_X509_NAME_set_cmp_func(stack_st_X509_NAME*, int function(const(const(X509_name_st)*)*, const(const(X509_name_st)*)*)) @nogc nothrow;
    static stack_st_X509_NAME* sk_X509_NAME_dup(const(stack_st_X509_NAME)*) @nogc nothrow;
    static int sk_X509_NAME_is_sorted(const(stack_st_X509_NAME)*) @nogc nothrow;
    static void sk_X509_NAME_sort(stack_st_X509_NAME*) @nogc nothrow;
    static int sk_X509_NAME_find_ex(stack_st_X509_NAME*, X509_name_st*) @nogc nothrow;
    static int sk_X509_NAME_find(stack_st_X509_NAME*, X509_name_st*) @nogc nothrow;
    static X509_name_st* sk_X509_NAME_set(stack_st_X509_NAME*, int, X509_name_st*) @nogc nothrow;
    static void sk_X509_NAME_free(stack_st_X509_NAME*) @nogc nothrow;
    static int sk_X509_NAME_insert(stack_st_X509_NAME*, X509_name_st*, int) @nogc nothrow;
    static stack_st_X509_NAME_ENTRY* sk_X509_NAME_ENTRY_new_reserve(int function(const(const(X509_name_entry_st)*)*, const(const(X509_name_entry_st)*)*), int) @nogc nothrow;
    struct stack_st_X509_NAME_ENTRY;
    alias sk_X509_NAME_ENTRY_compfunc = int function(const(const(X509_name_entry_st)*)*, const(const(X509_name_entry_st)*)*);
    alias sk_X509_NAME_ENTRY_freefunc = void function(X509_name_entry_st*);
    alias sk_X509_NAME_ENTRY_copyfunc = X509_name_entry_st* function(const(X509_name_entry_st)*);
    static int sk_X509_NAME_ENTRY_num(const(stack_st_X509_NAME_ENTRY)*) @nogc nothrow;
    static X509_name_entry_st* sk_X509_NAME_ENTRY_value(const(stack_st_X509_NAME_ENTRY)*, int) @nogc nothrow;
    static stack_st_X509_NAME_ENTRY* sk_X509_NAME_ENTRY_new(int function(const(const(X509_name_entry_st)*)*, const(const(X509_name_entry_st)*)*)) @nogc nothrow;
    static stack_st_X509_NAME_ENTRY* sk_X509_NAME_ENTRY_new_null() @nogc nothrow;
    static X509_name_entry_st* sk_X509_NAME_ENTRY_delete_ptr(stack_st_X509_NAME_ENTRY*, X509_name_entry_st*) @nogc nothrow;
    static int sk_X509_NAME_ENTRY_insert(stack_st_X509_NAME_ENTRY*, X509_name_entry_st*, int) @nogc nothrow;
    static int sk_X509_NAME_ENTRY_reserve(stack_st_X509_NAME_ENTRY*, int) @nogc nothrow;
    static stack_st_X509_NAME_ENTRY* sk_X509_NAME_ENTRY_deep_copy(const(stack_st_X509_NAME_ENTRY)*, X509_name_entry_st* function(const(X509_name_entry_st)*), void function(X509_name_entry_st*)) @nogc nothrow;
    static stack_st_X509_NAME_ENTRY* sk_X509_NAME_ENTRY_dup(const(stack_st_X509_NAME_ENTRY)*) @nogc nothrow;
    static int sk_X509_NAME_ENTRY_is_sorted(const(stack_st_X509_NAME_ENTRY)*) @nogc nothrow;
    static void sk_X509_NAME_ENTRY_sort(stack_st_X509_NAME_ENTRY*) @nogc nothrow;
    static int sk_X509_NAME_ENTRY_find_ex(stack_st_X509_NAME_ENTRY*, X509_name_entry_st*) @nogc nothrow;
    static int sk_X509_NAME_ENTRY_find(stack_st_X509_NAME_ENTRY*, X509_name_entry_st*) @nogc nothrow;
    static X509_name_entry_st* sk_X509_NAME_ENTRY_set(stack_st_X509_NAME_ENTRY*, int, X509_name_entry_st*) @nogc nothrow;
    static int function(const(const(X509_name_entry_st)*)*, const(const(X509_name_entry_st)*)*) sk_X509_NAME_ENTRY_set_cmp_func(stack_st_X509_NAME_ENTRY*, int function(const(const(X509_name_entry_st)*)*, const(const(X509_name_entry_st)*)*)) @nogc nothrow;
    static int sk_X509_NAME_ENTRY_unshift(stack_st_X509_NAME_ENTRY*, X509_name_entry_st*) @nogc nothrow;
    static void sk_X509_NAME_ENTRY_free(stack_st_X509_NAME_ENTRY*) @nogc nothrow;
    static void sk_X509_NAME_ENTRY_zero(stack_st_X509_NAME_ENTRY*) @nogc nothrow;
    static X509_name_entry_st* sk_X509_NAME_ENTRY_delete(stack_st_X509_NAME_ENTRY*, int) @nogc nothrow;
    static int sk_X509_NAME_ENTRY_push(stack_st_X509_NAME_ENTRY*, X509_name_entry_st*) @nogc nothrow;
    static void sk_X509_NAME_ENTRY_pop_free(stack_st_X509_NAME_ENTRY*, void function(X509_name_entry_st*)) @nogc nothrow;
    static X509_name_entry_st* sk_X509_NAME_ENTRY_shift(stack_st_X509_NAME_ENTRY*) @nogc nothrow;
    static X509_name_entry_st* sk_X509_NAME_ENTRY_pop(stack_st_X509_NAME_ENTRY*) @nogc nothrow;
    struct X509_name_entry_st;
    alias X509_NAME_ENTRY = X509_name_entry_st;
    struct X509_sig_st;
    alias X509_SIG = X509_sig_st;
    struct X509_val_st
    {
        asn1_string_st* notBefore;
        asn1_string_st* notAfter;
    }
    alias X509_VAL = X509_val_st;
    alias X509_ALGORS = stack_st_X509_ALGOR;
    int OPENSSL_sk_is_sorted(const(stack_st)*) @nogc nothrow;
    void OPENSSL_sk_sort(stack_st*) @nogc nothrow;
    stack_st* OPENSSL_sk_dup(const(stack_st)*) @nogc nothrow;
    int function(const(void)*, const(void)*) OPENSSL_sk_set_cmp_func(stack_st*, int function(const(void)*, const(void)*)) @nogc nothrow;
    void OPENSSL_sk_zero(stack_st*) @nogc nothrow;
    void* OPENSSL_sk_pop(stack_st*) @nogc nothrow;
    void* OPENSSL_sk_shift(stack_st*) @nogc nothrow;
    int OPENSSL_sk_unshift(stack_st*, const(void)*) @nogc nothrow;
    int OPENSSL_sk_push(stack_st*, const(void)*) @nogc nothrow;
    int OPENSSL_sk_find_ex(stack_st*, const(void)*) @nogc nothrow;
    int OPENSSL_sk_find(stack_st*, const(void)*) @nogc nothrow;
    void* OPENSSL_sk_delete_ptr(stack_st*, const(void)*) @nogc nothrow;
    void* OPENSSL_sk_delete(stack_st*, int) @nogc nothrow;
    int OPENSSL_sk_insert(stack_st*, const(void)*, int) @nogc nothrow;
    stack_st* OPENSSL_sk_deep_copy(const(stack_st)*, void* function(const(void)*), void function(void*)) @nogc nothrow;
    void OPENSSL_sk_pop_free(stack_st*, void function(void*)) @nogc nothrow;
    void OPENSSL_sk_free(stack_st*) @nogc nothrow;
    int OPENSSL_sk_reserve(stack_st*, int) @nogc nothrow;
    stack_st* OPENSSL_sk_new_reserve(int function(const(void)*, const(void)*), int) @nogc nothrow;
    stack_st* OPENSSL_sk_new_null() @nogc nothrow;
    stack_st* OPENSSL_sk_new(int function(const(void)*, const(void)*)) @nogc nothrow;
    void* OPENSSL_sk_set(stack_st*, int, const(void)*) @nogc nothrow;
    void* OPENSSL_sk_value(const(stack_st)*, int) @nogc nothrow;
    int OPENSSL_sk_num(const(stack_st)*) @nogc nothrow;
    alias OPENSSL_sk_copyfunc = void* function(const(void)*);
    alias OPENSSL_sk_freefunc = void function(void*);
    alias OPENSSL_sk_compfunc = int function(const(void)*, const(void)*);
    struct stack_st;
    alias OPENSSL_STACK = stack_st;
    int ERR_load_SSL_strings() @nogc nothrow;
    void SSL_set_allow_early_data_cb(ssl_st*, int function(ssl_st*, void*), void*) @nogc nothrow;
    void SSL_CTX_set_allow_early_data_cb(ssl_ctx_st*, int function(ssl_st*, void*), void*) @nogc nothrow;
    alias SSL_allow_early_data_cb_fn = int function(ssl_st*, void*);
    void DTLS_set_timer_cb(ssl_st*, uint function(ssl_st*, uint)) @nogc nothrow;
    alias DTLS_timer_cb = uint function(ssl_st*, uint);
    extern __gshared const(char)[0] SSL_version_str;
    int SSL_SESSION_get0_ticket_appdata(ssl_session_st*, void**, c_ulong*) @nogc nothrow;
    int SSL_SESSION_set1_ticket_appdata(ssl_session_st*, const(void)*, c_ulong) @nogc nothrow;
    int SSL_CTX_set_session_ticket_cb(ssl_ctx_st*, int function(ssl_st*, void*), int function(ssl_st*, ssl_session_st*, const(ubyte)*, c_ulong, int, void*), void*) @nogc nothrow;
    alias SSL_CTX_decrypt_session_ticket_fn = int function(ssl_st*, ssl_session_st*, const(ubyte)*, c_ulong, int, void*);
    alias SSL_CTX_generate_session_ticket_fn = int function(ssl_st*, void*);
    alias SSL_TICKET_RETURN = int;
    alias SSL_TICKET_STATUS = int;
    int SSL_alloc_buffers(ssl_st*) @nogc nothrow;
    int SSL_free_buffers(ssl_st*) @nogc nothrow;
    int OPENSSL_init_ssl(c_ulong, const(ossl_init_settings_st)*) @nogc nothrow;
    void* SSL_CTX_get0_security_ex_data(const(ssl_ctx_st)*) @nogc nothrow;
    void SSL_CTX_set0_security_ex_data(ssl_ctx_st*, void*) @nogc nothrow;
    int function(const(ssl_st)*, const(ssl_ctx_st)*, int, int, int, void*, void*) SSL_CTX_get_security_callback(const(ssl_ctx_st)*) @nogc nothrow;
    void SSL_CTX_set_security_callback(ssl_ctx_st*, int function(const(ssl_st)*, const(ssl_ctx_st)*, int, int, int, void*, void*)) @nogc nothrow;
    int SSL_CTX_get_security_level(const(ssl_ctx_st)*) @nogc nothrow;
    void SSL_CTX_set_security_level(ssl_ctx_st*, int) @nogc nothrow;
    void* SSL_get0_security_ex_data(const(ssl_st)*) @nogc nothrow;
    void SSL_set0_security_ex_data(ssl_st*, void*) @nogc nothrow;
    int function(const(ssl_st)*, const(ssl_ctx_st)*, int, int, int, void*, void*) SSL_get_security_callback(const(ssl_st)*) @nogc nothrow;
    void SSL_set_security_callback(ssl_st*, int function(const(ssl_st)*, const(ssl_ctx_st)*, int, int, int, void*, void*)) @nogc nothrow;
    int SSL_get_security_level(const(ssl_st)*) @nogc nothrow;
    void SSL_set_security_level(ssl_st*, int) @nogc nothrow;
    const(ctlog_store_st)* SSL_CTX_get0_ctlog_store(const(ssl_ctx_st)*) @nogc nothrow;
    void SSL_CTX_set0_ctlog_store(ssl_ctx_st*, ctlog_store_st*) @nogc nothrow;
    int SSL_CTX_set_ctlog_list_file(ssl_ctx_st*, const(char)*) @nogc nothrow;
    int SSL_CTX_set_default_ctlog_list_file(ssl_ctx_st*) @nogc nothrow;
    const(stack_st_SCT)* SSL_get0_peer_scts(ssl_st*) @nogc nothrow;
    int SSL_CTX_ct_is_enabled(const(ssl_ctx_st)*) @nogc nothrow;
    int SSL_ct_is_enabled(const(ssl_st)*) @nogc nothrow;
    int SSL_CTX_enable_ct(ssl_ctx_st*, int) @nogc nothrow;
    int SSL_enable_ct(ssl_st*, int) @nogc nothrow;
    enum _Anonymous_24
    {
        SSL_CT_VALIDATION_PERMISSIVE = 0,
        SSL_CT_VALIDATION_STRICT = 1,
    }
    enum SSL_CT_VALIDATION_PERMISSIVE = _Anonymous_24.SSL_CT_VALIDATION_PERMISSIVE;
    enum SSL_CT_VALIDATION_STRICT = _Anonymous_24.SSL_CT_VALIDATION_STRICT;
    int SSL_CTX_set_ct_validation_callback(ssl_ctx_st*, int function(const(ct_policy_eval_ctx_st)*, const(stack_st_SCT)*, void*), void*) @nogc nothrow;
    int SSL_set_ct_validation_callback(ssl_st*, int function(const(ct_policy_eval_ctx_st)*, const(stack_st_SCT)*, void*), void*) @nogc nothrow;
    alias ssl_ct_validation_cb = int function(const(ct_policy_eval_ctx_st)*, const(stack_st_SCT)*, void*);
    int DTLSv1_listen(ssl_st*, bio_addr_st*) @nogc nothrow;
    int SSL_CTX_config(ssl_ctx_st*, const(char)*) @nogc nothrow;
    int SSL_config(ssl_st*, const(char)*) @nogc nothrow;
    void SSL_add_ssl_module() @nogc nothrow;
    int SSL_CONF_cmd_value_type(ssl_conf_ctx_st*, const(char)*) @nogc nothrow;
    int SSL_CONF_cmd_argv(ssl_conf_ctx_st*, int*, char***) @nogc nothrow;
    int SSL_CONF_cmd(ssl_conf_ctx_st*, const(char)*, const(char)*) @nogc nothrow;
    void SSL_CONF_CTX_set_ssl_ctx(ssl_conf_ctx_st*, ssl_ctx_st*) @nogc nothrow;
    void SSL_CONF_CTX_set_ssl(ssl_conf_ctx_st*, ssl_st*) @nogc nothrow;
    int SSL_CONF_CTX_set1_prefix(ssl_conf_ctx_st*, const(char)*) @nogc nothrow;
    uint SSL_CONF_CTX_clear_flags(ssl_conf_ctx_st*, uint) @nogc nothrow;
    uint SSL_CONF_CTX_set_flags(ssl_conf_ctx_st*, uint) @nogc nothrow;
    void SSL_CONF_CTX_free(ssl_conf_ctx_st*) @nogc nothrow;
    int SSL_CONF_CTX_finish(ssl_conf_ctx_st*) @nogc nothrow;
    ssl_conf_ctx_st* SSL_CONF_CTX_new() @nogc nothrow;
    int SSL_is_server(const(ssl_st)*) @nogc nothrow;
    int SSL_session_reused(const(ssl_st)*) @nogc nothrow;
    c_ulong SSL_CTX_get_num_tickets(const(ssl_ctx_st)*) @nogc nothrow;
    int SSL_CTX_set_num_tickets(ssl_ctx_st*, c_ulong) @nogc nothrow;
    c_ulong SSL_get_num_tickets(const(ssl_st)*) @nogc nothrow;
    int SSL_set_num_tickets(ssl_st*, c_ulong) @nogc nothrow;
    int SSL_set_block_padding(ssl_st*, c_ulong) @nogc nothrow;
    void* SSL_get_record_padding_callback_arg(const(ssl_st)*) @nogc nothrow;
    void SSL_set_record_padding_callback_arg(ssl_st*, void*) @nogc nothrow;
    void SSL_set_record_padding_callback(ssl_st*, c_ulong function(ssl_st*, int, c_ulong, void*)) @nogc nothrow;
    int SSL_CTX_set_block_padding(ssl_ctx_st*, c_ulong) @nogc nothrow;
    void* SSL_CTX_get_record_padding_callback_arg(const(ssl_ctx_st)*) @nogc nothrow;
    void SSL_CTX_set_record_padding_callback_arg(ssl_ctx_st*, void*) @nogc nothrow;
    void SSL_CTX_set_record_padding_callback(ssl_ctx_st*, c_ulong function(ssl_st*, int, c_ulong, void*)) @nogc nothrow;
    void SSL_set_not_resumable_session_callback(ssl_st*, int function(ssl_st*, int)) @nogc nothrow;
    void SSL_CTX_set_not_resumable_session_callback(ssl_ctx_st*, int function(ssl_st*, int)) @nogc nothrow;
    int SSL_set_session_secret_cb(ssl_st*, int function(ssl_st*, void*, int*, stack_st_SSL_CIPHER*, const(ssl_cipher_st)**, void*), void*) @nogc nothrow;
    int SSL_set_session_ticket_ext_cb(ssl_st*, int function(ssl_st*, const(ubyte)*, int, void*), void*) @nogc nothrow;
    int SSL_set_session_ticket_ext(ssl_st*, void*, int) @nogc nothrow;
    int SSL_bytes_to_cipher_list(ssl_st*, const(ubyte)*, c_ulong, int, stack_st_SSL_CIPHER**, stack_st_SSL_CIPHER**) @nogc nothrow;
    int SSL_CIPHER_get_digest_nid(const(ssl_cipher_st)*) @nogc nothrow;
    int SSL_CIPHER_get_cipher_nid(const(ssl_cipher_st)*) @nogc nothrow;
    const(ssl_cipher_st)* SSL_CIPHER_find(ssl_st*, const(ubyte)*) @nogc nothrow;
    int SSL_COMP_add_compression_method(int, comp_method_st*) @nogc nothrow;
    stack_st_SSL_COMP* SSL_COMP_set0_compression_methods(stack_st_SSL_COMP*) @nogc nothrow;
    stack_st_SSL_COMP* SSL_COMP_get_compression_methods() @nogc nothrow;
    int SSL_COMP_get_id(const(ssl_comp_st)*) @nogc nothrow;
    const(char)* SSL_COMP_get0_name(const(ssl_comp_st)*) @nogc nothrow;
    const(char)* SSL_COMP_get_name(const(comp_method_st)*) @nogc nothrow;
    const(comp_method_st)* SSL_get_current_expansion(const(ssl_st)*) @nogc nothrow;
    const(comp_method_st)* SSL_get_current_compression(const(ssl_st)*) @nogc nothrow;
    void SSL_set_tmp_dh_callback(ssl_st*, dh_st* function(ssl_st*, int, int)) @nogc nothrow;
    void SSL_CTX_set_tmp_dh_callback(ssl_ctx_st*, dh_st* function(ssl_st*, int, int)) @nogc nothrow;
    void SSL_set_default_read_buffer_len(ssl_st*, c_ulong) @nogc nothrow;
    void SSL_CTX_set_default_read_buffer_len(ssl_ctx_st*, c_ulong) @nogc nothrow;
    int SSL_get_ex_data_X509_STORE_CTX_idx() @nogc nothrow;
    void* SSL_CTX_get_ex_data(const(ssl_ctx_st)*, int) @nogc nothrow;
    int SSL_CTX_set_ex_data(ssl_ctx_st*, int, void*) @nogc nothrow;
    void* SSL_SESSION_get_ex_data(const(ssl_session_st)*, int) @nogc nothrow;
    int SSL_SESSION_set_ex_data(ssl_session_st*, int, void*) @nogc nothrow;
    void* SSL_get_ex_data(const(ssl_st)*, int) @nogc nothrow;
    int SSL_set_ex_data(ssl_st*, int, void*) @nogc nothrow;
    ubyte SSL_SESSION_get_max_fragment_length(const(ssl_session_st)*) @nogc nothrow;
    int SSL_SESSION_set1_master_key(ssl_session_st*, const(ubyte)*, c_ulong) @nogc nothrow;
    c_ulong SSL_SESSION_get_master_key(const(ssl_session_st)*, ubyte*, c_ulong) @nogc nothrow;
    c_ulong SSL_get_server_random(const(ssl_st)*, ubyte*, c_ulong) @nogc nothrow;
    c_ulong SSL_get_client_random(const(ssl_st)*, ubyte*, c_ulong) @nogc nothrow;
    stack_st_X509* SSL_get0_verified_chain(const(ssl_st)*) @nogc nothrow;
    c_long SSL_get_verify_result(const(ssl_st)*) @nogc nothrow;
    void SSL_set_verify_result(ssl_st*, c_long) @nogc nothrow;
    OSSL_HANDSHAKE_STATE SSL_get_state(const(ssl_st)*) @nogc nothrow;
    void function(const(ssl_st)*, int, int) SSL_get_info_callback(const(ssl_st)*) @nogc nothrow;
    void SSL_set_info_callback(ssl_st*, void function(const(ssl_st)*, int, int)) @nogc nothrow;
    ssl_ctx_st* SSL_set_SSL_CTX(ssl_st*, ssl_ctx_st*) @nogc nothrow;
    ssl_ctx_st* SSL_get_SSL_CTX(const(ssl_st)*) @nogc nothrow;
    ssl_session_st* SSL_get1_session(ssl_st*) @nogc nothrow;
    ssl_session_st* SSL_get_session(const(ssl_st)*) @nogc nothrow;
    int SSL_CTX_load_verify_locations(ssl_ctx_st*, const(char)*, const(char)*) @nogc nothrow;
    int SSL_CTX_set_default_verify_file(ssl_ctx_st*) @nogc nothrow;
    int SSL_CTX_set_default_verify_dir(ssl_ctx_st*) @nogc nothrow;
    int SSL_CTX_set_default_verify_paths(ssl_ctx_st*) @nogc nothrow;
    int SSL_client_version(const(ssl_st)*) @nogc nothrow;
    int SSL_version(const(ssl_st)*) @nogc nothrow;
    int SSL_get_shutdown(const(ssl_st)*) @nogc nothrow;
    void SSL_set_shutdown(ssl_st*, int) @nogc nothrow;
    int SSL_get_quiet_shutdown(const(ssl_st)*) @nogc nothrow;
    void SSL_set_quiet_shutdown(ssl_st*, int) @nogc nothrow;
    int SSL_CTX_get_quiet_shutdown(const(ssl_ctx_st)*) @nogc nothrow;
    void SSL_CTX_set_quiet_shutdown(ssl_ctx_st*, int) @nogc nothrow;
    evp_pkey_st* SSL_CTX_get0_privatekey(const(ssl_ctx_st)*) @nogc nothrow;
    x509_st* SSL_CTX_get0_certificate(const(ssl_ctx_st)*) @nogc nothrow;
    evp_pkey_st* SSL_get_privatekey(const(ssl_st)*) @nogc nothrow;
    x509_st* SSL_get_certificate(const(ssl_st)*) @nogc nothrow;
    ssl_st* SSL_dup(ssl_st*) @nogc nothrow;
    stack_st_X509_NAME* SSL_dup_CA_list(const(stack_st_X509_NAME)*) @nogc nothrow;
    char* SSL_CIPHER_description(const(ssl_cipher_st)*, char*, int) @nogc nothrow;
    c_long SSL_get_default_timeout(const(ssl_st)*) @nogc nothrow;
    void SSL_set_accept_state(ssl_st*) @nogc nothrow;
    void SSL_set_connect_state(ssl_st*) @nogc nothrow;
    int SSL_CTX_add_client_CA(ssl_ctx_st*, x509_st*) @nogc nothrow;
    int SSL_add_client_CA(ssl_st*, x509_st*) @nogc nothrow;
    stack_st_X509_NAME* SSL_CTX_get_client_CA_list(const(ssl_ctx_st)*) @nogc nothrow;
    stack_st_X509_NAME* SSL_get_client_CA_list(const(ssl_st)*) @nogc nothrow;
    void SSL_CTX_set_client_CA_list(ssl_ctx_st*, stack_st_X509_NAME*) @nogc nothrow;
    void SSL_set_client_CA_list(ssl_st*, stack_st_X509_NAME*) @nogc nothrow;
    const(stack_st_X509_NAME)* SSL_get0_peer_CA_list(const(ssl_st)*) @nogc nothrow;
    int SSL_CTX_add1_to_CA_list(ssl_ctx_st*, const(x509_st)*) @nogc nothrow;
    int SSL_add1_to_CA_list(ssl_st*, const(x509_st)*) @nogc nothrow;
    const(stack_st_X509_NAME)* SSL_CTX_get0_CA_list(const(ssl_ctx_st)*) @nogc nothrow;
    const(stack_st_X509_NAME)* SSL_get0_CA_list(const(ssl_st)*) @nogc nothrow;
    void SSL_CTX_set0_CA_list(ssl_ctx_st*, stack_st_X509_NAME*) @nogc nothrow;
    void SSL_set0_CA_list(ssl_st*, stack_st_X509_NAME*) @nogc nothrow;
    const(char)* SSL_alert_desc_string(int) @nogc nothrow;
    const(char)* SSL_alert_desc_string_long(int) @nogc nothrow;
    const(char)* SSL_alert_type_string(int) @nogc nothrow;
    const(char)* SSL_alert_type_string_long(int) @nogc nothrow;
    int SSL_set_ssl_method(ssl_st*, const(ssl_method_st)*) @nogc nothrow;
    const(ssl_method_st)* SSL_get_ssl_method(const(ssl_st)*) @nogc nothrow;
    const(ssl_method_st)* SSL_CTX_get_ssl_method(const(ssl_ctx_st)*) @nogc nothrow;
    void SSL_set_post_handshake_auth(ssl_st*, int) @nogc nothrow;
    void SSL_CTX_set_post_handshake_auth(ssl_ctx_st*, int) @nogc nothrow;
    int SSL_verify_client_post_handshake(ssl_st*) @nogc nothrow;
    int SSL_shutdown(ssl_st*) @nogc nothrow;
    int SSL_renegotiate_pending(const(ssl_st)*) @nogc nothrow;
    int SSL_renegotiate_abbreviated(ssl_st*) @nogc nothrow;
    int SSL_renegotiate(ssl_st*) @nogc nothrow;
    int SSL_get_key_update_type(const(ssl_st)*) @nogc nothrow;
    int SSL_key_update(ssl_st*, int) @nogc nothrow;
    int SSL_do_handshake(ssl_st*) @nogc nothrow;
    stack_st_SSL_CIPHER* SSL_get1_supported_ciphers(ssl_st*) @nogc nothrow;
    stack_st_SSL_CIPHER* SSL_get_client_ciphers(const(ssl_st)*) @nogc nothrow;
    stack_st_SSL_CIPHER* SSL_CTX_get_ciphers(const(ssl_ctx_st)*) @nogc nothrow;
    stack_st_SSL_CIPHER* SSL_get_ciphers(const(ssl_st)*) @nogc nothrow;
    c_ulong DTLS_get_data_mtu(const(ssl_st)*) @nogc nothrow;
    const(ssl_method_st)* DTLS_client_method() @nogc nothrow;
    const(ssl_method_st)* DTLS_server_method() @nogc nothrow;
    const(ssl_method_st)* DTLS_method() @nogc nothrow;
    const(ssl_method_st)* DTLSv1_2_client_method() @nogc nothrow;
    const(ssl_method_st)* DTLSv1_2_server_method() @nogc nothrow;
    const(ssl_method_st)* DTLSv1_2_method() @nogc nothrow;
    const(ssl_method_st)* DTLSv1_client_method() @nogc nothrow;
    const(ssl_method_st)* DTLSv1_server_method() @nogc nothrow;
    const(ssl_method_st)* DTLSv1_method() @nogc nothrow;
    const(ssl_method_st)* TLSv1_2_client_method() @nogc nothrow;
    const(ssl_method_st)* TLSv1_2_server_method() @nogc nothrow;
    const(ssl_method_st)* TLSv1_2_method() @nogc nothrow;
    const(ssl_method_st)* TLSv1_1_client_method() @nogc nothrow;
    const(ssl_method_st)* TLSv1_1_server_method() @nogc nothrow;
    const(ssl_method_st)* TLSv1_1_method() @nogc nothrow;
    const(ssl_method_st)* TLSv1_client_method() @nogc nothrow;
    const(ssl_method_st)* TLSv1_server_method() @nogc nothrow;
    const(ssl_method_st)* TLSv1_method() @nogc nothrow;
    const(ssl_method_st)* TLS_client_method() @nogc nothrow;
    const(ssl_method_st)* TLS_server_method() @nogc nothrow;
    const(ssl_method_st)* TLS_method() @nogc nothrow;
    int SSL_CTX_set_ssl_version(ssl_ctx_st*, const(ssl_method_st)*) @nogc nothrow;
    const(char)* SSL_get_version(const(ssl_st)*) @nogc nothrow;
    int SSL_get_error(const(ssl_st)*, int) @nogc nothrow;
    int SSL_get_early_data_status(const(ssl_st)*) @nogc nothrow;
    c_long SSL_CTX_callback_ctrl(ssl_ctx_st*, int, void function()) @nogc nothrow;
    c_long SSL_CTX_ctrl(ssl_ctx_st*, int, c_long, void*) @nogc nothrow;
    c_long SSL_callback_ctrl(ssl_st*, int, void function()) @nogc nothrow;
    c_long SSL_ctrl(ssl_st*, int, c_long, void*) @nogc nothrow;
    int SSL_write_early_data(ssl_st*, const(void)*, c_ulong, c_ulong*) @nogc nothrow;
    int SSL_write_ex(ssl_st*, const(void)*, c_ulong, c_ulong*) @nogc nothrow;
    int SSL_write(ssl_st*, const(void)*, int) @nogc nothrow;
    int SSL_peek_ex(ssl_st*, void*, c_ulong, c_ulong*) @nogc nothrow;
    int SSL_peek(ssl_st*, void*, int) @nogc nothrow;
    int SSL_read_early_data(ssl_st*, void*, c_ulong, c_ulong*) @nogc nothrow;
    int SSL_read_ex(ssl_st*, void*, c_ulong, c_ulong*) @nogc nothrow;
    int SSL_read(ssl_st*, void*, int) @nogc nothrow;
    int SSL_connect(ssl_st*) @nogc nothrow;
    int SSL_stateless(ssl_st*) @nogc nothrow;
    int SSL_accept(ssl_st*) @nogc nothrow;
    int SSL_get_changed_async_fds(ssl_st*, int*, c_ulong*, int*, c_ulong*) @nogc nothrow;
    int SSL_get_all_async_fds(ssl_st*, int*, c_ulong*) @nogc nothrow;
    int SSL_waiting_for_async(ssl_st*) @nogc nothrow;
    void SSL_free(ssl_st*) @nogc nothrow;
    void SSL_certs_clear(ssl_st*) @nogc nothrow;
    int SSL_client_hello_get0_ext(ssl_st*, uint, const(ubyte)**, c_ulong*) @nogc nothrow;
    int SSL_client_hello_get1_extensions_present(ssl_st*, int**, c_ulong*) @nogc nothrow;
    c_ulong SSL_client_hello_get0_compression_methods(ssl_st*, const(ubyte)**) @nogc nothrow;
    c_ulong SSL_client_hello_get0_ciphers(ssl_st*, const(ubyte)**) @nogc nothrow;
    c_ulong SSL_client_hello_get0_session_id(ssl_st*, const(ubyte)**) @nogc nothrow;
    c_ulong SSL_client_hello_get0_random(ssl_st*, const(ubyte)**) @nogc nothrow;
    uint SSL_client_hello_get0_legacy_version(ssl_st*) @nogc nothrow;
    int SSL_client_hello_isv2(ssl_st*) @nogc nothrow;
    void SSL_CTX_set_client_hello_cb(ssl_ctx_st*, int function(ssl_st*, int*, void*), void*) @nogc nothrow;
    alias SSL_client_hello_cb_fn = int function(ssl_st*, int*, void*);
    char* SSL_get_srp_userinfo(ssl_st*) @nogc nothrow;
    char* SSL_get_srp_username(ssl_st*) @nogc nothrow;
    bignum_st* SSL_get_srp_N(ssl_st*) @nogc nothrow;
    bignum_st* SSL_get_srp_g(ssl_st*) @nogc nothrow;
    int SSL_set_srp_server_param_pw(ssl_st*, const(char)*, const(char)*, const(char)*) @nogc nothrow;
    int SSL_set_srp_server_param(ssl_st*, const(bignum_st)*, const(bignum_st)*, bignum_st*, bignum_st*, char*) @nogc nothrow;
    int SSL_CTX_set_srp_cb_arg(ssl_ctx_st*, void*) @nogc nothrow;
    int SSL_CTX_set_srp_username_callback(ssl_ctx_st*, int function(ssl_st*, int*, void*)) @nogc nothrow;
    int SSL_CTX_set_srp_verify_param_callback(ssl_ctx_st*, int function(ssl_st*, void*)) @nogc nothrow;
    int SSL_CTX_set_srp_client_pwd_callback(ssl_ctx_st*, char* function(ssl_st*, void*)) @nogc nothrow;
    int SSL_CTX_set_srp_strength(ssl_ctx_st*, int) @nogc nothrow;
    int SSL_CTX_set_srp_password(ssl_ctx_st*, char*) @nogc nothrow;
    int SSL_CTX_set_srp_username(ssl_ctx_st*, char*) @nogc nothrow;
    X509_VERIFY_PARAM_st* SSL_get0_param(ssl_st*) @nogc nothrow;
    X509_VERIFY_PARAM_st* SSL_CTX_get0_param(ssl_ctx_st*) @nogc nothrow;
    int SSL_set1_param(ssl_st*, X509_VERIFY_PARAM_st*) @nogc nothrow;
    int SSL_CTX_set1_param(ssl_ctx_st*, X509_VERIFY_PARAM_st*) @nogc nothrow;
    c_ulong SSL_dane_clear_flags(ssl_st*, c_ulong) @nogc nothrow;
    c_ulong SSL_dane_set_flags(ssl_st*, c_ulong) @nogc nothrow;
    c_ulong SSL_CTX_dane_clear_flags(ssl_ctx_st*, c_ulong) @nogc nothrow;
    c_ulong SSL_CTX_dane_set_flags(ssl_ctx_st*, c_ulong) @nogc nothrow;
    ssl_dane_st* SSL_get0_dane(ssl_st*) @nogc nothrow;
    int SSL_get0_dane_tlsa(ssl_st*, ubyte*, ubyte*, ubyte*, const(ubyte)**, c_ulong*) @nogc nothrow;
    int SSL_get0_dane_authority(ssl_st*, x509_st**, evp_pkey_st**) @nogc nothrow;
    int SSL_dane_tlsa_add(ssl_st*, ubyte, ubyte, ubyte, const(ubyte)*, c_ulong) @nogc nothrow;
    int SSL_dane_enable(ssl_st*, const(char)*) @nogc nothrow;
    int SSL_CTX_dane_mtype_set(ssl_ctx_st*, const(evp_md_st)*, ubyte, ubyte) @nogc nothrow;
    int SSL_CTX_dane_enable(ssl_ctx_st*) @nogc nothrow;
    void SSL_set_hostflags(ssl_st*, uint) @nogc nothrow;
    const(char)* SSL_get0_peername(ssl_st*) @nogc nothrow;
    int SSL_add1_host(ssl_st*, const(char)*) @nogc nothrow;
    int SSL_set1_host(ssl_st*, const(char)*) @nogc nothrow;
    int SSL_set_trust(ssl_st*, int) @nogc nothrow;
    int SSL_CTX_set_trust(ssl_ctx_st*, int) @nogc nothrow;
    int SSL_set_purpose(ssl_st*, int) @nogc nothrow;
    int SSL_CTX_set_purpose(ssl_ctx_st*, int) @nogc nothrow;
    int SSL_set_session_id_context(ssl_st*, const(ubyte)*, uint) @nogc nothrow;
    int SSL_is_dtls(const(ssl_st)*) @nogc nothrow;
    int SSL_up_ref(ssl_st*) @nogc nothrow;
    ssl_st* SSL_new(ssl_ctx_st*) @nogc nothrow;
    int SSL_CTX_set_session_id_context(ssl_ctx_st*, const(ubyte)*, uint) @nogc nothrow;
    int SSL_check_private_key(const(ssl_st)*) @nogc nothrow;
    int SSL_CTX_check_private_key(const(ssl_ctx_st)*) @nogc nothrow;
    void* SSL_get_default_passwd_cb_userdata(ssl_st*) @nogc nothrow;
    int function(char*, int, int, void*) SSL_get_default_passwd_cb(ssl_st*) @nogc nothrow;
    void SSL_set_default_passwd_cb_userdata(ssl_st*, void*) @nogc nothrow;
    void SSL_set_default_passwd_cb(ssl_st*, int function(char*, int, int, void*)) @nogc nothrow;
    void* SSL_CTX_get_default_passwd_cb_userdata(ssl_ctx_st*) @nogc nothrow;
    int function(char*, int, int, void*) SSL_CTX_get_default_passwd_cb(ssl_ctx_st*) @nogc nothrow;
    void SSL_CTX_set_default_passwd_cb_userdata(ssl_ctx_st*, void*) @nogc nothrow;
    void SSL_CTX_set_default_passwd_cb(ssl_ctx_st*, int function(char*, int, int, void*)) @nogc nothrow;
    int SSL_CTX_use_cert_and_key(ssl_ctx_st*, x509_st*, evp_pkey_st*, stack_st_X509*, int) @nogc nothrow;
    int SSL_CTX_use_certificate_ASN1(ssl_ctx_st*, int, const(ubyte)*) @nogc nothrow;
    int SSL_CTX_use_certificate(ssl_ctx_st*, x509_st*) @nogc nothrow;
    int SSL_CTX_use_PrivateKey_ASN1(int, ssl_ctx_st*, const(ubyte)*, c_long) @nogc nothrow;
    int SSL_CTX_use_PrivateKey(ssl_ctx_st*, evp_pkey_st*) @nogc nothrow;
    int SSL_CTX_use_RSAPrivateKey_ASN1(ssl_ctx_st*, const(ubyte)*, c_long) @nogc nothrow;
    int SSL_CTX_use_RSAPrivateKey(ssl_ctx_st*, rsa_st*) @nogc nothrow;
    void SSL_CTX_set_cert_cb(ssl_ctx_st*, int function(ssl_st*, void*), void*) @nogc nothrow;
    void SSL_CTX_set_cert_verify_callback(ssl_ctx_st*, int function(x509_store_ctx_st*, void*), void*) @nogc nothrow;
    void SSL_CTX_set_verify_depth(ssl_ctx_st*, int) @nogc nothrow;
    void SSL_CTX_set_verify(ssl_ctx_st*, int, int function(int, x509_store_ctx_st*)) @nogc nothrow;
    int function(int, x509_store_ctx_st*) SSL_CTX_get_verify_callback(const(ssl_ctx_st)*) @nogc nothrow;
    int SSL_CTX_get_verify_depth(const(ssl_ctx_st)*) @nogc nothrow;
    int SSL_CTX_get_verify_mode(const(ssl_ctx_st)*) @nogc nothrow;
    stack_st_X509* SSL_get_peer_cert_chain(const(ssl_st)*) @nogc nothrow;
    x509_st* SSL_get_peer_certificate(const(ssl_st)*) @nogc nothrow;
    ssl_session_st* d2i_SSL_SESSION(ssl_session_st**, const(ubyte)**, c_long) @nogc nothrow;
    int SSL_has_matching_session_id(const(ssl_st)*, const(ubyte)*, uint) @nogc nothrow;
    int SSL_set_generate_session_id(ssl_st*, int function(ssl_st*, ubyte*, uint*)) @nogc nothrow;
    int SSL_CTX_set_generate_session_id(ssl_ctx_st*, int function(ssl_st*, ubyte*, uint*)) @nogc nothrow;
    int SSL_CTX_remove_session(ssl_ctx_st*, ssl_session_st*) @nogc nothrow;
    int SSL_CTX_add_session(ssl_ctx_st*, ssl_session_st*) @nogc nothrow;
    int SSL_set_session(ssl_st*, ssl_session_st*) @nogc nothrow;
    int i2d_SSL_SESSION(ssl_session_st*, ubyte**) @nogc nothrow;
    void SSL_SESSION_free(ssl_session_st*) @nogc nothrow;
    int SSL_SESSION_up_ref(ssl_session_st*) @nogc nothrow;
    int SSL_SESSION_print_keylog(bio_st*, const(ssl_session_st)*) @nogc nothrow;
    int SSL_SESSION_print(bio_st*, const(ssl_session_st)*) @nogc nothrow;
    int SSL_SESSION_print_fp(_IO_FILE*, const(ssl_session_st)*) @nogc nothrow;
    uint SSL_SESSION_get_compress_id(const(ssl_session_st)*) @nogc nothrow;
    const(ubyte)* SSL_SESSION_get0_id_context(const(ssl_session_st)*, uint*) @nogc nothrow;
    const(ubyte)* SSL_SESSION_get_id(const(ssl_session_st)*, uint*) @nogc nothrow;
    ssl_session_st* SSL_SESSION_dup(ssl_session_st*) @nogc nothrow;
    ssl_session_st* SSL_SESSION_new() @nogc nothrow;
    int SSL_SESSION_is_resumable(const(ssl_session_st)*) @nogc nothrow;
    int SSL_SESSION_set1_id(ssl_session_st*, const(ubyte)*, uint) @nogc nothrow;
    int SSL_SESSION_set1_id_context(ssl_session_st*, const(ubyte)*, uint) @nogc nothrow;
    x509_st* SSL_SESSION_get0_peer(ssl_session_st*) @nogc nothrow;
    int SSL_copy_session_id(ssl_st*, const(ssl_st)*) @nogc nothrow;
    int SSL_SESSION_set_max_early_data(ssl_session_st*, uint) @nogc nothrow;
    uint SSL_SESSION_get_max_early_data(const(ssl_session_st)*) @nogc nothrow;
    void SSL_SESSION_get0_ticket(const(ssl_session_st)*, const(ubyte)**, c_ulong*) @nogc nothrow;
    c_ulong SSL_SESSION_get_ticket_lifetime_hint(const(ssl_session_st)*) @nogc nothrow;
    int SSL_SESSION_has_ticket(const(ssl_session_st)*) @nogc nothrow;
    int SSL_SESSION_set_cipher(ssl_session_st*, const(ssl_cipher_st)*) @nogc nothrow;
    const(ssl_cipher_st)* SSL_SESSION_get0_cipher(const(ssl_session_st)*) @nogc nothrow;
    int SSL_SESSION_set1_alpn_selected(ssl_session_st*, const(ubyte)*, c_ulong) @nogc nothrow;
    void SSL_SESSION_get0_alpn_selected(const(ssl_session_st)*, const(ubyte)**, c_ulong*) @nogc nothrow;
    int SSL_SESSION_set1_hostname(ssl_session_st*, const(char)*) @nogc nothrow;
    const(char)* SSL_SESSION_get0_hostname(const(ssl_session_st)*) @nogc nothrow;
    int SSL_SESSION_set_protocol_version(ssl_session_st*, int) @nogc nothrow;
    int SSL_SESSION_get_protocol_version(const(ssl_session_st)*) @nogc nothrow;
    c_long SSL_SESSION_set_timeout(ssl_session_st*, c_long) @nogc nothrow;
    c_long SSL_SESSION_get_timeout(const(ssl_session_st)*) @nogc nothrow;
    c_long SSL_SESSION_set_time(ssl_session_st*, c_long) @nogc nothrow;
    c_long SSL_SESSION_get_time(const(ssl_session_st)*) @nogc nothrow;
    const(char)* SSL_rstate_string_long(const(ssl_st)*) @nogc nothrow;
    const(char)* SSL_state_string_long(const(ssl_st)*) @nogc nothrow;
    const(char)* SSL_rstate_string(const(ssl_st)*) @nogc nothrow;
    const(char)* SSL_state_string(const(ssl_st)*) @nogc nothrow;
    int SSL_add_dir_cert_subjects_to_stack(stack_st_X509_NAME*, const(char)*) @nogc nothrow;
    int SSL_add_file_cert_subjects_to_stack(stack_st_X509_NAME*, const(char)*) @nogc nothrow;
    stack_st_X509_NAME* SSL_load_client_CA_file(const(char)*) @nogc nothrow;
    int SSL_use_certificate_chain_file(ssl_st*, const(char)*) @nogc nothrow;
    int SSL_CTX_use_certificate_chain_file(ssl_ctx_st*, const(char)*) @nogc nothrow;
    int SSL_CTX_use_certificate_file(ssl_ctx_st*, const(char)*, int) @nogc nothrow;
    int SSL_CTX_use_PrivateKey_file(ssl_ctx_st*, const(char)*, int) @nogc nothrow;
    int SSL_CTX_use_RSAPrivateKey_file(ssl_ctx_st*, const(char)*, int) @nogc nothrow;
    int SSL_use_certificate_file(ssl_st*, const(char)*, int) @nogc nothrow;
    int SSL_use_PrivateKey_file(ssl_st*, const(char)*, int) @nogc nothrow;
    int SSL_use_RSAPrivateKey_file(ssl_st*, const(char)*, int) @nogc nothrow;
    int SSL_CTX_use_serverinfo_file(ssl_ctx_st*, const(char)*) @nogc nothrow;
    int SSL_CTX_use_serverinfo_ex(ssl_ctx_st*, uint, const(ubyte)*, c_ulong) @nogc nothrow;
    int SSL_CTX_use_serverinfo(ssl_ctx_st*, const(ubyte)*, c_ulong) @nogc nothrow;
    int SSL_use_cert_and_key(ssl_st*, x509_st*, evp_pkey_st*, stack_st_X509*, int) @nogc nothrow;
    int SSL_use_certificate_ASN1(ssl_st*, const(ubyte)*, int) @nogc nothrow;
    int SSL_use_certificate(ssl_st*, x509_st*) @nogc nothrow;
    int SSL_use_PrivateKey_ASN1(int, ssl_st*, const(ubyte)*, c_long) @nogc nothrow;
    int SSL_use_PrivateKey(ssl_st*, evp_pkey_st*) @nogc nothrow;
    int SSL_use_RSAPrivateKey_ASN1(ssl_st*, const(ubyte)*, c_long) @nogc nothrow;
    int SSL_use_RSAPrivateKey(ssl_st*, rsa_st*) @nogc nothrow;
    void SSL_set_cert_cb(ssl_st*, int function(ssl_st*, void*), void*) @nogc nothrow;
    void SSL_set_verify_depth(ssl_st*, int) @nogc nothrow;
    void SSL_set_verify(ssl_st*, int, int function(int, x509_store_ctx_st*)) @nogc nothrow;
    int function(int, x509_store_ctx_st*) SSL_get_verify_callback(const(ssl_st)*) @nogc nothrow;
    int SSL_get_verify_depth(const(ssl_st)*) @nogc nothrow;
    int SSL_get_verify_mode(const(ssl_st)*) @nogc nothrow;
    void SSL_set_read_ahead(ssl_st*, int) @nogc nothrow;
    int SSL_set_ciphersuites(ssl_st*, const(char)*) @nogc nothrow;
    int SSL_CTX_set_ciphersuites(ssl_ctx_st*, const(char)*) @nogc nothrow;
    int SSL_set_cipher_list(ssl_st*, const(char)*) @nogc nothrow;
    bio_st* SSL_get_wbio(const(ssl_st)*) @nogc nothrow;
    bio_st* SSL_get_rbio(const(ssl_st)*) @nogc nothrow;
    void SSL_set_bio(ssl_st*, bio_st*, bio_st*) @nogc nothrow;
    void SSL_set0_wbio(ssl_st*, bio_st*) @nogc nothrow;
    void SSL_set0_rbio(ssl_st*, bio_st*) @nogc nothrow;
    int SSL_set_wfd(ssl_st*, int) @nogc nothrow;
    int SSL_set_rfd(ssl_st*, int) @nogc nothrow;
    int SSL_set_fd(ssl_st*, int) @nogc nothrow;
    int SSL_has_pending(const(ssl_st)*) @nogc nothrow;
    int SSL_pending(const(ssl_st)*) @nogc nothrow;
    int SSL_get_read_ahead(const(ssl_st)*) @nogc nothrow;
    char* SSL_get_shared_ciphers(const(ssl_st)*, char*, int) @nogc nothrow;
    const(char)* SSL_get_cipher_list(const(ssl_st)*, int) @nogc nothrow;
    int SSL_get_wfd(const(ssl_st)*) @nogc nothrow;
    int SSL_get_rfd(const(ssl_st)*) @nogc nothrow;
    int SSL_get_fd(const(ssl_st)*) @nogc nothrow;
    int SSL_CIPHER_is_aead(const(ssl_cipher_st)*) @nogc nothrow;
    const(evp_md_st)* SSL_CIPHER_get_handshake_digest(const(ssl_cipher_st)*) @nogc nothrow;
    int SSL_CIPHER_get_auth_nid(const(ssl_cipher_st)*) @nogc nothrow;
    int SSL_CIPHER_get_kx_nid(const(ssl_cipher_st)*) @nogc nothrow;
    ushort SSL_CIPHER_get_protocol_id(const(ssl_cipher_st)*) @nogc nothrow;
    uint SSL_CIPHER_get_id(const(ssl_cipher_st)*) @nogc nothrow;
    const(char)* OPENSSL_cipher_name(const(char)*) @nogc nothrow;
    const(char)* SSL_CIPHER_standard_name(const(ssl_cipher_st)*) @nogc nothrow;
    const(char)* SSL_CIPHER_get_name(const(ssl_cipher_st)*) @nogc nothrow;
    const(char)* SSL_CIPHER_get_version(const(ssl_cipher_st)*) @nogc nothrow;
    int SSL_CIPHER_get_bits(const(ssl_cipher_st)*, int*) @nogc nothrow;
    const(ssl_cipher_st)* SSL_get_pending_cipher(const(ssl_st)*) @nogc nothrow;
    const(ssl_cipher_st)* SSL_get_current_cipher(const(ssl_st)*) @nogc nothrow;
    void SSL_CTX_flush_sessions(ssl_ctx_st*, c_long) @nogc nothrow;
    int SSL_clear(ssl_st*) @nogc nothrow;
    int SSL_want(const(ssl_st)*) @nogc nothrow;
    void SSL_CTX_set1_cert_store(ssl_ctx_st*, x509_store_st*) @nogc nothrow;
    void SSL_CTX_set_cert_store(ssl_ctx_st*, x509_store_st*) @nogc nothrow;
    x509_store_st* SSL_CTX_get_cert_store(const(ssl_ctx_st)*) @nogc nothrow;
    c_long SSL_CTX_get_timeout(const(ssl_ctx_st)*) @nogc nothrow;
    c_long SSL_CTX_set_timeout(ssl_ctx_st*, c_long) @nogc nothrow;
    void SSL_CTX_free(ssl_ctx_st*) @nogc nothrow;
    int SSL_CTX_up_ref(ssl_ctx_st*) @nogc nothrow;
    ssl_ctx_st* SSL_CTX_new(const(ssl_method_st)*) @nogc nothrow;
    int SSL_CTX_set_cipher_list(ssl_ctx_st*, const(char)*) @nogc nothrow;
    void BIO_ssl_shutdown(bio_st*) @nogc nothrow;
    int BIO_ssl_copy_session_id(bio_st*, bio_st*) @nogc nothrow;
    bio_st* BIO_new_buffer_ssl_connect(ssl_ctx_st*) @nogc nothrow;
    bio_st* BIO_new_ssl_connect(ssl_ctx_st*) @nogc nothrow;
    bio_st* BIO_new_ssl(ssl_ctx_st*, int) @nogc nothrow;
    const(bio_method_st)* BIO_f_ssl() @nogc nothrow;
    ssl_session_st* PEM_read_bio_SSL_SESSION(bio_st*, ssl_session_st**, int function(char*, int, int, void*), void*) @nogc nothrow;
    ssl_session_st* PEM_read_SSL_SESSION(_IO_FILE*, ssl_session_st**, int function(char*, int, int, void*), void*) @nogc nothrow;
    int PEM_write_bio_SSL_SESSION(bio_st*, ssl_session_st*) @nogc nothrow;
    int PEM_write_SSL_SESSION(_IO_FILE*, ssl_session_st*) @nogc nothrow;
    c_ulong SSL_get_peer_finished(const(ssl_st)*, void*, c_ulong) @nogc nothrow;
    c_ulong SSL_get_finished(const(ssl_st)*, void*, c_ulong) @nogc nothrow;
    int SSL_is_init_finished(const(ssl_st)*) @nogc nothrow;
    int SSL_in_before(const(ssl_st)*) @nogc nothrow;
    int SSL_in_init(const(ssl_st)*) @nogc nothrow;
    enum _Anonymous_25
    {
        TLS_ST_BEFORE = 0,
        TLS_ST_OK = 1,
        DTLS_ST_CR_HELLO_VERIFY_REQUEST = 2,
        TLS_ST_CR_SRVR_HELLO = 3,
        TLS_ST_CR_CERT = 4,
        TLS_ST_CR_CERT_STATUS = 5,
        TLS_ST_CR_KEY_EXCH = 6,
        TLS_ST_CR_CERT_REQ = 7,
        TLS_ST_CR_SRVR_DONE = 8,
        TLS_ST_CR_SESSION_TICKET = 9,
        TLS_ST_CR_CHANGE = 10,
        TLS_ST_CR_FINISHED = 11,
        TLS_ST_CW_CLNT_HELLO = 12,
        TLS_ST_CW_CERT = 13,
        TLS_ST_CW_KEY_EXCH = 14,
        TLS_ST_CW_CERT_VRFY = 15,
        TLS_ST_CW_CHANGE = 16,
        TLS_ST_CW_NEXT_PROTO = 17,
        TLS_ST_CW_FINISHED = 18,
        TLS_ST_SW_HELLO_REQ = 19,
        TLS_ST_SR_CLNT_HELLO = 20,
        DTLS_ST_SW_HELLO_VERIFY_REQUEST = 21,
        TLS_ST_SW_SRVR_HELLO = 22,
        TLS_ST_SW_CERT = 23,
        TLS_ST_SW_KEY_EXCH = 24,
        TLS_ST_SW_CERT_REQ = 25,
        TLS_ST_SW_SRVR_DONE = 26,
        TLS_ST_SR_CERT = 27,
        TLS_ST_SR_KEY_EXCH = 28,
        TLS_ST_SR_CERT_VRFY = 29,
        TLS_ST_SR_NEXT_PROTO = 30,
        TLS_ST_SR_CHANGE = 31,
        TLS_ST_SR_FINISHED = 32,
        TLS_ST_SW_SESSION_TICKET = 33,
        TLS_ST_SW_CERT_STATUS = 34,
        TLS_ST_SW_CHANGE = 35,
        TLS_ST_SW_FINISHED = 36,
        TLS_ST_SW_ENCRYPTED_EXTENSIONS = 37,
        TLS_ST_CR_ENCRYPTED_EXTENSIONS = 38,
        TLS_ST_CR_CERT_VRFY = 39,
        TLS_ST_SW_CERT_VRFY = 40,
        TLS_ST_CR_HELLO_REQ = 41,
        TLS_ST_SW_KEY_UPDATE = 42,
        TLS_ST_CW_KEY_UPDATE = 43,
        TLS_ST_SR_KEY_UPDATE = 44,
        TLS_ST_CR_KEY_UPDATE = 45,
        TLS_ST_EARLY_DATA = 46,
        TLS_ST_PENDING_EARLY_DATA_END = 47,
        TLS_ST_CW_END_OF_EARLY_DATA = 48,
        TLS_ST_SR_END_OF_EARLY_DATA = 49,
    }
    enum TLS_ST_BEFORE = _Anonymous_25.TLS_ST_BEFORE;
    enum TLS_ST_OK = _Anonymous_25.TLS_ST_OK;
    enum DTLS_ST_CR_HELLO_VERIFY_REQUEST = _Anonymous_25.DTLS_ST_CR_HELLO_VERIFY_REQUEST;
    enum TLS_ST_CR_SRVR_HELLO = _Anonymous_25.TLS_ST_CR_SRVR_HELLO;
    enum TLS_ST_CR_CERT = _Anonymous_25.TLS_ST_CR_CERT;
    enum TLS_ST_CR_CERT_STATUS = _Anonymous_25.TLS_ST_CR_CERT_STATUS;
    enum TLS_ST_CR_KEY_EXCH = _Anonymous_25.TLS_ST_CR_KEY_EXCH;
    enum TLS_ST_CR_CERT_REQ = _Anonymous_25.TLS_ST_CR_CERT_REQ;
    enum TLS_ST_CR_SRVR_DONE = _Anonymous_25.TLS_ST_CR_SRVR_DONE;
    enum TLS_ST_CR_SESSION_TICKET = _Anonymous_25.TLS_ST_CR_SESSION_TICKET;
    enum TLS_ST_CR_CHANGE = _Anonymous_25.TLS_ST_CR_CHANGE;
    enum TLS_ST_CR_FINISHED = _Anonymous_25.TLS_ST_CR_FINISHED;
    enum TLS_ST_CW_CLNT_HELLO = _Anonymous_25.TLS_ST_CW_CLNT_HELLO;
    enum TLS_ST_CW_CERT = _Anonymous_25.TLS_ST_CW_CERT;
    enum TLS_ST_CW_KEY_EXCH = _Anonymous_25.TLS_ST_CW_KEY_EXCH;
    enum TLS_ST_CW_CERT_VRFY = _Anonymous_25.TLS_ST_CW_CERT_VRFY;
    enum TLS_ST_CW_CHANGE = _Anonymous_25.TLS_ST_CW_CHANGE;
    enum TLS_ST_CW_NEXT_PROTO = _Anonymous_25.TLS_ST_CW_NEXT_PROTO;
    enum TLS_ST_CW_FINISHED = _Anonymous_25.TLS_ST_CW_FINISHED;
    enum TLS_ST_SW_HELLO_REQ = _Anonymous_25.TLS_ST_SW_HELLO_REQ;
    enum TLS_ST_SR_CLNT_HELLO = _Anonymous_25.TLS_ST_SR_CLNT_HELLO;
    enum DTLS_ST_SW_HELLO_VERIFY_REQUEST = _Anonymous_25.DTLS_ST_SW_HELLO_VERIFY_REQUEST;
    enum TLS_ST_SW_SRVR_HELLO = _Anonymous_25.TLS_ST_SW_SRVR_HELLO;
    enum TLS_ST_SW_CERT = _Anonymous_25.TLS_ST_SW_CERT;
    enum TLS_ST_SW_KEY_EXCH = _Anonymous_25.TLS_ST_SW_KEY_EXCH;
    enum TLS_ST_SW_CERT_REQ = _Anonymous_25.TLS_ST_SW_CERT_REQ;
    enum TLS_ST_SW_SRVR_DONE = _Anonymous_25.TLS_ST_SW_SRVR_DONE;
    enum TLS_ST_SR_CERT = _Anonymous_25.TLS_ST_SR_CERT;
    enum TLS_ST_SR_KEY_EXCH = _Anonymous_25.TLS_ST_SR_KEY_EXCH;
    enum TLS_ST_SR_CERT_VRFY = _Anonymous_25.TLS_ST_SR_CERT_VRFY;
    enum TLS_ST_SR_NEXT_PROTO = _Anonymous_25.TLS_ST_SR_NEXT_PROTO;
    enum TLS_ST_SR_CHANGE = _Anonymous_25.TLS_ST_SR_CHANGE;
    enum TLS_ST_SR_FINISHED = _Anonymous_25.TLS_ST_SR_FINISHED;
    enum TLS_ST_SW_SESSION_TICKET = _Anonymous_25.TLS_ST_SW_SESSION_TICKET;
    enum TLS_ST_SW_CERT_STATUS = _Anonymous_25.TLS_ST_SW_CERT_STATUS;
    enum TLS_ST_SW_CHANGE = _Anonymous_25.TLS_ST_SW_CHANGE;
    enum TLS_ST_SW_FINISHED = _Anonymous_25.TLS_ST_SW_FINISHED;
    enum TLS_ST_SW_ENCRYPTED_EXTENSIONS = _Anonymous_25.TLS_ST_SW_ENCRYPTED_EXTENSIONS;
    enum TLS_ST_CR_ENCRYPTED_EXTENSIONS = _Anonymous_25.TLS_ST_CR_ENCRYPTED_EXTENSIONS;
    enum TLS_ST_CR_CERT_VRFY = _Anonymous_25.TLS_ST_CR_CERT_VRFY;
    enum TLS_ST_SW_CERT_VRFY = _Anonymous_25.TLS_ST_SW_CERT_VRFY;
    enum TLS_ST_CR_HELLO_REQ = _Anonymous_25.TLS_ST_CR_HELLO_REQ;
    enum TLS_ST_SW_KEY_UPDATE = _Anonymous_25.TLS_ST_SW_KEY_UPDATE;
    enum TLS_ST_CW_KEY_UPDATE = _Anonymous_25.TLS_ST_CW_KEY_UPDATE;
    enum TLS_ST_SR_KEY_UPDATE = _Anonymous_25.TLS_ST_SR_KEY_UPDATE;
    enum TLS_ST_CR_KEY_UPDATE = _Anonymous_25.TLS_ST_CR_KEY_UPDATE;
    enum TLS_ST_EARLY_DATA = _Anonymous_25.TLS_ST_EARLY_DATA;
    enum TLS_ST_PENDING_EARLY_DATA_END = _Anonymous_25.TLS_ST_PENDING_EARLY_DATA_END;
    enum TLS_ST_CW_END_OF_EARLY_DATA = _Anonymous_25.TLS_ST_CW_END_OF_EARLY_DATA;
    enum TLS_ST_SR_END_OF_EARLY_DATA = _Anonymous_25.TLS_ST_SR_END_OF_EARLY_DATA;
    alias OSSL_HANDSHAKE_STATE = _Anonymous_25;
    void SSL_set_debug(ssl_st*, int) @nogc nothrow;
    static void sk_SSL_COMP_pop_free(stack_st_SSL_COMP*, void function(ssl_comp_st*)) @nogc nothrow;
    static ssl_comp_st* sk_SSL_COMP_shift(stack_st_SSL_COMP*) @nogc nothrow;
    static int sk_SSL_COMP_find_ex(stack_st_SSL_COMP*, ssl_comp_st*) @nogc nothrow;
    static int sk_SSL_COMP_insert(stack_st_SSL_COMP*, ssl_comp_st*, int) @nogc nothrow;
    static ssl_comp_st* sk_SSL_COMP_set(stack_st_SSL_COMP*, int, ssl_comp_st*) @nogc nothrow;
    static int sk_SSL_COMP_find(stack_st_SSL_COMP*, ssl_comp_st*) @nogc nothrow;
    static void sk_SSL_COMP_sort(stack_st_SSL_COMP*) @nogc nothrow;
    static int sk_SSL_COMP_is_sorted(const(stack_st_SSL_COMP)*) @nogc nothrow;
    static stack_st_SSL_COMP* sk_SSL_COMP_dup(const(stack_st_SSL_COMP)*) @nogc nothrow;
    static stack_st_SSL_COMP* sk_SSL_COMP_deep_copy(const(stack_st_SSL_COMP)*, ssl_comp_st* function(const(ssl_comp_st)*), void function(ssl_comp_st*)) @nogc nothrow;
    static int function(const(const(ssl_comp_st)*)*, const(const(ssl_comp_st)*)*) sk_SSL_COMP_set_cmp_func(stack_st_SSL_COMP*, int function(const(const(ssl_comp_st)*)*, const(const(ssl_comp_st)*)*)) @nogc nothrow;
    static int sk_SSL_COMP_unshift(stack_st_SSL_COMP*, ssl_comp_st*) @nogc nothrow;
    static ssl_comp_st* sk_SSL_COMP_pop(stack_st_SSL_COMP*) @nogc nothrow;
    static int sk_SSL_COMP_push(stack_st_SSL_COMP*, ssl_comp_st*) @nogc nothrow;
    static ssl_comp_st* sk_SSL_COMP_delete_ptr(stack_st_SSL_COMP*, ssl_comp_st*) @nogc nothrow;
    static ssl_comp_st* sk_SSL_COMP_delete(stack_st_SSL_COMP*, int) @nogc nothrow;
    alias OCSP_CERTID = ocsp_cert_id_st;
    struct ocsp_cert_id_st;
    static stack_st_OCSP_CERTID* sk_OCSP_CERTID_new(int function(const(const(ocsp_cert_id_st)*)*, const(const(ocsp_cert_id_st)*)*)) @nogc nothrow;
    static stack_st_OCSP_CERTID* sk_OCSP_CERTID_new_null() @nogc nothrow;
    static int sk_OCSP_CERTID_unshift(stack_st_OCSP_CERTID*, ocsp_cert_id_st*) @nogc nothrow;
    static int sk_OCSP_CERTID_num(const(stack_st_OCSP_CERTID)*) @nogc nothrow;
    alias sk_OCSP_CERTID_copyfunc = ocsp_cert_id_st* function(const(ocsp_cert_id_st)*);
    alias sk_OCSP_CERTID_freefunc = void function(ocsp_cert_id_st*);
    alias sk_OCSP_CERTID_compfunc = int function(const(const(ocsp_cert_id_st)*)*, const(const(ocsp_cert_id_st)*)*);
    struct stack_st_OCSP_CERTID;
    static stack_st_OCSP_CERTID* sk_OCSP_CERTID_new_reserve(int function(const(const(ocsp_cert_id_st)*)*, const(const(ocsp_cert_id_st)*)*), int) @nogc nothrow;
    static int sk_OCSP_CERTID_reserve(stack_st_OCSP_CERTID*, int) @nogc nothrow;
    static void sk_OCSP_CERTID_free(stack_st_OCSP_CERTID*) @nogc nothrow;
    static void sk_OCSP_CERTID_zero(stack_st_OCSP_CERTID*) @nogc nothrow;
    static ocsp_cert_id_st* sk_OCSP_CERTID_delete(stack_st_OCSP_CERTID*, int) @nogc nothrow;
    static int sk_OCSP_CERTID_push(stack_st_OCSP_CERTID*, ocsp_cert_id_st*) @nogc nothrow;
    static ocsp_cert_id_st* sk_OCSP_CERTID_value(const(stack_st_OCSP_CERTID)*, int) @nogc nothrow;
    static ocsp_cert_id_st* sk_OCSP_CERTID_pop(stack_st_OCSP_CERTID*) @nogc nothrow;
    static int function(const(const(ocsp_cert_id_st)*)*, const(const(ocsp_cert_id_st)*)*) sk_OCSP_CERTID_set_cmp_func(stack_st_OCSP_CERTID*, int function(const(const(ocsp_cert_id_st)*)*, const(const(ocsp_cert_id_st)*)*)) @nogc nothrow;
    static stack_st_OCSP_CERTID* sk_OCSP_CERTID_deep_copy(const(stack_st_OCSP_CERTID)*, ocsp_cert_id_st* function(const(ocsp_cert_id_st)*), void function(ocsp_cert_id_st*)) @nogc nothrow;
    static stack_st_OCSP_CERTID* sk_OCSP_CERTID_dup(const(stack_st_OCSP_CERTID)*) @nogc nothrow;
    static int sk_OCSP_CERTID_is_sorted(const(stack_st_OCSP_CERTID)*) @nogc nothrow;
    static void sk_OCSP_CERTID_sort(stack_st_OCSP_CERTID*) @nogc nothrow;
    static ocsp_cert_id_st* sk_OCSP_CERTID_delete_ptr(stack_st_OCSP_CERTID*, ocsp_cert_id_st*) @nogc nothrow;
    static ocsp_cert_id_st* sk_OCSP_CERTID_shift(stack_st_OCSP_CERTID*) @nogc nothrow;
    static void sk_OCSP_CERTID_pop_free(stack_st_OCSP_CERTID*, void function(ocsp_cert_id_st*)) @nogc nothrow;
    static int sk_OCSP_CERTID_find_ex(stack_st_OCSP_CERTID*, ocsp_cert_id_st*) @nogc nothrow;
    static int sk_OCSP_CERTID_find(stack_st_OCSP_CERTID*, ocsp_cert_id_st*) @nogc nothrow;
    static int sk_OCSP_CERTID_insert(stack_st_OCSP_CERTID*, ocsp_cert_id_st*, int) @nogc nothrow;
    static ocsp_cert_id_st* sk_OCSP_CERTID_set(stack_st_OCSP_CERTID*, int, ocsp_cert_id_st*) @nogc nothrow;
    alias OCSP_ONEREQ = ocsp_one_request_st;
    struct ocsp_one_request_st;
    static int function(const(const(ocsp_one_request_st)*)*, const(const(ocsp_one_request_st)*)*) sk_OCSP_ONEREQ_set_cmp_func(stack_st_OCSP_ONEREQ*, int function(const(const(ocsp_one_request_st)*)*, const(const(ocsp_one_request_st)*)*)) @nogc nothrow;
    static stack_st_OCSP_ONEREQ* sk_OCSP_ONEREQ_deep_copy(const(stack_st_OCSP_ONEREQ)*, ocsp_one_request_st* function(const(ocsp_one_request_st)*), void function(ocsp_one_request_st*)) @nogc nothrow;
    static stack_st_OCSP_ONEREQ* sk_OCSP_ONEREQ_dup(const(stack_st_OCSP_ONEREQ)*) @nogc nothrow;
    static int sk_OCSP_ONEREQ_is_sorted(const(stack_st_OCSP_ONEREQ)*) @nogc nothrow;
    static void sk_OCSP_ONEREQ_sort(stack_st_OCSP_ONEREQ*) @nogc nothrow;
    static int sk_OCSP_ONEREQ_find_ex(stack_st_OCSP_ONEREQ*, ocsp_one_request_st*) @nogc nothrow;
    static int sk_OCSP_ONEREQ_find(stack_st_OCSP_ONEREQ*, ocsp_one_request_st*) @nogc nothrow;
    static ocsp_one_request_st* sk_OCSP_ONEREQ_set(stack_st_OCSP_ONEREQ*, int, ocsp_one_request_st*) @nogc nothrow;
    static int sk_OCSP_ONEREQ_insert(stack_st_OCSP_ONEREQ*, ocsp_one_request_st*, int) @nogc nothrow;
    static void sk_OCSP_ONEREQ_pop_free(stack_st_OCSP_ONEREQ*, void function(ocsp_one_request_st*)) @nogc nothrow;
    static ocsp_one_request_st* sk_OCSP_ONEREQ_shift(stack_st_OCSP_ONEREQ*) @nogc nothrow;
    static ocsp_one_request_st* sk_OCSP_ONEREQ_pop(stack_st_OCSP_ONEREQ*) @nogc nothrow;
    static int sk_OCSP_ONEREQ_unshift(stack_st_OCSP_ONEREQ*, ocsp_one_request_st*) @nogc nothrow;
    static int sk_OCSP_ONEREQ_push(stack_st_OCSP_ONEREQ*, ocsp_one_request_st*) @nogc nothrow;
    static ocsp_one_request_st* sk_OCSP_ONEREQ_delete(stack_st_OCSP_ONEREQ*, int) @nogc nothrow;
    static void sk_OCSP_ONEREQ_zero(stack_st_OCSP_ONEREQ*) @nogc nothrow;
    static void sk_OCSP_ONEREQ_free(stack_st_OCSP_ONEREQ*) @nogc nothrow;
    static int sk_OCSP_ONEREQ_reserve(stack_st_OCSP_ONEREQ*, int) @nogc nothrow;
    static stack_st_OCSP_ONEREQ* sk_OCSP_ONEREQ_new_reserve(int function(const(const(ocsp_one_request_st)*)*, const(const(ocsp_one_request_st)*)*), int) @nogc nothrow;
    static stack_st_OCSP_ONEREQ* sk_OCSP_ONEREQ_new_null() @nogc nothrow;
    static stack_st_OCSP_ONEREQ* sk_OCSP_ONEREQ_new(int function(const(const(ocsp_one_request_st)*)*, const(const(ocsp_one_request_st)*)*)) @nogc nothrow;
    static ocsp_one_request_st* sk_OCSP_ONEREQ_value(const(stack_st_OCSP_ONEREQ)*, int) @nogc nothrow;
    static int sk_OCSP_ONEREQ_num(const(stack_st_OCSP_ONEREQ)*) @nogc nothrow;
    alias sk_OCSP_ONEREQ_copyfunc = ocsp_one_request_st* function(const(ocsp_one_request_st)*);
    alias sk_OCSP_ONEREQ_freefunc = void function(ocsp_one_request_st*);
    alias sk_OCSP_ONEREQ_compfunc = int function(const(const(ocsp_one_request_st)*)*, const(const(ocsp_one_request_st)*)*);
    struct stack_st_OCSP_ONEREQ;
    static ocsp_one_request_st* sk_OCSP_ONEREQ_delete_ptr(stack_st_OCSP_ONEREQ*, ocsp_one_request_st*) @nogc nothrow;
    alias OCSP_REQINFO = ocsp_req_info_st;
    struct ocsp_req_info_st;
    alias OCSP_SIGNATURE = ocsp_signature_st;
    struct ocsp_signature_st;
    alias OCSP_REQUEST = ocsp_request_st;
    struct ocsp_request_st;
    static void sk_SSL_COMP_zero(stack_st_SSL_COMP*) @nogc nothrow;
    static void sk_SSL_COMP_free(stack_st_SSL_COMP*) @nogc nothrow;
    static int sk_SSL_COMP_reserve(stack_st_SSL_COMP*, int) @nogc nothrow;
    static stack_st_SSL_COMP* sk_SSL_COMP_new_reserve(int function(const(const(ssl_comp_st)*)*, const(const(ssl_comp_st)*)*), int) @nogc nothrow;
    static stack_st_SSL_COMP* sk_SSL_COMP_new_null() @nogc nothrow;
    static stack_st_SSL_COMP* sk_SSL_COMP_new(int function(const(const(ssl_comp_st)*)*, const(const(ssl_comp_st)*)*)) @nogc nothrow;
    alias OCSP_RESPBYTES = ocsp_resp_bytes_st;
    struct ocsp_resp_bytes_st;
    static ssl_comp_st* sk_SSL_COMP_value(const(stack_st_SSL_COMP)*, int) @nogc nothrow;
    static int sk_SSL_COMP_num(const(stack_st_SSL_COMP)*) @nogc nothrow;
    static int function(const(const(ocsp_responder_id_st)*)*, const(const(ocsp_responder_id_st)*)*) sk_OCSP_RESPID_set_cmp_func(stack_st_OCSP_RESPID*, int function(const(const(ocsp_responder_id_st)*)*, const(const(ocsp_responder_id_st)*)*)) @nogc nothrow;
    static stack_st_OCSP_RESPID* sk_OCSP_RESPID_dup(const(stack_st_OCSP_RESPID)*) @nogc nothrow;
    static int sk_OCSP_RESPID_is_sorted(const(stack_st_OCSP_RESPID)*) @nogc nothrow;
    static void sk_OCSP_RESPID_sort(stack_st_OCSP_RESPID*) @nogc nothrow;
    static int sk_OCSP_RESPID_find_ex(stack_st_OCSP_RESPID*, ocsp_responder_id_st*) @nogc nothrow;
    static int sk_OCSP_RESPID_find(stack_st_OCSP_RESPID*, ocsp_responder_id_st*) @nogc nothrow;
    static ocsp_responder_id_st* sk_OCSP_RESPID_set(stack_st_OCSP_RESPID*, int, ocsp_responder_id_st*) @nogc nothrow;
    static int sk_OCSP_RESPID_insert(stack_st_OCSP_RESPID*, ocsp_responder_id_st*, int) @nogc nothrow;
    static void sk_OCSP_RESPID_pop_free(stack_st_OCSP_RESPID*, void function(ocsp_responder_id_st*)) @nogc nothrow;
    static ocsp_responder_id_st* sk_OCSP_RESPID_shift(stack_st_OCSP_RESPID*) @nogc nothrow;
    static ocsp_responder_id_st* sk_OCSP_RESPID_pop(stack_st_OCSP_RESPID*) @nogc nothrow;
    struct stack_st_OCSP_RESPID;
    alias sk_OCSP_RESPID_compfunc = int function(const(const(ocsp_responder_id_st)*)*, const(const(ocsp_responder_id_st)*)*);
    static int sk_OCSP_RESPID_push(stack_st_OCSP_RESPID*, ocsp_responder_id_st*) @nogc nothrow;
    static ocsp_responder_id_st* sk_OCSP_RESPID_delete_ptr(stack_st_OCSP_RESPID*, ocsp_responder_id_st*) @nogc nothrow;
    static ocsp_responder_id_st* sk_OCSP_RESPID_delete(stack_st_OCSP_RESPID*, int) @nogc nothrow;
    static void sk_OCSP_RESPID_zero(stack_st_OCSP_RESPID*) @nogc nothrow;
    static void sk_OCSP_RESPID_free(stack_st_OCSP_RESPID*) @nogc nothrow;
    static int sk_OCSP_RESPID_reserve(stack_st_OCSP_RESPID*, int) @nogc nothrow;
    static stack_st_OCSP_RESPID* sk_OCSP_RESPID_new_reserve(int function(const(const(ocsp_responder_id_st)*)*, const(const(ocsp_responder_id_st)*)*), int) @nogc nothrow;
    static stack_st_OCSP_RESPID* sk_OCSP_RESPID_new_null() @nogc nothrow;
    static stack_st_OCSP_RESPID* sk_OCSP_RESPID_new(int function(const(const(ocsp_responder_id_st)*)*, const(const(ocsp_responder_id_st)*)*)) @nogc nothrow;
    static ocsp_responder_id_st* sk_OCSP_RESPID_value(const(stack_st_OCSP_RESPID)*, int) @nogc nothrow;
    static int sk_OCSP_RESPID_num(const(stack_st_OCSP_RESPID)*) @nogc nothrow;
    alias sk_OCSP_RESPID_copyfunc = ocsp_responder_id_st* function(const(ocsp_responder_id_st)*);
    alias sk_OCSP_RESPID_freefunc = void function(ocsp_responder_id_st*);
    static stack_st_OCSP_RESPID* sk_OCSP_RESPID_deep_copy(const(stack_st_OCSP_RESPID)*, ocsp_responder_id_st* function(const(ocsp_responder_id_st)*), void function(ocsp_responder_id_st*)) @nogc nothrow;
    static int sk_OCSP_RESPID_unshift(stack_st_OCSP_RESPID*, ocsp_responder_id_st*) @nogc nothrow;
    void OCSP_RESPID_free(ocsp_responder_id_st*) @nogc nothrow;
    int i2d_OCSP_RESPID(ocsp_responder_id_st*, ubyte**) @nogc nothrow;
    ocsp_responder_id_st* d2i_OCSP_RESPID(ocsp_responder_id_st**, const(ubyte)**, c_long) @nogc nothrow;
    ocsp_responder_id_st* OCSP_RESPID_new() @nogc nothrow;
    alias OCSP_REVOKEDINFO = ocsp_revoked_info_st;
    struct ocsp_revoked_info_st;
    alias sk_SSL_COMP_copyfunc = ssl_comp_st* function(const(ssl_comp_st)*);
    alias sk_SSL_COMP_freefunc = void function(ssl_comp_st*);
    alias sk_SSL_COMP_compfunc = int function(const(const(ssl_comp_st)*)*, const(const(ssl_comp_st)*)*);
    alias OCSP_CERTSTATUS = ocsp_cert_status_st;
    struct ocsp_cert_status_st;
    alias OCSP_SINGLERESP = ocsp_single_response_st;
    struct ocsp_single_response_st;
    static int sk_OCSP_SINGLERESP_find_ex(stack_st_OCSP_SINGLERESP*, ocsp_single_response_st*) @nogc nothrow;
    static int sk_OCSP_SINGLERESP_find(stack_st_OCSP_SINGLERESP*, ocsp_single_response_st*) @nogc nothrow;
    static ocsp_single_response_st* sk_OCSP_SINGLERESP_set(stack_st_OCSP_SINGLERESP*, int, ocsp_single_response_st*) @nogc nothrow;
    static int sk_OCSP_SINGLERESP_insert(stack_st_OCSP_SINGLERESP*, ocsp_single_response_st*, int) @nogc nothrow;
    static void sk_OCSP_SINGLERESP_pop_free(stack_st_OCSP_SINGLERESP*, void function(ocsp_single_response_st*)) @nogc nothrow;
    static ocsp_single_response_st* sk_OCSP_SINGLERESP_shift(stack_st_OCSP_SINGLERESP*) @nogc nothrow;
    static ocsp_single_response_st* sk_OCSP_SINGLERESP_pop(stack_st_OCSP_SINGLERESP*) @nogc nothrow;
    static int sk_OCSP_SINGLERESP_unshift(stack_st_OCSP_SINGLERESP*, ocsp_single_response_st*) @nogc nothrow;
    static int sk_OCSP_SINGLERESP_push(stack_st_OCSP_SINGLERESP*, ocsp_single_response_st*) @nogc nothrow;
    static ocsp_single_response_st* sk_OCSP_SINGLERESP_delete_ptr(stack_st_OCSP_SINGLERESP*, ocsp_single_response_st*) @nogc nothrow;
    static ocsp_single_response_st* sk_OCSP_SINGLERESP_delete(stack_st_OCSP_SINGLERESP*, int) @nogc nothrow;
    static void sk_OCSP_SINGLERESP_zero(stack_st_OCSP_SINGLERESP*) @nogc nothrow;
    static void sk_OCSP_SINGLERESP_sort(stack_st_OCSP_SINGLERESP*) @nogc nothrow;
    static void sk_OCSP_SINGLERESP_free(stack_st_OCSP_SINGLERESP*) @nogc nothrow;
    static stack_st_OCSP_SINGLERESP* sk_OCSP_SINGLERESP_new_reserve(int function(const(const(ocsp_single_response_st)*)*, const(const(ocsp_single_response_st)*)*), int) @nogc nothrow;
    static int function(const(const(ocsp_single_response_st)*)*, const(const(ocsp_single_response_st)*)*) sk_OCSP_SINGLERESP_set_cmp_func(stack_st_OCSP_SINGLERESP*, int function(const(const(ocsp_single_response_st)*)*, const(const(ocsp_single_response_st)*)*)) @nogc nothrow;
    static stack_st_OCSP_SINGLERESP* sk_OCSP_SINGLERESP_deep_copy(const(stack_st_OCSP_SINGLERESP)*, ocsp_single_response_st* function(const(ocsp_single_response_st)*), void function(ocsp_single_response_st*)) @nogc nothrow;
    static stack_st_OCSP_SINGLERESP* sk_OCSP_SINGLERESP_dup(const(stack_st_OCSP_SINGLERESP)*) @nogc nothrow;
    static int sk_OCSP_SINGLERESP_is_sorted(const(stack_st_OCSP_SINGLERESP)*) @nogc nothrow;
    static stack_st_OCSP_SINGLERESP* sk_OCSP_SINGLERESP_new_null() @nogc nothrow;
    static stack_st_OCSP_SINGLERESP* sk_OCSP_SINGLERESP_new(int function(const(const(ocsp_single_response_st)*)*, const(const(ocsp_single_response_st)*)*)) @nogc nothrow;
    static ocsp_single_response_st* sk_OCSP_SINGLERESP_value(const(stack_st_OCSP_SINGLERESP)*, int) @nogc nothrow;
    static int sk_OCSP_SINGLERESP_num(const(stack_st_OCSP_SINGLERESP)*) @nogc nothrow;
    alias sk_OCSP_SINGLERESP_copyfunc = ocsp_single_response_st* function(const(ocsp_single_response_st)*);
    alias sk_OCSP_SINGLERESP_freefunc = void function(ocsp_single_response_st*);
    alias sk_OCSP_SINGLERESP_compfunc = int function(const(const(ocsp_single_response_st)*)*, const(const(ocsp_single_response_st)*)*);
    struct stack_st_OCSP_SINGLERESP;
    static int sk_OCSP_SINGLERESP_reserve(stack_st_OCSP_SINGLERESP*, int) @nogc nothrow;
    alias OCSP_RESPDATA = ocsp_response_data_st;
    struct ocsp_response_data_st;
    alias OCSP_BASICRESP = ocsp_basic_response_st;
    struct ocsp_basic_response_st;
    alias OCSP_CRLID = ocsp_crl_id_st;
    struct ocsp_crl_id_st;
    alias OCSP_SERVICELOC = ocsp_service_locator_st;
    struct ocsp_service_locator_st;
    static int sk_SSL_CIPHER_unshift(stack_st_SSL_CIPHER*, const(ssl_cipher_st)*) @nogc nothrow;
    alias sk_SSL_CIPHER_compfunc = int function(const(const(ssl_cipher_st)*)*, const(const(ssl_cipher_st)*)*);
    alias sk_SSL_CIPHER_freefunc = void function(ssl_cipher_st*);
    alias sk_SSL_CIPHER_copyfunc = ssl_cipher_st* function(const(ssl_cipher_st)*);
    static int sk_SSL_CIPHER_num(const(stack_st_SSL_CIPHER)*) @nogc nothrow;
    static const(ssl_cipher_st)* sk_SSL_CIPHER_value(const(stack_st_SSL_CIPHER)*, int) @nogc nothrow;
    static stack_st_SSL_CIPHER* sk_SSL_CIPHER_new(int function(const(const(ssl_cipher_st)*)*, const(const(ssl_cipher_st)*)*)) @nogc nothrow;
    static stack_st_SSL_CIPHER* sk_SSL_CIPHER_new_null() @nogc nothrow;
    static stack_st_SSL_CIPHER* sk_SSL_CIPHER_new_reserve(int function(const(const(ssl_cipher_st)*)*, const(const(ssl_cipher_st)*)*), int) @nogc nothrow;
    static int sk_SSL_CIPHER_reserve(stack_st_SSL_CIPHER*, int) @nogc nothrow;
    static void sk_SSL_CIPHER_free(stack_st_SSL_CIPHER*) @nogc nothrow;
    static void sk_SSL_CIPHER_zero(stack_st_SSL_CIPHER*) @nogc nothrow;
    static const(ssl_cipher_st)* sk_SSL_CIPHER_delete(stack_st_SSL_CIPHER*, int) @nogc nothrow;
    static const(ssl_cipher_st)* sk_SSL_CIPHER_delete_ptr(stack_st_SSL_CIPHER*, const(ssl_cipher_st)*) @nogc nothrow;
    static int sk_SSL_CIPHER_push(stack_st_SSL_CIPHER*, const(ssl_cipher_st)*) @nogc nothrow;
    ocsp_cert_id_st* OCSP_CERTID_dup(ocsp_cert_id_st*) @nogc nothrow;
    ocsp_response_st* OCSP_sendreq_bio(bio_st*, const(char)*, ocsp_request_st*) @nogc nothrow;
    ocsp_req_ctx_st* OCSP_sendreq_new(bio_st*, const(char)*, ocsp_request_st*, int) @nogc nothrow;
    int OCSP_REQ_CTX_nbio(ocsp_req_ctx_st*) @nogc nothrow;
    int OCSP_sendreq_nbio(ocsp_response_st**, ocsp_req_ctx_st*) @nogc nothrow;
    ocsp_req_ctx_st* OCSP_REQ_CTX_new(bio_st*, int) @nogc nothrow;
    void OCSP_REQ_CTX_free(ocsp_req_ctx_st*) @nogc nothrow;
    void OCSP_set_max_response_length(ocsp_req_ctx_st*, c_ulong) @nogc nothrow;
    int OCSP_REQ_CTX_i2d(ocsp_req_ctx_st*, const(ASN1_ITEM_st)*, ASN1_VALUE_st*) @nogc nothrow;
    int OCSP_REQ_CTX_nbio_d2i(ocsp_req_ctx_st*, ASN1_VALUE_st**, const(ASN1_ITEM_st)*) @nogc nothrow;
    bio_st* OCSP_REQ_CTX_get0_mem_bio(ocsp_req_ctx_st*) @nogc nothrow;
    int OCSP_REQ_CTX_http(ocsp_req_ctx_st*, const(char)*, const(char)*) @nogc nothrow;
    int OCSP_REQ_CTX_set1_req(ocsp_req_ctx_st*, ocsp_request_st*) @nogc nothrow;
    int OCSP_REQ_CTX_add1_header(ocsp_req_ctx_st*, const(char)*, const(char)*) @nogc nothrow;
    ocsp_cert_id_st* OCSP_cert_to_id(const(evp_md_st)*, const(x509_st)*, const(x509_st)*) @nogc nothrow;
    ocsp_cert_id_st* OCSP_cert_id_new(const(evp_md_st)*, const(X509_name_st)*, const(asn1_string_st)*, const(asn1_string_st)*) @nogc nothrow;
    ocsp_one_request_st* OCSP_request_add0_id(ocsp_request_st*, ocsp_cert_id_st*) @nogc nothrow;
    int OCSP_request_add1_nonce(ocsp_request_st*, ubyte*, int) @nogc nothrow;
    int OCSP_basic_add1_nonce(ocsp_basic_response_st*, ubyte*, int) @nogc nothrow;
    int OCSP_check_nonce(ocsp_request_st*, ocsp_basic_response_st*) @nogc nothrow;
    int OCSP_copy_nonce(ocsp_basic_response_st*, ocsp_request_st*) @nogc nothrow;
    int OCSP_request_set1_name(ocsp_request_st*, X509_name_st*) @nogc nothrow;
    int OCSP_request_add1_cert(ocsp_request_st*, x509_st*) @nogc nothrow;
    int OCSP_request_sign(ocsp_request_st*, x509_st*, evp_pkey_st*, const(evp_md_st)*, stack_st_X509*, c_ulong) @nogc nothrow;
    int OCSP_response_status(ocsp_response_st*) @nogc nothrow;
    ocsp_basic_response_st* OCSP_response_get1_basic(ocsp_response_st*) @nogc nothrow;
    const(asn1_string_st)* OCSP_resp_get0_signature(const(ocsp_basic_response_st)*) @nogc nothrow;
    int OCSP_resp_count(ocsp_basic_response_st*) @nogc nothrow;
    ocsp_single_response_st* OCSP_resp_get0(ocsp_basic_response_st*, int) @nogc nothrow;
    const(asn1_string_st)* OCSP_resp_get0_produced_at(const(ocsp_basic_response_st)*) @nogc nothrow;
    const(stack_st_X509)* OCSP_resp_get0_certs(const(ocsp_basic_response_st)*) @nogc nothrow;
    int OCSP_resp_get0_id(const(ocsp_basic_response_st)*, const(asn1_string_st)**, const(X509_name_st)**) @nogc nothrow;
    int OCSP_resp_find(ocsp_basic_response_st*, ocsp_cert_id_st*, int) @nogc nothrow;
    int OCSP_single_get0_status(ocsp_single_response_st*, int*, asn1_string_st**, asn1_string_st**, asn1_string_st**) @nogc nothrow;
    int OCSP_resp_find_status(ocsp_basic_response_st*, ocsp_cert_id_st*, int*, int*, asn1_string_st**, asn1_string_st**, asn1_string_st**) @nogc nothrow;
    int OCSP_check_validity(asn1_string_st*, asn1_string_st*, c_long, c_long) @nogc nothrow;
    int OCSP_request_verify(ocsp_request_st*, stack_st_X509*, x509_store_st*, c_ulong) @nogc nothrow;
    int OCSP_parse_url(const(char)*, char**, char**, char**, int*) @nogc nothrow;
    int OCSP_id_issuer_cmp(ocsp_cert_id_st*, ocsp_cert_id_st*) @nogc nothrow;
    int OCSP_id_cmp(ocsp_cert_id_st*, ocsp_cert_id_st*) @nogc nothrow;
    int OCSP_request_onereq_count(ocsp_request_st*) @nogc nothrow;
    ocsp_one_request_st* OCSP_request_onereq_get0(ocsp_request_st*, int) @nogc nothrow;
    ocsp_cert_id_st* OCSP_onereq_get0_id(ocsp_one_request_st*) @nogc nothrow;
    int OCSP_id_get0_info(asn1_string_st**, asn1_object_st**, asn1_string_st**, asn1_string_st**, ocsp_cert_id_st*) @nogc nothrow;
    int OCSP_request_is_signed(ocsp_request_st*) @nogc nothrow;
    ocsp_response_st* OCSP_response_create(int, ocsp_basic_response_st*) @nogc nothrow;
    ocsp_single_response_st* OCSP_basic_add1_status(ocsp_basic_response_st*, ocsp_cert_id_st*, int, int, asn1_string_st*, asn1_string_st*, asn1_string_st*) @nogc nothrow;
    int OCSP_basic_add1_cert(ocsp_basic_response_st*, x509_st*) @nogc nothrow;
    int OCSP_basic_sign(ocsp_basic_response_st*, x509_st*, evp_pkey_st*, const(evp_md_st)*, stack_st_X509*, c_ulong) @nogc nothrow;
    X509_extension_st* OCSP_crlID_new(const(char)*, c_long*, char*) @nogc nothrow;
    X509_extension_st* OCSP_accept_responses_new(char**) @nogc nothrow;
    X509_extension_st* OCSP_archive_cutoff_new(char*) @nogc nothrow;
    X509_extension_st* OCSP_url_svcloc_new(X509_name_st*, const(char)**) @nogc nothrow;
    int OCSP_REQUEST_get_ext_count(ocsp_request_st*) @nogc nothrow;
    int OCSP_REQUEST_get_ext_by_NID(ocsp_request_st*, int, int) @nogc nothrow;
    int OCSP_REQUEST_get_ext_by_OBJ(ocsp_request_st*, const(asn1_object_st)*, int) @nogc nothrow;
    int OCSP_REQUEST_get_ext_by_critical(ocsp_request_st*, int, int) @nogc nothrow;
    X509_extension_st* OCSP_REQUEST_get_ext(ocsp_request_st*, int) @nogc nothrow;
    X509_extension_st* OCSP_REQUEST_delete_ext(ocsp_request_st*, int) @nogc nothrow;
    void* OCSP_REQUEST_get1_ext_d2i(ocsp_request_st*, int, int*, int*) @nogc nothrow;
    int OCSP_REQUEST_add1_ext_i2d(ocsp_request_st*, int, void*, int, c_ulong) @nogc nothrow;
    int OCSP_REQUEST_add_ext(ocsp_request_st*, X509_extension_st*, int) @nogc nothrow;
    int OCSP_ONEREQ_get_ext_count(ocsp_one_request_st*) @nogc nothrow;
    int OCSP_ONEREQ_get_ext_by_NID(ocsp_one_request_st*, int, int) @nogc nothrow;
    int OCSP_ONEREQ_get_ext_by_OBJ(ocsp_one_request_st*, const(asn1_object_st)*, int) @nogc nothrow;
    int OCSP_ONEREQ_get_ext_by_critical(ocsp_one_request_st*, int, int) @nogc nothrow;
    X509_extension_st* OCSP_ONEREQ_get_ext(ocsp_one_request_st*, int) @nogc nothrow;
    X509_extension_st* OCSP_ONEREQ_delete_ext(ocsp_one_request_st*, int) @nogc nothrow;
    void* OCSP_ONEREQ_get1_ext_d2i(ocsp_one_request_st*, int, int*, int*) @nogc nothrow;
    int OCSP_ONEREQ_add1_ext_i2d(ocsp_one_request_st*, int, void*, int, c_ulong) @nogc nothrow;
    int OCSP_ONEREQ_add_ext(ocsp_one_request_st*, X509_extension_st*, int) @nogc nothrow;
    int OCSP_BASICRESP_get_ext_count(ocsp_basic_response_st*) @nogc nothrow;
    int OCSP_BASICRESP_get_ext_by_NID(ocsp_basic_response_st*, int, int) @nogc nothrow;
    int OCSP_BASICRESP_get_ext_by_OBJ(ocsp_basic_response_st*, const(asn1_object_st)*, int) @nogc nothrow;
    int OCSP_BASICRESP_get_ext_by_critical(ocsp_basic_response_st*, int, int) @nogc nothrow;
    X509_extension_st* OCSP_BASICRESP_get_ext(ocsp_basic_response_st*, int) @nogc nothrow;
    X509_extension_st* OCSP_BASICRESP_delete_ext(ocsp_basic_response_st*, int) @nogc nothrow;
    void* OCSP_BASICRESP_get1_ext_d2i(ocsp_basic_response_st*, int, int*, int*) @nogc nothrow;
    int OCSP_BASICRESP_add1_ext_i2d(ocsp_basic_response_st*, int, void*, int, c_ulong) @nogc nothrow;
    int OCSP_BASICRESP_add_ext(ocsp_basic_response_st*, X509_extension_st*, int) @nogc nothrow;
    int OCSP_SINGLERESP_get_ext_count(ocsp_single_response_st*) @nogc nothrow;
    int OCSP_SINGLERESP_get_ext_by_NID(ocsp_single_response_st*, int, int) @nogc nothrow;
    int OCSP_SINGLERESP_get_ext_by_OBJ(ocsp_single_response_st*, const(asn1_object_st)*, int) @nogc nothrow;
    int OCSP_SINGLERESP_get_ext_by_critical(ocsp_single_response_st*, int, int) @nogc nothrow;
    X509_extension_st* OCSP_SINGLERESP_get_ext(ocsp_single_response_st*, int) @nogc nothrow;
    X509_extension_st* OCSP_SINGLERESP_delete_ext(ocsp_single_response_st*, int) @nogc nothrow;
    void* OCSP_SINGLERESP_get1_ext_d2i(ocsp_single_response_st*, int, int*, int*) @nogc nothrow;
    int OCSP_SINGLERESP_add1_ext_i2d(ocsp_single_response_st*, int, void*, int, c_ulong) @nogc nothrow;
    int OCSP_SINGLERESP_add_ext(ocsp_single_response_st*, X509_extension_st*, int) @nogc nothrow;
    const(ocsp_cert_id_st)* OCSP_SINGLERESP_get0_id(const(ocsp_single_response_st)*) @nogc nothrow;
    extern __gshared const(ASN1_ITEM_st) OCSP_SINGLERESP_it;
    int i2d_OCSP_SINGLERESP(ocsp_single_response_st*, ubyte**) @nogc nothrow;
    void OCSP_SINGLERESP_free(ocsp_single_response_st*) @nogc nothrow;
    ocsp_single_response_st* d2i_OCSP_SINGLERESP(ocsp_single_response_st**, const(ubyte)**, c_long) @nogc nothrow;
    ocsp_single_response_st* OCSP_SINGLERESP_new() @nogc nothrow;
    extern __gshared const(ASN1_ITEM_st) OCSP_CERTSTATUS_it;
    void OCSP_CERTSTATUS_free(ocsp_cert_status_st*) @nogc nothrow;
    int i2d_OCSP_CERTSTATUS(ocsp_cert_status_st*, ubyte**) @nogc nothrow;
    ocsp_cert_status_st* OCSP_CERTSTATUS_new() @nogc nothrow;
    ocsp_cert_status_st* d2i_OCSP_CERTSTATUS(ocsp_cert_status_st**, const(ubyte)**, c_long) @nogc nothrow;
    void OCSP_REVOKEDINFO_free(ocsp_revoked_info_st*) @nogc nothrow;
    int i2d_OCSP_REVOKEDINFO(ocsp_revoked_info_st*, ubyte**) @nogc nothrow;
    extern __gshared const(ASN1_ITEM_st) OCSP_REVOKEDINFO_it;
    ocsp_revoked_info_st* OCSP_REVOKEDINFO_new() @nogc nothrow;
    ocsp_revoked_info_st* d2i_OCSP_REVOKEDINFO(ocsp_revoked_info_st**, const(ubyte)**, c_long) @nogc nothrow;
    void OCSP_BASICRESP_free(ocsp_basic_response_st*) @nogc nothrow;
    int i2d_OCSP_BASICRESP(ocsp_basic_response_st*, ubyte**) @nogc nothrow;
    extern __gshared const(ASN1_ITEM_st) OCSP_BASICRESP_it;
    ocsp_basic_response_st* OCSP_BASICRESP_new() @nogc nothrow;
    ocsp_basic_response_st* d2i_OCSP_BASICRESP(ocsp_basic_response_st**, const(ubyte)**, c_long) @nogc nothrow;
    void OCSP_RESPDATA_free(ocsp_response_data_st*) @nogc nothrow;
    int i2d_OCSP_RESPDATA(ocsp_response_data_st*, ubyte**) @nogc nothrow;
    extern __gshared const(ASN1_ITEM_st) OCSP_RESPDATA_it;
    ocsp_response_data_st* OCSP_RESPDATA_new() @nogc nothrow;
    ocsp_response_data_st* d2i_OCSP_RESPDATA(ocsp_response_data_st**, const(ubyte)**, c_long) @nogc nothrow;
    void OCSP_RESPONSE_free(ocsp_response_st*) @nogc nothrow;
    int i2d_OCSP_RESPONSE(ocsp_response_st*, ubyte**) @nogc nothrow;
    extern __gshared const(ASN1_ITEM_st) OCSP_RESPONSE_it;
    ocsp_response_st* OCSP_RESPONSE_new() @nogc nothrow;
    ocsp_response_st* d2i_OCSP_RESPONSE(ocsp_response_st**, const(ubyte)**, c_long) @nogc nothrow;
    void OCSP_RESPBYTES_free(ocsp_resp_bytes_st*) @nogc nothrow;
    int i2d_OCSP_RESPBYTES(ocsp_resp_bytes_st*, ubyte**) @nogc nothrow;
    extern __gshared const(ASN1_ITEM_st) OCSP_RESPBYTES_it;
    ocsp_resp_bytes_st* OCSP_RESPBYTES_new() @nogc nothrow;
    ocsp_resp_bytes_st* d2i_OCSP_RESPBYTES(ocsp_resp_bytes_st**, const(ubyte)**, c_long) @nogc nothrow;
    void OCSP_ONEREQ_free(ocsp_one_request_st*) @nogc nothrow;
    int i2d_OCSP_ONEREQ(ocsp_one_request_st*, ubyte**) @nogc nothrow;
    extern __gshared const(ASN1_ITEM_st) OCSP_ONEREQ_it;
    ocsp_one_request_st* OCSP_ONEREQ_new() @nogc nothrow;
    ocsp_one_request_st* d2i_OCSP_ONEREQ(ocsp_one_request_st**, const(ubyte)**, c_long) @nogc nothrow;
    void OCSP_CERTID_free(ocsp_cert_id_st*) @nogc nothrow;
    int i2d_OCSP_CERTID(ocsp_cert_id_st*, ubyte**) @nogc nothrow;
    extern __gshared const(ASN1_ITEM_st) OCSP_CERTID_it;
    ocsp_cert_id_st* OCSP_CERTID_new() @nogc nothrow;
    ocsp_cert_id_st* d2i_OCSP_CERTID(ocsp_cert_id_st**, const(ubyte)**, c_long) @nogc nothrow;
    void OCSP_REQUEST_free(ocsp_request_st*) @nogc nothrow;
    int i2d_OCSP_REQUEST(ocsp_request_st*, ubyte**) @nogc nothrow;
    extern __gshared const(ASN1_ITEM_st) OCSP_REQUEST_it;
    ocsp_request_st* d2i_OCSP_REQUEST(ocsp_request_st**, const(ubyte)**, c_long) @nogc nothrow;
    ocsp_request_st* OCSP_REQUEST_new() @nogc nothrow;
    extern __gshared const(ASN1_ITEM_st) OCSP_SIGNATURE_it;
    int i2d_OCSP_SIGNATURE(ocsp_signature_st*, ubyte**) @nogc nothrow;
    void OCSP_SIGNATURE_free(ocsp_signature_st*) @nogc nothrow;
    ocsp_signature_st* d2i_OCSP_SIGNATURE(ocsp_signature_st**, const(ubyte)**, c_long) @nogc nothrow;
    ocsp_signature_st* OCSP_SIGNATURE_new() @nogc nothrow;
    int i2d_OCSP_REQINFO(ocsp_req_info_st*, ubyte**) @nogc nothrow;
    extern __gshared const(ASN1_ITEM_st) OCSP_REQINFO_it;
    void OCSP_REQINFO_free(ocsp_req_info_st*) @nogc nothrow;
    ocsp_req_info_st* OCSP_REQINFO_new() @nogc nothrow;
    ocsp_req_info_st* d2i_OCSP_REQINFO(ocsp_req_info_st**, const(ubyte)**, c_long) @nogc nothrow;
    void OCSP_CRLID_free(ocsp_crl_id_st*) @nogc nothrow;
    int i2d_OCSP_CRLID(ocsp_crl_id_st*, ubyte**) @nogc nothrow;
    extern __gshared const(ASN1_ITEM_st) OCSP_CRLID_it;
    ocsp_crl_id_st* OCSP_CRLID_new() @nogc nothrow;
    ocsp_crl_id_st* d2i_OCSP_CRLID(ocsp_crl_id_st**, const(ubyte)**, c_long) @nogc nothrow;
    void OCSP_SERVICELOC_free(ocsp_service_locator_st*) @nogc nothrow;
    int i2d_OCSP_SERVICELOC(ocsp_service_locator_st*, ubyte**) @nogc nothrow;
    extern __gshared const(ASN1_ITEM_st) OCSP_SERVICELOC_it;
    ocsp_service_locator_st* OCSP_SERVICELOC_new() @nogc nothrow;
    ocsp_service_locator_st* d2i_OCSP_SERVICELOC(ocsp_service_locator_st**, const(ubyte)**, c_long) @nogc nothrow;
    const(char)* OCSP_response_status_str(c_long) @nogc nothrow;
    const(char)* OCSP_cert_status_str(c_long) @nogc nothrow;
    const(char)* OCSP_crl_reason_str(c_long) @nogc nothrow;
    int OCSP_REQUEST_print(bio_st*, ocsp_request_st*, c_ulong) @nogc nothrow;
    int OCSP_RESPONSE_print(bio_st*, ocsp_response_st*, c_ulong) @nogc nothrow;
    int OCSP_basic_verify(ocsp_basic_response_st*, stack_st_X509*, x509_store_st*, c_ulong) @nogc nothrow;
    int ERR_load_OCSP_strings() @nogc nothrow;
    static const(ssl_cipher_st)* sk_SSL_CIPHER_shift(stack_st_SSL_CIPHER*) @nogc nothrow;
    static int sk_SSL_CIPHER_insert(stack_st_SSL_CIPHER*, const(ssl_cipher_st)*, int) @nogc nothrow;
    static void sk_SSL_CIPHER_pop_free(stack_st_SSL_CIPHER*, void function(ssl_cipher_st*)) @nogc nothrow;
    static const(ssl_cipher_st)* sk_SSL_CIPHER_set(stack_st_SSL_CIPHER*, int, const(ssl_cipher_st)*) @nogc nothrow;
    static int sk_SSL_CIPHER_find(stack_st_SSL_CIPHER*, const(ssl_cipher_st)*) @nogc nothrow;
    static int sk_SSL_CIPHER_find_ex(stack_st_SSL_CIPHER*, const(ssl_cipher_st)*) @nogc nothrow;
    static void sk_SSL_CIPHER_sort(stack_st_SSL_CIPHER*) @nogc nothrow;
    static int sk_SSL_CIPHER_is_sorted(const(stack_st_SSL_CIPHER)*) @nogc nothrow;
    static stack_st_SSL_CIPHER* sk_SSL_CIPHER_dup(const(stack_st_SSL_CIPHER)*) @nogc nothrow;
    static stack_st_SSL_CIPHER* sk_SSL_CIPHER_deep_copy(const(stack_st_SSL_CIPHER)*, ssl_cipher_st* function(const(ssl_cipher_st)*), void function(ssl_cipher_st*)) @nogc nothrow;
    static int function(const(const(ssl_cipher_st)*)*, const(const(ssl_cipher_st)*)*) sk_SSL_CIPHER_set_cmp_func(stack_st_SSL_CIPHER*, int function(const(const(ssl_cipher_st)*)*, const(const(ssl_cipher_st)*)*)) @nogc nothrow;
    static const(ssl_cipher_st)* sk_SSL_CIPHER_pop(stack_st_SSL_CIPHER*) @nogc nothrow;
    uint SSL_get_recv_max_early_data(const(ssl_st)*) @nogc nothrow;
    int SSL_set_recv_max_early_data(ssl_st*, uint) @nogc nothrow;
    uint SSL_CTX_get_recv_max_early_data(const(ssl_ctx_st)*) @nogc nothrow;
    int SSL_CTX_set_recv_max_early_data(ssl_ctx_st*, uint) @nogc nothrow;
    uint SSL_get_max_early_data(const(ssl_st)*) @nogc nothrow;
    int SSL_set_max_early_data(ssl_st*, uint) @nogc nothrow;
    uint SSL_CTX_get_max_early_data(const(ssl_ctx_st)*) @nogc nothrow;
    int SSL_CTX_set_max_early_data(ssl_ctx_st*, uint) @nogc nothrow;
    void function(const(ssl_st)*, const(char)*) SSL_CTX_get_keylog_callback(const(ssl_ctx_st)*) @nogc nothrow;
    void SSL_CTX_set_keylog_callback(ssl_ctx_st*, void function(const(ssl_st)*, const(char)*)) @nogc nothrow;
    alias SSL_CTX_keylog_cb_func = void function(const(ssl_st)*, const(char)*);
    int SSL_extension_supported(uint) @nogc nothrow;
    int SSL_CTX_add_custom_ext(ssl_ctx_st*, uint, uint, int function(ssl_st*, uint, uint, const(ubyte)**, c_ulong*, x509_st*, c_ulong, int*, void*), void function(ssl_st*, uint, uint, const(ubyte)*, void*), void*, int function(ssl_st*, uint, uint, const(ubyte)*, c_ulong, x509_st*, c_ulong, int*, void*), void*) @nogc nothrow;
    int SSL_CTX_add_server_custom_ext(ssl_ctx_st*, uint, int function(ssl_st*, uint, const(ubyte)**, c_ulong*, int*, void*), void function(ssl_st*, uint, const(ubyte)*, void*), void*, int function(ssl_st*, uint, const(ubyte)*, c_ulong, int*, void*), void*) @nogc nothrow;
    int SSL_CTX_add_client_custom_ext(ssl_ctx_st*, uint, int function(ssl_st*, uint, const(ubyte)**, c_ulong*, int*, void*), void function(ssl_st*, uint, const(ubyte)*, void*), void*, int function(ssl_st*, uint, const(ubyte)*, c_ulong, int*, void*), void*) @nogc nothrow;
    int SSL_CTX_has_client_custom_ext(const(ssl_ctx_st)*, uint) @nogc nothrow;
    void SSL_CTX_set_psk_use_session_callback(ssl_ctx_st*, int function(ssl_st*, const(evp_md_st)*, const(ubyte)**, c_ulong*, ssl_session_st**)) @nogc nothrow;
    void SSL_set_psk_use_session_callback(ssl_st*, int function(ssl_st*, const(evp_md_st)*, const(ubyte)**, c_ulong*, ssl_session_st**)) @nogc nothrow;
    void SSL_CTX_set_psk_find_session_callback(ssl_ctx_st*, int function(ssl_st*, const(ubyte)*, c_ulong, ssl_session_st**)) @nogc nothrow;
    void SSL_set_psk_find_session_callback(ssl_st*, int function(ssl_st*, const(ubyte)*, c_ulong, ssl_session_st**)) @nogc nothrow;
    alias SSL_psk_use_session_cb_func = int function(ssl_st*, const(evp_md_st)*, const(ubyte)**, c_ulong*, ssl_session_st**);
    alias SSL_psk_find_session_cb_func = int function(ssl_st*, const(ubyte)*, c_ulong, ssl_session_st**);
    const(char)* SSL_get_psk_identity(const(ssl_st)*) @nogc nothrow;
    const(char)* SSL_get_psk_identity_hint(const(ssl_st)*) @nogc nothrow;
    int SSL_use_psk_identity_hint(ssl_st*, const(char)*) @nogc nothrow;
    int SSL_CTX_use_psk_identity_hint(ssl_ctx_st*, const(char)*) @nogc nothrow;
    void SSL_set_psk_server_callback(ssl_st*, uint function(ssl_st*, const(char)*, ubyte*, uint)) @nogc nothrow;
    void SSL_CTX_set_psk_server_callback(ssl_ctx_st*, uint function(ssl_st*, const(char)*, ubyte*, uint)) @nogc nothrow;
    alias PKCS12_MAC_DATA = PKCS12_MAC_DATA_st;
    struct PKCS12_MAC_DATA_st;
    alias PKCS12 = PKCS12_st;
    struct PKCS12_st;
    alias PKCS12_SAFEBAG = PKCS12_SAFEBAG_st;
    struct PKCS12_SAFEBAG_st;
    static int function(const(const(PKCS12_SAFEBAG_st)*)*, const(const(PKCS12_SAFEBAG_st)*)*) sk_PKCS12_SAFEBAG_set_cmp_func(stack_st_PKCS12_SAFEBAG*, int function(const(const(PKCS12_SAFEBAG_st)*)*, const(const(PKCS12_SAFEBAG_st)*)*)) @nogc nothrow;
    static stack_st_PKCS12_SAFEBAG* sk_PKCS12_SAFEBAG_deep_copy(const(stack_st_PKCS12_SAFEBAG)*, PKCS12_SAFEBAG_st* function(const(PKCS12_SAFEBAG_st)*), void function(PKCS12_SAFEBAG_st*)) @nogc nothrow;
    static stack_st_PKCS12_SAFEBAG* sk_PKCS12_SAFEBAG_dup(const(stack_st_PKCS12_SAFEBAG)*) @nogc nothrow;
    static int sk_PKCS12_SAFEBAG_is_sorted(const(stack_st_PKCS12_SAFEBAG)*) @nogc nothrow;
    static void sk_PKCS12_SAFEBAG_sort(stack_st_PKCS12_SAFEBAG*) @nogc nothrow;
    static int sk_PKCS12_SAFEBAG_find_ex(stack_st_PKCS12_SAFEBAG*, PKCS12_SAFEBAG_st*) @nogc nothrow;
    static int sk_PKCS12_SAFEBAG_find(stack_st_PKCS12_SAFEBAG*, PKCS12_SAFEBAG_st*) @nogc nothrow;
    static PKCS12_SAFEBAG_st* sk_PKCS12_SAFEBAG_set(stack_st_PKCS12_SAFEBAG*, int, PKCS12_SAFEBAG_st*) @nogc nothrow;
    static int sk_PKCS12_SAFEBAG_insert(stack_st_PKCS12_SAFEBAG*, PKCS12_SAFEBAG_st*, int) @nogc nothrow;
    static int sk_PKCS12_SAFEBAG_push(stack_st_PKCS12_SAFEBAG*, PKCS12_SAFEBAG_st*) @nogc nothrow;
    static PKCS12_SAFEBAG_st* sk_PKCS12_SAFEBAG_delete_ptr(stack_st_PKCS12_SAFEBAG*, PKCS12_SAFEBAG_st*) @nogc nothrow;
    static PKCS12_SAFEBAG_st* sk_PKCS12_SAFEBAG_delete(stack_st_PKCS12_SAFEBAG*, int) @nogc nothrow;
    static void sk_PKCS12_SAFEBAG_zero(stack_st_PKCS12_SAFEBAG*) @nogc nothrow;
    static void sk_PKCS12_SAFEBAG_free(stack_st_PKCS12_SAFEBAG*) @nogc nothrow;
    static int sk_PKCS12_SAFEBAG_reserve(stack_st_PKCS12_SAFEBAG*, int) @nogc nothrow;
    static stack_st_PKCS12_SAFEBAG* sk_PKCS12_SAFEBAG_new_reserve(int function(const(const(PKCS12_SAFEBAG_st)*)*, const(const(PKCS12_SAFEBAG_st)*)*), int) @nogc nothrow;
    static stack_st_PKCS12_SAFEBAG* sk_PKCS12_SAFEBAG_new_null() @nogc nothrow;
    static stack_st_PKCS12_SAFEBAG* sk_PKCS12_SAFEBAG_new(int function(const(const(PKCS12_SAFEBAG_st)*)*, const(const(PKCS12_SAFEBAG_st)*)*)) @nogc nothrow;
    static void sk_PKCS12_SAFEBAG_pop_free(stack_st_PKCS12_SAFEBAG*, void function(PKCS12_SAFEBAG_st*)) @nogc nothrow;
    static PKCS12_SAFEBAG_st* sk_PKCS12_SAFEBAG_shift(stack_st_PKCS12_SAFEBAG*) @nogc nothrow;
    static PKCS12_SAFEBAG_st* sk_PKCS12_SAFEBAG_pop(stack_st_PKCS12_SAFEBAG*) @nogc nothrow;
    static int sk_PKCS12_SAFEBAG_unshift(stack_st_PKCS12_SAFEBAG*, PKCS12_SAFEBAG_st*) @nogc nothrow;
    struct stack_st_PKCS12_SAFEBAG;
    alias sk_PKCS12_SAFEBAG_compfunc = int function(const(const(PKCS12_SAFEBAG_st)*)*, const(const(PKCS12_SAFEBAG_st)*)*);
    alias sk_PKCS12_SAFEBAG_freefunc = void function(PKCS12_SAFEBAG_st*);
    alias sk_PKCS12_SAFEBAG_copyfunc = PKCS12_SAFEBAG_st* function(const(PKCS12_SAFEBAG_st)*);
    static PKCS12_SAFEBAG_st* sk_PKCS12_SAFEBAG_value(const(stack_st_PKCS12_SAFEBAG)*, int) @nogc nothrow;
    static int sk_PKCS12_SAFEBAG_num(const(stack_st_PKCS12_SAFEBAG)*) @nogc nothrow;
    alias PKCS12_BAGS = pkcs12_bag_st;
    struct pkcs12_bag_st;
    alias SSL_psk_server_cb_func = uint function(ssl_st*, const(char)*, ubyte*, uint);
    void SSL_set_psk_client_callback(ssl_st*, uint function(ssl_st*, const(char)*, char*, uint, ubyte*, uint)) @nogc nothrow;
    void SSL_CTX_set_psk_client_callback(ssl_ctx_st*, uint function(ssl_st*, const(char)*, char*, uint, ubyte*, uint)) @nogc nothrow;
    alias SSL_psk_client_cb_func = uint function(ssl_st*, const(char)*, char*, uint, ubyte*, uint);
    void SSL_get0_alpn_selected(const(ssl_st)*, const(ubyte)**, uint*) @nogc nothrow;
    void SSL_CTX_set_alpn_select_cb(ssl_ctx_st*, int function(ssl_st*, const(ubyte)**, ubyte*, const(ubyte)*, uint, void*), void*) @nogc nothrow;
    alias SSL_CTX_alpn_select_cb_func = int function(ssl_st*, const(ubyte)**, ubyte*, const(ubyte)*, uint, void*);
    int SSL_set_alpn_protos(ssl_st*, const(ubyte)*, uint) @nogc nothrow;
    int SSL_CTX_set_alpn_protos(ssl_ctx_st*, const(ubyte)*, uint) @nogc nothrow;
    int SSL_select_next_proto(ubyte**, ubyte*, const(ubyte)*, uint, const(ubyte)*, uint) @nogc nothrow;
    asn1_type_st* PKCS12_get_attr(const(PKCS12_SAFEBAG_st)*, int) @nogc nothrow;
    asn1_type_st* PKCS8_get_attr(pkcs8_priv_key_info_st*, int) @nogc nothrow;
    int PKCS12_mac_present(const(PKCS12_st)*) @nogc nothrow;
    void PKCS12_get0_mac(const(asn1_string_st)**, const(X509_algor_st)**, const(asn1_string_st)**, const(asn1_string_st)**, const(PKCS12_st)*) @nogc nothrow;
    const(asn1_type_st)* PKCS12_SAFEBAG_get0_attr(const(PKCS12_SAFEBAG_st)*, int) @nogc nothrow;
    const(asn1_object_st)* PKCS12_SAFEBAG_get0_type(const(PKCS12_SAFEBAG_st)*) @nogc nothrow;
    int PKCS12_SAFEBAG_get_nid(const(PKCS12_SAFEBAG_st)*) @nogc nothrow;
    int PKCS12_SAFEBAG_get_bag_nid(const(PKCS12_SAFEBAG_st)*) @nogc nothrow;
    x509_st* PKCS12_SAFEBAG_get1_cert(const(PKCS12_SAFEBAG_st)*) @nogc nothrow;
    X509_crl_st* PKCS12_SAFEBAG_get1_crl(const(PKCS12_SAFEBAG_st)*) @nogc nothrow;
    const(stack_st_PKCS12_SAFEBAG)* PKCS12_SAFEBAG_get0_safes(const(PKCS12_SAFEBAG_st)*) @nogc nothrow;
    const(pkcs8_priv_key_info_st)* PKCS12_SAFEBAG_get0_p8inf(const(PKCS12_SAFEBAG_st)*) @nogc nothrow;
    const(X509_sig_st)* PKCS12_SAFEBAG_get0_pkcs8(const(PKCS12_SAFEBAG_st)*) @nogc nothrow;
    PKCS12_SAFEBAG_st* PKCS12_SAFEBAG_create_cert(x509_st*) @nogc nothrow;
    PKCS12_SAFEBAG_st* PKCS12_SAFEBAG_create_crl(X509_crl_st*) @nogc nothrow;
    PKCS12_SAFEBAG_st* PKCS12_SAFEBAG_create0_p8inf(pkcs8_priv_key_info_st*) @nogc nothrow;
    PKCS12_SAFEBAG_st* PKCS12_SAFEBAG_create0_pkcs8(X509_sig_st*) @nogc nothrow;
    PKCS12_SAFEBAG_st* PKCS12_SAFEBAG_create_pkcs8_encrypt(int, const(char)*, int, ubyte*, int, int, pkcs8_priv_key_info_st*) @nogc nothrow;
    PKCS12_SAFEBAG_st* PKCS12_item_pack_safebag(void*, const(ASN1_ITEM_st)*, int, int) @nogc nothrow;
    pkcs8_priv_key_info_st* PKCS8_decrypt(const(X509_sig_st)*, const(char)*, int) @nogc nothrow;
    pkcs8_priv_key_info_st* PKCS12_decrypt_skey(const(PKCS12_SAFEBAG_st)*, const(char)*, int) @nogc nothrow;
    X509_sig_st* PKCS8_encrypt(int, const(evp_cipher_st)*, const(char)*, int, ubyte*, int, int, pkcs8_priv_key_info_st*) @nogc nothrow;
    X509_sig_st* PKCS8_set0_pbe(const(char)*, int, pkcs8_priv_key_info_st*, X509_algor_st*) @nogc nothrow;
    pkcs7_st* PKCS12_pack_p7data(stack_st_PKCS12_SAFEBAG*) @nogc nothrow;
    stack_st_PKCS12_SAFEBAG* PKCS12_unpack_p7data(pkcs7_st*) @nogc nothrow;
    pkcs7_st* PKCS12_pack_p7encdata(int, const(char)*, int, ubyte*, int, int, stack_st_PKCS12_SAFEBAG*) @nogc nothrow;
    stack_st_PKCS12_SAFEBAG* PKCS12_unpack_p7encdata(pkcs7_st*, const(char)*, int) @nogc nothrow;
    int PKCS12_pack_authsafes(PKCS12_st*, stack_st_PKCS7*) @nogc nothrow;
    stack_st_PKCS7* PKCS12_unpack_authsafes(const(PKCS12_st)*) @nogc nothrow;
    int PKCS12_add_localkeyid(PKCS12_SAFEBAG_st*, ubyte*, int) @nogc nothrow;
    int PKCS12_add_friendlyname_asc(PKCS12_SAFEBAG_st*, const(char)*, int) @nogc nothrow;
    int PKCS12_add_friendlyname_utf8(PKCS12_SAFEBAG_st*, const(char)*, int) @nogc nothrow;
    int PKCS12_add_CSPName_asc(PKCS12_SAFEBAG_st*, const(char)*, int) @nogc nothrow;
    int PKCS12_add_friendlyname_uni(PKCS12_SAFEBAG_st*, const(ubyte)*, int) @nogc nothrow;
    int PKCS8_add_keyusage(pkcs8_priv_key_info_st*, int) @nogc nothrow;
    asn1_type_st* PKCS12_get_attr_gen(const(stack_st_X509_ATTRIBUTE)*, int) @nogc nothrow;
    char* PKCS12_get_friendlyname(PKCS12_SAFEBAG_st*) @nogc nothrow;
    const(stack_st_X509_ATTRIBUTE)* PKCS12_SAFEBAG_get0_attrs(const(PKCS12_SAFEBAG_st)*) @nogc nothrow;
    ubyte* PKCS12_pbe_crypt(const(X509_algor_st)*, const(char)*, int, const(ubyte)*, int, ubyte**, int*, int) @nogc nothrow;
    void* PKCS12_item_decrypt_d2i(const(X509_algor_st)*, const(ASN1_ITEM_st)*, const(char)*, int, const(asn1_string_st)*, int) @nogc nothrow;
    asn1_string_st* PKCS12_item_i2d_encrypt(X509_algor_st*, const(ASN1_ITEM_st)*, const(char)*, int, void*, int) @nogc nothrow;
    PKCS12_st* PKCS12_init(int) @nogc nothrow;
    int PKCS12_key_gen_asc(const(char)*, int, ubyte*, int, int, int, int, ubyte*, const(evp_md_st)*) @nogc nothrow;
    int PKCS12_key_gen_uni(ubyte*, int, ubyte*, int, int, int, int, ubyte*, const(evp_md_st)*) @nogc nothrow;
    int PKCS12_key_gen_utf8(const(char)*, int, ubyte*, int, int, int, int, ubyte*, const(evp_md_st)*) @nogc nothrow;
    int PKCS12_PBE_keyivgen(evp_cipher_ctx_st*, const(char)*, int, asn1_type_st*, const(evp_cipher_st)*, const(evp_md_st)*, int) @nogc nothrow;
    int PKCS12_gen_mac(PKCS12_st*, const(char)*, int, ubyte*, uint*) @nogc nothrow;
    int PKCS12_verify_mac(PKCS12_st*, const(char)*, int) @nogc nothrow;
    int PKCS12_set_mac(PKCS12_st*, const(char)*, int, ubyte*, int, int, const(evp_md_st)*) @nogc nothrow;
    int PKCS12_setup_mac(PKCS12_st*, int, ubyte*, int, const(evp_md_st)*) @nogc nothrow;
    ubyte* OPENSSL_asc2uni(const(char)*, int, ubyte**, int*) @nogc nothrow;
    char* OPENSSL_uni2asc(const(ubyte)*, int) @nogc nothrow;
    ubyte* OPENSSL_utf82uni(const(char)*, int, ubyte**, int*) @nogc nothrow;
    char* OPENSSL_uni2utf8(const(ubyte)*, int) @nogc nothrow;
    void PKCS12_free(PKCS12_st*) @nogc nothrow;
    int i2d_PKCS12(PKCS12_st*, ubyte**) @nogc nothrow;
    extern __gshared const(ASN1_ITEM_st) PKCS12_it;
    PKCS12_st* PKCS12_new() @nogc nothrow;
    PKCS12_st* d2i_PKCS12(PKCS12_st**, const(ubyte)**, c_long) @nogc nothrow;
    extern __gshared const(ASN1_ITEM_st) PKCS12_MAC_DATA_it;
    void PKCS12_MAC_DATA_free(PKCS12_MAC_DATA_st*) @nogc nothrow;
    int i2d_PKCS12_MAC_DATA(PKCS12_MAC_DATA_st*, ubyte**) @nogc nothrow;
    PKCS12_MAC_DATA_st* PKCS12_MAC_DATA_new() @nogc nothrow;
    PKCS12_MAC_DATA_st* d2i_PKCS12_MAC_DATA(PKCS12_MAC_DATA_st**, const(ubyte)**, c_long) @nogc nothrow;
    void PKCS12_SAFEBAG_free(PKCS12_SAFEBAG_st*) @nogc nothrow;
    int i2d_PKCS12_SAFEBAG(PKCS12_SAFEBAG_st*, ubyte**) @nogc nothrow;
    extern __gshared const(ASN1_ITEM_st) PKCS12_SAFEBAG_it;
    PKCS12_SAFEBAG_st* PKCS12_SAFEBAG_new() @nogc nothrow;
    PKCS12_SAFEBAG_st* d2i_PKCS12_SAFEBAG(PKCS12_SAFEBAG_st**, const(ubyte)**, c_long) @nogc nothrow;
    void PKCS12_BAGS_free(pkcs12_bag_st*) @nogc nothrow;
    int i2d_PKCS12_BAGS(pkcs12_bag_st*, ubyte**) @nogc nothrow;
    extern __gshared const(ASN1_ITEM_st) PKCS12_BAGS_it;
    pkcs12_bag_st* PKCS12_BAGS_new() @nogc nothrow;
    pkcs12_bag_st* d2i_PKCS12_BAGS(pkcs12_bag_st**, const(ubyte)**, c_long) @nogc nothrow;
    extern __gshared const(ASN1_ITEM_st) PKCS12_SAFEBAGS_it;
    extern __gshared const(ASN1_ITEM_st) PKCS12_AUTHSAFES_it;
    void PKCS12_PBE_add() @nogc nothrow;
    int PKCS12_parse(PKCS12_st*, const(char)*, evp_pkey_st**, x509_st**, stack_st_X509**) @nogc nothrow;
    PKCS12_st* PKCS12_create(const(char)*, const(char)*, evp_pkey_st*, x509_st*, stack_st_X509*, int, int, int, int, int) @nogc nothrow;
    PKCS12_SAFEBAG_st* PKCS12_add_cert(stack_st_PKCS12_SAFEBAG**, x509_st*) @nogc nothrow;
    PKCS12_SAFEBAG_st* PKCS12_add_key(stack_st_PKCS12_SAFEBAG**, evp_pkey_st*, int, int, int, const(char)*) @nogc nothrow;
    int PKCS12_add_safe(stack_st_PKCS7**, stack_st_PKCS12_SAFEBAG*, int, int, const(char)*) @nogc nothrow;
    PKCS12_st* PKCS12_add_safes(stack_st_PKCS7*, int) @nogc nothrow;
    int i2d_PKCS12_bio(bio_st*, PKCS12_st*) @nogc nothrow;
    int i2d_PKCS12_fp(_IO_FILE*, PKCS12_st*) @nogc nothrow;
    PKCS12_st* d2i_PKCS12_bio(bio_st*, PKCS12_st**) @nogc nothrow;
    PKCS12_st* d2i_PKCS12_fp(_IO_FILE*, PKCS12_st**) @nogc nothrow;
    int PKCS12_newpass(PKCS12_st*, const(char)*, const(char)*) @nogc nothrow;
    int ERR_load_PKCS12_strings() @nogc nothrow;
    void SSL_get0_next_proto_negotiated(const(ssl_st)*, const(ubyte)**, uint*) @nogc nothrow;
    void SSL_CTX_set_next_proto_select_cb(ssl_ctx_st*, int function(ssl_st*, ubyte**, ubyte*, const(ubyte)*, uint, void*), void*) @nogc nothrow;
    alias SSL_CTX_npn_select_cb_func = int function(ssl_st*, ubyte**, ubyte*, const(ubyte)*, uint, void*);
    void SSL_CTX_set_next_protos_advertised_cb(ssl_ctx_st*, int function(ssl_st*, const(ubyte)**, uint*, void*), void*) @nogc nothrow;
    alias SSL_CTX_npn_advertised_cb_func = int function(ssl_st*, const(ubyte)**, uint*, void*);
    void SSL_CTX_set_stateless_cookie_verify_cb(ssl_ctx_st*, int function(ssl_st*, const(ubyte)*, c_ulong)) @nogc nothrow;
    void SSL_CTX_set_stateless_cookie_generate_cb(ssl_ctx_st*, int function(ssl_st*, ubyte*, c_ulong*)) @nogc nothrow;
    void SSL_CTX_set_cookie_verify_cb(ssl_ctx_st*, int function(ssl_st*, const(ubyte)*, uint)) @nogc nothrow;
    void SSL_CTX_set_cookie_generate_cb(ssl_ctx_st*, int function(ssl_st*, ubyte*, uint*)) @nogc nothrow;
    int SSL_CTX_set_client_cert_engine(ssl_ctx_st*, engine_st*) @nogc nothrow;
    int function(ssl_st*, x509_st**, evp_pkey_st**) SSL_CTX_get_client_cert_cb(ssl_ctx_st*) @nogc nothrow;
    void SSL_CTX_set_client_cert_cb(ssl_ctx_st*, int function(ssl_st*, x509_st**, evp_pkey_st**)) @nogc nothrow;
    void function(const(ssl_st)*, int, int) SSL_CTX_get_info_callback(ssl_ctx_st*) @nogc nothrow;
    void SSL_CTX_set_info_callback(ssl_ctx_st*, void function(const(ssl_st)*, int, int)) @nogc nothrow;
    ssl_session_st* function(ssl_st*, const(ubyte)*, int, int*) SSL_CTX_sess_get_get_cb(ssl_ctx_st*) @nogc nothrow;
    void SSL_CTX_sess_set_get_cb(ssl_ctx_st*, ssl_session_st* function(ssl_st*, const(ubyte)*, int, int*)) @nogc nothrow;
    void function(ssl_ctx_st*, ssl_session_st*) SSL_CTX_sess_get_remove_cb(ssl_ctx_st*) @nogc nothrow;
    void SSL_CTX_sess_set_remove_cb(ssl_ctx_st*, void function(ssl_ctx_st*, ssl_session_st*)) @nogc nothrow;
    int function(ssl_st*, ssl_session_st*) SSL_CTX_sess_get_new_cb(ssl_ctx_st*) @nogc nothrow;
    void SSL_CTX_sess_set_new_cb(ssl_ctx_st*, int function(ssl_st*, ssl_session_st*)) @nogc nothrow;
    lhash_st_SSL_SESSION* SSL_CTX_sessions(ssl_ctx_st*) @nogc nothrow;
    struct lhash_st_SSL_SESSION;
    alias GEN_SESSION_CB = int function(ssl_st*, ubyte*, uint*);
    int SRP_Calc_A_param(ssl_st*) @nogc nothrow;
    int SSL_srp_server_param_with_username(ssl_st*, int*) @nogc nothrow;
    int SSL_CTX_SRP_CTX_free(ssl_ctx_st*) @nogc nothrow;
    int SSL_SRP_CTX_free(ssl_st*) @nogc nothrow;
    int SSL_CTX_SRP_CTX_init(ssl_ctx_st*) @nogc nothrow;
    int SSL_SRP_CTX_init(ssl_st*) @nogc nothrow;
    void SSL_set_msg_callback(ssl_st*, void function(int, int, int, const(void)*, c_ulong, ssl_st*, void*)) @nogc nothrow;
    void SSL_CTX_set_msg_callback(ssl_ctx_st*, void function(int, int, int, const(void)*, c_ulong, ssl_st*, void*)) @nogc nothrow;
    c_ulong SSL_set_options(ssl_st*, c_ulong) @nogc nothrow;
    c_ulong SSL_CTX_set_options(ssl_ctx_st*, c_ulong) @nogc nothrow;
    c_ulong SSL_clear_options(ssl_st*, c_ulong) @nogc nothrow;
    c_ulong SSL_CTX_clear_options(ssl_ctx_st*, c_ulong) @nogc nothrow;
    c_ulong SSL_get_options(const(ssl_st)*) @nogc nothrow;
    c_ulong SSL_CTX_get_options(const(ssl_ctx_st)*) @nogc nothrow;
    alias SSL_verify_cb = int function(int, x509_store_ctx_st*);
    alias SSL_custom_ext_parse_cb_ex = int function(ssl_st*, uint, uint, const(ubyte)*, c_ulong, x509_st*, c_ulong, int*, void*);
    alias SSL_custom_ext_free_cb_ex = void function(ssl_st*, uint, uint, const(ubyte)*, void*);
    alias RC2_INT = uint;
    alias SSL_custom_ext_add_cb_ex = int function(ssl_st*, uint, uint, const(ubyte)**, c_ulong*, x509_st*, c_ulong, int*, void*);
    alias custom_ext_parse_cb = int function(ssl_st*, uint, const(ubyte)*, c_ulong, int*, void*);
    alias custom_ext_free_cb = void function(ssl_st*, uint, const(ubyte)*, void*);
    alias custom_ext_add_cb = int function(ssl_st*, uint, const(ubyte)**, c_ulong*, int*, void*);
    alias RC2_KEY = rc2_key_st;
    struct rc2_key_st
    {
        uint[64] data;
    }
    void RC2_set_key(rc2_key_st*, int, const(ubyte)*, int) @nogc nothrow;
    void RC2_ecb_encrypt(const(ubyte)*, ubyte*, rc2_key_st*, int) @nogc nothrow;
    void RC2_encrypt(c_ulong*, rc2_key_st*) @nogc nothrow;
    void RC2_decrypt(c_ulong*, rc2_key_st*) @nogc nothrow;
    void RC2_cbc_encrypt(const(ubyte)*, ubyte*, c_long, rc2_key_st*, ubyte*, int) @nogc nothrow;
    void RC2_cfb64_encrypt(const(ubyte)*, ubyte*, c_long, rc2_key_st*, ubyte*, int*, int) @nogc nothrow;
    void RC2_ofb64_encrypt(const(ubyte)*, ubyte*, c_long, rc2_key_st*, ubyte*, int*) @nogc nothrow;
    alias RC4_KEY = rc4_key_st;
    struct rc4_key_st
    {
        uint x;
        uint y;
        uint[256] data;
    }
    const(char)* RC4_options() @nogc nothrow;
    void RC4_set_key(rc4_key_st*, int, const(ubyte)*) @nogc nothrow;
    void RC4(rc4_key_st*, c_ulong, const(ubyte)*, ubyte*) @nogc nothrow;
    alias tls_session_secret_cb_fn = int function(ssl_st*, void*, int*, stack_st_SSL_CIPHER*, const(ssl_cipher_st)**, void*);
    alias tls_session_ticket_ext_cb_fn = int function(ssl_st*, const(ubyte)*, int, void*);
    struct stack_st_SRTP_PROTECTION_PROFILE;
    static stack_st_SRTP_PROTECTION_PROFILE* sk_SRTP_PROTECTION_PROFILE_deep_copy(const(stack_st_SRTP_PROTECTION_PROFILE)*, srtp_protection_profile_st* function(const(srtp_protection_profile_st)*), void function(srtp_protection_profile_st*)) @nogc nothrow;
    static int function(const(const(srtp_protection_profile_st)*)*, const(const(srtp_protection_profile_st)*)*) sk_SRTP_PROTECTION_PROFILE_set_cmp_func(stack_st_SRTP_PROTECTION_PROFILE*, int function(const(const(srtp_protection_profile_st)*)*, const(const(srtp_protection_profile_st)*)*)) @nogc nothrow;
    alias RIPEMD160_CTX = RIPEMD160state_st;
    struct RIPEMD160state_st
    {
        uint A;
        uint B;
        uint C;
        uint D;
        uint E;
        uint Nl;
        uint Nh;
        uint[16] data;
        uint num;
    }
    int RIPEMD160_Init(RIPEMD160state_st*) @nogc nothrow;
    int RIPEMD160_Update(RIPEMD160state_st*, const(void)*, c_ulong) @nogc nothrow;
    int RIPEMD160_Final(ubyte*, RIPEMD160state_st*) @nogc nothrow;
    ubyte* RIPEMD160(const(ubyte)*, c_ulong, ubyte*) @nogc nothrow;
    void RIPEMD160_Transform(RIPEMD160state_st*, const(ubyte)*) @nogc nothrow;
    static stack_st_SRTP_PROTECTION_PROFILE* sk_SRTP_PROTECTION_PROFILE_dup(const(stack_st_SRTP_PROTECTION_PROFILE)*) @nogc nothrow;
    static int sk_SRTP_PROTECTION_PROFILE_is_sorted(const(stack_st_SRTP_PROTECTION_PROFILE)*) @nogc nothrow;
    static int sk_SRTP_PROTECTION_PROFILE_find(stack_st_SRTP_PROTECTION_PROFILE*, srtp_protection_profile_st*) @nogc nothrow;
    alias SEED_KEY_SCHEDULE = seed_key_st;
    struct seed_key_st
    {
        uint[32] data;
    }
    void SEED_set_key(const(ubyte)*, seed_key_st*) @nogc nothrow;
    void SEED_encrypt(const(ubyte)*, ubyte*, const(seed_key_st)*) @nogc nothrow;
    void SEED_decrypt(const(ubyte)*, ubyte*, const(seed_key_st)*) @nogc nothrow;
    void SEED_ecb_encrypt(const(ubyte)*, ubyte*, const(seed_key_st)*, int) @nogc nothrow;
    void SEED_cbc_encrypt(const(ubyte)*, ubyte*, c_ulong, const(seed_key_st)*, ubyte*, int) @nogc nothrow;
    void SEED_cfb128_encrypt(const(ubyte)*, ubyte*, c_ulong, const(seed_key_st)*, ubyte*, int*, int) @nogc nothrow;
    void SEED_ofb128_encrypt(const(ubyte)*, ubyte*, c_ulong, const(seed_key_st)*, ubyte*, int*) @nogc nothrow;
    static void sk_SRTP_PROTECTION_PROFILE_sort(stack_st_SRTP_PROTECTION_PROFILE*) @nogc nothrow;
    alias SRP_gN_cache = SRP_gN_cache_st;
    struct SRP_gN_cache_st
    {
        char* b64_bn;
        bignum_st* bn;
    }
    alias sk_SRP_gN_cache_compfunc = int function(const(const(SRP_gN_cache_st)*)*, const(const(SRP_gN_cache_st)*)*);
    static SRP_gN_cache_st* sk_SRP_gN_cache_shift(stack_st_SRP_gN_cache*) @nogc nothrow;
    static void sk_SRP_gN_cache_pop_free(stack_st_SRP_gN_cache*, void function(SRP_gN_cache_st*)) @nogc nothrow;
    static int sk_SRP_gN_cache_insert(stack_st_SRP_gN_cache*, SRP_gN_cache_st*, int) @nogc nothrow;
    static SRP_gN_cache_st* sk_SRP_gN_cache_set(stack_st_SRP_gN_cache*, int, SRP_gN_cache_st*) @nogc nothrow;
    static int sk_SRP_gN_cache_find(stack_st_SRP_gN_cache*, SRP_gN_cache_st*) @nogc nothrow;
    static int sk_SRP_gN_cache_find_ex(stack_st_SRP_gN_cache*, SRP_gN_cache_st*) @nogc nothrow;
    static void sk_SRP_gN_cache_sort(stack_st_SRP_gN_cache*) @nogc nothrow;
    static int sk_SRP_gN_cache_is_sorted(const(stack_st_SRP_gN_cache)*) @nogc nothrow;
    static stack_st_SRP_gN_cache* sk_SRP_gN_cache_dup(const(stack_st_SRP_gN_cache)*) @nogc nothrow;
    static SRP_gN_cache_st* sk_SRP_gN_cache_pop(stack_st_SRP_gN_cache*) @nogc nothrow;
    struct stack_st_SRP_gN_cache;
    static stack_st_SRP_gN_cache* sk_SRP_gN_cache_deep_copy(const(stack_st_SRP_gN_cache)*, SRP_gN_cache_st* function(const(SRP_gN_cache_st)*), void function(SRP_gN_cache_st*)) @nogc nothrow;
    static int function(const(const(SRP_gN_cache_st)*)*, const(const(SRP_gN_cache_st)*)*) sk_SRP_gN_cache_set_cmp_func(stack_st_SRP_gN_cache*, int function(const(const(SRP_gN_cache_st)*)*, const(const(SRP_gN_cache_st)*)*)) @nogc nothrow;
    alias sk_SRP_gN_cache_freefunc = void function(SRP_gN_cache_st*);
    static int sk_SRP_gN_cache_unshift(stack_st_SRP_gN_cache*, SRP_gN_cache_st*) @nogc nothrow;
    static int sk_SRP_gN_cache_push(stack_st_SRP_gN_cache*, SRP_gN_cache_st*) @nogc nothrow;
    static SRP_gN_cache_st* sk_SRP_gN_cache_delete_ptr(stack_st_SRP_gN_cache*, SRP_gN_cache_st*) @nogc nothrow;
    static SRP_gN_cache_st* sk_SRP_gN_cache_delete(stack_st_SRP_gN_cache*, int) @nogc nothrow;
    static void sk_SRP_gN_cache_zero(stack_st_SRP_gN_cache*) @nogc nothrow;
    static void sk_SRP_gN_cache_free(stack_st_SRP_gN_cache*) @nogc nothrow;
    static int sk_SRP_gN_cache_reserve(stack_st_SRP_gN_cache*, int) @nogc nothrow;
    static stack_st_SRP_gN_cache* sk_SRP_gN_cache_new_reserve(int function(const(const(SRP_gN_cache_st)*)*, const(const(SRP_gN_cache_st)*)*), int) @nogc nothrow;
    static stack_st_SRP_gN_cache* sk_SRP_gN_cache_new_null() @nogc nothrow;
    static stack_st_SRP_gN_cache* sk_SRP_gN_cache_new(int function(const(const(SRP_gN_cache_st)*)*, const(const(SRP_gN_cache_st)*)*)) @nogc nothrow;
    static SRP_gN_cache_st* sk_SRP_gN_cache_value(const(stack_st_SRP_gN_cache)*, int) @nogc nothrow;
    static int sk_SRP_gN_cache_num(const(stack_st_SRP_gN_cache)*) @nogc nothrow;
    alias sk_SRP_gN_cache_copyfunc = SRP_gN_cache_st* function(const(SRP_gN_cache_st)*);
    alias SRP_user_pwd = SRP_user_pwd_st;
    struct SRP_user_pwd_st
    {
        char* id;
        bignum_st* s;
        bignum_st* v;
        const(bignum_st)* g;
        const(bignum_st)* N;
        char* info;
    }
    void SRP_user_pwd_free(SRP_user_pwd_st*) @nogc nothrow;
    static int function(const(const(SRP_user_pwd_st)*)*, const(const(SRP_user_pwd_st)*)*) sk_SRP_user_pwd_set_cmp_func(stack_st_SRP_user_pwd*, int function(const(const(SRP_user_pwd_st)*)*, const(const(SRP_user_pwd_st)*)*)) @nogc nothrow;
    static stack_st_SRP_user_pwd* sk_SRP_user_pwd_deep_copy(const(stack_st_SRP_user_pwd)*, SRP_user_pwd_st* function(const(SRP_user_pwd_st)*), void function(SRP_user_pwd_st*)) @nogc nothrow;
    static stack_st_SRP_user_pwd* sk_SRP_user_pwd_dup(const(stack_st_SRP_user_pwd)*) @nogc nothrow;
    static int sk_SRP_user_pwd_is_sorted(const(stack_st_SRP_user_pwd)*) @nogc nothrow;
    static void sk_SRP_user_pwd_sort(stack_st_SRP_user_pwd*) @nogc nothrow;
    static int sk_SRP_user_pwd_find_ex(stack_st_SRP_user_pwd*, SRP_user_pwd_st*) @nogc nothrow;
    static int sk_SRP_user_pwd_find(stack_st_SRP_user_pwd*, SRP_user_pwd_st*) @nogc nothrow;
    static SRP_user_pwd_st* sk_SRP_user_pwd_set(stack_st_SRP_user_pwd*, int, SRP_user_pwd_st*) @nogc nothrow;
    static int sk_SRP_user_pwd_insert(stack_st_SRP_user_pwd*, SRP_user_pwd_st*, int) @nogc nothrow;
    static void sk_SRP_user_pwd_pop_free(stack_st_SRP_user_pwd*, void function(SRP_user_pwd_st*)) @nogc nothrow;
    static SRP_user_pwd_st* sk_SRP_user_pwd_shift(stack_st_SRP_user_pwd*) @nogc nothrow;
    static SRP_user_pwd_st* sk_SRP_user_pwd_pop(stack_st_SRP_user_pwd*) @nogc nothrow;
    static int sk_SRP_user_pwd_unshift(stack_st_SRP_user_pwd*, SRP_user_pwd_st*) @nogc nothrow;
    static int sk_SRP_user_pwd_push(stack_st_SRP_user_pwd*, SRP_user_pwd_st*) @nogc nothrow;
    static SRP_user_pwd_st* sk_SRP_user_pwd_delete_ptr(stack_st_SRP_user_pwd*, SRP_user_pwd_st*) @nogc nothrow;
    static stack_st_SRP_user_pwd* sk_SRP_user_pwd_new(int function(const(const(SRP_user_pwd_st)*)*, const(const(SRP_user_pwd_st)*)*)) @nogc nothrow;
    static void sk_SRP_user_pwd_zero(stack_st_SRP_user_pwd*) @nogc nothrow;
    static void sk_SRP_user_pwd_free(stack_st_SRP_user_pwd*) @nogc nothrow;
    static int sk_SRP_user_pwd_reserve(stack_st_SRP_user_pwd*, int) @nogc nothrow;
    static stack_st_SRP_user_pwd* sk_SRP_user_pwd_new_reserve(int function(const(const(SRP_user_pwd_st)*)*, const(const(SRP_user_pwd_st)*)*), int) @nogc nothrow;
    static stack_st_SRP_user_pwd* sk_SRP_user_pwd_new_null() @nogc nothrow;
    static SRP_user_pwd_st* sk_SRP_user_pwd_value(const(stack_st_SRP_user_pwd)*, int) @nogc nothrow;
    static int sk_SRP_user_pwd_num(const(stack_st_SRP_user_pwd)*) @nogc nothrow;
    alias sk_SRP_user_pwd_copyfunc = SRP_user_pwd_st* function(const(SRP_user_pwd_st)*);
    alias sk_SRP_user_pwd_freefunc = void function(SRP_user_pwd_st*);
    alias sk_SRP_user_pwd_compfunc = int function(const(const(SRP_user_pwd_st)*)*, const(const(SRP_user_pwd_st)*)*);
    struct stack_st_SRP_user_pwd;
    static SRP_user_pwd_st* sk_SRP_user_pwd_delete(stack_st_SRP_user_pwd*, int) @nogc nothrow;
    alias SRP_VBASE = SRP_VBASE_st;
    struct SRP_VBASE_st
    {
        stack_st_SRP_user_pwd* users_pwd;
        stack_st_SRP_gN_cache* gN_cache;
        char* seed_key;
        const(bignum_st)* default_g;
        const(bignum_st)* default_N;
    }
    alias SRP_gN = SRP_gN_st;
    struct SRP_gN_st
    {
        char* id;
        const(bignum_st)* g;
        const(bignum_st)* N;
    }
    static SRP_gN_st* sk_SRP_gN_pop(stack_st_SRP_gN*) @nogc nothrow;
    static int function(const(const(SRP_gN_st)*)*, const(const(SRP_gN_st)*)*) sk_SRP_gN_set_cmp_func(stack_st_SRP_gN*, int function(const(const(SRP_gN_st)*)*, const(const(SRP_gN_st)*)*)) @nogc nothrow;
    static stack_st_SRP_gN* sk_SRP_gN_deep_copy(const(stack_st_SRP_gN)*, SRP_gN_st* function(const(SRP_gN_st)*), void function(SRP_gN_st*)) @nogc nothrow;
    static stack_st_SRP_gN* sk_SRP_gN_dup(const(stack_st_SRP_gN)*) @nogc nothrow;
    static int sk_SRP_gN_is_sorted(const(stack_st_SRP_gN)*) @nogc nothrow;
    static void sk_SRP_gN_sort(stack_st_SRP_gN*) @nogc nothrow;
    static int sk_SRP_gN_find_ex(stack_st_SRP_gN*, SRP_gN_st*) @nogc nothrow;
    static int sk_SRP_gN_find(stack_st_SRP_gN*, SRP_gN_st*) @nogc nothrow;
    static SRP_gN_st* sk_SRP_gN_set(stack_st_SRP_gN*, int, SRP_gN_st*) @nogc nothrow;
    static int sk_SRP_gN_insert(stack_st_SRP_gN*, SRP_gN_st*, int) @nogc nothrow;
    static void sk_SRP_gN_pop_free(stack_st_SRP_gN*, void function(SRP_gN_st*)) @nogc nothrow;
    static SRP_gN_st* sk_SRP_gN_shift(stack_st_SRP_gN*) @nogc nothrow;
    static int sk_SRP_gN_unshift(stack_st_SRP_gN*, SRP_gN_st*) @nogc nothrow;
    struct stack_st_SRP_gN;
    alias sk_SRP_gN_compfunc = int function(const(const(SRP_gN_st)*)*, const(const(SRP_gN_st)*)*);
    alias sk_SRP_gN_freefunc = void function(SRP_gN_st*);
    alias sk_SRP_gN_copyfunc = SRP_gN_st* function(const(SRP_gN_st)*);
    static int sk_SRP_gN_num(const(stack_st_SRP_gN)*) @nogc nothrow;
    static SRP_gN_st* sk_SRP_gN_value(const(stack_st_SRP_gN)*, int) @nogc nothrow;
    static stack_st_SRP_gN* sk_SRP_gN_new(int function(const(const(SRP_gN_st)*)*, const(const(SRP_gN_st)*)*)) @nogc nothrow;
    static stack_st_SRP_gN* sk_SRP_gN_new_null() @nogc nothrow;
    static int sk_SRP_gN_push(stack_st_SRP_gN*, SRP_gN_st*) @nogc nothrow;
    static SRP_gN_st* sk_SRP_gN_delete_ptr(stack_st_SRP_gN*, SRP_gN_st*) @nogc nothrow;
    static SRP_gN_st* sk_SRP_gN_delete(stack_st_SRP_gN*, int) @nogc nothrow;
    static stack_st_SRP_gN* sk_SRP_gN_new_reserve(int function(const(const(SRP_gN_st)*)*, const(const(SRP_gN_st)*)*), int) @nogc nothrow;
    static void sk_SRP_gN_zero(stack_st_SRP_gN*) @nogc nothrow;
    static int sk_SRP_gN_reserve(stack_st_SRP_gN*, int) @nogc nothrow;
    static void sk_SRP_gN_free(stack_st_SRP_gN*) @nogc nothrow;
    SRP_VBASE_st* SRP_VBASE_new(char*) @nogc nothrow;
    void SRP_VBASE_free(SRP_VBASE_st*) @nogc nothrow;
    int SRP_VBASE_init(SRP_VBASE_st*, char*) @nogc nothrow;
    SRP_user_pwd_st* SRP_VBASE_get_by_user(SRP_VBASE_st*, char*) @nogc nothrow;
    SRP_user_pwd_st* SRP_VBASE_get1_by_user(SRP_VBASE_st*, char*) @nogc nothrow;
    char* SRP_create_verifier(const(char)*, const(char)*, char**, char**, const(char)*, const(char)*) @nogc nothrow;
    int SRP_create_verifier_BN(const(char)*, const(char)*, bignum_st**, bignum_st**, const(bignum_st)*, const(bignum_st)*) @nogc nothrow;
    static int sk_SRTP_PROTECTION_PROFILE_find_ex(stack_st_SRTP_PROTECTION_PROFILE*, srtp_protection_profile_st*) @nogc nothrow;
    alias sk_SRTP_PROTECTION_PROFILE_compfunc = int function(const(const(srtp_protection_profile_st)*)*, const(const(srtp_protection_profile_st)*)*);
    alias sk_SRTP_PROTECTION_PROFILE_freefunc = void function(srtp_protection_profile_st*);
    alias sk_SRTP_PROTECTION_PROFILE_copyfunc = srtp_protection_profile_st* function(const(srtp_protection_profile_st)*);
    static int sk_SRTP_PROTECTION_PROFILE_num(const(stack_st_SRTP_PROTECTION_PROFILE)*) @nogc nothrow;
    static srtp_protection_profile_st* sk_SRTP_PROTECTION_PROFILE_value(const(stack_st_SRTP_PROTECTION_PROFILE)*, int) @nogc nothrow;
    static stack_st_SRTP_PROTECTION_PROFILE* sk_SRTP_PROTECTION_PROFILE_new(int function(const(const(srtp_protection_profile_st)*)*, const(const(srtp_protection_profile_st)*)*)) @nogc nothrow;
    static stack_st_SRTP_PROTECTION_PROFILE* sk_SRTP_PROTECTION_PROFILE_new_null() @nogc nothrow;
    static stack_st_SRTP_PROTECTION_PROFILE* sk_SRTP_PROTECTION_PROFILE_new_reserve(int function(const(const(srtp_protection_profile_st)*)*, const(const(srtp_protection_profile_st)*)*), int) @nogc nothrow;
    static int sk_SRTP_PROTECTION_PROFILE_reserve(stack_st_SRTP_PROTECTION_PROFILE*, int) @nogc nothrow;
    static void sk_SRTP_PROTECTION_PROFILE_free(stack_st_SRTP_PROTECTION_PROFILE*) @nogc nothrow;
    static void sk_SRTP_PROTECTION_PROFILE_zero(stack_st_SRTP_PROTECTION_PROFILE*) @nogc nothrow;
    static srtp_protection_profile_st* sk_SRTP_PROTECTION_PROFILE_delete(stack_st_SRTP_PROTECTION_PROFILE*, int) @nogc nothrow;
    static srtp_protection_profile_st* sk_SRTP_PROTECTION_PROFILE_delete_ptr(stack_st_SRTP_PROTECTION_PROFILE*, srtp_protection_profile_st*) @nogc nothrow;
    static int sk_SRTP_PROTECTION_PROFILE_push(stack_st_SRTP_PROTECTION_PROFILE*, srtp_protection_profile_st*) @nogc nothrow;
    static int sk_SRTP_PROTECTION_PROFILE_unshift(stack_st_SRTP_PROTECTION_PROFILE*, srtp_protection_profile_st*) @nogc nothrow;
    char* SRP_check_known_gN_param(const(bignum_st)*, const(bignum_st)*) @nogc nothrow;
    SRP_gN_st* SRP_get_default_gN(const(char)*) @nogc nothrow;
    bignum_st* SRP_Calc_server_key(const(bignum_st)*, const(bignum_st)*, const(bignum_st)*, const(bignum_st)*, const(bignum_st)*) @nogc nothrow;
    bignum_st* SRP_Calc_B(const(bignum_st)*, const(bignum_st)*, const(bignum_st)*, const(bignum_st)*) @nogc nothrow;
    int SRP_Verify_A_mod_N(const(bignum_st)*, const(bignum_st)*) @nogc nothrow;
    bignum_st* SRP_Calc_u(const(bignum_st)*, const(bignum_st)*, const(bignum_st)*) @nogc nothrow;
    bignum_st* SRP_Calc_x(const(bignum_st)*, const(char)*, const(char)*) @nogc nothrow;
    bignum_st* SRP_Calc_A(const(bignum_st)*, const(bignum_st)*, const(bignum_st)*) @nogc nothrow;
    bignum_st* SRP_Calc_client_key(const(bignum_st)*, const(bignum_st)*, const(bignum_st)*, const(bignum_st)*, const(bignum_st)*, const(bignum_st)*) @nogc nothrow;
    int SRP_Verify_B_mod_N(const(bignum_st)*, const(bignum_st)*) @nogc nothrow;
    static srtp_protection_profile_st* sk_SRTP_PROTECTION_PROFILE_pop(stack_st_SRTP_PROTECTION_PROFILE*) @nogc nothrow;
    static srtp_protection_profile_st* sk_SRTP_PROTECTION_PROFILE_shift(stack_st_SRTP_PROTECTION_PROFILE*) @nogc nothrow;
    static void sk_SRTP_PROTECTION_PROFILE_pop_free(stack_st_SRTP_PROTECTION_PROFILE*, void function(srtp_protection_profile_st*)) @nogc nothrow;
    static int sk_SRTP_PROTECTION_PROFILE_insert(stack_st_SRTP_PROTECTION_PROFILE*, srtp_protection_profile_st*, int) @nogc nothrow;
    static srtp_protection_profile_st* sk_SRTP_PROTECTION_PROFILE_set(stack_st_SRTP_PROTECTION_PROFILE*, int, srtp_protection_profile_st*) @nogc nothrow;
    struct srtp_protection_profile_st
    {
        const(char)* name;
        c_ulong id;
    }
    alias SRTP_PROTECTION_PROFILE = srtp_protection_profile_st;
    struct stack_st_SSL_COMP;
    struct stack_st_SSL_CIPHER;
    struct ssl_comp_st;
    alias SSL_COMP = ssl_comp_st;
    struct ssl_conf_ctx_st;
    alias SSL_CONF_CTX = ssl_conf_ctx_st;
    struct tls_sigalgs_st;
    alias TLS_SIGALGS = tls_sigalgs_st;
    struct ssl_session_st;
    alias SSL_SESSION = ssl_session_st;
    struct ssl_cipher_st;
    alias SSL_CIPHER = ssl_cipher_st;
    struct ssl_method_st;
    alias SSL_METHOD = ssl_method_st;
    alias TLS_SESSION_TICKET_EXT = tls_session_ticket_ext_st;
    alias ssl_crock_st = ssl_st*;
    srtp_protection_profile_st* SSL_get_selected_srtp_profile(ssl_st*) @nogc nothrow;
    stack_st_SRTP_PROTECTION_PROFILE* SSL_get_srtp_profiles(ssl_st*) @nogc nothrow;
    int SSL_set_tlsext_use_srtp(ssl_st*, const(char)*) @nogc nothrow;
    int SSL_CTX_set_tlsext_use_srtp(ssl_ctx_st*, const(char)*) @nogc nothrow;
    void SHA512_Transform(SHA512state_st*, const(ubyte)*) @nogc nothrow;
    ubyte* SHA512(const(ubyte)*, c_ulong, ubyte*) @nogc nothrow;
    int SHA512_Final(ubyte*, SHA512state_st*) @nogc nothrow;
    int SHA512_Update(SHA512state_st*, const(void)*, c_ulong) @nogc nothrow;
    int SHA512_Init(SHA512state_st*) @nogc nothrow;
    ubyte* SHA384(const(ubyte)*, c_ulong, ubyte*) @nogc nothrow;
    int SHA384_Final(ubyte*, SHA512state_st*) @nogc nothrow;
    int SHA384_Update(SHA512state_st*, const(void)*, c_ulong) @nogc nothrow;
    int SHA384_Init(SHA512state_st*) @nogc nothrow;
    struct SHA512state_st
    {
        ulong[8] h;
        ulong Nl;
        ulong Nh;
        static union _Anonymous_26
        {
            ulong[16] d;
            ubyte[128] p;
        }
        _Anonymous_26 u;
        uint num;
        uint md_len;
    }
    alias SHA512_CTX = SHA512state_st;
    void SHA256_Transform(SHA256state_st*, const(ubyte)*) @nogc nothrow;
    ubyte* SHA256(const(ubyte)*, c_ulong, ubyte*) @nogc nothrow;
    int SHA256_Final(ubyte*, SHA256state_st*) @nogc nothrow;
    int SHA256_Update(SHA256state_st*, const(void)*, c_ulong) @nogc nothrow;
    int SHA256_Init(SHA256state_st*) @nogc nothrow;
    ubyte* SHA224(const(ubyte)*, c_ulong, ubyte*) @nogc nothrow;
    int SHA224_Final(ubyte*, SHA256state_st*) @nogc nothrow;
    int SHA224_Update(SHA256state_st*, const(void)*, c_ulong) @nogc nothrow;
    int SHA224_Init(SHA256state_st*) @nogc nothrow;
    struct SHA256state_st
    {
        uint[8] h;
        uint Nl;
        uint Nh;
        uint[16] data;
        uint num;
        uint md_len;
    }
    alias SHA256_CTX = SHA256state_st;
    void SHA1_Transform(SHAstate_st*, const(ubyte)*) @nogc nothrow;
    ubyte* SHA1(const(ubyte)*, c_ulong, ubyte*) @nogc nothrow;
    int SHA1_Final(ubyte*, SHAstate_st*) @nogc nothrow;
    int SHA1_Update(SHAstate_st*, const(void)*, c_ulong) @nogc nothrow;
    int SHA1_Init(SHAstate_st*) @nogc nothrow;
    struct SHAstate_st
    {
        uint h0;
        uint h1;
        uint h2;
        uint h3;
        uint h4;
        uint Nl;
        uint Nh;
        uint[16] data;
        uint num;
    }
    alias SHA_CTX = SHAstate_st;
    static int function(const(const(void)*)*, const(const(void)*)*) sk_OPENSSL_BLOCK_set_cmp_func(stack_st_OPENSSL_BLOCK*, int function(const(const(void)*)*, const(const(void)*)*)) @nogc nothrow;
    static stack_st_OPENSSL_BLOCK* sk_OPENSSL_BLOCK_dup(const(stack_st_OPENSSL_BLOCK)*) @nogc nothrow;
    static stack_st_OPENSSL_BLOCK* sk_OPENSSL_BLOCK_deep_copy(const(stack_st_OPENSSL_BLOCK)*, void* function(const(void)*), void function(void*)) @nogc nothrow;
    static int sk_OPENSSL_BLOCK_unshift(stack_st_OPENSSL_BLOCK*, void*) @nogc nothrow;
    static int sk_OPENSSL_BLOCK_is_sorted(const(stack_st_OPENSSL_BLOCK)*) @nogc nothrow;
    struct stack_st_OPENSSL_BLOCK;
    alias sk_OPENSSL_BLOCK_compfunc = int function(const(const(void)*)*, const(const(void)*)*);
    alias sk_OPENSSL_BLOCK_freefunc = void function(void*);
    alias sk_OPENSSL_BLOCK_copyfunc = void* function(const(void)*);
    static int sk_OPENSSL_BLOCK_num(const(stack_st_OPENSSL_BLOCK)*) @nogc nothrow;
    static void* sk_OPENSSL_BLOCK_value(const(stack_st_OPENSSL_BLOCK)*, int) @nogc nothrow;
    static stack_st_OPENSSL_BLOCK* sk_OPENSSL_BLOCK_new(int function(const(const(void)*)*, const(const(void)*)*)) @nogc nothrow;
    static stack_st_OPENSSL_BLOCK* sk_OPENSSL_BLOCK_new_null() @nogc nothrow;
    static stack_st_OPENSSL_BLOCK* sk_OPENSSL_BLOCK_new_reserve(int function(const(const(void)*)*, const(const(void)*)*), int) @nogc nothrow;
    static int sk_OPENSSL_BLOCK_reserve(stack_st_OPENSSL_BLOCK*, int) @nogc nothrow;
    static void sk_OPENSSL_BLOCK_free(stack_st_OPENSSL_BLOCK*) @nogc nothrow;
    static void sk_OPENSSL_BLOCK_zero(stack_st_OPENSSL_BLOCK*) @nogc nothrow;
    static void* sk_OPENSSL_BLOCK_delete(stack_st_OPENSSL_BLOCK*, int) @nogc nothrow;
    static void* sk_OPENSSL_BLOCK_delete_ptr(stack_st_OPENSSL_BLOCK*, void*) @nogc nothrow;
    static int sk_OPENSSL_BLOCK_push(stack_st_OPENSSL_BLOCK*, void*) @nogc nothrow;
    static void* sk_OPENSSL_BLOCK_pop(stack_st_OPENSSL_BLOCK*) @nogc nothrow;
    static void* sk_OPENSSL_BLOCK_shift(stack_st_OPENSSL_BLOCK*) @nogc nothrow;
    static void sk_OPENSSL_BLOCK_pop_free(stack_st_OPENSSL_BLOCK*, void function(void*)) @nogc nothrow;
    static int sk_OPENSSL_BLOCK_insert(stack_st_OPENSSL_BLOCK*, void*, int) @nogc nothrow;
    static void* sk_OPENSSL_BLOCK_set(stack_st_OPENSSL_BLOCK*, int, void*) @nogc nothrow;
    static int sk_OPENSSL_BLOCK_find(stack_st_OPENSSL_BLOCK*, void*) @nogc nothrow;
    static int sk_OPENSSL_BLOCK_find_ex(stack_st_OPENSSL_BLOCK*, void*) @nogc nothrow;
    static void sk_OPENSSL_BLOCK_sort(stack_st_OPENSSL_BLOCK*) @nogc nothrow;
    alias OPENSSL_BLOCK = void*;
    static const(char)* sk_OPENSSL_CSTRING_shift(stack_st_OPENSSL_CSTRING*) @nogc nothrow;
    static const(char)* sk_OPENSSL_CSTRING_pop(stack_st_OPENSSL_CSTRING*) @nogc nothrow;
    static int sk_OPENSSL_CSTRING_unshift(stack_st_OPENSSL_CSTRING*, const(char)*) @nogc nothrow;
    static int sk_OPENSSL_CSTRING_push(stack_st_OPENSSL_CSTRING*, const(char)*) @nogc nothrow;
    static void sk_OPENSSL_CSTRING_pop_free(stack_st_OPENSSL_CSTRING*, void function(char*)) @nogc nothrow;
    static const(char)* sk_OPENSSL_CSTRING_delete_ptr(stack_st_OPENSSL_CSTRING*, const(char)*) @nogc nothrow;
    static const(char)* sk_OPENSSL_CSTRING_delete(stack_st_OPENSSL_CSTRING*, int) @nogc nothrow;
    static void sk_OPENSSL_CSTRING_zero(stack_st_OPENSSL_CSTRING*) @nogc nothrow;
    static stack_st_OPENSSL_CSTRING* sk_OPENSSL_CSTRING_dup(const(stack_st_OPENSSL_CSTRING)*) @nogc nothrow;
    static int sk_OPENSSL_CSTRING_reserve(stack_st_OPENSSL_CSTRING*, int) @nogc nothrow;
    static int sk_OPENSSL_CSTRING_insert(stack_st_OPENSSL_CSTRING*, const(char)*, int) @nogc nothrow;
    static const(char)* sk_OPENSSL_CSTRING_set(stack_st_OPENSSL_CSTRING*, int, const(char)*) @nogc nothrow;
    static int sk_OPENSSL_CSTRING_find(stack_st_OPENSSL_CSTRING*, const(char)*) @nogc nothrow;
    static int sk_OPENSSL_CSTRING_find_ex(stack_st_OPENSSL_CSTRING*, const(char)*) @nogc nothrow;
    static void sk_OPENSSL_CSTRING_sort(stack_st_OPENSSL_CSTRING*) @nogc nothrow;
    static int sk_OPENSSL_CSTRING_is_sorted(const(stack_st_OPENSSL_CSTRING)*) @nogc nothrow;
    static int function(const(const(char)*)*, const(const(char)*)*) sk_OPENSSL_CSTRING_set_cmp_func(stack_st_OPENSSL_CSTRING*, int function(const(const(char)*)*, const(const(char)*)*)) @nogc nothrow;
    static stack_st_OPENSSL_CSTRING* sk_OPENSSL_CSTRING_deep_copy(const(stack_st_OPENSSL_CSTRING)*, char* function(const(char)*), void function(char*)) @nogc nothrow;
    static void sk_OPENSSL_CSTRING_free(stack_st_OPENSSL_CSTRING*) @nogc nothrow;
    static stack_st_OPENSSL_CSTRING* sk_OPENSSL_CSTRING_new_reserve(int function(const(const(char)*)*, const(const(char)*)*), int) @nogc nothrow;
    static stack_st_OPENSSL_CSTRING* sk_OPENSSL_CSTRING_new_null() @nogc nothrow;
    static stack_st_OPENSSL_CSTRING* sk_OPENSSL_CSTRING_new(int function(const(const(char)*)*, const(const(char)*)*)) @nogc nothrow;
    static const(char)* sk_OPENSSL_CSTRING_value(const(stack_st_OPENSSL_CSTRING)*, int) @nogc nothrow;
    static int sk_OPENSSL_CSTRING_num(const(stack_st_OPENSSL_CSTRING)*) @nogc nothrow;
    alias sk_OPENSSL_CSTRING_copyfunc = char* function(const(char)*);
    alias sk_OPENSSL_CSTRING_freefunc = void function(char*);
    alias sk_OPENSSL_CSTRING_compfunc = int function(const(const(char)*)*, const(const(char)*)*);
    struct stack_st_OPENSSL_CSTRING;
    static int function(const(const(char)*)*, const(const(char)*)*) sk_OPENSSL_STRING_set_cmp_func(stack_st_OPENSSL_STRING*, int function(const(const(char)*)*, const(const(char)*)*)) @nogc nothrow;
    static stack_st_OPENSSL_STRING* sk_OPENSSL_STRING_deep_copy(const(stack_st_OPENSSL_STRING)*, char* function(const(char)*), void function(char*)) @nogc nothrow;
    static stack_st_OPENSSL_STRING* sk_OPENSSL_STRING_dup(const(stack_st_OPENSSL_STRING)*) @nogc nothrow;
    static int sk_OPENSSL_STRING_is_sorted(const(stack_st_OPENSSL_STRING)*) @nogc nothrow;
    static void sk_OPENSSL_STRING_sort(stack_st_OPENSSL_STRING*) @nogc nothrow;
    static int sk_OPENSSL_STRING_find_ex(stack_st_OPENSSL_STRING*, char*) @nogc nothrow;
    static int sk_OPENSSL_STRING_find(stack_st_OPENSSL_STRING*, char*) @nogc nothrow;
    static stack_st_OPENSSL_STRING* sk_OPENSSL_STRING_new_null() @nogc nothrow;
    static stack_st_OPENSSL_STRING* sk_OPENSSL_STRING_new_reserve(int function(const(const(char)*)*, const(const(char)*)*), int) @nogc nothrow;
    static int sk_OPENSSL_STRING_reserve(stack_st_OPENSSL_STRING*, int) @nogc nothrow;
    static void sk_OPENSSL_STRING_free(stack_st_OPENSSL_STRING*) @nogc nothrow;
    static void sk_OPENSSL_STRING_zero(stack_st_OPENSSL_STRING*) @nogc nothrow;
    static char* sk_OPENSSL_STRING_delete(stack_st_OPENSSL_STRING*, int) @nogc nothrow;
    static void sk_OPENSSL_STRING_pop_free(stack_st_OPENSSL_STRING*, void function(char*)) @nogc nothrow;
    static char* sk_OPENSSL_STRING_delete_ptr(stack_st_OPENSSL_STRING*, char*) @nogc nothrow;
    static int sk_OPENSSL_STRING_push(stack_st_OPENSSL_STRING*, char*) @nogc nothrow;
    static int sk_OPENSSL_STRING_unshift(stack_st_OPENSSL_STRING*, char*) @nogc nothrow;
    static char* sk_OPENSSL_STRING_pop(stack_st_OPENSSL_STRING*) @nogc nothrow;
    static char* sk_OPENSSL_STRING_shift(stack_st_OPENSSL_STRING*) @nogc nothrow;
    static int sk_OPENSSL_STRING_insert(stack_st_OPENSSL_STRING*, char*, int) @nogc nothrow;
    static char* sk_OPENSSL_STRING_set(stack_st_OPENSSL_STRING*, int, char*) @nogc nothrow;
    static stack_st_OPENSSL_STRING* sk_OPENSSL_STRING_new(int function(const(const(char)*)*, const(const(char)*)*)) @nogc nothrow;
    static char* sk_OPENSSL_STRING_value(const(stack_st_OPENSSL_STRING)*, int) @nogc nothrow;
    static int sk_OPENSSL_STRING_num(const(stack_st_OPENSSL_STRING)*) @nogc nothrow;
    alias sk_OPENSSL_STRING_copyfunc = char* function(const(char)*);
    alias sk_OPENSSL_STRING_freefunc = void function(char*);
    alias sk_OPENSSL_STRING_compfunc = int function(const(const(char)*)*, const(const(char)*)*);
    struct stack_st_OPENSSL_STRING;
    alias OPENSSL_CSTRING = const(char)*;
    alias OPENSSL_STRING = char*;
    int ERR_load_RSA_strings() @nogc nothrow;
    int RSA_meth_set_multi_prime_keygen(rsa_meth_st*, int function(rsa_st*, int, int, bignum_st*, bn_gencb_st*)) @nogc nothrow;
    int function(rsa_st*, int, int, bignum_st*, bn_gencb_st*) RSA_meth_get_multi_prime_keygen(const(rsa_meth_st)*) @nogc nothrow;
    int RSA_meth_set_keygen(rsa_meth_st*, int function(rsa_st*, int, bignum_st*, bn_gencb_st*)) @nogc nothrow;
    int function(rsa_st*, int, bignum_st*, bn_gencb_st*) RSA_meth_get_keygen(const(rsa_meth_st)*) @nogc nothrow;
    int RSA_meth_set_verify(rsa_meth_st*, int function(int, const(ubyte)*, uint, const(ubyte)*, uint, const(rsa_st)*)) @nogc nothrow;
    int function(int, const(ubyte)*, uint, const(ubyte)*, uint, const(rsa_st)*) RSA_meth_get_verify(const(rsa_meth_st)*) @nogc nothrow;
    int RSA_meth_set_sign(rsa_meth_st*, int function(int, const(ubyte)*, uint, ubyte*, uint*, const(rsa_st)*)) @nogc nothrow;
    int function(int, const(ubyte)*, uint, ubyte*, uint*, const(rsa_st)*) RSA_meth_get_sign(const(rsa_meth_st)*) @nogc nothrow;
    int RSA_meth_set_finish(rsa_meth_st*, int function(rsa_st*)) @nogc nothrow;
    int function(rsa_st*) RSA_meth_get_finish(const(rsa_meth_st)*) @nogc nothrow;
    int RSA_meth_set_init(rsa_meth_st*, int function(rsa_st*)) @nogc nothrow;
    int function(rsa_st*) RSA_meth_get_init(const(rsa_meth_st)*) @nogc nothrow;
    int RSA_meth_set_bn_mod_exp(rsa_meth_st*, int function(bignum_st*, const(bignum_st)*, const(bignum_st)*, const(bignum_st)*, bignum_ctx*, bn_mont_ctx_st*)) @nogc nothrow;
    int function(bignum_st*, const(bignum_st)*, const(bignum_st)*, const(bignum_st)*, bignum_ctx*, bn_mont_ctx_st*) RSA_meth_get_bn_mod_exp(const(rsa_meth_st)*) @nogc nothrow;
    int RSA_meth_set_mod_exp(rsa_meth_st*, int function(bignum_st*, const(bignum_st)*, rsa_st*, bignum_ctx*)) @nogc nothrow;
    int function(bignum_st*, const(bignum_st)*, rsa_st*, bignum_ctx*) RSA_meth_get_mod_exp(const(rsa_meth_st)*) @nogc nothrow;
    int RSA_meth_set_priv_dec(rsa_meth_st*, int function(int, const(ubyte)*, ubyte*, rsa_st*, int)) @nogc nothrow;
    int function(int, const(ubyte)*, ubyte*, rsa_st*, int) RSA_meth_get_priv_dec(const(rsa_meth_st)*) @nogc nothrow;
    int RSA_meth_set_priv_enc(rsa_meth_st*, int function(int, const(ubyte)*, ubyte*, rsa_st*, int)) @nogc nothrow;
    int function(int, const(ubyte)*, ubyte*, rsa_st*, int) RSA_meth_get_priv_enc(const(rsa_meth_st)*) @nogc nothrow;
    int RSA_meth_set_pub_dec(rsa_meth_st*, int function(int, const(ubyte)*, ubyte*, rsa_st*, int)) @nogc nothrow;
    int function(int, const(ubyte)*, ubyte*, rsa_st*, int) RSA_meth_get_pub_dec(const(rsa_meth_st)*) @nogc nothrow;
    int RSA_meth_set_pub_enc(rsa_meth_st*, int function(int, const(ubyte)*, ubyte*, rsa_st*, int)) @nogc nothrow;
    int function(int, const(ubyte)*, ubyte*, rsa_st*, int) RSA_meth_get_pub_enc(const(rsa_meth_st)*) @nogc nothrow;
    int RSA_meth_set0_app_data(rsa_meth_st*, void*) @nogc nothrow;
    void* RSA_meth_get0_app_data(const(rsa_meth_st)*) @nogc nothrow;
    int RSA_meth_set_flags(rsa_meth_st*, int) @nogc nothrow;
    int RSA_meth_get_flags(const(rsa_meth_st)*) @nogc nothrow;
    int RSA_meth_set1_name(rsa_meth_st*, const(char)*) @nogc nothrow;
    const(char)* RSA_meth_get0_name(const(rsa_meth_st)*) @nogc nothrow;
    rsa_meth_st* RSA_meth_dup(const(rsa_meth_st)*) @nogc nothrow;
    void RSA_meth_free(rsa_meth_st*) @nogc nothrow;
    rsa_meth_st* RSA_meth_new(const(char)*, int) @nogc nothrow;
    rsa_st* RSAPrivateKey_dup(rsa_st*) @nogc nothrow;
    rsa_st* RSAPublicKey_dup(rsa_st*) @nogc nothrow;
    void* RSA_get_ex_data(const(rsa_st)*, int) @nogc nothrow;
    int RSA_set_ex_data(rsa_st*, int, void*) @nogc nothrow;
    int RSA_padding_add_PKCS1_PSS_mgf1(rsa_st*, ubyte*, const(ubyte)*, const(evp_md_st)*, const(evp_md_st)*, int) @nogc nothrow;
    int RSA_verify_PKCS1_PSS_mgf1(rsa_st*, const(ubyte)*, const(evp_md_st)*, const(evp_md_st)*, const(ubyte)*, int) @nogc nothrow;
    int RSA_padding_add_PKCS1_PSS(rsa_st*, ubyte*, const(ubyte)*, const(evp_md_st)*, int) @nogc nothrow;
    int RSA_verify_PKCS1_PSS(rsa_st*, const(ubyte)*, const(evp_md_st)*, const(ubyte)*, int) @nogc nothrow;
    int RSA_X931_hash_id(int) @nogc nothrow;
    int RSA_padding_check_X931(ubyte*, int, const(ubyte)*, int, int) @nogc nothrow;
    int RSA_padding_add_X931(ubyte*, int, const(ubyte)*, int) @nogc nothrow;
    int RSA_padding_check_none(ubyte*, int, const(ubyte)*, int, int) @nogc nothrow;
    int RSA_padding_add_none(ubyte*, int, const(ubyte)*, int) @nogc nothrow;
    int RSA_padding_check_SSLv23(ubyte*, int, const(ubyte)*, int, int) @nogc nothrow;
    int RSA_padding_add_SSLv23(ubyte*, int, const(ubyte)*, int) @nogc nothrow;
    int RSA_padding_check_PKCS1_OAEP_mgf1(ubyte*, int, const(ubyte)*, int, int, const(ubyte)*, int, const(evp_md_st)*, const(evp_md_st)*) @nogc nothrow;
    int RSA_padding_add_PKCS1_OAEP_mgf1(ubyte*, int, const(ubyte)*, int, const(ubyte)*, int, const(evp_md_st)*, const(evp_md_st)*) @nogc nothrow;
    int RSA_padding_check_PKCS1_OAEP(ubyte*, int, const(ubyte)*, int, int, const(ubyte)*, int) @nogc nothrow;
    int RSA_padding_add_PKCS1_OAEP(ubyte*, int, const(ubyte)*, int, const(ubyte)*, int) @nogc nothrow;
    int PKCS1_MGF1(ubyte*, c_long, const(ubyte)*, c_long, const(evp_md_st)*) @nogc nothrow;
    int RSA_padding_check_PKCS1_type_2(ubyte*, int, const(ubyte)*, int, int) @nogc nothrow;
    int RSA_padding_add_PKCS1_type_2(ubyte*, int, const(ubyte)*, int) @nogc nothrow;
    int RSA_padding_check_PKCS1_type_1(ubyte*, int, const(ubyte)*, int, int) @nogc nothrow;
    int RSA_padding_add_PKCS1_type_1(ubyte*, int, const(ubyte)*, int) @nogc nothrow;
    bn_blinding_st* RSA_setup_blinding(rsa_st*, bignum_ctx*) @nogc nothrow;
    void RSA_blinding_off(rsa_st*) @nogc nothrow;
    int RSA_blinding_on(rsa_st*, bignum_ctx*) @nogc nothrow;
    const(char)* SSL_get_servername(const(ssl_st)*, const(int)) @nogc nothrow;
    int SSL_get_servername_type(const(ssl_st)*) @nogc nothrow;
    int SSL_export_keying_material(ssl_st*, ubyte*, c_ulong, const(char)*, c_ulong, const(ubyte)*, c_ulong, int) @nogc nothrow;
    int SSL_get_sigalgs(ssl_st*, int, int*, int*, int*, ubyte*, ubyte*) @nogc nothrow;
    int SSL_get_shared_sigalgs(ssl_st*, int, int*, int*, int*, ubyte*, ubyte*) @nogc nothrow;
    int SSL_check_chain(ssl_st*, x509_st*, evp_pkey_st*, stack_st_X509*) @nogc nothrow;
    int RSA_verify_ASN1_OCTET_STRING(int, const(ubyte)*, uint, ubyte*, uint, rsa_st*) @nogc nothrow;
    int RSA_sign_ASN1_OCTET_STRING(int, const(ubyte)*, uint, ubyte*, uint*, rsa_st*) @nogc nothrow;
    int RSA_verify(int, const(ubyte)*, uint, const(ubyte)*, uint, rsa_st*) @nogc nothrow;
    int RSA_sign(int, const(ubyte)*, uint, ubyte*, uint*, rsa_st*) @nogc nothrow;
    int RSA_print(bio_st*, const(rsa_st)*, int) @nogc nothrow;
    int RSA_print_fp(_IO_FILE*, const(rsa_st)*, int) @nogc nothrow;
    rsa_oaep_params_st* d2i_RSA_OAEP_PARAMS(rsa_oaep_params_st**, const(ubyte)**, c_long) @nogc nothrow;
    rsa_oaep_params_st* RSA_OAEP_PARAMS_new() @nogc nothrow;
    extern __gshared const(ASN1_ITEM_st) RSA_OAEP_PARAMS_it;
    int i2d_RSA_OAEP_PARAMS(rsa_oaep_params_st*, ubyte**) @nogc nothrow;
    void RSA_OAEP_PARAMS_free(rsa_oaep_params_st*) @nogc nothrow;
    struct rsa_oaep_params_st
    {
        X509_algor_st* hashFunc;
        X509_algor_st* maskGenFunc;
        X509_algor_st* pSourceFunc;
        X509_algor_st* maskHash;
    }
    alias RSA_OAEP_PARAMS = rsa_oaep_params_st;
    rsa_pss_params_st* d2i_RSA_PSS_PARAMS(rsa_pss_params_st**, const(ubyte)**, c_long) @nogc nothrow;
    rsa_pss_params_st* RSA_PSS_PARAMS_new() @nogc nothrow;
    extern __gshared const(ASN1_ITEM_st) RSA_PSS_PARAMS_it;
    int i2d_RSA_PSS_PARAMS(rsa_pss_params_st*, ubyte**) @nogc nothrow;
    void RSA_PSS_PARAMS_free(rsa_pss_params_st*) @nogc nothrow;
    rsa_st* d2i_RSAPrivateKey(rsa_st**, const(ubyte)**, c_long) @nogc nothrow;
    extern __gshared const(ASN1_ITEM_st) RSAPrivateKey_it;
    int i2d_RSAPrivateKey(const(rsa_st)*, ubyte**) @nogc nothrow;
    rsa_st* d2i_RSAPublicKey(rsa_st**, const(ubyte)**, c_long) @nogc nothrow;
    int i2d_RSAPublicKey(const(rsa_st)*, ubyte**) @nogc nothrow;
    extern __gshared const(ASN1_ITEM_st) RSAPublicKey_it;
    int RSA_pkey_ctx_ctrl(evp_pkey_ctx_st*, int, int, int, void*) @nogc nothrow;
    const(rsa_meth_st)* RSA_PKCS1_OpenSSL() @nogc nothrow;
    int RSA_set_method(rsa_st*, const(rsa_meth_st)*) @nogc nothrow;
    const(rsa_meth_st)* RSA_get_method(const(rsa_st)*) @nogc nothrow;
    const(rsa_meth_st)* RSA_null_method() @nogc nothrow;
    const(rsa_meth_st)* RSA_get_default_method() @nogc nothrow;
    void RSA_set_default_method(const(rsa_meth_st)*) @nogc nothrow;
    int RSA_flags(const(rsa_st)*) @nogc nothrow;
    int RSA_up_ref(rsa_st*) @nogc nothrow;
    void RSA_free(rsa_st*) @nogc nothrow;
    int RSA_private_decrypt(int, const(ubyte)*, ubyte*, rsa_st*, int) @nogc nothrow;
    int RSA_public_decrypt(int, const(ubyte)*, ubyte*, rsa_st*, int) @nogc nothrow;
    int RSA_private_encrypt(int, const(ubyte)*, ubyte*, rsa_st*, int) @nogc nothrow;
    int RSA_public_encrypt(int, const(ubyte)*, ubyte*, rsa_st*, int) @nogc nothrow;
    int RSA_check_key_ex(const(rsa_st)*, bn_gencb_st*) @nogc nothrow;
    int RSA_check_key(const(rsa_st)*) @nogc nothrow;
    int RSA_X931_generate_key_ex(rsa_st*, int, const(bignum_st)*, bn_gencb_st*) @nogc nothrow;
    int RSA_X931_derive_ex(rsa_st*, bignum_st*, bignum_st*, bignum_st*, bignum_st*, const(bignum_st)*, const(bignum_st)*, const(bignum_st)*, const(bignum_st)*, const(bignum_st)*, const(bignum_st)*, const(bignum_st)*, bn_gencb_st*) @nogc nothrow;
    int RSA_generate_multi_prime_key(rsa_st*, int, int, bignum_st*, bn_gencb_st*) @nogc nothrow;
    int RSA_generate_key_ex(rsa_st*, int, bignum_st*, bn_gencb_st*) @nogc nothrow;
    rsa_st* RSA_generate_key(int, c_ulong, void function(int, int, void*), void*) @nogc nothrow;
    engine_st* RSA_get0_engine(const(rsa_st)*) @nogc nothrow;
    int RSA_get_version(rsa_st*) @nogc nothrow;
    void RSA_set_flags(rsa_st*, int) @nogc nothrow;
    int RSA_test_flags(const(rsa_st)*, int) @nogc nothrow;
    void RSA_clear_flags(rsa_st*, int) @nogc nothrow;
    const(rsa_pss_params_st)* RSA_get0_pss_params(const(rsa_st)*) @nogc nothrow;
    const(bignum_st)* RSA_get0_iqmp(const(rsa_st)*) @nogc nothrow;
    const(bignum_st)* RSA_get0_dmq1(const(rsa_st)*) @nogc nothrow;
    const(bignum_st)* RSA_get0_dmp1(const(rsa_st)*) @nogc nothrow;
    const(bignum_st)* RSA_get0_q(const(rsa_st)*) @nogc nothrow;
    const(bignum_st)* RSA_get0_p(const(rsa_st)*) @nogc nothrow;
    const(bignum_st)* RSA_get0_d(const(rsa_st)*) @nogc nothrow;
    const(bignum_st)* RSA_get0_e(const(rsa_st)*) @nogc nothrow;
    const(bignum_st)* RSA_get0_n(const(rsa_st)*) @nogc nothrow;
    int RSA_get0_multi_prime_crt_params(const(rsa_st)*, const(bignum_st)**, const(bignum_st)**) @nogc nothrow;
    void RSA_get0_crt_params(const(rsa_st)*, const(bignum_st)**, const(bignum_st)**, const(bignum_st)**) @nogc nothrow;
    int RSA_get0_multi_prime_factors(const(rsa_st)*, const(bignum_st)**) @nogc nothrow;
    int RSA_get_multi_prime_extra_count(const(rsa_st)*) @nogc nothrow;
    void RSA_get0_factors(const(rsa_st)*, const(bignum_st)**, const(bignum_st)**) @nogc nothrow;
    void RSA_get0_key(const(rsa_st)*, const(bignum_st)**, const(bignum_st)**, const(bignum_st)**) @nogc nothrow;
    int RSA_set0_multi_prime_params(rsa_st*, bignum_st**, bignum_st**, bignum_st**, int) @nogc nothrow;
    int RSA_set0_crt_params(rsa_st*, bignum_st*, bignum_st*, bignum_st*) @nogc nothrow;
    int RSA_set0_factors(rsa_st*, bignum_st*, bignum_st*) @nogc nothrow;
    int RSA_set0_key(rsa_st*, bignum_st*, bignum_st*, bignum_st*) @nogc nothrow;
    int RSA_security_bits(const(rsa_st)*) @nogc nothrow;
    int RSA_size(const(rsa_st)*) @nogc nothrow;
    int RSA_bits(const(rsa_st)*) @nogc nothrow;
    rsa_st* RSA_new_method(engine_st*) @nogc nothrow;
    rsa_st* RSA_new() @nogc nothrow;
    int ERR_load_RAND_strings() @nogc nothrow;
    int RAND_poll() @nogc nothrow;
    int RAND_status() @nogc nothrow;
    const(char)* RAND_file_name(char*, c_ulong) @nogc nothrow;
    int RAND_write_file(const(char)*) @nogc nothrow;
    int RAND_load_file(const(char)*, c_long) @nogc nothrow;
    void RAND_add(const(void)*, int, double) @nogc nothrow;
    void RAND_keep_random_devices_open(int) @nogc nothrow;
    void RAND_seed(const(void)*, int) @nogc nothrow;
    int RAND_pseudo_bytes(ubyte*, int) @nogc nothrow;
    int RAND_priv_bytes(ubyte*, int) @nogc nothrow;
    int RAND_bytes(ubyte*, int) @nogc nothrow;
    rand_meth_st* RAND_OpenSSL() @nogc nothrow;
    int RAND_set_rand_engine(engine_st*) @nogc nothrow;
    const(rand_meth_st)* RAND_get_rand_method() @nogc nothrow;
    int RAND_set_rand_method(const(rand_meth_st)*) @nogc nothrow;
    int ERR_load_PKCS7_strings() @nogc nothrow;
    bio_st* BIO_new_PKCS7(bio_st*, pkcs7_st*) @nogc nothrow;
    pkcs7_st* SMIME_read_PKCS7(bio_st*, bio_st**) @nogc nothrow;
    int SMIME_write_PKCS7(bio_st*, pkcs7_st*, bio_st*, int) @nogc nothrow;
    int PKCS7_add1_attrib_digest(pkcs7_signer_info_st*, const(ubyte)*, int) @nogc nothrow;
    int PKCS7_add0_attrib_signing_time(pkcs7_signer_info_st*, asn1_string_st*) @nogc nothrow;
    int PKCS7_add_attrib_content_type(pkcs7_signer_info_st*, asn1_object_st*) @nogc nothrow;
    int PKCS7_simple_smimecap(stack_st_X509_ALGOR*, int, int) @nogc nothrow;
    stack_st_X509_ALGOR* PKCS7_get_smimecap(pkcs7_signer_info_st*) @nogc nothrow;
    int PKCS7_add_attrib_smimecap(pkcs7_signer_info_st*, stack_st_X509_ALGOR*) @nogc nothrow;
    int PKCS7_decrypt(pkcs7_st*, evp_pkey_st*, x509_st*, bio_st*, int) @nogc nothrow;
    pkcs7_st* PKCS7_encrypt(stack_st_X509*, bio_st*, const(evp_cipher_st)*, int) @nogc nothrow;
    stack_st_X509* PKCS7_get0_signers(pkcs7_st*, stack_st_X509*, int) @nogc nothrow;
    int PKCS7_verify(pkcs7_st*, stack_st_X509*, x509_store_st*, bio_st*, bio_st*, int) @nogc nothrow;
    int PKCS7_final(pkcs7_st*, bio_st*, int) @nogc nothrow;
    pkcs7_signer_info_st* PKCS7_sign_add_signer(pkcs7_st*, x509_st*, evp_pkey_st*, const(evp_md_st)*, int) @nogc nothrow;
    pkcs7_st* PKCS7_sign(x509_st*, evp_pkey_st*, stack_st_X509*, bio_st*, int) @nogc nothrow;
    int PKCS7_set_attributes(pkcs7_signer_info_st*, stack_st_X509_ATTRIBUTE*) @nogc nothrow;
    int PKCS7_set_signed_attributes(pkcs7_signer_info_st*, stack_st_X509_ATTRIBUTE*) @nogc nothrow;
    asn1_type_st* PKCS7_get_signed_attribute(pkcs7_signer_info_st*, int) @nogc nothrow;
    asn1_type_st* PKCS7_get_attribute(pkcs7_signer_info_st*, int) @nogc nothrow;
    int PKCS7_add_attribute(pkcs7_signer_info_st*, int, int, void*) @nogc nothrow;
    int PKCS7_add_signed_attribute(pkcs7_signer_info_st*, int, int, void*) @nogc nothrow;
    asn1_string_st* PKCS7_digest_from_attributes(stack_st_X509_ATTRIBUTE*) @nogc nothrow;
    pkcs7_issuer_and_serial_st* PKCS7_get_issuer_and_serial(pkcs7_st*, int) @nogc nothrow;
    int PKCS7_stream(ubyte***, pkcs7_st*) @nogc nothrow;
    int PKCS7_set_cipher(pkcs7_st*, const(evp_cipher_st)*) @nogc nothrow;
    int PKCS7_RECIP_INFO_set(pkcs7_recip_info_st*, x509_st*) @nogc nothrow;
    int PKCS7_add_recipient_info(pkcs7_st*, pkcs7_recip_info_st*) @nogc nothrow;
    void PKCS7_RECIP_INFO_get0_alg(pkcs7_recip_info_st*, X509_algor_st**) @nogc nothrow;
    void PKCS7_SIGNER_INFO_get0_algs(pkcs7_signer_info_st*, evp_pkey_st**, X509_algor_st**, X509_algor_st**) @nogc nothrow;
    pkcs7_recip_info_st* PKCS7_add_recipient(pkcs7_st*, x509_st*) @nogc nothrow;
    stack_st_PKCS7_SIGNER_INFO* PKCS7_get_signer_info(pkcs7_st*) @nogc nothrow;
    int PKCS7_set_digest(pkcs7_st*, const(evp_md_st)*) @nogc nothrow;
    x509_st* PKCS7_cert_from_signer_info(pkcs7_st*, pkcs7_signer_info_st*) @nogc nothrow;
    pkcs7_signer_info_st* PKCS7_add_signature(pkcs7_st*, x509_st*, evp_pkey_st*, const(evp_md_st)*) @nogc nothrow;
    bio_st* PKCS7_dataDecode(pkcs7_st*, evp_pkey_st*, bio_st*, x509_st*) @nogc nothrow;
    int PKCS7_dataFinal(pkcs7_st*, bio_st*) @nogc nothrow;
    bio_st* PKCS7_dataInit(pkcs7_st*, bio_st*) @nogc nothrow;
    int PKCS7_signatureVerify(bio_st*, pkcs7_st*, pkcs7_signer_info_st*, x509_st*) @nogc nothrow;
    int PKCS7_dataVerify(x509_store_st*, x509_store_ctx_st*, bio_st*, pkcs7_st*, pkcs7_signer_info_st*) @nogc nothrow;
    int PKCS7_content_new(pkcs7_st*, int) @nogc nothrow;
    int PKCS7_add_crl(pkcs7_st*, X509_crl_st*) @nogc nothrow;
    int PKCS7_add_certificate(pkcs7_st*, x509_st*) @nogc nothrow;
    int PKCS7_add_signer(pkcs7_st*, pkcs7_signer_info_st*) @nogc nothrow;
    int PKCS7_SIGNER_INFO_sign(pkcs7_signer_info_st*) @nogc nothrow;
    int PKCS7_SIGNER_INFO_set(pkcs7_signer_info_st*, x509_st*, evp_pkey_st*, const(evp_md_st)*) @nogc nothrow;
    int PKCS7_set_content(pkcs7_st*, pkcs7_st*) @nogc nothrow;
    int PKCS7_set0_type_other(pkcs7_st*, int, asn1_type_st*) @nogc nothrow;
    int PKCS7_set_type(pkcs7_st*, int) @nogc nothrow;
    c_long PKCS7_ctrl(pkcs7_st*, int, c_long, char*) @nogc nothrow;
    int PKCS7_print_ctx(bio_st*, pkcs7_st*, int, const(asn1_pctx_st)*) @nogc nothrow;
    int i2d_PKCS7_NDEF(pkcs7_st*, ubyte**) @nogc nothrow;
    extern __gshared const(ASN1_ITEM_st) PKCS7_ATTR_VERIFY_it;
    extern __gshared const(ASN1_ITEM_st) PKCS7_ATTR_SIGN_it;
    pkcs7_st* d2i_PKCS7(pkcs7_st**, const(ubyte)**, c_long) @nogc nothrow;
    pkcs7_st* PKCS7_new() @nogc nothrow;
    void PKCS7_free(pkcs7_st*) @nogc nothrow;
    extern __gshared const(ASN1_ITEM_st) PKCS7_it;
    int i2d_PKCS7(pkcs7_st*, ubyte**) @nogc nothrow;
    pkcs7_encrypted_st* d2i_PKCS7_ENCRYPT(pkcs7_encrypted_st**, const(ubyte)**, c_long) @nogc nothrow;
    pkcs7_encrypted_st* PKCS7_ENCRYPT_new() @nogc nothrow;
    extern __gshared const(ASN1_ITEM_st) PKCS7_ENCRYPT_it;
    int i2d_PKCS7_ENCRYPT(pkcs7_encrypted_st*, ubyte**) @nogc nothrow;
    void PKCS7_ENCRYPT_free(pkcs7_encrypted_st*) @nogc nothrow;
    pkcs7_digest_st* d2i_PKCS7_DIGEST(pkcs7_digest_st**, const(ubyte)**, c_long) @nogc nothrow;
    pkcs7_digest_st* PKCS7_DIGEST_new() @nogc nothrow;
    extern __gshared const(ASN1_ITEM_st) PKCS7_DIGEST_it;
    int i2d_PKCS7_DIGEST(pkcs7_digest_st*, ubyte**) @nogc nothrow;
    void PKCS7_DIGEST_free(pkcs7_digest_st*) @nogc nothrow;
    pkcs7_signedandenveloped_st* d2i_PKCS7_SIGN_ENVELOPE(pkcs7_signedandenveloped_st**, const(ubyte)**, c_long) @nogc nothrow;
    pkcs7_signedandenveloped_st* PKCS7_SIGN_ENVELOPE_new() @nogc nothrow;
    int i2d_PKCS7_SIGN_ENVELOPE(pkcs7_signedandenveloped_st*, ubyte**) @nogc nothrow;
    extern __gshared const(ASN1_ITEM_st) PKCS7_SIGN_ENVELOPE_it;
    void PKCS7_SIGN_ENVELOPE_free(pkcs7_signedandenveloped_st*) @nogc nothrow;
    pkcs7_enveloped_st* d2i_PKCS7_ENVELOPE(pkcs7_enveloped_st**, const(ubyte)**, c_long) @nogc nothrow;
    pkcs7_enveloped_st* PKCS7_ENVELOPE_new() @nogc nothrow;
    extern __gshared const(ASN1_ITEM_st) PKCS7_ENVELOPE_it;
    int i2d_PKCS7_ENVELOPE(pkcs7_enveloped_st*, ubyte**) @nogc nothrow;
    void PKCS7_ENVELOPE_free(pkcs7_enveloped_st*) @nogc nothrow;
    pkcs7_enc_content_st* d2i_PKCS7_ENC_CONTENT(pkcs7_enc_content_st**, const(ubyte)**, c_long) @nogc nothrow;
    pkcs7_enc_content_st* PKCS7_ENC_CONTENT_new() @nogc nothrow;
    extern __gshared const(ASN1_ITEM_st) PKCS7_ENC_CONTENT_it;
    int i2d_PKCS7_ENC_CONTENT(pkcs7_enc_content_st*, ubyte**) @nogc nothrow;
    void PKCS7_ENC_CONTENT_free(pkcs7_enc_content_st*) @nogc nothrow;
    pkcs7_signed_st* d2i_PKCS7_SIGNED(pkcs7_signed_st**, const(ubyte)**, c_long) @nogc nothrow;
    pkcs7_signed_st* PKCS7_SIGNED_new() @nogc nothrow;
    int i2d_PKCS7_SIGNED(pkcs7_signed_st*, ubyte**) @nogc nothrow;
    extern __gshared const(ASN1_ITEM_st) PKCS7_SIGNED_it;
    void PKCS7_SIGNED_free(pkcs7_signed_st*) @nogc nothrow;
    pkcs7_recip_info_st* d2i_PKCS7_RECIP_INFO(pkcs7_recip_info_st**, const(ubyte)**, c_long) @nogc nothrow;
    pkcs7_recip_info_st* PKCS7_RECIP_INFO_new() @nogc nothrow;
    extern __gshared const(ASN1_ITEM_st) PKCS7_RECIP_INFO_it;
    int i2d_PKCS7_RECIP_INFO(pkcs7_recip_info_st*, ubyte**) @nogc nothrow;
    void PKCS7_RECIP_INFO_free(pkcs7_recip_info_st*) @nogc nothrow;
    pkcs7_signer_info_st* PKCS7_SIGNER_INFO_new() @nogc nothrow;
    pkcs7_signer_info_st* d2i_PKCS7_SIGNER_INFO(pkcs7_signer_info_st**, const(ubyte)**, c_long) @nogc nothrow;
    extern __gshared const(ASN1_ITEM_st) PKCS7_SIGNER_INFO_it;
    int i2d_PKCS7_SIGNER_INFO(pkcs7_signer_info_st*, ubyte**) @nogc nothrow;
    void PKCS7_SIGNER_INFO_free(pkcs7_signer_info_st*) @nogc nothrow;
    int PEM_write_bio_PKCS7_stream(bio_st*, pkcs7_st*, bio_st*, int) @nogc nothrow;
    int i2d_PKCS7_bio_stream(bio_st*, pkcs7_st*, bio_st*, int) @nogc nothrow;
    int i2d_PKCS7_bio(bio_st*, pkcs7_st*) @nogc nothrow;
    pkcs7_st* d2i_PKCS7_bio(bio_st*, pkcs7_st**) @nogc nothrow;
    pkcs7_st* PKCS7_dup(pkcs7_st*) @nogc nothrow;
    int i2d_PKCS7_fp(_IO_FILE*, pkcs7_st*) @nogc nothrow;
    pkcs7_st* d2i_PKCS7_fp(_IO_FILE*, pkcs7_st**) @nogc nothrow;
    int PKCS7_ISSUER_AND_SERIAL_digest(pkcs7_issuer_and_serial_st*, const(evp_md_st)*, ubyte*, uint*) @nogc nothrow;
    pkcs7_issuer_and_serial_st* PKCS7_ISSUER_AND_SERIAL_new() @nogc nothrow;
    pkcs7_issuer_and_serial_st* d2i_PKCS7_ISSUER_AND_SERIAL(pkcs7_issuer_and_serial_st**, const(ubyte)**, c_long) @nogc nothrow;
    void PKCS7_ISSUER_AND_SERIAL_free(pkcs7_issuer_and_serial_st*) @nogc nothrow;
    extern __gshared const(ASN1_ITEM_st) PKCS7_ISSUER_AND_SERIAL_it;
    int i2d_PKCS7_ISSUER_AND_SERIAL(pkcs7_issuer_and_serial_st*, ubyte**) @nogc nothrow;
    static int function(const(const(pkcs7_st)*)*, const(const(pkcs7_st)*)*) sk_PKCS7_set_cmp_func(stack_st_PKCS7*, int function(const(const(pkcs7_st)*)*, const(const(pkcs7_st)*)*)) @nogc nothrow;
    alias sk_PKCS7_compfunc = int function(const(const(pkcs7_st)*)*, const(const(pkcs7_st)*)*);
    static void sk_PKCS7_zero(stack_st_PKCS7*) @nogc nothrow;
    static void sk_PKCS7_free(stack_st_PKCS7*) @nogc nothrow;
    static int sk_PKCS7_reserve(stack_st_PKCS7*, int) @nogc nothrow;
    static stack_st_PKCS7* sk_PKCS7_new_reserve(int function(const(const(pkcs7_st)*)*, const(const(pkcs7_st)*)*), int) @nogc nothrow;
    static stack_st_PKCS7* sk_PKCS7_new_null() @nogc nothrow;
    static stack_st_PKCS7* sk_PKCS7_new(int function(const(const(pkcs7_st)*)*, const(const(pkcs7_st)*)*)) @nogc nothrow;
    static pkcs7_st* sk_PKCS7_value(const(stack_st_PKCS7)*, int) @nogc nothrow;
    static int sk_PKCS7_num(const(stack_st_PKCS7)*) @nogc nothrow;
    alias sk_PKCS7_copyfunc = pkcs7_st* function(const(pkcs7_st)*);
    alias sk_PKCS7_freefunc = void function(pkcs7_st*);
    static pkcs7_st* sk_PKCS7_delete_ptr(stack_st_PKCS7*, pkcs7_st*) @nogc nothrow;
    static int sk_PKCS7_push(stack_st_PKCS7*, pkcs7_st*) @nogc nothrow;
    static int sk_PKCS7_unshift(stack_st_PKCS7*, pkcs7_st*) @nogc nothrow;
    static pkcs7_st* sk_PKCS7_pop(stack_st_PKCS7*) @nogc nothrow;
    static pkcs7_st* sk_PKCS7_shift(stack_st_PKCS7*) @nogc nothrow;
    static void sk_PKCS7_pop_free(stack_st_PKCS7*, void function(pkcs7_st*)) @nogc nothrow;
    static int sk_PKCS7_insert(stack_st_PKCS7*, pkcs7_st*, int) @nogc nothrow;
    struct stack_st_PKCS7;
    static pkcs7_st* sk_PKCS7_delete(stack_st_PKCS7*, int) @nogc nothrow;
    static pkcs7_st* sk_PKCS7_set(stack_st_PKCS7*, int, pkcs7_st*) @nogc nothrow;
    static int sk_PKCS7_find(stack_st_PKCS7*, pkcs7_st*) @nogc nothrow;
    static int sk_PKCS7_find_ex(stack_st_PKCS7*, pkcs7_st*) @nogc nothrow;
    static void sk_PKCS7_sort(stack_st_PKCS7*) @nogc nothrow;
    static int sk_PKCS7_is_sorted(const(stack_st_PKCS7)*) @nogc nothrow;
    static stack_st_PKCS7* sk_PKCS7_dup(const(stack_st_PKCS7)*) @nogc nothrow;
    static stack_st_PKCS7* sk_PKCS7_deep_copy(const(stack_st_PKCS7)*, pkcs7_st* function(const(pkcs7_st)*), void function(pkcs7_st*)) @nogc nothrow;
    alias PKCS7 = pkcs7_st;
    struct pkcs7_encrypted_st
    {
        asn1_string_st* version_;
        pkcs7_enc_content_st* enc_data;
    }
    alias PKCS7_ENCRYPT = pkcs7_encrypted_st;
    struct pkcs7_digest_st
    {
        asn1_string_st* version_;
        X509_algor_st* md;
        pkcs7_st* contents;
        asn1_string_st* digest;
    }
    alias PKCS7_DIGEST = pkcs7_digest_st;
    struct pkcs7_signedandenveloped_st
    {
        asn1_string_st* version_;
        stack_st_X509_ALGOR* md_algs;
        stack_st_X509* cert;
        stack_st_X509_CRL* crl;
        stack_st_PKCS7_SIGNER_INFO* signer_info;
        pkcs7_enc_content_st* enc_data;
        stack_st_PKCS7_RECIP_INFO* recipientinfo;
    }
    alias PKCS7_SIGN_ENVELOPE = pkcs7_signedandenveloped_st;
    struct pkcs7_enveloped_st
    {
        asn1_string_st* version_;
        stack_st_PKCS7_RECIP_INFO* recipientinfo;
        pkcs7_enc_content_st* enc_data;
    }
    alias PKCS7_ENVELOPE = pkcs7_enveloped_st;
    struct pkcs7_enc_content_st
    {
        asn1_object_st* content_type;
        X509_algor_st* algorithm;
        asn1_string_st* enc_data;
        const(evp_cipher_st)* cipher;
    }
    alias PKCS7_ENC_CONTENT = pkcs7_enc_content_st;
    struct pkcs7_st
    {
        ubyte* asn1;
        c_long length;
        int state;
        int detached;
        asn1_object_st* type;
        static union _Anonymous_27
        {
            char* ptr;
            asn1_string_st* data;
            pkcs7_signed_st* sign;
            pkcs7_enveloped_st* enveloped;
            pkcs7_signedandenveloped_st* signed_and_enveloped;
            pkcs7_digest_st* digest;
            pkcs7_encrypted_st* encrypted;
            asn1_type_st* other;
        }
        _Anonymous_27 d;
    }
    struct pkcs7_signed_st
    {
        asn1_string_st* version_;
        stack_st_X509_ALGOR* md_algs;
        stack_st_X509* cert;
        stack_st_X509_CRL* crl;
        stack_st_PKCS7_SIGNER_INFO* signer_info;
        pkcs7_st* contents;
    }
    alias PKCS7_SIGNED = pkcs7_signed_st;
    static int sk_PKCS7_RECIP_INFO_insert(stack_st_PKCS7_RECIP_INFO*, pkcs7_recip_info_st*, int) @nogc nothrow;
    alias sk_PKCS7_RECIP_INFO_copyfunc = pkcs7_recip_info_st* function(const(pkcs7_recip_info_st)*);
    struct stack_st_PKCS7_RECIP_INFO;
    alias sk_PKCS7_RECIP_INFO_compfunc = int function(const(const(pkcs7_recip_info_st)*)*, const(const(pkcs7_recip_info_st)*)*);
    alias sk_PKCS7_RECIP_INFO_freefunc = void function(pkcs7_recip_info_st*);
    static int function(const(const(pkcs7_recip_info_st)*)*, const(const(pkcs7_recip_info_st)*)*) sk_PKCS7_RECIP_INFO_set_cmp_func(stack_st_PKCS7_RECIP_INFO*, int function(const(const(pkcs7_recip_info_st)*)*, const(const(pkcs7_recip_info_st)*)*)) @nogc nothrow;
    static stack_st_PKCS7_RECIP_INFO* sk_PKCS7_RECIP_INFO_deep_copy(const(stack_st_PKCS7_RECIP_INFO)*, pkcs7_recip_info_st* function(const(pkcs7_recip_info_st)*), void function(pkcs7_recip_info_st*)) @nogc nothrow;
    static stack_st_PKCS7_RECIP_INFO* sk_PKCS7_RECIP_INFO_dup(const(stack_st_PKCS7_RECIP_INFO)*) @nogc nothrow;
    static int sk_PKCS7_RECIP_INFO_is_sorted(const(stack_st_PKCS7_RECIP_INFO)*) @nogc nothrow;
    static void sk_PKCS7_RECIP_INFO_sort(stack_st_PKCS7_RECIP_INFO*) @nogc nothrow;
    static int sk_PKCS7_RECIP_INFO_find_ex(stack_st_PKCS7_RECIP_INFO*, pkcs7_recip_info_st*) @nogc nothrow;
    static int sk_PKCS7_RECIP_INFO_find(stack_st_PKCS7_RECIP_INFO*, pkcs7_recip_info_st*) @nogc nothrow;
    static pkcs7_recip_info_st* sk_PKCS7_RECIP_INFO_set(stack_st_PKCS7_RECIP_INFO*, int, pkcs7_recip_info_st*) @nogc nothrow;
    static void sk_PKCS7_RECIP_INFO_pop_free(stack_st_PKCS7_RECIP_INFO*, void function(pkcs7_recip_info_st*)) @nogc nothrow;
    static pkcs7_recip_info_st* sk_PKCS7_RECIP_INFO_shift(stack_st_PKCS7_RECIP_INFO*) @nogc nothrow;
    static pkcs7_recip_info_st* sk_PKCS7_RECIP_INFO_pop(stack_st_PKCS7_RECIP_INFO*) @nogc nothrow;
    static int sk_PKCS7_RECIP_INFO_unshift(stack_st_PKCS7_RECIP_INFO*, pkcs7_recip_info_st*) @nogc nothrow;
    static int sk_PKCS7_RECIP_INFO_push(stack_st_PKCS7_RECIP_INFO*, pkcs7_recip_info_st*) @nogc nothrow;
    static pkcs7_recip_info_st* sk_PKCS7_RECIP_INFO_delete_ptr(stack_st_PKCS7_RECIP_INFO*, pkcs7_recip_info_st*) @nogc nothrow;
    static pkcs7_recip_info_st* sk_PKCS7_RECIP_INFO_delete(stack_st_PKCS7_RECIP_INFO*, int) @nogc nothrow;
    static void sk_PKCS7_RECIP_INFO_zero(stack_st_PKCS7_RECIP_INFO*) @nogc nothrow;
    static void sk_PKCS7_RECIP_INFO_free(stack_st_PKCS7_RECIP_INFO*) @nogc nothrow;
    static int sk_PKCS7_RECIP_INFO_reserve(stack_st_PKCS7_RECIP_INFO*, int) @nogc nothrow;
    static stack_st_PKCS7_RECIP_INFO* sk_PKCS7_RECIP_INFO_new_reserve(int function(const(const(pkcs7_recip_info_st)*)*, const(const(pkcs7_recip_info_st)*)*), int) @nogc nothrow;
    static stack_st_PKCS7_RECIP_INFO* sk_PKCS7_RECIP_INFO_new_null() @nogc nothrow;
    static stack_st_PKCS7_RECIP_INFO* sk_PKCS7_RECIP_INFO_new(int function(const(const(pkcs7_recip_info_st)*)*, const(const(pkcs7_recip_info_st)*)*)) @nogc nothrow;
    static pkcs7_recip_info_st* sk_PKCS7_RECIP_INFO_value(const(stack_st_PKCS7_RECIP_INFO)*, int) @nogc nothrow;
    static int sk_PKCS7_RECIP_INFO_num(const(stack_st_PKCS7_RECIP_INFO)*) @nogc nothrow;
    struct pkcs7_recip_info_st
    {
        asn1_string_st* version_;
        pkcs7_issuer_and_serial_st* issuer_and_serial;
        X509_algor_st* key_enc_algor;
        asn1_string_st* enc_key;
        x509_st* cert;
    }
    alias PKCS7_RECIP_INFO = pkcs7_recip_info_st;
    static void sk_PKCS7_SIGNER_INFO_free(stack_st_PKCS7_SIGNER_INFO*) @nogc nothrow;
    static void sk_PKCS7_SIGNER_INFO_zero(stack_st_PKCS7_SIGNER_INFO*) @nogc nothrow;
    static int sk_PKCS7_SIGNER_INFO_reserve(stack_st_PKCS7_SIGNER_INFO*, int) @nogc nothrow;
    static stack_st_PKCS7_SIGNER_INFO* sk_PKCS7_SIGNER_INFO_new_reserve(int function(const(const(pkcs7_signer_info_st)*)*, const(const(pkcs7_signer_info_st)*)*), int) @nogc nothrow;
    static pkcs7_signer_info_st* sk_PKCS7_SIGNER_INFO_delete(stack_st_PKCS7_SIGNER_INFO*, int) @nogc nothrow;
    static pkcs7_signer_info_st* sk_PKCS7_SIGNER_INFO_delete_ptr(stack_st_PKCS7_SIGNER_INFO*, pkcs7_signer_info_st*) @nogc nothrow;
    static int sk_PKCS7_SIGNER_INFO_push(stack_st_PKCS7_SIGNER_INFO*, pkcs7_signer_info_st*) @nogc nothrow;
    static int sk_PKCS7_SIGNER_INFO_unshift(stack_st_PKCS7_SIGNER_INFO*, pkcs7_signer_info_st*) @nogc nothrow;
    static stack_st_PKCS7_SIGNER_INFO* sk_PKCS7_SIGNER_INFO_new_null() @nogc nothrow;
    static stack_st_PKCS7_SIGNER_INFO* sk_PKCS7_SIGNER_INFO_new(int function(const(const(pkcs7_signer_info_st)*)*, const(const(pkcs7_signer_info_st)*)*)) @nogc nothrow;
    static pkcs7_signer_info_st* sk_PKCS7_SIGNER_INFO_value(const(stack_st_PKCS7_SIGNER_INFO)*, int) @nogc nothrow;
    static int sk_PKCS7_SIGNER_INFO_num(const(stack_st_PKCS7_SIGNER_INFO)*) @nogc nothrow;
    alias sk_PKCS7_SIGNER_INFO_copyfunc = pkcs7_signer_info_st* function(const(pkcs7_signer_info_st)*);
    alias sk_PKCS7_SIGNER_INFO_freefunc = void function(pkcs7_signer_info_st*);
    alias sk_PKCS7_SIGNER_INFO_compfunc = int function(const(const(pkcs7_signer_info_st)*)*, const(const(pkcs7_signer_info_st)*)*);
    struct stack_st_PKCS7_SIGNER_INFO;
    static pkcs7_signer_info_st* sk_PKCS7_SIGNER_INFO_pop(stack_st_PKCS7_SIGNER_INFO*) @nogc nothrow;
    static pkcs7_signer_info_st* sk_PKCS7_SIGNER_INFO_shift(stack_st_PKCS7_SIGNER_INFO*) @nogc nothrow;
    static void sk_PKCS7_SIGNER_INFO_pop_free(stack_st_PKCS7_SIGNER_INFO*, void function(pkcs7_signer_info_st*)) @nogc nothrow;
    static int sk_PKCS7_SIGNER_INFO_insert(stack_st_PKCS7_SIGNER_INFO*, pkcs7_signer_info_st*, int) @nogc nothrow;
    static pkcs7_signer_info_st* sk_PKCS7_SIGNER_INFO_set(stack_st_PKCS7_SIGNER_INFO*, int, pkcs7_signer_info_st*) @nogc nothrow;
    static int sk_PKCS7_SIGNER_INFO_find(stack_st_PKCS7_SIGNER_INFO*, pkcs7_signer_info_st*) @nogc nothrow;
    static int sk_PKCS7_SIGNER_INFO_find_ex(stack_st_PKCS7_SIGNER_INFO*, pkcs7_signer_info_st*) @nogc nothrow;
    static void sk_PKCS7_SIGNER_INFO_sort(stack_st_PKCS7_SIGNER_INFO*) @nogc nothrow;
    static int sk_PKCS7_SIGNER_INFO_is_sorted(const(stack_st_PKCS7_SIGNER_INFO)*) @nogc nothrow;
    static stack_st_PKCS7_SIGNER_INFO* sk_PKCS7_SIGNER_INFO_dup(const(stack_st_PKCS7_SIGNER_INFO)*) @nogc nothrow;
    static stack_st_PKCS7_SIGNER_INFO* sk_PKCS7_SIGNER_INFO_deep_copy(const(stack_st_PKCS7_SIGNER_INFO)*, pkcs7_signer_info_st* function(const(pkcs7_signer_info_st)*), void function(pkcs7_signer_info_st*)) @nogc nothrow;
    static int function(const(const(pkcs7_signer_info_st)*)*, const(const(pkcs7_signer_info_st)*)*) sk_PKCS7_SIGNER_INFO_set_cmp_func(stack_st_PKCS7_SIGNER_INFO*, int function(const(const(pkcs7_signer_info_st)*)*, const(const(pkcs7_signer_info_st)*)*)) @nogc nothrow;
    struct pkcs7_signer_info_st
    {
        asn1_string_st* version_;
        pkcs7_issuer_and_serial_st* issuer_and_serial;
        X509_algor_st* digest_alg;
        stack_st_X509_ATTRIBUTE* auth_attr;
        X509_algor_st* digest_enc_alg;
        asn1_string_st* enc_digest;
        stack_st_X509_ATTRIBUTE* unauth_attr;
        evp_pkey_st* pkey;
    }
    alias PKCS7_SIGNER_INFO = pkcs7_signer_info_st;
    struct pkcs7_issuer_and_serial_st
    {
        X509_name_st* issuer;
        asn1_string_st* serial;
    }
    alias PKCS7_ISSUER_AND_SERIAL = pkcs7_issuer_and_serial_st;
    int ERR_load_PEM_strings() @nogc nothrow;
    int i2b_PVK_bio(bio_st*, evp_pkey_st*, int, int function(char*, int, int, void*), void*) @nogc nothrow;
    evp_pkey_st* b2i_PVK_bio(bio_st*, int function(char*, int, int, void*), void*) @nogc nothrow;
    int i2b_PublicKey_bio(bio_st*, evp_pkey_st*) @nogc nothrow;
    int i2b_PrivateKey_bio(bio_st*, evp_pkey_st*) @nogc nothrow;
    evp_pkey_st* b2i_PublicKey_bio(bio_st*) @nogc nothrow;
    evp_pkey_st* b2i_PrivateKey_bio(bio_st*) @nogc nothrow;
    evp_pkey_st* b2i_PublicKey(const(ubyte)**, c_long) @nogc nothrow;
    evp_pkey_st* b2i_PrivateKey(const(ubyte)**, c_long) @nogc nothrow;
    int PEM_write_bio_Parameters(bio_st*, evp_pkey_st*) @nogc nothrow;
    evp_pkey_st* PEM_read_bio_Parameters(bio_st*, evp_pkey_st**) @nogc nothrow;
    int PEM_write_PKCS8PrivateKey(_IO_FILE*, evp_pkey_st*, const(evp_cipher_st)*, char*, int, int function(char*, int, int, void*), void*) @nogc nothrow;
    evp_pkey_st* d2i_PKCS8PrivateKey_fp(_IO_FILE*, evp_pkey_st**, int function(char*, int, int, void*), void*) @nogc nothrow;
    int PEM_write_PKCS8PrivateKey_nid(_IO_FILE*, evp_pkey_st*, int, char*, int, int function(char*, int, int, void*), void*) @nogc nothrow;
    int i2d_PKCS8PrivateKey_nid_fp(_IO_FILE*, evp_pkey_st*, int, char*, int, int function(char*, int, int, void*), void*) @nogc nothrow;
    int i2d_PKCS8PrivateKey_fp(_IO_FILE*, evp_pkey_st*, const(evp_cipher_st)*, char*, int, int function(char*, int, int, void*), void*) @nogc nothrow;
    evp_pkey_st* d2i_PKCS8PrivateKey_bio(bio_st*, evp_pkey_st**, int function(char*, int, int, void*), void*) @nogc nothrow;
    int i2d_PKCS8PrivateKey_nid_bio(bio_st*, evp_pkey_st*, int, char*, int, int function(char*, int, int, void*), void*) @nogc nothrow;
    int i2d_PKCS8PrivateKey_bio(bio_st*, evp_pkey_st*, const(evp_cipher_st)*, char*, int, int function(char*, int, int, void*), void*) @nogc nothrow;
    int PEM_write_bio_PKCS8PrivateKey(bio_st*, evp_pkey_st*, const(evp_cipher_st)*, char*, int, int function(char*, int, int, void*), void*) @nogc nothrow;
    int PEM_write_bio_PKCS8PrivateKey_nid(bio_st*, evp_pkey_st*, int, char*, int, int function(char*, int, int, void*), void*) @nogc nothrow;
    int PEM_write_bio_PrivateKey_traditional(bio_st*, evp_pkey_st*, const(evp_cipher_st)*, ubyte*, int, int function(char*, int, int, void*), void*) @nogc nothrow;
    evp_pkey_st* PEM_read_bio_PUBKEY(bio_st*, evp_pkey_st**, int function(char*, int, int, void*), void*) @nogc nothrow;
    evp_pkey_st* PEM_read_PUBKEY(_IO_FILE*, evp_pkey_st**, int function(char*, int, int, void*), void*) @nogc nothrow;
    int PEM_write_PUBKEY(_IO_FILE*, evp_pkey_st*) @nogc nothrow;
    int PEM_write_bio_PUBKEY(bio_st*, evp_pkey_st*) @nogc nothrow;
    evp_pkey_st* PEM_read_bio_PrivateKey(bio_st*, evp_pkey_st**, int function(char*, int, int, void*), void*) @nogc nothrow;
    evp_pkey_st* PEM_read_PrivateKey(_IO_FILE*, evp_pkey_st**, int function(char*, int, int, void*), void*) @nogc nothrow;
    int PEM_write_PrivateKey(_IO_FILE*, evp_pkey_st*, const(evp_cipher_st)*, ubyte*, int, int function(char*, int, int, void*), void*) @nogc nothrow;
    int PEM_write_bio_PrivateKey(bio_st*, evp_pkey_st*, const(evp_cipher_st)*, ubyte*, int, int function(char*, int, int, void*), void*) @nogc nothrow;
    int PEM_write_DHxparams(_IO_FILE*, const(dh_st)*) @nogc nothrow;
    int PEM_write_bio_DHxparams(bio_st*, const(dh_st)*) @nogc nothrow;
    dh_st* PEM_read_DHparams(_IO_FILE*, dh_st**, int function(char*, int, int, void*), void*) @nogc nothrow;
    dh_st* PEM_read_bio_DHparams(bio_st*, dh_st**, int function(char*, int, int, void*), void*) @nogc nothrow;
    int PEM_write_DHparams(_IO_FILE*, const(dh_st)*) @nogc nothrow;
    int PEM_write_bio_DHparams(bio_st*, const(dh_st)*) @nogc nothrow;
    ec_key_st* PEM_read_EC_PUBKEY(_IO_FILE*, ec_key_st**, int function(char*, int, int, void*), void*) @nogc nothrow;
    ec_key_st* PEM_read_bio_EC_PUBKEY(bio_st*, ec_key_st**, int function(char*, int, int, void*), void*) @nogc nothrow;
    int PEM_write_EC_PUBKEY(_IO_FILE*, ec_key_st*) @nogc nothrow;
    int PEM_write_bio_EC_PUBKEY(bio_st*, ec_key_st*) @nogc nothrow;
    ec_key_st* PEM_read_ECPrivateKey(_IO_FILE*, ec_key_st**, int function(char*, int, int, void*), void*) @nogc nothrow;
    ec_key_st* PEM_read_bio_ECPrivateKey(bio_st*, ec_key_st**, int function(char*, int, int, void*), void*) @nogc nothrow;
    int PEM_write_ECPrivateKey(_IO_FILE*, ec_key_st*, const(evp_cipher_st)*, ubyte*, int, int function(char*, int, int, void*), void*) @nogc nothrow;
    int PEM_write_bio_ECPrivateKey(bio_st*, ec_key_st*, const(evp_cipher_st)*, ubyte*, int, int function(char*, int, int, void*), void*) @nogc nothrow;
    ec_group_st* PEM_read_bio_ECPKParameters(bio_st*, ec_group_st**, int function(char*, int, int, void*), void*) @nogc nothrow;
    ec_group_st* PEM_read_ECPKParameters(_IO_FILE*, ec_group_st**, int function(char*, int, int, void*), void*) @nogc nothrow;
    int PEM_write_ECPKParameters(_IO_FILE*, const(ec_group_st)*) @nogc nothrow;
    int PEM_write_bio_ECPKParameters(bio_st*, const(ec_group_st)*) @nogc nothrow;
    dsa_st* PEM_read_bio_DSAparams(bio_st*, dsa_st**, int function(char*, int, int, void*), void*) @nogc nothrow;
    dsa_st* PEM_read_DSAparams(_IO_FILE*, dsa_st**, int function(char*, int, int, void*), void*) @nogc nothrow;
    int PEM_write_bio_DSAparams(bio_st*, const(dsa_st)*) @nogc nothrow;
    int PEM_write_DSAparams(_IO_FILE*, const(dsa_st)*) @nogc nothrow;
    dsa_st* PEM_read_bio_DSA_PUBKEY(bio_st*, dsa_st**, int function(char*, int, int, void*), void*) @nogc nothrow;
    dsa_st* PEM_read_DSA_PUBKEY(_IO_FILE*, dsa_st**, int function(char*, int, int, void*), void*) @nogc nothrow;
    int PEM_write_bio_DSA_PUBKEY(bio_st*, dsa_st*) @nogc nothrow;
    int PEM_write_DSA_PUBKEY(_IO_FILE*, dsa_st*) @nogc nothrow;
    dsa_st* PEM_read_bio_DSAPrivateKey(bio_st*, dsa_st**, int function(char*, int, int, void*), void*) @nogc nothrow;
    dsa_st* PEM_read_DSAPrivateKey(_IO_FILE*, dsa_st**, int function(char*, int, int, void*), void*) @nogc nothrow;
    int PEM_write_DSAPrivateKey(_IO_FILE*, dsa_st*, const(evp_cipher_st)*, ubyte*, int, int function(char*, int, int, void*), void*) @nogc nothrow;
    int PEM_write_bio_DSAPrivateKey(bio_st*, dsa_st*, const(evp_cipher_st)*, ubyte*, int, int function(char*, int, int, void*), void*) @nogc nothrow;
    rsa_st* PEM_read_RSA_PUBKEY(_IO_FILE*, rsa_st**, int function(char*, int, int, void*), void*) @nogc nothrow;
    rsa_st* PEM_read_bio_RSA_PUBKEY(bio_st*, rsa_st**, int function(char*, int, int, void*), void*) @nogc nothrow;
    int PEM_write_bio_RSA_PUBKEY(bio_st*, rsa_st*) @nogc nothrow;
    int PEM_write_RSA_PUBKEY(_IO_FILE*, rsa_st*) @nogc nothrow;
    rsa_st* PEM_read_RSAPublicKey(_IO_FILE*, rsa_st**, int function(char*, int, int, void*), void*) @nogc nothrow;
    rsa_st* PEM_read_bio_RSAPublicKey(bio_st*, rsa_st**, int function(char*, int, int, void*), void*) @nogc nothrow;
    int PEM_write_RSAPublicKey(_IO_FILE*, const(rsa_st)*) @nogc nothrow;
    int PEM_write_bio_RSAPublicKey(bio_st*, const(rsa_st)*) @nogc nothrow;
    rsa_st* PEM_read_RSAPrivateKey(_IO_FILE*, rsa_st**, int function(char*, int, int, void*), void*) @nogc nothrow;
    rsa_st* PEM_read_bio_RSAPrivateKey(bio_st*, rsa_st**, int function(char*, int, int, void*), void*) @nogc nothrow;
    int PEM_write_RSAPrivateKey(_IO_FILE*, rsa_st*, const(evp_cipher_st)*, ubyte*, int, int function(char*, int, int, void*), void*) @nogc nothrow;
    struct tls_session_ticket_ext_st
    {
        ushort length;
        void* data;
    }
    int PEM_write_bio_RSAPrivateKey(bio_st*, rsa_st*, const(evp_cipher_st)*, ubyte*, int, int function(char*, int, int, void*), void*) @nogc nothrow;
    alias TS_MSG_IMPRINT = TS_msg_imprint_st;
    struct TS_msg_imprint_st;
    alias TS_REQ = TS_req_st;
    struct TS_req_st;
    alias TS_ACCURACY = TS_accuracy_st;
    struct TS_accuracy_st;
    alias TS_TST_INFO = TS_tst_info_st;
    struct TS_tst_info_st;
    pkcs8_priv_key_info_st* PEM_read_PKCS8_PRIV_KEY_INFO(_IO_FILE*, pkcs8_priv_key_info_st**, int function(char*, int, int, void*), void*) @nogc nothrow;
    pkcs8_priv_key_info_st* PEM_read_bio_PKCS8_PRIV_KEY_INFO(bio_st*, pkcs8_priv_key_info_st**, int function(char*, int, int, void*), void*) @nogc nothrow;
    int PEM_write_PKCS8_PRIV_KEY_INFO(_IO_FILE*, pkcs8_priv_key_info_st*) @nogc nothrow;
    int PEM_write_bio_PKCS8_PRIV_KEY_INFO(bio_st*, pkcs8_priv_key_info_st*) @nogc nothrow;
    X509_sig_st* PEM_read_PKCS8(_IO_FILE*, X509_sig_st**, int function(char*, int, int, void*), void*) @nogc nothrow;
    X509_sig_st* PEM_read_bio_PKCS8(bio_st*, X509_sig_st**, int function(char*, int, int, void*), void*) @nogc nothrow;
    int PEM_write_PKCS8(_IO_FILE*, X509_sig_st*) @nogc nothrow;
    int PEM_write_bio_PKCS8(bio_st*, X509_sig_st*) @nogc nothrow;
    Netscape_certificate_sequence* PEM_read_bio_NETSCAPE_CERT_SEQUENCE(bio_st*, Netscape_certificate_sequence**, int function(char*, int, int, void*), void*) @nogc nothrow;
    Netscape_certificate_sequence* PEM_read_NETSCAPE_CERT_SEQUENCE(_IO_FILE*, Netscape_certificate_sequence**, int function(char*, int, int, void*), void*) @nogc nothrow;
    int PEM_write_NETSCAPE_CERT_SEQUENCE(_IO_FILE*, Netscape_certificate_sequence*) @nogc nothrow;
    alias TS_STATUS_INFO = TS_status_info_st;
    struct TS_status_info_st;
    alias ESS_ISSUER_SERIAL = ESS_issuer_serial;
    struct ESS_issuer_serial;
    alias ESS_CERT_ID = ESS_cert_id;
    struct ESS_cert_id;
    alias ESS_SIGNING_CERT = ESS_signing_cert;
    struct ESS_signing_cert;
    static int sk_ESS_CERT_ID_find(stack_st_ESS_CERT_ID*, ESS_cert_id*) @nogc nothrow;
    static int sk_ESS_CERT_ID_num(const(stack_st_ESS_CERT_ID)*) @nogc nothrow;
    static ESS_cert_id* sk_ESS_CERT_ID_set(stack_st_ESS_CERT_ID*, int, ESS_cert_id*) @nogc nothrow;
    alias sk_ESS_CERT_ID_copyfunc = ESS_cert_id* function(const(ESS_cert_id)*);
    alias sk_ESS_CERT_ID_freefunc = void function(ESS_cert_id*);
    alias sk_ESS_CERT_ID_compfunc = int function(const(const(ESS_cert_id)*)*, const(const(ESS_cert_id)*)*);
    struct stack_st_ESS_CERT_ID;
    static int function(const(const(ESS_cert_id)*)*, const(const(ESS_cert_id)*)*) sk_ESS_CERT_ID_set_cmp_func(stack_st_ESS_CERT_ID*, int function(const(const(ESS_cert_id)*)*, const(const(ESS_cert_id)*)*)) @nogc nothrow;
    static ESS_cert_id* sk_ESS_CERT_ID_value(const(stack_st_ESS_CERT_ID)*, int) @nogc nothrow;
    static stack_st_ESS_CERT_ID* sk_ESS_CERT_ID_new(int function(const(const(ESS_cert_id)*)*, const(const(ESS_cert_id)*)*)) @nogc nothrow;
    static stack_st_ESS_CERT_ID* sk_ESS_CERT_ID_new_null() @nogc nothrow;
    static int sk_ESS_CERT_ID_find_ex(stack_st_ESS_CERT_ID*, ESS_cert_id*) @nogc nothrow;
    static void sk_ESS_CERT_ID_sort(stack_st_ESS_CERT_ID*) @nogc nothrow;
    static int sk_ESS_CERT_ID_is_sorted(const(stack_st_ESS_CERT_ID)*) @nogc nothrow;
    static stack_st_ESS_CERT_ID* sk_ESS_CERT_ID_dup(const(stack_st_ESS_CERT_ID)*) @nogc nothrow;
    static stack_st_ESS_CERT_ID* sk_ESS_CERT_ID_deep_copy(const(stack_st_ESS_CERT_ID)*, ESS_cert_id* function(const(ESS_cert_id)*), void function(ESS_cert_id*)) @nogc nothrow;
    static stack_st_ESS_CERT_ID* sk_ESS_CERT_ID_new_reserve(int function(const(const(ESS_cert_id)*)*, const(const(ESS_cert_id)*)*), int) @nogc nothrow;
    static int sk_ESS_CERT_ID_reserve(stack_st_ESS_CERT_ID*, int) @nogc nothrow;
    static void sk_ESS_CERT_ID_free(stack_st_ESS_CERT_ID*) @nogc nothrow;
    static void sk_ESS_CERT_ID_zero(stack_st_ESS_CERT_ID*) @nogc nothrow;
    static ESS_cert_id* sk_ESS_CERT_ID_delete(stack_st_ESS_CERT_ID*, int) @nogc nothrow;
    static ESS_cert_id* sk_ESS_CERT_ID_delete_ptr(stack_st_ESS_CERT_ID*, ESS_cert_id*) @nogc nothrow;
    static int sk_ESS_CERT_ID_push(stack_st_ESS_CERT_ID*, ESS_cert_id*) @nogc nothrow;
    static int sk_ESS_CERT_ID_unshift(stack_st_ESS_CERT_ID*, ESS_cert_id*) @nogc nothrow;
    static int sk_ESS_CERT_ID_insert(stack_st_ESS_CERT_ID*, ESS_cert_id*, int) @nogc nothrow;
    static ESS_cert_id* sk_ESS_CERT_ID_pop(stack_st_ESS_CERT_ID*) @nogc nothrow;
    static void sk_ESS_CERT_ID_pop_free(stack_st_ESS_CERT_ID*, void function(ESS_cert_id*)) @nogc nothrow;
    static ESS_cert_id* sk_ESS_CERT_ID_shift(stack_st_ESS_CERT_ID*) @nogc nothrow;
    alias TS_RESP = TS_resp_st;
    struct TS_resp_st;
    TS_req_st* TS_REQ_new() @nogc nothrow;
    void TS_REQ_free(TS_req_st*) @nogc nothrow;
    int i2d_TS_REQ(const(TS_req_st)*, ubyte**) @nogc nothrow;
    TS_req_st* d2i_TS_REQ(TS_req_st**, const(ubyte)**, c_long) @nogc nothrow;
    TS_req_st* TS_REQ_dup(TS_req_st*) @nogc nothrow;
    TS_req_st* d2i_TS_REQ_fp(_IO_FILE*, TS_req_st**) @nogc nothrow;
    int i2d_TS_REQ_fp(_IO_FILE*, TS_req_st*) @nogc nothrow;
    TS_req_st* d2i_TS_REQ_bio(bio_st*, TS_req_st**) @nogc nothrow;
    int i2d_TS_REQ_bio(bio_st*, TS_req_st*) @nogc nothrow;
    TS_msg_imprint_st* TS_MSG_IMPRINT_new() @nogc nothrow;
    void TS_MSG_IMPRINT_free(TS_msg_imprint_st*) @nogc nothrow;
    int i2d_TS_MSG_IMPRINT(const(TS_msg_imprint_st)*, ubyte**) @nogc nothrow;
    TS_msg_imprint_st* d2i_TS_MSG_IMPRINT(TS_msg_imprint_st**, const(ubyte)**, c_long) @nogc nothrow;
    TS_msg_imprint_st* TS_MSG_IMPRINT_dup(TS_msg_imprint_st*) @nogc nothrow;
    TS_msg_imprint_st* d2i_TS_MSG_IMPRINT_fp(_IO_FILE*, TS_msg_imprint_st**) @nogc nothrow;
    int i2d_TS_MSG_IMPRINT_fp(_IO_FILE*, TS_msg_imprint_st*) @nogc nothrow;
    TS_msg_imprint_st* d2i_TS_MSG_IMPRINT_bio(bio_st*, TS_msg_imprint_st**) @nogc nothrow;
    int i2d_TS_MSG_IMPRINT_bio(bio_st*, TS_msg_imprint_st*) @nogc nothrow;
    TS_resp_st* TS_RESP_new() @nogc nothrow;
    void TS_RESP_free(TS_resp_st*) @nogc nothrow;
    int i2d_TS_RESP(const(TS_resp_st)*, ubyte**) @nogc nothrow;
    TS_resp_st* d2i_TS_RESP(TS_resp_st**, const(ubyte)**, c_long) @nogc nothrow;
    TS_tst_info_st* PKCS7_to_TS_TST_INFO(pkcs7_st*) @nogc nothrow;
    TS_resp_st* TS_RESP_dup(TS_resp_st*) @nogc nothrow;
    TS_resp_st* d2i_TS_RESP_fp(_IO_FILE*, TS_resp_st**) @nogc nothrow;
    int i2d_TS_RESP_fp(_IO_FILE*, TS_resp_st*) @nogc nothrow;
    TS_resp_st* d2i_TS_RESP_bio(bio_st*, TS_resp_st**) @nogc nothrow;
    int i2d_TS_RESP_bio(bio_st*, TS_resp_st*) @nogc nothrow;
    TS_status_info_st* TS_STATUS_INFO_new() @nogc nothrow;
    void TS_STATUS_INFO_free(TS_status_info_st*) @nogc nothrow;
    int i2d_TS_STATUS_INFO(const(TS_status_info_st)*, ubyte**) @nogc nothrow;
    TS_status_info_st* d2i_TS_STATUS_INFO(TS_status_info_st**, const(ubyte)**, c_long) @nogc nothrow;
    TS_status_info_st* TS_STATUS_INFO_dup(TS_status_info_st*) @nogc nothrow;
    TS_tst_info_st* TS_TST_INFO_new() @nogc nothrow;
    void TS_TST_INFO_free(TS_tst_info_st*) @nogc nothrow;
    int i2d_TS_TST_INFO(const(TS_tst_info_st)*, ubyte**) @nogc nothrow;
    TS_tst_info_st* d2i_TS_TST_INFO(TS_tst_info_st**, const(ubyte)**, c_long) @nogc nothrow;
    TS_tst_info_st* TS_TST_INFO_dup(TS_tst_info_st*) @nogc nothrow;
    TS_tst_info_st* d2i_TS_TST_INFO_fp(_IO_FILE*, TS_tst_info_st**) @nogc nothrow;
    int i2d_TS_TST_INFO_fp(_IO_FILE*, TS_tst_info_st*) @nogc nothrow;
    TS_tst_info_st* d2i_TS_TST_INFO_bio(bio_st*, TS_tst_info_st**) @nogc nothrow;
    int i2d_TS_TST_INFO_bio(bio_st*, TS_tst_info_st*) @nogc nothrow;
    TS_accuracy_st* TS_ACCURACY_new() @nogc nothrow;
    void TS_ACCURACY_free(TS_accuracy_st*) @nogc nothrow;
    int i2d_TS_ACCURACY(const(TS_accuracy_st)*, ubyte**) @nogc nothrow;
    TS_accuracy_st* d2i_TS_ACCURACY(TS_accuracy_st**, const(ubyte)**, c_long) @nogc nothrow;
    TS_accuracy_st* TS_ACCURACY_dup(TS_accuracy_st*) @nogc nothrow;
    ESS_issuer_serial* ESS_ISSUER_SERIAL_new() @nogc nothrow;
    void ESS_ISSUER_SERIAL_free(ESS_issuer_serial*) @nogc nothrow;
    int i2d_ESS_ISSUER_SERIAL(const(ESS_issuer_serial)*, ubyte**) @nogc nothrow;
    ESS_issuer_serial* d2i_ESS_ISSUER_SERIAL(ESS_issuer_serial**, const(ubyte)**, c_long) @nogc nothrow;
    ESS_issuer_serial* ESS_ISSUER_SERIAL_dup(ESS_issuer_serial*) @nogc nothrow;
    ESS_cert_id* ESS_CERT_ID_new() @nogc nothrow;
    void ESS_CERT_ID_free(ESS_cert_id*) @nogc nothrow;
    int i2d_ESS_CERT_ID(const(ESS_cert_id)*, ubyte**) @nogc nothrow;
    ESS_cert_id* d2i_ESS_CERT_ID(ESS_cert_id**, const(ubyte)**, c_long) @nogc nothrow;
    ESS_cert_id* ESS_CERT_ID_dup(ESS_cert_id*) @nogc nothrow;
    ESS_signing_cert* ESS_SIGNING_CERT_new() @nogc nothrow;
    void ESS_SIGNING_CERT_free(ESS_signing_cert*) @nogc nothrow;
    int i2d_ESS_SIGNING_CERT(const(ESS_signing_cert)*, ubyte**) @nogc nothrow;
    ESS_signing_cert* d2i_ESS_SIGNING_CERT(ESS_signing_cert**, const(ubyte)**, c_long) @nogc nothrow;
    ESS_signing_cert* ESS_SIGNING_CERT_dup(ESS_signing_cert*) @nogc nothrow;
    int TS_REQ_set_version(TS_req_st*, c_long) @nogc nothrow;
    c_long TS_REQ_get_version(const(TS_req_st)*) @nogc nothrow;
    int TS_STATUS_INFO_set_status(TS_status_info_st*, int) @nogc nothrow;
    const(asn1_string_st)* TS_STATUS_INFO_get0_status(const(TS_status_info_st)*) @nogc nothrow;
    const(stack_st_ASN1_UTF8STRING)* TS_STATUS_INFO_get0_text(const(TS_status_info_st)*) @nogc nothrow;
    const(asn1_string_st)* TS_STATUS_INFO_get0_failure_info(const(TS_status_info_st)*) @nogc nothrow;
    int TS_REQ_set_msg_imprint(TS_req_st*, TS_msg_imprint_st*) @nogc nothrow;
    TS_msg_imprint_st* TS_REQ_get_msg_imprint(TS_req_st*) @nogc nothrow;
    int TS_MSG_IMPRINT_set_algo(TS_msg_imprint_st*, X509_algor_st*) @nogc nothrow;
    X509_algor_st* TS_MSG_IMPRINT_get_algo(TS_msg_imprint_st*) @nogc nothrow;
    int TS_MSG_IMPRINT_set_msg(TS_msg_imprint_st*, ubyte*, int) @nogc nothrow;
    asn1_string_st* TS_MSG_IMPRINT_get_msg(TS_msg_imprint_st*) @nogc nothrow;
    int TS_REQ_set_policy_id(TS_req_st*, const(asn1_object_st)*) @nogc nothrow;
    asn1_object_st* TS_REQ_get_policy_id(TS_req_st*) @nogc nothrow;
    int TS_REQ_set_nonce(TS_req_st*, const(asn1_string_st)*) @nogc nothrow;
    const(asn1_string_st)* TS_REQ_get_nonce(const(TS_req_st)*) @nogc nothrow;
    int TS_REQ_set_cert_req(TS_req_st*, int) @nogc nothrow;
    int TS_REQ_get_cert_req(const(TS_req_st)*) @nogc nothrow;
    stack_st_X509_EXTENSION* TS_REQ_get_exts(TS_req_st*) @nogc nothrow;
    void TS_REQ_ext_free(TS_req_st*) @nogc nothrow;
    int TS_REQ_get_ext_count(TS_req_st*) @nogc nothrow;
    int TS_REQ_get_ext_by_NID(TS_req_st*, int, int) @nogc nothrow;
    int TS_REQ_get_ext_by_OBJ(TS_req_st*, const(asn1_object_st)*, int) @nogc nothrow;
    int TS_REQ_get_ext_by_critical(TS_req_st*, int, int) @nogc nothrow;
    X509_extension_st* TS_REQ_get_ext(TS_req_st*, int) @nogc nothrow;
    X509_extension_st* TS_REQ_delete_ext(TS_req_st*, int) @nogc nothrow;
    int TS_REQ_add_ext(TS_req_st*, X509_extension_st*, int) @nogc nothrow;
    void* TS_REQ_get_ext_d2i(TS_req_st*, int, int*, int*) @nogc nothrow;
    int TS_REQ_print_bio(bio_st*, TS_req_st*) @nogc nothrow;
    int TS_RESP_set_status_info(TS_resp_st*, TS_status_info_st*) @nogc nothrow;
    TS_status_info_st* TS_RESP_get_status_info(TS_resp_st*) @nogc nothrow;
    void TS_RESP_set_tst_info(TS_resp_st*, pkcs7_st*, TS_tst_info_st*) @nogc nothrow;
    pkcs7_st* TS_RESP_get_token(TS_resp_st*) @nogc nothrow;
    TS_tst_info_st* TS_RESP_get_tst_info(TS_resp_st*) @nogc nothrow;
    int TS_TST_INFO_set_version(TS_tst_info_st*, c_long) @nogc nothrow;
    c_long TS_TST_INFO_get_version(const(TS_tst_info_st)*) @nogc nothrow;
    int TS_TST_INFO_set_policy_id(TS_tst_info_st*, asn1_object_st*) @nogc nothrow;
    asn1_object_st* TS_TST_INFO_get_policy_id(TS_tst_info_st*) @nogc nothrow;
    int TS_TST_INFO_set_msg_imprint(TS_tst_info_st*, TS_msg_imprint_st*) @nogc nothrow;
    TS_msg_imprint_st* TS_TST_INFO_get_msg_imprint(TS_tst_info_st*) @nogc nothrow;
    int TS_TST_INFO_set_serial(TS_tst_info_st*, const(asn1_string_st)*) @nogc nothrow;
    const(asn1_string_st)* TS_TST_INFO_get_serial(const(TS_tst_info_st)*) @nogc nothrow;
    int TS_TST_INFO_set_time(TS_tst_info_st*, const(asn1_string_st)*) @nogc nothrow;
    const(asn1_string_st)* TS_TST_INFO_get_time(const(TS_tst_info_st)*) @nogc nothrow;
    int TS_TST_INFO_set_accuracy(TS_tst_info_st*, TS_accuracy_st*) @nogc nothrow;
    TS_accuracy_st* TS_TST_INFO_get_accuracy(TS_tst_info_st*) @nogc nothrow;
    int TS_ACCURACY_set_seconds(TS_accuracy_st*, const(asn1_string_st)*) @nogc nothrow;
    const(asn1_string_st)* TS_ACCURACY_get_seconds(const(TS_accuracy_st)*) @nogc nothrow;
    int TS_ACCURACY_set_millis(TS_accuracy_st*, const(asn1_string_st)*) @nogc nothrow;
    const(asn1_string_st)* TS_ACCURACY_get_millis(const(TS_accuracy_st)*) @nogc nothrow;
    int TS_ACCURACY_set_micros(TS_accuracy_st*, const(asn1_string_st)*) @nogc nothrow;
    const(asn1_string_st)* TS_ACCURACY_get_micros(const(TS_accuracy_st)*) @nogc nothrow;
    int TS_TST_INFO_set_ordering(TS_tst_info_st*, int) @nogc nothrow;
    int TS_TST_INFO_get_ordering(const(TS_tst_info_st)*) @nogc nothrow;
    int TS_TST_INFO_set_nonce(TS_tst_info_st*, const(asn1_string_st)*) @nogc nothrow;
    const(asn1_string_st)* TS_TST_INFO_get_nonce(const(TS_tst_info_st)*) @nogc nothrow;
    int TS_TST_INFO_set_tsa(TS_tst_info_st*, GENERAL_NAME_st*) @nogc nothrow;
    GENERAL_NAME_st* TS_TST_INFO_get_tsa(TS_tst_info_st*) @nogc nothrow;
    stack_st_X509_EXTENSION* TS_TST_INFO_get_exts(TS_tst_info_st*) @nogc nothrow;
    void TS_TST_INFO_ext_free(TS_tst_info_st*) @nogc nothrow;
    int TS_TST_INFO_get_ext_count(TS_tst_info_st*) @nogc nothrow;
    int TS_TST_INFO_get_ext_by_NID(TS_tst_info_st*, int, int) @nogc nothrow;
    int TS_TST_INFO_get_ext_by_OBJ(TS_tst_info_st*, const(asn1_object_st)*, int) @nogc nothrow;
    int TS_TST_INFO_get_ext_by_critical(TS_tst_info_st*, int, int) @nogc nothrow;
    X509_extension_st* TS_TST_INFO_get_ext(TS_tst_info_st*, int) @nogc nothrow;
    X509_extension_st* TS_TST_INFO_delete_ext(TS_tst_info_st*, int) @nogc nothrow;
    int TS_TST_INFO_add_ext(TS_tst_info_st*, X509_extension_st*, int) @nogc nothrow;
    void* TS_TST_INFO_get_ext_d2i(TS_tst_info_st*, int, int*, int*) @nogc nothrow;
    int PEM_write_bio_NETSCAPE_CERT_SEQUENCE(bio_st*, Netscape_certificate_sequence*) @nogc nothrow;
    pkcs7_st* PEM_read_PKCS7(_IO_FILE*, pkcs7_st**, int function(char*, int, int, void*), void*) @nogc nothrow;
    struct TS_resp_ctx;
    alias TS_serial_cb = asn1_string_st* function(TS_resp_ctx*, void*);
    alias TS_time_cb = int function(TS_resp_ctx*, void*, c_long*, c_long*);
    alias TS_extension_cb = int function(TS_resp_ctx*, X509_extension_st*, void*);
    alias TS_RESP_CTX = TS_resp_ctx;
    static const(evp_md_st)* sk_EVP_MD_shift(stack_st_EVP_MD*) @nogc nothrow;
    static const(evp_md_st)* sk_EVP_MD_pop(stack_st_EVP_MD*) @nogc nothrow;
    static int sk_EVP_MD_push(stack_st_EVP_MD*, const(evp_md_st)*) @nogc nothrow;
    static const(evp_md_st)* sk_EVP_MD_delete_ptr(stack_st_EVP_MD*, const(evp_md_st)*) @nogc nothrow;
    static const(evp_md_st)* sk_EVP_MD_delete(stack_st_EVP_MD*, int) @nogc nothrow;
    static void sk_EVP_MD_zero(stack_st_EVP_MD*) @nogc nothrow;
    static void sk_EVP_MD_free(stack_st_EVP_MD*) @nogc nothrow;
    static stack_st_EVP_MD* sk_EVP_MD_deep_copy(const(stack_st_EVP_MD)*, evp_md_st* function(const(evp_md_st)*), void function(evp_md_st*)) @nogc nothrow;
    static void sk_EVP_MD_pop_free(stack_st_EVP_MD*, void function(evp_md_st*)) @nogc nothrow;
    static int sk_EVP_MD_insert(stack_st_EVP_MD*, const(evp_md_st)*, int) @nogc nothrow;
    static int sk_EVP_MD_find(stack_st_EVP_MD*, const(evp_md_st)*) @nogc nothrow;
    static int sk_EVP_MD_find_ex(stack_st_EVP_MD*, const(evp_md_st)*) @nogc nothrow;
    static void sk_EVP_MD_sort(stack_st_EVP_MD*) @nogc nothrow;
    static int sk_EVP_MD_is_sorted(const(stack_st_EVP_MD)*) @nogc nothrow;
    static stack_st_EVP_MD* sk_EVP_MD_dup(const(stack_st_EVP_MD)*) @nogc nothrow;
    static int function(const(const(evp_md_st)*)*, const(const(evp_md_st)*)*) sk_EVP_MD_set_cmp_func(stack_st_EVP_MD*, int function(const(const(evp_md_st)*)*, const(const(evp_md_st)*)*)) @nogc nothrow;
    static int sk_EVP_MD_reserve(stack_st_EVP_MD*, int) @nogc nothrow;
    static stack_st_EVP_MD* sk_EVP_MD_new(int function(const(const(evp_md_st)*)*, const(const(evp_md_st)*)*)) @nogc nothrow;
    static int sk_EVP_MD_unshift(stack_st_EVP_MD*, const(evp_md_st)*) @nogc nothrow;
    static const(evp_md_st)* sk_EVP_MD_set(stack_st_EVP_MD*, int, const(evp_md_st)*) @nogc nothrow;
    struct stack_st_EVP_MD;
    alias sk_EVP_MD_compfunc = int function(const(const(evp_md_st)*)*, const(const(evp_md_st)*)*);
    alias sk_EVP_MD_freefunc = void function(evp_md_st*);
    static stack_st_EVP_MD* sk_EVP_MD_new_reserve(int function(const(const(evp_md_st)*)*, const(const(evp_md_st)*)*), int) @nogc nothrow;
    alias sk_EVP_MD_copyfunc = evp_md_st* function(const(evp_md_st)*);
    static int sk_EVP_MD_num(const(stack_st_EVP_MD)*) @nogc nothrow;
    static const(evp_md_st)* sk_EVP_MD_value(const(stack_st_EVP_MD)*, int) @nogc nothrow;
    static stack_st_EVP_MD* sk_EVP_MD_new_null() @nogc nothrow;
    TS_resp_ctx* TS_RESP_CTX_new() @nogc nothrow;
    void TS_RESP_CTX_free(TS_resp_ctx*) @nogc nothrow;
    int TS_RESP_CTX_set_signer_cert(TS_resp_ctx*, x509_st*) @nogc nothrow;
    int TS_RESP_CTX_set_signer_key(TS_resp_ctx*, evp_pkey_st*) @nogc nothrow;
    int TS_RESP_CTX_set_signer_digest(TS_resp_ctx*, const(evp_md_st)*) @nogc nothrow;
    int TS_RESP_CTX_set_def_policy(TS_resp_ctx*, const(asn1_object_st)*) @nogc nothrow;
    int TS_RESP_CTX_set_certs(TS_resp_ctx*, stack_st_X509*) @nogc nothrow;
    int TS_RESP_CTX_add_policy(TS_resp_ctx*, const(asn1_object_st)*) @nogc nothrow;
    int TS_RESP_CTX_add_md(TS_resp_ctx*, const(evp_md_st)*) @nogc nothrow;
    int TS_RESP_CTX_set_accuracy(TS_resp_ctx*, int, int, int) @nogc nothrow;
    int TS_RESP_CTX_set_clock_precision_digits(TS_resp_ctx*, uint) @nogc nothrow;
    pkcs7_st* PEM_read_bio_PKCS7(bio_st*, pkcs7_st**, int function(char*, int, int, void*), void*) @nogc nothrow;
    int PEM_write_PKCS7(_IO_FILE*, pkcs7_st*) @nogc nothrow;
    void TS_RESP_CTX_add_flags(TS_resp_ctx*, int) @nogc nothrow;
    void TS_RESP_CTX_set_serial_cb(TS_resp_ctx*, asn1_string_st* function(TS_resp_ctx*, void*), void*) @nogc nothrow;
    void TS_RESP_CTX_set_time_cb(TS_resp_ctx*, int function(TS_resp_ctx*, void*, c_long*, c_long*), void*) @nogc nothrow;
    void TS_RESP_CTX_set_extension_cb(TS_resp_ctx*, int function(TS_resp_ctx*, X509_extension_st*, void*), void*) @nogc nothrow;
    int TS_RESP_CTX_set_status_info(TS_resp_ctx*, int, const(char)*) @nogc nothrow;
    int TS_RESP_CTX_set_status_info_cond(TS_resp_ctx*, int, const(char)*) @nogc nothrow;
    int TS_RESP_CTX_add_failure_info(TS_resp_ctx*, int) @nogc nothrow;
    TS_req_st* TS_RESP_CTX_get_request(TS_resp_ctx*) @nogc nothrow;
    TS_tst_info_st* TS_RESP_CTX_get_tst_info(TS_resp_ctx*) @nogc nothrow;
    TS_resp_st* TS_RESP_create_response(TS_resp_ctx*, bio_st*) @nogc nothrow;
    int TS_RESP_verify_signature(pkcs7_st*, stack_st_X509*, x509_store_st*, x509_st**) @nogc nothrow;
    int PEM_write_bio_PKCS7(bio_st*, pkcs7_st*) @nogc nothrow;
    X509_crl_st* PEM_read_X509_CRL(_IO_FILE*, X509_crl_st**, int function(char*, int, int, void*), void*) @nogc nothrow;
    X509_crl_st* PEM_read_bio_X509_CRL(bio_st*, X509_crl_st**, int function(char*, int, int, void*), void*) @nogc nothrow;
    int PEM_write_X509_CRL(_IO_FILE*, X509_crl_st*) @nogc nothrow;
    int PEM_write_bio_X509_CRL(bio_st*, X509_crl_st*) @nogc nothrow;
    int PEM_write_X509_REQ_NEW(_IO_FILE*, X509_req_st*) @nogc nothrow;
    int PEM_write_bio_X509_REQ_NEW(bio_st*, X509_req_st*) @nogc nothrow;
    alias TS_VERIFY_CTX = TS_verify_ctx;
    struct TS_verify_ctx;
    int TS_RESP_verify_response(TS_verify_ctx*, TS_resp_st*) @nogc nothrow;
    int TS_RESP_verify_token(TS_verify_ctx*, pkcs7_st*) @nogc nothrow;
    TS_verify_ctx* TS_VERIFY_CTX_new() @nogc nothrow;
    void TS_VERIFY_CTX_init(TS_verify_ctx*) @nogc nothrow;
    void TS_VERIFY_CTX_free(TS_verify_ctx*) @nogc nothrow;
    void TS_VERIFY_CTX_cleanup(TS_verify_ctx*) @nogc nothrow;
    int TS_VERIFY_CTX_set_flags(TS_verify_ctx*, int) @nogc nothrow;
    int TS_VERIFY_CTX_add_flags(TS_verify_ctx*, int) @nogc nothrow;
    bio_st* TS_VERIFY_CTX_set_data(TS_verify_ctx*, bio_st*) @nogc nothrow;
    ubyte* TS_VERIFY_CTX_set_imprint(TS_verify_ctx*, ubyte*, c_long) @nogc nothrow;
    x509_store_st* TS_VERIFY_CTX_set_store(TS_verify_ctx*, x509_store_st*) @nogc nothrow;
    stack_st_X509* TS_VERIFY_CTS_set_certs(TS_verify_ctx*, stack_st_X509*) @nogc nothrow;
    TS_verify_ctx* TS_REQ_to_TS_VERIFY_CTX(TS_req_st*, TS_verify_ctx*) @nogc nothrow;
    int TS_RESP_print_bio(bio_st*, TS_resp_st*) @nogc nothrow;
    int TS_STATUS_INFO_print_bio(bio_st*, TS_status_info_st*) @nogc nothrow;
    int TS_TST_INFO_print_bio(bio_st*, TS_tst_info_st*) @nogc nothrow;
    int TS_ASN1_INTEGER_print_bio(bio_st*, const(asn1_string_st)*) @nogc nothrow;
    int TS_OBJ_print_bio(bio_st*, const(asn1_object_st)*) @nogc nothrow;
    int TS_ext_print_bio(bio_st*, const(stack_st_X509_EXTENSION)*) @nogc nothrow;
    int TS_X509_ALGOR_print_bio(bio_st*, const(X509_algor_st)*) @nogc nothrow;
    int TS_MSG_IMPRINT_print_bio(bio_st*, TS_msg_imprint_st*) @nogc nothrow;
    x509_st* TS_CONF_load_cert(const(char)*) @nogc nothrow;
    stack_st_X509* TS_CONF_load_certs(const(char)*) @nogc nothrow;
    evp_pkey_st* TS_CONF_load_key(const(char)*, const(char)*) @nogc nothrow;
    const(char)* TS_CONF_get_tsa_section(conf_st*, const(char)*) @nogc nothrow;
    int TS_CONF_set_serial(conf_st*, const(char)*, asn1_string_st* function(TS_resp_ctx*, void*), TS_resp_ctx*) @nogc nothrow;
    int TS_CONF_set_crypto_device(conf_st*, const(char)*, const(char)*) @nogc nothrow;
    int TS_CONF_set_default_engine(const(char)*) @nogc nothrow;
    int TS_CONF_set_signer_cert(conf_st*, const(char)*, const(char)*, TS_resp_ctx*) @nogc nothrow;
    int TS_CONF_set_certs(conf_st*, const(char)*, const(char)*, TS_resp_ctx*) @nogc nothrow;
    int TS_CONF_set_signer_key(conf_st*, const(char)*, const(char)*, const(char)*, TS_resp_ctx*) @nogc nothrow;
    int TS_CONF_set_signer_digest(conf_st*, const(char)*, const(char)*, TS_resp_ctx*) @nogc nothrow;
    int TS_CONF_set_def_policy(conf_st*, const(char)*, const(char)*, TS_resp_ctx*) @nogc nothrow;
    int TS_CONF_set_policies(conf_st*, const(char)*, TS_resp_ctx*) @nogc nothrow;
    int TS_CONF_set_digests(conf_st*, const(char)*, TS_resp_ctx*) @nogc nothrow;
    int TS_CONF_set_accuracy(conf_st*, const(char)*, TS_resp_ctx*) @nogc nothrow;
    int TS_CONF_set_clock_precision_digits(conf_st*, const(char)*, TS_resp_ctx*) @nogc nothrow;
    int TS_CONF_set_ordering(conf_st*, const(char)*, TS_resp_ctx*) @nogc nothrow;
    int TS_CONF_set_tsa_name(conf_st*, const(char)*, TS_resp_ctx*) @nogc nothrow;
    int TS_CONF_set_ess_cert_id_chain(conf_st*, const(char)*, TS_resp_ctx*) @nogc nothrow;
    int ERR_load_TS_strings() @nogc nothrow;
    X509_req_st* PEM_read_X509_REQ(_IO_FILE*, X509_req_st**, int function(char*, int, int, void*), void*) @nogc nothrow;
    X509_req_st* PEM_read_bio_X509_REQ(bio_st*, X509_req_st**, int function(char*, int, int, void*), void*) @nogc nothrow;
    int PEM_write_X509_REQ(_IO_FILE*, X509_req_st*) @nogc nothrow;
    int PEM_write_bio_X509_REQ(bio_st*, X509_req_st*) @nogc nothrow;
    x509_st* PEM_read_bio_X509_AUX(bio_st*, x509_st**, int function(char*, int, int, void*), void*) @nogc nothrow;
    x509_st* PEM_read_X509_AUX(_IO_FILE*, x509_st**, int function(char*, int, int, void*), void*) @nogc nothrow;
    int PEM_write_X509_AUX(_IO_FILE*, x509_st*) @nogc nothrow;
    int PEM_write_bio_X509_AUX(bio_st*, x509_st*) @nogc nothrow;
    x509_st* PEM_read_X509(_IO_FILE*, x509_st**, int function(char*, int, int, void*), void*) @nogc nothrow;
    x509_st* PEM_read_bio_X509(bio_st*, x509_st**, int function(char*, int, int, void*), void*) @nogc nothrow;
    int PEM_write_X509(_IO_FILE*, x509_st*) @nogc nothrow;
    int PEM_write_bio_X509(bio_st*, x509_st*) @nogc nothrow;
    void PEM_dek_info(char*, const(char)*, int, char*) @nogc nothrow;
    void PEM_proc_type(char*, int) @nogc nothrow;
    int PEM_def_callback(char*, int, int, void*) @nogc nothrow;
    int PEM_SignFinal(evp_md_ctx_st*, ubyte*, uint*, evp_pkey_st*) @nogc nothrow;
    int PEM_SignUpdate(evp_md_ctx_st*, ubyte*, uint) @nogc nothrow;
    int PEM_SignInit(evp_md_ctx_st*, evp_md_st*) @nogc nothrow;
    stack_st_X509_INFO* PEM_X509_INFO_read(_IO_FILE*, stack_st_X509_INFO*, int function(char*, int, int, void*), void*) @nogc nothrow;
    int PEM_ASN1_write(int function(void*, ubyte**), const(char)*, _IO_FILE*, void*, const(evp_cipher_st)*, ubyte*, int, int function(char*, int, int, void*), void*) @nogc nothrow;
    void* PEM_ASN1_read(void* function(void**, const(ubyte)**, c_long), const(char)*, _IO_FILE*, void**, int function(char*, int, int, void*), void*) @nogc nothrow;
    int PEM_write(_IO_FILE*, const(char)*, const(char)*, const(ubyte)*, c_long) @nogc nothrow;
    int PEM_read(_IO_FILE*, char**, char**, ubyte**, c_long*) @nogc nothrow;
    int PEM_X509_INFO_write_bio(bio_st*, X509_info_st*, evp_cipher_st*, ubyte*, int, int function(char*, int, int, void*), void*) @nogc nothrow;
    stack_st_X509_INFO* PEM_X509_INFO_read_bio(bio_st*, stack_st_X509_INFO*, int function(char*, int, int, void*), void*) @nogc nothrow;
    int PEM_ASN1_write_bio(int function(void*, ubyte**), const(char)*, bio_st*, void*, const(evp_cipher_st)*, ubyte*, int, int function(char*, int, int, void*), void*) @nogc nothrow;
    void* PEM_ASN1_read_bio(void* function(void**, const(ubyte)**, c_long), const(char)*, bio_st*, void**, int function(char*, int, int, void*), void*) @nogc nothrow;
    int PEM_bytes_read_bio(ubyte**, c_long*, char**, const(char)*, bio_st*, int function(char*, int, int, void*), void*) @nogc nothrow;
    int PEM_write_bio(bio_st*, const(char)*, const(char)*, const(ubyte)*, c_long) @nogc nothrow;
    int PEM_bytes_read_bio_secmem(ubyte**, c_long*, char**, const(char)*, bio_st*, int function(char*, int, int, void*), void*) @nogc nothrow;
    int PEM_read_bio_ex(bio_st*, char**, char**, ubyte**, c_long*, uint) @nogc nothrow;
    int PEM_read_bio(bio_st*, char**, char**, ubyte**, c_long*) @nogc nothrow;
    int PEM_do_header(evp_cipher_info_st*, ubyte*, c_long*, int function(char*, int, int, void*), void*) @nogc nothrow;
    int PEM_get_EVP_CIPHER_INFO(char*, evp_cipher_info_st*) @nogc nothrow;
    alias pem_password_cb = int function(char*, int, int, void*);
    alias ossl_uintmax_t = c_ulong;
    alias ossl_intmax_t = c_long;
    struct ossl_store_search_st;
    alias OSSL_STORE_SEARCH = ossl_store_search_st;
    struct ossl_store_info_st;
    alias OSSL_STORE_INFO = ossl_store_info_st;
    struct ct_policy_eval_ctx_st;
    alias CT_POLICY_EVAL_CTX = ct_policy_eval_ctx_st;
    struct ctlog_store_st;
    alias CTLOG_STORE = ctlog_store_st;
    struct ctlog_st;
    alias CTLOG = ctlog_st;
    struct sct_ctx_st;
    alias SCT_CTX = sct_ctx_st;
    struct sct_st;
    alias SCT = sct_st;
    struct ocsp_responder_id_st;
    alias OCSP_RESPID = ocsp_responder_id_st;
    struct ocsp_response_st;
    alias OCSP_RESPONSE = ocsp_response_st;
    struct ocsp_req_ctx_st;
    alias OCSP_REQ_CTX = ocsp_req_ctx_st;
    struct crypto_ex_data_st
    {
        stack_st_void* sk;
    }
    alias CRYPTO_EX_DATA = crypto_ex_data_st;
    struct NAME_CONSTRAINTS_st
    {
        stack_st_GENERAL_SUBTREE* permittedSubtrees;
        stack_st_GENERAL_SUBTREE* excludedSubtrees;
    }
    alias NAME_CONSTRAINTS = NAME_CONSTRAINTS_st;
    struct ISSUING_DIST_POINT_st
    {
        DIST_POINT_NAME_st* distpoint;
        int onlyuser;
        int onlyCA;
        asn1_string_st* onlysomereasons;
        int indirectCRL;
        int onlyattr;
    }
    alias ISSUING_DIST_POINT = ISSUING_DIST_POINT_st;
    struct DIST_POINT_st
    {
        DIST_POINT_NAME_st* distpoint;
        asn1_string_st* reasons;
        stack_st_GENERAL_NAME* CRLissuer;
        int dp_reasons;
    }
    alias DIST_POINT = DIST_POINT_st;
    struct AUTHORITY_KEYID_st
    {
        asn1_string_st* keyid;
        stack_st_GENERAL_NAME* issuer;
        asn1_string_st* serial;
    }
    alias AUTHORITY_KEYID = AUTHORITY_KEYID_st;
    struct X509_POLICY_CACHE_st;
    alias X509_POLICY_CACHE = X509_POLICY_CACHE_st;
    struct X509_POLICY_TREE_st;
    alias X509_POLICY_TREE = X509_POLICY_TREE_st;
    struct X509_POLICY_LEVEL_st;
    alias X509_POLICY_LEVEL = X509_POLICY_LEVEL_st;
    struct X509_POLICY_NODE_st;
    alias X509_POLICY_NODE = X509_POLICY_NODE_st;
    struct comp_method_st;
    alias COMP_METHOD = comp_method_st;
    struct comp_ctx_st;
    alias COMP_CTX = comp_ctx_st;
    struct ssl_ctx_st;
    alias SSL_CTX = ssl_ctx_st;
    struct ssl_st;
    alias OPENSSL_PSTRING = char**;
    static char** sk_OPENSSL_PSTRING_delete(stack_st_OPENSSL_PSTRING*, int) @nogc nothrow;
    static char** sk_OPENSSL_PSTRING_delete_ptr(stack_st_OPENSSL_PSTRING*, char**) @nogc nothrow;
    static stack_st_OPENSSL_PSTRING* sk_OPENSSL_PSTRING_deep_copy(const(stack_st_OPENSSL_PSTRING)*, char** function(const(char*)*), void function(char**)) @nogc nothrow;
    static int sk_OPENSSL_PSTRING_push(stack_st_OPENSSL_PSTRING*, char**) @nogc nothrow;
    static int sk_OPENSSL_PSTRING_unshift(stack_st_OPENSSL_PSTRING*, char**) @nogc nothrow;
    static int sk_OPENSSL_PSTRING_find_ex(stack_st_OPENSSL_PSTRING*, char**) @nogc nothrow;
    static void sk_OPENSSL_PSTRING_sort(stack_st_OPENSSL_PSTRING*) @nogc nothrow;
    static char** sk_OPENSSL_PSTRING_shift(stack_st_OPENSSL_PSTRING*) @nogc nothrow;
    static void sk_OPENSSL_PSTRING_zero(stack_st_OPENSSL_PSTRING*) @nogc nothrow;
    static stack_st_OPENSSL_PSTRING* sk_OPENSSL_PSTRING_dup(const(stack_st_OPENSSL_PSTRING)*) @nogc nothrow;
    static void sk_OPENSSL_PSTRING_pop_free(stack_st_OPENSSL_PSTRING*, void function(char**)) @nogc nothrow;
    static int sk_OPENSSL_PSTRING_insert(stack_st_OPENSSL_PSTRING*, char**, int) @nogc nothrow;
    static char** sk_OPENSSL_PSTRING_set(stack_st_OPENSSL_PSTRING*, int, char**) @nogc nothrow;
    static int sk_OPENSSL_PSTRING_find(stack_st_OPENSSL_PSTRING*, char**) @nogc nothrow;
    static char** sk_OPENSSL_PSTRING_pop(stack_st_OPENSSL_PSTRING*) @nogc nothrow;
    static int sk_OPENSSL_PSTRING_is_sorted(const(stack_st_OPENSSL_PSTRING)*) @nogc nothrow;
    static void sk_OPENSSL_PSTRING_free(stack_st_OPENSSL_PSTRING*) @nogc nothrow;
    static int sk_OPENSSL_PSTRING_reserve(stack_st_OPENSSL_PSTRING*, int) @nogc nothrow;
    static stack_st_OPENSSL_PSTRING* sk_OPENSSL_PSTRING_new_reserve(int function(const(const(char*)*)*, const(const(char*)*)*), int) @nogc nothrow;
    static char** sk_OPENSSL_PSTRING_value(const(stack_st_OPENSSL_PSTRING)*, int) @nogc nothrow;
    static stack_st_OPENSSL_PSTRING* sk_OPENSSL_PSTRING_new_null() @nogc nothrow;
    static stack_st_OPENSSL_PSTRING* sk_OPENSSL_PSTRING_new(int function(const(const(char*)*)*, const(const(char*)*)*)) @nogc nothrow;
    static int sk_OPENSSL_PSTRING_num(const(stack_st_OPENSSL_PSTRING)*) @nogc nothrow;
    alias sk_OPENSSL_PSTRING_copyfunc = char** function(char**);
    alias sk_OPENSSL_PSTRING_freefunc = void function(char**);
    alias sk_OPENSSL_PSTRING_compfunc = int function(char***, char***);
    struct stack_st_OPENSSL_PSTRING;
    static int function(const(const(char*)*)*, const(const(char*)*)*) sk_OPENSSL_PSTRING_set_cmp_func(stack_st_OPENSSL_PSTRING*, int function(const(const(char*)*)*, const(const(char*)*)*)) @nogc nothrow;
    alias TXT_DB = txt_db_st;
    struct txt_db_st
    {
        int num_fields;
        stack_st_OPENSSL_PSTRING* data;
        lhash_st_OPENSSL_STRING** index;
        int function(char**)* qual;
        c_long error;
        c_long arg1;
        c_long arg2;
        char** arg_row;
    }
    txt_db_st* TXT_DB_read(bio_st*, int) @nogc nothrow;
    c_long TXT_DB_write(bio_st*, txt_db_st*) @nogc nothrow;
    int TXT_DB_create_index(txt_db_st*, int, int function(char**), c_ulong function(const(void)*), int function(const(void)*, const(void)*)) @nogc nothrow;
    void TXT_DB_free(txt_db_st*) @nogc nothrow;
    char** TXT_DB_get_by_index(txt_db_st*, int, char**) @nogc nothrow;
    int TXT_DB_insert(txt_db_st*, char**) @nogc nothrow;
    alias SSL = ssl_st;
    ui_st* UI_new() @nogc nothrow;
    ui_st* UI_new_method(const(ui_method_st)*) @nogc nothrow;
    void UI_free(ui_st*) @nogc nothrow;
    int UI_add_input_string(ui_st*, const(char)*, int, char*, int, int) @nogc nothrow;
    int UI_dup_input_string(ui_st*, const(char)*, int, char*, int, int) @nogc nothrow;
    int UI_add_verify_string(ui_st*, const(char)*, int, char*, int, int, const(char)*) @nogc nothrow;
    int UI_dup_verify_string(ui_st*, const(char)*, int, char*, int, int, const(char)*) @nogc nothrow;
    int UI_add_input_boolean(ui_st*, const(char)*, const(char)*, const(char)*, const(char)*, int, char*) @nogc nothrow;
    int UI_dup_input_boolean(ui_st*, const(char)*, const(char)*, const(char)*, const(char)*, int, char*) @nogc nothrow;
    int UI_add_info_string(ui_st*, const(char)*) @nogc nothrow;
    int UI_dup_info_string(ui_st*, const(char)*) @nogc nothrow;
    int UI_add_error_string(ui_st*, const(char)*) @nogc nothrow;
    int UI_dup_error_string(ui_st*, const(char)*) @nogc nothrow;
    struct engine_st;
    alias ENGINE = engine_st;
    struct ui_method_st;
    char* UI_construct_prompt(ui_st*, const(char)*, const(char)*) @nogc nothrow;
    void* UI_add_user_data(ui_st*, void*) @nogc nothrow;
    void* UI_get0_user_data(ui_st*) @nogc nothrow;
    const(char)* UI_get0_result(ui_st*, int) @nogc nothrow;
    int UI_process(ui_st*) @nogc nothrow;
    int UI_ctrl(ui_st*, int, c_long, void*, void function()) @nogc nothrow;
    alias UI_METHOD = ui_method_st;
    struct ui_st;
    alias UI = ui_st;
    struct ossl_init_settings_st
    {
        char* appname;
    }
    alias OPENSSL_INIT_SETTINGS = ossl_init_settings_st;
    int UI_set_ex_data(ui_st*, int, void*) @nogc nothrow;
    void* UI_get_ex_data(ui_st*, int) @nogc nothrow;
    void UI_set_default_method(const(ui_method_st)*) @nogc nothrow;
    const(ui_method_st)* UI_get_default_method() @nogc nothrow;
    const(ui_method_st)* UI_get_method(ui_st*) @nogc nothrow;
    const(ui_method_st)* UI_set_method(ui_st*, const(ui_method_st)*) @nogc nothrow;
    ui_method_st* UI_OpenSSL() @nogc nothrow;
    alias UI_STRING = ui_string_st;
    struct ui_string_st;
    static int function(const(const(ui_string_st)*)*, const(const(ui_string_st)*)*) sk_UI_STRING_set_cmp_func(stack_st_UI_STRING*, int function(const(const(ui_string_st)*)*, const(const(ui_string_st)*)*)) @nogc nothrow;
    struct stack_st_UI_STRING;
    alias sk_UI_STRING_compfunc = int function(const(const(ui_string_st)*)*, const(const(ui_string_st)*)*);
    alias sk_UI_STRING_freefunc = void function(ui_string_st*);
    alias sk_UI_STRING_copyfunc = ui_string_st* function(const(ui_string_st)*);
    static int sk_UI_STRING_num(const(stack_st_UI_STRING)*) @nogc nothrow;
    static ui_string_st* sk_UI_STRING_value(const(stack_st_UI_STRING)*, int) @nogc nothrow;
    static stack_st_UI_STRING* sk_UI_STRING_new(int function(const(const(ui_string_st)*)*, const(const(ui_string_st)*)*)) @nogc nothrow;
    static stack_st_UI_STRING* sk_UI_STRING_new_null() @nogc nothrow;
    static stack_st_UI_STRING* sk_UI_STRING_new_reserve(int function(const(const(ui_string_st)*)*, const(const(ui_string_st)*)*), int) @nogc nothrow;
    static int sk_UI_STRING_reserve(stack_st_UI_STRING*, int) @nogc nothrow;
    static void sk_UI_STRING_free(stack_st_UI_STRING*) @nogc nothrow;
    static void sk_UI_STRING_zero(stack_st_UI_STRING*) @nogc nothrow;
    static int sk_UI_STRING_push(stack_st_UI_STRING*, ui_string_st*) @nogc nothrow;
    static int sk_UI_STRING_unshift(stack_st_UI_STRING*, ui_string_st*) @nogc nothrow;
    static ui_string_st* sk_UI_STRING_pop(stack_st_UI_STRING*) @nogc nothrow;
    static ui_string_st* sk_UI_STRING_shift(stack_st_UI_STRING*) @nogc nothrow;
    static void sk_UI_STRING_pop_free(stack_st_UI_STRING*, void function(ui_string_st*)) @nogc nothrow;
    static int sk_UI_STRING_insert(stack_st_UI_STRING*, ui_string_st*, int) @nogc nothrow;
    static ui_string_st* sk_UI_STRING_set(stack_st_UI_STRING*, int, ui_string_st*) @nogc nothrow;
    static ui_string_st* sk_UI_STRING_delete(stack_st_UI_STRING*, int) @nogc nothrow;
    static int sk_UI_STRING_find(stack_st_UI_STRING*, ui_string_st*) @nogc nothrow;
    static int sk_UI_STRING_find_ex(stack_st_UI_STRING*, ui_string_st*) @nogc nothrow;
    static void sk_UI_STRING_sort(stack_st_UI_STRING*) @nogc nothrow;
    static stack_st_UI_STRING* sk_UI_STRING_dup(const(stack_st_UI_STRING)*) @nogc nothrow;
    static int sk_UI_STRING_is_sorted(const(stack_st_UI_STRING)*) @nogc nothrow;
    static stack_st_UI_STRING* sk_UI_STRING_deep_copy(const(stack_st_UI_STRING)*, ui_string_st* function(const(ui_string_st)*), void function(ui_string_st*)) @nogc nothrow;
    static ui_string_st* sk_UI_STRING_delete_ptr(stack_st_UI_STRING*, ui_string_st*) @nogc nothrow;
    enum UI_string_types
    {
        UIT_NONE = 0,
        UIT_PROMPT = 1,
        UIT_VERIFY = 2,
        UIT_BOOLEAN = 3,
        UIT_INFO = 4,
        UIT_ERROR = 5,
    }
    enum UIT_NONE = UI_string_types.UIT_NONE;
    enum UIT_PROMPT = UI_string_types.UIT_PROMPT;
    enum UIT_VERIFY = UI_string_types.UIT_VERIFY;
    enum UIT_BOOLEAN = UI_string_types.UIT_BOOLEAN;
    enum UIT_INFO = UI_string_types.UIT_INFO;
    enum UIT_ERROR = UI_string_types.UIT_ERROR;
    ui_method_st* UI_create_method(const(char)*) @nogc nothrow;
    void UI_destroy_method(ui_method_st*) @nogc nothrow;
    int UI_method_set_opener(ui_method_st*, int function(ui_st*)) @nogc nothrow;
    int UI_method_set_writer(ui_method_st*, int function(ui_st*, ui_string_st*)) @nogc nothrow;
    int UI_method_set_flusher(ui_method_st*, int function(ui_st*)) @nogc nothrow;
    int UI_method_set_reader(ui_method_st*, int function(ui_st*, ui_string_st*)) @nogc nothrow;
    int UI_method_set_closer(ui_method_st*, int function(ui_st*)) @nogc nothrow;
    int UI_method_set_prompt_constructor(ui_method_st*, char* function(ui_st*, const(char)*, const(char)*)) @nogc nothrow;
    int function(ui_st*) UI_method_get_opener(ui_method_st*) @nogc nothrow;
    int function(ui_st*, ui_string_st*) UI_method_get_writer(ui_method_st*) @nogc nothrow;
    int function(ui_st*) UI_method_get_flusher(ui_method_st*) @nogc nothrow;
    int function(ui_st*, ui_string_st*) UI_method_get_reader(ui_method_st*) @nogc nothrow;
    int function(ui_st*) UI_method_get_closer(ui_method_st*) @nogc nothrow;
    char* function(ui_st*, const(char)*, const(char)*) UI_method_get_prompt_constructor(ui_method_st*) @nogc nothrow;
    UI_string_types UI_get_string_type(ui_string_st*) @nogc nothrow;
    int UI_get_input_flags(ui_string_st*) @nogc nothrow;
    const(char)* UI_get0_output_string(ui_string_st*) @nogc nothrow;
    const(char)* UI_get0_action_string(ui_string_st*) @nogc nothrow;
    const(char)* UI_get0_result_string(ui_string_st*) @nogc nothrow;
    const(char)* UI_get0_test_string(ui_string_st*) @nogc nothrow;
    int UI_get_result_minsize(ui_string_st*) @nogc nothrow;
    int UI_get_result_maxsize(ui_string_st*) @nogc nothrow;
    int UI_set_result(ui_st*, ui_string_st*, const(char)*) @nogc nothrow;
    int UI_UTIL_read_pw_string(char*, int, const(char)*, int) @nogc nothrow;
    int UI_UTIL_read_pw(char*, char*, int, const(char)*, int) @nogc nothrow;
    int ERR_load_UI_strings() @nogc nothrow;
    struct conf_st
    {
        conf_method_st* meth;
        void* meth_data;
        lhash_st_CONF_VALUE* data;
    }
    alias CONF = conf_st;
    struct v3_ext_ctx
    {
        int flags;
        x509_st* issuer_cert;
        x509_st* subject_cert;
        X509_req_st* subject_req;
        X509_crl_st* crl;
        X509V3_CONF_METHOD_st* db_meth;
        void* db;
    }
    alias X509V3_CTX = v3_ext_ctx;
    struct pkcs8_priv_key_info_st;
    alias PKCS8_PRIV_KEY_INFO = pkcs8_priv_key_info_st;
    struct x509_sig_info_st;
    alias X509_SIG_INFO = x509_sig_info_st;
    struct X509_VERIFY_PARAM_st;
    alias X509_VERIFY_PARAM = X509_VERIFY_PARAM_st;
    struct x509_lookup_method_st;
    alias X509_LOOKUP_METHOD = x509_lookup_method_st;
    struct x509_lookup_st;
    alias X509_LOOKUP = x509_lookup_st;
    struct x509_object_st;
    alias X509_OBJECT = x509_object_st;
    struct x509_store_ctx_st;
    alias X509_STORE_CTX = x509_store_ctx_st;
    struct x509_store_st;
    alias X509_STORE = x509_store_st;
    struct X509_pubkey_st;
    alias X509_PUBKEY = X509_pubkey_st;
    struct X509_name_st;
    struct WHIRLPOOL_CTX
    {
        static union _Anonymous_28
        {
            ubyte[64] c;
            double[8] q;
        }
        _Anonymous_28 H;
        ubyte[64] data;
        uint bitoff;
        c_ulong[4] bitlen;
    }
    int WHIRLPOOL_Init(WHIRLPOOL_CTX*) @nogc nothrow;
    int WHIRLPOOL_Update(WHIRLPOOL_CTX*, const(void)*, c_ulong) @nogc nothrow;
    void WHIRLPOOL_BitUpdate(WHIRLPOOL_CTX*, const(void)*, c_ulong) @nogc nothrow;
    int WHIRLPOOL_Final(ubyte*, WHIRLPOOL_CTX*) @nogc nothrow;
    ubyte* WHIRLPOOL(const(void)*, c_ulong, ubyte*) @nogc nothrow;
    alias X509_NAME = X509_name_st;
    struct x509_revoked_st;
    pragma(mangle, "alloca") void* alloca_(c_ulong) @nogc nothrow;
    alias X509_REVOKED = x509_revoked_st;
    struct x509_crl_method_st;
    alias X509_CRL_METHOD = x509_crl_method_st;
    struct X509_crl_st;
    alias X509_CRL = X509_crl_st;
    struct X509_algor_st
    {
        asn1_object_st* algorithm;
        asn1_type_st* parameter;
    }
    alias X509_ALGOR = X509_algor_st;
    struct x509_st;
    alias X509 = x509_st;
    struct ssl_dane_st
    {
        dane_ctx_st* dctx;
        stack_st_danetls_record* trecs;
        stack_st_X509* certs;
        danetls_record_st* mtlsa;
        x509_st* mcert;
        uint umask;
        int mdpth;
        int pdpth;
        c_ulong flags;
    }
    alias SSL_DANE = ssl_dane_st;
    struct rand_drbg_st;
    alias RAND_DRBG = rand_drbg_st;
    struct rand_meth_st
    {
        int function(const(void)*, int) seed;
        int function(ubyte*, int) bytes;
        void function() cleanup;
        int function(const(void)*, int, double) add;
        int function(ubyte*, int) pseudorand;
        int function() status;
    }
    alias RAND_METHOD = rand_meth_st;
    struct ec_key_method_st;
    alias EC_KEY_METHOD = ec_key_method_st;
    struct ec_key_st;
    alias EC_KEY = ec_key_st;
    struct rsa_pss_params_st
    {
        X509_algor_st* hashAlgorithm;
        X509_algor_st* maskGenAlgorithm;
        asn1_string_st* saltLength;
        asn1_string_st* trailerField;
        X509_algor_st* maskHash;
    }
    alias RSA_PSS_PARAMS = rsa_pss_params_st;
    struct rsa_meth_st;
    alias RSA_METHOD = rsa_meth_st;
    struct rsa_st;
    alias RSA = rsa_st;
    struct dsa_method;
    alias DSA_METHOD = dsa_method;
    struct dsa_st;
    alias DSA = dsa_st;
    struct dh_method;
    alias DH_METHOD = dh_method;
    struct dh_st;
    alias DH = dh_st;
    struct hmac_ctx_st;
    alias HMAC_CTX = hmac_ctx_st;
    struct evp_Encode_Ctx_st;
    alias EVP_ENCODE_CTX = evp_Encode_Ctx_st;
    struct evp_pkey_ctx_st;
    alias EVP_PKEY_CTX = evp_pkey_ctx_st;
    struct evp_pkey_method_st;
    alias EVP_PKEY_METHOD = evp_pkey_method_st;
    struct evp_pkey_asn1_method_st;
    alias EVP_PKEY_ASN1_METHOD = evp_pkey_asn1_method_st;
    struct evp_pkey_st;
    alias EVP_PKEY = evp_pkey_st;
    struct evp_md_ctx_st;
    alias EVP_MD_CTX = evp_md_ctx_st;
    struct evp_md_st;
    alias EVP_MD = evp_md_st;
    struct evp_cipher_ctx_st;
    alias EVP_CIPHER_CTX = evp_cipher_ctx_st;
    struct evp_cipher_st;
    alias EVP_CIPHER = evp_cipher_st;
    struct buf_mem_st
    {
        c_ulong length;
        char* data;
        c_ulong max;
        c_ulong flags;
    }
    alias BUF_MEM = buf_mem_st;
    struct bn_gencb_st;
    alias BN_GENCB = bn_gencb_st;
    struct bn_recp_ctx_st;
    alias BN_RECP_CTX = bn_recp_ctx_st;
    struct bn_mont_ctx_st;
    alias BN_MONT_CTX = bn_mont_ctx_st;
    struct bn_blinding_st;
    alias BN_BLINDING = bn_blinding_st;
    struct bignum_ctx;
    alias BN_CTX = bignum_ctx;
    struct bignum_st;
    alias BIGNUM = bignum_st;
    struct bio_st;
    alias BIO = bio_st;
    struct dane_st;
    struct asn1_sctx_st;
    alias ASN1_SCTX = asn1_sctx_st;
    struct asn1_pctx_st;
    alias ASN1_PCTX = asn1_pctx_st;
    struct ASN1_ITEM_st
    {
        char itype;
        c_long utype;
        const(ASN1_TEMPLATE_st)* templates;
        c_long tcount;
        const(void)* funcs;
        c_long size;
        const(char)* sname;
    }
    alias ASN1_ITEM = ASN1_ITEM_st;
    struct asn1_object_st;
    alias ASN1_OBJECT = asn1_object_st;
    alias ASN1_NULL = int;
    alias ASN1_BOOLEAN = int;
    alias ASN1_STRING = asn1_string_st;
    alias ASN1_UTF8STRING = asn1_string_st;
    alias ASN1_VISIBLESTRING = asn1_string_st;
    alias ASN1_GENERALIZEDTIME = asn1_string_st;
    alias ASN1_TIME = asn1_string_st;
    alias ASN1_UTCTIME = asn1_string_st;
    alias ASN1_BMPSTRING = asn1_string_st;
    alias ASN1_UNIVERSALSTRING = asn1_string_st;
    alias ASN1_GENERALSTRING = asn1_string_st;
    alias ASN1_IA5STRING = asn1_string_st;
    alias ASN1_T61STRING = asn1_string_st;
    alias ASN1_PRINTABLESTRING = asn1_string_st;
    alias ASN1_OCTET_STRING = asn1_string_st;
    alias ASN1_BIT_STRING = asn1_string_st;
    alias ASN1_ENUMERATED = asn1_string_st;
    struct asn1_string_st
    {
        int length;
        int type;
        ubyte* data;
        c_long flags;
    }
    alias ASN1_INTEGER = asn1_string_st;
    static ushort __bswap_16(ushort) @nogc nothrow;
    static uint __bswap_32(uint) @nogc nothrow;
    static c_ulong __bswap_64(c_ulong) @nogc nothrow;
    alias __cpu_mask = c_ulong;
    struct cpu_set_t
    {
        c_ulong[16] __bits;
    }
    int __sched_cpucount(c_ulong, const(cpu_set_t)*) @nogc nothrow;
    cpu_set_t* __sched_cpualloc(c_ulong) @nogc nothrow;
    void __sched_cpufree(cpu_set_t*) @nogc nothrow;
    alias _Float32 = float;
    alias _Float64 = double;
    alias _Float32x = double;
    alias _Float64x = real;
    alias pthread_t = c_ulong;
    union pthread_mutexattr_t
    {
        char[4] __size;
        int __align;
    }
    union pthread_condattr_t
    {
        char[4] __size;
        int __align;
    }
    alias pthread_key_t = uint;
    alias pthread_once_t = int;
    union pthread_attr_t
    {
        char[56] __size;
        c_long __align;
    }
    union pthread_mutex_t
    {
        __pthread_mutex_s __data;
        char[40] __size;
        c_long __align;
    }
    union pthread_cond_t
    {
        __pthread_cond_s __data;
        char[48] __size;
        long __align;
    }
    union pthread_rwlock_t
    {
        __pthread_rwlock_arch_t __data;
        char[56] __size;
        c_long __align;
    }
    union pthread_rwlockattr_t
    {
        char[8] __size;
        c_long __align;
    }
    alias pthread_spinlock_t = int;
    union pthread_barrier_t
    {
        char[32] __size;
        c_long __align;
    }
    union pthread_barrierattr_t
    {
        char[4] __size;
        int __align;
    }
    alias __jmp_buf = c_long[8];
    alias int8_t = byte;
    alias int16_t = short;
    alias int32_t = int;
    alias int64_t = c_long;
    alias uint8_t = ubyte;
    alias uint16_t = ushort;
    alias uint32_t = uint;
    alias uint64_t = ulong;
    struct __pthread_mutex_s
    {
        int __lock;
        uint __count;
        int __owner;
        uint __nusers;
        int __kind;
        short __spins;
        short __elision;
        __pthread_internal_list __list;
    }
    struct __pthread_rwlock_arch_t
    {
        uint __readers;
        uint __writers;
        uint __wrphase_futex;
        uint __writers_futex;
        uint __pad3;
        uint __pad4;
        int __cur_writer;
        int __shared;
        byte __rwelision;
        ubyte[7] __pad1;
        c_ulong __pad2;
        uint __flags;
    }
    alias __pthread_list_t = __pthread_internal_list;
    struct __pthread_internal_list
    {
        __pthread_internal_list* __prev;
        __pthread_internal_list* __next;
    }
    alias __pthread_slist_t = __pthread_internal_slist;
    struct __pthread_internal_slist
    {
        __pthread_internal_slist* __next;
    }
    struct __pthread_cond_s
    {
        static union _Anonymous_29
        {
            ulong __wseq;
            static struct _Anonymous_30
            {
                uint __low;
                uint __high;
            }
            _Anonymous_30 __wseq32;
        }
        _Anonymous_29 _anonymous_31;
        ref auto __wseq() @property @nogc pure nothrow { return _anonymous_31.__wseq; }
        void __wseq(_T_)(auto ref _T_ val) @property @nogc pure nothrow { _anonymous_31.__wseq = val; }
        ref auto __wseq32() @property @nogc pure nothrow { return _anonymous_31.__wseq32; }
        void __wseq32(_T_)(auto ref _T_ val) @property @nogc pure nothrow { _anonymous_31.__wseq32 = val; }
        static union _Anonymous_32
        {
            ulong __g1_start;
            static struct _Anonymous_33
            {
                uint __low;
                uint __high;
            }
            _Anonymous_33 __g1_start32;
        }
        _Anonymous_32 _anonymous_34;
        ref auto __g1_start() @property @nogc pure nothrow { return _anonymous_34.__g1_start; }
        void __g1_start(_T_)(auto ref _T_ val) @property @nogc pure nothrow { _anonymous_34.__g1_start = val; }
        ref auto __g1_start32() @property @nogc pure nothrow { return _anonymous_34.__g1_start32; }
        void __g1_start32(_T_)(auto ref _T_ val) @property @nogc pure nothrow { _anonymous_34.__g1_start32 = val; }
        uint[2] __g_refs;
        uint[2] __g_size;
        uint __g1_orig_size;
        uint __wrefs;
        uint[2] __g_signals;
    }
    alias __tss_t = uint;
    alias __thrd_t = c_ulong;
    struct __once_flag
    {
        int __data;
    }
    alias __u_char = ubyte;
    alias __u_short = ushort;
    alias __u_int = uint;
    alias __u_long = c_ulong;
    alias __int8_t = byte;
    alias __uint8_t = ubyte;
    alias __int16_t = short;
    alias __uint16_t = ushort;
    alias __int32_t = int;
    alias __uint32_t = uint;
    alias __int64_t = c_long;
    alias __uint64_t = c_ulong;
    alias __int_least8_t = byte;
    alias __uint_least8_t = ubyte;
    alias __int_least16_t = short;
    alias __uint_least16_t = ushort;
    alias __int_least32_t = int;
    alias __uint_least32_t = uint;
    alias __int_least64_t = c_long;
    alias __uint_least64_t = c_ulong;
    alias __quad_t = c_long;
    alias __u_quad_t = c_ulong;
    alias __intmax_t = c_long;
    alias __uintmax_t = c_ulong;
    alias __dev_t = c_ulong;
    alias __uid_t = uint;
    alias __gid_t = uint;
    alias __ino_t = c_ulong;
    alias __ino64_t = c_ulong;
    alias __mode_t = uint;
    alias __nlink_t = c_ulong;
    alias __off_t = c_long;
    alias __off64_t = c_long;
    alias __pid_t = int;
    struct __fsid_t
    {
        int[2] __val;
    }
    alias __clock_t = c_long;
    alias __rlim_t = c_ulong;
    alias __rlim64_t = c_ulong;
    alias __id_t = uint;
    alias __time_t = c_long;
    alias __useconds_t = uint;
    alias __suseconds_t = c_long;
    alias __suseconds64_t = c_long;
    alias __daddr_t = int;
    alias __key_t = int;
    alias __clockid_t = int;
    alias __timer_t = void*;
    alias __blksize_t = c_long;
    alias __blkcnt_t = c_long;
    alias __blkcnt64_t = c_long;
    alias __fsblkcnt_t = c_ulong;
    alias __fsblkcnt64_t = c_ulong;
    alias __fsfilcnt_t = c_ulong;
    alias __fsfilcnt64_t = c_ulong;
    alias __fsword_t = c_long;
    alias __ssize_t = c_long;
    alias __syscall_slong_t = c_long;
    alias __syscall_ulong_t = c_ulong;
    alias __loff_t = c_long;
    alias __caddr_t = char*;
    alias __intptr_t = c_long;
    alias __socklen_t = uint;
    alias __sig_atomic_t = int;
    alias FILE = _IO_FILE;
    struct _IO_FILE
    {
        int _flags;
        char* _IO_read_ptr;
        char* _IO_read_end;
        char* _IO_read_base;
        char* _IO_write_base;
        char* _IO_write_ptr;
        char* _IO_write_end;
        char* _IO_buf_base;
        char* _IO_buf_end;
        char* _IO_save_base;
        char* _IO_backup_base;
        char* _IO_save_end;
        _IO_marker* _markers;
        _IO_FILE* _chain;
        int _fileno;
        int _flags2;
        c_long _old_offset;
        ushort _cur_column;
        byte _vtable_offset;
        char[1] _shortbuf;
        void* _lock;
        c_long _offset;
        _IO_codecvt* _codecvt;
        _IO_wide_data* _wide_data;
        _IO_FILE* _freeres_list;
        void* _freeres_buf;
        c_ulong __pad5;
        int _mode;
        char[20] _unused2;
    }
    alias __FILE = _IO_FILE;
    alias __fpos64_t = _G_fpos64_t;
    struct _G_fpos64_t
    {
        c_long __pos;
        __mbstate_t __state;
    }
    alias __fpos_t = _G_fpos_t;
    struct _G_fpos_t
    {
        c_long __pos;
        __mbstate_t __state;
    }
    struct __locale_struct
    {
        __locale_data*[13] __locales;
        const(ushort)* __ctype_b;
        const(int)* __ctype_tolower;
        const(int)* __ctype_toupper;
        const(char)*[13] __names;
    }
    alias __locale_t = __locale_struct*;
    struct __mbstate_t
    {
        int __count;
        static union _Anonymous_35
        {
            uint __wch;
            char[4] __wchb;
        }
        _Anonymous_35 __value;
    }
    struct __sigset_t
    {
        c_ulong[16] __val;
    }
    alias clock_t = c_long;
    alias clockid_t = int;
    alias locale_t = __locale_struct*;
    alias sigset_t = __sigset_t;
    struct _IO_marker;
    struct _IO_codecvt;
    struct _IO_wide_data;
    alias _IO_lock_t = void;
    struct __jmp_buf_tag
    {
        c_long[8] __jmpbuf;
        int __mask_was_saved;
        __sigset_t __saved_mask;
    }
    struct itimerspec
    {
        timespec it_interval;
        timespec it_value;
    }
    struct sched_param
    {
        int sched_priority;
    }
    struct timespec
    {
        c_long tv_sec;
        c_long tv_nsec;
    }
    struct timeval
    {
        c_long tv_sec;
        c_long tv_usec;
    }
    struct tm
    {
        int tm_sec;
        int tm_min;
        int tm_hour;
        int tm_mday;
        int tm_mon;
        int tm_year;
        int tm_wday;
        int tm_yday;
        int tm_isdst;
        c_long tm_gmtoff;
        const(char)* tm_zone;
    }
    alias time_t = c_long;
    alias timer_t = void*;
    static ushort __uint16_identity(ushort) @nogc nothrow;
    static uint __uint32_identity(uint) @nogc nothrow;
    static c_ulong __uint64_identity(c_ulong) @nogc nothrow;
    int* __errno_location() @nogc nothrow;
    alias __gwchar_t = int;
    struct imaxdiv_t
    {
        c_long quot;
        c_long rem;
    }
    c_long imaxabs(c_long) @nogc nothrow;
    imaxdiv_t imaxdiv(c_long, c_long) @nogc nothrow;
    c_long strtoimax(const(char)*, char**, int) @nogc nothrow;
    c_ulong strtoumax(const(char)*, char**, int) @nogc nothrow;
    c_long wcstoimax(const(int)*, int**, int) @nogc nothrow;
    c_ulong wcstoumax(const(int)*, int**, int) @nogc nothrow;
    static int function(const(const(X509_algor_st)*)*, const(const(X509_algor_st)*)*) sk_X509_ALGOR_set_cmp_func(stack_st_X509_ALGOR*, int function(const(const(X509_algor_st)*)*, const(const(X509_algor_st)*)*)) @nogc nothrow;
    static stack_st_X509_ALGOR* sk_X509_ALGOR_deep_copy(const(stack_st_X509_ALGOR)*, X509_algor_st* function(const(X509_algor_st)*), void function(X509_algor_st*)) @nogc nothrow;
    static stack_st_X509_ALGOR* sk_X509_ALGOR_dup(const(stack_st_X509_ALGOR)*) @nogc nothrow;
    static int sk_X509_ALGOR_is_sorted(const(stack_st_X509_ALGOR)*) @nogc nothrow;
    static void sk_X509_ALGOR_sort(stack_st_X509_ALGOR*) @nogc nothrow;
    static int sk_X509_ALGOR_find_ex(stack_st_X509_ALGOR*, X509_algor_st*) @nogc nothrow;
    static int sk_X509_ALGOR_find(stack_st_X509_ALGOR*, X509_algor_st*) @nogc nothrow;
    static X509_algor_st* sk_X509_ALGOR_set(stack_st_X509_ALGOR*, int, X509_algor_st*) @nogc nothrow;
    struct stack_st_X509_ALGOR;
    alias sk_X509_ALGOR_compfunc = int function(const(const(X509_algor_st)*)*, const(const(X509_algor_st)*)*);
    alias sk_X509_ALGOR_freefunc = void function(X509_algor_st*);
    alias sk_X509_ALGOR_copyfunc = X509_algor_st* function(const(X509_algor_st)*);
    static int sk_X509_ALGOR_num(const(stack_st_X509_ALGOR)*) @nogc nothrow;
    static X509_algor_st* sk_X509_ALGOR_value(const(stack_st_X509_ALGOR)*, int) @nogc nothrow;
    static stack_st_X509_ALGOR* sk_X509_ALGOR_new(int function(const(const(X509_algor_st)*)*, const(const(X509_algor_st)*)*)) @nogc nothrow;
    static stack_st_X509_ALGOR* sk_X509_ALGOR_new_null() @nogc nothrow;
    static stack_st_X509_ALGOR* sk_X509_ALGOR_new_reserve(int function(const(const(X509_algor_st)*)*, const(const(X509_algor_st)*)*), int) @nogc nothrow;
    static int sk_X509_ALGOR_reserve(stack_st_X509_ALGOR*, int) @nogc nothrow;
    static void sk_X509_ALGOR_free(stack_st_X509_ALGOR*) @nogc nothrow;
    static void sk_X509_ALGOR_zero(stack_st_X509_ALGOR*) @nogc nothrow;
    static int sk_X509_ALGOR_insert(stack_st_X509_ALGOR*, X509_algor_st*, int) @nogc nothrow;
    static void sk_X509_ALGOR_pop_free(stack_st_X509_ALGOR*, void function(X509_algor_st*)) @nogc nothrow;
    static X509_algor_st* sk_X509_ALGOR_shift(stack_st_X509_ALGOR*) @nogc nothrow;
    static X509_algor_st* sk_X509_ALGOR_pop(stack_st_X509_ALGOR*) @nogc nothrow;
    static int sk_X509_ALGOR_unshift(stack_st_X509_ALGOR*, X509_algor_st*) @nogc nothrow;
    static int sk_X509_ALGOR_push(stack_st_X509_ALGOR*, X509_algor_st*) @nogc nothrow;
    static X509_algor_st* sk_X509_ALGOR_delete_ptr(stack_st_X509_ALGOR*, X509_algor_st*) @nogc nothrow;
    static X509_algor_st* sk_X509_ALGOR_delete(stack_st_X509_ALGOR*, int) @nogc nothrow;
    alias ASN1_ENCODING = ASN1_ENCODING_st;
    struct ASN1_ENCODING_st
    {
        ubyte* enc;
        c_long len;
        int modified;
    }
    alias ASN1_STRING_TABLE = asn1_string_table_st;
    struct asn1_string_table_st
    {
        int nid;
        c_long minsize;
        c_long maxsize;
        c_ulong mask;
        c_ulong flags;
    }
    static int function(const(const(asn1_string_table_st)*)*, const(const(asn1_string_table_st)*)*) sk_ASN1_STRING_TABLE_set_cmp_func(stack_st_ASN1_STRING_TABLE*, int function(const(const(asn1_string_table_st)*)*, const(const(asn1_string_table_st)*)*)) @nogc nothrow;
    struct stack_st_ASN1_STRING_TABLE;
    alias sk_ASN1_STRING_TABLE_compfunc = int function(const(const(asn1_string_table_st)*)*, const(const(asn1_string_table_st)*)*);
    alias sk_ASN1_STRING_TABLE_freefunc = void function(asn1_string_table_st*);
    alias sk_ASN1_STRING_TABLE_copyfunc = asn1_string_table_st* function(const(asn1_string_table_st)*);
    static int sk_ASN1_STRING_TABLE_num(const(stack_st_ASN1_STRING_TABLE)*) @nogc nothrow;
    static asn1_string_table_st* sk_ASN1_STRING_TABLE_value(const(stack_st_ASN1_STRING_TABLE)*, int) @nogc nothrow;
    static stack_st_ASN1_STRING_TABLE* sk_ASN1_STRING_TABLE_new(int function(const(const(asn1_string_table_st)*)*, const(const(asn1_string_table_st)*)*)) @nogc nothrow;
    static stack_st_ASN1_STRING_TABLE* sk_ASN1_STRING_TABLE_new_null() @nogc nothrow;
    static stack_st_ASN1_STRING_TABLE* sk_ASN1_STRING_TABLE_new_reserve(int function(const(const(asn1_string_table_st)*)*, const(const(asn1_string_table_st)*)*), int) @nogc nothrow;
    static int sk_ASN1_STRING_TABLE_reserve(stack_st_ASN1_STRING_TABLE*, int) @nogc nothrow;
    static void sk_ASN1_STRING_TABLE_free(stack_st_ASN1_STRING_TABLE*) @nogc nothrow;
    static void sk_ASN1_STRING_TABLE_zero(stack_st_ASN1_STRING_TABLE*) @nogc nothrow;
    static asn1_string_table_st* sk_ASN1_STRING_TABLE_delete(stack_st_ASN1_STRING_TABLE*, int) @nogc nothrow;
    static asn1_string_table_st* sk_ASN1_STRING_TABLE_delete_ptr(stack_st_ASN1_STRING_TABLE*, asn1_string_table_st*) @nogc nothrow;
    static int sk_ASN1_STRING_TABLE_push(stack_st_ASN1_STRING_TABLE*, asn1_string_table_st*) @nogc nothrow;
    static int sk_ASN1_STRING_TABLE_unshift(stack_st_ASN1_STRING_TABLE*, asn1_string_table_st*) @nogc nothrow;
    static asn1_string_table_st* sk_ASN1_STRING_TABLE_pop(stack_st_ASN1_STRING_TABLE*) @nogc nothrow;
    static asn1_string_table_st* sk_ASN1_STRING_TABLE_shift(stack_st_ASN1_STRING_TABLE*) @nogc nothrow;
    static void sk_ASN1_STRING_TABLE_pop_free(stack_st_ASN1_STRING_TABLE*, void function(asn1_string_table_st*)) @nogc nothrow;
    static stack_st_ASN1_STRING_TABLE* sk_ASN1_STRING_TABLE_deep_copy(const(stack_st_ASN1_STRING_TABLE)*, asn1_string_table_st* function(const(asn1_string_table_st)*), void function(asn1_string_table_st*)) @nogc nothrow;
    static int sk_ASN1_STRING_TABLE_insert(stack_st_ASN1_STRING_TABLE*, asn1_string_table_st*, int) @nogc nothrow;
    static int sk_ASN1_STRING_TABLE_find(stack_st_ASN1_STRING_TABLE*, asn1_string_table_st*) @nogc nothrow;
    static int sk_ASN1_STRING_TABLE_find_ex(stack_st_ASN1_STRING_TABLE*, asn1_string_table_st*) @nogc nothrow;
    static void sk_ASN1_STRING_TABLE_sort(stack_st_ASN1_STRING_TABLE*) @nogc nothrow;
    static int sk_ASN1_STRING_TABLE_is_sorted(const(stack_st_ASN1_STRING_TABLE)*) @nogc nothrow;
    static stack_st_ASN1_STRING_TABLE* sk_ASN1_STRING_TABLE_dup(const(stack_st_ASN1_STRING_TABLE)*) @nogc nothrow;
    static asn1_string_table_st* sk_ASN1_STRING_TABLE_set(stack_st_ASN1_STRING_TABLE*, int, asn1_string_table_st*) @nogc nothrow;
    alias ASN1_TEMPLATE = ASN1_TEMPLATE_st;
    struct ASN1_TEMPLATE_st
    {
        c_ulong flags;
        c_long tag;
        c_ulong offset;
        const(char)* field_name;
        const(ASN1_ITEM_st)* item;
    }
    alias ASN1_TLC = ASN1_TLC_st;
    struct ASN1_TLC_st
    {
        char valid;
        int ret;
        c_long plen;
        int ptag;
        int pclass;
        int hdrlen;
    }
    alias ASN1_VALUE = ASN1_VALUE_st;
    struct ASN1_VALUE_st;
    alias d2i_of_void = void* function(void**, const(ubyte)**, c_long);
    alias i2d_of_void = int function(void*, ubyte**);
    alias ASN1_ITEM_EXP = const(ASN1_ITEM_st);
    static int function(const(const(asn1_string_st)*)*, const(const(asn1_string_st)*)*) sk_ASN1_INTEGER_set_cmp_func(stack_st_ASN1_INTEGER*, int function(const(const(asn1_string_st)*)*, const(const(asn1_string_st)*)*)) @nogc nothrow;
    static stack_st_ASN1_INTEGER* sk_ASN1_INTEGER_deep_copy(const(stack_st_ASN1_INTEGER)*, asn1_string_st* function(const(asn1_string_st)*), void function(asn1_string_st*)) @nogc nothrow;
    static int sk_ASN1_INTEGER_is_sorted(const(stack_st_ASN1_INTEGER)*) @nogc nothrow;
    static void sk_ASN1_INTEGER_sort(stack_st_ASN1_INTEGER*) @nogc nothrow;
    static int sk_ASN1_INTEGER_find_ex(stack_st_ASN1_INTEGER*, asn1_string_st*) @nogc nothrow;
    static int sk_ASN1_INTEGER_find(stack_st_ASN1_INTEGER*, asn1_string_st*) @nogc nothrow;
    static asn1_string_st* sk_ASN1_INTEGER_set(stack_st_ASN1_INTEGER*, int, asn1_string_st*) @nogc nothrow;
    static int sk_ASN1_INTEGER_insert(stack_st_ASN1_INTEGER*, asn1_string_st*, int) @nogc nothrow;
    static void sk_ASN1_INTEGER_pop_free(stack_st_ASN1_INTEGER*, void function(asn1_string_st*)) @nogc nothrow;
    static asn1_string_st* sk_ASN1_INTEGER_shift(stack_st_ASN1_INTEGER*) @nogc nothrow;
    static asn1_string_st* sk_ASN1_INTEGER_pop(stack_st_ASN1_INTEGER*) @nogc nothrow;
    static int sk_ASN1_INTEGER_unshift(stack_st_ASN1_INTEGER*, asn1_string_st*) @nogc nothrow;
    static int sk_ASN1_INTEGER_push(stack_st_ASN1_INTEGER*, asn1_string_st*) @nogc nothrow;
    static asn1_string_st* sk_ASN1_INTEGER_delete_ptr(stack_st_ASN1_INTEGER*, asn1_string_st*) @nogc nothrow;
    static asn1_string_st* sk_ASN1_INTEGER_delete(stack_st_ASN1_INTEGER*, int) @nogc nothrow;
    static void sk_ASN1_INTEGER_free(stack_st_ASN1_INTEGER*) @nogc nothrow;
    static int sk_ASN1_INTEGER_reserve(stack_st_ASN1_INTEGER*, int) @nogc nothrow;
    static stack_st_ASN1_INTEGER* sk_ASN1_INTEGER_new_reserve(int function(const(const(asn1_string_st)*)*, const(const(asn1_string_st)*)*), int) @nogc nothrow;
    static stack_st_ASN1_INTEGER* sk_ASN1_INTEGER_new_null() @nogc nothrow;
    static void sk_ASN1_INTEGER_zero(stack_st_ASN1_INTEGER*) @nogc nothrow;
    static asn1_string_st* sk_ASN1_INTEGER_value(const(stack_st_ASN1_INTEGER)*, int) @nogc nothrow;
    static int sk_ASN1_INTEGER_num(const(stack_st_ASN1_INTEGER)*) @nogc nothrow;
    alias sk_ASN1_INTEGER_copyfunc = asn1_string_st* function(const(asn1_string_st)*);
    alias sk_ASN1_INTEGER_freefunc = void function(asn1_string_st*);
    alias sk_ASN1_INTEGER_compfunc = int function(const(const(asn1_string_st)*)*, const(const(asn1_string_st)*)*);
    struct stack_st_ASN1_INTEGER;
    static stack_st_ASN1_INTEGER* sk_ASN1_INTEGER_dup(const(stack_st_ASN1_INTEGER)*) @nogc nothrow;
    static stack_st_ASN1_INTEGER* sk_ASN1_INTEGER_new(int function(const(const(asn1_string_st)*)*, const(const(asn1_string_st)*)*)) @nogc nothrow;
    static stack_st_ASN1_GENERALSTRING* sk_ASN1_GENERALSTRING_new_reserve(int function(const(const(asn1_string_st)*)*, const(const(asn1_string_st)*)*), int) @nogc nothrow;
    static void sk_ASN1_GENERALSTRING_pop_free(stack_st_ASN1_GENERALSTRING*, void function(asn1_string_st*)) @nogc nothrow;
    static int sk_ASN1_GENERALSTRING_insert(stack_st_ASN1_GENERALSTRING*, asn1_string_st*, int) @nogc nothrow;
    static asn1_string_st* sk_ASN1_GENERALSTRING_set(stack_st_ASN1_GENERALSTRING*, int, asn1_string_st*) @nogc nothrow;
    static int sk_ASN1_GENERALSTRING_find(stack_st_ASN1_GENERALSTRING*, asn1_string_st*) @nogc nothrow;
    static int sk_ASN1_GENERALSTRING_find_ex(stack_st_ASN1_GENERALSTRING*, asn1_string_st*) @nogc nothrow;
    static void sk_ASN1_GENERALSTRING_sort(stack_st_ASN1_GENERALSTRING*) @nogc nothrow;
    static int sk_ASN1_GENERALSTRING_is_sorted(const(stack_st_ASN1_GENERALSTRING)*) @nogc nothrow;
    static stack_st_ASN1_GENERALSTRING* sk_ASN1_GENERALSTRING_dup(const(stack_st_ASN1_GENERALSTRING)*) @nogc nothrow;
    static stack_st_ASN1_GENERALSTRING* sk_ASN1_GENERALSTRING_deep_copy(const(stack_st_ASN1_GENERALSTRING)*, asn1_string_st* function(const(asn1_string_st)*), void function(asn1_string_st*)) @nogc nothrow;
    static asn1_string_st* sk_ASN1_GENERALSTRING_shift(stack_st_ASN1_GENERALSTRING*) @nogc nothrow;
    static int function(const(const(asn1_string_st)*)*, const(const(asn1_string_st)*)*) sk_ASN1_GENERALSTRING_set_cmp_func(stack_st_ASN1_GENERALSTRING*, int function(const(const(asn1_string_st)*)*, const(const(asn1_string_st)*)*)) @nogc nothrow;
    static asn1_string_st* sk_ASN1_GENERALSTRING_pop(stack_st_ASN1_GENERALSTRING*) @nogc nothrow;
    static int sk_ASN1_GENERALSTRING_unshift(stack_st_ASN1_GENERALSTRING*, asn1_string_st*) @nogc nothrow;
    static int sk_ASN1_GENERALSTRING_push(stack_st_ASN1_GENERALSTRING*, asn1_string_st*) @nogc nothrow;
    static asn1_string_st* sk_ASN1_GENERALSTRING_delete_ptr(stack_st_ASN1_GENERALSTRING*, asn1_string_st*) @nogc nothrow;
    static void sk_ASN1_GENERALSTRING_free(stack_st_ASN1_GENERALSTRING*) @nogc nothrow;
    static void sk_ASN1_GENERALSTRING_zero(stack_st_ASN1_GENERALSTRING*) @nogc nothrow;
    static int sk_ASN1_GENERALSTRING_reserve(stack_st_ASN1_GENERALSTRING*, int) @nogc nothrow;
    static asn1_string_st* sk_ASN1_GENERALSTRING_delete(stack_st_ASN1_GENERALSTRING*, int) @nogc nothrow;
    static stack_st_ASN1_GENERALSTRING* sk_ASN1_GENERALSTRING_new(int function(const(const(asn1_string_st)*)*, const(const(asn1_string_st)*)*)) @nogc nothrow;
    static asn1_string_st* sk_ASN1_GENERALSTRING_value(const(stack_st_ASN1_GENERALSTRING)*, int) @nogc nothrow;
    static int sk_ASN1_GENERALSTRING_num(const(stack_st_ASN1_GENERALSTRING)*) @nogc nothrow;
    alias sk_ASN1_GENERALSTRING_copyfunc = asn1_string_st* function(const(asn1_string_st)*);
    alias sk_ASN1_GENERALSTRING_freefunc = void function(asn1_string_st*);
    alias sk_ASN1_GENERALSTRING_compfunc = int function(const(const(asn1_string_st)*)*, const(const(asn1_string_st)*)*);
    struct stack_st_ASN1_GENERALSTRING;
    static stack_st_ASN1_GENERALSTRING* sk_ASN1_GENERALSTRING_new_null() @nogc nothrow;
    static void sk_ASN1_UTF8STRING_pop_free(stack_st_ASN1_UTF8STRING*, void function(asn1_string_st*)) @nogc nothrow;
    static int sk_ASN1_UTF8STRING_reserve(stack_st_ASN1_UTF8STRING*, int) @nogc nothrow;
    static int sk_ASN1_UTF8STRING_insert(stack_st_ASN1_UTF8STRING*, asn1_string_st*, int) @nogc nothrow;
    static asn1_string_st* sk_ASN1_UTF8STRING_set(stack_st_ASN1_UTF8STRING*, int, asn1_string_st*) @nogc nothrow;
    static int sk_ASN1_UTF8STRING_find(stack_st_ASN1_UTF8STRING*, asn1_string_st*) @nogc nothrow;
    static int sk_ASN1_UTF8STRING_find_ex(stack_st_ASN1_UTF8STRING*, asn1_string_st*) @nogc nothrow;
    static void sk_ASN1_UTF8STRING_sort(stack_st_ASN1_UTF8STRING*) @nogc nothrow;
    static int sk_ASN1_UTF8STRING_is_sorted(const(stack_st_ASN1_UTF8STRING)*) @nogc nothrow;
    static stack_st_ASN1_UTF8STRING* sk_ASN1_UTF8STRING_dup(const(stack_st_ASN1_UTF8STRING)*) @nogc nothrow;
    static stack_st_ASN1_UTF8STRING* sk_ASN1_UTF8STRING_deep_copy(const(stack_st_ASN1_UTF8STRING)*, asn1_string_st* function(const(asn1_string_st)*), void function(asn1_string_st*)) @nogc nothrow;
    static int function(const(const(asn1_string_st)*)*, const(const(asn1_string_st)*)*) sk_ASN1_UTF8STRING_set_cmp_func(stack_st_ASN1_UTF8STRING*, int function(const(const(asn1_string_st)*)*, const(const(asn1_string_st)*)*)) @nogc nothrow;
    static asn1_string_st* sk_ASN1_UTF8STRING_shift(stack_st_ASN1_UTF8STRING*) @nogc nothrow;
    static asn1_string_st* sk_ASN1_UTF8STRING_pop(stack_st_ASN1_UTF8STRING*) @nogc nothrow;
    static int sk_ASN1_UTF8STRING_unshift(stack_st_ASN1_UTF8STRING*, asn1_string_st*) @nogc nothrow;
    static int sk_ASN1_UTF8STRING_push(stack_st_ASN1_UTF8STRING*, asn1_string_st*) @nogc nothrow;
    static asn1_string_st* sk_ASN1_UTF8STRING_delete_ptr(stack_st_ASN1_UTF8STRING*, asn1_string_st*) @nogc nothrow;
    static void sk_ASN1_UTF8STRING_zero(stack_st_ASN1_UTF8STRING*) @nogc nothrow;
    static asn1_string_st* sk_ASN1_UTF8STRING_delete(stack_st_ASN1_UTF8STRING*, int) @nogc nothrow;
    static void sk_ASN1_UTF8STRING_free(stack_st_ASN1_UTF8STRING*) @nogc nothrow;
    alias sk_ASN1_UTF8STRING_freefunc = void function(asn1_string_st*);
    static stack_st_ASN1_UTF8STRING* sk_ASN1_UTF8STRING_new_null() @nogc nothrow;
    static stack_st_ASN1_UTF8STRING* sk_ASN1_UTF8STRING_new(int function(const(const(asn1_string_st)*)*, const(const(asn1_string_st)*)*)) @nogc nothrow;
    static asn1_string_st* sk_ASN1_UTF8STRING_value(const(stack_st_ASN1_UTF8STRING)*, int) @nogc nothrow;
    static int sk_ASN1_UTF8STRING_num(const(stack_st_ASN1_UTF8STRING)*) @nogc nothrow;
    alias sk_ASN1_UTF8STRING_copyfunc = asn1_string_st* function(const(asn1_string_st)*);
    alias sk_ASN1_UTF8STRING_compfunc = int function(const(const(asn1_string_st)*)*, const(const(asn1_string_st)*)*);
    struct stack_st_ASN1_UTF8STRING;
    static stack_st_ASN1_UTF8STRING* sk_ASN1_UTF8STRING_new_reserve(int function(const(const(asn1_string_st)*)*, const(const(asn1_string_st)*)*), int) @nogc nothrow;
    alias ASN1_TYPE = asn1_type_st;
    struct asn1_type_st
    {
        int type;
        static union _Anonymous_36
        {
            char* ptr;
            int boolean;
            asn1_string_st* asn1_string;
            asn1_object_st* object;
            asn1_string_st* integer;
            asn1_string_st* enumerated;
            asn1_string_st* bit_string;
            asn1_string_st* octet_string;
            asn1_string_st* printablestring;
            asn1_string_st* t61string;
            asn1_string_st* ia5string;
            asn1_string_st* generalstring;
            asn1_string_st* bmpstring;
            asn1_string_st* universalstring;
            asn1_string_st* utctime;
            asn1_string_st* generalizedtime;
            asn1_string_st* visiblestring;
            asn1_string_st* utf8string;
            asn1_string_st* set;
            asn1_string_st* sequence;
            ASN1_VALUE_st* asn1_value;
        }
        _Anonymous_36 value;
    }
    static int sk_ASN1_TYPE_insert(stack_st_ASN1_TYPE*, asn1_type_st*, int) @nogc nothrow;
    static void sk_ASN1_TYPE_free(stack_st_ASN1_TYPE*) @nogc nothrow;
    static asn1_type_st* sk_ASN1_TYPE_set(stack_st_ASN1_TYPE*, int, asn1_type_st*) @nogc nothrow;
    static int sk_ASN1_TYPE_find(stack_st_ASN1_TYPE*, asn1_type_st*) @nogc nothrow;
    static int sk_ASN1_TYPE_find_ex(stack_st_ASN1_TYPE*, asn1_type_st*) @nogc nothrow;
    static void sk_ASN1_TYPE_sort(stack_st_ASN1_TYPE*) @nogc nothrow;
    static int sk_ASN1_TYPE_is_sorted(const(stack_st_ASN1_TYPE)*) @nogc nothrow;
    static stack_st_ASN1_TYPE* sk_ASN1_TYPE_dup(const(stack_st_ASN1_TYPE)*) @nogc nothrow;
    static stack_st_ASN1_TYPE* sk_ASN1_TYPE_deep_copy(const(stack_st_ASN1_TYPE)*, asn1_type_st* function(const(asn1_type_st)*), void function(asn1_type_st*)) @nogc nothrow;
    static int function(const(const(asn1_type_st)*)*, const(const(asn1_type_st)*)*) sk_ASN1_TYPE_set_cmp_func(stack_st_ASN1_TYPE*, int function(const(const(asn1_type_st)*)*, const(const(asn1_type_st)*)*)) @nogc nothrow;
    static void sk_ASN1_TYPE_pop_free(stack_st_ASN1_TYPE*, void function(asn1_type_st*)) @nogc nothrow;
    static asn1_type_st* sk_ASN1_TYPE_shift(stack_st_ASN1_TYPE*) @nogc nothrow;
    static asn1_type_st* sk_ASN1_TYPE_pop(stack_st_ASN1_TYPE*) @nogc nothrow;
    static int sk_ASN1_TYPE_unshift(stack_st_ASN1_TYPE*, asn1_type_st*) @nogc nothrow;
    static int sk_ASN1_TYPE_push(stack_st_ASN1_TYPE*, asn1_type_st*) @nogc nothrow;
    static asn1_type_st* sk_ASN1_TYPE_delete(stack_st_ASN1_TYPE*, int) @nogc nothrow;
    static asn1_type_st* sk_ASN1_TYPE_delete_ptr(stack_st_ASN1_TYPE*, asn1_type_st*) @nogc nothrow;
    static void sk_ASN1_TYPE_zero(stack_st_ASN1_TYPE*) @nogc nothrow;
    struct stack_st_ASN1_TYPE;
    alias sk_ASN1_TYPE_compfunc = int function(const(const(asn1_type_st)*)*, const(const(asn1_type_st)*)*);
    alias sk_ASN1_TYPE_freefunc = void function(asn1_type_st*);
    alias sk_ASN1_TYPE_copyfunc = asn1_type_st* function(const(asn1_type_st)*);
    static int sk_ASN1_TYPE_reserve(stack_st_ASN1_TYPE*, int) @nogc nothrow;
    static asn1_type_st* sk_ASN1_TYPE_value(const(stack_st_ASN1_TYPE)*, int) @nogc nothrow;
    static stack_st_ASN1_TYPE* sk_ASN1_TYPE_new(int function(const(const(asn1_type_st)*)*, const(const(asn1_type_st)*)*)) @nogc nothrow;
    static stack_st_ASN1_TYPE* sk_ASN1_TYPE_new_null() @nogc nothrow;
    static stack_st_ASN1_TYPE* sk_ASN1_TYPE_new_reserve(int function(const(const(asn1_type_st)*)*, const(const(asn1_type_st)*)*), int) @nogc nothrow;
    static int sk_ASN1_TYPE_num(const(stack_st_ASN1_TYPE)*) @nogc nothrow;
    alias ASN1_SEQUENCE_ANY = stack_st_ASN1_TYPE;
    int i2d_ASN1_SEQUENCE_ANY(const(stack_st_ASN1_TYPE)*, ubyte**) @nogc nothrow;
    extern __gshared const(ASN1_ITEM_st) ASN1_SEQUENCE_ANY_it;
    stack_st_ASN1_TYPE* d2i_ASN1_SEQUENCE_ANY(stack_st_ASN1_TYPE**, const(ubyte)**, c_long) @nogc nothrow;
    int i2d_ASN1_SET_ANY(const(stack_st_ASN1_TYPE)*, ubyte**) @nogc nothrow;
    extern __gshared const(ASN1_ITEM_st) ASN1_SET_ANY_it;
    stack_st_ASN1_TYPE* d2i_ASN1_SET_ANY(stack_st_ASN1_TYPE**, const(ubyte)**, c_long) @nogc nothrow;
    alias BIT_STRING_BITNAME = BIT_STRING_BITNAME_st;
    struct BIT_STRING_BITNAME_st
    {
        int bitnum;
        const(char)* lname;
        const(char)* sname;
    }
    void ASN1_TYPE_free(asn1_type_st*) @nogc nothrow;
    int i2d_ASN1_TYPE(asn1_type_st*, ubyte**) @nogc nothrow;
    extern __gshared const(ASN1_ITEM_st) ASN1_ANY_it;
    asn1_type_st* ASN1_TYPE_new() @nogc nothrow;
    asn1_type_st* d2i_ASN1_TYPE(asn1_type_st**, const(ubyte)**, c_long) @nogc nothrow;
    int ASN1_TYPE_get(const(asn1_type_st)*) @nogc nothrow;
    void ASN1_TYPE_set(asn1_type_st*, int, void*) @nogc nothrow;
    int ASN1_TYPE_set1(asn1_type_st*, int, const(void)*) @nogc nothrow;
    int ASN1_TYPE_cmp(const(asn1_type_st)*, const(asn1_type_st)*) @nogc nothrow;
    asn1_type_st* ASN1_TYPE_pack_sequence(const(ASN1_ITEM_st)*, void*, asn1_type_st**) @nogc nothrow;
    void* ASN1_TYPE_unpack_sequence(const(ASN1_ITEM_st)*, const(asn1_type_st)*) @nogc nothrow;
    asn1_object_st* ASN1_OBJECT_new() @nogc nothrow;
    void ASN1_OBJECT_free(asn1_object_st*) @nogc nothrow;
    int i2d_ASN1_OBJECT(const(asn1_object_st)*, ubyte**) @nogc nothrow;
    asn1_object_st* d2i_ASN1_OBJECT(asn1_object_st**, const(ubyte)**, c_long) @nogc nothrow;
    extern __gshared const(ASN1_ITEM_st) ASN1_OBJECT_it;
    static int sk_ASN1_OBJECT_reserve(stack_st_ASN1_OBJECT*, int) @nogc nothrow;
    static int function(const(const(asn1_object_st)*)*, const(const(asn1_object_st)*)*) sk_ASN1_OBJECT_set_cmp_func(stack_st_ASN1_OBJECT*, int function(const(const(asn1_object_st)*)*, const(const(asn1_object_st)*)*)) @nogc nothrow;
    static stack_st_ASN1_OBJECT* sk_ASN1_OBJECT_deep_copy(const(stack_st_ASN1_OBJECT)*, asn1_object_st* function(const(asn1_object_st)*), void function(asn1_object_st*)) @nogc nothrow;
    static stack_st_ASN1_OBJECT* sk_ASN1_OBJECT_dup(const(stack_st_ASN1_OBJECT)*) @nogc nothrow;
    static int sk_ASN1_OBJECT_is_sorted(const(stack_st_ASN1_OBJECT)*) @nogc nothrow;
    static void sk_ASN1_OBJECT_sort(stack_st_ASN1_OBJECT*) @nogc nothrow;
    static int sk_ASN1_OBJECT_find(stack_st_ASN1_OBJECT*, asn1_object_st*) @nogc nothrow;
    static asn1_object_st* sk_ASN1_OBJECT_set(stack_st_ASN1_OBJECT*, int, asn1_object_st*) @nogc nothrow;
    static int sk_ASN1_OBJECT_insert(stack_st_ASN1_OBJECT*, asn1_object_st*, int) @nogc nothrow;
    static void sk_ASN1_OBJECT_pop_free(stack_st_ASN1_OBJECT*, void function(asn1_object_st*)) @nogc nothrow;
    static asn1_object_st* sk_ASN1_OBJECT_shift(stack_st_ASN1_OBJECT*) @nogc nothrow;
    static asn1_object_st* sk_ASN1_OBJECT_pop(stack_st_ASN1_OBJECT*) @nogc nothrow;
    static int sk_ASN1_OBJECT_unshift(stack_st_ASN1_OBJECT*, asn1_object_st*) @nogc nothrow;
    static int sk_ASN1_OBJECT_find_ex(stack_st_ASN1_OBJECT*, asn1_object_st*) @nogc nothrow;
    struct stack_st_ASN1_OBJECT;
    static int sk_ASN1_OBJECT_push(stack_st_ASN1_OBJECT*, asn1_object_st*) @nogc nothrow;
    alias sk_ASN1_OBJECT_compfunc = int function(const(const(asn1_object_st)*)*, const(const(asn1_object_st)*)*);
    alias sk_ASN1_OBJECT_freefunc = void function(asn1_object_st*);
    alias sk_ASN1_OBJECT_copyfunc = asn1_object_st* function(const(asn1_object_st)*);
    static int sk_ASN1_OBJECT_num(const(stack_st_ASN1_OBJECT)*) @nogc nothrow;
    static asn1_object_st* sk_ASN1_OBJECT_value(const(stack_st_ASN1_OBJECT)*, int) @nogc nothrow;
    static stack_st_ASN1_OBJECT* sk_ASN1_OBJECT_new(int function(const(const(asn1_object_st)*)*, const(const(asn1_object_st)*)*)) @nogc nothrow;
    static stack_st_ASN1_OBJECT* sk_ASN1_OBJECT_new_null() @nogc nothrow;
    static stack_st_ASN1_OBJECT* sk_ASN1_OBJECT_new_reserve(int function(const(const(asn1_object_st)*)*, const(const(asn1_object_st)*)*), int) @nogc nothrow;
    static void sk_ASN1_OBJECT_free(stack_st_ASN1_OBJECT*) @nogc nothrow;
    static void sk_ASN1_OBJECT_zero(stack_st_ASN1_OBJECT*) @nogc nothrow;
    static asn1_object_st* sk_ASN1_OBJECT_delete(stack_st_ASN1_OBJECT*, int) @nogc nothrow;
    static asn1_object_st* sk_ASN1_OBJECT_delete_ptr(stack_st_ASN1_OBJECT*, asn1_object_st*) @nogc nothrow;
    asn1_string_st* ASN1_STRING_new() @nogc nothrow;
    void ASN1_STRING_free(asn1_string_st*) @nogc nothrow;
    void ASN1_STRING_clear_free(asn1_string_st*) @nogc nothrow;
    int ASN1_STRING_copy(asn1_string_st*, const(asn1_string_st)*) @nogc nothrow;
    asn1_string_st* ASN1_STRING_dup(const(asn1_string_st)*) @nogc nothrow;
    asn1_string_st* ASN1_STRING_type_new(int) @nogc nothrow;
    int ASN1_STRING_cmp(const(asn1_string_st)*, const(asn1_string_st)*) @nogc nothrow;
    int ASN1_STRING_set(asn1_string_st*, const(void)*, int) @nogc nothrow;
    void ASN1_STRING_set0(asn1_string_st*, void*, int) @nogc nothrow;
    int ASN1_STRING_length(const(asn1_string_st)*) @nogc nothrow;
    void ASN1_STRING_length_set(asn1_string_st*, int) @nogc nothrow;
    int ASN1_STRING_type(const(asn1_string_st)*) @nogc nothrow;
    ubyte* ASN1_STRING_data(asn1_string_st*) @nogc nothrow;
    const(ubyte)* ASN1_STRING_get0_data(const(asn1_string_st)*) @nogc nothrow;
    void ASN1_BIT_STRING_free(asn1_string_st*) @nogc nothrow;
    int i2d_ASN1_BIT_STRING(asn1_string_st*, ubyte**) @nogc nothrow;
    extern __gshared const(ASN1_ITEM_st) ASN1_BIT_STRING_it;
    asn1_string_st* ASN1_BIT_STRING_new() @nogc nothrow;
    asn1_string_st* d2i_ASN1_BIT_STRING(asn1_string_st**, const(ubyte)**, c_long) @nogc nothrow;
    int ASN1_BIT_STRING_set(asn1_string_st*, ubyte*, int) @nogc nothrow;
    int ASN1_BIT_STRING_set_bit(asn1_string_st*, int, int) @nogc nothrow;
    int ASN1_BIT_STRING_get_bit(const(asn1_string_st)*, int) @nogc nothrow;
    int ASN1_BIT_STRING_check(const(asn1_string_st)*, const(ubyte)*, int) @nogc nothrow;
    int ASN1_BIT_STRING_name_print(bio_st*, asn1_string_st*, BIT_STRING_BITNAME_st*, int) @nogc nothrow;
    int ASN1_BIT_STRING_num_asc(const(char)*, BIT_STRING_BITNAME_st*) @nogc nothrow;
    int ASN1_BIT_STRING_set_asc(asn1_string_st*, const(char)*, int, BIT_STRING_BITNAME_st*) @nogc nothrow;
    void ASN1_INTEGER_free(asn1_string_st*) @nogc nothrow;
    int i2d_ASN1_INTEGER(asn1_string_st*, ubyte**) @nogc nothrow;
    extern __gshared const(ASN1_ITEM_st) ASN1_INTEGER_it;
    asn1_string_st* ASN1_INTEGER_new() @nogc nothrow;
    asn1_string_st* d2i_ASN1_INTEGER(asn1_string_st**, const(ubyte)**, c_long) @nogc nothrow;
    asn1_string_st* d2i_ASN1_UINTEGER(asn1_string_st**, const(ubyte)**, c_long) @nogc nothrow;
    asn1_string_st* ASN1_INTEGER_dup(const(asn1_string_st)*) @nogc nothrow;
    int ASN1_INTEGER_cmp(const(asn1_string_st)*, const(asn1_string_st)*) @nogc nothrow;
    void ASN1_ENUMERATED_free(asn1_string_st*) @nogc nothrow;
    int i2d_ASN1_ENUMERATED(asn1_string_st*, ubyte**) @nogc nothrow;
    extern __gshared const(ASN1_ITEM_st) ASN1_ENUMERATED_it;
    asn1_string_st* d2i_ASN1_ENUMERATED(asn1_string_st**, const(ubyte)**, c_long) @nogc nothrow;
    asn1_string_st* ASN1_ENUMERATED_new() @nogc nothrow;
    int ASN1_UTCTIME_check(const(asn1_string_st)*) @nogc nothrow;
    asn1_string_st* ASN1_UTCTIME_set(asn1_string_st*, c_long) @nogc nothrow;
    asn1_string_st* ASN1_UTCTIME_adj(asn1_string_st*, c_long, int, c_long) @nogc nothrow;
    int ASN1_UTCTIME_set_string(asn1_string_st*, const(char)*) @nogc nothrow;
    int ASN1_UTCTIME_cmp_time_t(const(asn1_string_st)*, c_long) @nogc nothrow;
    int ASN1_GENERALIZEDTIME_check(const(asn1_string_st)*) @nogc nothrow;
    asn1_string_st* ASN1_GENERALIZEDTIME_set(asn1_string_st*, c_long) @nogc nothrow;
    asn1_string_st* ASN1_GENERALIZEDTIME_adj(asn1_string_st*, c_long, int, c_long) @nogc nothrow;
    int ASN1_GENERALIZEDTIME_set_string(asn1_string_st*, const(char)*) @nogc nothrow;
    int ASN1_TIME_diff(int*, int*, const(asn1_string_st)*, const(asn1_string_st)*) @nogc nothrow;
    int i2d_ASN1_OCTET_STRING(asn1_string_st*, ubyte**) @nogc nothrow;
    extern __gshared const(ASN1_ITEM_st) ASN1_OCTET_STRING_it;
    void ASN1_OCTET_STRING_free(asn1_string_st*) @nogc nothrow;
    asn1_string_st* d2i_ASN1_OCTET_STRING(asn1_string_st**, const(ubyte)**, c_long) @nogc nothrow;
    asn1_string_st* ASN1_OCTET_STRING_new() @nogc nothrow;
    asn1_string_st* ASN1_OCTET_STRING_dup(const(asn1_string_st)*) @nogc nothrow;
    int ASN1_OCTET_STRING_cmp(const(asn1_string_st)*, const(asn1_string_st)*) @nogc nothrow;
    int ASN1_OCTET_STRING_set(asn1_string_st*, const(ubyte)*, int) @nogc nothrow;
    extern __gshared const(ASN1_ITEM_st) ASN1_VISIBLESTRING_it;
    int i2d_ASN1_VISIBLESTRING(asn1_string_st*, ubyte**) @nogc nothrow;
    void ASN1_VISIBLESTRING_free(asn1_string_st*) @nogc nothrow;
    asn1_string_st* d2i_ASN1_VISIBLESTRING(asn1_string_st**, const(ubyte)**, c_long) @nogc nothrow;
    asn1_string_st* ASN1_VISIBLESTRING_new() @nogc nothrow;
    void ASN1_UNIVERSALSTRING_free(asn1_string_st*) @nogc nothrow;
    int i2d_ASN1_UNIVERSALSTRING(asn1_string_st*, ubyte**) @nogc nothrow;
    extern __gshared const(ASN1_ITEM_st) ASN1_UNIVERSALSTRING_it;
    asn1_string_st* d2i_ASN1_UNIVERSALSTRING(asn1_string_st**, const(ubyte)**, c_long) @nogc nothrow;
    asn1_string_st* ASN1_UNIVERSALSTRING_new() @nogc nothrow;
    void ASN1_UTF8STRING_free(asn1_string_st*) @nogc nothrow;
    int i2d_ASN1_UTF8STRING(asn1_string_st*, ubyte**) @nogc nothrow;
    extern __gshared const(ASN1_ITEM_st) ASN1_UTF8STRING_it;
    asn1_string_st* ASN1_UTF8STRING_new() @nogc nothrow;
    asn1_string_st* d2i_ASN1_UTF8STRING(asn1_string_st**, const(ubyte)**, c_long) @nogc nothrow;
    void ASN1_NULL_free(int*) @nogc nothrow;
    int i2d_ASN1_NULL(int*, ubyte**) @nogc nothrow;
    extern __gshared const(ASN1_ITEM_st) ASN1_NULL_it;
    int* ASN1_NULL_new() @nogc nothrow;
    int* d2i_ASN1_NULL(int**, const(ubyte)**, c_long) @nogc nothrow;
    void ASN1_BMPSTRING_free(asn1_string_st*) @nogc nothrow;
    int i2d_ASN1_BMPSTRING(asn1_string_st*, ubyte**) @nogc nothrow;
    extern __gshared const(ASN1_ITEM_st) ASN1_BMPSTRING_it;
    asn1_string_st* d2i_ASN1_BMPSTRING(asn1_string_st**, const(ubyte)**, c_long) @nogc nothrow;
    asn1_string_st* ASN1_BMPSTRING_new() @nogc nothrow;
    int UTF8_getc(const(ubyte)*, int, c_ulong*) @nogc nothrow;
    int UTF8_putc(ubyte*, int, c_ulong) @nogc nothrow;
    void ASN1_PRINTABLE_free(asn1_string_st*) @nogc nothrow;
    int i2d_ASN1_PRINTABLE(asn1_string_st*, ubyte**) @nogc nothrow;
    extern __gshared const(ASN1_ITEM_st) ASN1_PRINTABLE_it;
    asn1_string_st* ASN1_PRINTABLE_new() @nogc nothrow;
    asn1_string_st* d2i_ASN1_PRINTABLE(asn1_string_st**, const(ubyte)**, c_long) @nogc nothrow;
    extern __gshared const(ASN1_ITEM_st) DIRECTORYSTRING_it;
    void DIRECTORYSTRING_free(asn1_string_st*) @nogc nothrow;
    int i2d_DIRECTORYSTRING(asn1_string_st*, ubyte**) @nogc nothrow;
    asn1_string_st* d2i_DIRECTORYSTRING(asn1_string_st**, const(ubyte)**, c_long) @nogc nothrow;
    asn1_string_st* DIRECTORYSTRING_new() @nogc nothrow;
    void DISPLAYTEXT_free(asn1_string_st*) @nogc nothrow;
    int i2d_DISPLAYTEXT(asn1_string_st*, ubyte**) @nogc nothrow;
    extern __gshared const(ASN1_ITEM_st) DISPLAYTEXT_it;
    asn1_string_st* DISPLAYTEXT_new() @nogc nothrow;
    asn1_string_st* d2i_DISPLAYTEXT(asn1_string_st**, const(ubyte)**, c_long) @nogc nothrow;
    void ASN1_PRINTABLESTRING_free(asn1_string_st*) @nogc nothrow;
    int i2d_ASN1_PRINTABLESTRING(asn1_string_st*, ubyte**) @nogc nothrow;
    extern __gshared const(ASN1_ITEM_st) ASN1_PRINTABLESTRING_it;
    asn1_string_st* ASN1_PRINTABLESTRING_new() @nogc nothrow;
    asn1_string_st* d2i_ASN1_PRINTABLESTRING(asn1_string_st**, const(ubyte)**, c_long) @nogc nothrow;
    extern __gshared const(ASN1_ITEM_st) ASN1_T61STRING_it;
    int i2d_ASN1_T61STRING(asn1_string_st*, ubyte**) @nogc nothrow;
    void ASN1_T61STRING_free(asn1_string_st*) @nogc nothrow;
    asn1_string_st* d2i_ASN1_T61STRING(asn1_string_st**, const(ubyte)**, c_long) @nogc nothrow;
    asn1_string_st* ASN1_T61STRING_new() @nogc nothrow;
    int i2d_ASN1_IA5STRING(asn1_string_st*, ubyte**) @nogc nothrow;
    void ASN1_IA5STRING_free(asn1_string_st*) @nogc nothrow;
    extern __gshared const(ASN1_ITEM_st) ASN1_IA5STRING_it;
    asn1_string_st* ASN1_IA5STRING_new() @nogc nothrow;
    asn1_string_st* d2i_ASN1_IA5STRING(asn1_string_st**, const(ubyte)**, c_long) @nogc nothrow;
    extern __gshared const(ASN1_ITEM_st) ASN1_GENERALSTRING_it;
    int i2d_ASN1_GENERALSTRING(asn1_string_st*, ubyte**) @nogc nothrow;
    void ASN1_GENERALSTRING_free(asn1_string_st*) @nogc nothrow;
    asn1_string_st* d2i_ASN1_GENERALSTRING(asn1_string_st**, const(ubyte)**, c_long) @nogc nothrow;
    asn1_string_st* ASN1_GENERALSTRING_new() @nogc nothrow;
    void ASN1_UTCTIME_free(asn1_string_st*) @nogc nothrow;
    int i2d_ASN1_UTCTIME(asn1_string_st*, ubyte**) @nogc nothrow;
    extern __gshared const(ASN1_ITEM_st) ASN1_UTCTIME_it;
    asn1_string_st* ASN1_UTCTIME_new() @nogc nothrow;
    asn1_string_st* d2i_ASN1_UTCTIME(asn1_string_st**, const(ubyte)**, c_long) @nogc nothrow;
    void ASN1_GENERALIZEDTIME_free(asn1_string_st*) @nogc nothrow;
    int i2d_ASN1_GENERALIZEDTIME(asn1_string_st*, ubyte**) @nogc nothrow;
    extern __gshared const(ASN1_ITEM_st) ASN1_GENERALIZEDTIME_it;
    asn1_string_st* ASN1_GENERALIZEDTIME_new() @nogc nothrow;
    asn1_string_st* d2i_ASN1_GENERALIZEDTIME(asn1_string_st**, const(ubyte)**, c_long) @nogc nothrow;
    int i2d_ASN1_TIME(asn1_string_st*, ubyte**) @nogc nothrow;
    extern __gshared const(ASN1_ITEM_st) ASN1_TIME_it;
    void ASN1_TIME_free(asn1_string_st*) @nogc nothrow;
    asn1_string_st* d2i_ASN1_TIME(asn1_string_st**, const(ubyte)**, c_long) @nogc nothrow;
    asn1_string_st* ASN1_TIME_new() @nogc nothrow;
    extern __gshared const(ASN1_ITEM_st) ASN1_OCTET_STRING_NDEF_it;
    asn1_string_st* ASN1_TIME_set(asn1_string_st*, c_long) @nogc nothrow;
    asn1_string_st* ASN1_TIME_adj(asn1_string_st*, c_long, int, c_long) @nogc nothrow;
    int ASN1_TIME_check(const(asn1_string_st)*) @nogc nothrow;
    asn1_string_st* ASN1_TIME_to_generalizedtime(const(asn1_string_st)*, asn1_string_st**) @nogc nothrow;
    int ASN1_TIME_set_string(asn1_string_st*, const(char)*) @nogc nothrow;
    int ASN1_TIME_set_string_X509(asn1_string_st*, const(char)*) @nogc nothrow;
    int ASN1_TIME_to_tm(const(asn1_string_st)*, tm*) @nogc nothrow;
    int ASN1_TIME_normalize(asn1_string_st*) @nogc nothrow;
    int ASN1_TIME_cmp_time_t(const(asn1_string_st)*, c_long) @nogc nothrow;
    int ASN1_TIME_compare(const(asn1_string_st)*, const(asn1_string_st)*) @nogc nothrow;
    int i2a_ASN1_INTEGER(bio_st*, const(asn1_string_st)*) @nogc nothrow;
    int a2i_ASN1_INTEGER(bio_st*, asn1_string_st*, char*, int) @nogc nothrow;
    int i2a_ASN1_ENUMERATED(bio_st*, const(asn1_string_st)*) @nogc nothrow;
    int a2i_ASN1_ENUMERATED(bio_st*, asn1_string_st*, char*, int) @nogc nothrow;
    int i2a_ASN1_OBJECT(bio_st*, const(asn1_object_st)*) @nogc nothrow;
    int a2i_ASN1_STRING(bio_st*, asn1_string_st*, char*, int) @nogc nothrow;
    int i2a_ASN1_STRING(bio_st*, const(asn1_string_st)*, int) @nogc nothrow;
    int i2t_ASN1_OBJECT(char*, int, const(asn1_object_st)*) @nogc nothrow;
    int a2d_ASN1_OBJECT(ubyte*, int, const(char)*, int) @nogc nothrow;
    asn1_object_st* ASN1_OBJECT_create(int, ubyte*, int, const(char)*, const(char)*) @nogc nothrow;
    int ASN1_INTEGER_get_int64(c_long*, const(asn1_string_st)*) @nogc nothrow;
    int ASN1_INTEGER_set_int64(asn1_string_st*, c_long) @nogc nothrow;
    int ASN1_INTEGER_get_uint64(c_ulong*, const(asn1_string_st)*) @nogc nothrow;
    int ASN1_INTEGER_set_uint64(asn1_string_st*, c_ulong) @nogc nothrow;
    int ASN1_INTEGER_set(asn1_string_st*, c_long) @nogc nothrow;
    c_long ASN1_INTEGER_get(const(asn1_string_st)*) @nogc nothrow;
    asn1_string_st* BN_to_ASN1_INTEGER(const(bignum_st)*, asn1_string_st*) @nogc nothrow;
    bignum_st* ASN1_INTEGER_to_BN(const(asn1_string_st)*, bignum_st*) @nogc nothrow;
    int ASN1_ENUMERATED_get_int64(c_long*, const(asn1_string_st)*) @nogc nothrow;
    int ASN1_ENUMERATED_set_int64(asn1_string_st*, c_long) @nogc nothrow;
    int ASN1_ENUMERATED_set(asn1_string_st*, c_long) @nogc nothrow;
    c_long ASN1_ENUMERATED_get(const(asn1_string_st)*) @nogc nothrow;
    asn1_string_st* BN_to_ASN1_ENUMERATED(const(bignum_st)*, asn1_string_st*) @nogc nothrow;
    bignum_st* ASN1_ENUMERATED_to_BN(const(asn1_string_st)*, bignum_st*) @nogc nothrow;
    int ASN1_PRINTABLE_type(const(ubyte)*, int) @nogc nothrow;
    c_ulong ASN1_tag2bit(int) @nogc nothrow;
    int ASN1_get_object(const(ubyte)**, c_long*, int*, int*, c_long) @nogc nothrow;
    int ASN1_check_infinite_end(ubyte**, c_long) @nogc nothrow;
    int ASN1_const_check_infinite_end(const(ubyte)**, c_long) @nogc nothrow;
    void ASN1_put_object(ubyte**, int, int, int, int) @nogc nothrow;
    int ASN1_put_eoc(ubyte**) @nogc nothrow;
    int ASN1_object_size(int, int, int) @nogc nothrow;
    void* ASN1_dup(int function(void*, ubyte**), void* function(void**, const(ubyte)**, c_long), void*) @nogc nothrow;
    void* ASN1_item_dup(const(ASN1_ITEM_st)*, void*) @nogc nothrow;
    void* ASN1_d2i_fp(void* function(), void* function(void**, const(ubyte)**, c_long), _IO_FILE*, void**) @nogc nothrow;
    void* ASN1_item_d2i_fp(const(ASN1_ITEM_st)*, _IO_FILE*, void*) @nogc nothrow;
    int ASN1_i2d_fp(int function(void*, ubyte**), _IO_FILE*, void*) @nogc nothrow;
    int ASN1_item_i2d_fp(const(ASN1_ITEM_st)*, _IO_FILE*, void*) @nogc nothrow;
    int ASN1_STRING_print_ex_fp(_IO_FILE*, const(asn1_string_st)*, c_ulong) @nogc nothrow;
    int ASN1_STRING_to_UTF8(ubyte**, const(asn1_string_st)*) @nogc nothrow;
    void* ASN1_d2i_bio(void* function(), void* function(void**, const(ubyte)**, c_long), bio_st*, void**) @nogc nothrow;
    void* ASN1_item_d2i_bio(const(ASN1_ITEM_st)*, bio_st*, void*) @nogc nothrow;
    int ASN1_i2d_bio(int function(void*, ubyte**), bio_st*, ubyte*) @nogc nothrow;
    int ASN1_item_i2d_bio(const(ASN1_ITEM_st)*, bio_st*, void*) @nogc nothrow;
    int ASN1_UTCTIME_print(bio_st*, const(asn1_string_st)*) @nogc nothrow;
    int ASN1_GENERALIZEDTIME_print(bio_st*, const(asn1_string_st)*) @nogc nothrow;
    int ASN1_TIME_print(bio_st*, const(asn1_string_st)*) @nogc nothrow;
    int ASN1_STRING_print(bio_st*, const(asn1_string_st)*) @nogc nothrow;
    int ASN1_STRING_print_ex(bio_st*, const(asn1_string_st)*, c_ulong) @nogc nothrow;
    int ASN1_buf_print(bio_st*, const(ubyte)*, c_ulong, int) @nogc nothrow;
    int ASN1_bn_print(bio_st*, const(char)*, const(bignum_st)*, ubyte*, int) @nogc nothrow;
    int ASN1_parse(bio_st*, const(ubyte)*, c_long, int) @nogc nothrow;
    int ASN1_parse_dump(bio_st*, const(ubyte)*, c_long, int, int) @nogc nothrow;
    const(char)* ASN1_tag2str(int) @nogc nothrow;
    int ASN1_UNIVERSALSTRING_to_string(asn1_string_st*) @nogc nothrow;
    int ASN1_TYPE_set_octetstring(asn1_type_st*, ubyte*, int) @nogc nothrow;
    int ASN1_TYPE_get_octetstring(const(asn1_type_st)*, ubyte*, int) @nogc nothrow;
    int ASN1_TYPE_set_int_octetstring(asn1_type_st*, c_long, ubyte*, int) @nogc nothrow;
    int ASN1_TYPE_get_int_octetstring(const(asn1_type_st)*, c_long*, ubyte*, int) @nogc nothrow;
    void* ASN1_item_unpack(const(asn1_string_st)*, const(ASN1_ITEM_st)*) @nogc nothrow;
    asn1_string_st* ASN1_item_pack(void*, const(ASN1_ITEM_st)*, asn1_string_st**) @nogc nothrow;
    void ASN1_STRING_set_default_mask(c_ulong) @nogc nothrow;
    int ASN1_STRING_set_default_mask_asc(const(char)*) @nogc nothrow;
    c_ulong ASN1_STRING_get_default_mask() @nogc nothrow;
    int ASN1_mbstring_copy(asn1_string_st**, const(ubyte)*, int, int, c_ulong) @nogc nothrow;
    int ASN1_mbstring_ncopy(asn1_string_st**, const(ubyte)*, int, int, c_ulong, c_long, c_long) @nogc nothrow;
    asn1_string_st* ASN1_STRING_set_by_NID(asn1_string_st**, const(ubyte)*, int, int, int) @nogc nothrow;
    asn1_string_table_st* ASN1_STRING_TABLE_get(int) @nogc nothrow;
    int ASN1_STRING_TABLE_add(int, c_long, c_long, c_ulong, c_ulong) @nogc nothrow;
    void ASN1_STRING_TABLE_cleanup() @nogc nothrow;
    ASN1_VALUE_st* ASN1_item_new(const(ASN1_ITEM_st)*) @nogc nothrow;
    void ASN1_item_free(ASN1_VALUE_st*, const(ASN1_ITEM_st)*) @nogc nothrow;
    ASN1_VALUE_st* ASN1_item_d2i(ASN1_VALUE_st**, const(ubyte)**, c_long, const(ASN1_ITEM_st)*) @nogc nothrow;
    int ASN1_item_i2d(ASN1_VALUE_st*, ubyte**, const(ASN1_ITEM_st)*) @nogc nothrow;
    int ASN1_item_ndef_i2d(ASN1_VALUE_st*, ubyte**, const(ASN1_ITEM_st)*) @nogc nothrow;
    void ASN1_add_oid_module() @nogc nothrow;
    void ASN1_add_stable_module() @nogc nothrow;
    asn1_type_st* ASN1_generate_nconf(const(char)*, conf_st*) @nogc nothrow;
    asn1_type_st* ASN1_generate_v3(const(char)*, v3_ext_ctx*) @nogc nothrow;
    int ASN1_str2mask(const(char)*, c_ulong*) @nogc nothrow;
    int ASN1_item_print(bio_st*, ASN1_VALUE_st*, int, const(ASN1_ITEM_st)*, const(asn1_pctx_st)*) @nogc nothrow;
    asn1_pctx_st* ASN1_PCTX_new() @nogc nothrow;
    void ASN1_PCTX_free(asn1_pctx_st*) @nogc nothrow;
    c_ulong ASN1_PCTX_get_flags(const(asn1_pctx_st)*) @nogc nothrow;
    void ASN1_PCTX_set_flags(asn1_pctx_st*, c_ulong) @nogc nothrow;
    c_ulong ASN1_PCTX_get_nm_flags(const(asn1_pctx_st)*) @nogc nothrow;
    void ASN1_PCTX_set_nm_flags(asn1_pctx_st*, c_ulong) @nogc nothrow;
    c_ulong ASN1_PCTX_get_cert_flags(const(asn1_pctx_st)*) @nogc nothrow;
    void ASN1_PCTX_set_cert_flags(asn1_pctx_st*, c_ulong) @nogc nothrow;
    c_ulong ASN1_PCTX_get_oid_flags(const(asn1_pctx_st)*) @nogc nothrow;
    void ASN1_PCTX_set_oid_flags(asn1_pctx_st*, c_ulong) @nogc nothrow;
    c_ulong ASN1_PCTX_get_str_flags(const(asn1_pctx_st)*) @nogc nothrow;
    void ASN1_PCTX_set_str_flags(asn1_pctx_st*, c_ulong) @nogc nothrow;
    asn1_sctx_st* ASN1_SCTX_new(int function(asn1_sctx_st*)) @nogc nothrow;
    void ASN1_SCTX_free(asn1_sctx_st*) @nogc nothrow;
    const(ASN1_ITEM_st)* ASN1_SCTX_get_item(asn1_sctx_st*) @nogc nothrow;
    const(ASN1_TEMPLATE_st)* ASN1_SCTX_get_template(asn1_sctx_st*) @nogc nothrow;
    c_ulong ASN1_SCTX_get_flags(asn1_sctx_st*) @nogc nothrow;
    void ASN1_SCTX_set_app_data(asn1_sctx_st*, void*) @nogc nothrow;
    void* ASN1_SCTX_get_app_data(asn1_sctx_st*) @nogc nothrow;
    const(bio_method_st)* BIO_f_asn1() @nogc nothrow;
    bio_st* BIO_new_NDEF(bio_st*, ASN1_VALUE_st*, const(ASN1_ITEM_st)*) @nogc nothrow;
    int i2d_ASN1_bio_stream(bio_st*, ASN1_VALUE_st*, bio_st*, int, const(ASN1_ITEM_st)*) @nogc nothrow;
    int PEM_write_bio_ASN1_stream(bio_st*, ASN1_VALUE_st*, bio_st*, int, const(char)*, const(ASN1_ITEM_st)*) @nogc nothrow;
    int SMIME_write_ASN1(bio_st*, ASN1_VALUE_st*, bio_st*, int, int, int, stack_st_X509_ALGOR*, const(ASN1_ITEM_st)*) @nogc nothrow;
    ASN1_VALUE_st* SMIME_read_ASN1(bio_st*, bio_st**, const(ASN1_ITEM_st)*) @nogc nothrow;
    int SMIME_crlf_copy(bio_st*, bio_st*, int) @nogc nothrow;
    int SMIME_text(bio_st*, bio_st*) @nogc nothrow;
    const(ASN1_ITEM_st)* ASN1_ITEM_lookup(const(char)*) @nogc nothrow;
    const(ASN1_ITEM_st)* ASN1_ITEM_get(c_ulong) @nogc nothrow;
    int ERR_load_ASN1_strings() @nogc nothrow;
    alias BIO_ADDR = bio_addr_st;
    union bio_addr_st;
    alias BIO_ADDRINFO = bio_addrinfo_st;
    struct bio_addrinfo_st;
    int BIO_get_new_index() @nogc nothrow;
    void BIO_set_flags(bio_st*, int) @nogc nothrow;
    int BIO_test_flags(const(bio_st)*, int) @nogc nothrow;
    void BIO_clear_flags(bio_st*, int) @nogc nothrow;
    alias BIO_callback_fn = c_long function(bio_st*, int, const(char)*, int, c_long, c_long);
    alias BIO_callback_fn_ex = c_long function(bio_st*, int, const(char)*, c_ulong, int, c_long, int, c_ulong*);
    c_long function(bio_st*, int, const(char)*, int, c_long, c_long) BIO_get_callback(const(bio_st)*) @nogc nothrow;
    void BIO_set_callback(bio_st*, c_long function(bio_st*, int, const(char)*, int, c_long, c_long)) @nogc nothrow;
    c_long function(bio_st*, int, const(char)*, c_ulong, int, c_long, int, c_ulong*) BIO_get_callback_ex(const(bio_st)*) @nogc nothrow;
    void BIO_set_callback_ex(bio_st*, c_long function(bio_st*, int, const(char)*, c_ulong, int, c_long, int, c_ulong*)) @nogc nothrow;
    char* BIO_get_callback_arg(const(bio_st)*) @nogc nothrow;
    void BIO_set_callback_arg(bio_st*, char*) @nogc nothrow;
    alias BIO_METHOD = bio_method_st;
    struct bio_method_st
    {
        int type;
        const(char)* name;
        int function(bio_st*, const(char)*, int) bwrite;
        int function(bio_st*, char*, int) bread;
        int function(bio_st*, const(char)*) bputs;
        int function(bio_st*, char*, int) bgets;
        c_long function(bio_st*, int, c_long, void*) ctrl;
        int function(bio_st*) create;
        int function(bio_st*) destroy;
        c_long function(bio_st*, int, int function(bio_st*, int, int)) callback_ctrl;
    }
    const(char)* BIO_method_name(const(bio_st)*) @nogc nothrow;
    int BIO_method_type(const(bio_st)*) @nogc nothrow;
    alias BIO_info_cb = int function(bio_st*, int, int);
    alias bio_info_cb = int function(bio_st*, int, int);
    static int function(const(const(bio_st)*)*, const(const(bio_st)*)*) sk_BIO_set_cmp_func(stack_st_BIO*, int function(const(const(bio_st)*)*, const(const(bio_st)*)*)) @nogc nothrow;
    static stack_st_BIO* sk_BIO_deep_copy(const(stack_st_BIO)*, bio_st* function(const(bio_st)*), void function(bio_st*)) @nogc nothrow;
    static stack_st_BIO* sk_BIO_dup(const(stack_st_BIO)*) @nogc nothrow;
    static int sk_BIO_is_sorted(const(stack_st_BIO)*) @nogc nothrow;
    static void sk_BIO_sort(stack_st_BIO*) @nogc nothrow;
    static int sk_BIO_find_ex(stack_st_BIO*, bio_st*) @nogc nothrow;
    static bio_st* sk_BIO_set(stack_st_BIO*, int, bio_st*) @nogc nothrow;
    static int sk_BIO_insert(stack_st_BIO*, bio_st*, int) @nogc nothrow;
    static void sk_BIO_pop_free(stack_st_BIO*, void function(bio_st*)) @nogc nothrow;
    static bio_st* sk_BIO_shift(stack_st_BIO*) @nogc nothrow;
    static bio_st* sk_BIO_pop(stack_st_BIO*) @nogc nothrow;
    static int sk_BIO_unshift(stack_st_BIO*, bio_st*) @nogc nothrow;
    static int sk_BIO_push(stack_st_BIO*, bio_st*) @nogc nothrow;
    static int sk_BIO_find(stack_st_BIO*, bio_st*) @nogc nothrow;
    static bio_st* sk_BIO_delete(stack_st_BIO*, int) @nogc nothrow;
    static void sk_BIO_zero(stack_st_BIO*) @nogc nothrow;
    static void sk_BIO_free(stack_st_BIO*) @nogc nothrow;
    static int sk_BIO_reserve(stack_st_BIO*, int) @nogc nothrow;
    static stack_st_BIO* sk_BIO_new_reserve(int function(const(const(bio_st)*)*, const(const(bio_st)*)*), int) @nogc nothrow;
    static stack_st_BIO* sk_BIO_new_null() @nogc nothrow;
    static stack_st_BIO* sk_BIO_new(int function(const(const(bio_st)*)*, const(const(bio_st)*)*)) @nogc nothrow;
    static bio_st* sk_BIO_value(const(stack_st_BIO)*, int) @nogc nothrow;
    static int sk_BIO_num(const(stack_st_BIO)*) @nogc nothrow;
    alias sk_BIO_copyfunc = bio_st* function(const(bio_st)*);
    alias sk_BIO_freefunc = void function(bio_st*);
    alias sk_BIO_compfunc = int function(const(const(bio_st)*)*, const(const(bio_st)*)*);
    struct stack_st_BIO;
    static bio_st* sk_BIO_delete_ptr(stack_st_BIO*, bio_st*) @nogc nothrow;
    alias asn1_ps_func = int function(bio_st*, ubyte**, int*, void*);
    c_ulong BIO_ctrl_pending(bio_st*) @nogc nothrow;
    c_ulong BIO_ctrl_wpending(bio_st*) @nogc nothrow;
    c_ulong BIO_ctrl_get_write_guarantee(bio_st*) @nogc nothrow;
    c_ulong BIO_ctrl_get_read_request(bio_st*) @nogc nothrow;
    int BIO_ctrl_reset_read_request(bio_st*) @nogc nothrow;
    int BIO_set_ex_data(bio_st*, int, void*) @nogc nothrow;
    void* BIO_get_ex_data(bio_st*, int) @nogc nothrow;
    c_ulong BIO_number_read(bio_st*) @nogc nothrow;
    c_ulong BIO_number_written(bio_st*) @nogc nothrow;
    int BIO_asn1_set_prefix(bio_st*, int function(bio_st*, ubyte**, int*, void*), int function(bio_st*, ubyte**, int*, void*)) @nogc nothrow;
    int BIO_asn1_get_prefix(bio_st*, int function(bio_st*, ubyte**, int*, void*)*, int function(bio_st*, ubyte**, int*, void*)*) @nogc nothrow;
    int BIO_asn1_set_suffix(bio_st*, int function(bio_st*, ubyte**, int*, void*), int function(bio_st*, ubyte**, int*, void*)) @nogc nothrow;
    int BIO_asn1_get_suffix(bio_st*, int function(bio_st*, ubyte**, int*, void*)*, int function(bio_st*, ubyte**, int*, void*)*) @nogc nothrow;
    const(bio_method_st)* BIO_s_file() @nogc nothrow;
    bio_st* BIO_new_file(const(char)*, const(char)*) @nogc nothrow;
    bio_st* BIO_new_fp(_IO_FILE*, int) @nogc nothrow;
    bio_st* BIO_new(const(bio_method_st)*) @nogc nothrow;
    int BIO_free(bio_st*) @nogc nothrow;
    void BIO_set_data(bio_st*, void*) @nogc nothrow;
    void* BIO_get_data(bio_st*) @nogc nothrow;
    void BIO_set_init(bio_st*, int) @nogc nothrow;
    int BIO_get_init(bio_st*) @nogc nothrow;
    void BIO_set_shutdown(bio_st*, int) @nogc nothrow;
    int BIO_get_shutdown(bio_st*) @nogc nothrow;
    void BIO_vfree(bio_st*) @nogc nothrow;
    int BIO_up_ref(bio_st*) @nogc nothrow;
    int BIO_read(bio_st*, void*, int) @nogc nothrow;
    int BIO_read_ex(bio_st*, void*, c_ulong, c_ulong*) @nogc nothrow;
    int BIO_gets(bio_st*, char*, int) @nogc nothrow;
    int BIO_write(bio_st*, const(void)*, int) @nogc nothrow;
    int BIO_write_ex(bio_st*, const(void)*, c_ulong, c_ulong*) @nogc nothrow;
    int BIO_puts(bio_st*, const(char)*) @nogc nothrow;
    int BIO_indent(bio_st*, int, int) @nogc nothrow;
    c_long BIO_ctrl(bio_st*, int, c_long, void*) @nogc nothrow;
    c_long BIO_callback_ctrl(bio_st*, int, int function(bio_st*, int, int)) @nogc nothrow;
    void* BIO_ptr_ctrl(bio_st*, int, c_long) @nogc nothrow;
    c_long BIO_int_ctrl(bio_st*, int, c_long, int) @nogc nothrow;
    bio_st* BIO_push(bio_st*, bio_st*) @nogc nothrow;
    bio_st* BIO_pop(bio_st*) @nogc nothrow;
    void BIO_free_all(bio_st*) @nogc nothrow;
    bio_st* BIO_find_type(bio_st*, int) @nogc nothrow;
    bio_st* BIO_next(bio_st*) @nogc nothrow;
    void BIO_set_next(bio_st*, bio_st*) @nogc nothrow;
    bio_st* BIO_get_retry_BIO(bio_st*, int*) @nogc nothrow;
    int BIO_get_retry_reason(bio_st*) @nogc nothrow;
    void BIO_set_retry_reason(bio_st*, int) @nogc nothrow;
    bio_st* BIO_dup_chain(bio_st*) @nogc nothrow;
    int BIO_nread0(bio_st*, char**) @nogc nothrow;
    int BIO_nread(bio_st*, char**, int) @nogc nothrow;
    int BIO_nwrite0(bio_st*, char**) @nogc nothrow;
    int BIO_nwrite(bio_st*, char**, int) @nogc nothrow;
    c_long BIO_debug_callback(bio_st*, int, const(char)*, int, c_long, c_long) @nogc nothrow;
    const(bio_method_st)* BIO_s_mem() @nogc nothrow;
    const(bio_method_st)* BIO_s_secmem() @nogc nothrow;
    bio_st* BIO_new_mem_buf(const(void)*, int) @nogc nothrow;
    const(bio_method_st)* BIO_s_socket() @nogc nothrow;
    const(bio_method_st)* BIO_s_connect() @nogc nothrow;
    const(bio_method_st)* BIO_s_accept() @nogc nothrow;
    const(bio_method_st)* BIO_s_fd() @nogc nothrow;
    const(bio_method_st)* BIO_s_log() @nogc nothrow;
    const(bio_method_st)* BIO_s_bio() @nogc nothrow;
    const(bio_method_st)* BIO_s_null() @nogc nothrow;
    const(bio_method_st)* BIO_f_null() @nogc nothrow;
    const(bio_method_st)* BIO_f_buffer() @nogc nothrow;
    const(bio_method_st)* BIO_f_linebuffer() @nogc nothrow;
    const(bio_method_st)* BIO_f_nbio_test() @nogc nothrow;
    const(bio_method_st)* BIO_s_datagram() @nogc nothrow;
    int BIO_dgram_non_fatal_error(int) @nogc nothrow;
    bio_st* BIO_new_dgram(int, int) @nogc nothrow;
    int BIO_sock_should_retry(int) @nogc nothrow;
    int BIO_sock_non_fatal_error(int) @nogc nothrow;
    int BIO_fd_should_retry(int) @nogc nothrow;
    int BIO_fd_non_fatal_error(int) @nogc nothrow;
    int BIO_dump_cb(int function(const(void)*, c_ulong, void*), void*, const(char)*, int) @nogc nothrow;
    int BIO_dump_indent_cb(int function(const(void)*, c_ulong, void*), void*, const(char)*, int, int) @nogc nothrow;
    int BIO_dump(bio_st*, const(char)*, int) @nogc nothrow;
    int BIO_dump_indent(bio_st*, const(char)*, int, int) @nogc nothrow;
    int BIO_dump_fp(_IO_FILE*, const(char)*, int) @nogc nothrow;
    int BIO_dump_indent_fp(_IO_FILE*, const(char)*, int, int) @nogc nothrow;
    int BIO_hex_string(bio_st*, int, int, ubyte*, int) @nogc nothrow;
    bio_addr_st* BIO_ADDR_new() @nogc nothrow;
    int BIO_ADDR_rawmake(bio_addr_st*, int, const(void)*, c_ulong, ushort) @nogc nothrow;
    void BIO_ADDR_free(bio_addr_st*) @nogc nothrow;
    void BIO_ADDR_clear(bio_addr_st*) @nogc nothrow;
    int BIO_ADDR_family(const(bio_addr_st)*) @nogc nothrow;
    int BIO_ADDR_rawaddress(const(bio_addr_st)*, void*, c_ulong*) @nogc nothrow;
    ushort BIO_ADDR_rawport(const(bio_addr_st)*) @nogc nothrow;
    char* BIO_ADDR_hostname_string(const(bio_addr_st)*, int) @nogc nothrow;
    char* BIO_ADDR_service_string(const(bio_addr_st)*, int) @nogc nothrow;
    char* BIO_ADDR_path_string(const(bio_addr_st)*) @nogc nothrow;
    const(bio_addrinfo_st)* BIO_ADDRINFO_next(const(bio_addrinfo_st)*) @nogc nothrow;
    int BIO_ADDRINFO_family(const(bio_addrinfo_st)*) @nogc nothrow;
    int BIO_ADDRINFO_socktype(const(bio_addrinfo_st)*) @nogc nothrow;
    int BIO_ADDRINFO_protocol(const(bio_addrinfo_st)*) @nogc nothrow;
    const(bio_addr_st)* BIO_ADDRINFO_address(const(bio_addrinfo_st)*) @nogc nothrow;
    void BIO_ADDRINFO_free(bio_addrinfo_st*) @nogc nothrow;
    enum BIO_hostserv_priorities
    {
        BIO_PARSE_PRIO_HOST = 0,
        BIO_PARSE_PRIO_SERV = 1,
    }
    enum BIO_PARSE_PRIO_HOST = BIO_hostserv_priorities.BIO_PARSE_PRIO_HOST;
    enum BIO_PARSE_PRIO_SERV = BIO_hostserv_priorities.BIO_PARSE_PRIO_SERV;
    int BIO_parse_hostserv(const(char)*, char**, char**, BIO_hostserv_priorities) @nogc nothrow;
    enum BIO_lookup_type
    {
        BIO_LOOKUP_CLIENT = 0,
        BIO_LOOKUP_SERVER = 1,
    }
    enum BIO_LOOKUP_CLIENT = BIO_lookup_type.BIO_LOOKUP_CLIENT;
    enum BIO_LOOKUP_SERVER = BIO_lookup_type.BIO_LOOKUP_SERVER;
    int BIO_lookup(const(char)*, const(char)*, BIO_lookup_type, int, int, bio_addrinfo_st**) @nogc nothrow;
    int BIO_lookup_ex(const(char)*, const(char)*, int, int, int, int, bio_addrinfo_st**) @nogc nothrow;
    int BIO_sock_error(int) @nogc nothrow;
    int BIO_socket_ioctl(int, c_long, void*) @nogc nothrow;
    int BIO_socket_nbio(int, int) @nogc nothrow;
    int BIO_sock_init() @nogc nothrow;
    int BIO_set_tcp_ndelay(int, int) @nogc nothrow;
    struct hostent;
    hostent* BIO_gethostbyname(const(char)*) @nogc nothrow;
    int BIO_get_port(const(char)*, ushort*) @nogc nothrow;
    int BIO_get_host_ip(const(char)*, ubyte*) @nogc nothrow;
    int BIO_get_accept_socket(char*, int) @nogc nothrow;
    int BIO_accept(int, char**) @nogc nothrow;
    union BIO_sock_info_u
    {
        bio_addr_st* addr;
    }
    enum BIO_sock_info_type
    {
        BIO_SOCK_INFO_ADDRESS = 0,
    }
    enum BIO_SOCK_INFO_ADDRESS = BIO_sock_info_type.BIO_SOCK_INFO_ADDRESS;
    int BIO_sock_info(int, BIO_sock_info_type, BIO_sock_info_u*) @nogc nothrow;
    int BIO_socket(int, int, int, int) @nogc nothrow;
    int BIO_connect(int, const(bio_addr_st)*, int) @nogc nothrow;
    int BIO_bind(int, const(bio_addr_st)*, int) @nogc nothrow;
    int BIO_listen(int, const(bio_addr_st)*, int) @nogc nothrow;
    int BIO_accept_ex(int, bio_addr_st*, int) @nogc nothrow;
    int BIO_closesocket(int) @nogc nothrow;
    bio_st* BIO_new_socket(int, int) @nogc nothrow;
    bio_st* BIO_new_connect(const(char)*) @nogc nothrow;
    bio_st* BIO_new_accept(const(char)*) @nogc nothrow;
    bio_st* BIO_new_fd(int, int) @nogc nothrow;
    int BIO_new_bio_pair(bio_st**, c_ulong, bio_st**, c_ulong) @nogc nothrow;
    void BIO_copy_next_retry(bio_st*) @nogc nothrow;
    int BIO_printf(bio_st*, const(char)*, ...) @nogc nothrow;
    int BIO_vprintf(bio_st*, const(char)*, va_list*) @nogc nothrow;
    int BIO_snprintf(char*, c_ulong, const(char)*, ...) @nogc nothrow;
    int BIO_vsnprintf(char*, c_ulong, const(char)*, va_list*) @nogc nothrow;
    bio_method_st* BIO_meth_new(int, const(char)*) @nogc nothrow;
    void BIO_meth_free(bio_method_st*) @nogc nothrow;
    int function(bio_st*, const(char)*, int) BIO_meth_get_write(const(bio_method_st)*) @nogc nothrow;
    int function(bio_st*, const(char)*, c_ulong, c_ulong*) BIO_meth_get_write_ex(const(bio_method_st)*) @nogc nothrow;
    int BIO_meth_set_write(bio_method_st*, int function(bio_st*, const(char)*, int)) @nogc nothrow;
    int BIO_meth_set_write_ex(bio_method_st*, int function(bio_st*, const(char)*, c_ulong, c_ulong*)) @nogc nothrow;
    int function(bio_st*, char*, int) BIO_meth_get_read(const(bio_method_st)*) @nogc nothrow;
    int function(bio_st*, char*, c_ulong, c_ulong*) BIO_meth_get_read_ex(const(bio_method_st)*) @nogc nothrow;
    int BIO_meth_set_read(bio_method_st*, int function(bio_st*, char*, int)) @nogc nothrow;
    int BIO_meth_set_read_ex(bio_method_st*, int function(bio_st*, char*, c_ulong, c_ulong*)) @nogc nothrow;
    int function(bio_st*, const(char)*) BIO_meth_get_puts(const(bio_method_st)*) @nogc nothrow;
    int BIO_meth_set_puts(bio_method_st*, int function(bio_st*, const(char)*)) @nogc nothrow;
    int function(bio_st*, char*, int) BIO_meth_get_gets(const(bio_method_st)*) @nogc nothrow;
    int BIO_meth_set_gets(bio_method_st*, int function(bio_st*, char*, int)) @nogc nothrow;
    c_long function(bio_st*, int, c_long, void*) BIO_meth_get_ctrl(const(bio_method_st)*) @nogc nothrow;
    int BIO_meth_set_ctrl(bio_method_st*, c_long function(bio_st*, int, c_long, void*)) @nogc nothrow;
    int function(bio_st*) BIO_meth_get_create(const(bio_method_st)*) @nogc nothrow;
    int BIO_meth_set_create(bio_method_st*, int function(bio_st*)) @nogc nothrow;
    int function(bio_st*) BIO_meth_get_destroy(const(bio_method_st)*) @nogc nothrow;
    int BIO_meth_set_destroy(bio_method_st*, int function(bio_st*)) @nogc nothrow;
    c_long function(bio_st*, int, int function(bio_st*, int, int)) BIO_meth_get_callback_ctrl(const(bio_method_st)*) @nogc nothrow;
    int BIO_meth_set_callback_ctrl(bio_method_st*, c_long function(bio_st*, int, int function(bio_st*, int, int))) @nogc nothrow;
    int ERR_load_BIO_strings() @nogc nothrow;
    int ERR_load_OBJ_strings() @nogc nothrow;
    void OBJ_sigid_free() @nogc nothrow;
    int OBJ_add_sigid(int, int, int) @nogc nothrow;
    int OBJ_find_sigid_by_algs(int*, int, int) @nogc nothrow;
    int OBJ_find_sigid_algs(int, int*, int*) @nogc nothrow;
    const(ubyte)* OBJ_get0_data(const(asn1_object_st)*) @nogc nothrow;
    c_ulong OBJ_length(const(asn1_object_st)*) @nogc nothrow;
    int OBJ_create_objects(bio_st*) @nogc nothrow;
    int OBJ_create(const(char)*, const(char)*, const(char)*) @nogc nothrow;
    int OBJ_add_object(const(asn1_object_st)*) @nogc nothrow;
    int OBJ_new_nid(int) @nogc nothrow;
    const(void)* OBJ_bsearch_ex_(const(void)*, const(void)*, int, int, int function(const(void)*, const(void)*), int) @nogc nothrow;
    const(void)* OBJ_bsearch_(const(void)*, const(void)*, int, int, int function(const(void)*, const(void)*)) @nogc nothrow;
    int OBJ_cmp(const(asn1_object_st)*, const(asn1_object_st)*) @nogc nothrow;
    int OBJ_sn2nid(const(char)*) @nogc nothrow;
    int OBJ_ln2nid(const(char)*) @nogc nothrow;
    int OBJ_txt2nid(const(char)*) @nogc nothrow;
    int OBJ_obj2txt(char*, int, const(asn1_object_st)*, int) @nogc nothrow;
    asn1_object_st* OBJ_txt2obj(const(char)*, int) @nogc nothrow;
    int OBJ_obj2nid(const(asn1_object_st)*) @nogc nothrow;
    const(char)* OBJ_nid2sn(int) @nogc nothrow;
    const(char)* OBJ_nid2ln(int) @nogc nothrow;
    asn1_object_st* OBJ_nid2obj(int) @nogc nothrow;
    asn1_object_st* OBJ_dup(const(asn1_object_st)*) @nogc nothrow;
    void OBJ_NAME_do_all_sorted(int, void function(const(obj_name_st)*, void*), void*) @nogc nothrow;
    void OBJ_NAME_do_all(int, void function(const(obj_name_st)*, void*), void*) @nogc nothrow;
    void OBJ_NAME_cleanup(int) @nogc nothrow;
    int OBJ_NAME_remove(const(char)*, int) @nogc nothrow;
    int OBJ_NAME_add(const(char)*, int, const(char)*) @nogc nothrow;
    const(char)* OBJ_NAME_get(const(char)*, int) @nogc nothrow;
    int OBJ_NAME_new_index(c_ulong function(const(char)*), int function(const(char)*, const(char)*), void function(const(char)*, int, const(char)*)) @nogc nothrow;
    int OBJ_NAME_init() @nogc nothrow;
    struct obj_name_st
    {
        int type;
        int alias_;
        const(char)* name;
        const(char)* data;
    }
    alias OBJ_NAME = obj_name_st;
    struct lhash_st_OPENSSL_CSTRING
    {
        union lh_OPENSSL_CSTRING_dummy
        {
            void* d1;
            c_ulong d2;
            int d3;
        }
        lhash_st_OPENSSL_CSTRING.lh_OPENSSL_CSTRING_dummy dummy;
    }
    static lhash_st_OPENSSL_CSTRING* lh_OPENSSL_CSTRING_new(c_ulong function(const(const(char)*)*), int function(const(const(char)*)*, const(const(char)*)*)) @nogc nothrow;
    void BN_set_flags(bignum_st*, int) @nogc nothrow;
    int BN_get_flags(const(bignum_st)*, int) @nogc nothrow;
    static void lh_OPENSSL_CSTRING_free(lhash_st_OPENSSL_CSTRING*) @nogc nothrow;
    static const(char)** lh_OPENSSL_CSTRING_insert(lhash_st_OPENSSL_CSTRING*, const(char)**) @nogc nothrow;
    static const(char)** lh_OPENSSL_CSTRING_delete(lhash_st_OPENSSL_CSTRING*, const(const(char)*)*) @nogc nothrow;
    static const(char)** lh_OPENSSL_CSTRING_retrieve(lhash_st_OPENSSL_CSTRING*, const(const(char)*)*) @nogc nothrow;
    static int lh_OPENSSL_CSTRING_error(lhash_st_OPENSSL_CSTRING*) @nogc nothrow;
    void BN_with_flags(bignum_st*, const(bignum_st)*, int) @nogc nothrow;
    int BN_GENCB_call(bn_gencb_st*, int, int) @nogc nothrow;
    bn_gencb_st* BN_GENCB_new() @nogc nothrow;
    void BN_GENCB_free(bn_gencb_st*) @nogc nothrow;
    void BN_GENCB_set_old(bn_gencb_st*, void function(int, int, void*), void*) @nogc nothrow;
    void BN_GENCB_set(bn_gencb_st*, int function(int, int, bn_gencb_st*), void*) @nogc nothrow;
    void* BN_GENCB_get_arg(bn_gencb_st*) @nogc nothrow;
    static c_ulong lh_OPENSSL_CSTRING_num_items(lhash_st_OPENSSL_CSTRING*) @nogc nothrow;
    static void lh_OPENSSL_CSTRING_node_stats_bio(const(lhash_st_OPENSSL_CSTRING)*, bio_st*) @nogc nothrow;
    static void lh_OPENSSL_CSTRING_node_usage_stats_bio(const(lhash_st_OPENSSL_CSTRING)*, bio_st*) @nogc nothrow;
    int BN_abs_is_word(const(bignum_st)*, const(c_ulong)) @nogc nothrow;
    int BN_is_zero(const(bignum_st)*) @nogc nothrow;
    int BN_is_one(const(bignum_st)*) @nogc nothrow;
    int BN_is_word(const(bignum_st)*, const(c_ulong)) @nogc nothrow;
    int BN_is_odd(const(bignum_st)*) @nogc nothrow;
    static void lh_OPENSSL_CSTRING_stats_bio(const(lhash_st_OPENSSL_CSTRING)*, bio_st*) @nogc nothrow;
    void BN_zero_ex(bignum_st*) @nogc nothrow;
    static c_ulong lh_OPENSSL_CSTRING_get_down_load(lhash_st_OPENSSL_CSTRING*) @nogc nothrow;
    const(bignum_st)* BN_value_one() @nogc nothrow;
    char* BN_options() @nogc nothrow;
    bignum_ctx* BN_CTX_new() @nogc nothrow;
    bignum_ctx* BN_CTX_secure_new() @nogc nothrow;
    void BN_CTX_free(bignum_ctx*) @nogc nothrow;
    void BN_CTX_start(bignum_ctx*) @nogc nothrow;
    bignum_st* BN_CTX_get(bignum_ctx*) @nogc nothrow;
    void BN_CTX_end(bignum_ctx*) @nogc nothrow;
    int BN_rand(bignum_st*, int, int, int) @nogc nothrow;
    int BN_priv_rand(bignum_st*, int, int, int) @nogc nothrow;
    int BN_rand_range(bignum_st*, const(bignum_st)*) @nogc nothrow;
    int BN_priv_rand_range(bignum_st*, const(bignum_st)*) @nogc nothrow;
    int BN_pseudo_rand(bignum_st*, int, int, int) @nogc nothrow;
    int BN_pseudo_rand_range(bignum_st*, const(bignum_st)*) @nogc nothrow;
    int BN_num_bits(const(bignum_st)*) @nogc nothrow;
    int BN_num_bits_word(c_ulong) @nogc nothrow;
    int BN_security_bits(int, int) @nogc nothrow;
    bignum_st* BN_new() @nogc nothrow;
    bignum_st* BN_secure_new() @nogc nothrow;
    void BN_clear_free(bignum_st*) @nogc nothrow;
    bignum_st* BN_copy(bignum_st*, const(bignum_st)*) @nogc nothrow;
    void BN_swap(bignum_st*, bignum_st*) @nogc nothrow;
    bignum_st* BN_bin2bn(const(ubyte)*, int, bignum_st*) @nogc nothrow;
    int BN_bn2bin(const(bignum_st)*, ubyte*) @nogc nothrow;
    int BN_bn2binpad(const(bignum_st)*, ubyte*, int) @nogc nothrow;
    bignum_st* BN_lebin2bn(const(ubyte)*, int, bignum_st*) @nogc nothrow;
    int BN_bn2lebinpad(const(bignum_st)*, ubyte*, int) @nogc nothrow;
    bignum_st* BN_mpi2bn(const(ubyte)*, int, bignum_st*) @nogc nothrow;
    int BN_bn2mpi(const(bignum_st)*, ubyte*) @nogc nothrow;
    int BN_sub(bignum_st*, const(bignum_st)*, const(bignum_st)*) @nogc nothrow;
    int BN_usub(bignum_st*, const(bignum_st)*, const(bignum_st)*) @nogc nothrow;
    int BN_uadd(bignum_st*, const(bignum_st)*, const(bignum_st)*) @nogc nothrow;
    int BN_add(bignum_st*, const(bignum_st)*, const(bignum_st)*) @nogc nothrow;
    int BN_mul(bignum_st*, const(bignum_st)*, const(bignum_st)*, bignum_ctx*) @nogc nothrow;
    int BN_sqr(bignum_st*, const(bignum_st)*, bignum_ctx*) @nogc nothrow;
    void BN_set_negative(bignum_st*, int) @nogc nothrow;
    int BN_is_negative(const(bignum_st)*) @nogc nothrow;
    int BN_div(bignum_st*, bignum_st*, const(bignum_st)*, const(bignum_st)*, bignum_ctx*) @nogc nothrow;
    static void lh_OPENSSL_CSTRING_set_down_load(lhash_st_OPENSSL_CSTRING*, c_ulong) @nogc nothrow;
    int BN_nnmod(bignum_st*, const(bignum_st)*, const(bignum_st)*, bignum_ctx*) @nogc nothrow;
    int BN_mod_add(bignum_st*, const(bignum_st)*, const(bignum_st)*, const(bignum_st)*, bignum_ctx*) @nogc nothrow;
    int BN_mod_add_quick(bignum_st*, const(bignum_st)*, const(bignum_st)*, const(bignum_st)*) @nogc nothrow;
    int BN_mod_sub(bignum_st*, const(bignum_st)*, const(bignum_st)*, const(bignum_st)*, bignum_ctx*) @nogc nothrow;
    int BN_mod_sub_quick(bignum_st*, const(bignum_st)*, const(bignum_st)*, const(bignum_st)*) @nogc nothrow;
    int BN_mod_mul(bignum_st*, const(bignum_st)*, const(bignum_st)*, const(bignum_st)*, bignum_ctx*) @nogc nothrow;
    int BN_mod_sqr(bignum_st*, const(bignum_st)*, const(bignum_st)*, bignum_ctx*) @nogc nothrow;
    int BN_mod_lshift1(bignum_st*, const(bignum_st)*, const(bignum_st)*, bignum_ctx*) @nogc nothrow;
    int BN_mod_lshift1_quick(bignum_st*, const(bignum_st)*, const(bignum_st)*) @nogc nothrow;
    int BN_mod_lshift(bignum_st*, const(bignum_st)*, int, const(bignum_st)*, bignum_ctx*) @nogc nothrow;
    int BN_mod_lshift_quick(bignum_st*, const(bignum_st)*, int, const(bignum_st)*) @nogc nothrow;
    c_ulong BN_mod_word(const(bignum_st)*, c_ulong) @nogc nothrow;
    c_ulong BN_div_word(bignum_st*, c_ulong) @nogc nothrow;
    int BN_mul_word(bignum_st*, c_ulong) @nogc nothrow;
    int BN_add_word(bignum_st*, c_ulong) @nogc nothrow;
    int BN_sub_word(bignum_st*, c_ulong) @nogc nothrow;
    int BN_set_word(bignum_st*, c_ulong) @nogc nothrow;
    c_ulong BN_get_word(const(bignum_st)*) @nogc nothrow;
    int BN_cmp(const(bignum_st)*, const(bignum_st)*) @nogc nothrow;
    void BN_free(bignum_st*) @nogc nothrow;
    int BN_is_bit_set(const(bignum_st)*, int) @nogc nothrow;
    int BN_lshift(bignum_st*, const(bignum_st)*, int) @nogc nothrow;
    int BN_lshift1(bignum_st*, const(bignum_st)*) @nogc nothrow;
    int BN_exp(bignum_st*, const(bignum_st)*, const(bignum_st)*, bignum_ctx*) @nogc nothrow;
    int BN_mod_exp(bignum_st*, const(bignum_st)*, const(bignum_st)*, const(bignum_st)*, bignum_ctx*) @nogc nothrow;
    int BN_mod_exp_mont(bignum_st*, const(bignum_st)*, const(bignum_st)*, const(bignum_st)*, bignum_ctx*, bn_mont_ctx_st*) @nogc nothrow;
    int BN_mod_exp_mont_consttime(bignum_st*, const(bignum_st)*, const(bignum_st)*, const(bignum_st)*, bignum_ctx*, bn_mont_ctx_st*) @nogc nothrow;
    int BN_mod_exp_mont_word(bignum_st*, c_ulong, const(bignum_st)*, const(bignum_st)*, bignum_ctx*, bn_mont_ctx_st*) @nogc nothrow;
    int BN_mod_exp2_mont(bignum_st*, const(bignum_st)*, const(bignum_st)*, const(bignum_st)*, const(bignum_st)*, const(bignum_st)*, bignum_ctx*, bn_mont_ctx_st*) @nogc nothrow;
    int BN_mod_exp_simple(bignum_st*, const(bignum_st)*, const(bignum_st)*, const(bignum_st)*, bignum_ctx*) @nogc nothrow;
    int BN_mask_bits(bignum_st*, int) @nogc nothrow;
    int BN_print_fp(_IO_FILE*, const(bignum_st)*) @nogc nothrow;
    int BN_print(bio_st*, const(bignum_st)*) @nogc nothrow;
    int BN_reciprocal(bignum_st*, const(bignum_st)*, int, bignum_ctx*) @nogc nothrow;
    int BN_rshift(bignum_st*, const(bignum_st)*, int) @nogc nothrow;
    int BN_rshift1(bignum_st*, const(bignum_st)*) @nogc nothrow;
    void BN_clear(bignum_st*) @nogc nothrow;
    bignum_st* BN_dup(const(bignum_st)*) @nogc nothrow;
    int BN_ucmp(const(bignum_st)*, const(bignum_st)*) @nogc nothrow;
    int BN_set_bit(bignum_st*, int) @nogc nothrow;
    int BN_clear_bit(bignum_st*, int) @nogc nothrow;
    char* BN_bn2hex(const(bignum_st)*) @nogc nothrow;
    char* BN_bn2dec(const(bignum_st)*) @nogc nothrow;
    int BN_hex2bn(bignum_st**, const(char)*) @nogc nothrow;
    int BN_dec2bn(bignum_st**, const(char)*) @nogc nothrow;
    int BN_asc2bn(bignum_st**, const(char)*) @nogc nothrow;
    int BN_gcd(bignum_st*, const(bignum_st)*, const(bignum_st)*, bignum_ctx*) @nogc nothrow;
    int BN_kronecker(const(bignum_st)*, const(bignum_st)*, bignum_ctx*) @nogc nothrow;
    bignum_st* BN_mod_inverse(bignum_st*, const(bignum_st)*, const(bignum_st)*, bignum_ctx*) @nogc nothrow;
    bignum_st* BN_mod_sqrt(bignum_st*, const(bignum_st)*, const(bignum_st)*, bignum_ctx*) @nogc nothrow;
    void BN_consttime_swap(c_ulong, bignum_st*, bignum_st*, int) @nogc nothrow;
    bignum_st* BN_generate_prime(bignum_st*, int, int, const(bignum_st)*, const(bignum_st)*, void function(int, int, void*), void*) @nogc nothrow;
    int BN_is_prime(const(bignum_st)*, int, void function(int, int, void*), bignum_ctx*, void*) @nogc nothrow;
    int BN_is_prime_fasttest(const(bignum_st)*, int, void function(int, int, void*), bignum_ctx*, void*, int) @nogc nothrow;
    int BN_generate_prime_ex(bignum_st*, int, int, const(bignum_st)*, const(bignum_st)*, bn_gencb_st*) @nogc nothrow;
    int BN_is_prime_ex(const(bignum_st)*, int, bignum_ctx*, bn_gencb_st*) @nogc nothrow;
    int BN_is_prime_fasttest_ex(const(bignum_st)*, int, bignum_ctx*, int, bn_gencb_st*) @nogc nothrow;
    int BN_X931_generate_Xpq(bignum_st*, bignum_st*, int, bignum_ctx*) @nogc nothrow;
    int BN_X931_derive_prime_ex(bignum_st*, bignum_st*, bignum_st*, const(bignum_st)*, const(bignum_st)*, const(bignum_st)*, const(bignum_st)*, bignum_ctx*, bn_gencb_st*) @nogc nothrow;
    int BN_X931_generate_prime_ex(bignum_st*, bignum_st*, bignum_st*, bignum_st*, bignum_st*, const(bignum_st)*, const(bignum_st)*, bignum_ctx*, bn_gencb_st*) @nogc nothrow;
    bn_mont_ctx_st* BN_MONT_CTX_new() @nogc nothrow;
    int BN_mod_mul_montgomery(bignum_st*, const(bignum_st)*, const(bignum_st)*, bn_mont_ctx_st*, bignum_ctx*) @nogc nothrow;
    int BN_to_montgomery(bignum_st*, const(bignum_st)*, bn_mont_ctx_st*, bignum_ctx*) @nogc nothrow;
    int BN_from_montgomery(bignum_st*, const(bignum_st)*, bn_mont_ctx_st*, bignum_ctx*) @nogc nothrow;
    void BN_MONT_CTX_free(bn_mont_ctx_st*) @nogc nothrow;
    int BN_MONT_CTX_set(bn_mont_ctx_st*, const(bignum_st)*, bignum_ctx*) @nogc nothrow;
    bn_mont_ctx_st* BN_MONT_CTX_copy(bn_mont_ctx_st*, bn_mont_ctx_st*) @nogc nothrow;
    bn_mont_ctx_st* BN_MONT_CTX_set_locked(bn_mont_ctx_st**, void*, const(bignum_st)*, bignum_ctx*) @nogc nothrow;
    static void lh_OPENSSL_CSTRING_doall(lhash_st_OPENSSL_CSTRING*, void function(const(char)**)) @nogc nothrow;
    bn_blinding_st* BN_BLINDING_new(const(bignum_st)*, const(bignum_st)*, bignum_st*) @nogc nothrow;
    void BN_BLINDING_free(bn_blinding_st*) @nogc nothrow;
    int BN_BLINDING_update(bn_blinding_st*, bignum_ctx*) @nogc nothrow;
    int BN_BLINDING_convert(bignum_st*, bn_blinding_st*, bignum_ctx*) @nogc nothrow;
    int BN_BLINDING_invert(bignum_st*, bn_blinding_st*, bignum_ctx*) @nogc nothrow;
    int BN_BLINDING_convert_ex(bignum_st*, bignum_st*, bn_blinding_st*, bignum_ctx*) @nogc nothrow;
    int BN_BLINDING_invert_ex(bignum_st*, const(bignum_st)*, bn_blinding_st*, bignum_ctx*) @nogc nothrow;
    int BN_BLINDING_is_current_thread(bn_blinding_st*) @nogc nothrow;
    void BN_BLINDING_set_current_thread(bn_blinding_st*) @nogc nothrow;
    int BN_BLINDING_lock(bn_blinding_st*) @nogc nothrow;
    int BN_BLINDING_unlock(bn_blinding_st*) @nogc nothrow;
    c_ulong BN_BLINDING_get_flags(const(bn_blinding_st)*) @nogc nothrow;
    void BN_BLINDING_set_flags(bn_blinding_st*, c_ulong) @nogc nothrow;
    bn_blinding_st* BN_BLINDING_create_param(bn_blinding_st*, const(bignum_st)*, bignum_st*, bignum_ctx*, int function(bignum_st*, const(bignum_st)*, const(bignum_st)*, const(bignum_st)*, bignum_ctx*, bn_mont_ctx_st*), bn_mont_ctx_st*) @nogc nothrow;
    void BN_set_params(int, int, int, int) @nogc nothrow;
    int BN_get_params(int) @nogc nothrow;
    bn_recp_ctx_st* BN_RECP_CTX_new() @nogc nothrow;
    void BN_RECP_CTX_free(bn_recp_ctx_st*) @nogc nothrow;
    int BN_RECP_CTX_set(bn_recp_ctx_st*, const(bignum_st)*, bignum_ctx*) @nogc nothrow;
    int BN_mod_mul_reciprocal(bignum_st*, const(bignum_st)*, const(bignum_st)*, bn_recp_ctx_st*, bignum_ctx*) @nogc nothrow;
    int BN_mod_exp_recp(bignum_st*, const(bignum_st)*, const(bignum_st)*, const(bignum_st)*, bignum_ctx*) @nogc nothrow;
    int BN_div_recp(bignum_st*, bignum_st*, const(bignum_st)*, bn_recp_ctx_st*, bignum_ctx*) @nogc nothrow;
    int BN_GF2m_add(bignum_st*, const(bignum_st)*, const(bignum_st)*) @nogc nothrow;
    int BN_GF2m_mod(bignum_st*, const(bignum_st)*, const(bignum_st)*) @nogc nothrow;
    int BN_GF2m_mod_mul(bignum_st*, const(bignum_st)*, const(bignum_st)*, const(bignum_st)*, bignum_ctx*) @nogc nothrow;
    int BN_GF2m_mod_sqr(bignum_st*, const(bignum_st)*, const(bignum_st)*, bignum_ctx*) @nogc nothrow;
    int BN_GF2m_mod_inv(bignum_st*, const(bignum_st)*, const(bignum_st)*, bignum_ctx*) @nogc nothrow;
    int BN_GF2m_mod_div(bignum_st*, const(bignum_st)*, const(bignum_st)*, const(bignum_st)*, bignum_ctx*) @nogc nothrow;
    int BN_GF2m_mod_exp(bignum_st*, const(bignum_st)*, const(bignum_st)*, const(bignum_st)*, bignum_ctx*) @nogc nothrow;
    int BN_GF2m_mod_sqrt(bignum_st*, const(bignum_st)*, const(bignum_st)*, bignum_ctx*) @nogc nothrow;
    int BN_GF2m_mod_solve_quad(bignum_st*, const(bignum_st)*, const(bignum_st)*, bignum_ctx*) @nogc nothrow;
    static char** lh_OPENSSL_STRING_delete(lhash_st_OPENSSL_STRING*, const(char*)*) @nogc nothrow;
    int BN_GF2m_mod_arr(bignum_st*, const(bignum_st)*, const(int)*) @nogc nothrow;
    int BN_GF2m_mod_mul_arr(bignum_st*, const(bignum_st)*, const(bignum_st)*, const(int)*, bignum_ctx*) @nogc nothrow;
    int BN_GF2m_mod_sqr_arr(bignum_st*, const(bignum_st)*, const(int)*, bignum_ctx*) @nogc nothrow;
    int BN_GF2m_mod_inv_arr(bignum_st*, const(bignum_st)*, const(int)*, bignum_ctx*) @nogc nothrow;
    int BN_GF2m_mod_div_arr(bignum_st*, const(bignum_st)*, const(bignum_st)*, const(int)*, bignum_ctx*) @nogc nothrow;
    int BN_GF2m_mod_exp_arr(bignum_st*, const(bignum_st)*, const(bignum_st)*, const(int)*, bignum_ctx*) @nogc nothrow;
    int BN_GF2m_mod_sqrt_arr(bignum_st*, const(bignum_st)*, const(int)*, bignum_ctx*) @nogc nothrow;
    int BN_GF2m_mod_solve_quad_arr(bignum_st*, const(bignum_st)*, const(int)*, bignum_ctx*) @nogc nothrow;
    int BN_GF2m_poly2arr(const(bignum_st)*, int*, int) @nogc nothrow;
    int BN_GF2m_arr2poly(const(int)*, bignum_st*) @nogc nothrow;
    int BN_nist_mod_192(bignum_st*, const(bignum_st)*, const(bignum_st)*, bignum_ctx*) @nogc nothrow;
    int BN_nist_mod_224(bignum_st*, const(bignum_st)*, const(bignum_st)*, bignum_ctx*) @nogc nothrow;
    int BN_nist_mod_256(bignum_st*, const(bignum_st)*, const(bignum_st)*, bignum_ctx*) @nogc nothrow;
    int BN_nist_mod_384(bignum_st*, const(bignum_st)*, const(bignum_st)*, bignum_ctx*) @nogc nothrow;
    int BN_nist_mod_521(bignum_st*, const(bignum_st)*, const(bignum_st)*, bignum_ctx*) @nogc nothrow;
    const(bignum_st)* BN_get0_nist_prime_192() @nogc nothrow;
    const(bignum_st)* BN_get0_nist_prime_224() @nogc nothrow;
    const(bignum_st)* BN_get0_nist_prime_256() @nogc nothrow;
    const(bignum_st)* BN_get0_nist_prime_384() @nogc nothrow;
    const(bignum_st)* BN_get0_nist_prime_521() @nogc nothrow;
    int function(bignum_st*, const(bignum_st)*, const(bignum_st)*, bignum_ctx*) BN_nist_mod_func(const(bignum_st)*) @nogc nothrow;
    int BN_generate_dsa_nonce(bignum_st*, const(bignum_st)*, const(bignum_st)*, const(ubyte)*, c_ulong, bignum_ctx*) @nogc nothrow;
    bignum_st* BN_get_rfc2409_prime_768(bignum_st*) @nogc nothrow;
    bignum_st* BN_get_rfc2409_prime_1024(bignum_st*) @nogc nothrow;
    bignum_st* BN_get_rfc3526_prime_1536(bignum_st*) @nogc nothrow;
    bignum_st* BN_get_rfc3526_prime_2048(bignum_st*) @nogc nothrow;
    bignum_st* BN_get_rfc3526_prime_3072(bignum_st*) @nogc nothrow;
    bignum_st* BN_get_rfc3526_prime_4096(bignum_st*) @nogc nothrow;
    bignum_st* BN_get_rfc3526_prime_6144(bignum_st*) @nogc nothrow;
    bignum_st* BN_get_rfc3526_prime_8192(bignum_st*) @nogc nothrow;
    static int lh_OPENSSL_STRING_error(lhash_st_OPENSSL_STRING*) @nogc nothrow;
    static c_ulong lh_OPENSSL_STRING_num_items(lhash_st_OPENSSL_STRING*) @nogc nothrow;
    static void lh_OPENSSL_STRING_node_stats_bio(const(lhash_st_OPENSSL_STRING)*, bio_st*) @nogc nothrow;
    static void lh_OPENSSL_STRING_node_usage_stats_bio(const(lhash_st_OPENSSL_STRING)*, bio_st*) @nogc nothrow;
    static void lh_OPENSSL_STRING_stats_bio(const(lhash_st_OPENSSL_STRING)*, bio_st*) @nogc nothrow;
    static c_ulong lh_OPENSSL_STRING_get_down_load(lhash_st_OPENSSL_STRING*) @nogc nothrow;
    static void lh_OPENSSL_STRING_set_down_load(lhash_st_OPENSSL_STRING*, c_ulong) @nogc nothrow;
    static void lh_OPENSSL_STRING_doall(lhash_st_OPENSSL_STRING*, void function(char**)) @nogc nothrow;
    int BN_bntest_rand(bignum_st*, int, int, int) @nogc nothrow;
    struct lhash_st_OPENSSL_STRING;
    int ERR_load_BN_strings() @nogc nothrow;
    static char** lh_OPENSSL_STRING_insert(lhash_st_OPENSSL_STRING*, char**) @nogc nothrow;
    static void lh_OPENSSL_STRING_free(lhash_st_OPENSSL_STRING*) @nogc nothrow;
    static lhash_st_OPENSSL_STRING* lh_OPENSSL_STRING_new(c_ulong function(const(char*)*), int function(const(char*)*, const(char*)*)) @nogc nothrow;
    static char** lh_OPENSSL_STRING_retrieve(lhash_st_OPENSSL_STRING*, const(char*)*) @nogc nothrow;
    void OPENSSL_LH_node_usage_stats_bio(const(lhash_st)*, bio_st*) @nogc nothrow;
    void OPENSSL_LH_node_stats_bio(const(lhash_st)*, bio_st*) @nogc nothrow;
    void OPENSSL_LH_stats_bio(const(lhash_st)*, bio_st*) @nogc nothrow;
    void OPENSSL_LH_node_usage_stats(const(lhash_st)*, _IO_FILE*) @nogc nothrow;
    void OPENSSL_LH_node_stats(const(lhash_st)*, _IO_FILE*) @nogc nothrow;
    void OPENSSL_LH_stats(const(lhash_st)*, _IO_FILE*) @nogc nothrow;
    void OPENSSL_LH_set_down_load(lhash_st*, c_ulong) @nogc nothrow;
    c_ulong OPENSSL_LH_get_down_load(const(lhash_st)*) @nogc nothrow;
    c_ulong OPENSSL_LH_num_items(const(lhash_st)*) @nogc nothrow;
    c_ulong OPENSSL_LH_strhash(const(char)*) @nogc nothrow;
    void OPENSSL_LH_doall_arg(lhash_st*, void function(void*, void*), void*) @nogc nothrow;
    void OPENSSL_LH_doall(lhash_st*, void function(void*)) @nogc nothrow;
    void* OPENSSL_LH_retrieve(lhash_st*, const(void)*) @nogc nothrow;
    void* OPENSSL_LH_delete(lhash_st*, const(void)*) @nogc nothrow;
    void* OPENSSL_LH_insert(lhash_st*, void*) @nogc nothrow;
    void OPENSSL_LH_free(lhash_st*) @nogc nothrow;
    lhash_st* OPENSSL_LH_new(c_ulong function(const(void)*), int function(const(void)*, const(void)*)) @nogc nothrow;
    int OPENSSL_LH_error(lhash_st*) @nogc nothrow;
    struct lhash_st;
    alias OPENSSL_LHASH = lhash_st;
    alias OPENSSL_LH_DOALL_FUNCARG = void function(void*, void*);
    alias OPENSSL_LH_DOALL_FUNC = void function(void*);
    alias OPENSSL_LH_HASHFUNC = c_ulong function(const(void)*);
    alias OPENSSL_LH_COMPFUNC = int function(const(void)*, const(void)*);
    struct lhash_node_st;
    alias OPENSSL_LH_NODE = lhash_node_st;
    int ERR_load_EVP_strings() @nogc nothrow;
    void EVP_add_alg_module() @nogc nothrow;
    void EVP_PKEY_meth_get_digest_custom(evp_pkey_method_st*, int function(evp_pkey_ctx_st*, evp_md_ctx_st*)*) @nogc nothrow;
    void EVP_PKEY_meth_get_param_check(const(evp_pkey_method_st)*, int function(evp_pkey_st*)*) @nogc nothrow;
    void EVP_PKEY_meth_get_public_check(const(evp_pkey_method_st)*, int function(evp_pkey_st*)*) @nogc nothrow;
    void EVP_PKEY_meth_get_check(const(evp_pkey_method_st)*, int function(evp_pkey_st*)*) @nogc nothrow;
    void EVP_PKEY_meth_get_digestverify(evp_pkey_method_st*, int function(evp_md_ctx_st*, const(ubyte)*, c_ulong, const(ubyte)*, c_ulong)*) @nogc nothrow;
    void EVP_PKEY_meth_get_digestsign(evp_pkey_method_st*, int function(evp_md_ctx_st*, ubyte*, c_ulong*, const(ubyte)*, c_ulong)*) @nogc nothrow;
    void EVP_PKEY_meth_get_ctrl(const(evp_pkey_method_st)*, int function(evp_pkey_ctx_st*, int, int, void*)*, int function(evp_pkey_ctx_st*, const(char)*, const(char)*)*) @nogc nothrow;
    void EVP_PKEY_meth_get_derive(const(evp_pkey_method_st)*, int function(evp_pkey_ctx_st*)*, int function(evp_pkey_ctx_st*, ubyte*, c_ulong*)*) @nogc nothrow;
    void EVP_PKEY_meth_get_decrypt(const(evp_pkey_method_st)*, int function(evp_pkey_ctx_st*)*, int function(evp_pkey_ctx_st*, ubyte*, c_ulong*, const(ubyte)*, c_ulong)*) @nogc nothrow;
    void EVP_PKEY_meth_get_encrypt(const(evp_pkey_method_st)*, int function(evp_pkey_ctx_st*)*, int function(evp_pkey_ctx_st*, ubyte*, c_ulong*, const(ubyte)*, c_ulong)*) @nogc nothrow;
    void EVP_PKEY_meth_get_verifyctx(const(evp_pkey_method_st)*, int function(evp_pkey_ctx_st*, evp_md_ctx_st*)*, int function(evp_pkey_ctx_st*, const(ubyte)*, int, evp_md_ctx_st*)*) @nogc nothrow;
    void EVP_PKEY_meth_get_signctx(const(evp_pkey_method_st)*, int function(evp_pkey_ctx_st*, evp_md_ctx_st*)*, int function(evp_pkey_ctx_st*, ubyte*, c_ulong*, evp_md_ctx_st*)*) @nogc nothrow;
    void EVP_PKEY_meth_get_verify_recover(const(evp_pkey_method_st)*, int function(evp_pkey_ctx_st*)*, int function(evp_pkey_ctx_st*, ubyte*, c_ulong*, const(ubyte)*, c_ulong)*) @nogc nothrow;
    void EVP_PKEY_meth_get_verify(const(evp_pkey_method_st)*, int function(evp_pkey_ctx_st*)*, int function(evp_pkey_ctx_st*, const(ubyte)*, c_ulong, const(ubyte)*, c_ulong)*) @nogc nothrow;
    void EVP_PKEY_meth_get_sign(const(evp_pkey_method_st)*, int function(evp_pkey_ctx_st*)*, int function(evp_pkey_ctx_st*, ubyte*, c_ulong*, const(ubyte)*, c_ulong)*) @nogc nothrow;
    void EVP_PKEY_meth_get_keygen(const(evp_pkey_method_st)*, int function(evp_pkey_ctx_st*)*, int function(evp_pkey_ctx_st*, evp_pkey_st*)*) @nogc nothrow;
    void EVP_PKEY_meth_get_paramgen(const(evp_pkey_method_st)*, int function(evp_pkey_ctx_st*)*, int function(evp_pkey_ctx_st*, evp_pkey_st*)*) @nogc nothrow;
    void EVP_PKEY_meth_get_cleanup(const(evp_pkey_method_st)*, void function(evp_pkey_ctx_st*)*) @nogc nothrow;
    void EVP_PKEY_meth_get_copy(const(evp_pkey_method_st)*, int function(evp_pkey_ctx_st*, evp_pkey_ctx_st*)*) @nogc nothrow;
    void EVP_PKEY_meth_get_init(const(evp_pkey_method_st)*, int function(evp_pkey_ctx_st*)*) @nogc nothrow;
    void EVP_PKEY_meth_set_digest_custom(evp_pkey_method_st*, int function(evp_pkey_ctx_st*, evp_md_ctx_st*)) @nogc nothrow;
    void EVP_PKEY_meth_set_param_check(evp_pkey_method_st*, int function(evp_pkey_st*)) @nogc nothrow;
    void EVP_PKEY_meth_set_public_check(evp_pkey_method_st*, int function(evp_pkey_st*)) @nogc nothrow;
    void EVP_PKEY_meth_set_check(evp_pkey_method_st*, int function(evp_pkey_st*)) @nogc nothrow;
    void EVP_PKEY_meth_set_digestverify(evp_pkey_method_st*, int function(evp_md_ctx_st*, const(ubyte)*, c_ulong, const(ubyte)*, c_ulong)) @nogc nothrow;
    void EVP_PKEY_meth_set_digestsign(evp_pkey_method_st*, int function(evp_md_ctx_st*, ubyte*, c_ulong*, const(ubyte)*, c_ulong)) @nogc nothrow;
    void EVP_PKEY_meth_set_ctrl(evp_pkey_method_st*, int function(evp_pkey_ctx_st*, int, int, void*), int function(evp_pkey_ctx_st*, const(char)*, const(char)*)) @nogc nothrow;
    void EVP_PKEY_meth_set_derive(evp_pkey_method_st*, int function(evp_pkey_ctx_st*), int function(evp_pkey_ctx_st*, ubyte*, c_ulong*)) @nogc nothrow;
    void EVP_PKEY_meth_set_decrypt(evp_pkey_method_st*, int function(evp_pkey_ctx_st*), int function(evp_pkey_ctx_st*, ubyte*, c_ulong*, const(ubyte)*, c_ulong)) @nogc nothrow;
    void EVP_PKEY_meth_set_encrypt(evp_pkey_method_st*, int function(evp_pkey_ctx_st*), int function(evp_pkey_ctx_st*, ubyte*, c_ulong*, const(ubyte)*, c_ulong)) @nogc nothrow;
    void EVP_PKEY_meth_set_verifyctx(evp_pkey_method_st*, int function(evp_pkey_ctx_st*, evp_md_ctx_st*), int function(evp_pkey_ctx_st*, const(ubyte)*, int, evp_md_ctx_st*)) @nogc nothrow;
    void EVP_PKEY_meth_set_signctx(evp_pkey_method_st*, int function(evp_pkey_ctx_st*, evp_md_ctx_st*), int function(evp_pkey_ctx_st*, ubyte*, c_ulong*, evp_md_ctx_st*)) @nogc nothrow;
    void EVP_PKEY_meth_set_verify_recover(evp_pkey_method_st*, int function(evp_pkey_ctx_st*), int function(evp_pkey_ctx_st*, ubyte*, c_ulong*, const(ubyte)*, c_ulong)) @nogc nothrow;
    void EVP_PKEY_meth_set_verify(evp_pkey_method_st*, int function(evp_pkey_ctx_st*), int function(evp_pkey_ctx_st*, const(ubyte)*, c_ulong, const(ubyte)*, c_ulong)) @nogc nothrow;
    void EVP_PKEY_meth_set_sign(evp_pkey_method_st*, int function(evp_pkey_ctx_st*), int function(evp_pkey_ctx_st*, ubyte*, c_ulong*, const(ubyte)*, c_ulong)) @nogc nothrow;
    void EVP_PKEY_meth_set_keygen(evp_pkey_method_st*, int function(evp_pkey_ctx_st*), int function(evp_pkey_ctx_st*, evp_pkey_st*)) @nogc nothrow;
    void EVP_PKEY_meth_set_paramgen(evp_pkey_method_st*, int function(evp_pkey_ctx_st*), int function(evp_pkey_ctx_st*, evp_pkey_st*)) @nogc nothrow;
    void EVP_PKEY_meth_set_cleanup(evp_pkey_method_st*, void function(evp_pkey_ctx_st*)) @nogc nothrow;
    buf_mem_st* BUF_MEM_new() @nogc nothrow;
    buf_mem_st* BUF_MEM_new_ex(c_ulong) @nogc nothrow;
    void BUF_MEM_free(buf_mem_st*) @nogc nothrow;
    c_ulong BUF_MEM_grow(buf_mem_st*, c_ulong) @nogc nothrow;
    c_ulong BUF_MEM_grow_clean(buf_mem_st*, c_ulong) @nogc nothrow;
    void BUF_reverse(ubyte*, const(ubyte)*, c_ulong) @nogc nothrow;
    void EVP_PKEY_meth_set_copy(evp_pkey_method_st*, int function(evp_pkey_ctx_st*, evp_pkey_ctx_st*)) @nogc nothrow;
    int ERR_load_BUF_strings() @nogc nothrow;
    void EVP_PKEY_meth_set_init(evp_pkey_method_st*, int function(evp_pkey_ctx_st*)) @nogc nothrow;
    int EVP_PKEY_CTX_get_keygen_info(evp_pkey_ctx_st*, int) @nogc nothrow;
    int function(evp_pkey_ctx_st*) EVP_PKEY_CTX_get_cb(evp_pkey_ctx_st*) @nogc nothrow;
    void EVP_PKEY_CTX_set_cb(evp_pkey_ctx_st*, int function(evp_pkey_ctx_st*)) @nogc nothrow;
    comp_ctx_st* COMP_CTX_new(comp_method_st*) @nogc nothrow;
    const(comp_method_st)* COMP_CTX_get_method(const(comp_ctx_st)*) @nogc nothrow;
    int COMP_CTX_get_type(const(comp_ctx_st)*) @nogc nothrow;
    int COMP_get_type(const(comp_method_st)*) @nogc nothrow;
    const(char)* COMP_get_name(const(comp_method_st)*) @nogc nothrow;
    void COMP_CTX_free(comp_ctx_st*) @nogc nothrow;
    int COMP_compress_block(comp_ctx_st*, ubyte*, int, ubyte*, int) @nogc nothrow;
    int COMP_expand_block(comp_ctx_st*, ubyte*, int, ubyte*, int) @nogc nothrow;
    comp_method_st* COMP_zlib() @nogc nothrow;
    int EVP_PKEY_param_check(evp_pkey_ctx_st*) @nogc nothrow;
    int EVP_PKEY_public_check(evp_pkey_ctx_st*) @nogc nothrow;
    int ERR_load_COMP_strings() @nogc nothrow;
    int EVP_PKEY_check(evp_pkey_ctx_st*) @nogc nothrow;
    int EVP_PKEY_keygen(evp_pkey_ctx_st*, evp_pkey_st**) @nogc nothrow;
    int EVP_PKEY_keygen_init(evp_pkey_ctx_st*) @nogc nothrow;
    int EVP_PKEY_paramgen(evp_pkey_ctx_st*, evp_pkey_st**) @nogc nothrow;
    int EVP_PKEY_paramgen_init(evp_pkey_ctx_st*) @nogc nothrow;
    alias EVP_PKEY_gen_cb = int function(evp_pkey_ctx_st*);
    int EVP_PKEY_derive(evp_pkey_ctx_st*, ubyte*, c_ulong*) @nogc nothrow;
    int EVP_PKEY_derive_set_peer(evp_pkey_ctx_st*, evp_pkey_st*) @nogc nothrow;
    int EVP_PKEY_derive_init(evp_pkey_ctx_st*) @nogc nothrow;
    struct CONF_VALUE
    {
        char* section;
        char* name;
        char* value;
    }
    static int sk_CONF_VALUE_push(stack_st_CONF_VALUE*, CONF_VALUE*) @nogc nothrow;
    static int sk_CONF_VALUE_find_ex(stack_st_CONF_VALUE*, CONF_VALUE*) @nogc nothrow;
    struct stack_st_CONF_VALUE;
    alias sk_CONF_VALUE_compfunc = int function(const(const(CONF_VALUE)*)*, const(const(CONF_VALUE)*)*);
    alias sk_CONF_VALUE_freefunc = void function(CONF_VALUE*);
    alias sk_CONF_VALUE_copyfunc = CONF_VALUE* function(const(CONF_VALUE)*);
    static int sk_CONF_VALUE_num(const(stack_st_CONF_VALUE)*) @nogc nothrow;
    static CONF_VALUE* sk_CONF_VALUE_value(const(stack_st_CONF_VALUE)*, int) @nogc nothrow;
    static stack_st_CONF_VALUE* sk_CONF_VALUE_new(int function(const(const(CONF_VALUE)*)*, const(const(CONF_VALUE)*)*)) @nogc nothrow;
    static stack_st_CONF_VALUE* sk_CONF_VALUE_new_null() @nogc nothrow;
    static stack_st_CONF_VALUE* sk_CONF_VALUE_new_reserve(int function(const(const(CONF_VALUE)*)*, const(const(CONF_VALUE)*)*), int) @nogc nothrow;
    static int sk_CONF_VALUE_reserve(stack_st_CONF_VALUE*, int) @nogc nothrow;
    static void sk_CONF_VALUE_free(stack_st_CONF_VALUE*) @nogc nothrow;
    static void sk_CONF_VALUE_zero(stack_st_CONF_VALUE*) @nogc nothrow;
    static CONF_VALUE* sk_CONF_VALUE_delete(stack_st_CONF_VALUE*, int) @nogc nothrow;
    static CONF_VALUE* sk_CONF_VALUE_delete_ptr(stack_st_CONF_VALUE*, CONF_VALUE*) @nogc nothrow;
    static int sk_CONF_VALUE_unshift(stack_st_CONF_VALUE*, CONF_VALUE*) @nogc nothrow;
    static CONF_VALUE* sk_CONF_VALUE_pop(stack_st_CONF_VALUE*) @nogc nothrow;
    static CONF_VALUE* sk_CONF_VALUE_shift(stack_st_CONF_VALUE*) @nogc nothrow;
    static void sk_CONF_VALUE_pop_free(stack_st_CONF_VALUE*, void function(CONF_VALUE*)) @nogc nothrow;
    static int sk_CONF_VALUE_insert(stack_st_CONF_VALUE*, CONF_VALUE*, int) @nogc nothrow;
    static int function(const(const(CONF_VALUE)*)*, const(const(CONF_VALUE)*)*) sk_CONF_VALUE_set_cmp_func(stack_st_CONF_VALUE*, int function(const(const(CONF_VALUE)*)*, const(const(CONF_VALUE)*)*)) @nogc nothrow;
    static stack_st_CONF_VALUE* sk_CONF_VALUE_deep_copy(const(stack_st_CONF_VALUE)*, CONF_VALUE* function(const(CONF_VALUE)*), void function(CONF_VALUE*)) @nogc nothrow;
    static stack_st_CONF_VALUE* sk_CONF_VALUE_dup(const(stack_st_CONF_VALUE)*) @nogc nothrow;
    static int sk_CONF_VALUE_is_sorted(const(stack_st_CONF_VALUE)*) @nogc nothrow;
    static void sk_CONF_VALUE_sort(stack_st_CONF_VALUE*) @nogc nothrow;
    static CONF_VALUE* sk_CONF_VALUE_set(stack_st_CONF_VALUE*, int, CONF_VALUE*) @nogc nothrow;
    static int sk_CONF_VALUE_find(stack_st_CONF_VALUE*, CONF_VALUE*) @nogc nothrow;
    static void lh_CONF_VALUE_free(lhash_st_CONF_VALUE*) @nogc nothrow;
    struct lhash_st_CONF_VALUE
    {
        union lh_CONF_VALUE_dummy
        {
            void* d1;
            c_ulong d2;
            int d3;
        }
        lhash_st_CONF_VALUE.lh_CONF_VALUE_dummy dummy;
    }
    static void lh_CONF_VALUE_doall(lhash_st_CONF_VALUE*, void function(CONF_VALUE*)) @nogc nothrow;
    static void lh_CONF_VALUE_set_down_load(lhash_st_CONF_VALUE*, c_ulong) @nogc nothrow;
    static c_ulong lh_CONF_VALUE_get_down_load(lhash_st_CONF_VALUE*) @nogc nothrow;
    static void lh_CONF_VALUE_stats_bio(const(lhash_st_CONF_VALUE)*, bio_st*) @nogc nothrow;
    static void lh_CONF_VALUE_node_usage_stats_bio(const(lhash_st_CONF_VALUE)*, bio_st*) @nogc nothrow;
    static void lh_CONF_VALUE_node_stats_bio(const(lhash_st_CONF_VALUE)*, bio_st*) @nogc nothrow;
    static c_ulong lh_CONF_VALUE_num_items(lhash_st_CONF_VALUE*) @nogc nothrow;
    static int lh_CONF_VALUE_error(lhash_st_CONF_VALUE*) @nogc nothrow;
    static CONF_VALUE* lh_CONF_VALUE_retrieve(lhash_st_CONF_VALUE*, const(CONF_VALUE)*) @nogc nothrow;
    static CONF_VALUE* lh_CONF_VALUE_delete(lhash_st_CONF_VALUE*, const(CONF_VALUE)*) @nogc nothrow;
    static CONF_VALUE* lh_CONF_VALUE_insert(lhash_st_CONF_VALUE*, CONF_VALUE*) @nogc nothrow;
    static lhash_st_CONF_VALUE* lh_CONF_VALUE_new(c_ulong function(const(CONF_VALUE)*), int function(const(CONF_VALUE)*, const(CONF_VALUE)*)) @nogc nothrow;
    struct conf_method_st
    {
        const(char)* name;
        conf_st* function(conf_method_st*) create;
        int function(conf_st*) init;
        int function(conf_st*) destroy;
        int function(conf_st*) destroy_data;
        int function(conf_st*, bio_st*, c_long*) load_bio;
        int function(const(conf_st)*, bio_st*) dump;
        int function(const(conf_st)*, char) is_number;
        int function(const(conf_st)*, char) to_int;
        int function(conf_st*, const(char)*, c_long*) load;
    }
    alias CONF_METHOD = conf_method_st;
    alias CONF_IMODULE = conf_imodule_st;
    struct conf_imodule_st;
    alias CONF_MODULE = conf_module_st;
    struct conf_module_st;
    static int sk_CONF_MODULE_find_ex(stack_st_CONF_MODULE*, conf_module_st*) @nogc nothrow;
    static int function(const(const(conf_module_st)*)*, const(const(conf_module_st)*)*) sk_CONF_MODULE_set_cmp_func(stack_st_CONF_MODULE*, int function(const(const(conf_module_st)*)*, const(const(conf_module_st)*)*)) @nogc nothrow;
    static int sk_CONF_MODULE_is_sorted(const(stack_st_CONF_MODULE)*) @nogc nothrow;
    static conf_module_st* sk_CONF_MODULE_delete(stack_st_CONF_MODULE*, int) @nogc nothrow;
    static int sk_CONF_MODULE_push(stack_st_CONF_MODULE*, conf_module_st*) @nogc nothrow;
    static void sk_CONF_MODULE_zero(stack_st_CONF_MODULE*) @nogc nothrow;
    static void sk_CONF_MODULE_free(stack_st_CONF_MODULE*) @nogc nothrow;
    static int sk_CONF_MODULE_reserve(stack_st_CONF_MODULE*, int) @nogc nothrow;
    static int sk_CONF_MODULE_unshift(stack_st_CONF_MODULE*, conf_module_st*) @nogc nothrow;
    static conf_module_st* sk_CONF_MODULE_pop(stack_st_CONF_MODULE*) @nogc nothrow;
    static conf_module_st* sk_CONF_MODULE_shift(stack_st_CONF_MODULE*) @nogc nothrow;
    static void sk_CONF_MODULE_pop_free(stack_st_CONF_MODULE*, void function(conf_module_st*)) @nogc nothrow;
    static int sk_CONF_MODULE_insert(stack_st_CONF_MODULE*, conf_module_st*, int) @nogc nothrow;
    static conf_module_st* sk_CONF_MODULE_set(stack_st_CONF_MODULE*, int, conf_module_st*) @nogc nothrow;
    static int sk_CONF_MODULE_find(stack_st_CONF_MODULE*, conf_module_st*) @nogc nothrow;
    static stack_st_CONF_MODULE* sk_CONF_MODULE_new_reserve(int function(const(const(conf_module_st)*)*, const(const(conf_module_st)*)*), int) @nogc nothrow;
    static void sk_CONF_MODULE_sort(stack_st_CONF_MODULE*) @nogc nothrow;
    static stack_st_CONF_MODULE* sk_CONF_MODULE_new_null() @nogc nothrow;
    static conf_module_st* sk_CONF_MODULE_delete_ptr(stack_st_CONF_MODULE*, conf_module_st*) @nogc nothrow;
    static stack_st_CONF_MODULE* sk_CONF_MODULE_new(int function(const(const(conf_module_st)*)*, const(const(conf_module_st)*)*)) @nogc nothrow;
    static stack_st_CONF_MODULE* sk_CONF_MODULE_dup(const(stack_st_CONF_MODULE)*) @nogc nothrow;
    static int sk_CONF_MODULE_num(const(stack_st_CONF_MODULE)*) @nogc nothrow;
    alias sk_CONF_MODULE_copyfunc = conf_module_st* function(const(conf_module_st)*);
    alias sk_CONF_MODULE_freefunc = void function(conf_module_st*);
    alias sk_CONF_MODULE_compfunc = int function(const(const(conf_module_st)*)*, const(const(conf_module_st)*)*);
    struct stack_st_CONF_MODULE;
    static conf_module_st* sk_CONF_MODULE_value(const(stack_st_CONF_MODULE)*, int) @nogc nothrow;
    static stack_st_CONF_MODULE* sk_CONF_MODULE_deep_copy(const(stack_st_CONF_MODULE)*, conf_module_st* function(const(conf_module_st)*), void function(conf_module_st*)) @nogc nothrow;
    static void sk_CONF_IMODULE_pop_free(stack_st_CONF_IMODULE*, void function(conf_imodule_st*)) @nogc nothrow;
    static int sk_CONF_IMODULE_insert(stack_st_CONF_IMODULE*, conf_imodule_st*, int) @nogc nothrow;
    static conf_imodule_st* sk_CONF_IMODULE_set(stack_st_CONF_IMODULE*, int, conf_imodule_st*) @nogc nothrow;
    static int sk_CONF_IMODULE_find(stack_st_CONF_IMODULE*, conf_imodule_st*) @nogc nothrow;
    static int sk_CONF_IMODULE_find_ex(stack_st_CONF_IMODULE*, conf_imodule_st*) @nogc nothrow;
    static void sk_CONF_IMODULE_sort(stack_st_CONF_IMODULE*) @nogc nothrow;
    static int sk_CONF_IMODULE_is_sorted(const(stack_st_CONF_IMODULE)*) @nogc nothrow;
    static stack_st_CONF_IMODULE* sk_CONF_IMODULE_dup(const(stack_st_CONF_IMODULE)*) @nogc nothrow;
    static stack_st_CONF_IMODULE* sk_CONF_IMODULE_deep_copy(const(stack_st_CONF_IMODULE)*, conf_imodule_st* function(const(conf_imodule_st)*), void function(conf_imodule_st*)) @nogc nothrow;
    static int function(const(const(conf_imodule_st)*)*, const(const(conf_imodule_st)*)*) sk_CONF_IMODULE_set_cmp_func(stack_st_CONF_IMODULE*, int function(const(const(conf_imodule_st)*)*, const(const(conf_imodule_st)*)*)) @nogc nothrow;
    struct stack_st_CONF_IMODULE;
    static conf_imodule_st* sk_CONF_IMODULE_shift(stack_st_CONF_IMODULE*) @nogc nothrow;
    static int sk_CONF_IMODULE_unshift(stack_st_CONF_IMODULE*, conf_imodule_st*) @nogc nothrow;
    static int sk_CONF_IMODULE_push(stack_st_CONF_IMODULE*, conf_imodule_st*) @nogc nothrow;
    static conf_imodule_st* sk_CONF_IMODULE_delete_ptr(stack_st_CONF_IMODULE*, conf_imodule_st*) @nogc nothrow;
    static conf_imodule_st* sk_CONF_IMODULE_delete(stack_st_CONF_IMODULE*, int) @nogc nothrow;
    static void sk_CONF_IMODULE_zero(stack_st_CONF_IMODULE*) @nogc nothrow;
    alias sk_CONF_IMODULE_compfunc = int function(const(const(conf_imodule_st)*)*, const(const(conf_imodule_st)*)*);
    alias sk_CONF_IMODULE_freefunc = void function(conf_imodule_st*);
    alias sk_CONF_IMODULE_copyfunc = conf_imodule_st* function(const(conf_imodule_st)*);
    static conf_imodule_st* sk_CONF_IMODULE_pop(stack_st_CONF_IMODULE*) @nogc nothrow;
    static int sk_CONF_IMODULE_num(const(stack_st_CONF_IMODULE)*) @nogc nothrow;
    static conf_imodule_st* sk_CONF_IMODULE_value(const(stack_st_CONF_IMODULE)*, int) @nogc nothrow;
    static stack_st_CONF_IMODULE* sk_CONF_IMODULE_new(int function(const(const(conf_imodule_st)*)*, const(const(conf_imodule_st)*)*)) @nogc nothrow;
    static stack_st_CONF_IMODULE* sk_CONF_IMODULE_new_null() @nogc nothrow;
    static stack_st_CONF_IMODULE* sk_CONF_IMODULE_new_reserve(int function(const(const(conf_imodule_st)*)*, const(const(conf_imodule_st)*)*), int) @nogc nothrow;
    static int sk_CONF_IMODULE_reserve(stack_st_CONF_IMODULE*, int) @nogc nothrow;
    static void sk_CONF_IMODULE_free(stack_st_CONF_IMODULE*) @nogc nothrow;
    alias conf_init_func = int function(conf_imodule_st*, const(conf_st)*);
    alias conf_finish_func = void function(conf_imodule_st*);
    int EVP_PKEY_decrypt(evp_pkey_ctx_st*, ubyte*, c_ulong*, const(ubyte)*, c_ulong) @nogc nothrow;
    int EVP_PKEY_decrypt_init(evp_pkey_ctx_st*) @nogc nothrow;
    int EVP_PKEY_encrypt(evp_pkey_ctx_st*, ubyte*, c_ulong*, const(ubyte)*, c_ulong) @nogc nothrow;
    int EVP_PKEY_encrypt_init(evp_pkey_ctx_st*) @nogc nothrow;
    int EVP_PKEY_verify_recover(evp_pkey_ctx_st*, ubyte*, c_ulong*, const(ubyte)*, c_ulong) @nogc nothrow;
    int EVP_PKEY_verify_recover_init(evp_pkey_ctx_st*) @nogc nothrow;
    int CONF_set_default_method(conf_method_st*) @nogc nothrow;
    void CONF_set_nconf(conf_st*, lhash_st_CONF_VALUE*) @nogc nothrow;
    lhash_st_CONF_VALUE* CONF_load(lhash_st_CONF_VALUE*, const(char)*, c_long*) @nogc nothrow;
    lhash_st_CONF_VALUE* CONF_load_fp(lhash_st_CONF_VALUE*, _IO_FILE*, c_long*) @nogc nothrow;
    lhash_st_CONF_VALUE* CONF_load_bio(lhash_st_CONF_VALUE*, bio_st*, c_long*) @nogc nothrow;
    stack_st_CONF_VALUE* CONF_get_section(lhash_st_CONF_VALUE*, const(char)*) @nogc nothrow;
    char* CONF_get_string(lhash_st_CONF_VALUE*, const(char)*, const(char)*) @nogc nothrow;
    c_long CONF_get_number(lhash_st_CONF_VALUE*, const(char)*, const(char)*) @nogc nothrow;
    void CONF_free(lhash_st_CONF_VALUE*) @nogc nothrow;
    int CONF_dump_fp(lhash_st_CONF_VALUE*, _IO_FILE*) @nogc nothrow;
    int CONF_dump_bio(lhash_st_CONF_VALUE*, bio_st*) @nogc nothrow;
    void OPENSSL_config(const(char)*) @nogc nothrow;
    int EVP_PKEY_verify(evp_pkey_ctx_st*, const(ubyte)*, c_ulong, const(ubyte)*, c_ulong) @nogc nothrow;
    conf_st* NCONF_new(conf_method_st*) @nogc nothrow;
    conf_method_st* NCONF_default() @nogc nothrow;
    conf_method_st* NCONF_WIN32() @nogc nothrow;
    void NCONF_free(conf_st*) @nogc nothrow;
    void NCONF_free_data(conf_st*) @nogc nothrow;
    int NCONF_load(conf_st*, const(char)*, c_long*) @nogc nothrow;
    int NCONF_load_fp(conf_st*, _IO_FILE*, c_long*) @nogc nothrow;
    int NCONF_load_bio(conf_st*, bio_st*, c_long*) @nogc nothrow;
    stack_st_CONF_VALUE* NCONF_get_section(const(conf_st)*, const(char)*) @nogc nothrow;
    char* NCONF_get_string(const(conf_st)*, const(char)*, const(char)*) @nogc nothrow;
    int NCONF_get_number_e(const(conf_st)*, const(char)*, const(char)*, c_long*) @nogc nothrow;
    int NCONF_dump_fp(const(conf_st)*, _IO_FILE*) @nogc nothrow;
    int NCONF_dump_bio(const(conf_st)*, bio_st*) @nogc nothrow;
    int EVP_PKEY_verify_init(evp_pkey_ctx_st*) @nogc nothrow;
    int CONF_modules_load(const(conf_st)*, const(char)*, c_ulong) @nogc nothrow;
    int CONF_modules_load_file(const(char)*, const(char)*, c_ulong) @nogc nothrow;
    void CONF_modules_unload(int) @nogc nothrow;
    void CONF_modules_finish() @nogc nothrow;
    int EVP_PKEY_sign(evp_pkey_ctx_st*, ubyte*, c_ulong*, const(ubyte)*, c_ulong) @nogc nothrow;
    int CONF_module_add(const(char)*, int function(conf_imodule_st*, const(conf_st)*), void function(conf_imodule_st*)) @nogc nothrow;
    const(char)* CONF_imodule_get_name(const(conf_imodule_st)*) @nogc nothrow;
    const(char)* CONF_imodule_get_value(const(conf_imodule_st)*) @nogc nothrow;
    void* CONF_imodule_get_usr_data(const(conf_imodule_st)*) @nogc nothrow;
    void CONF_imodule_set_usr_data(conf_imodule_st*, void*) @nogc nothrow;
    conf_module_st* CONF_imodule_get_module(const(conf_imodule_st)*) @nogc nothrow;
    c_ulong CONF_imodule_get_flags(const(conf_imodule_st)*) @nogc nothrow;
    void CONF_imodule_set_flags(conf_imodule_st*, c_ulong) @nogc nothrow;
    void* CONF_module_get_usr_data(conf_module_st*) @nogc nothrow;
    void CONF_module_set_usr_data(conf_module_st*, void*) @nogc nothrow;
    char* CONF_get1_default_config_file() @nogc nothrow;
    int CONF_parse_list(const(char)*, int, int, int function(const(char)*, int, void*), void*) @nogc nothrow;
    void OPENSSL_load_builtin_modules() @nogc nothrow;
    int EVP_PKEY_sign_init(evp_pkey_ctx_st*) @nogc nothrow;
    int ERR_load_CONF_strings() @nogc nothrow;
    void* EVP_PKEY_CTX_get_app_data(evp_pkey_ctx_st*) @nogc nothrow;
    void EVP_PKEY_CTX_set_app_data(evp_pkey_ctx_st*, void*) @nogc nothrow;
    evp_pkey_st* EVP_PKEY_CTX_get0_peerkey(evp_pkey_ctx_st*) @nogc nothrow;
    evp_pkey_st* EVP_PKEY_CTX_get0_pkey(evp_pkey_ctx_st*) @nogc nothrow;
    void* EVP_PKEY_CTX_get_data(evp_pkey_ctx_st*) @nogc nothrow;
    void EVP_PKEY_CTX_set_data(evp_pkey_ctx_st*, void*) @nogc nothrow;
    evp_pkey_st* EVP_PKEY_new_CMAC_key(engine_st*, const(ubyte)*, c_ulong, const(evp_cipher_st)*) @nogc nothrow;
    int EVP_PKEY_get_raw_public_key(const(evp_pkey_st)*, ubyte*, c_ulong*) @nogc nothrow;
    int EVP_PKEY_get_raw_private_key(const(evp_pkey_st)*, ubyte*, c_ulong*) @nogc nothrow;
    evp_pkey_st* EVP_PKEY_new_raw_public_key(int, engine_st*, const(ubyte)*, c_ulong) @nogc nothrow;
    evp_pkey_st* EVP_PKEY_new_raw_private_key(int, engine_st*, const(ubyte)*, c_ulong) @nogc nothrow;
    evp_pkey_st* EVP_PKEY_new_mac_key(int, engine_st*, const(ubyte)*, int) @nogc nothrow;
    void EVP_PKEY_CTX_set0_keygen_info(evp_pkey_ctx_st*, int*, int) @nogc nothrow;
    int EVP_PKEY_CTX_get_operation(evp_pkey_ctx_st*) @nogc nothrow;
    int EVP_PKEY_CTX_md(evp_pkey_ctx_st*, int, int, const(char)*) @nogc nothrow;
    int EVP_PKEY_CTX_hex2ctrl(evp_pkey_ctx_st*, int, const(char)*) @nogc nothrow;
    int EVP_PKEY_CTX_str2ctrl(evp_pkey_ctx_st*, int, const(char)*) @nogc nothrow;
    int EVP_PKEY_CTX_ctrl_uint64(evp_pkey_ctx_st*, int, int, int, c_ulong) @nogc nothrow;
    int EVP_PKEY_CTX_ctrl_str(evp_pkey_ctx_st*, const(char)*, const(char)*) @nogc nothrow;
    int EVP_PKEY_CTX_ctrl(evp_pkey_ctx_st*, int, int, int, int, void*) @nogc nothrow;
    void EVP_PKEY_CTX_free(evp_pkey_ctx_st*) @nogc nothrow;
    evp_pkey_ctx_st* EVP_PKEY_CTX_dup(evp_pkey_ctx_st*) @nogc nothrow;
    evp_pkey_ctx_st* EVP_PKEY_CTX_new_id(int, engine_st*) @nogc nothrow;
    evp_pkey_ctx_st* EVP_PKEY_CTX_new(evp_pkey_st*, engine_st*) @nogc nothrow;
    const(evp_pkey_method_st)* EVP_PKEY_meth_get0(c_ulong) @nogc nothrow;
    c_ulong EVP_PKEY_meth_get_count() @nogc nothrow;
    int EVP_PKEY_meth_remove(const(evp_pkey_method_st)*) @nogc nothrow;
    int EVP_PKEY_meth_add0(const(evp_pkey_method_st)*) @nogc nothrow;
    void EVP_PKEY_meth_free(evp_pkey_method_st*) @nogc nothrow;
    void EVP_PKEY_meth_copy(evp_pkey_method_st*, const(evp_pkey_method_st)*) @nogc nothrow;
    void EVP_PKEY_meth_get0_info(int*, int*, const(evp_pkey_method_st)*) @nogc nothrow;
    evp_pkey_method_st* EVP_PKEY_meth_new(int, int) @nogc nothrow;
    const(evp_pkey_method_st)* EVP_PKEY_meth_find(int) @nogc nothrow;
    void EVP_PKEY_asn1_set_security_bits(evp_pkey_asn1_method_st*, int function(const(evp_pkey_st)*)) @nogc nothrow;
    void EVP_PKEY_asn1_set_get_pub_key(evp_pkey_asn1_method_st*, int function(const(evp_pkey_st)*, ubyte*, c_ulong*)) @nogc nothrow;
    void EVP_PKEY_asn1_set_get_priv_key(evp_pkey_asn1_method_st*, int function(const(evp_pkey_st)*, ubyte*, c_ulong*)) @nogc nothrow;
    void EVP_PKEY_asn1_set_set_pub_key(evp_pkey_asn1_method_st*, int function(evp_pkey_st*, const(ubyte)*, c_ulong)) @nogc nothrow;
    void EVP_PKEY_asn1_set_set_priv_key(evp_pkey_asn1_method_st*, int function(evp_pkey_st*, const(ubyte)*, c_ulong)) @nogc nothrow;
    void EVP_PKEY_asn1_set_param_check(evp_pkey_asn1_method_st*, int function(const(evp_pkey_st)*)) @nogc nothrow;
    void EVP_PKEY_asn1_set_public_check(evp_pkey_asn1_method_st*, int function(const(evp_pkey_st)*)) @nogc nothrow;
    void EVP_PKEY_asn1_set_check(evp_pkey_asn1_method_st*, int function(const(evp_pkey_st)*)) @nogc nothrow;
    void EVP_PKEY_asn1_set_siginf(evp_pkey_asn1_method_st*, int function(x509_sig_info_st*, const(X509_algor_st)*, const(asn1_string_st)*)) @nogc nothrow;
    void EVP_PKEY_asn1_set_item(evp_pkey_asn1_method_st*, int function(evp_md_ctx_st*, const(ASN1_ITEM_st)*, void*, X509_algor_st*, asn1_string_st*, evp_pkey_st*), int function(evp_md_ctx_st*, const(ASN1_ITEM_st)*, void*, X509_algor_st*, X509_algor_st*, asn1_string_st*)) @nogc nothrow;
    void EVP_PKEY_asn1_set_ctrl(evp_pkey_asn1_method_st*, int function(evp_pkey_st*, int, c_long, void*)) @nogc nothrow;
    void EVP_PKEY_asn1_set_free(evp_pkey_asn1_method_st*, void function(evp_pkey_st*)) @nogc nothrow;
    void EVP_PKEY_asn1_set_param(evp_pkey_asn1_method_st*, int function(evp_pkey_st*, const(ubyte)**, int), int function(const(evp_pkey_st)*, ubyte**), int function(const(evp_pkey_st)*), int function(evp_pkey_st*, const(evp_pkey_st)*), int function(const(evp_pkey_st)*, const(evp_pkey_st)*), int function(bio_st*, const(evp_pkey_st)*, int, asn1_pctx_st*)) @nogc nothrow;
    void EVP_PKEY_asn1_set_private(evp_pkey_asn1_method_st*, int function(evp_pkey_st*, const(pkcs8_priv_key_info_st)*), int function(pkcs8_priv_key_info_st*, const(evp_pkey_st)*), int function(bio_st*, const(evp_pkey_st)*, int, asn1_pctx_st*)) @nogc nothrow;
    void EVP_PKEY_asn1_set_public(evp_pkey_asn1_method_st*, int function(evp_pkey_st*, X509_pubkey_st*), int function(X509_pubkey_st*, const(evp_pkey_st)*), int function(const(evp_pkey_st)*, const(evp_pkey_st)*), int function(bio_st*, const(evp_pkey_st)*, int, asn1_pctx_st*), int function(const(evp_pkey_st)*), int function(const(evp_pkey_st)*)) @nogc nothrow;
    void EVP_PKEY_asn1_free(evp_pkey_asn1_method_st*) @nogc nothrow;
    void EVP_PKEY_asn1_copy(evp_pkey_asn1_method_st*, const(evp_pkey_asn1_method_st)*) @nogc nothrow;
    evp_pkey_asn1_method_st* EVP_PKEY_asn1_new(int, int, const(char)*, const(char)*) @nogc nothrow;
    const(evp_pkey_asn1_method_st)* EVP_PKEY_get0_asn1(const(evp_pkey_st)*) @nogc nothrow;
    int EVP_PKEY_asn1_get0_info(int*, int*, int*, const(char)**, const(char)**, const(evp_pkey_asn1_method_st)*) @nogc nothrow;
    int EVP_PKEY_asn1_add_alias(int, int) @nogc nothrow;
    struct CRYPTO_dynlock
    {
        int dummy;
    }
    alias CRYPTO_RWLOCK = void;
    void* CRYPTO_THREAD_lock_new() @nogc nothrow;
    int CRYPTO_THREAD_read_lock(void*) @nogc nothrow;
    int CRYPTO_THREAD_write_lock(void*) @nogc nothrow;
    int CRYPTO_THREAD_unlock(void*) @nogc nothrow;
    void CRYPTO_THREAD_lock_free(void*) @nogc nothrow;
    int CRYPTO_atomic_add(int*, int, int*, void*) @nogc nothrow;
    int EVP_PKEY_asn1_add0(const(evp_pkey_asn1_method_st)*) @nogc nothrow;
    const(evp_pkey_asn1_method_st)* EVP_PKEY_asn1_find_str(engine_st**, const(char)*, int) @nogc nothrow;
    const(evp_pkey_asn1_method_st)* EVP_PKEY_asn1_find(engine_st**, int) @nogc nothrow;
    const(evp_pkey_asn1_method_st)* EVP_PKEY_asn1_get0(int) @nogc nothrow;
    struct stack_st_void;
    static int sk_void_find(stack_st_void*, void*) @nogc nothrow;
    static void* sk_void_set(stack_st_void*, int, void*) @nogc nothrow;
    static int sk_void_insert(stack_st_void*, void*, int) @nogc nothrow;
    static void sk_void_pop_free(stack_st_void*, void function(void*)) @nogc nothrow;
    static void* sk_void_shift(stack_st_void*) @nogc nothrow;
    static void* sk_void_pop(stack_st_void*) @nogc nothrow;
    static int sk_void_unshift(stack_st_void*, void*) @nogc nothrow;
    static int sk_void_push(stack_st_void*, void*) @nogc nothrow;
    static void* sk_void_delete_ptr(stack_st_void*, void*) @nogc nothrow;
    static void* sk_void_delete(stack_st_void*, int) @nogc nothrow;
    static void sk_void_zero(stack_st_void*) @nogc nothrow;
    static int sk_void_reserve(stack_st_void*, int) @nogc nothrow;
    static stack_st_void* sk_void_new_reserve(int function(const(const(void)*)*, const(const(void)*)*), int) @nogc nothrow;
    static stack_st_void* sk_void_new_null() @nogc nothrow;
    static stack_st_void* sk_void_new(int function(const(const(void)*)*, const(const(void)*)*)) @nogc nothrow;
    static void* sk_void_value(const(stack_st_void)*, int) @nogc nothrow;
    static int sk_void_num(const(stack_st_void)*) @nogc nothrow;
    alias sk_void_copyfunc = void* function(const(void)*);
    alias sk_void_freefunc = void function(void*);
    alias sk_void_compfunc = int function(const(const(void)*)*, const(const(void)*)*);
    static int sk_void_find_ex(stack_st_void*, void*) @nogc nothrow;
    static void sk_void_free(stack_st_void*) @nogc nothrow;
    static void sk_void_sort(stack_st_void*) @nogc nothrow;
    static int sk_void_is_sorted(const(stack_st_void)*) @nogc nothrow;
    static stack_st_void* sk_void_dup(const(stack_st_void)*) @nogc nothrow;
    static stack_st_void* sk_void_deep_copy(const(stack_st_void)*, void* function(const(void)*), void function(void*)) @nogc nothrow;
    static int function(const(const(void)*)*, const(const(void)*)*) sk_void_set_cmp_func(stack_st_void*, int function(const(const(void)*)*, const(const(void)*)*)) @nogc nothrow;
    int EVP_PKEY_asn1_get_count() @nogc nothrow;
    int EVP_PBE_get(int*, int*, c_ulong) @nogc nothrow;
    void EVP_PBE_cleanup() @nogc nothrow;
    int EVP_PBE_find(int, int, int*, int*, int function(evp_cipher_ctx_st*, const(char)*, int, asn1_type_st*, const(evp_cipher_st)*, const(evp_md_st)*, int)*) @nogc nothrow;
    int EVP_PBE_alg_add(int, const(evp_cipher_st)*, const(evp_md_st)*, int function(evp_cipher_ctx_st*, const(char)*, int, asn1_type_st*, const(evp_cipher_st)*, const(evp_md_st)*, int)) @nogc nothrow;
    int EVP_PBE_alg_add_type(int, int, int, int, int function(evp_cipher_ctx_st*, const(char)*, int, asn1_type_st*, const(evp_cipher_st)*, const(evp_md_st)*, int)) @nogc nothrow;
    int EVP_PBE_CipherInit(asn1_object_st*, const(char)*, int, asn1_type_st*, evp_cipher_ctx_st*, int) @nogc nothrow;
    void PKCS5_PBE_add() @nogc nothrow;
    int PKCS5_v2_scrypt_keyivgen(evp_cipher_ctx_st*, const(char)*, int, asn1_type_st*, const(evp_cipher_st)*, const(evp_md_st)*, int) @nogc nothrow;
    int EVP_PBE_scrypt(const(char)*, c_ulong, const(ubyte)*, c_ulong, c_ulong, c_ulong, c_ulong, c_ulong, ubyte*, c_ulong) @nogc nothrow;
    int PKCS5_v2_PBE_keyivgen(evp_cipher_ctx_st*, const(char)*, int, asn1_type_st*, const(evp_cipher_st)*, const(evp_md_st)*, int) @nogc nothrow;
    int PKCS5_PBKDF2_HMAC(const(char)*, int, const(ubyte)*, int, int, const(evp_md_st)*, int, ubyte*) @nogc nothrow;
    int PKCS5_PBKDF2_HMAC_SHA1(const(char)*, int, const(ubyte)*, int, int, int, ubyte*) @nogc nothrow;
    int PKCS5_PBE_keyivgen(evp_cipher_ctx_st*, const(char)*, int, asn1_type_st*, const(evp_cipher_st)*, const(evp_md_st)*, int) @nogc nothrow;
    int EVP_CIPHER_get_asn1_iv(evp_cipher_ctx_st*, asn1_type_st*) @nogc nothrow;
    int EVP_CIPHER_set_asn1_iv(evp_cipher_ctx_st*, asn1_type_st*) @nogc nothrow;
    int EVP_CIPHER_asn1_to_param(evp_cipher_ctx_st*, asn1_type_st*) @nogc nothrow;
    int EVP_CIPHER_param_to_asn1(evp_cipher_ctx_st*, asn1_type_st*) @nogc nothrow;
    int CRYPTO_mem_ctrl(int) @nogc nothrow;
    int EVP_CIPHER_type(const(evp_cipher_st)*) @nogc nothrow;
    c_ulong EVP_PKEY_get1_tls_encodedpoint(evp_pkey_st*, ubyte**) @nogc nothrow;
    int EVP_PKEY_set1_tls_encodedpoint(evp_pkey_st*, const(ubyte)*, c_ulong) @nogc nothrow;
    int EVP_PKEY_get_default_digest_nid(evp_pkey_st*, int*) @nogc nothrow;
    int EVP_PKEY_print_params(bio_st*, const(evp_pkey_st)*, int, asn1_pctx_st*) @nogc nothrow;
    int EVP_PKEY_print_private(bio_st*, const(evp_pkey_st)*, int, asn1_pctx_st*) @nogc nothrow;
    int EVP_PKEY_print_public(bio_st*, const(evp_pkey_st)*, int, asn1_pctx_st*) @nogc nothrow;
    int EVP_PKEY_cmp(const(evp_pkey_st)*, const(evp_pkey_st)*) @nogc nothrow;
    int EVP_PKEY_cmp_parameters(const(evp_pkey_st)*, const(evp_pkey_st)*) @nogc nothrow;
    int EVP_PKEY_save_parameters(evp_pkey_st*, int) @nogc nothrow;
    int EVP_PKEY_missing_parameters(const(evp_pkey_st)*) @nogc nothrow;
    int EVP_PKEY_copy_parameters(evp_pkey_st*, const(evp_pkey_st)*) @nogc nothrow;
    int i2d_PrivateKey(evp_pkey_st*, ubyte**) @nogc nothrow;
    evp_pkey_st* d2i_AutoPrivateKey(evp_pkey_st**, const(ubyte)**, c_long) @nogc nothrow;
    c_ulong OPENSSL_strlcpy(char*, const(char)*, c_ulong) @nogc nothrow;
    c_ulong OPENSSL_strlcat(char*, const(char)*, c_ulong) @nogc nothrow;
    c_ulong OPENSSL_strnlen(const(char)*, c_ulong) @nogc nothrow;
    char* OPENSSL_buf2hexstr(const(ubyte)*, c_long) @nogc nothrow;
    ubyte* OPENSSL_hexstr2buf(const(char)*, c_long*) @nogc nothrow;
    int OPENSSL_hexchar2int(ubyte) @nogc nothrow;
    evp_pkey_st* d2i_PrivateKey(int, evp_pkey_st**, const(ubyte)**, c_long) @nogc nothrow;
    c_ulong OpenSSL_version_num() @nogc nothrow;
    const(char)* OpenSSL_version(int) @nogc nothrow;
    int i2d_PublicKey(evp_pkey_st*, ubyte**) @nogc nothrow;
    evp_pkey_st* d2i_PublicKey(int, evp_pkey_st**, const(ubyte)**, c_long) @nogc nothrow;
    void EVP_PKEY_free(evp_pkey_st*) @nogc nothrow;
    int EVP_PKEY_up_ref(evp_pkey_st*) @nogc nothrow;
    evp_pkey_st* EVP_PKEY_new() @nogc nothrow;
    ec_key_st* EVP_PKEY_get1_EC_KEY(evp_pkey_st*) @nogc nothrow;
    int OPENSSL_issetugid() @nogc nothrow;
    alias CRYPTO_EX_new = void function(void*, void*, crypto_ex_data_st*, int, c_long, void*);
    alias CRYPTO_EX_free = void function(void*, void*, crypto_ex_data_st*, int, c_long, void*);
    alias CRYPTO_EX_dup = int function(crypto_ex_data_st*, const(crypto_ex_data_st)*, void*, int, c_long, void*);
    int CRYPTO_get_ex_new_index(int, c_long, void*, void function(void*, void*, crypto_ex_data_st*, int, c_long, void*), int function(crypto_ex_data_st*, const(crypto_ex_data_st)*, void*, int, c_long, void*), void function(void*, void*, crypto_ex_data_st*, int, c_long, void*)) @nogc nothrow;
    int CRYPTO_free_ex_index(int, int) @nogc nothrow;
    int CRYPTO_new_ex_data(int, void*, crypto_ex_data_st*) @nogc nothrow;
    int CRYPTO_dup_ex_data(int, crypto_ex_data_st*, const(crypto_ex_data_st)*) @nogc nothrow;
    void CRYPTO_free_ex_data(int, void*, crypto_ex_data_st*) @nogc nothrow;
    int CRYPTO_set_ex_data(crypto_ex_data_st*, int, void*) @nogc nothrow;
    void* CRYPTO_get_ex_data(const(crypto_ex_data_st)*, int) @nogc nothrow;
    ec_key_st* EVP_PKEY_get0_EC_KEY(evp_pkey_st*) @nogc nothrow;
    int EVP_PKEY_set1_EC_KEY(evp_pkey_st*, ec_key_st*) @nogc nothrow;
    dh_st* EVP_PKEY_get1_DH(evp_pkey_st*) @nogc nothrow;
    dh_st* EVP_PKEY_get0_DH(evp_pkey_st*) @nogc nothrow;
    int EVP_PKEY_set1_DH(evp_pkey_st*, dh_st*) @nogc nothrow;
    dsa_st* EVP_PKEY_get1_DSA(evp_pkey_st*) @nogc nothrow;
    dsa_st* EVP_PKEY_get0_DSA(evp_pkey_st*) @nogc nothrow;
    int EVP_PKEY_set1_DSA(evp_pkey_st*, dsa_st*) @nogc nothrow;
    rsa_st* EVP_PKEY_get1_RSA(evp_pkey_st*) @nogc nothrow;
    rsa_st* EVP_PKEY_get0_RSA(evp_pkey_st*) @nogc nothrow;
    alias CRYPTO_THREADID = crypto_threadid_st;
    struct crypto_threadid_st
    {
        int dummy;
    }
    int EVP_PKEY_set1_RSA(evp_pkey_st*, rsa_st*) @nogc nothrow;
    const(ubyte)* EVP_PKEY_get0_siphash(const(evp_pkey_st)*, c_ulong*) @nogc nothrow;
    const(ubyte)* EVP_PKEY_get0_poly1305(const(evp_pkey_st)*, c_ulong*) @nogc nothrow;
    const(ubyte)* EVP_PKEY_get0_hmac(const(evp_pkey_st)*, c_ulong*) @nogc nothrow;
    void* EVP_PKEY_get0(const(evp_pkey_st)*) @nogc nothrow;
    int EVP_PKEY_assign(evp_pkey_st*, int, void*) @nogc nothrow;
    engine_st* EVP_PKEY_get0_engine(const(evp_pkey_st)*) @nogc nothrow;
    int EVP_PKEY_set1_engine(evp_pkey_st*, engine_st*) @nogc nothrow;
    int EVP_PKEY_set_alias_type(evp_pkey_st*, int) @nogc nothrow;
    int EVP_PKEY_set_type_str(evp_pkey_st*, const(char)*, int) @nogc nothrow;
    int EVP_PKEY_set_type(evp_pkey_st*, int) @nogc nothrow;
    int EVP_PKEY_size(const(evp_pkey_st)*) @nogc nothrow;
    int EVP_PKEY_security_bits(const(evp_pkey_st)*) @nogc nothrow;
    int EVP_PKEY_bits(const(evp_pkey_st)*) @nogc nothrow;
    int EVP_PKEY_base_id(const(evp_pkey_st)*) @nogc nothrow;
    int EVP_PKEY_id(const(evp_pkey_st)*) @nogc nothrow;
    int EVP_PKEY_type(int) @nogc nothrow;
    int CRYPTO_set_mem_functions(void* function(c_ulong, const(char)*, int), void* function(void*, c_ulong, const(char)*, int), void function(void*, const(char)*, int)) @nogc nothrow;
    int CRYPTO_set_mem_debug(int) @nogc nothrow;
    void CRYPTO_get_mem_functions(void* function(c_ulong, const(char)*, int)*, void* function(void*, c_ulong, const(char)*, int)*, void function(void*, const(char)*, int)*) @nogc nothrow;
    void* CRYPTO_malloc(c_ulong, const(char)*, int) @nogc nothrow;
    void* CRYPTO_zalloc(c_ulong, const(char)*, int) @nogc nothrow;
    void* CRYPTO_memdup(const(void)*, c_ulong, const(char)*, int) @nogc nothrow;
    char* CRYPTO_strdup(const(char)*, const(char)*, int) @nogc nothrow;
    char* CRYPTO_strndup(const(char)*, c_ulong, const(char)*, int) @nogc nothrow;
    void CRYPTO_free(void*, const(char)*, int) @nogc nothrow;
    void CRYPTO_clear_free(void*, c_ulong, const(char)*, int) @nogc nothrow;
    void* CRYPTO_realloc(void*, c_ulong, const(char)*, int) @nogc nothrow;
    void* CRYPTO_clear_realloc(void*, c_ulong, c_ulong, const(char)*, int) @nogc nothrow;
    int CRYPTO_secure_malloc_init(c_ulong, int) @nogc nothrow;
    int CRYPTO_secure_malloc_done() @nogc nothrow;
    void* CRYPTO_secure_malloc(c_ulong, const(char)*, int) @nogc nothrow;
    void* CRYPTO_secure_zalloc(c_ulong, const(char)*, int) @nogc nothrow;
    void CRYPTO_secure_free(void*, const(char)*, int) @nogc nothrow;
    void CRYPTO_secure_clear_free(void*, c_ulong, const(char)*, int) @nogc nothrow;
    int CRYPTO_secure_allocated(const(void)*) @nogc nothrow;
    int CRYPTO_secure_malloc_initialized() @nogc nothrow;
    c_ulong CRYPTO_secure_actual_size(void*) @nogc nothrow;
    c_ulong CRYPTO_secure_used() @nogc nothrow;
    void OPENSSL_cleanse(void*, c_ulong) @nogc nothrow;
    void OPENSSL_die(const(char)*, const(char)*, int) @nogc nothrow;
    int EVP_PKEY_encrypt_old(ubyte*, const(ubyte)*, int, evp_pkey_st*) @nogc nothrow;
    int EVP_PKEY_decrypt_old(ubyte*, const(ubyte)*, int, evp_pkey_st*) @nogc nothrow;
    int OPENSSL_isservice() @nogc nothrow;
    int FIPS_mode() @nogc nothrow;
    int FIPS_mode_set(int) @nogc nothrow;
    void OPENSSL_init() @nogc nothrow;
    void OPENSSL_fork_prepare() @nogc nothrow;
    void OPENSSL_fork_parent() @nogc nothrow;
    void OPENSSL_fork_child() @nogc nothrow;
    tm* OPENSSL_gmtime(const(c_long)*, tm*) @nogc nothrow;
    int OPENSSL_gmtime_adj(tm*, int, c_long) @nogc nothrow;
    int OPENSSL_gmtime_diff(int*, int*, const(tm)*, const(tm)*) @nogc nothrow;
    int CRYPTO_memcmp(const(void)*, const(void)*, c_ulong) @nogc nothrow;
    void EVP_MD_do_all_sorted(void function(const(evp_md_st)*, const(char)*, const(char)*, void*), void*) @nogc nothrow;
    void EVP_MD_do_all(void function(const(evp_md_st)*, const(char)*, const(char)*, void*), void*) @nogc nothrow;
    void EVP_CIPHER_do_all_sorted(void function(const(evp_cipher_st)*, const(char)*, const(char)*, void*), void*) @nogc nothrow;
    void EVP_CIPHER_do_all(void function(const(evp_cipher_st)*, const(char)*, const(char)*, void*), void*) @nogc nothrow;
    const(evp_md_st)* EVP_get_digestbyname(const(char)*) @nogc nothrow;
    const(evp_cipher_st)* EVP_get_cipherbyname(const(char)*) @nogc nothrow;
    int EVP_add_digest(const(evp_md_st)*) @nogc nothrow;
    int EVP_add_cipher(const(evp_cipher_st)*) @nogc nothrow;
    const(evp_cipher_st)* EVP_sm4_ctr() @nogc nothrow;
    const(evp_cipher_st)* EVP_sm4_ofb() @nogc nothrow;
    const(evp_cipher_st)* EVP_sm4_cfb128() @nogc nothrow;
    const(evp_cipher_st)* EVP_sm4_cbc() @nogc nothrow;
    const(evp_cipher_st)* EVP_sm4_ecb() @nogc nothrow;
    const(evp_cipher_st)* EVP_seed_ofb() @nogc nothrow;
    const(evp_cipher_st)* EVP_seed_cfb128() @nogc nothrow;
    const(evp_cipher_st)* EVP_seed_cbc() @nogc nothrow;
    const(evp_cipher_st)* EVP_seed_ecb() @nogc nothrow;
    const(evp_cipher_st)* EVP_chacha20_poly1305() @nogc nothrow;
    void OPENSSL_cleanup() @nogc nothrow;
    int OPENSSL_init_crypto(c_ulong, const(ossl_init_settings_st)*) @nogc nothrow;
    int OPENSSL_atexit(void function()) @nogc nothrow;
    void OPENSSL_thread_stop() @nogc nothrow;
    ossl_init_settings_st* OPENSSL_INIT_new() @nogc nothrow;
    int OPENSSL_INIT_set_config_filename(ossl_init_settings_st*, const(char)*) @nogc nothrow;
    void OPENSSL_INIT_set_config_file_flags(ossl_init_settings_st*, c_ulong) @nogc nothrow;
    int OPENSSL_INIT_set_config_appname(ossl_init_settings_st*, const(char)*) @nogc nothrow;
    void OPENSSL_INIT_free(ossl_init_settings_st*) @nogc nothrow;
    alias CRYPTO_ONCE = int;
    alias CRYPTO_THREAD_LOCAL = uint;
    alias CRYPTO_THREAD_ID = c_ulong;
    const(evp_cipher_st)* EVP_chacha20() @nogc nothrow;
    int CRYPTO_THREAD_run_once(int*, void function()) @nogc nothrow;
    int CRYPTO_THREAD_init_local(uint*, void function(void*)) @nogc nothrow;
    void* CRYPTO_THREAD_get_local(uint*) @nogc nothrow;
    int CRYPTO_THREAD_set_local(uint*, void*) @nogc nothrow;
    int CRYPTO_THREAD_cleanup_local(uint*) @nogc nothrow;
    c_ulong CRYPTO_THREAD_get_current_id() @nogc nothrow;
    int CRYPTO_THREAD_compare_id(c_ulong, c_ulong) @nogc nothrow;
    const(evp_cipher_st)* EVP_camellia_256_ctr() @nogc nothrow;
    int ERR_load_CRYPTO_strings() @nogc nothrow;
    const(evp_cipher_st)* EVP_camellia_256_ofb() @nogc nothrow;
    const(evp_cipher_st)* EVP_camellia_256_cfb128() @nogc nothrow;
    const(evp_cipher_st)* EVP_camellia_256_cfb8() @nogc nothrow;
    const(evp_cipher_st)* EVP_camellia_256_cfb1() @nogc nothrow;
    const(evp_cipher_st)* EVP_camellia_256_cbc() @nogc nothrow;
    const(evp_cipher_st)* EVP_camellia_256_ecb() @nogc nothrow;
    const(evp_cipher_st)* EVP_camellia_192_ctr() @nogc nothrow;
    const(evp_cipher_st)* EVP_camellia_192_ofb() @nogc nothrow;
    const(evp_cipher_st)* EVP_camellia_192_cfb128() @nogc nothrow;
    const(evp_cipher_st)* EVP_camellia_192_cfb8() @nogc nothrow;
    const(evp_cipher_st)* EVP_camellia_192_cfb1() @nogc nothrow;
    const(evp_cipher_st)* EVP_camellia_192_cbc() @nogc nothrow;
    const(evp_cipher_st)* EVP_camellia_192_ecb() @nogc nothrow;
    const(evp_cipher_st)* EVP_camellia_128_ctr() @nogc nothrow;
    const(evp_cipher_st)* EVP_camellia_128_ofb() @nogc nothrow;
    const(evp_cipher_st)* EVP_camellia_128_cfb128() @nogc nothrow;
    const(evp_cipher_st)* EVP_camellia_128_cfb8() @nogc nothrow;
    const(evp_cipher_st)* EVP_camellia_128_cfb1() @nogc nothrow;
    const(evp_cipher_st)* EVP_camellia_128_cbc() @nogc nothrow;
    const(evp_cipher_st)* EVP_camellia_128_ecb() @nogc nothrow;
    const(evp_cipher_st)* EVP_aria_256_ccm() @nogc nothrow;
    const(evp_cipher_st)* EVP_aria_256_gcm() @nogc nothrow;
    const(evp_cipher_st)* EVP_aria_256_ofb() @nogc nothrow;
    const(evp_cipher_st)* EVP_aria_256_ctr() @nogc nothrow;
    const(evp_cipher_st)* EVP_aria_256_cfb128() @nogc nothrow;
    const(evp_cipher_st)* EVP_aria_256_cfb8() @nogc nothrow;
    const(evp_cipher_st)* EVP_aria_256_cfb1() @nogc nothrow;
    const(evp_cipher_st)* EVP_aria_256_cbc() @nogc nothrow;
    const(evp_cipher_st)* EVP_aria_256_ecb() @nogc nothrow;
    const(evp_cipher_st)* EVP_aria_192_ccm() @nogc nothrow;
    const(evp_cipher_st)* EVP_aria_192_gcm() @nogc nothrow;
    const(evp_cipher_st)* EVP_aria_192_ofb() @nogc nothrow;
    const(evp_cipher_st)* EVP_aria_192_ctr() @nogc nothrow;
    extern __gshared const(ASN1_ITEM_st) DHparams_it;
    const(evp_cipher_st)* EVP_aria_192_cfb128() @nogc nothrow;
    const(evp_cipher_st)* EVP_aria_192_cfb8() @nogc nothrow;
    const(evp_cipher_st)* EVP_aria_192_cfb1() @nogc nothrow;
    const(evp_cipher_st)* EVP_aria_192_cbc() @nogc nothrow;
    const(evp_cipher_st)* EVP_aria_192_ecb() @nogc nothrow;
    const(evp_cipher_st)* EVP_aria_128_ccm() @nogc nothrow;
    const(evp_cipher_st)* EVP_aria_128_gcm() @nogc nothrow;
    const(evp_cipher_st)* EVP_aria_128_ofb() @nogc nothrow;
    const(evp_cipher_st)* EVP_aria_128_ctr() @nogc nothrow;
    const(evp_cipher_st)* EVP_aria_128_cfb128() @nogc nothrow;
    const(evp_cipher_st)* EVP_aria_128_cfb8() @nogc nothrow;
    const(evp_cipher_st)* EVP_aria_128_cfb1() @nogc nothrow;
    const(evp_cipher_st)* EVP_aria_128_cbc() @nogc nothrow;
    const(evp_cipher_st)* EVP_aria_128_ecb() @nogc nothrow;
    const(evp_cipher_st)* EVP_aes_256_cbc_hmac_sha256() @nogc nothrow;
    const(evp_cipher_st)* EVP_aes_128_cbc_hmac_sha256() @nogc nothrow;
    const(evp_cipher_st)* EVP_aes_256_cbc_hmac_sha1() @nogc nothrow;
    const(evp_cipher_st)* EVP_aes_128_cbc_hmac_sha1() @nogc nothrow;
    const(evp_cipher_st)* EVP_aes_256_ocb() @nogc nothrow;
    const(evp_cipher_st)* EVP_aes_256_wrap_pad() @nogc nothrow;
    const(evp_cipher_st)* EVP_aes_256_wrap() @nogc nothrow;
    dh_st* DHparams_dup(dh_st*) @nogc nothrow;
    const(dh_method)* DH_OpenSSL() @nogc nothrow;
    void DH_set_default_method(const(dh_method)*) @nogc nothrow;
    const(dh_method)* DH_get_default_method() @nogc nothrow;
    int DH_set_method(dh_st*, const(dh_method)*) @nogc nothrow;
    dh_st* DH_new_method(engine_st*) @nogc nothrow;
    dh_st* DH_new() @nogc nothrow;
    void DH_free(dh_st*) @nogc nothrow;
    int DH_up_ref(dh_st*) @nogc nothrow;
    int DH_bits(const(dh_st)*) @nogc nothrow;
    int DH_size(const(dh_st)*) @nogc nothrow;
    int DH_security_bits(const(dh_st)*) @nogc nothrow;
    const(evp_cipher_st)* EVP_aes_256_xts() @nogc nothrow;
    int DH_set_ex_data(dh_st*, int, void*) @nogc nothrow;
    void* DH_get_ex_data(dh_st*, int) @nogc nothrow;
    dh_st* DH_generate_parameters(int, int, void function(int, int, void*), void*) @nogc nothrow;
    int DH_generate_parameters_ex(dh_st*, int, int, bn_gencb_st*) @nogc nothrow;
    int DH_check_params_ex(const(dh_st)*) @nogc nothrow;
    int DH_check_ex(const(dh_st)*) @nogc nothrow;
    int DH_check_pub_key_ex(const(dh_st)*, const(bignum_st)*) @nogc nothrow;
    int DH_check_params(const(dh_st)*, int*) @nogc nothrow;
    int DH_check(const(dh_st)*, int*) @nogc nothrow;
    int DH_check_pub_key(const(dh_st)*, const(bignum_st)*, int*) @nogc nothrow;
    int DH_generate_key(dh_st*) @nogc nothrow;
    int DH_compute_key(ubyte*, const(bignum_st)*, dh_st*) @nogc nothrow;
    int DH_compute_key_padded(ubyte*, const(bignum_st)*, dh_st*) @nogc nothrow;
    dh_st* d2i_DHparams(dh_st**, const(ubyte)**, c_long) @nogc nothrow;
    int i2d_DHparams(const(dh_st)*, ubyte**) @nogc nothrow;
    dh_st* d2i_DHxparams(dh_st**, const(ubyte)**, c_long) @nogc nothrow;
    int i2d_DHxparams(const(dh_st)*, ubyte**) @nogc nothrow;
    int DHparams_print_fp(_IO_FILE*, const(dh_st)*) @nogc nothrow;
    int DHparams_print(bio_st*, const(dh_st)*) @nogc nothrow;
    dh_st* DH_get_1024_160() @nogc nothrow;
    dh_st* DH_get_2048_224() @nogc nothrow;
    dh_st* DH_get_2048_256() @nogc nothrow;
    dh_st* DH_new_by_nid(int) @nogc nothrow;
    int DH_get_nid(const(dh_st)*) @nogc nothrow;
    int DH_KDF_X9_42(ubyte*, c_ulong, const(ubyte)*, c_ulong, asn1_object_st*, const(ubyte)*, c_ulong, const(evp_md_st)*) @nogc nothrow;
    void DH_get0_pqg(const(dh_st)*, const(bignum_st)**, const(bignum_st)**, const(bignum_st)**) @nogc nothrow;
    int DH_set0_pqg(dh_st*, bignum_st*, bignum_st*, bignum_st*) @nogc nothrow;
    void DH_get0_key(const(dh_st)*, const(bignum_st)**, const(bignum_st)**) @nogc nothrow;
    int DH_set0_key(dh_st*, bignum_st*, bignum_st*) @nogc nothrow;
    const(bignum_st)* DH_get0_p(const(dh_st)*) @nogc nothrow;
    const(bignum_st)* DH_get0_q(const(dh_st)*) @nogc nothrow;
    const(bignum_st)* DH_get0_g(const(dh_st)*) @nogc nothrow;
    const(bignum_st)* DH_get0_priv_key(const(dh_st)*) @nogc nothrow;
    const(bignum_st)* DH_get0_pub_key(const(dh_st)*) @nogc nothrow;
    void DH_clear_flags(dh_st*, int) @nogc nothrow;
    int DH_test_flags(const(dh_st)*, int) @nogc nothrow;
    void DH_set_flags(dh_st*, int) @nogc nothrow;
    engine_st* DH_get0_engine(dh_st*) @nogc nothrow;
    c_long DH_get_length(const(dh_st)*) @nogc nothrow;
    int DH_set_length(dh_st*, c_long) @nogc nothrow;
    dh_method* DH_meth_new(const(char)*, int) @nogc nothrow;
    void DH_meth_free(dh_method*) @nogc nothrow;
    dh_method* DH_meth_dup(const(dh_method)*) @nogc nothrow;
    const(char)* DH_meth_get0_name(const(dh_method)*) @nogc nothrow;
    int DH_meth_set1_name(dh_method*, const(char)*) @nogc nothrow;
    int DH_meth_get_flags(const(dh_method)*) @nogc nothrow;
    int DH_meth_set_flags(dh_method*, int) @nogc nothrow;
    void* DH_meth_get0_app_data(const(dh_method)*) @nogc nothrow;
    int DH_meth_set0_app_data(dh_method*, void*) @nogc nothrow;
    int function(dh_st*) DH_meth_get_generate_key(const(dh_method)*) @nogc nothrow;
    int DH_meth_set_generate_key(dh_method*, int function(dh_st*)) @nogc nothrow;
    int function(ubyte*, const(bignum_st)*, dh_st*) DH_meth_get_compute_key(const(dh_method)*) @nogc nothrow;
    int DH_meth_set_compute_key(dh_method*, int function(ubyte*, const(bignum_st)*, dh_st*)) @nogc nothrow;
    int function(const(dh_st)*, bignum_st*, const(bignum_st)*, const(bignum_st)*, const(bignum_st)*, bignum_ctx*, bn_mont_ctx_st*) DH_meth_get_bn_mod_exp(const(dh_method)*) @nogc nothrow;
    int DH_meth_set_bn_mod_exp(dh_method*, int function(const(dh_st)*, bignum_st*, const(bignum_st)*, const(bignum_st)*, const(bignum_st)*, bignum_ctx*, bn_mont_ctx_st*)) @nogc nothrow;
    int function(dh_st*) DH_meth_get_init(const(dh_method)*) @nogc nothrow;
    int DH_meth_set_init(dh_method*, int function(dh_st*)) @nogc nothrow;
    int function(dh_st*) DH_meth_get_finish(const(dh_method)*) @nogc nothrow;
    int DH_meth_set_finish(dh_method*, int function(dh_st*)) @nogc nothrow;
    int function(dh_st*, int, int, bn_gencb_st*) DH_meth_get_generate_params(const(dh_method)*) @nogc nothrow;
    int DH_meth_set_generate_params(dh_method*, int function(dh_st*, int, int, bn_gencb_st*)) @nogc nothrow;
    const(evp_cipher_st)* EVP_aes_256_gcm() @nogc nothrow;
    const(evp_cipher_st)* EVP_aes_256_ccm() @nogc nothrow;
    const(evp_cipher_st)* EVP_aes_256_ctr() @nogc nothrow;
    const(evp_cipher_st)* EVP_aes_256_ofb() @nogc nothrow;
    const(evp_cipher_st)* EVP_aes_256_cfb128() @nogc nothrow;
    const(evp_cipher_st)* EVP_aes_256_cfb8() @nogc nothrow;
    const(evp_cipher_st)* EVP_aes_256_cfb1() @nogc nothrow;
    const(evp_cipher_st)* EVP_aes_256_cbc() @nogc nothrow;
    const(evp_cipher_st)* EVP_aes_256_ecb() @nogc nothrow;
    const(evp_cipher_st)* EVP_aes_192_ocb() @nogc nothrow;
    const(evp_cipher_st)* EVP_aes_192_wrap_pad() @nogc nothrow;
    const(evp_cipher_st)* EVP_aes_192_wrap() @nogc nothrow;
    const(evp_cipher_st)* EVP_aes_192_gcm() @nogc nothrow;
    const(evp_cipher_st)* EVP_aes_192_ccm() @nogc nothrow;
    const(evp_cipher_st)* EVP_aes_192_ctr() @nogc nothrow;
    const(evp_cipher_st)* EVP_aes_192_ofb() @nogc nothrow;
    const(evp_cipher_st)* EVP_aes_192_cfb128() @nogc nothrow;
    const(evp_cipher_st)* EVP_aes_192_cfb8() @nogc nothrow;
    const(evp_cipher_st)* EVP_aes_192_cfb1() @nogc nothrow;
    const(evp_cipher_st)* EVP_aes_192_cbc() @nogc nothrow;
    const(evp_cipher_st)* EVP_aes_192_ecb() @nogc nothrow;
    const(evp_cipher_st)* EVP_aes_128_ocb() @nogc nothrow;
    const(evp_cipher_st)* EVP_aes_128_wrap_pad() @nogc nothrow;
    const(evp_cipher_st)* EVP_aes_128_wrap() @nogc nothrow;
    const(evp_cipher_st)* EVP_aes_128_xts() @nogc nothrow;
    const(evp_cipher_st)* EVP_aes_128_gcm() @nogc nothrow;
    const(evp_cipher_st)* EVP_aes_128_ccm() @nogc nothrow;
    const(evp_cipher_st)* EVP_aes_128_ctr() @nogc nothrow;
    const(evp_cipher_st)* EVP_aes_128_ofb() @nogc nothrow;
    const(evp_cipher_st)* EVP_aes_128_cfb128() @nogc nothrow;
    const(evp_cipher_st)* EVP_aes_128_cfb8() @nogc nothrow;
    const(evp_cipher_st)* EVP_aes_128_cfb1() @nogc nothrow;
    const(evp_cipher_st)* EVP_aes_128_cbc() @nogc nothrow;
    const(evp_cipher_st)* EVP_aes_128_ecb() @nogc nothrow;
    const(evp_cipher_st)* EVP_cast5_ofb() @nogc nothrow;
    const(evp_cipher_st)* EVP_cast5_cfb64() @nogc nothrow;
    int ERR_load_DH_strings() @nogc nothrow;
    const(evp_cipher_st)* EVP_cast5_cbc() @nogc nothrow;
    const(evp_cipher_st)* EVP_cast5_ecb() @nogc nothrow;
    const(evp_cipher_st)* EVP_bf_ofb() @nogc nothrow;
    const(evp_cipher_st)* EVP_bf_cfb64() @nogc nothrow;
    const(evp_cipher_st)* EVP_bf_cbc() @nogc nothrow;
    const(evp_cipher_st)* EVP_bf_ecb() @nogc nothrow;
    const(evp_cipher_st)* EVP_rc2_ofb() @nogc nothrow;
    const(evp_cipher_st)* EVP_rc2_cfb64() @nogc nothrow;
    const(evp_cipher_st)* EVP_rc2_64_cbc() @nogc nothrow;
    const(evp_cipher_st)* EVP_rc2_40_cbc() @nogc nothrow;
    const(evp_cipher_st)* EVP_rc2_cbc() @nogc nothrow;
    const(evp_cipher_st)* EVP_rc2_ecb() @nogc nothrow;
    const(evp_cipher_st)* EVP_idea_cbc() @nogc nothrow;
    const(evp_cipher_st)* EVP_idea_ofb() @nogc nothrow;
    const(evp_cipher_st)* EVP_idea_cfb64() @nogc nothrow;
    const(evp_cipher_st)* EVP_idea_ecb() @nogc nothrow;
    const(evp_cipher_st)* EVP_rc4_hmac_md5() @nogc nothrow;
    const(evp_cipher_st)* EVP_rc4_40() @nogc nothrow;
    const(evp_cipher_st)* EVP_rc4() @nogc nothrow;
    const(evp_cipher_st)* EVP_des_ede3_wrap() @nogc nothrow;
    const(evp_cipher_st)* EVP_desx_cbc() @nogc nothrow;
    const(evp_cipher_st)* EVP_des_ede3_cbc() @nogc nothrow;
    const(evp_cipher_st)* EVP_des_ede_cbc() @nogc nothrow;
    const(evp_cipher_st)* EVP_des_cbc() @nogc nothrow;
    const(evp_cipher_st)* EVP_des_ede3_ofb() @nogc nothrow;
    const(evp_cipher_st)* EVP_des_ede_ofb() @nogc nothrow;
    const(evp_cipher_st)* EVP_des_ofb() @nogc nothrow;
    const(evp_cipher_st)* EVP_des_ede3_cfb8() @nogc nothrow;
    const(evp_cipher_st)* EVP_des_ede3_cfb1() @nogc nothrow;
    const(evp_cipher_st)* EVP_des_ede3_cfb64() @nogc nothrow;
    const(evp_cipher_st)* EVP_des_ede_cfb64() @nogc nothrow;
    const(evp_cipher_st)* EVP_des_cfb8() @nogc nothrow;
    const(evp_cipher_st)* EVP_des_cfb1() @nogc nothrow;
    const(evp_cipher_st)* EVP_des_cfb64() @nogc nothrow;
    const(evp_cipher_st)* EVP_des_ede3_ecb() @nogc nothrow;
    const(evp_cipher_st)* EVP_des_ede_ecb() @nogc nothrow;
    const(evp_cipher_st)* EVP_des_ede3() @nogc nothrow;
    const(evp_cipher_st)* EVP_des_ede() @nogc nothrow;
    const(evp_cipher_st)* EVP_des_ecb() @nogc nothrow;
    const(evp_cipher_st)* EVP_enc_null() @nogc nothrow;
    const(evp_md_st)* EVP_sm3() @nogc nothrow;
    const(evp_md_st)* EVP_whirlpool() @nogc nothrow;
    const(evp_md_st)* EVP_ripemd160() @nogc nothrow;
    const(evp_md_st)* EVP_mdc2() @nogc nothrow;
    const(evp_md_st)* EVP_shake256() @nogc nothrow;
    const(evp_md_st)* EVP_shake128() @nogc nothrow;
    const(evp_md_st)* EVP_sha3_512() @nogc nothrow;
    const(evp_md_st)* EVP_sha3_384() @nogc nothrow;
    const(evp_md_st)* EVP_sha3_256() @nogc nothrow;
    const(evp_md_st)* EVP_sha3_224() @nogc nothrow;
    const(evp_md_st)* EVP_sha512_256() @nogc nothrow;
    const(evp_md_st)* EVP_sha512_224() @nogc nothrow;
    const(evp_md_st)* EVP_sha512() @nogc nothrow;
    const(evp_md_st)* EVP_sha384() @nogc nothrow;
    const(evp_md_st)* EVP_sha256() @nogc nothrow;
    const(evp_md_st)* EVP_sha224() @nogc nothrow;
    const(evp_md_st)* EVP_sha1() @nogc nothrow;
    const(evp_md_st)* EVP_blake2s256() @nogc nothrow;
    const(evp_md_st)* EVP_blake2b512() @nogc nothrow;
    const(evp_md_st)* EVP_md5_sha1() @nogc nothrow;
    alias DSA_SIG = DSA_SIG_st;
    struct DSA_SIG_st;
    const(evp_md_st)* EVP_md5() @nogc nothrow;
    const(evp_md_st)* EVP_md4() @nogc nothrow;
    const(evp_md_st)* EVP_md_null() @nogc nothrow;
    dsa_st* DSAparams_dup(dsa_st*) @nogc nothrow;
    DSA_SIG_st* DSA_SIG_new() @nogc nothrow;
    void DSA_SIG_free(DSA_SIG_st*) @nogc nothrow;
    int i2d_DSA_SIG(const(DSA_SIG_st)*, ubyte**) @nogc nothrow;
    DSA_SIG_st* d2i_DSA_SIG(DSA_SIG_st**, const(ubyte)**, c_long) @nogc nothrow;
    void DSA_SIG_get0(const(DSA_SIG_st)*, const(bignum_st)**, const(bignum_st)**) @nogc nothrow;
    int DSA_SIG_set0(DSA_SIG_st*, bignum_st*, bignum_st*) @nogc nothrow;
    DSA_SIG_st* DSA_do_sign(const(ubyte)*, int, dsa_st*) @nogc nothrow;
    int DSA_do_verify(const(ubyte)*, int, DSA_SIG_st*, dsa_st*) @nogc nothrow;
    const(dsa_method)* DSA_OpenSSL() @nogc nothrow;
    void DSA_set_default_method(const(dsa_method)*) @nogc nothrow;
    const(dsa_method)* DSA_get_default_method() @nogc nothrow;
    int DSA_set_method(dsa_st*, const(dsa_method)*) @nogc nothrow;
    const(dsa_method)* DSA_get_method(dsa_st*) @nogc nothrow;
    dsa_st* DSA_new() @nogc nothrow;
    dsa_st* DSA_new_method(engine_st*) @nogc nothrow;
    void DSA_free(dsa_st*) @nogc nothrow;
    int DSA_up_ref(dsa_st*) @nogc nothrow;
    int DSA_size(const(dsa_st)*) @nogc nothrow;
    int DSA_bits(const(dsa_st)*) @nogc nothrow;
    int DSA_security_bits(const(dsa_st)*) @nogc nothrow;
    int DSA_sign_setup(dsa_st*, bignum_ctx*, bignum_st**, bignum_st**) @nogc nothrow;
    int DSA_sign(int, const(ubyte)*, int, ubyte*, uint*, dsa_st*) @nogc nothrow;
    int DSA_verify(int, const(ubyte)*, int, const(ubyte)*, int, dsa_st*) @nogc nothrow;
    int BIO_set_cipher(bio_st*, const(evp_cipher_st)*, const(ubyte)*, const(ubyte)*, int) @nogc nothrow;
    int DSA_set_ex_data(dsa_st*, int, void*) @nogc nothrow;
    void* DSA_get_ex_data(dsa_st*, int) @nogc nothrow;
    dsa_st* d2i_DSAPublicKey(dsa_st**, const(ubyte)**, c_long) @nogc nothrow;
    dsa_st* d2i_DSAPrivateKey(dsa_st**, const(ubyte)**, c_long) @nogc nothrow;
    dsa_st* d2i_DSAparams(dsa_st**, const(ubyte)**, c_long) @nogc nothrow;
    dsa_st* DSA_generate_parameters(int, ubyte*, int, int*, c_ulong*, void function(int, int, void*), void*) @nogc nothrow;
    int DSA_generate_parameters_ex(dsa_st*, int, const(ubyte)*, int, int*, c_ulong*, bn_gencb_st*) @nogc nothrow;
    int DSA_generate_key(dsa_st*) @nogc nothrow;
    int i2d_DSAPublicKey(const(dsa_st)*, ubyte**) @nogc nothrow;
    int i2d_DSAPrivateKey(const(dsa_st)*, ubyte**) @nogc nothrow;
    int i2d_DSAparams(const(dsa_st)*, ubyte**) @nogc nothrow;
    int DSAparams_print(bio_st*, const(dsa_st)*) @nogc nothrow;
    int DSA_print(bio_st*, const(dsa_st)*, int) @nogc nothrow;
    int DSAparams_print_fp(_IO_FILE*, const(dsa_st)*) @nogc nothrow;
    int DSA_print_fp(_IO_FILE*, const(dsa_st)*, int) @nogc nothrow;
    const(bio_method_st)* BIO_f_reliable() @nogc nothrow;
    dh_st* DSA_dup_DH(const(dsa_st)*) @nogc nothrow;
    const(bio_method_st)* BIO_f_cipher() @nogc nothrow;
    const(bio_method_st)* BIO_f_base64() @nogc nothrow;
    const(bio_method_st)* BIO_f_md() @nogc nothrow;
    int EVP_CIPHER_CTX_rand_key(evp_cipher_ctx_st*, ubyte*) @nogc nothrow;
    int EVP_CIPHER_CTX_ctrl(evp_cipher_ctx_st*, int, int, void*) @nogc nothrow;
    int EVP_CIPHER_CTX_set_padding(evp_cipher_ctx_st*, int) @nogc nothrow;
    void DSA_get0_pqg(const(dsa_st)*, const(bignum_st)**, const(bignum_st)**, const(bignum_st)**) @nogc nothrow;
    int DSA_set0_pqg(dsa_st*, bignum_st*, bignum_st*, bignum_st*) @nogc nothrow;
    void DSA_get0_key(const(dsa_st)*, const(bignum_st)**, const(bignum_st)**) @nogc nothrow;
    int DSA_set0_key(dsa_st*, bignum_st*, bignum_st*) @nogc nothrow;
    const(bignum_st)* DSA_get0_p(const(dsa_st)*) @nogc nothrow;
    const(bignum_st)* DSA_get0_q(const(dsa_st)*) @nogc nothrow;
    const(bignum_st)* DSA_get0_g(const(dsa_st)*) @nogc nothrow;
    const(bignum_st)* DSA_get0_pub_key(const(dsa_st)*) @nogc nothrow;
    const(bignum_st)* DSA_get0_priv_key(const(dsa_st)*) @nogc nothrow;
    void DSA_clear_flags(dsa_st*, int) @nogc nothrow;
    int DSA_test_flags(const(dsa_st)*, int) @nogc nothrow;
    void DSA_set_flags(dsa_st*, int) @nogc nothrow;
    engine_st* DSA_get0_engine(dsa_st*) @nogc nothrow;
    dsa_method* DSA_meth_new(const(char)*, int) @nogc nothrow;
    void DSA_meth_free(dsa_method*) @nogc nothrow;
    dsa_method* DSA_meth_dup(const(dsa_method)*) @nogc nothrow;
    const(char)* DSA_meth_get0_name(const(dsa_method)*) @nogc nothrow;
    int DSA_meth_set1_name(dsa_method*, const(char)*) @nogc nothrow;
    int DSA_meth_get_flags(const(dsa_method)*) @nogc nothrow;
    int DSA_meth_set_flags(dsa_method*, int) @nogc nothrow;
    void* DSA_meth_get0_app_data(const(dsa_method)*) @nogc nothrow;
    int DSA_meth_set0_app_data(dsa_method*, void*) @nogc nothrow;
    DSA_SIG_st* function(const(ubyte)*, int, dsa_st*) DSA_meth_get_sign(const(dsa_method)*) @nogc nothrow;
    int DSA_meth_set_sign(dsa_method*, DSA_SIG_st* function(const(ubyte)*, int, dsa_st*)) @nogc nothrow;
    int function(dsa_st*, bignum_ctx*, bignum_st**, bignum_st**) DSA_meth_get_sign_setup(const(dsa_method)*) @nogc nothrow;
    int DSA_meth_set_sign_setup(dsa_method*, int function(dsa_st*, bignum_ctx*, bignum_st**, bignum_st**)) @nogc nothrow;
    int function(const(ubyte)*, int, DSA_SIG_st*, dsa_st*) DSA_meth_get_verify(const(dsa_method)*) @nogc nothrow;
    int DSA_meth_set_verify(dsa_method*, int function(const(ubyte)*, int, DSA_SIG_st*, dsa_st*)) @nogc nothrow;
    int function(dsa_st*, bignum_st*, const(bignum_st)*, const(bignum_st)*, const(bignum_st)*, const(bignum_st)*, const(bignum_st)*, bignum_ctx*, bn_mont_ctx_st*) DSA_meth_get_mod_exp(const(dsa_method)*) @nogc nothrow;
    int DSA_meth_set_mod_exp(dsa_method*, int function(dsa_st*, bignum_st*, const(bignum_st)*, const(bignum_st)*, const(bignum_st)*, const(bignum_st)*, const(bignum_st)*, bignum_ctx*, bn_mont_ctx_st*)) @nogc nothrow;
    int function(dsa_st*, bignum_st*, const(bignum_st)*, const(bignum_st)*, const(bignum_st)*, bignum_ctx*, bn_mont_ctx_st*) DSA_meth_get_bn_mod_exp(const(dsa_method)*) @nogc nothrow;
    int DSA_meth_set_bn_mod_exp(dsa_method*, int function(dsa_st*, bignum_st*, const(bignum_st)*, const(bignum_st)*, const(bignum_st)*, bignum_ctx*, bn_mont_ctx_st*)) @nogc nothrow;
    int function(dsa_st*) DSA_meth_get_init(const(dsa_method)*) @nogc nothrow;
    int DSA_meth_set_init(dsa_method*, int function(dsa_st*)) @nogc nothrow;
    int function(dsa_st*) DSA_meth_get_finish(const(dsa_method)*) @nogc nothrow;
    int DSA_meth_set_finish(dsa_method*, int function(dsa_st*)) @nogc nothrow;
    int function(dsa_st*, int, const(ubyte)*, int, int*, c_ulong*, bn_gencb_st*) DSA_meth_get_paramgen(const(dsa_method)*) @nogc nothrow;
    int DSA_meth_set_paramgen(dsa_method*, int function(dsa_st*, int, const(ubyte)*, int, int*, c_ulong*, bn_gencb_st*)) @nogc nothrow;
    int function(dsa_st*) DSA_meth_get_keygen(const(dsa_method)*) @nogc nothrow;
    int DSA_meth_set_keygen(dsa_method*, int function(dsa_st*)) @nogc nothrow;
    int EVP_CIPHER_CTX_set_key_length(evp_cipher_ctx_st*, int) @nogc nothrow;
    int ERR_load_DSA_strings() @nogc nothrow;
    void EVP_CIPHER_CTX_free(evp_cipher_ctx_st*) @nogc nothrow;
    int EVP_CIPHER_CTX_reset(evp_cipher_ctx_st*) @nogc nothrow;
    evp_cipher_ctx_st* EVP_CIPHER_CTX_new() @nogc nothrow;
    int EVP_DecodeBlock(ubyte*, const(ubyte)*, int) @nogc nothrow;
    int EVP_DecodeFinal(evp_Encode_Ctx_st*, ubyte*, int*) @nogc nothrow;
    int EVP_DecodeUpdate(evp_Encode_Ctx_st*, ubyte*, int*, const(ubyte)*, int) @nogc nothrow;
    void EVP_DecodeInit(evp_Encode_Ctx_st*) @nogc nothrow;
    int EVP_EncodeBlock(ubyte*, const(ubyte)*, int) @nogc nothrow;
    void EVP_EncodeFinal(evp_Encode_Ctx_st*, ubyte*, int*) @nogc nothrow;
    int EVP_EncodeUpdate(evp_Encode_Ctx_st*, ubyte*, int*, const(ubyte)*, int) @nogc nothrow;
    void EVP_EncodeInit(evp_Encode_Ctx_st*) @nogc nothrow;
    int EVP_ENCODE_CTX_num(evp_Encode_Ctx_st*) @nogc nothrow;
    int EVP_ENCODE_CTX_copy(evp_Encode_Ctx_st*, evp_Encode_Ctx_st*) @nogc nothrow;
    void EVP_ENCODE_CTX_free(evp_Encode_Ctx_st*) @nogc nothrow;
    evp_Encode_Ctx_st* EVP_ENCODE_CTX_new() @nogc nothrow;
    int EVP_SealFinal(evp_cipher_ctx_st*, ubyte*, int*) @nogc nothrow;
    int EVP_SealInit(evp_cipher_ctx_st*, const(evp_cipher_st)*, ubyte**, int*, ubyte*, evp_pkey_st**, int) @nogc nothrow;
    int EVP_OpenFinal(evp_cipher_ctx_st*, ubyte*, int*) @nogc nothrow;
    int EVP_OpenInit(evp_cipher_ctx_st*, const(evp_cipher_st)*, const(ubyte)*, int, const(ubyte)*, evp_pkey_st*) @nogc nothrow;
    int EVP_DigestVerifyFinal(evp_md_ctx_st*, const(ubyte)*, c_ulong) @nogc nothrow;
    int EVP_DigestVerifyInit(evp_md_ctx_st*, evp_pkey_ctx_st**, const(evp_md_st)*, engine_st*, evp_pkey_st*) @nogc nothrow;
    int EVP_DigestSignFinal(evp_md_ctx_st*, ubyte*, c_ulong*) @nogc nothrow;
    int EVP_DigestSignInit(evp_md_ctx_st*, evp_pkey_ctx_st**, const(evp_md_st)*, engine_st*, evp_pkey_st*) @nogc nothrow;
    int EVP_DigestVerify(evp_md_ctx_st*, const(ubyte)*, c_ulong, const(ubyte)*, c_ulong) @nogc nothrow;
    int EVP_VerifyFinal(evp_md_ctx_st*, const(ubyte)*, uint, evp_pkey_st*) @nogc nothrow;
    int EVP_DigestSign(evp_md_ctx_st*, ubyte*, c_ulong*, const(ubyte)*, c_ulong) @nogc nothrow;
    int EVP_SignFinal(evp_md_ctx_st*, ubyte*, uint*, evp_pkey_st*) @nogc nothrow;
    int EVP_CipherFinal_ex(evp_cipher_ctx_st*, ubyte*, int*) @nogc nothrow;
    int EVP_CipherFinal(evp_cipher_ctx_st*, ubyte*, int*) @nogc nothrow;
    int EVP_CipherUpdate(evp_cipher_ctx_st*, ubyte*, int*, const(ubyte)*, int) @nogc nothrow;
    int EVP_CipherInit_ex(evp_cipher_ctx_st*, const(evp_cipher_st)*, engine_st*, const(ubyte)*, const(ubyte)*, int) @nogc nothrow;
    int EVP_CipherInit(evp_cipher_ctx_st*, const(evp_cipher_st)*, const(ubyte)*, const(ubyte)*, int) @nogc nothrow;
    int EVP_DecryptFinal_ex(evp_cipher_ctx_st*, ubyte*, int*) @nogc nothrow;
    int EVP_DecryptFinal(evp_cipher_ctx_st*, ubyte*, int*) @nogc nothrow;
    int EVP_DecryptUpdate(evp_cipher_ctx_st*, ubyte*, int*, const(ubyte)*, int) @nogc nothrow;
    int EVP_DecryptInit_ex(evp_cipher_ctx_st*, const(evp_cipher_st)*, engine_st*, const(ubyte)*, const(ubyte)*) @nogc nothrow;
    int EVP_DecryptInit(evp_cipher_ctx_st*, const(evp_cipher_st)*, const(ubyte)*, const(ubyte)*) @nogc nothrow;
    alias point_conversion_form_t = _Anonymous_37;
    enum _Anonymous_37
    {
        POINT_CONVERSION_COMPRESSED = 2,
        POINT_CONVERSION_UNCOMPRESSED = 4,
        POINT_CONVERSION_HYBRID = 6,
    }
    enum POINT_CONVERSION_COMPRESSED = _Anonymous_37.POINT_CONVERSION_COMPRESSED;
    enum POINT_CONVERSION_UNCOMPRESSED = _Anonymous_37.POINT_CONVERSION_UNCOMPRESSED;
    enum POINT_CONVERSION_HYBRID = _Anonymous_37.POINT_CONVERSION_HYBRID;
    alias EC_METHOD = ec_method_st;
    struct ec_method_st;
    alias EC_GROUP = ec_group_st;
    struct ec_group_st;
    alias EC_POINT = ec_point_st;
    struct ec_point_st;
    alias ECPKPARAMETERS = ecpk_parameters_st;
    struct ecpk_parameters_st;
    alias ECPARAMETERS = ec_parameters_st;
    struct ec_parameters_st;
    const(ec_method_st)* EC_GFp_simple_method() @nogc nothrow;
    const(ec_method_st)* EC_GFp_mont_method() @nogc nothrow;
    const(ec_method_st)* EC_GFp_nist_method() @nogc nothrow;
    const(ec_method_st)* EC_GFp_nistp224_method() @nogc nothrow;
    const(ec_method_st)* EC_GFp_nistp256_method() @nogc nothrow;
    const(ec_method_st)* EC_GFp_nistp521_method() @nogc nothrow;
    const(ec_method_st)* EC_GF2m_simple_method() @nogc nothrow;
    ec_group_st* EC_GROUP_new(const(ec_method_st)*) @nogc nothrow;
    void EC_GROUP_free(ec_group_st*) @nogc nothrow;
    void EC_GROUP_clear_free(ec_group_st*) @nogc nothrow;
    int EC_GROUP_copy(ec_group_st*, const(ec_group_st)*) @nogc nothrow;
    ec_group_st* EC_GROUP_dup(const(ec_group_st)*) @nogc nothrow;
    const(ec_method_st)* EC_GROUP_method_of(const(ec_group_st)*) @nogc nothrow;
    int EC_METHOD_get_field_type(const(ec_method_st)*) @nogc nothrow;
    int EC_GROUP_set_generator(ec_group_st*, const(ec_point_st)*, const(bignum_st)*, const(bignum_st)*) @nogc nothrow;
    const(ec_point_st)* EC_GROUP_get0_generator(const(ec_group_st)*) @nogc nothrow;
    bn_mont_ctx_st* EC_GROUP_get_mont_data(const(ec_group_st)*) @nogc nothrow;
    int EC_GROUP_get_order(const(ec_group_st)*, bignum_st*, bignum_ctx*) @nogc nothrow;
    const(bignum_st)* EC_GROUP_get0_order(const(ec_group_st)*) @nogc nothrow;
    int EC_GROUP_order_bits(const(ec_group_st)*) @nogc nothrow;
    int EC_GROUP_get_cofactor(const(ec_group_st)*, bignum_st*, bignum_ctx*) @nogc nothrow;
    const(bignum_st)* EC_GROUP_get0_cofactor(const(ec_group_st)*) @nogc nothrow;
    void EC_GROUP_set_curve_name(ec_group_st*, int) @nogc nothrow;
    int EC_GROUP_get_curve_name(const(ec_group_st)*) @nogc nothrow;
    void EC_GROUP_set_asn1_flag(ec_group_st*, int) @nogc nothrow;
    int EC_GROUP_get_asn1_flag(const(ec_group_st)*) @nogc nothrow;
    void EC_GROUP_set_point_conversion_form(ec_group_st*, point_conversion_form_t) @nogc nothrow;
    point_conversion_form_t EC_GROUP_get_point_conversion_form(const(ec_group_st)*) @nogc nothrow;
    ubyte* EC_GROUP_get0_seed(const(ec_group_st)*) @nogc nothrow;
    c_ulong EC_GROUP_get_seed_len(const(ec_group_st)*) @nogc nothrow;
    c_ulong EC_GROUP_set_seed(ec_group_st*, const(ubyte)*, c_ulong) @nogc nothrow;
    int EC_GROUP_set_curve(ec_group_st*, const(bignum_st)*, const(bignum_st)*, const(bignum_st)*, bignum_ctx*) @nogc nothrow;
    int EC_GROUP_get_curve(const(ec_group_st)*, bignum_st*, bignum_st*, bignum_st*, bignum_ctx*) @nogc nothrow;
    int EC_GROUP_set_curve_GFp(ec_group_st*, const(bignum_st)*, const(bignum_st)*, const(bignum_st)*, bignum_ctx*) @nogc nothrow;
    int EC_GROUP_get_curve_GFp(const(ec_group_st)*, bignum_st*, bignum_st*, bignum_st*, bignum_ctx*) @nogc nothrow;
    int EC_GROUP_set_curve_GF2m(ec_group_st*, const(bignum_st)*, const(bignum_st)*, const(bignum_st)*, bignum_ctx*) @nogc nothrow;
    int EC_GROUP_get_curve_GF2m(const(ec_group_st)*, bignum_st*, bignum_st*, bignum_st*, bignum_ctx*) @nogc nothrow;
    int EC_GROUP_get_degree(const(ec_group_st)*) @nogc nothrow;
    int EC_GROUP_check(const(ec_group_st)*, bignum_ctx*) @nogc nothrow;
    int EC_GROUP_check_discriminant(const(ec_group_st)*, bignum_ctx*) @nogc nothrow;
    int EC_GROUP_cmp(const(ec_group_st)*, const(ec_group_st)*, bignum_ctx*) @nogc nothrow;
    ec_group_st* EC_GROUP_new_curve_GFp(const(bignum_st)*, const(bignum_st)*, const(bignum_st)*, bignum_ctx*) @nogc nothrow;
    ec_group_st* EC_GROUP_new_curve_GF2m(const(bignum_st)*, const(bignum_st)*, const(bignum_st)*, bignum_ctx*) @nogc nothrow;
    ec_group_st* EC_GROUP_new_by_curve_name(int) @nogc nothrow;
    ec_group_st* EC_GROUP_new_from_ecparameters(const(ec_parameters_st)*) @nogc nothrow;
    ec_parameters_st* EC_GROUP_get_ecparameters(const(ec_group_st)*, ec_parameters_st*) @nogc nothrow;
    ec_group_st* EC_GROUP_new_from_ecpkparameters(const(ecpk_parameters_st)*) @nogc nothrow;
    ecpk_parameters_st* EC_GROUP_get_ecpkparameters(const(ec_group_st)*, ecpk_parameters_st*) @nogc nothrow;
    struct EC_builtin_curve
    {
        int nid;
        const(char)* comment;
    }
    c_ulong EC_get_builtin_curves(EC_builtin_curve*, c_ulong) @nogc nothrow;
    const(char)* EC_curve_nid2nist(int) @nogc nothrow;
    int EC_curve_nist2nid(const(char)*) @nogc nothrow;
    ec_point_st* EC_POINT_new(const(ec_group_st)*) @nogc nothrow;
    void EC_POINT_free(ec_point_st*) @nogc nothrow;
    void EC_POINT_clear_free(ec_point_st*) @nogc nothrow;
    int EC_POINT_copy(ec_point_st*, const(ec_point_st)*) @nogc nothrow;
    ec_point_st* EC_POINT_dup(const(ec_point_st)*, const(ec_group_st)*) @nogc nothrow;
    const(ec_method_st)* EC_POINT_method_of(const(ec_point_st)*) @nogc nothrow;
    int EC_POINT_set_to_infinity(const(ec_group_st)*, ec_point_st*) @nogc nothrow;
    int EC_POINT_set_Jprojective_coordinates_GFp(const(ec_group_st)*, ec_point_st*, const(bignum_st)*, const(bignum_st)*, const(bignum_st)*, bignum_ctx*) @nogc nothrow;
    int EC_POINT_get_Jprojective_coordinates_GFp(const(ec_group_st)*, const(ec_point_st)*, bignum_st*, bignum_st*, bignum_st*, bignum_ctx*) @nogc nothrow;
    int EC_POINT_set_affine_coordinates(const(ec_group_st)*, ec_point_st*, const(bignum_st)*, const(bignum_st)*, bignum_ctx*) @nogc nothrow;
    int EC_POINT_get_affine_coordinates(const(ec_group_st)*, const(ec_point_st)*, bignum_st*, bignum_st*, bignum_ctx*) @nogc nothrow;
    int EC_POINT_set_affine_coordinates_GFp(const(ec_group_st)*, ec_point_st*, const(bignum_st)*, const(bignum_st)*, bignum_ctx*) @nogc nothrow;
    int EC_POINT_get_affine_coordinates_GFp(const(ec_group_st)*, const(ec_point_st)*, bignum_st*, bignum_st*, bignum_ctx*) @nogc nothrow;
    int EC_POINT_set_compressed_coordinates(const(ec_group_st)*, ec_point_st*, const(bignum_st)*, int, bignum_ctx*) @nogc nothrow;
    int EC_POINT_set_compressed_coordinates_GFp(const(ec_group_st)*, ec_point_st*, const(bignum_st)*, int, bignum_ctx*) @nogc nothrow;
    int EC_POINT_set_affine_coordinates_GF2m(const(ec_group_st)*, ec_point_st*, const(bignum_st)*, const(bignum_st)*, bignum_ctx*) @nogc nothrow;
    int EC_POINT_get_affine_coordinates_GF2m(const(ec_group_st)*, const(ec_point_st)*, bignum_st*, bignum_st*, bignum_ctx*) @nogc nothrow;
    int EC_POINT_set_compressed_coordinates_GF2m(const(ec_group_st)*, ec_point_st*, const(bignum_st)*, int, bignum_ctx*) @nogc nothrow;
    c_ulong EC_POINT_point2oct(const(ec_group_st)*, const(ec_point_st)*, point_conversion_form_t, ubyte*, c_ulong, bignum_ctx*) @nogc nothrow;
    int EC_POINT_oct2point(const(ec_group_st)*, ec_point_st*, const(ubyte)*, c_ulong, bignum_ctx*) @nogc nothrow;
    c_ulong EC_POINT_point2buf(const(ec_group_st)*, const(ec_point_st)*, point_conversion_form_t, ubyte**, bignum_ctx*) @nogc nothrow;
    bignum_st* EC_POINT_point2bn(const(ec_group_st)*, const(ec_point_st)*, point_conversion_form_t, bignum_st*, bignum_ctx*) @nogc nothrow;
    ec_point_st* EC_POINT_bn2point(const(ec_group_st)*, const(bignum_st)*, ec_point_st*, bignum_ctx*) @nogc nothrow;
    char* EC_POINT_point2hex(const(ec_group_st)*, const(ec_point_st)*, point_conversion_form_t, bignum_ctx*) @nogc nothrow;
    ec_point_st* EC_POINT_hex2point(const(ec_group_st)*, const(char)*, ec_point_st*, bignum_ctx*) @nogc nothrow;
    int EC_POINT_add(const(ec_group_st)*, ec_point_st*, const(ec_point_st)*, const(ec_point_st)*, bignum_ctx*) @nogc nothrow;
    int EC_POINT_dbl(const(ec_group_st)*, ec_point_st*, const(ec_point_st)*, bignum_ctx*) @nogc nothrow;
    int EC_POINT_invert(const(ec_group_st)*, ec_point_st*, bignum_ctx*) @nogc nothrow;
    int EC_POINT_is_at_infinity(const(ec_group_st)*, const(ec_point_st)*) @nogc nothrow;
    int EC_POINT_is_on_curve(const(ec_group_st)*, const(ec_point_st)*, bignum_ctx*) @nogc nothrow;
    int EC_POINT_cmp(const(ec_group_st)*, const(ec_point_st)*, const(ec_point_st)*, bignum_ctx*) @nogc nothrow;
    int EC_POINT_make_affine(const(ec_group_st)*, ec_point_st*, bignum_ctx*) @nogc nothrow;
    int EC_POINTs_make_affine(const(ec_group_st)*, c_ulong, ec_point_st**, bignum_ctx*) @nogc nothrow;
    int EC_POINTs_mul(const(ec_group_st)*, ec_point_st*, const(bignum_st)*, c_ulong, const(ec_point_st)**, const(bignum_st)**, bignum_ctx*) @nogc nothrow;
    int EC_POINT_mul(const(ec_group_st)*, ec_point_st*, const(bignum_st)*, const(ec_point_st)*, const(bignum_st)*, bignum_ctx*) @nogc nothrow;
    int EC_GROUP_precompute_mult(ec_group_st*, bignum_ctx*) @nogc nothrow;
    int EC_GROUP_have_precompute_mult(const(ec_group_st)*) @nogc nothrow;
    extern __gshared const(ASN1_ITEM_st) ECPKPARAMETERS_it;
    void ECPKPARAMETERS_free(ecpk_parameters_st*) @nogc nothrow;
    ecpk_parameters_st* ECPKPARAMETERS_new() @nogc nothrow;
    extern __gshared const(ASN1_ITEM_st) ECPARAMETERS_it;
    void ECPARAMETERS_free(ec_parameters_st*) @nogc nothrow;
    ec_parameters_st* ECPARAMETERS_new() @nogc nothrow;
    int EC_GROUP_get_basis_type(const(ec_group_st)*) @nogc nothrow;
    int EC_GROUP_get_trinomial_basis(const(ec_group_st)*, uint*) @nogc nothrow;
    int EC_GROUP_get_pentanomial_basis(const(ec_group_st)*, uint*, uint*, uint*) @nogc nothrow;
    int EVP_EncryptFinal(evp_cipher_ctx_st*, ubyte*, int*) @nogc nothrow;
    ec_group_st* d2i_ECPKParameters(ec_group_st**, const(ubyte)**, c_long) @nogc nothrow;
    int i2d_ECPKParameters(const(ec_group_st)*, ubyte**) @nogc nothrow;
    int EVP_EncryptFinal_ex(evp_cipher_ctx_st*, ubyte*, int*) @nogc nothrow;
    int EVP_EncryptUpdate(evp_cipher_ctx_st*, ubyte*, int*, const(ubyte)*, int) @nogc nothrow;
    int EVP_EncryptInit_ex(evp_cipher_ctx_st*, const(evp_cipher_st)*, engine_st*, const(ubyte)*, const(ubyte)*) @nogc nothrow;
    int EVP_EncryptInit(evp_cipher_ctx_st*, const(evp_cipher_st)*, const(ubyte)*, const(ubyte)*) @nogc nothrow;
    int ECPKParameters_print(bio_st*, const(ec_group_st)*, int) @nogc nothrow;
    int ECPKParameters_print_fp(_IO_FILE*, const(ec_group_st)*, int) @nogc nothrow;
    int EVP_CIPHER_CTX_test_flags(const(evp_cipher_ctx_st)*, int) @nogc nothrow;
    void EVP_CIPHER_CTX_clear_flags(evp_cipher_ctx_st*, int) @nogc nothrow;
    void EVP_CIPHER_CTX_set_flags(evp_cipher_ctx_st*, int) @nogc nothrow;
    int EVP_BytesToKey(const(evp_cipher_st)*, const(evp_md_st)*, const(ubyte)*, const(ubyte)*, int, int, ubyte*, ubyte*) @nogc nothrow;
    ec_key_st* EC_KEY_new() @nogc nothrow;
    int EC_KEY_get_flags(const(ec_key_st)*) @nogc nothrow;
    void EC_KEY_set_flags(ec_key_st*, int) @nogc nothrow;
    void EC_KEY_clear_flags(ec_key_st*, int) @nogc nothrow;
    int EC_KEY_decoded_from_explicit_params(const(ec_key_st)*) @nogc nothrow;
    ec_key_st* EC_KEY_new_by_curve_name(int) @nogc nothrow;
    void EC_KEY_free(ec_key_st*) @nogc nothrow;
    ec_key_st* EC_KEY_copy(ec_key_st*, const(ec_key_st)*) @nogc nothrow;
    ec_key_st* EC_KEY_dup(const(ec_key_st)*) @nogc nothrow;
    int EC_KEY_up_ref(ec_key_st*) @nogc nothrow;
    engine_st* EC_KEY_get0_engine(const(ec_key_st)*) @nogc nothrow;
    const(ec_group_st)* EC_KEY_get0_group(const(ec_key_st)*) @nogc nothrow;
    int EC_KEY_set_group(ec_key_st*, const(ec_group_st)*) @nogc nothrow;
    const(bignum_st)* EC_KEY_get0_private_key(const(ec_key_st)*) @nogc nothrow;
    int EC_KEY_set_private_key(ec_key_st*, const(bignum_st)*) @nogc nothrow;
    const(ec_point_st)* EC_KEY_get0_public_key(const(ec_key_st)*) @nogc nothrow;
    int EC_KEY_set_public_key(ec_key_st*, const(ec_point_st)*) @nogc nothrow;
    uint EC_KEY_get_enc_flags(const(ec_key_st)*) @nogc nothrow;
    void EC_KEY_set_enc_flags(ec_key_st*, uint) @nogc nothrow;
    point_conversion_form_t EC_KEY_get_conv_form(const(ec_key_st)*) @nogc nothrow;
    void EC_KEY_set_conv_form(ec_key_st*, point_conversion_form_t) @nogc nothrow;
    int EC_KEY_set_ex_data(ec_key_st*, int, void*) @nogc nothrow;
    void* EC_KEY_get_ex_data(const(ec_key_st)*, int) @nogc nothrow;
    void EC_KEY_set_asn1_flag(ec_key_st*, int) @nogc nothrow;
    int EC_KEY_precompute_mult(ec_key_st*, bignum_ctx*) @nogc nothrow;
    int EC_KEY_generate_key(ec_key_st*) @nogc nothrow;
    int EC_KEY_check_key(const(ec_key_st)*) @nogc nothrow;
    int EC_KEY_can_sign(const(ec_key_st)*) @nogc nothrow;
    int EC_KEY_set_public_key_affine_coordinates(ec_key_st*, bignum_st*, bignum_st*) @nogc nothrow;
    c_ulong EC_KEY_key2buf(const(ec_key_st)*, point_conversion_form_t, ubyte**, bignum_ctx*) @nogc nothrow;
    int EC_KEY_oct2key(ec_key_st*, const(ubyte)*, c_ulong, bignum_ctx*) @nogc nothrow;
    int EC_KEY_oct2priv(ec_key_st*, const(ubyte)*, c_ulong) @nogc nothrow;
    c_ulong EC_KEY_priv2oct(const(ec_key_st)*, ubyte*, c_ulong) @nogc nothrow;
    c_ulong EC_KEY_priv2buf(const(ec_key_st)*, ubyte**) @nogc nothrow;
    ec_key_st* d2i_ECPrivateKey(ec_key_st**, const(ubyte)**, c_long) @nogc nothrow;
    int i2d_ECPrivateKey(ec_key_st*, ubyte**) @nogc nothrow;
    ec_key_st* d2i_ECParameters(ec_key_st**, const(ubyte)**, c_long) @nogc nothrow;
    int i2d_ECParameters(ec_key_st*, ubyte**) @nogc nothrow;
    ec_key_st* o2i_ECPublicKey(ec_key_st**, const(ubyte)**, c_long) @nogc nothrow;
    int i2o_ECPublicKey(const(ec_key_st)*, ubyte**) @nogc nothrow;
    int ECParameters_print(bio_st*, const(ec_key_st)*) @nogc nothrow;
    int EC_KEY_print(bio_st*, const(ec_key_st)*, int) @nogc nothrow;
    int ECParameters_print_fp(_IO_FILE*, const(ec_key_st)*) @nogc nothrow;
    int EC_KEY_print_fp(_IO_FILE*, const(ec_key_st)*, int) @nogc nothrow;
    const(ec_key_method_st)* EC_KEY_OpenSSL() @nogc nothrow;
    const(ec_key_method_st)* EC_KEY_get_default_method() @nogc nothrow;
    void EC_KEY_set_default_method(const(ec_key_method_st)*) @nogc nothrow;
    const(ec_key_method_st)* EC_KEY_get_method(const(ec_key_st)*) @nogc nothrow;
    int EC_KEY_set_method(ec_key_st*, const(ec_key_method_st)*) @nogc nothrow;
    ec_key_st* EC_KEY_new_method(engine_st*) @nogc nothrow;
    int ECDH_KDF_X9_62(ubyte*, c_ulong, const(ubyte)*, c_ulong, const(ubyte)*, c_ulong, const(evp_md_st)*) @nogc nothrow;
    int ECDH_compute_key(void*, c_ulong, const(ec_point_st)*, const(ec_key_st)*, void* function(const(void)*, c_ulong, void*, c_ulong*)) @nogc nothrow;
    alias ECDSA_SIG = ECDSA_SIG_st;
    struct ECDSA_SIG_st;
    ECDSA_SIG_st* ECDSA_SIG_new() @nogc nothrow;
    void ECDSA_SIG_free(ECDSA_SIG_st*) @nogc nothrow;
    int i2d_ECDSA_SIG(const(ECDSA_SIG_st)*, ubyte**) @nogc nothrow;
    ECDSA_SIG_st* d2i_ECDSA_SIG(ECDSA_SIG_st**, const(ubyte)**, c_long) @nogc nothrow;
    void ECDSA_SIG_get0(const(ECDSA_SIG_st)*, const(bignum_st)**, const(bignum_st)**) @nogc nothrow;
    const(bignum_st)* ECDSA_SIG_get0_r(const(ECDSA_SIG_st)*) @nogc nothrow;
    const(bignum_st)* ECDSA_SIG_get0_s(const(ECDSA_SIG_st)*) @nogc nothrow;
    int ECDSA_SIG_set0(ECDSA_SIG_st*, bignum_st*, bignum_st*) @nogc nothrow;
    ECDSA_SIG_st* ECDSA_do_sign(const(ubyte)*, int, ec_key_st*) @nogc nothrow;
    ECDSA_SIG_st* ECDSA_do_sign_ex(const(ubyte)*, int, const(bignum_st)*, const(bignum_st)*, ec_key_st*) @nogc nothrow;
    int ECDSA_do_verify(const(ubyte)*, int, const(ECDSA_SIG_st)*, ec_key_st*) @nogc nothrow;
    int ECDSA_sign_setup(ec_key_st*, bignum_ctx*, bignum_st**, bignum_st**) @nogc nothrow;
    int ECDSA_sign(int, const(ubyte)*, int, ubyte*, uint*, ec_key_st*) @nogc nothrow;
    int ECDSA_sign_ex(int, const(ubyte)*, int, ubyte*, uint*, const(bignum_st)*, const(bignum_st)*, ec_key_st*) @nogc nothrow;
    int ECDSA_verify(int, const(ubyte)*, int, const(ubyte)*, int, ec_key_st*) @nogc nothrow;
    int ECDSA_size(const(ec_key_st)*) @nogc nothrow;
    ec_key_method_st* EC_KEY_METHOD_new(const(ec_key_method_st)*) @nogc nothrow;
    void EC_KEY_METHOD_free(ec_key_method_st*) @nogc nothrow;
    void EC_KEY_METHOD_set_init(ec_key_method_st*, int function(ec_key_st*), void function(ec_key_st*), int function(ec_key_st*, const(ec_key_st)*), int function(ec_key_st*, const(ec_group_st)*), int function(ec_key_st*, const(bignum_st)*), int function(ec_key_st*, const(ec_point_st)*)) @nogc nothrow;
    void EC_KEY_METHOD_set_keygen(ec_key_method_st*, int function(ec_key_st*)) @nogc nothrow;
    void EC_KEY_METHOD_set_compute_key(ec_key_method_st*, int function(ubyte**, c_ulong*, const(ec_point_st)*, const(ec_key_st)*)) @nogc nothrow;
    void EC_KEY_METHOD_set_sign(ec_key_method_st*, int function(int, const(ubyte)*, int, ubyte*, uint*, const(bignum_st)*, const(bignum_st)*, ec_key_st*), int function(ec_key_st*, bignum_ctx*, bignum_st**, bignum_st**), ECDSA_SIG_st* function(const(ubyte)*, int, const(bignum_st)*, const(bignum_st)*, ec_key_st*)) @nogc nothrow;
    void EC_KEY_METHOD_set_verify(ec_key_method_st*, int function(int, const(ubyte)*, int, const(ubyte)*, int, ec_key_st*), int function(const(ubyte)*, int, const(ECDSA_SIG_st)*, ec_key_st*)) @nogc nothrow;
    void EC_KEY_METHOD_get_init(const(ec_key_method_st)*, int function(ec_key_st*)*, void function(ec_key_st*)*, int function(ec_key_st*, const(ec_key_st)*)*, int function(ec_key_st*, const(ec_group_st)*)*, int function(ec_key_st*, const(bignum_st)*)*, int function(ec_key_st*, const(ec_point_st)*)*) @nogc nothrow;
    void EC_KEY_METHOD_get_keygen(const(ec_key_method_st)*, int function(ec_key_st*)*) @nogc nothrow;
    void EC_KEY_METHOD_get_compute_key(const(ec_key_method_st)*, int function(ubyte**, c_ulong*, const(ec_point_st)*, const(ec_key_st)*)*) @nogc nothrow;
    void EC_KEY_METHOD_get_sign(const(ec_key_method_st)*, int function(int, const(ubyte)*, int, ubyte*, uint*, const(bignum_st)*, const(bignum_st)*, ec_key_st*)*, int function(ec_key_st*, bignum_ctx*, bignum_st**, bignum_st**)*, ECDSA_SIG_st* function(const(ubyte)*, int, const(bignum_st)*, const(bignum_st)*, ec_key_st*)*) @nogc nothrow;
    void EC_KEY_METHOD_get_verify(const(ec_key_method_st)*, int function(int, const(ubyte)*, int, const(ubyte)*, int, ec_key_st*)*, int function(const(ubyte)*, int, const(ECDSA_SIG_st)*, ec_key_st*)*) @nogc nothrow;
    char* EVP_get_pw_prompt() @nogc nothrow;
    void EVP_set_pw_prompt(const(char)*) @nogc nothrow;
    int EVP_read_pw_string_min(char*, int, int, const(char)*, int) @nogc nothrow;
    int EVP_read_pw_string(char*, int, const(char)*, int) @nogc nothrow;
    int EVP_DigestFinalXOF(evp_md_ctx_st*, ubyte*, c_ulong) @nogc nothrow;
    int EVP_DigestFinal(evp_md_ctx_st*, ubyte*, uint*) @nogc nothrow;
    int EVP_DigestInit(evp_md_ctx_st*, const(evp_md_st)*) @nogc nothrow;
    int EVP_MD_CTX_copy(evp_md_ctx_st*, const(evp_md_ctx_st)*) @nogc nothrow;
    int EVP_Digest(const(void)*, c_ulong, ubyte*, uint*, const(evp_md_st)*, engine_st*) @nogc nothrow;
    int EVP_DigestFinal_ex(evp_md_ctx_st*, ubyte*, uint*) @nogc nothrow;
    int EVP_DigestUpdate(evp_md_ctx_st*, const(void)*, c_ulong) @nogc nothrow;
    int EVP_DigestInit_ex(evp_md_ctx_st*, const(evp_md_st)*, engine_st*) @nogc nothrow;
    int EVP_MD_CTX_test_flags(const(evp_md_ctx_st)*, int) @nogc nothrow;
    void EVP_MD_CTX_clear_flags(evp_md_ctx_st*, int) @nogc nothrow;
    void EVP_MD_CTX_set_flags(evp_md_ctx_st*, int) @nogc nothrow;
    int EVP_MD_CTX_copy_ex(evp_md_ctx_st*, const(evp_md_ctx_st)*) @nogc nothrow;
    void EVP_MD_CTX_free(evp_md_ctx_st*) @nogc nothrow;
    int EVP_MD_CTX_reset(evp_md_ctx_st*) @nogc nothrow;
    evp_md_ctx_st* EVP_MD_CTX_new() @nogc nothrow;
    int EVP_MD_CTX_ctrl(evp_md_ctx_st*, int, int, void*) @nogc nothrow;
    int EVP_Cipher(evp_cipher_ctx_st*, ubyte*, const(ubyte)*, uint) @nogc nothrow;
    void* EVP_CIPHER_CTX_set_cipher_data(evp_cipher_ctx_st*, void*) @nogc nothrow;
    void* EVP_CIPHER_CTX_get_cipher_data(const(evp_cipher_ctx_st)*) @nogc nothrow;
    int ERR_load_EC_strings() @nogc nothrow;
    void EVP_CIPHER_CTX_set_app_data(evp_cipher_ctx_st*, void*) @nogc nothrow;
    void* EVP_CIPHER_CTX_get_app_data(const(evp_cipher_ctx_st)*) @nogc nothrow;
    int EVP_CIPHER_CTX_copy(evp_cipher_ctx_st*, const(evp_cipher_ctx_st)*) @nogc nothrow;
    void EVP_CIPHER_CTX_set_num(evp_cipher_ctx_st*, int) @nogc nothrow;
    int EVP_CIPHER_CTX_num(const(evp_cipher_ctx_st)*) @nogc nothrow;
    ubyte* EVP_CIPHER_CTX_buf_noconst(evp_cipher_ctx_st*) @nogc nothrow;
    ubyte* EVP_CIPHER_CTX_iv_noconst(evp_cipher_ctx_st*) @nogc nothrow;
    const(ubyte)* EVP_CIPHER_CTX_original_iv(const(evp_cipher_ctx_st)*) @nogc nothrow;
    const(ubyte)* EVP_CIPHER_CTX_iv(const(evp_cipher_ctx_st)*) @nogc nothrow;
    int EVP_CIPHER_CTX_iv_length(const(evp_cipher_ctx_st)*) @nogc nothrow;
    int EVP_CIPHER_CTX_key_length(const(evp_cipher_ctx_st)*) @nogc nothrow;
    int EVP_CIPHER_CTX_block_size(const(evp_cipher_ctx_st)*) @nogc nothrow;
    int EVP_CIPHER_CTX_nid(const(evp_cipher_ctx_st)*) @nogc nothrow;
    int EVP_CIPHER_CTX_encrypting(const(evp_cipher_ctx_st)*) @nogc nothrow;
    const(evp_cipher_st)* EVP_CIPHER_CTX_cipher(const(evp_cipher_ctx_st)*) @nogc nothrow;
    c_ulong EVP_CIPHER_flags(const(evp_cipher_st)*) @nogc nothrow;
    int EVP_CIPHER_iv_length(const(evp_cipher_st)*) @nogc nothrow;
    int EVP_CIPHER_key_length(const(evp_cipher_st)*) @nogc nothrow;
    int EVP_CIPHER_impl_ctx_size(const(evp_cipher_st)*) @nogc nothrow;
    int EVP_CIPHER_block_size(const(evp_cipher_st)*) @nogc nothrow;
    int EVP_CIPHER_nid(const(evp_cipher_st)*) @nogc nothrow;
    void* EVP_MD_CTX_md_data(const(evp_md_ctx_st)*) @nogc nothrow;
    void EVP_MD_CTX_set_pkey_ctx(evp_md_ctx_st*, evp_pkey_ctx_st*) @nogc nothrow;
    evp_pkey_ctx_st* EVP_MD_CTX_pkey_ctx(const(evp_md_ctx_st)*) @nogc nothrow;
    void EVP_MD_CTX_set_update_fn(evp_md_ctx_st*, int function(evp_md_ctx_st*, const(void)*, c_ulong)) @nogc nothrow;
    int function(evp_md_ctx_st*, const(void)*, c_ulong) EVP_MD_CTX_update_fn(evp_md_ctx_st*) @nogc nothrow;
    const(evp_md_st)* EVP_MD_CTX_md(const(evp_md_ctx_st)*) @nogc nothrow;
    c_ulong EVP_MD_flags(const(evp_md_st)*) @nogc nothrow;
    int EVP_MD_block_size(const(evp_md_st)*) @nogc nothrow;
    int EVP_MD_size(const(evp_md_st)*) @nogc nothrow;
    int EVP_MD_pkey_type(const(evp_md_st)*) @nogc nothrow;
    int EVP_MD_type(const(evp_md_st)*) @nogc nothrow;
    alias EVP_PBE_KEYGEN = int function(evp_cipher_ctx_st*, const(char)*, int, asn1_type_st*, const(evp_cipher_st)*, const(evp_md_st)*, int);
    struct evp_cipher_info_st
    {
        const(evp_cipher_st)* cipher;
        ubyte[16] iv;
    }
    alias EVP_CIPHER_INFO = evp_cipher_info_st;
    struct EVP_CTRL_TLS1_1_MULTIBLOCK_PARAM
    {
        ubyte* out_;
        const(ubyte)* inp;
        c_ulong len;
        uint interleave;
    }
    int function(evp_cipher_ctx_st*, int, int, void*) EVP_CIPHER_meth_get_ctrl(const(evp_cipher_st)*) @nogc nothrow;
    int function(evp_cipher_ctx_st*, asn1_type_st*) EVP_CIPHER_meth_get_get_asn1_params(const(evp_cipher_st)*) @nogc nothrow;
    int function(evp_cipher_ctx_st*, asn1_type_st*) EVP_CIPHER_meth_get_set_asn1_params(const(evp_cipher_st)*) @nogc nothrow;
    int function(evp_cipher_ctx_st*) EVP_CIPHER_meth_get_cleanup(const(evp_cipher_st)*) @nogc nothrow;
    int function(evp_cipher_ctx_st*, ubyte*, const(ubyte)*, c_ulong) EVP_CIPHER_meth_get_do_cipher(const(evp_cipher_st)*) @nogc nothrow;
    int function(evp_cipher_ctx_st*, const(ubyte)*, const(ubyte)*, int) EVP_CIPHER_meth_get_init(const(evp_cipher_st)*) @nogc nothrow;
    int EVP_CIPHER_meth_set_ctrl(evp_cipher_st*, int function(evp_cipher_ctx_st*, int, int, void*)) @nogc nothrow;
    int EVP_CIPHER_meth_set_get_asn1_params(evp_cipher_st*, int function(evp_cipher_ctx_st*, asn1_type_st*)) @nogc nothrow;
    int EVP_CIPHER_meth_set_set_asn1_params(evp_cipher_st*, int function(evp_cipher_ctx_st*, asn1_type_st*)) @nogc nothrow;
    int EVP_CIPHER_meth_set_cleanup(evp_cipher_st*, int function(evp_cipher_ctx_st*)) @nogc nothrow;
    int EVP_CIPHER_meth_set_do_cipher(evp_cipher_st*, int function(evp_cipher_ctx_st*, ubyte*, const(ubyte)*, c_ulong)) @nogc nothrow;
    int EVP_CIPHER_meth_set_init(evp_cipher_st*, int function(evp_cipher_ctx_st*, const(ubyte)*, const(ubyte)*, int)) @nogc nothrow;
    int EVP_CIPHER_meth_set_impl_ctx_size(evp_cipher_st*, int) @nogc nothrow;
    int EVP_CIPHER_meth_set_flags(evp_cipher_st*, c_ulong) @nogc nothrow;
    int EVP_CIPHER_meth_set_iv_length(evp_cipher_st*, int) @nogc nothrow;
    void EVP_CIPHER_meth_free(evp_cipher_st*) @nogc nothrow;
    evp_cipher_st* EVP_CIPHER_meth_dup(const(evp_cipher_st)*) @nogc nothrow;
    evp_cipher_st* EVP_CIPHER_meth_new(int, int, int) @nogc nothrow;
    int function(evp_md_ctx_st*, int, int, void*) EVP_MD_meth_get_ctrl(const(evp_md_st)*) @nogc nothrow;
    int function(evp_md_ctx_st*) EVP_MD_meth_get_cleanup(const(evp_md_st)*) @nogc nothrow;
    int function(evp_md_ctx_st*, const(evp_md_ctx_st)*) EVP_MD_meth_get_copy(const(evp_md_st)*) @nogc nothrow;
    int function(evp_md_ctx_st*, ubyte*) EVP_MD_meth_get_final(const(evp_md_st)*) @nogc nothrow;
    int function(evp_md_ctx_st*, const(void)*, c_ulong) EVP_MD_meth_get_update(const(evp_md_st)*) @nogc nothrow;
    int function(evp_md_ctx_st*) EVP_MD_meth_get_init(const(evp_md_st)*) @nogc nothrow;
    c_ulong EVP_MD_meth_get_flags(const(evp_md_st)*) @nogc nothrow;
    int EVP_MD_meth_get_app_datasize(const(evp_md_st)*) @nogc nothrow;
    int EVP_MD_meth_get_result_size(const(evp_md_st)*) @nogc nothrow;
    int EVP_MD_meth_get_input_blocksize(const(evp_md_st)*) @nogc nothrow;
    int EVP_MD_meth_set_ctrl(evp_md_st*, int function(evp_md_ctx_st*, int, int, void*)) @nogc nothrow;
    int EVP_MD_meth_set_cleanup(evp_md_st*, int function(evp_md_ctx_st*)) @nogc nothrow;
    int EVP_MD_meth_set_copy(evp_md_st*, int function(evp_md_ctx_st*, const(evp_md_ctx_st)*)) @nogc nothrow;
    int EVP_MD_meth_set_final(evp_md_st*, int function(evp_md_ctx_st*, ubyte*)) @nogc nothrow;
    int EVP_MD_meth_set_update(evp_md_st*, int function(evp_md_ctx_st*, const(void)*, c_ulong)) @nogc nothrow;
    int EVP_MD_meth_set_init(evp_md_st*, int function(evp_md_ctx_st*)) @nogc nothrow;
    int EVP_MD_meth_set_flags(evp_md_st*, c_ulong) @nogc nothrow;
    int EVP_MD_meth_set_app_datasize(evp_md_st*, int) @nogc nothrow;
    int EVP_MD_meth_set_result_size(evp_md_st*, int) @nogc nothrow;
    int EVP_MD_meth_set_input_blocksize(evp_md_st*, int) @nogc nothrow;
    void EVP_MD_meth_free(evp_md_st*) @nogc nothrow;
    evp_md_st* EVP_MD_meth_dup(const(evp_md_st)*) @nogc nothrow;
    evp_md_st* EVP_MD_meth_new(int, int) @nogc nothrow;



    static if(!is(typeof(EC_F_EC_GROUP_GET_DEGREE))) {
        private enum enumMixinStr_EC_F_EC_GROUP_GET_DEGREE = `enum EC_F_EC_GROUP_GET_DEGREE = 173;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_EC_GROUP_GET_DEGREE); }))) {
            mixin(enumMixinStr_EC_F_EC_GROUP_GET_DEGREE);
        }
    }




    static if(!is(typeof(EC_F_EC_GROUP_GET_ECPARAMETERS))) {
        private enum enumMixinStr_EC_F_EC_GROUP_GET_ECPARAMETERS = `enum EC_F_EC_GROUP_GET_ECPARAMETERS = 261;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_EC_GROUP_GET_ECPARAMETERS); }))) {
            mixin(enumMixinStr_EC_F_EC_GROUP_GET_ECPARAMETERS);
        }
    }




    static if(!is(typeof(EC_F_EC_GROUP_GET_ECPKPARAMETERS))) {
        private enum enumMixinStr_EC_F_EC_GROUP_GET_ECPKPARAMETERS = `enum EC_F_EC_GROUP_GET_ECPKPARAMETERS = 262;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_EC_GROUP_GET_ECPKPARAMETERS); }))) {
            mixin(enumMixinStr_EC_F_EC_GROUP_GET_ECPKPARAMETERS);
        }
    }




    static if(!is(typeof(EC_F_EC_GROUP_GET_PENTANOMIAL_BASIS))) {
        private enum enumMixinStr_EC_F_EC_GROUP_GET_PENTANOMIAL_BASIS = `enum EC_F_EC_GROUP_GET_PENTANOMIAL_BASIS = 193;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_EC_GROUP_GET_PENTANOMIAL_BASIS); }))) {
            mixin(enumMixinStr_EC_F_EC_GROUP_GET_PENTANOMIAL_BASIS);
        }
    }




    static if(!is(typeof(EC_F_EC_GROUP_GET_TRINOMIAL_BASIS))) {
        private enum enumMixinStr_EC_F_EC_GROUP_GET_TRINOMIAL_BASIS = `enum EC_F_EC_GROUP_GET_TRINOMIAL_BASIS = 194;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_EC_GROUP_GET_TRINOMIAL_BASIS); }))) {
            mixin(enumMixinStr_EC_F_EC_GROUP_GET_TRINOMIAL_BASIS);
        }
    }




    static if(!is(typeof(EC_F_EC_GROUP_NEW))) {
        private enum enumMixinStr_EC_F_EC_GROUP_NEW = `enum EC_F_EC_GROUP_NEW = 108;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_EC_GROUP_NEW); }))) {
            mixin(enumMixinStr_EC_F_EC_GROUP_NEW);
        }
    }




    static if(!is(typeof(EC_F_EC_GROUP_NEW_BY_CURVE_NAME))) {
        private enum enumMixinStr_EC_F_EC_GROUP_NEW_BY_CURVE_NAME = `enum EC_F_EC_GROUP_NEW_BY_CURVE_NAME = 174;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_EC_GROUP_NEW_BY_CURVE_NAME); }))) {
            mixin(enumMixinStr_EC_F_EC_GROUP_NEW_BY_CURVE_NAME);
        }
    }




    static if(!is(typeof(EC_F_EC_GROUP_NEW_FROM_DATA))) {
        private enum enumMixinStr_EC_F_EC_GROUP_NEW_FROM_DATA = `enum EC_F_EC_GROUP_NEW_FROM_DATA = 175;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_EC_GROUP_NEW_FROM_DATA); }))) {
            mixin(enumMixinStr_EC_F_EC_GROUP_NEW_FROM_DATA);
        }
    }




    static if(!is(typeof(EC_F_EC_GROUP_NEW_FROM_ECPARAMETERS))) {
        private enum enumMixinStr_EC_F_EC_GROUP_NEW_FROM_ECPARAMETERS = `enum EC_F_EC_GROUP_NEW_FROM_ECPARAMETERS = 263;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_EC_GROUP_NEW_FROM_ECPARAMETERS); }))) {
            mixin(enumMixinStr_EC_F_EC_GROUP_NEW_FROM_ECPARAMETERS);
        }
    }




    static if(!is(typeof(EC_F_EC_GROUP_NEW_FROM_ECPKPARAMETERS))) {
        private enum enumMixinStr_EC_F_EC_GROUP_NEW_FROM_ECPKPARAMETERS = `enum EC_F_EC_GROUP_NEW_FROM_ECPKPARAMETERS = 264;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_EC_GROUP_NEW_FROM_ECPKPARAMETERS); }))) {
            mixin(enumMixinStr_EC_F_EC_GROUP_NEW_FROM_ECPKPARAMETERS);
        }
    }




    static if(!is(typeof(EC_F_EC_GROUP_SET_CURVE))) {
        private enum enumMixinStr_EC_F_EC_GROUP_SET_CURVE = `enum EC_F_EC_GROUP_SET_CURVE = 292;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_EC_GROUP_SET_CURVE); }))) {
            mixin(enumMixinStr_EC_F_EC_GROUP_SET_CURVE);
        }
    }




    static if(!is(typeof(EC_F_EC_GROUP_SET_CURVE_GF2M))) {
        private enum enumMixinStr_EC_F_EC_GROUP_SET_CURVE_GF2M = `enum EC_F_EC_GROUP_SET_CURVE_GF2M = 176;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_EC_GROUP_SET_CURVE_GF2M); }))) {
            mixin(enumMixinStr_EC_F_EC_GROUP_SET_CURVE_GF2M);
        }
    }




    static if(!is(typeof(EC_F_EC_GROUP_SET_CURVE_GFP))) {
        private enum enumMixinStr_EC_F_EC_GROUP_SET_CURVE_GFP = `enum EC_F_EC_GROUP_SET_CURVE_GFP = 109;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_EC_GROUP_SET_CURVE_GFP); }))) {
            mixin(enumMixinStr_EC_F_EC_GROUP_SET_CURVE_GFP);
        }
    }




    static if(!is(typeof(EC_F_EC_GROUP_SET_GENERATOR))) {
        private enum enumMixinStr_EC_F_EC_GROUP_SET_GENERATOR = `enum EC_F_EC_GROUP_SET_GENERATOR = 111;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_EC_GROUP_SET_GENERATOR); }))) {
            mixin(enumMixinStr_EC_F_EC_GROUP_SET_GENERATOR);
        }
    }




    static if(!is(typeof(EC_F_EC_GROUP_SET_SEED))) {
        private enum enumMixinStr_EC_F_EC_GROUP_SET_SEED = `enum EC_F_EC_GROUP_SET_SEED = 286;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_EC_GROUP_SET_SEED); }))) {
            mixin(enumMixinStr_EC_F_EC_GROUP_SET_SEED);
        }
    }




    static if(!is(typeof(EC_F_EC_KEY_CHECK_KEY))) {
        private enum enumMixinStr_EC_F_EC_KEY_CHECK_KEY = `enum EC_F_EC_KEY_CHECK_KEY = 177;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_EC_KEY_CHECK_KEY); }))) {
            mixin(enumMixinStr_EC_F_EC_KEY_CHECK_KEY);
        }
    }




    static if(!is(typeof(EC_F_EC_KEY_COPY))) {
        private enum enumMixinStr_EC_F_EC_KEY_COPY = `enum EC_F_EC_KEY_COPY = 178;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_EC_KEY_COPY); }))) {
            mixin(enumMixinStr_EC_F_EC_KEY_COPY);
        }
    }




    static if(!is(typeof(EC_F_EC_KEY_GENERATE_KEY))) {
        private enum enumMixinStr_EC_F_EC_KEY_GENERATE_KEY = `enum EC_F_EC_KEY_GENERATE_KEY = 179;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_EC_KEY_GENERATE_KEY); }))) {
            mixin(enumMixinStr_EC_F_EC_KEY_GENERATE_KEY);
        }
    }




    static if(!is(typeof(EC_F_EC_KEY_NEW))) {
        private enum enumMixinStr_EC_F_EC_KEY_NEW = `enum EC_F_EC_KEY_NEW = 182;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_EC_KEY_NEW); }))) {
            mixin(enumMixinStr_EC_F_EC_KEY_NEW);
        }
    }




    static if(!is(typeof(EC_F_EC_KEY_NEW_METHOD))) {
        private enum enumMixinStr_EC_F_EC_KEY_NEW_METHOD = `enum EC_F_EC_KEY_NEW_METHOD = 245;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_EC_KEY_NEW_METHOD); }))) {
            mixin(enumMixinStr_EC_F_EC_KEY_NEW_METHOD);
        }
    }




    static if(!is(typeof(EC_F_EC_KEY_OCT2PRIV))) {
        private enum enumMixinStr_EC_F_EC_KEY_OCT2PRIV = `enum EC_F_EC_KEY_OCT2PRIV = 255;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_EC_KEY_OCT2PRIV); }))) {
            mixin(enumMixinStr_EC_F_EC_KEY_OCT2PRIV);
        }
    }




    static if(!is(typeof(EC_F_EC_KEY_PRINT))) {
        private enum enumMixinStr_EC_F_EC_KEY_PRINT = `enum EC_F_EC_KEY_PRINT = 180;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_EC_KEY_PRINT); }))) {
            mixin(enumMixinStr_EC_F_EC_KEY_PRINT);
        }
    }




    static if(!is(typeof(EC_F_EC_KEY_PRINT_FP))) {
        private enum enumMixinStr_EC_F_EC_KEY_PRINT_FP = `enum EC_F_EC_KEY_PRINT_FP = 181;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_EC_KEY_PRINT_FP); }))) {
            mixin(enumMixinStr_EC_F_EC_KEY_PRINT_FP);
        }
    }




    static if(!is(typeof(EC_F_EC_KEY_PRIV2BUF))) {
        private enum enumMixinStr_EC_F_EC_KEY_PRIV2BUF = `enum EC_F_EC_KEY_PRIV2BUF = 279;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_EC_KEY_PRIV2BUF); }))) {
            mixin(enumMixinStr_EC_F_EC_KEY_PRIV2BUF);
        }
    }




    static if(!is(typeof(EC_F_EC_KEY_PRIV2OCT))) {
        private enum enumMixinStr_EC_F_EC_KEY_PRIV2OCT = `enum EC_F_EC_KEY_PRIV2OCT = 256;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_EC_KEY_PRIV2OCT); }))) {
            mixin(enumMixinStr_EC_F_EC_KEY_PRIV2OCT);
        }
    }




    static if(!is(typeof(EC_F_EC_KEY_SET_PUBLIC_KEY_AFFINE_COORDINATES))) {
        private enum enumMixinStr_EC_F_EC_KEY_SET_PUBLIC_KEY_AFFINE_COORDINATES = `enum EC_F_EC_KEY_SET_PUBLIC_KEY_AFFINE_COORDINATES = 229;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_EC_KEY_SET_PUBLIC_KEY_AFFINE_COORDINATES); }))) {
            mixin(enumMixinStr_EC_F_EC_KEY_SET_PUBLIC_KEY_AFFINE_COORDINATES);
        }
    }




    static if(!is(typeof(EC_F_EC_KEY_SIMPLE_CHECK_KEY))) {
        private enum enumMixinStr_EC_F_EC_KEY_SIMPLE_CHECK_KEY = `enum EC_F_EC_KEY_SIMPLE_CHECK_KEY = 258;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_EC_KEY_SIMPLE_CHECK_KEY); }))) {
            mixin(enumMixinStr_EC_F_EC_KEY_SIMPLE_CHECK_KEY);
        }
    }




    static if(!is(typeof(EC_F_EC_KEY_SIMPLE_OCT2PRIV))) {
        private enum enumMixinStr_EC_F_EC_KEY_SIMPLE_OCT2PRIV = `enum EC_F_EC_KEY_SIMPLE_OCT2PRIV = 259;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_EC_KEY_SIMPLE_OCT2PRIV); }))) {
            mixin(enumMixinStr_EC_F_EC_KEY_SIMPLE_OCT2PRIV);
        }
    }




    static if(!is(typeof(EC_F_EC_KEY_SIMPLE_PRIV2OCT))) {
        private enum enumMixinStr_EC_F_EC_KEY_SIMPLE_PRIV2OCT = `enum EC_F_EC_KEY_SIMPLE_PRIV2OCT = 260;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_EC_KEY_SIMPLE_PRIV2OCT); }))) {
            mixin(enumMixinStr_EC_F_EC_KEY_SIMPLE_PRIV2OCT);
        }
    }




    static if(!is(typeof(EC_F_EC_PKEY_CHECK))) {
        private enum enumMixinStr_EC_F_EC_PKEY_CHECK = `enum EC_F_EC_PKEY_CHECK = 273;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_EC_PKEY_CHECK); }))) {
            mixin(enumMixinStr_EC_F_EC_PKEY_CHECK);
        }
    }




    static if(!is(typeof(EC_F_EC_PKEY_PARAM_CHECK))) {
        private enum enumMixinStr_EC_F_EC_PKEY_PARAM_CHECK = `enum EC_F_EC_PKEY_PARAM_CHECK = 274;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_EC_PKEY_PARAM_CHECK); }))) {
            mixin(enumMixinStr_EC_F_EC_PKEY_PARAM_CHECK);
        }
    }




    static if(!is(typeof(EC_F_EC_POINTS_MAKE_AFFINE))) {
        private enum enumMixinStr_EC_F_EC_POINTS_MAKE_AFFINE = `enum EC_F_EC_POINTS_MAKE_AFFINE = 136;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_EC_POINTS_MAKE_AFFINE); }))) {
            mixin(enumMixinStr_EC_F_EC_POINTS_MAKE_AFFINE);
        }
    }




    static if(!is(typeof(EC_F_EC_POINTS_MUL))) {
        private enum enumMixinStr_EC_F_EC_POINTS_MUL = `enum EC_F_EC_POINTS_MUL = 290;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_EC_POINTS_MUL); }))) {
            mixin(enumMixinStr_EC_F_EC_POINTS_MUL);
        }
    }




    static if(!is(typeof(EC_F_EC_POINT_ADD))) {
        private enum enumMixinStr_EC_F_EC_POINT_ADD = `enum EC_F_EC_POINT_ADD = 112;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_EC_POINT_ADD); }))) {
            mixin(enumMixinStr_EC_F_EC_POINT_ADD);
        }
    }




    static if(!is(typeof(EC_F_EC_POINT_BN2POINT))) {
        private enum enumMixinStr_EC_F_EC_POINT_BN2POINT = `enum EC_F_EC_POINT_BN2POINT = 280;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_EC_POINT_BN2POINT); }))) {
            mixin(enumMixinStr_EC_F_EC_POINT_BN2POINT);
        }
    }




    static if(!is(typeof(EC_F_EC_POINT_CMP))) {
        private enum enumMixinStr_EC_F_EC_POINT_CMP = `enum EC_F_EC_POINT_CMP = 113;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_EC_POINT_CMP); }))) {
            mixin(enumMixinStr_EC_F_EC_POINT_CMP);
        }
    }




    static if(!is(typeof(EC_F_EC_POINT_COPY))) {
        private enum enumMixinStr_EC_F_EC_POINT_COPY = `enum EC_F_EC_POINT_COPY = 114;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_EC_POINT_COPY); }))) {
            mixin(enumMixinStr_EC_F_EC_POINT_COPY);
        }
    }




    static if(!is(typeof(EC_F_EC_POINT_DBL))) {
        private enum enumMixinStr_EC_F_EC_POINT_DBL = `enum EC_F_EC_POINT_DBL = 115;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_EC_POINT_DBL); }))) {
            mixin(enumMixinStr_EC_F_EC_POINT_DBL);
        }
    }




    static if(!is(typeof(EC_F_EC_POINT_GET_AFFINE_COORDINATES))) {
        private enum enumMixinStr_EC_F_EC_POINT_GET_AFFINE_COORDINATES = `enum EC_F_EC_POINT_GET_AFFINE_COORDINATES = 293;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_EC_POINT_GET_AFFINE_COORDINATES); }))) {
            mixin(enumMixinStr_EC_F_EC_POINT_GET_AFFINE_COORDINATES);
        }
    }




    static if(!is(typeof(EC_F_EC_POINT_GET_AFFINE_COORDINATES_GF2M))) {
        private enum enumMixinStr_EC_F_EC_POINT_GET_AFFINE_COORDINATES_GF2M = `enum EC_F_EC_POINT_GET_AFFINE_COORDINATES_GF2M = 183;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_EC_POINT_GET_AFFINE_COORDINATES_GF2M); }))) {
            mixin(enumMixinStr_EC_F_EC_POINT_GET_AFFINE_COORDINATES_GF2M);
        }
    }




    static if(!is(typeof(EC_F_EC_POINT_GET_AFFINE_COORDINATES_GFP))) {
        private enum enumMixinStr_EC_F_EC_POINT_GET_AFFINE_COORDINATES_GFP = `enum EC_F_EC_POINT_GET_AFFINE_COORDINATES_GFP = 116;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_EC_POINT_GET_AFFINE_COORDINATES_GFP); }))) {
            mixin(enumMixinStr_EC_F_EC_POINT_GET_AFFINE_COORDINATES_GFP);
        }
    }




    static if(!is(typeof(EC_F_EC_POINT_GET_JPROJECTIVE_COORDINATES_GFP))) {
        private enum enumMixinStr_EC_F_EC_POINT_GET_JPROJECTIVE_COORDINATES_GFP = `enum EC_F_EC_POINT_GET_JPROJECTIVE_COORDINATES_GFP = 117;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_EC_POINT_GET_JPROJECTIVE_COORDINATES_GFP); }))) {
            mixin(enumMixinStr_EC_F_EC_POINT_GET_JPROJECTIVE_COORDINATES_GFP);
        }
    }




    static if(!is(typeof(EC_F_EC_POINT_INVERT))) {
        private enum enumMixinStr_EC_F_EC_POINT_INVERT = `enum EC_F_EC_POINT_INVERT = 210;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_EC_POINT_INVERT); }))) {
            mixin(enumMixinStr_EC_F_EC_POINT_INVERT);
        }
    }




    static if(!is(typeof(EC_F_EC_POINT_IS_AT_INFINITY))) {
        private enum enumMixinStr_EC_F_EC_POINT_IS_AT_INFINITY = `enum EC_F_EC_POINT_IS_AT_INFINITY = 118;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_EC_POINT_IS_AT_INFINITY); }))) {
            mixin(enumMixinStr_EC_F_EC_POINT_IS_AT_INFINITY);
        }
    }




    static if(!is(typeof(EC_F_EC_POINT_IS_ON_CURVE))) {
        private enum enumMixinStr_EC_F_EC_POINT_IS_ON_CURVE = `enum EC_F_EC_POINT_IS_ON_CURVE = 119;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_EC_POINT_IS_ON_CURVE); }))) {
            mixin(enumMixinStr_EC_F_EC_POINT_IS_ON_CURVE);
        }
    }




    static if(!is(typeof(EC_F_EC_POINT_MAKE_AFFINE))) {
        private enum enumMixinStr_EC_F_EC_POINT_MAKE_AFFINE = `enum EC_F_EC_POINT_MAKE_AFFINE = 120;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_EC_POINT_MAKE_AFFINE); }))) {
            mixin(enumMixinStr_EC_F_EC_POINT_MAKE_AFFINE);
        }
    }




    static if(!is(typeof(EC_F_EC_POINT_NEW))) {
        private enum enumMixinStr_EC_F_EC_POINT_NEW = `enum EC_F_EC_POINT_NEW = 121;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_EC_POINT_NEW); }))) {
            mixin(enumMixinStr_EC_F_EC_POINT_NEW);
        }
    }




    static if(!is(typeof(EC_F_EC_POINT_OCT2POINT))) {
        private enum enumMixinStr_EC_F_EC_POINT_OCT2POINT = `enum EC_F_EC_POINT_OCT2POINT = 122;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_EC_POINT_OCT2POINT); }))) {
            mixin(enumMixinStr_EC_F_EC_POINT_OCT2POINT);
        }
    }




    static if(!is(typeof(EC_F_EC_POINT_POINT2BUF))) {
        private enum enumMixinStr_EC_F_EC_POINT_POINT2BUF = `enum EC_F_EC_POINT_POINT2BUF = 281;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_EC_POINT_POINT2BUF); }))) {
            mixin(enumMixinStr_EC_F_EC_POINT_POINT2BUF);
        }
    }




    static if(!is(typeof(EC_F_EC_POINT_POINT2OCT))) {
        private enum enumMixinStr_EC_F_EC_POINT_POINT2OCT = `enum EC_F_EC_POINT_POINT2OCT = 123;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_EC_POINT_POINT2OCT); }))) {
            mixin(enumMixinStr_EC_F_EC_POINT_POINT2OCT);
        }
    }




    static if(!is(typeof(EC_F_EC_POINT_SET_AFFINE_COORDINATES))) {
        private enum enumMixinStr_EC_F_EC_POINT_SET_AFFINE_COORDINATES = `enum EC_F_EC_POINT_SET_AFFINE_COORDINATES = 294;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_EC_POINT_SET_AFFINE_COORDINATES); }))) {
            mixin(enumMixinStr_EC_F_EC_POINT_SET_AFFINE_COORDINATES);
        }
    }




    static if(!is(typeof(EC_F_EC_POINT_SET_AFFINE_COORDINATES_GF2M))) {
        private enum enumMixinStr_EC_F_EC_POINT_SET_AFFINE_COORDINATES_GF2M = `enum EC_F_EC_POINT_SET_AFFINE_COORDINATES_GF2M = 185;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_EC_POINT_SET_AFFINE_COORDINATES_GF2M); }))) {
            mixin(enumMixinStr_EC_F_EC_POINT_SET_AFFINE_COORDINATES_GF2M);
        }
    }




    static if(!is(typeof(EC_F_EC_POINT_SET_AFFINE_COORDINATES_GFP))) {
        private enum enumMixinStr_EC_F_EC_POINT_SET_AFFINE_COORDINATES_GFP = `enum EC_F_EC_POINT_SET_AFFINE_COORDINATES_GFP = 124;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_EC_POINT_SET_AFFINE_COORDINATES_GFP); }))) {
            mixin(enumMixinStr_EC_F_EC_POINT_SET_AFFINE_COORDINATES_GFP);
        }
    }




    static if(!is(typeof(EC_F_EC_POINT_SET_COMPRESSED_COORDINATES))) {
        private enum enumMixinStr_EC_F_EC_POINT_SET_COMPRESSED_COORDINATES = `enum EC_F_EC_POINT_SET_COMPRESSED_COORDINATES = 295;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_EC_POINT_SET_COMPRESSED_COORDINATES); }))) {
            mixin(enumMixinStr_EC_F_EC_POINT_SET_COMPRESSED_COORDINATES);
        }
    }




    static if(!is(typeof(EC_F_EC_POINT_SET_COMPRESSED_COORDINATES_GF2M))) {
        private enum enumMixinStr_EC_F_EC_POINT_SET_COMPRESSED_COORDINATES_GF2M = `enum EC_F_EC_POINT_SET_COMPRESSED_COORDINATES_GF2M = 186;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_EC_POINT_SET_COMPRESSED_COORDINATES_GF2M); }))) {
            mixin(enumMixinStr_EC_F_EC_POINT_SET_COMPRESSED_COORDINATES_GF2M);
        }
    }




    static if(!is(typeof(EC_F_EC_POINT_SET_COMPRESSED_COORDINATES_GFP))) {
        private enum enumMixinStr_EC_F_EC_POINT_SET_COMPRESSED_COORDINATES_GFP = `enum EC_F_EC_POINT_SET_COMPRESSED_COORDINATES_GFP = 125;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_EC_POINT_SET_COMPRESSED_COORDINATES_GFP); }))) {
            mixin(enumMixinStr_EC_F_EC_POINT_SET_COMPRESSED_COORDINATES_GFP);
        }
    }




    static if(!is(typeof(EC_F_EC_POINT_SET_JPROJECTIVE_COORDINATES_GFP))) {
        private enum enumMixinStr_EC_F_EC_POINT_SET_JPROJECTIVE_COORDINATES_GFP = `enum EC_F_EC_POINT_SET_JPROJECTIVE_COORDINATES_GFP = 126;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_EC_POINT_SET_JPROJECTIVE_COORDINATES_GFP); }))) {
            mixin(enumMixinStr_EC_F_EC_POINT_SET_JPROJECTIVE_COORDINATES_GFP);
        }
    }




    static if(!is(typeof(EC_F_EC_POINT_SET_TO_INFINITY))) {
        private enum enumMixinStr_EC_F_EC_POINT_SET_TO_INFINITY = `enum EC_F_EC_POINT_SET_TO_INFINITY = 127;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_EC_POINT_SET_TO_INFINITY); }))) {
            mixin(enumMixinStr_EC_F_EC_POINT_SET_TO_INFINITY);
        }
    }




    static if(!is(typeof(EC_F_EC_PRE_COMP_NEW))) {
        private enum enumMixinStr_EC_F_EC_PRE_COMP_NEW = `enum EC_F_EC_PRE_COMP_NEW = 196;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_EC_PRE_COMP_NEW); }))) {
            mixin(enumMixinStr_EC_F_EC_PRE_COMP_NEW);
        }
    }




    static if(!is(typeof(EC_F_EC_SCALAR_MUL_LADDER))) {
        private enum enumMixinStr_EC_F_EC_SCALAR_MUL_LADDER = `enum EC_F_EC_SCALAR_MUL_LADDER = 284;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_EC_SCALAR_MUL_LADDER); }))) {
            mixin(enumMixinStr_EC_F_EC_SCALAR_MUL_LADDER);
        }
    }




    static if(!is(typeof(EC_F_EC_WNAF_MUL))) {
        private enum enumMixinStr_EC_F_EC_WNAF_MUL = `enum EC_F_EC_WNAF_MUL = 187;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_EC_WNAF_MUL); }))) {
            mixin(enumMixinStr_EC_F_EC_WNAF_MUL);
        }
    }




    static if(!is(typeof(EC_F_EC_WNAF_PRECOMPUTE_MULT))) {
        private enum enumMixinStr_EC_F_EC_WNAF_PRECOMPUTE_MULT = `enum EC_F_EC_WNAF_PRECOMPUTE_MULT = 188;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_EC_WNAF_PRECOMPUTE_MULT); }))) {
            mixin(enumMixinStr_EC_F_EC_WNAF_PRECOMPUTE_MULT);
        }
    }




    static if(!is(typeof(EC_F_I2D_ECPARAMETERS))) {
        private enum enumMixinStr_EC_F_I2D_ECPARAMETERS = `enum EC_F_I2D_ECPARAMETERS = 190;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_I2D_ECPARAMETERS); }))) {
            mixin(enumMixinStr_EC_F_I2D_ECPARAMETERS);
        }
    }




    static if(!is(typeof(EC_F_I2D_ECPKPARAMETERS))) {
        private enum enumMixinStr_EC_F_I2D_ECPKPARAMETERS = `enum EC_F_I2D_ECPKPARAMETERS = 191;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_I2D_ECPKPARAMETERS); }))) {
            mixin(enumMixinStr_EC_F_I2D_ECPKPARAMETERS);
        }
    }




    static if(!is(typeof(EC_F_I2D_ECPRIVATEKEY))) {
        private enum enumMixinStr_EC_F_I2D_ECPRIVATEKEY = `enum EC_F_I2D_ECPRIVATEKEY = 192;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_I2D_ECPRIVATEKEY); }))) {
            mixin(enumMixinStr_EC_F_I2D_ECPRIVATEKEY);
        }
    }




    static if(!is(typeof(EC_F_I2O_ECPUBLICKEY))) {
        private enum enumMixinStr_EC_F_I2O_ECPUBLICKEY = `enum EC_F_I2O_ECPUBLICKEY = 151;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_I2O_ECPUBLICKEY); }))) {
            mixin(enumMixinStr_EC_F_I2O_ECPUBLICKEY);
        }
    }




    static if(!is(typeof(EC_F_NISTP224_PRE_COMP_NEW))) {
        private enum enumMixinStr_EC_F_NISTP224_PRE_COMP_NEW = `enum EC_F_NISTP224_PRE_COMP_NEW = 227;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_NISTP224_PRE_COMP_NEW); }))) {
            mixin(enumMixinStr_EC_F_NISTP224_PRE_COMP_NEW);
        }
    }




    static if(!is(typeof(EC_F_NISTP256_PRE_COMP_NEW))) {
        private enum enumMixinStr_EC_F_NISTP256_PRE_COMP_NEW = `enum EC_F_NISTP256_PRE_COMP_NEW = 236;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_NISTP256_PRE_COMP_NEW); }))) {
            mixin(enumMixinStr_EC_F_NISTP256_PRE_COMP_NEW);
        }
    }




    static if(!is(typeof(EC_F_NISTP521_PRE_COMP_NEW))) {
        private enum enumMixinStr_EC_F_NISTP521_PRE_COMP_NEW = `enum EC_F_NISTP521_PRE_COMP_NEW = 237;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_NISTP521_PRE_COMP_NEW); }))) {
            mixin(enumMixinStr_EC_F_NISTP521_PRE_COMP_NEW);
        }
    }




    static if(!is(typeof(EC_F_O2I_ECPUBLICKEY))) {
        private enum enumMixinStr_EC_F_O2I_ECPUBLICKEY = `enum EC_F_O2I_ECPUBLICKEY = 152;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_O2I_ECPUBLICKEY); }))) {
            mixin(enumMixinStr_EC_F_O2I_ECPUBLICKEY);
        }
    }




    static if(!is(typeof(EC_F_OLD_EC_PRIV_DECODE))) {
        private enum enumMixinStr_EC_F_OLD_EC_PRIV_DECODE = `enum EC_F_OLD_EC_PRIV_DECODE = 222;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_OLD_EC_PRIV_DECODE); }))) {
            mixin(enumMixinStr_EC_F_OLD_EC_PRIV_DECODE);
        }
    }




    static if(!is(typeof(EC_F_OSSL_ECDH_COMPUTE_KEY))) {
        private enum enumMixinStr_EC_F_OSSL_ECDH_COMPUTE_KEY = `enum EC_F_OSSL_ECDH_COMPUTE_KEY = 247;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_OSSL_ECDH_COMPUTE_KEY); }))) {
            mixin(enumMixinStr_EC_F_OSSL_ECDH_COMPUTE_KEY);
        }
    }




    static if(!is(typeof(EC_F_OSSL_ECDSA_SIGN_SIG))) {
        private enum enumMixinStr_EC_F_OSSL_ECDSA_SIGN_SIG = `enum EC_F_OSSL_ECDSA_SIGN_SIG = 249;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_OSSL_ECDSA_SIGN_SIG); }))) {
            mixin(enumMixinStr_EC_F_OSSL_ECDSA_SIGN_SIG);
        }
    }




    static if(!is(typeof(EC_F_OSSL_ECDSA_VERIFY_SIG))) {
        private enum enumMixinStr_EC_F_OSSL_ECDSA_VERIFY_SIG = `enum EC_F_OSSL_ECDSA_VERIFY_SIG = 250;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_OSSL_ECDSA_VERIFY_SIG); }))) {
            mixin(enumMixinStr_EC_F_OSSL_ECDSA_VERIFY_SIG);
        }
    }




    static if(!is(typeof(EC_F_PKEY_ECD_CTRL))) {
        private enum enumMixinStr_EC_F_PKEY_ECD_CTRL = `enum EC_F_PKEY_ECD_CTRL = 271;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_PKEY_ECD_CTRL); }))) {
            mixin(enumMixinStr_EC_F_PKEY_ECD_CTRL);
        }
    }




    static if(!is(typeof(EC_F_PKEY_ECD_DIGESTSIGN))) {
        private enum enumMixinStr_EC_F_PKEY_ECD_DIGESTSIGN = `enum EC_F_PKEY_ECD_DIGESTSIGN = 272;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_PKEY_ECD_DIGESTSIGN); }))) {
            mixin(enumMixinStr_EC_F_PKEY_ECD_DIGESTSIGN);
        }
    }




    static if(!is(typeof(EC_F_PKEY_ECD_DIGESTSIGN25519))) {
        private enum enumMixinStr_EC_F_PKEY_ECD_DIGESTSIGN25519 = `enum EC_F_PKEY_ECD_DIGESTSIGN25519 = 276;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_PKEY_ECD_DIGESTSIGN25519); }))) {
            mixin(enumMixinStr_EC_F_PKEY_ECD_DIGESTSIGN25519);
        }
    }




    static if(!is(typeof(EC_F_PKEY_ECD_DIGESTSIGN448))) {
        private enum enumMixinStr_EC_F_PKEY_ECD_DIGESTSIGN448 = `enum EC_F_PKEY_ECD_DIGESTSIGN448 = 277;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_PKEY_ECD_DIGESTSIGN448); }))) {
            mixin(enumMixinStr_EC_F_PKEY_ECD_DIGESTSIGN448);
        }
    }




    static if(!is(typeof(EC_F_PKEY_ECX_DERIVE))) {
        private enum enumMixinStr_EC_F_PKEY_ECX_DERIVE = `enum EC_F_PKEY_ECX_DERIVE = 269;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_PKEY_ECX_DERIVE); }))) {
            mixin(enumMixinStr_EC_F_PKEY_ECX_DERIVE);
        }
    }




    static if(!is(typeof(EC_F_PKEY_EC_CTRL))) {
        private enum enumMixinStr_EC_F_PKEY_EC_CTRL = `enum EC_F_PKEY_EC_CTRL = 197;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_PKEY_EC_CTRL); }))) {
            mixin(enumMixinStr_EC_F_PKEY_EC_CTRL);
        }
    }




    static if(!is(typeof(EC_F_PKEY_EC_CTRL_STR))) {
        private enum enumMixinStr_EC_F_PKEY_EC_CTRL_STR = `enum EC_F_PKEY_EC_CTRL_STR = 198;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_PKEY_EC_CTRL_STR); }))) {
            mixin(enumMixinStr_EC_F_PKEY_EC_CTRL_STR);
        }
    }




    static if(!is(typeof(EC_F_PKEY_EC_DERIVE))) {
        private enum enumMixinStr_EC_F_PKEY_EC_DERIVE = `enum EC_F_PKEY_EC_DERIVE = 217;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_PKEY_EC_DERIVE); }))) {
            mixin(enumMixinStr_EC_F_PKEY_EC_DERIVE);
        }
    }




    static if(!is(typeof(EC_F_PKEY_EC_INIT))) {
        private enum enumMixinStr_EC_F_PKEY_EC_INIT = `enum EC_F_PKEY_EC_INIT = 282;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_PKEY_EC_INIT); }))) {
            mixin(enumMixinStr_EC_F_PKEY_EC_INIT);
        }
    }




    static if(!is(typeof(EC_F_PKEY_EC_KDF_DERIVE))) {
        private enum enumMixinStr_EC_F_PKEY_EC_KDF_DERIVE = `enum EC_F_PKEY_EC_KDF_DERIVE = 283;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_PKEY_EC_KDF_DERIVE); }))) {
            mixin(enumMixinStr_EC_F_PKEY_EC_KDF_DERIVE);
        }
    }




    static if(!is(typeof(EC_F_PKEY_EC_KEYGEN))) {
        private enum enumMixinStr_EC_F_PKEY_EC_KEYGEN = `enum EC_F_PKEY_EC_KEYGEN = 199;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_PKEY_EC_KEYGEN); }))) {
            mixin(enumMixinStr_EC_F_PKEY_EC_KEYGEN);
        }
    }




    static if(!is(typeof(EC_F_PKEY_EC_PARAMGEN))) {
        private enum enumMixinStr_EC_F_PKEY_EC_PARAMGEN = `enum EC_F_PKEY_EC_PARAMGEN = 219;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_PKEY_EC_PARAMGEN); }))) {
            mixin(enumMixinStr_EC_F_PKEY_EC_PARAMGEN);
        }
    }




    static if(!is(typeof(EC_F_PKEY_EC_SIGN))) {
        private enum enumMixinStr_EC_F_PKEY_EC_SIGN = `enum EC_F_PKEY_EC_SIGN = 218;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_PKEY_EC_SIGN); }))) {
            mixin(enumMixinStr_EC_F_PKEY_EC_SIGN);
        }
    }




    static if(!is(typeof(EC_F_VALIDATE_ECX_DERIVE))) {
        private enum enumMixinStr_EC_F_VALIDATE_ECX_DERIVE = `enum EC_F_VALIDATE_ECX_DERIVE = 278;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_VALIDATE_ECX_DERIVE); }))) {
            mixin(enumMixinStr_EC_F_VALIDATE_ECX_DERIVE);
        }
    }




    static if(!is(typeof(EC_R_ASN1_ERROR))) {
        private enum enumMixinStr_EC_R_ASN1_ERROR = `enum EC_R_ASN1_ERROR = 115;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_R_ASN1_ERROR); }))) {
            mixin(enumMixinStr_EC_R_ASN1_ERROR);
        }
    }




    static if(!is(typeof(EC_R_BAD_SIGNATURE))) {
        private enum enumMixinStr_EC_R_BAD_SIGNATURE = `enum EC_R_BAD_SIGNATURE = 156;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_R_BAD_SIGNATURE); }))) {
            mixin(enumMixinStr_EC_R_BAD_SIGNATURE);
        }
    }




    static if(!is(typeof(EC_R_BIGNUM_OUT_OF_RANGE))) {
        private enum enumMixinStr_EC_R_BIGNUM_OUT_OF_RANGE = `enum EC_R_BIGNUM_OUT_OF_RANGE = 144;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_R_BIGNUM_OUT_OF_RANGE); }))) {
            mixin(enumMixinStr_EC_R_BIGNUM_OUT_OF_RANGE);
        }
    }




    static if(!is(typeof(EC_R_BUFFER_TOO_SMALL))) {
        private enum enumMixinStr_EC_R_BUFFER_TOO_SMALL = `enum EC_R_BUFFER_TOO_SMALL = 100;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_R_BUFFER_TOO_SMALL); }))) {
            mixin(enumMixinStr_EC_R_BUFFER_TOO_SMALL);
        }
    }




    static if(!is(typeof(EC_R_CANNOT_INVERT))) {
        private enum enumMixinStr_EC_R_CANNOT_INVERT = `enum EC_R_CANNOT_INVERT = 165;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_R_CANNOT_INVERT); }))) {
            mixin(enumMixinStr_EC_R_CANNOT_INVERT);
        }
    }




    static if(!is(typeof(EC_R_COORDINATES_OUT_OF_RANGE))) {
        private enum enumMixinStr_EC_R_COORDINATES_OUT_OF_RANGE = `enum EC_R_COORDINATES_OUT_OF_RANGE = 146;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_R_COORDINATES_OUT_OF_RANGE); }))) {
            mixin(enumMixinStr_EC_R_COORDINATES_OUT_OF_RANGE);
        }
    }




    static if(!is(typeof(EC_R_CURVE_DOES_NOT_SUPPORT_ECDH))) {
        private enum enumMixinStr_EC_R_CURVE_DOES_NOT_SUPPORT_ECDH = `enum EC_R_CURVE_DOES_NOT_SUPPORT_ECDH = 160;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_R_CURVE_DOES_NOT_SUPPORT_ECDH); }))) {
            mixin(enumMixinStr_EC_R_CURVE_DOES_NOT_SUPPORT_ECDH);
        }
    }




    static if(!is(typeof(EC_R_CURVE_DOES_NOT_SUPPORT_SIGNING))) {
        private enum enumMixinStr_EC_R_CURVE_DOES_NOT_SUPPORT_SIGNING = `enum EC_R_CURVE_DOES_NOT_SUPPORT_SIGNING = 159;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_R_CURVE_DOES_NOT_SUPPORT_SIGNING); }))) {
            mixin(enumMixinStr_EC_R_CURVE_DOES_NOT_SUPPORT_SIGNING);
        }
    }




    static if(!is(typeof(EC_R_D2I_ECPKPARAMETERS_FAILURE))) {
        private enum enumMixinStr_EC_R_D2I_ECPKPARAMETERS_FAILURE = `enum EC_R_D2I_ECPKPARAMETERS_FAILURE = 117;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_R_D2I_ECPKPARAMETERS_FAILURE); }))) {
            mixin(enumMixinStr_EC_R_D2I_ECPKPARAMETERS_FAILURE);
        }
    }




    static if(!is(typeof(EC_R_DECODE_ERROR))) {
        private enum enumMixinStr_EC_R_DECODE_ERROR = `enum EC_R_DECODE_ERROR = 142;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_R_DECODE_ERROR); }))) {
            mixin(enumMixinStr_EC_R_DECODE_ERROR);
        }
    }




    static if(!is(typeof(EC_R_DISCRIMINANT_IS_ZERO))) {
        private enum enumMixinStr_EC_R_DISCRIMINANT_IS_ZERO = `enum EC_R_DISCRIMINANT_IS_ZERO = 118;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_R_DISCRIMINANT_IS_ZERO); }))) {
            mixin(enumMixinStr_EC_R_DISCRIMINANT_IS_ZERO);
        }
    }




    static if(!is(typeof(EC_R_EC_GROUP_NEW_BY_NAME_FAILURE))) {
        private enum enumMixinStr_EC_R_EC_GROUP_NEW_BY_NAME_FAILURE = `enum EC_R_EC_GROUP_NEW_BY_NAME_FAILURE = 119;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_R_EC_GROUP_NEW_BY_NAME_FAILURE); }))) {
            mixin(enumMixinStr_EC_R_EC_GROUP_NEW_BY_NAME_FAILURE);
        }
    }




    static if(!is(typeof(EC_R_FIELD_TOO_LARGE))) {
        private enum enumMixinStr_EC_R_FIELD_TOO_LARGE = `enum EC_R_FIELD_TOO_LARGE = 143;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_R_FIELD_TOO_LARGE); }))) {
            mixin(enumMixinStr_EC_R_FIELD_TOO_LARGE);
        }
    }




    static if(!is(typeof(EC_R_GF2M_NOT_SUPPORTED))) {
        private enum enumMixinStr_EC_R_GF2M_NOT_SUPPORTED = `enum EC_R_GF2M_NOT_SUPPORTED = 147;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_R_GF2M_NOT_SUPPORTED); }))) {
            mixin(enumMixinStr_EC_R_GF2M_NOT_SUPPORTED);
        }
    }




    static if(!is(typeof(EC_R_GROUP2PKPARAMETERS_FAILURE))) {
        private enum enumMixinStr_EC_R_GROUP2PKPARAMETERS_FAILURE = `enum EC_R_GROUP2PKPARAMETERS_FAILURE = 120;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_R_GROUP2PKPARAMETERS_FAILURE); }))) {
            mixin(enumMixinStr_EC_R_GROUP2PKPARAMETERS_FAILURE);
        }
    }




    static if(!is(typeof(EC_R_I2D_ECPKPARAMETERS_FAILURE))) {
        private enum enumMixinStr_EC_R_I2D_ECPKPARAMETERS_FAILURE = `enum EC_R_I2D_ECPKPARAMETERS_FAILURE = 121;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_R_I2D_ECPKPARAMETERS_FAILURE); }))) {
            mixin(enumMixinStr_EC_R_I2D_ECPKPARAMETERS_FAILURE);
        }
    }




    static if(!is(typeof(EC_R_INCOMPATIBLE_OBJECTS))) {
        private enum enumMixinStr_EC_R_INCOMPATIBLE_OBJECTS = `enum EC_R_INCOMPATIBLE_OBJECTS = 101;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_R_INCOMPATIBLE_OBJECTS); }))) {
            mixin(enumMixinStr_EC_R_INCOMPATIBLE_OBJECTS);
        }
    }




    static if(!is(typeof(EC_R_INVALID_ARGUMENT))) {
        private enum enumMixinStr_EC_R_INVALID_ARGUMENT = `enum EC_R_INVALID_ARGUMENT = 112;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_R_INVALID_ARGUMENT); }))) {
            mixin(enumMixinStr_EC_R_INVALID_ARGUMENT);
        }
    }




    static if(!is(typeof(EC_R_INVALID_COMPRESSED_POINT))) {
        private enum enumMixinStr_EC_R_INVALID_COMPRESSED_POINT = `enum EC_R_INVALID_COMPRESSED_POINT = 110;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_R_INVALID_COMPRESSED_POINT); }))) {
            mixin(enumMixinStr_EC_R_INVALID_COMPRESSED_POINT);
        }
    }




    static if(!is(typeof(EC_R_INVALID_COMPRESSION_BIT))) {
        private enum enumMixinStr_EC_R_INVALID_COMPRESSION_BIT = `enum EC_R_INVALID_COMPRESSION_BIT = 109;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_R_INVALID_COMPRESSION_BIT); }))) {
            mixin(enumMixinStr_EC_R_INVALID_COMPRESSION_BIT);
        }
    }




    static if(!is(typeof(EC_R_INVALID_CURVE))) {
        private enum enumMixinStr_EC_R_INVALID_CURVE = `enum EC_R_INVALID_CURVE = 141;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_R_INVALID_CURVE); }))) {
            mixin(enumMixinStr_EC_R_INVALID_CURVE);
        }
    }




    static if(!is(typeof(EC_R_INVALID_DIGEST))) {
        private enum enumMixinStr_EC_R_INVALID_DIGEST = `enum EC_R_INVALID_DIGEST = 151;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_R_INVALID_DIGEST); }))) {
            mixin(enumMixinStr_EC_R_INVALID_DIGEST);
        }
    }




    static if(!is(typeof(EC_R_INVALID_DIGEST_TYPE))) {
        private enum enumMixinStr_EC_R_INVALID_DIGEST_TYPE = `enum EC_R_INVALID_DIGEST_TYPE = 138;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_R_INVALID_DIGEST_TYPE); }))) {
            mixin(enumMixinStr_EC_R_INVALID_DIGEST_TYPE);
        }
    }




    static if(!is(typeof(EC_R_INVALID_ENCODING))) {
        private enum enumMixinStr_EC_R_INVALID_ENCODING = `enum EC_R_INVALID_ENCODING = 102;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_R_INVALID_ENCODING); }))) {
            mixin(enumMixinStr_EC_R_INVALID_ENCODING);
        }
    }




    static if(!is(typeof(EC_R_INVALID_FIELD))) {
        private enum enumMixinStr_EC_R_INVALID_FIELD = `enum EC_R_INVALID_FIELD = 103;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_R_INVALID_FIELD); }))) {
            mixin(enumMixinStr_EC_R_INVALID_FIELD);
        }
    }




    static if(!is(typeof(EC_R_INVALID_FORM))) {
        private enum enumMixinStr_EC_R_INVALID_FORM = `enum EC_R_INVALID_FORM = 104;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_R_INVALID_FORM); }))) {
            mixin(enumMixinStr_EC_R_INVALID_FORM);
        }
    }




    static if(!is(typeof(EC_R_INVALID_GROUP_ORDER))) {
        private enum enumMixinStr_EC_R_INVALID_GROUP_ORDER = `enum EC_R_INVALID_GROUP_ORDER = 122;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_R_INVALID_GROUP_ORDER); }))) {
            mixin(enumMixinStr_EC_R_INVALID_GROUP_ORDER);
        }
    }




    static if(!is(typeof(EC_R_INVALID_KEY))) {
        private enum enumMixinStr_EC_R_INVALID_KEY = `enum EC_R_INVALID_KEY = 116;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_R_INVALID_KEY); }))) {
            mixin(enumMixinStr_EC_R_INVALID_KEY);
        }
    }




    static if(!is(typeof(EC_R_INVALID_OUTPUT_LENGTH))) {
        private enum enumMixinStr_EC_R_INVALID_OUTPUT_LENGTH = `enum EC_R_INVALID_OUTPUT_LENGTH = 161;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_R_INVALID_OUTPUT_LENGTH); }))) {
            mixin(enumMixinStr_EC_R_INVALID_OUTPUT_LENGTH);
        }
    }




    static if(!is(typeof(EC_R_INVALID_PEER_KEY))) {
        private enum enumMixinStr_EC_R_INVALID_PEER_KEY = `enum EC_R_INVALID_PEER_KEY = 133;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_R_INVALID_PEER_KEY); }))) {
            mixin(enumMixinStr_EC_R_INVALID_PEER_KEY);
        }
    }




    static if(!is(typeof(EC_R_INVALID_PENTANOMIAL_BASIS))) {
        private enum enumMixinStr_EC_R_INVALID_PENTANOMIAL_BASIS = `enum EC_R_INVALID_PENTANOMIAL_BASIS = 132;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_R_INVALID_PENTANOMIAL_BASIS); }))) {
            mixin(enumMixinStr_EC_R_INVALID_PENTANOMIAL_BASIS);
        }
    }




    static if(!is(typeof(EC_R_INVALID_PRIVATE_KEY))) {
        private enum enumMixinStr_EC_R_INVALID_PRIVATE_KEY = `enum EC_R_INVALID_PRIVATE_KEY = 123;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_R_INVALID_PRIVATE_KEY); }))) {
            mixin(enumMixinStr_EC_R_INVALID_PRIVATE_KEY);
        }
    }




    static if(!is(typeof(EC_R_INVALID_TRINOMIAL_BASIS))) {
        private enum enumMixinStr_EC_R_INVALID_TRINOMIAL_BASIS = `enum EC_R_INVALID_TRINOMIAL_BASIS = 137;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_R_INVALID_TRINOMIAL_BASIS); }))) {
            mixin(enumMixinStr_EC_R_INVALID_TRINOMIAL_BASIS);
        }
    }




    static if(!is(typeof(EC_R_KDF_PARAMETER_ERROR))) {
        private enum enumMixinStr_EC_R_KDF_PARAMETER_ERROR = `enum EC_R_KDF_PARAMETER_ERROR = 148;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_R_KDF_PARAMETER_ERROR); }))) {
            mixin(enumMixinStr_EC_R_KDF_PARAMETER_ERROR);
        }
    }




    static if(!is(typeof(EC_R_KEYS_NOT_SET))) {
        private enum enumMixinStr_EC_R_KEYS_NOT_SET = `enum EC_R_KEYS_NOT_SET = 140;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_R_KEYS_NOT_SET); }))) {
            mixin(enumMixinStr_EC_R_KEYS_NOT_SET);
        }
    }




    static if(!is(typeof(EC_R_LADDER_POST_FAILURE))) {
        private enum enumMixinStr_EC_R_LADDER_POST_FAILURE = `enum EC_R_LADDER_POST_FAILURE = 136;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_R_LADDER_POST_FAILURE); }))) {
            mixin(enumMixinStr_EC_R_LADDER_POST_FAILURE);
        }
    }




    static if(!is(typeof(EC_R_LADDER_PRE_FAILURE))) {
        private enum enumMixinStr_EC_R_LADDER_PRE_FAILURE = `enum EC_R_LADDER_PRE_FAILURE = 153;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_R_LADDER_PRE_FAILURE); }))) {
            mixin(enumMixinStr_EC_R_LADDER_PRE_FAILURE);
        }
    }




    static if(!is(typeof(EC_R_LADDER_STEP_FAILURE))) {
        private enum enumMixinStr_EC_R_LADDER_STEP_FAILURE = `enum EC_R_LADDER_STEP_FAILURE = 162;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_R_LADDER_STEP_FAILURE); }))) {
            mixin(enumMixinStr_EC_R_LADDER_STEP_FAILURE);
        }
    }




    static if(!is(typeof(EC_R_MISSING_OID))) {
        private enum enumMixinStr_EC_R_MISSING_OID = `enum EC_R_MISSING_OID = 167;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_R_MISSING_OID); }))) {
            mixin(enumMixinStr_EC_R_MISSING_OID);
        }
    }




    static if(!is(typeof(EC_R_MISSING_PARAMETERS))) {
        private enum enumMixinStr_EC_R_MISSING_PARAMETERS = `enum EC_R_MISSING_PARAMETERS = 124;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_R_MISSING_PARAMETERS); }))) {
            mixin(enumMixinStr_EC_R_MISSING_PARAMETERS);
        }
    }




    static if(!is(typeof(EC_R_MISSING_PRIVATE_KEY))) {
        private enum enumMixinStr_EC_R_MISSING_PRIVATE_KEY = `enum EC_R_MISSING_PRIVATE_KEY = 125;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_R_MISSING_PRIVATE_KEY); }))) {
            mixin(enumMixinStr_EC_R_MISSING_PRIVATE_KEY);
        }
    }




    static if(!is(typeof(EC_R_NEED_NEW_SETUP_VALUES))) {
        private enum enumMixinStr_EC_R_NEED_NEW_SETUP_VALUES = `enum EC_R_NEED_NEW_SETUP_VALUES = 157;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_R_NEED_NEW_SETUP_VALUES); }))) {
            mixin(enumMixinStr_EC_R_NEED_NEW_SETUP_VALUES);
        }
    }




    static if(!is(typeof(EC_R_NOT_A_NIST_PRIME))) {
        private enum enumMixinStr_EC_R_NOT_A_NIST_PRIME = `enum EC_R_NOT_A_NIST_PRIME = 135;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_R_NOT_A_NIST_PRIME); }))) {
            mixin(enumMixinStr_EC_R_NOT_A_NIST_PRIME);
        }
    }




    static if(!is(typeof(EC_R_NOT_IMPLEMENTED))) {
        private enum enumMixinStr_EC_R_NOT_IMPLEMENTED = `enum EC_R_NOT_IMPLEMENTED = 126;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_R_NOT_IMPLEMENTED); }))) {
            mixin(enumMixinStr_EC_R_NOT_IMPLEMENTED);
        }
    }




    static if(!is(typeof(EC_R_NOT_INITIALIZED))) {
        private enum enumMixinStr_EC_R_NOT_INITIALIZED = `enum EC_R_NOT_INITIALIZED = 111;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_R_NOT_INITIALIZED); }))) {
            mixin(enumMixinStr_EC_R_NOT_INITIALIZED);
        }
    }




    static if(!is(typeof(EC_R_NO_PARAMETERS_SET))) {
        private enum enumMixinStr_EC_R_NO_PARAMETERS_SET = `enum EC_R_NO_PARAMETERS_SET = 139;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_R_NO_PARAMETERS_SET); }))) {
            mixin(enumMixinStr_EC_R_NO_PARAMETERS_SET);
        }
    }




    static if(!is(typeof(EC_R_NO_PRIVATE_VALUE))) {
        private enum enumMixinStr_EC_R_NO_PRIVATE_VALUE = `enum EC_R_NO_PRIVATE_VALUE = 154;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_R_NO_PRIVATE_VALUE); }))) {
            mixin(enumMixinStr_EC_R_NO_PRIVATE_VALUE);
        }
    }




    static if(!is(typeof(EC_R_OPERATION_NOT_SUPPORTED))) {
        private enum enumMixinStr_EC_R_OPERATION_NOT_SUPPORTED = `enum EC_R_OPERATION_NOT_SUPPORTED = 152;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_R_OPERATION_NOT_SUPPORTED); }))) {
            mixin(enumMixinStr_EC_R_OPERATION_NOT_SUPPORTED);
        }
    }




    static if(!is(typeof(EC_R_PASSED_NULL_PARAMETER))) {
        private enum enumMixinStr_EC_R_PASSED_NULL_PARAMETER = `enum EC_R_PASSED_NULL_PARAMETER = 134;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_R_PASSED_NULL_PARAMETER); }))) {
            mixin(enumMixinStr_EC_R_PASSED_NULL_PARAMETER);
        }
    }




    static if(!is(typeof(EC_R_PEER_KEY_ERROR))) {
        private enum enumMixinStr_EC_R_PEER_KEY_ERROR = `enum EC_R_PEER_KEY_ERROR = 149;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_R_PEER_KEY_ERROR); }))) {
            mixin(enumMixinStr_EC_R_PEER_KEY_ERROR);
        }
    }




    static if(!is(typeof(EC_R_PKPARAMETERS2GROUP_FAILURE))) {
        private enum enumMixinStr_EC_R_PKPARAMETERS2GROUP_FAILURE = `enum EC_R_PKPARAMETERS2GROUP_FAILURE = 127;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_R_PKPARAMETERS2GROUP_FAILURE); }))) {
            mixin(enumMixinStr_EC_R_PKPARAMETERS2GROUP_FAILURE);
        }
    }




    static if(!is(typeof(EC_R_POINT_ARITHMETIC_FAILURE))) {
        private enum enumMixinStr_EC_R_POINT_ARITHMETIC_FAILURE = `enum EC_R_POINT_ARITHMETIC_FAILURE = 155;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_R_POINT_ARITHMETIC_FAILURE); }))) {
            mixin(enumMixinStr_EC_R_POINT_ARITHMETIC_FAILURE);
        }
    }




    static if(!is(typeof(EC_R_POINT_AT_INFINITY))) {
        private enum enumMixinStr_EC_R_POINT_AT_INFINITY = `enum EC_R_POINT_AT_INFINITY = 106;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_R_POINT_AT_INFINITY); }))) {
            mixin(enumMixinStr_EC_R_POINT_AT_INFINITY);
        }
    }




    static if(!is(typeof(EC_R_POINT_COORDINATES_BLIND_FAILURE))) {
        private enum enumMixinStr_EC_R_POINT_COORDINATES_BLIND_FAILURE = `enum EC_R_POINT_COORDINATES_BLIND_FAILURE = 163;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_R_POINT_COORDINATES_BLIND_FAILURE); }))) {
            mixin(enumMixinStr_EC_R_POINT_COORDINATES_BLIND_FAILURE);
        }
    }




    static if(!is(typeof(EC_R_POINT_IS_NOT_ON_CURVE))) {
        private enum enumMixinStr_EC_R_POINT_IS_NOT_ON_CURVE = `enum EC_R_POINT_IS_NOT_ON_CURVE = 107;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_R_POINT_IS_NOT_ON_CURVE); }))) {
            mixin(enumMixinStr_EC_R_POINT_IS_NOT_ON_CURVE);
        }
    }




    static if(!is(typeof(EC_R_RANDOM_NUMBER_GENERATION_FAILED))) {
        private enum enumMixinStr_EC_R_RANDOM_NUMBER_GENERATION_FAILED = `enum EC_R_RANDOM_NUMBER_GENERATION_FAILED = 158;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_R_RANDOM_NUMBER_GENERATION_FAILED); }))) {
            mixin(enumMixinStr_EC_R_RANDOM_NUMBER_GENERATION_FAILED);
        }
    }




    static if(!is(typeof(EC_R_SHARED_INFO_ERROR))) {
        private enum enumMixinStr_EC_R_SHARED_INFO_ERROR = `enum EC_R_SHARED_INFO_ERROR = 150;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_R_SHARED_INFO_ERROR); }))) {
            mixin(enumMixinStr_EC_R_SHARED_INFO_ERROR);
        }
    }




    static if(!is(typeof(EC_R_SLOT_FULL))) {
        private enum enumMixinStr_EC_R_SLOT_FULL = `enum EC_R_SLOT_FULL = 108;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_R_SLOT_FULL); }))) {
            mixin(enumMixinStr_EC_R_SLOT_FULL);
        }
    }




    static if(!is(typeof(EC_R_UNDEFINED_GENERATOR))) {
        private enum enumMixinStr_EC_R_UNDEFINED_GENERATOR = `enum EC_R_UNDEFINED_GENERATOR = 113;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_R_UNDEFINED_GENERATOR); }))) {
            mixin(enumMixinStr_EC_R_UNDEFINED_GENERATOR);
        }
    }




    static if(!is(typeof(EC_R_UNDEFINED_ORDER))) {
        private enum enumMixinStr_EC_R_UNDEFINED_ORDER = `enum EC_R_UNDEFINED_ORDER = 128;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_R_UNDEFINED_ORDER); }))) {
            mixin(enumMixinStr_EC_R_UNDEFINED_ORDER);
        }
    }




    static if(!is(typeof(EC_R_UNKNOWN_COFACTOR))) {
        private enum enumMixinStr_EC_R_UNKNOWN_COFACTOR = `enum EC_R_UNKNOWN_COFACTOR = 164;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_R_UNKNOWN_COFACTOR); }))) {
            mixin(enumMixinStr_EC_R_UNKNOWN_COFACTOR);
        }
    }




    static if(!is(typeof(EC_R_UNKNOWN_GROUP))) {
        private enum enumMixinStr_EC_R_UNKNOWN_GROUP = `enum EC_R_UNKNOWN_GROUP = 129;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_R_UNKNOWN_GROUP); }))) {
            mixin(enumMixinStr_EC_R_UNKNOWN_GROUP);
        }
    }




    static if(!is(typeof(EC_R_UNKNOWN_ORDER))) {
        private enum enumMixinStr_EC_R_UNKNOWN_ORDER = `enum EC_R_UNKNOWN_ORDER = 114;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_R_UNKNOWN_ORDER); }))) {
            mixin(enumMixinStr_EC_R_UNKNOWN_ORDER);
        }
    }




    static if(!is(typeof(EC_R_UNSUPPORTED_FIELD))) {
        private enum enumMixinStr_EC_R_UNSUPPORTED_FIELD = `enum EC_R_UNSUPPORTED_FIELD = 131;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_R_UNSUPPORTED_FIELD); }))) {
            mixin(enumMixinStr_EC_R_UNSUPPORTED_FIELD);
        }
    }




    static if(!is(typeof(EC_R_WRONG_CURVE_PARAMETERS))) {
        private enum enumMixinStr_EC_R_WRONG_CURVE_PARAMETERS = `enum EC_R_WRONG_CURVE_PARAMETERS = 145;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_R_WRONG_CURVE_PARAMETERS); }))) {
            mixin(enumMixinStr_EC_R_WRONG_CURVE_PARAMETERS);
        }
    }




    static if(!is(typeof(EC_R_WRONG_ORDER))) {
        private enum enumMixinStr_EC_R_WRONG_ORDER = `enum EC_R_WRONG_ORDER = 130;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_R_WRONG_ORDER); }))) {
            mixin(enumMixinStr_EC_R_WRONG_ORDER);
        }
    }




    static if(!is(typeof(EC_F_EC_GROUP_GET_CURVE_GFP))) {
        private enum enumMixinStr_EC_F_EC_GROUP_GET_CURVE_GFP = `enum EC_F_EC_GROUP_GET_CURVE_GFP = 130;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_EC_GROUP_GET_CURVE_GFP); }))) {
            mixin(enumMixinStr_EC_F_EC_GROUP_GET_CURVE_GFP);
        }
    }






    static if(!is(typeof(EC_F_EC_GROUP_GET_CURVE_GF2M))) {
        private enum enumMixinStr_EC_F_EC_GROUP_GET_CURVE_GF2M = `enum EC_F_EC_GROUP_GET_CURVE_GF2M = 172;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_EC_GROUP_GET_CURVE_GF2M); }))) {
            mixin(enumMixinStr_EC_F_EC_GROUP_GET_CURVE_GF2M);
        }
    }




    static if(!is(typeof(EC_F_EC_GROUP_GET_CURVE))) {
        private enum enumMixinStr_EC_F_EC_GROUP_GET_CURVE = `enum EC_F_EC_GROUP_GET_CURVE = 291;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_EC_GROUP_GET_CURVE); }))) {
            mixin(enumMixinStr_EC_F_EC_GROUP_GET_CURVE);
        }
    }




    static if(!is(typeof(EC_F_EC_GROUP_COPY))) {
        private enum enumMixinStr_EC_F_EC_GROUP_COPY = `enum EC_F_EC_GROUP_COPY = 106;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_EC_GROUP_COPY); }))) {
            mixin(enumMixinStr_EC_F_EC_GROUP_COPY);
        }
    }




    static if(!is(typeof(EC_F_EC_GROUP_CHECK_DISCRIMINANT))) {
        private enum enumMixinStr_EC_F_EC_GROUP_CHECK_DISCRIMINANT = `enum EC_F_EC_GROUP_CHECK_DISCRIMINANT = 171;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_EC_GROUP_CHECK_DISCRIMINANT); }))) {
            mixin(enumMixinStr_EC_F_EC_GROUP_CHECK_DISCRIMINANT);
        }
    }




    static if(!is(typeof(EC_F_EC_GROUP_CHECK))) {
        private enum enumMixinStr_EC_F_EC_GROUP_CHECK = `enum EC_F_EC_GROUP_CHECK = 170;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_EC_GROUP_CHECK); }))) {
            mixin(enumMixinStr_EC_F_EC_GROUP_CHECK);
        }
    }




    static if(!is(typeof(EVP_MAX_MD_SIZE))) {
        private enum enumMixinStr_EVP_MAX_MD_SIZE = `enum EVP_MAX_MD_SIZE = 64;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_MAX_MD_SIZE); }))) {
            mixin(enumMixinStr_EVP_MAX_MD_SIZE);
        }
    }




    static if(!is(typeof(EVP_MAX_KEY_LENGTH))) {
        private enum enumMixinStr_EVP_MAX_KEY_LENGTH = `enum EVP_MAX_KEY_LENGTH = 64;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_MAX_KEY_LENGTH); }))) {
            mixin(enumMixinStr_EVP_MAX_KEY_LENGTH);
        }
    }




    static if(!is(typeof(EVP_MAX_IV_LENGTH))) {
        private enum enumMixinStr_EVP_MAX_IV_LENGTH = `enum EVP_MAX_IV_LENGTH = 16;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_MAX_IV_LENGTH); }))) {
            mixin(enumMixinStr_EVP_MAX_IV_LENGTH);
        }
    }




    static if(!is(typeof(EVP_MAX_BLOCK_LENGTH))) {
        private enum enumMixinStr_EVP_MAX_BLOCK_LENGTH = `enum EVP_MAX_BLOCK_LENGTH = 32;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_MAX_BLOCK_LENGTH); }))) {
            mixin(enumMixinStr_EVP_MAX_BLOCK_LENGTH);
        }
    }




    static if(!is(typeof(PKCS5_SALT_LEN))) {
        private enum enumMixinStr_PKCS5_SALT_LEN = `enum PKCS5_SALT_LEN = 8;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS5_SALT_LEN); }))) {
            mixin(enumMixinStr_PKCS5_SALT_LEN);
        }
    }




    static if(!is(typeof(PKCS5_DEFAULT_ITER))) {
        private enum enumMixinStr_PKCS5_DEFAULT_ITER = `enum PKCS5_DEFAULT_ITER = 2048;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS5_DEFAULT_ITER); }))) {
            mixin(enumMixinStr_PKCS5_DEFAULT_ITER);
        }
    }




    static if(!is(typeof(EC_F_EC_GFP_SIMPLE_SET_COMPRESSED_COORDINATES))) {
        private enum enumMixinStr_EC_F_EC_GFP_SIMPLE_SET_COMPRESSED_COORDINATES = `enum EC_F_EC_GFP_SIMPLE_SET_COMPRESSED_COORDINATES = 169;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_EC_GFP_SIMPLE_SET_COMPRESSED_COORDINATES); }))) {
            mixin(enumMixinStr_EC_F_EC_GFP_SIMPLE_SET_COMPRESSED_COORDINATES);
        }
    }




    static if(!is(typeof(EVP_PK_RSA))) {
        private enum enumMixinStr_EVP_PK_RSA = `enum EVP_PK_RSA = 0x0001;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_PK_RSA); }))) {
            mixin(enumMixinStr_EVP_PK_RSA);
        }
    }




    static if(!is(typeof(EVP_PK_DSA))) {
        private enum enumMixinStr_EVP_PK_DSA = `enum EVP_PK_DSA = 0x0002;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_PK_DSA); }))) {
            mixin(enumMixinStr_EVP_PK_DSA);
        }
    }




    static if(!is(typeof(EVP_PK_DH))) {
        private enum enumMixinStr_EVP_PK_DH = `enum EVP_PK_DH = 0x0004;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_PK_DH); }))) {
            mixin(enumMixinStr_EVP_PK_DH);
        }
    }




    static if(!is(typeof(EVP_PK_EC))) {
        private enum enumMixinStr_EVP_PK_EC = `enum EVP_PK_EC = 0x0008;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_PK_EC); }))) {
            mixin(enumMixinStr_EVP_PK_EC);
        }
    }




    static if(!is(typeof(EVP_PKT_SIGN))) {
        private enum enumMixinStr_EVP_PKT_SIGN = `enum EVP_PKT_SIGN = 0x0010;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_PKT_SIGN); }))) {
            mixin(enumMixinStr_EVP_PKT_SIGN);
        }
    }




    static if(!is(typeof(EVP_PKT_ENC))) {
        private enum enumMixinStr_EVP_PKT_ENC = `enum EVP_PKT_ENC = 0x0020;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_PKT_ENC); }))) {
            mixin(enumMixinStr_EVP_PKT_ENC);
        }
    }




    static if(!is(typeof(EVP_PKT_EXCH))) {
        private enum enumMixinStr_EVP_PKT_EXCH = `enum EVP_PKT_EXCH = 0x0040;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_PKT_EXCH); }))) {
            mixin(enumMixinStr_EVP_PKT_EXCH);
        }
    }




    static if(!is(typeof(EVP_PKS_RSA))) {
        private enum enumMixinStr_EVP_PKS_RSA = `enum EVP_PKS_RSA = 0x0100;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_PKS_RSA); }))) {
            mixin(enumMixinStr_EVP_PKS_RSA);
        }
    }




    static if(!is(typeof(EVP_PKS_DSA))) {
        private enum enumMixinStr_EVP_PKS_DSA = `enum EVP_PKS_DSA = 0x0200;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_PKS_DSA); }))) {
            mixin(enumMixinStr_EVP_PKS_DSA);
        }
    }




    static if(!is(typeof(EVP_PKS_EC))) {
        private enum enumMixinStr_EVP_PKS_EC = `enum EVP_PKS_EC = 0x0400;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_PKS_EC); }))) {
            mixin(enumMixinStr_EVP_PKS_EC);
        }
    }




    static if(!is(typeof(EVP_PKEY_NONE))) {
        private enum enumMixinStr_EVP_PKEY_NONE = `enum EVP_PKEY_NONE = NID_undef;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_PKEY_NONE); }))) {
            mixin(enumMixinStr_EVP_PKEY_NONE);
        }
    }




    static if(!is(typeof(EVP_PKEY_RSA))) {
        private enum enumMixinStr_EVP_PKEY_RSA = `enum EVP_PKEY_RSA = NID_rsaEncryption;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_PKEY_RSA); }))) {
            mixin(enumMixinStr_EVP_PKEY_RSA);
        }
    }




    static if(!is(typeof(EVP_PKEY_RSA2))) {
        private enum enumMixinStr_EVP_PKEY_RSA2 = `enum EVP_PKEY_RSA2 = NID_rsa;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_PKEY_RSA2); }))) {
            mixin(enumMixinStr_EVP_PKEY_RSA2);
        }
    }




    static if(!is(typeof(EVP_PKEY_RSA_PSS))) {
        private enum enumMixinStr_EVP_PKEY_RSA_PSS = `enum EVP_PKEY_RSA_PSS = NID_rsassaPss;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_PKEY_RSA_PSS); }))) {
            mixin(enumMixinStr_EVP_PKEY_RSA_PSS);
        }
    }




    static if(!is(typeof(EVP_PKEY_DSA))) {
        private enum enumMixinStr_EVP_PKEY_DSA = `enum EVP_PKEY_DSA = NID_dsa;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_PKEY_DSA); }))) {
            mixin(enumMixinStr_EVP_PKEY_DSA);
        }
    }




    static if(!is(typeof(EVP_PKEY_DSA1))) {
        private enum enumMixinStr_EVP_PKEY_DSA1 = `enum EVP_PKEY_DSA1 = NID_dsa_2;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_PKEY_DSA1); }))) {
            mixin(enumMixinStr_EVP_PKEY_DSA1);
        }
    }




    static if(!is(typeof(EVP_PKEY_DSA2))) {
        private enum enumMixinStr_EVP_PKEY_DSA2 = `enum EVP_PKEY_DSA2 = NID_dsaWithSHA;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_PKEY_DSA2); }))) {
            mixin(enumMixinStr_EVP_PKEY_DSA2);
        }
    }




    static if(!is(typeof(EVP_PKEY_DSA3))) {
        private enum enumMixinStr_EVP_PKEY_DSA3 = `enum EVP_PKEY_DSA3 = NID_dsaWithSHA1;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_PKEY_DSA3); }))) {
            mixin(enumMixinStr_EVP_PKEY_DSA3);
        }
    }




    static if(!is(typeof(EVP_PKEY_DSA4))) {
        private enum enumMixinStr_EVP_PKEY_DSA4 = `enum EVP_PKEY_DSA4 = NID_dsaWithSHA1_2;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_PKEY_DSA4); }))) {
            mixin(enumMixinStr_EVP_PKEY_DSA4);
        }
    }




    static if(!is(typeof(EVP_PKEY_DH))) {
        private enum enumMixinStr_EVP_PKEY_DH = `enum EVP_PKEY_DH = NID_dhKeyAgreement;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_PKEY_DH); }))) {
            mixin(enumMixinStr_EVP_PKEY_DH);
        }
    }




    static if(!is(typeof(EVP_PKEY_DHX))) {
        private enum enumMixinStr_EVP_PKEY_DHX = `enum EVP_PKEY_DHX = NID_dhpublicnumber;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_PKEY_DHX); }))) {
            mixin(enumMixinStr_EVP_PKEY_DHX);
        }
    }




    static if(!is(typeof(EVP_PKEY_EC))) {
        private enum enumMixinStr_EVP_PKEY_EC = `enum EVP_PKEY_EC = NID_X9_62_id_ecPublicKey;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_PKEY_EC); }))) {
            mixin(enumMixinStr_EVP_PKEY_EC);
        }
    }




    static if(!is(typeof(EVP_PKEY_SM2))) {
        private enum enumMixinStr_EVP_PKEY_SM2 = `enum EVP_PKEY_SM2 = NID_sm2;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_PKEY_SM2); }))) {
            mixin(enumMixinStr_EVP_PKEY_SM2);
        }
    }




    static if(!is(typeof(EVP_PKEY_HMAC))) {
        private enum enumMixinStr_EVP_PKEY_HMAC = `enum EVP_PKEY_HMAC = NID_hmac;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_PKEY_HMAC); }))) {
            mixin(enumMixinStr_EVP_PKEY_HMAC);
        }
    }




    static if(!is(typeof(EVP_PKEY_CMAC))) {
        private enum enumMixinStr_EVP_PKEY_CMAC = `enum EVP_PKEY_CMAC = NID_cmac;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_PKEY_CMAC); }))) {
            mixin(enumMixinStr_EVP_PKEY_CMAC);
        }
    }




    static if(!is(typeof(EVP_PKEY_SCRYPT))) {
        private enum enumMixinStr_EVP_PKEY_SCRYPT = `enum EVP_PKEY_SCRYPT = NID_id_scrypt;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_PKEY_SCRYPT); }))) {
            mixin(enumMixinStr_EVP_PKEY_SCRYPT);
        }
    }




    static if(!is(typeof(EVP_PKEY_TLS1_PRF))) {
        private enum enumMixinStr_EVP_PKEY_TLS1_PRF = `enum EVP_PKEY_TLS1_PRF = NID_tls1_prf;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_PKEY_TLS1_PRF); }))) {
            mixin(enumMixinStr_EVP_PKEY_TLS1_PRF);
        }
    }




    static if(!is(typeof(EVP_PKEY_HKDF))) {
        private enum enumMixinStr_EVP_PKEY_HKDF = `enum EVP_PKEY_HKDF = NID_hkdf;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_PKEY_HKDF); }))) {
            mixin(enumMixinStr_EVP_PKEY_HKDF);
        }
    }




    static if(!is(typeof(EVP_PKEY_POLY1305))) {
        private enum enumMixinStr_EVP_PKEY_POLY1305 = `enum EVP_PKEY_POLY1305 = NID_poly1305;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_PKEY_POLY1305); }))) {
            mixin(enumMixinStr_EVP_PKEY_POLY1305);
        }
    }




    static if(!is(typeof(EVP_PKEY_SIPHASH))) {
        private enum enumMixinStr_EVP_PKEY_SIPHASH = `enum EVP_PKEY_SIPHASH = NID_siphash;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_PKEY_SIPHASH); }))) {
            mixin(enumMixinStr_EVP_PKEY_SIPHASH);
        }
    }




    static if(!is(typeof(EVP_PKEY_X25519))) {
        private enum enumMixinStr_EVP_PKEY_X25519 = `enum EVP_PKEY_X25519 = NID_X25519;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_PKEY_X25519); }))) {
            mixin(enumMixinStr_EVP_PKEY_X25519);
        }
    }




    static if(!is(typeof(EVP_PKEY_ED25519))) {
        private enum enumMixinStr_EVP_PKEY_ED25519 = `enum EVP_PKEY_ED25519 = NID_ED25519;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_PKEY_ED25519); }))) {
            mixin(enumMixinStr_EVP_PKEY_ED25519);
        }
    }




    static if(!is(typeof(EVP_PKEY_X448))) {
        private enum enumMixinStr_EVP_PKEY_X448 = `enum EVP_PKEY_X448 = NID_X448;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_PKEY_X448); }))) {
            mixin(enumMixinStr_EVP_PKEY_X448);
        }
    }




    static if(!is(typeof(EVP_PKEY_ED448))) {
        private enum enumMixinStr_EVP_PKEY_ED448 = `enum EVP_PKEY_ED448 = NID_ED448;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_PKEY_ED448); }))) {
            mixin(enumMixinStr_EVP_PKEY_ED448);
        }
    }




    static if(!is(typeof(EVP_PKEY_MO_SIGN))) {
        private enum enumMixinStr_EVP_PKEY_MO_SIGN = `enum EVP_PKEY_MO_SIGN = 0x0001;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_PKEY_MO_SIGN); }))) {
            mixin(enumMixinStr_EVP_PKEY_MO_SIGN);
        }
    }




    static if(!is(typeof(EVP_PKEY_MO_VERIFY))) {
        private enum enumMixinStr_EVP_PKEY_MO_VERIFY = `enum EVP_PKEY_MO_VERIFY = 0x0002;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_PKEY_MO_VERIFY); }))) {
            mixin(enumMixinStr_EVP_PKEY_MO_VERIFY);
        }
    }




    static if(!is(typeof(EVP_PKEY_MO_ENCRYPT))) {
        private enum enumMixinStr_EVP_PKEY_MO_ENCRYPT = `enum EVP_PKEY_MO_ENCRYPT = 0x0004;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_PKEY_MO_ENCRYPT); }))) {
            mixin(enumMixinStr_EVP_PKEY_MO_ENCRYPT);
        }
    }




    static if(!is(typeof(EVP_PKEY_MO_DECRYPT))) {
        private enum enumMixinStr_EVP_PKEY_MO_DECRYPT = `enum EVP_PKEY_MO_DECRYPT = 0x0008;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_PKEY_MO_DECRYPT); }))) {
            mixin(enumMixinStr_EVP_PKEY_MO_DECRYPT);
        }
    }




    static if(!is(typeof(EC_F_EC_GFP_SIMPLE_POINT_SET_AFFINE_COORDINATES))) {
        private enum enumMixinStr_EC_F_EC_GFP_SIMPLE_POINT_SET_AFFINE_COORDINATES = `enum EC_F_EC_GFP_SIMPLE_POINT_SET_AFFINE_COORDINATES = 168;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_EC_GFP_SIMPLE_POINT_SET_AFFINE_COORDINATES); }))) {
            mixin(enumMixinStr_EC_F_EC_GFP_SIMPLE_POINT_SET_AFFINE_COORDINATES);
        }
    }




    static if(!is(typeof(EC_F_EC_GFP_SIMPLE_POINT_GET_AFFINE_COORDINATES))) {
        private enum enumMixinStr_EC_F_EC_GFP_SIMPLE_POINT_GET_AFFINE_COORDINATES = `enum EC_F_EC_GFP_SIMPLE_POINT_GET_AFFINE_COORDINATES = 167;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_EC_GFP_SIMPLE_POINT_GET_AFFINE_COORDINATES); }))) {
            mixin(enumMixinStr_EC_F_EC_GFP_SIMPLE_POINT_GET_AFFINE_COORDINATES);
        }
    }




    static if(!is(typeof(EC_F_EC_GFP_SIMPLE_POINTS_MAKE_AFFINE))) {
        private enum enumMixinStr_EC_F_EC_GFP_SIMPLE_POINTS_MAKE_AFFINE = `enum EC_F_EC_GFP_SIMPLE_POINTS_MAKE_AFFINE = 137;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_EC_GFP_SIMPLE_POINTS_MAKE_AFFINE); }))) {
            mixin(enumMixinStr_EC_F_EC_GFP_SIMPLE_POINTS_MAKE_AFFINE);
        }
    }




    static if(!is(typeof(EC_F_EC_GFP_SIMPLE_POINT2OCT))) {
        private enum enumMixinStr_EC_F_EC_GFP_SIMPLE_POINT2OCT = `enum EC_F_EC_GFP_SIMPLE_POINT2OCT = 104;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_EC_GFP_SIMPLE_POINT2OCT); }))) {
            mixin(enumMixinStr_EC_F_EC_GFP_SIMPLE_POINT2OCT);
        }
    }




    static if(!is(typeof(EC_F_EC_GFP_SIMPLE_OCT2POINT))) {
        private enum enumMixinStr_EC_F_EC_GFP_SIMPLE_OCT2POINT = `enum EC_F_EC_GFP_SIMPLE_OCT2POINT = 103;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_EC_GFP_SIMPLE_OCT2POINT); }))) {
            mixin(enumMixinStr_EC_F_EC_GFP_SIMPLE_OCT2POINT);
        }
    }




    static if(!is(typeof(EC_F_EC_GFP_SIMPLE_MAKE_AFFINE))) {
        private enum enumMixinStr_EC_F_EC_GFP_SIMPLE_MAKE_AFFINE = `enum EC_F_EC_GFP_SIMPLE_MAKE_AFFINE = 102;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_EC_GFP_SIMPLE_MAKE_AFFINE); }))) {
            mixin(enumMixinStr_EC_F_EC_GFP_SIMPLE_MAKE_AFFINE);
        }
    }




    static if(!is(typeof(EC_F_EC_GFP_SIMPLE_GROUP_SET_CURVE))) {
        private enum enumMixinStr_EC_F_EC_GFP_SIMPLE_GROUP_SET_CURVE = `enum EC_F_EC_GFP_SIMPLE_GROUP_SET_CURVE = 166;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_EC_GFP_SIMPLE_GROUP_SET_CURVE); }))) {
            mixin(enumMixinStr_EC_F_EC_GFP_SIMPLE_GROUP_SET_CURVE);
        }
    }




    static if(!is(typeof(EC_F_EC_GFP_SIMPLE_GROUP_CHECK_DISCRIMINANT))) {
        private enum enumMixinStr_EC_F_EC_GFP_SIMPLE_GROUP_CHECK_DISCRIMINANT = `enum EC_F_EC_GFP_SIMPLE_GROUP_CHECK_DISCRIMINANT = 165;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_EC_GFP_SIMPLE_GROUP_CHECK_DISCRIMINANT); }))) {
            mixin(enumMixinStr_EC_F_EC_GFP_SIMPLE_GROUP_CHECK_DISCRIMINANT);
        }
    }




    static if(!is(typeof(EC_F_EC_GFP_SIMPLE_FIELD_INV))) {
        private enum enumMixinStr_EC_F_EC_GFP_SIMPLE_FIELD_INV = `enum EC_F_EC_GFP_SIMPLE_FIELD_INV = 298;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_EC_GFP_SIMPLE_FIELD_INV); }))) {
            mixin(enumMixinStr_EC_F_EC_GFP_SIMPLE_FIELD_INV);
        }
    }




    static if(!is(typeof(EC_F_EC_GFP_SIMPLE_BLIND_COORDINATES))) {
        private enum enumMixinStr_EC_F_EC_GFP_SIMPLE_BLIND_COORDINATES = `enum EC_F_EC_GFP_SIMPLE_BLIND_COORDINATES = 287;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_EC_GFP_SIMPLE_BLIND_COORDINATES); }))) {
            mixin(enumMixinStr_EC_F_EC_GFP_SIMPLE_BLIND_COORDINATES);
        }
    }




    static if(!is(typeof(EC_F_EC_GFP_NIST_GROUP_SET_CURVE))) {
        private enum enumMixinStr_EC_F_EC_GFP_NIST_GROUP_SET_CURVE = `enum EC_F_EC_GFP_NIST_GROUP_SET_CURVE = 202;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_EC_GFP_NIST_GROUP_SET_CURVE); }))) {
            mixin(enumMixinStr_EC_F_EC_GFP_NIST_GROUP_SET_CURVE);
        }
    }




    static if(!is(typeof(EC_F_EC_GFP_NIST_FIELD_SQR))) {
        private enum enumMixinStr_EC_F_EC_GFP_NIST_FIELD_SQR = `enum EC_F_EC_GFP_NIST_FIELD_SQR = 201;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_EC_GFP_NIST_FIELD_SQR); }))) {
            mixin(enumMixinStr_EC_F_EC_GFP_NIST_FIELD_SQR);
        }
    }




    static if(!is(typeof(EC_F_EC_GFP_NIST_FIELD_MUL))) {
        private enum enumMixinStr_EC_F_EC_GFP_NIST_FIELD_MUL = `enum EC_F_EC_GFP_NIST_FIELD_MUL = 200;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_EC_GFP_NIST_FIELD_MUL); }))) {
            mixin(enumMixinStr_EC_F_EC_GFP_NIST_FIELD_MUL);
        }
    }




    static if(!is(typeof(EC_F_EC_GFP_NISTP521_POINT_GET_AFFINE_COORDINATES))) {
        private enum enumMixinStr_EC_F_EC_GFP_NISTP521_POINT_GET_AFFINE_COORDINATES = `enum EC_F_EC_GFP_NISTP521_POINT_GET_AFFINE_COORDINATES = 235;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_EC_GFP_NISTP521_POINT_GET_AFFINE_COORDINATES); }))) {
            mixin(enumMixinStr_EC_F_EC_GFP_NISTP521_POINT_GET_AFFINE_COORDINATES);
        }
    }




    static if(!is(typeof(EC_F_EC_GFP_NISTP521_POINTS_MUL))) {
        private enum enumMixinStr_EC_F_EC_GFP_NISTP521_POINTS_MUL = `enum EC_F_EC_GFP_NISTP521_POINTS_MUL = 234;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_EC_GFP_NISTP521_POINTS_MUL); }))) {
            mixin(enumMixinStr_EC_F_EC_GFP_NISTP521_POINTS_MUL);
        }
    }




    static if(!is(typeof(EC_F_EC_GFP_NISTP521_GROUP_SET_CURVE))) {
        private enum enumMixinStr_EC_F_EC_GFP_NISTP521_GROUP_SET_CURVE = `enum EC_F_EC_GFP_NISTP521_GROUP_SET_CURVE = 233;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_EC_GFP_NISTP521_GROUP_SET_CURVE); }))) {
            mixin(enumMixinStr_EC_F_EC_GFP_NISTP521_GROUP_SET_CURVE);
        }
    }




    static if(!is(typeof(EC_F_EC_GFP_NISTP256_POINT_GET_AFFINE_COORDINATES))) {
        private enum enumMixinStr_EC_F_EC_GFP_NISTP256_POINT_GET_AFFINE_COORDINATES = `enum EC_F_EC_GFP_NISTP256_POINT_GET_AFFINE_COORDINATES = 232;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_EC_GFP_NISTP256_POINT_GET_AFFINE_COORDINATES); }))) {
            mixin(enumMixinStr_EC_F_EC_GFP_NISTP256_POINT_GET_AFFINE_COORDINATES);
        }
    }




    static if(!is(typeof(EC_F_EC_GFP_NISTP256_POINTS_MUL))) {
        private enum enumMixinStr_EC_F_EC_GFP_NISTP256_POINTS_MUL = `enum EC_F_EC_GFP_NISTP256_POINTS_MUL = 231;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_EC_GFP_NISTP256_POINTS_MUL); }))) {
            mixin(enumMixinStr_EC_F_EC_GFP_NISTP256_POINTS_MUL);
        }
    }




    static if(!is(typeof(EC_F_EC_GFP_NISTP256_GROUP_SET_CURVE))) {
        private enum enumMixinStr_EC_F_EC_GFP_NISTP256_GROUP_SET_CURVE = `enum EC_F_EC_GFP_NISTP256_GROUP_SET_CURVE = 230;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_EC_GFP_NISTP256_GROUP_SET_CURVE); }))) {
            mixin(enumMixinStr_EC_F_EC_GFP_NISTP256_GROUP_SET_CURVE);
        }
    }




    static if(!is(typeof(EC_F_EC_GFP_NISTP224_POINT_GET_AFFINE_COORDINATES))) {
        private enum enumMixinStr_EC_F_EC_GFP_NISTP224_POINT_GET_AFFINE_COORDINATES = `enum EC_F_EC_GFP_NISTP224_POINT_GET_AFFINE_COORDINATES = 226;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_EC_GFP_NISTP224_POINT_GET_AFFINE_COORDINATES); }))) {
            mixin(enumMixinStr_EC_F_EC_GFP_NISTP224_POINT_GET_AFFINE_COORDINATES);
        }
    }




    static if(!is(typeof(EC_F_EC_GFP_NISTP224_POINTS_MUL))) {
        private enum enumMixinStr_EC_F_EC_GFP_NISTP224_POINTS_MUL = `enum EC_F_EC_GFP_NISTP224_POINTS_MUL = 228;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_EC_GFP_NISTP224_POINTS_MUL); }))) {
            mixin(enumMixinStr_EC_F_EC_GFP_NISTP224_POINTS_MUL);
        }
    }




    static if(!is(typeof(EC_F_EC_GFP_NISTP224_GROUP_SET_CURVE))) {
        private enum enumMixinStr_EC_F_EC_GFP_NISTP224_GROUP_SET_CURVE = `enum EC_F_EC_GFP_NISTP224_GROUP_SET_CURVE = 225;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_EC_GFP_NISTP224_GROUP_SET_CURVE); }))) {
            mixin(enumMixinStr_EC_F_EC_GFP_NISTP224_GROUP_SET_CURVE);
        }
    }




    static if(!is(typeof(EC_F_EC_GFP_MONT_GROUP_SET_CURVE))) {
        private enum enumMixinStr_EC_F_EC_GFP_MONT_GROUP_SET_CURVE = `enum EC_F_EC_GFP_MONT_GROUP_SET_CURVE = 189;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_EC_GFP_MONT_GROUP_SET_CURVE); }))) {
            mixin(enumMixinStr_EC_F_EC_GFP_MONT_GROUP_SET_CURVE);
        }
    }




    static if(!is(typeof(EVP_MD_FLAG_ONESHOT))) {
        private enum enumMixinStr_EVP_MD_FLAG_ONESHOT = `enum EVP_MD_FLAG_ONESHOT = 0x0001;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_MD_FLAG_ONESHOT); }))) {
            mixin(enumMixinStr_EVP_MD_FLAG_ONESHOT);
        }
    }




    static if(!is(typeof(EVP_MD_FLAG_XOF))) {
        private enum enumMixinStr_EVP_MD_FLAG_XOF = `enum EVP_MD_FLAG_XOF = 0x0002;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_MD_FLAG_XOF); }))) {
            mixin(enumMixinStr_EVP_MD_FLAG_XOF);
        }
    }




    static if(!is(typeof(EVP_MD_FLAG_DIGALGID_MASK))) {
        private enum enumMixinStr_EVP_MD_FLAG_DIGALGID_MASK = `enum EVP_MD_FLAG_DIGALGID_MASK = 0x0018;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_MD_FLAG_DIGALGID_MASK); }))) {
            mixin(enumMixinStr_EVP_MD_FLAG_DIGALGID_MASK);
        }
    }




    static if(!is(typeof(EVP_MD_FLAG_DIGALGID_NULL))) {
        private enum enumMixinStr_EVP_MD_FLAG_DIGALGID_NULL = `enum EVP_MD_FLAG_DIGALGID_NULL = 0x0000;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_MD_FLAG_DIGALGID_NULL); }))) {
            mixin(enumMixinStr_EVP_MD_FLAG_DIGALGID_NULL);
        }
    }




    static if(!is(typeof(EVP_MD_FLAG_DIGALGID_ABSENT))) {
        private enum enumMixinStr_EVP_MD_FLAG_DIGALGID_ABSENT = `enum EVP_MD_FLAG_DIGALGID_ABSENT = 0x0008;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_MD_FLAG_DIGALGID_ABSENT); }))) {
            mixin(enumMixinStr_EVP_MD_FLAG_DIGALGID_ABSENT);
        }
    }




    static if(!is(typeof(EVP_MD_FLAG_DIGALGID_CUSTOM))) {
        private enum enumMixinStr_EVP_MD_FLAG_DIGALGID_CUSTOM = `enum EVP_MD_FLAG_DIGALGID_CUSTOM = 0x0018;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_MD_FLAG_DIGALGID_CUSTOM); }))) {
            mixin(enumMixinStr_EVP_MD_FLAG_DIGALGID_CUSTOM);
        }
    }




    static if(!is(typeof(EVP_MD_FLAG_FIPS))) {
        private enum enumMixinStr_EVP_MD_FLAG_FIPS = `enum EVP_MD_FLAG_FIPS = 0x0400;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_MD_FLAG_FIPS); }))) {
            mixin(enumMixinStr_EVP_MD_FLAG_FIPS);
        }
    }




    static if(!is(typeof(EVP_MD_CTRL_DIGALGID))) {
        private enum enumMixinStr_EVP_MD_CTRL_DIGALGID = `enum EVP_MD_CTRL_DIGALGID = 0x1;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_MD_CTRL_DIGALGID); }))) {
            mixin(enumMixinStr_EVP_MD_CTRL_DIGALGID);
        }
    }




    static if(!is(typeof(EVP_MD_CTRL_MICALG))) {
        private enum enumMixinStr_EVP_MD_CTRL_MICALG = `enum EVP_MD_CTRL_MICALG = 0x2;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_MD_CTRL_MICALG); }))) {
            mixin(enumMixinStr_EVP_MD_CTRL_MICALG);
        }
    }




    static if(!is(typeof(EVP_MD_CTRL_XOF_LEN))) {
        private enum enumMixinStr_EVP_MD_CTRL_XOF_LEN = `enum EVP_MD_CTRL_XOF_LEN = 0x3;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_MD_CTRL_XOF_LEN); }))) {
            mixin(enumMixinStr_EVP_MD_CTRL_XOF_LEN);
        }
    }




    static if(!is(typeof(EVP_MD_CTRL_ALG_CTRL))) {
        private enum enumMixinStr_EVP_MD_CTRL_ALG_CTRL = `enum EVP_MD_CTRL_ALG_CTRL = 0x1000;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_MD_CTRL_ALG_CTRL); }))) {
            mixin(enumMixinStr_EVP_MD_CTRL_ALG_CTRL);
        }
    }




    static if(!is(typeof(EVP_MD_CTX_FLAG_ONESHOT))) {
        private enum enumMixinStr_EVP_MD_CTX_FLAG_ONESHOT = `enum EVP_MD_CTX_FLAG_ONESHOT = 0x0001;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_MD_CTX_FLAG_ONESHOT); }))) {
            mixin(enumMixinStr_EVP_MD_CTX_FLAG_ONESHOT);
        }
    }




    static if(!is(typeof(EVP_MD_CTX_FLAG_CLEANED))) {
        private enum enumMixinStr_EVP_MD_CTX_FLAG_CLEANED = `enum EVP_MD_CTX_FLAG_CLEANED = 0x0002;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_MD_CTX_FLAG_CLEANED); }))) {
            mixin(enumMixinStr_EVP_MD_CTX_FLAG_CLEANED);
        }
    }




    static if(!is(typeof(EVP_MD_CTX_FLAG_REUSE))) {
        private enum enumMixinStr_EVP_MD_CTX_FLAG_REUSE = `enum EVP_MD_CTX_FLAG_REUSE = 0x0004;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_MD_CTX_FLAG_REUSE); }))) {
            mixin(enumMixinStr_EVP_MD_CTX_FLAG_REUSE);
        }
    }




    static if(!is(typeof(EVP_MD_CTX_FLAG_NON_FIPS_ALLOW))) {
        private enum enumMixinStr_EVP_MD_CTX_FLAG_NON_FIPS_ALLOW = `enum EVP_MD_CTX_FLAG_NON_FIPS_ALLOW = 0x0008;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_MD_CTX_FLAG_NON_FIPS_ALLOW); }))) {
            mixin(enumMixinStr_EVP_MD_CTX_FLAG_NON_FIPS_ALLOW);
        }
    }




    static if(!is(typeof(EVP_MD_CTX_FLAG_PAD_MASK))) {
        private enum enumMixinStr_EVP_MD_CTX_FLAG_PAD_MASK = `enum EVP_MD_CTX_FLAG_PAD_MASK = 0xF0;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_MD_CTX_FLAG_PAD_MASK); }))) {
            mixin(enumMixinStr_EVP_MD_CTX_FLAG_PAD_MASK);
        }
    }




    static if(!is(typeof(EVP_MD_CTX_FLAG_PAD_PKCS1))) {
        private enum enumMixinStr_EVP_MD_CTX_FLAG_PAD_PKCS1 = `enum EVP_MD_CTX_FLAG_PAD_PKCS1 = 0x00;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_MD_CTX_FLAG_PAD_PKCS1); }))) {
            mixin(enumMixinStr_EVP_MD_CTX_FLAG_PAD_PKCS1);
        }
    }




    static if(!is(typeof(EVP_MD_CTX_FLAG_PAD_X931))) {
        private enum enumMixinStr_EVP_MD_CTX_FLAG_PAD_X931 = `enum EVP_MD_CTX_FLAG_PAD_X931 = 0x10;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_MD_CTX_FLAG_PAD_X931); }))) {
            mixin(enumMixinStr_EVP_MD_CTX_FLAG_PAD_X931);
        }
    }




    static if(!is(typeof(EVP_MD_CTX_FLAG_PAD_PSS))) {
        private enum enumMixinStr_EVP_MD_CTX_FLAG_PAD_PSS = `enum EVP_MD_CTX_FLAG_PAD_PSS = 0x20;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_MD_CTX_FLAG_PAD_PSS); }))) {
            mixin(enumMixinStr_EVP_MD_CTX_FLAG_PAD_PSS);
        }
    }




    static if(!is(typeof(EVP_MD_CTX_FLAG_NO_INIT))) {
        private enum enumMixinStr_EVP_MD_CTX_FLAG_NO_INIT = `enum EVP_MD_CTX_FLAG_NO_INIT = 0x0100;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_MD_CTX_FLAG_NO_INIT); }))) {
            mixin(enumMixinStr_EVP_MD_CTX_FLAG_NO_INIT);
        }
    }




    static if(!is(typeof(EVP_MD_CTX_FLAG_FINALISE))) {
        private enum enumMixinStr_EVP_MD_CTX_FLAG_FINALISE = `enum EVP_MD_CTX_FLAG_FINALISE = 0x0200;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_MD_CTX_FLAG_FINALISE); }))) {
            mixin(enumMixinStr_EVP_MD_CTX_FLAG_FINALISE);
        }
    }




    static if(!is(typeof(EC_F_EC_GFP_MONT_FIELD_SQR))) {
        private enum enumMixinStr_EC_F_EC_GFP_MONT_FIELD_SQR = `enum EC_F_EC_GFP_MONT_FIELD_SQR = 132;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_EC_GFP_MONT_FIELD_SQR); }))) {
            mixin(enumMixinStr_EC_F_EC_GFP_MONT_FIELD_SQR);
        }
    }




    static if(!is(typeof(EC_F_EC_GFP_MONT_FIELD_SET_TO_ONE))) {
        private enum enumMixinStr_EC_F_EC_GFP_MONT_FIELD_SET_TO_ONE = `enum EC_F_EC_GFP_MONT_FIELD_SET_TO_ONE = 209;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_EC_GFP_MONT_FIELD_SET_TO_ONE); }))) {
            mixin(enumMixinStr_EC_F_EC_GFP_MONT_FIELD_SET_TO_ONE);
        }
    }




    static if(!is(typeof(EC_F_EC_GFP_MONT_FIELD_MUL))) {
        private enum enumMixinStr_EC_F_EC_GFP_MONT_FIELD_MUL = `enum EC_F_EC_GFP_MONT_FIELD_MUL = 131;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_EC_GFP_MONT_FIELD_MUL); }))) {
            mixin(enumMixinStr_EC_F_EC_GFP_MONT_FIELD_MUL);
        }
    }




    static if(!is(typeof(EC_F_EC_GFP_MONT_FIELD_INV))) {
        private enum enumMixinStr_EC_F_EC_GFP_MONT_FIELD_INV = `enum EC_F_EC_GFP_MONT_FIELD_INV = 297;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_EC_GFP_MONT_FIELD_INV); }))) {
            mixin(enumMixinStr_EC_F_EC_GFP_MONT_FIELD_INV);
        }
    }




    static if(!is(typeof(EC_F_EC_GFP_MONT_FIELD_ENCODE))) {
        private enum enumMixinStr_EC_F_EC_GFP_MONT_FIELD_ENCODE = `enum EC_F_EC_GFP_MONT_FIELD_ENCODE = 134;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_EC_GFP_MONT_FIELD_ENCODE); }))) {
            mixin(enumMixinStr_EC_F_EC_GFP_MONT_FIELD_ENCODE);
        }
    }




    static if(!is(typeof(EC_F_EC_GFP_MONT_FIELD_DECODE))) {
        private enum enumMixinStr_EC_F_EC_GFP_MONT_FIELD_DECODE = `enum EC_F_EC_GFP_MONT_FIELD_DECODE = 133;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_EC_GFP_MONT_FIELD_DECODE); }))) {
            mixin(enumMixinStr_EC_F_EC_GFP_MONT_FIELD_DECODE);
        }
    }




    static if(!is(typeof(EC_F_EC_GF2M_SIMPLE_SET_COMPRESSED_COORDINATES))) {
        private enum enumMixinStr_EC_F_EC_GF2M_SIMPLE_SET_COMPRESSED_COORDINATES = `enum EC_F_EC_GF2M_SIMPLE_SET_COMPRESSED_COORDINATES = 164;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_EC_GF2M_SIMPLE_SET_COMPRESSED_COORDINATES); }))) {
            mixin(enumMixinStr_EC_F_EC_GF2M_SIMPLE_SET_COMPRESSED_COORDINATES);
        }
    }




    static if(!is(typeof(EC_F_EC_GF2M_SIMPLE_POINT_SET_AFFINE_COORDINATES))) {
        private enum enumMixinStr_EC_F_EC_GF2M_SIMPLE_POINT_SET_AFFINE_COORDINATES = `enum EC_F_EC_GF2M_SIMPLE_POINT_SET_AFFINE_COORDINATES = 163;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_EC_GF2M_SIMPLE_POINT_SET_AFFINE_COORDINATES); }))) {
            mixin(enumMixinStr_EC_F_EC_GF2M_SIMPLE_POINT_SET_AFFINE_COORDINATES);
        }
    }




    static if(!is(typeof(EC_F_EC_GF2M_SIMPLE_POINT_GET_AFFINE_COORDINATES))) {
        private enum enumMixinStr_EC_F_EC_GF2M_SIMPLE_POINT_GET_AFFINE_COORDINATES = `enum EC_F_EC_GF2M_SIMPLE_POINT_GET_AFFINE_COORDINATES = 162;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_EC_GF2M_SIMPLE_POINT_GET_AFFINE_COORDINATES); }))) {
            mixin(enumMixinStr_EC_F_EC_GF2M_SIMPLE_POINT_GET_AFFINE_COORDINATES);
        }
    }




    static if(!is(typeof(EC_F_EC_GF2M_SIMPLE_POINTS_MUL))) {
        private enum enumMixinStr_EC_F_EC_GF2M_SIMPLE_POINTS_MUL = `enum EC_F_EC_GF2M_SIMPLE_POINTS_MUL = 289;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_EC_GF2M_SIMPLE_POINTS_MUL); }))) {
            mixin(enumMixinStr_EC_F_EC_GF2M_SIMPLE_POINTS_MUL);
        }
    }




    static if(!is(typeof(EC_F_EC_GF2M_SIMPLE_POINT2OCT))) {
        private enum enumMixinStr_EC_F_EC_GF2M_SIMPLE_POINT2OCT = `enum EC_F_EC_GF2M_SIMPLE_POINT2OCT = 161;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_EC_GF2M_SIMPLE_POINT2OCT); }))) {
            mixin(enumMixinStr_EC_F_EC_GF2M_SIMPLE_POINT2OCT);
        }
    }




    static if(!is(typeof(EC_F_EC_GF2M_SIMPLE_OCT2POINT))) {
        private enum enumMixinStr_EC_F_EC_GF2M_SIMPLE_OCT2POINT = `enum EC_F_EC_GF2M_SIMPLE_OCT2POINT = 160;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_EC_GF2M_SIMPLE_OCT2POINT); }))) {
            mixin(enumMixinStr_EC_F_EC_GF2M_SIMPLE_OCT2POINT);
        }
    }




    static if(!is(typeof(EC_F_EC_GF2M_SIMPLE_LADDER_PRE))) {
        private enum enumMixinStr_EC_F_EC_GF2M_SIMPLE_LADDER_PRE = `enum EC_F_EC_GF2M_SIMPLE_LADDER_PRE = 288;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_EC_GF2M_SIMPLE_LADDER_PRE); }))) {
            mixin(enumMixinStr_EC_F_EC_GF2M_SIMPLE_LADDER_PRE);
        }
    }




    static if(!is(typeof(EC_F_EC_GF2M_SIMPLE_LADDER_POST))) {
        private enum enumMixinStr_EC_F_EC_GF2M_SIMPLE_LADDER_POST = `enum EC_F_EC_GF2M_SIMPLE_LADDER_POST = 285;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_EC_GF2M_SIMPLE_LADDER_POST); }))) {
            mixin(enumMixinStr_EC_F_EC_GF2M_SIMPLE_LADDER_POST);
        }
    }




    static if(!is(typeof(EC_F_EC_GF2M_SIMPLE_GROUP_SET_CURVE))) {
        private enum enumMixinStr_EC_F_EC_GF2M_SIMPLE_GROUP_SET_CURVE = `enum EC_F_EC_GF2M_SIMPLE_GROUP_SET_CURVE = 195;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_EC_GF2M_SIMPLE_GROUP_SET_CURVE); }))) {
            mixin(enumMixinStr_EC_F_EC_GF2M_SIMPLE_GROUP_SET_CURVE);
        }
    }




    static if(!is(typeof(EC_F_EC_GF2M_SIMPLE_GROUP_CHECK_DISCRIMINANT))) {
        private enum enumMixinStr_EC_F_EC_GF2M_SIMPLE_GROUP_CHECK_DISCRIMINANT = `enum EC_F_EC_GF2M_SIMPLE_GROUP_CHECK_DISCRIMINANT = 159;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_EC_GF2M_SIMPLE_GROUP_CHECK_DISCRIMINANT); }))) {
            mixin(enumMixinStr_EC_F_EC_GF2M_SIMPLE_GROUP_CHECK_DISCRIMINANT);
        }
    }




    static if(!is(typeof(EC_F_EC_GF2M_SIMPLE_FIELD_INV))) {
        private enum enumMixinStr_EC_F_EC_GF2M_SIMPLE_FIELD_INV = `enum EC_F_EC_GF2M_SIMPLE_FIELD_INV = 296;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_EC_GF2M_SIMPLE_FIELD_INV); }))) {
            mixin(enumMixinStr_EC_F_EC_GF2M_SIMPLE_FIELD_INV);
        }
    }




    static if(!is(typeof(EC_F_EC_GF2M_MONTGOMERY_POINT_MULTIPLY))) {
        private enum enumMixinStr_EC_F_EC_GF2M_MONTGOMERY_POINT_MULTIPLY = `enum EC_F_EC_GF2M_MONTGOMERY_POINT_MULTIPLY = 208;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_EC_GF2M_MONTGOMERY_POINT_MULTIPLY); }))) {
            mixin(enumMixinStr_EC_F_EC_GF2M_MONTGOMERY_POINT_MULTIPLY);
        }
    }




    static if(!is(typeof(EVP_CIPH_STREAM_CIPHER))) {
        private enum enumMixinStr_EVP_CIPH_STREAM_CIPHER = `enum EVP_CIPH_STREAM_CIPHER = 0x0;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_CIPH_STREAM_CIPHER); }))) {
            mixin(enumMixinStr_EVP_CIPH_STREAM_CIPHER);
        }
    }




    static if(!is(typeof(EVP_CIPH_ECB_MODE))) {
        private enum enumMixinStr_EVP_CIPH_ECB_MODE = `enum EVP_CIPH_ECB_MODE = 0x1;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_CIPH_ECB_MODE); }))) {
            mixin(enumMixinStr_EVP_CIPH_ECB_MODE);
        }
    }




    static if(!is(typeof(EVP_CIPH_CBC_MODE))) {
        private enum enumMixinStr_EVP_CIPH_CBC_MODE = `enum EVP_CIPH_CBC_MODE = 0x2;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_CIPH_CBC_MODE); }))) {
            mixin(enumMixinStr_EVP_CIPH_CBC_MODE);
        }
    }




    static if(!is(typeof(EVP_CIPH_CFB_MODE))) {
        private enum enumMixinStr_EVP_CIPH_CFB_MODE = `enum EVP_CIPH_CFB_MODE = 0x3;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_CIPH_CFB_MODE); }))) {
            mixin(enumMixinStr_EVP_CIPH_CFB_MODE);
        }
    }




    static if(!is(typeof(EVP_CIPH_OFB_MODE))) {
        private enum enumMixinStr_EVP_CIPH_OFB_MODE = `enum EVP_CIPH_OFB_MODE = 0x4;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_CIPH_OFB_MODE); }))) {
            mixin(enumMixinStr_EVP_CIPH_OFB_MODE);
        }
    }




    static if(!is(typeof(EVP_CIPH_CTR_MODE))) {
        private enum enumMixinStr_EVP_CIPH_CTR_MODE = `enum EVP_CIPH_CTR_MODE = 0x5;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_CIPH_CTR_MODE); }))) {
            mixin(enumMixinStr_EVP_CIPH_CTR_MODE);
        }
    }




    static if(!is(typeof(EVP_CIPH_GCM_MODE))) {
        private enum enumMixinStr_EVP_CIPH_GCM_MODE = `enum EVP_CIPH_GCM_MODE = 0x6;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_CIPH_GCM_MODE); }))) {
            mixin(enumMixinStr_EVP_CIPH_GCM_MODE);
        }
    }




    static if(!is(typeof(EVP_CIPH_CCM_MODE))) {
        private enum enumMixinStr_EVP_CIPH_CCM_MODE = `enum EVP_CIPH_CCM_MODE = 0x7;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_CIPH_CCM_MODE); }))) {
            mixin(enumMixinStr_EVP_CIPH_CCM_MODE);
        }
    }




    static if(!is(typeof(EVP_CIPH_XTS_MODE))) {
        private enum enumMixinStr_EVP_CIPH_XTS_MODE = `enum EVP_CIPH_XTS_MODE = 0x10001;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_CIPH_XTS_MODE); }))) {
            mixin(enumMixinStr_EVP_CIPH_XTS_MODE);
        }
    }




    static if(!is(typeof(EVP_CIPH_WRAP_MODE))) {
        private enum enumMixinStr_EVP_CIPH_WRAP_MODE = `enum EVP_CIPH_WRAP_MODE = 0x10002;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_CIPH_WRAP_MODE); }))) {
            mixin(enumMixinStr_EVP_CIPH_WRAP_MODE);
        }
    }




    static if(!is(typeof(EVP_CIPH_OCB_MODE))) {
        private enum enumMixinStr_EVP_CIPH_OCB_MODE = `enum EVP_CIPH_OCB_MODE = 0x10003;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_CIPH_OCB_MODE); }))) {
            mixin(enumMixinStr_EVP_CIPH_OCB_MODE);
        }
    }




    static if(!is(typeof(EVP_CIPH_MODE))) {
        private enum enumMixinStr_EVP_CIPH_MODE = `enum EVP_CIPH_MODE = 0xF0007;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_CIPH_MODE); }))) {
            mixin(enumMixinStr_EVP_CIPH_MODE);
        }
    }




    static if(!is(typeof(EVP_CIPH_VARIABLE_LENGTH))) {
        private enum enumMixinStr_EVP_CIPH_VARIABLE_LENGTH = `enum EVP_CIPH_VARIABLE_LENGTH = 0x8;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_CIPH_VARIABLE_LENGTH); }))) {
            mixin(enumMixinStr_EVP_CIPH_VARIABLE_LENGTH);
        }
    }




    static if(!is(typeof(EVP_CIPH_CUSTOM_IV))) {
        private enum enumMixinStr_EVP_CIPH_CUSTOM_IV = `enum EVP_CIPH_CUSTOM_IV = 0x10;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_CIPH_CUSTOM_IV); }))) {
            mixin(enumMixinStr_EVP_CIPH_CUSTOM_IV);
        }
    }




    static if(!is(typeof(EVP_CIPH_ALWAYS_CALL_INIT))) {
        private enum enumMixinStr_EVP_CIPH_ALWAYS_CALL_INIT = `enum EVP_CIPH_ALWAYS_CALL_INIT = 0x20;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_CIPH_ALWAYS_CALL_INIT); }))) {
            mixin(enumMixinStr_EVP_CIPH_ALWAYS_CALL_INIT);
        }
    }




    static if(!is(typeof(EVP_CIPH_CTRL_INIT))) {
        private enum enumMixinStr_EVP_CIPH_CTRL_INIT = `enum EVP_CIPH_CTRL_INIT = 0x40;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_CIPH_CTRL_INIT); }))) {
            mixin(enumMixinStr_EVP_CIPH_CTRL_INIT);
        }
    }




    static if(!is(typeof(EVP_CIPH_CUSTOM_KEY_LENGTH))) {
        private enum enumMixinStr_EVP_CIPH_CUSTOM_KEY_LENGTH = `enum EVP_CIPH_CUSTOM_KEY_LENGTH = 0x80;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_CIPH_CUSTOM_KEY_LENGTH); }))) {
            mixin(enumMixinStr_EVP_CIPH_CUSTOM_KEY_LENGTH);
        }
    }




    static if(!is(typeof(EVP_CIPH_NO_PADDING))) {
        private enum enumMixinStr_EVP_CIPH_NO_PADDING = `enum EVP_CIPH_NO_PADDING = 0x100;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_CIPH_NO_PADDING); }))) {
            mixin(enumMixinStr_EVP_CIPH_NO_PADDING);
        }
    }




    static if(!is(typeof(EVP_CIPH_RAND_KEY))) {
        private enum enumMixinStr_EVP_CIPH_RAND_KEY = `enum EVP_CIPH_RAND_KEY = 0x200;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_CIPH_RAND_KEY); }))) {
            mixin(enumMixinStr_EVP_CIPH_RAND_KEY);
        }
    }




    static if(!is(typeof(EVP_CIPH_CUSTOM_COPY))) {
        private enum enumMixinStr_EVP_CIPH_CUSTOM_COPY = `enum EVP_CIPH_CUSTOM_COPY = 0x400;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_CIPH_CUSTOM_COPY); }))) {
            mixin(enumMixinStr_EVP_CIPH_CUSTOM_COPY);
        }
    }




    static if(!is(typeof(EVP_CIPH_CUSTOM_IV_LENGTH))) {
        private enum enumMixinStr_EVP_CIPH_CUSTOM_IV_LENGTH = `enum EVP_CIPH_CUSTOM_IV_LENGTH = 0x800;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_CIPH_CUSTOM_IV_LENGTH); }))) {
            mixin(enumMixinStr_EVP_CIPH_CUSTOM_IV_LENGTH);
        }
    }




    static if(!is(typeof(EVP_CIPH_FLAG_DEFAULT_ASN1))) {
        private enum enumMixinStr_EVP_CIPH_FLAG_DEFAULT_ASN1 = `enum EVP_CIPH_FLAG_DEFAULT_ASN1 = 0x1000;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_CIPH_FLAG_DEFAULT_ASN1); }))) {
            mixin(enumMixinStr_EVP_CIPH_FLAG_DEFAULT_ASN1);
        }
    }




    static if(!is(typeof(EVP_CIPH_FLAG_LENGTH_BITS))) {
        private enum enumMixinStr_EVP_CIPH_FLAG_LENGTH_BITS = `enum EVP_CIPH_FLAG_LENGTH_BITS = 0x2000;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_CIPH_FLAG_LENGTH_BITS); }))) {
            mixin(enumMixinStr_EVP_CIPH_FLAG_LENGTH_BITS);
        }
    }




    static if(!is(typeof(EVP_CIPH_FLAG_FIPS))) {
        private enum enumMixinStr_EVP_CIPH_FLAG_FIPS = `enum EVP_CIPH_FLAG_FIPS = 0x4000;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_CIPH_FLAG_FIPS); }))) {
            mixin(enumMixinStr_EVP_CIPH_FLAG_FIPS);
        }
    }




    static if(!is(typeof(EVP_CIPH_FLAG_NON_FIPS_ALLOW))) {
        private enum enumMixinStr_EVP_CIPH_FLAG_NON_FIPS_ALLOW = `enum EVP_CIPH_FLAG_NON_FIPS_ALLOW = 0x8000;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_CIPH_FLAG_NON_FIPS_ALLOW); }))) {
            mixin(enumMixinStr_EVP_CIPH_FLAG_NON_FIPS_ALLOW);
        }
    }




    static if(!is(typeof(EVP_CIPH_FLAG_CUSTOM_CIPHER))) {
        private enum enumMixinStr_EVP_CIPH_FLAG_CUSTOM_CIPHER = `enum EVP_CIPH_FLAG_CUSTOM_CIPHER = 0x100000;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_CIPH_FLAG_CUSTOM_CIPHER); }))) {
            mixin(enumMixinStr_EVP_CIPH_FLAG_CUSTOM_CIPHER);
        }
    }




    static if(!is(typeof(EVP_CIPH_FLAG_AEAD_CIPHER))) {
        private enum enumMixinStr_EVP_CIPH_FLAG_AEAD_CIPHER = `enum EVP_CIPH_FLAG_AEAD_CIPHER = 0x200000;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_CIPH_FLAG_AEAD_CIPHER); }))) {
            mixin(enumMixinStr_EVP_CIPH_FLAG_AEAD_CIPHER);
        }
    }




    static if(!is(typeof(EVP_CIPH_FLAG_TLS1_1_MULTIBLOCK))) {
        private enum enumMixinStr_EVP_CIPH_FLAG_TLS1_1_MULTIBLOCK = `enum EVP_CIPH_FLAG_TLS1_1_MULTIBLOCK = 0x400000;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_CIPH_FLAG_TLS1_1_MULTIBLOCK); }))) {
            mixin(enumMixinStr_EVP_CIPH_FLAG_TLS1_1_MULTIBLOCK);
        }
    }




    static if(!is(typeof(EVP_CIPH_FLAG_PIPELINE))) {
        private enum enumMixinStr_EVP_CIPH_FLAG_PIPELINE = `enum EVP_CIPH_FLAG_PIPELINE = 0X800000;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_CIPH_FLAG_PIPELINE); }))) {
            mixin(enumMixinStr_EVP_CIPH_FLAG_PIPELINE);
        }
    }




    static if(!is(typeof(EVP_CIPHER_CTX_FLAG_WRAP_ALLOW))) {
        private enum enumMixinStr_EVP_CIPHER_CTX_FLAG_WRAP_ALLOW = `enum EVP_CIPHER_CTX_FLAG_WRAP_ALLOW = 0x1;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_CIPHER_CTX_FLAG_WRAP_ALLOW); }))) {
            mixin(enumMixinStr_EVP_CIPHER_CTX_FLAG_WRAP_ALLOW);
        }
    }




    static if(!is(typeof(EVP_CTRL_INIT))) {
        private enum enumMixinStr_EVP_CTRL_INIT = `enum EVP_CTRL_INIT = 0x0;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_CTRL_INIT); }))) {
            mixin(enumMixinStr_EVP_CTRL_INIT);
        }
    }




    static if(!is(typeof(EVP_CTRL_SET_KEY_LENGTH))) {
        private enum enumMixinStr_EVP_CTRL_SET_KEY_LENGTH = `enum EVP_CTRL_SET_KEY_LENGTH = 0x1;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_CTRL_SET_KEY_LENGTH); }))) {
            mixin(enumMixinStr_EVP_CTRL_SET_KEY_LENGTH);
        }
    }




    static if(!is(typeof(EVP_CTRL_GET_RC2_KEY_BITS))) {
        private enum enumMixinStr_EVP_CTRL_GET_RC2_KEY_BITS = `enum EVP_CTRL_GET_RC2_KEY_BITS = 0x2;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_CTRL_GET_RC2_KEY_BITS); }))) {
            mixin(enumMixinStr_EVP_CTRL_GET_RC2_KEY_BITS);
        }
    }




    static if(!is(typeof(EVP_CTRL_SET_RC2_KEY_BITS))) {
        private enum enumMixinStr_EVP_CTRL_SET_RC2_KEY_BITS = `enum EVP_CTRL_SET_RC2_KEY_BITS = 0x3;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_CTRL_SET_RC2_KEY_BITS); }))) {
            mixin(enumMixinStr_EVP_CTRL_SET_RC2_KEY_BITS);
        }
    }




    static if(!is(typeof(EVP_CTRL_GET_RC5_ROUNDS))) {
        private enum enumMixinStr_EVP_CTRL_GET_RC5_ROUNDS = `enum EVP_CTRL_GET_RC5_ROUNDS = 0x4;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_CTRL_GET_RC5_ROUNDS); }))) {
            mixin(enumMixinStr_EVP_CTRL_GET_RC5_ROUNDS);
        }
    }




    static if(!is(typeof(EVP_CTRL_SET_RC5_ROUNDS))) {
        private enum enumMixinStr_EVP_CTRL_SET_RC5_ROUNDS = `enum EVP_CTRL_SET_RC5_ROUNDS = 0x5;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_CTRL_SET_RC5_ROUNDS); }))) {
            mixin(enumMixinStr_EVP_CTRL_SET_RC5_ROUNDS);
        }
    }




    static if(!is(typeof(EVP_CTRL_RAND_KEY))) {
        private enum enumMixinStr_EVP_CTRL_RAND_KEY = `enum EVP_CTRL_RAND_KEY = 0x6;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_CTRL_RAND_KEY); }))) {
            mixin(enumMixinStr_EVP_CTRL_RAND_KEY);
        }
    }




    static if(!is(typeof(EVP_CTRL_PBE_PRF_NID))) {
        private enum enumMixinStr_EVP_CTRL_PBE_PRF_NID = `enum EVP_CTRL_PBE_PRF_NID = 0x7;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_CTRL_PBE_PRF_NID); }))) {
            mixin(enumMixinStr_EVP_CTRL_PBE_PRF_NID);
        }
    }




    static if(!is(typeof(EVP_CTRL_COPY))) {
        private enum enumMixinStr_EVP_CTRL_COPY = `enum EVP_CTRL_COPY = 0x8;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_CTRL_COPY); }))) {
            mixin(enumMixinStr_EVP_CTRL_COPY);
        }
    }




    static if(!is(typeof(EVP_CTRL_AEAD_SET_IVLEN))) {
        private enum enumMixinStr_EVP_CTRL_AEAD_SET_IVLEN = `enum EVP_CTRL_AEAD_SET_IVLEN = 0x9;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_CTRL_AEAD_SET_IVLEN); }))) {
            mixin(enumMixinStr_EVP_CTRL_AEAD_SET_IVLEN);
        }
    }




    static if(!is(typeof(EVP_CTRL_AEAD_GET_TAG))) {
        private enum enumMixinStr_EVP_CTRL_AEAD_GET_TAG = `enum EVP_CTRL_AEAD_GET_TAG = 0x10;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_CTRL_AEAD_GET_TAG); }))) {
            mixin(enumMixinStr_EVP_CTRL_AEAD_GET_TAG);
        }
    }




    static if(!is(typeof(EVP_CTRL_AEAD_SET_TAG))) {
        private enum enumMixinStr_EVP_CTRL_AEAD_SET_TAG = `enum EVP_CTRL_AEAD_SET_TAG = 0x11;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_CTRL_AEAD_SET_TAG); }))) {
            mixin(enumMixinStr_EVP_CTRL_AEAD_SET_TAG);
        }
    }




    static if(!is(typeof(EVP_CTRL_AEAD_SET_IV_FIXED))) {
        private enum enumMixinStr_EVP_CTRL_AEAD_SET_IV_FIXED = `enum EVP_CTRL_AEAD_SET_IV_FIXED = 0x12;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_CTRL_AEAD_SET_IV_FIXED); }))) {
            mixin(enumMixinStr_EVP_CTRL_AEAD_SET_IV_FIXED);
        }
    }




    static if(!is(typeof(EVP_CTRL_GCM_SET_IVLEN))) {
        private enum enumMixinStr_EVP_CTRL_GCM_SET_IVLEN = `enum EVP_CTRL_GCM_SET_IVLEN = 0x9;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_CTRL_GCM_SET_IVLEN); }))) {
            mixin(enumMixinStr_EVP_CTRL_GCM_SET_IVLEN);
        }
    }




    static if(!is(typeof(EVP_CTRL_GCM_GET_TAG))) {
        private enum enumMixinStr_EVP_CTRL_GCM_GET_TAG = `enum EVP_CTRL_GCM_GET_TAG = 0x10;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_CTRL_GCM_GET_TAG); }))) {
            mixin(enumMixinStr_EVP_CTRL_GCM_GET_TAG);
        }
    }




    static if(!is(typeof(EVP_CTRL_GCM_SET_TAG))) {
        private enum enumMixinStr_EVP_CTRL_GCM_SET_TAG = `enum EVP_CTRL_GCM_SET_TAG = 0x11;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_CTRL_GCM_SET_TAG); }))) {
            mixin(enumMixinStr_EVP_CTRL_GCM_SET_TAG);
        }
    }




    static if(!is(typeof(EVP_CTRL_GCM_SET_IV_FIXED))) {
        private enum enumMixinStr_EVP_CTRL_GCM_SET_IV_FIXED = `enum EVP_CTRL_GCM_SET_IV_FIXED = 0x12;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_CTRL_GCM_SET_IV_FIXED); }))) {
            mixin(enumMixinStr_EVP_CTRL_GCM_SET_IV_FIXED);
        }
    }




    static if(!is(typeof(EVP_CTRL_GCM_IV_GEN))) {
        private enum enumMixinStr_EVP_CTRL_GCM_IV_GEN = `enum EVP_CTRL_GCM_IV_GEN = 0x13;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_CTRL_GCM_IV_GEN); }))) {
            mixin(enumMixinStr_EVP_CTRL_GCM_IV_GEN);
        }
    }




    static if(!is(typeof(EVP_CTRL_CCM_SET_IVLEN))) {
        private enum enumMixinStr_EVP_CTRL_CCM_SET_IVLEN = `enum EVP_CTRL_CCM_SET_IVLEN = 0x9;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_CTRL_CCM_SET_IVLEN); }))) {
            mixin(enumMixinStr_EVP_CTRL_CCM_SET_IVLEN);
        }
    }




    static if(!is(typeof(EVP_CTRL_CCM_GET_TAG))) {
        private enum enumMixinStr_EVP_CTRL_CCM_GET_TAG = `enum EVP_CTRL_CCM_GET_TAG = 0x10;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_CTRL_CCM_GET_TAG); }))) {
            mixin(enumMixinStr_EVP_CTRL_CCM_GET_TAG);
        }
    }




    static if(!is(typeof(EVP_CTRL_CCM_SET_TAG))) {
        private enum enumMixinStr_EVP_CTRL_CCM_SET_TAG = `enum EVP_CTRL_CCM_SET_TAG = 0x11;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_CTRL_CCM_SET_TAG); }))) {
            mixin(enumMixinStr_EVP_CTRL_CCM_SET_TAG);
        }
    }




    static if(!is(typeof(EVP_CTRL_CCM_SET_IV_FIXED))) {
        private enum enumMixinStr_EVP_CTRL_CCM_SET_IV_FIXED = `enum EVP_CTRL_CCM_SET_IV_FIXED = 0x12;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_CTRL_CCM_SET_IV_FIXED); }))) {
            mixin(enumMixinStr_EVP_CTRL_CCM_SET_IV_FIXED);
        }
    }




    static if(!is(typeof(EVP_CTRL_CCM_SET_L))) {
        private enum enumMixinStr_EVP_CTRL_CCM_SET_L = `enum EVP_CTRL_CCM_SET_L = 0x14;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_CTRL_CCM_SET_L); }))) {
            mixin(enumMixinStr_EVP_CTRL_CCM_SET_L);
        }
    }




    static if(!is(typeof(EVP_CTRL_CCM_SET_MSGLEN))) {
        private enum enumMixinStr_EVP_CTRL_CCM_SET_MSGLEN = `enum EVP_CTRL_CCM_SET_MSGLEN = 0x15;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_CTRL_CCM_SET_MSGLEN); }))) {
            mixin(enumMixinStr_EVP_CTRL_CCM_SET_MSGLEN);
        }
    }




    static if(!is(typeof(EVP_CTRL_AEAD_TLS1_AAD))) {
        private enum enumMixinStr_EVP_CTRL_AEAD_TLS1_AAD = `enum EVP_CTRL_AEAD_TLS1_AAD = 0x16;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_CTRL_AEAD_TLS1_AAD); }))) {
            mixin(enumMixinStr_EVP_CTRL_AEAD_TLS1_AAD);
        }
    }




    static if(!is(typeof(EVP_CTRL_AEAD_SET_MAC_KEY))) {
        private enum enumMixinStr_EVP_CTRL_AEAD_SET_MAC_KEY = `enum EVP_CTRL_AEAD_SET_MAC_KEY = 0x17;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_CTRL_AEAD_SET_MAC_KEY); }))) {
            mixin(enumMixinStr_EVP_CTRL_AEAD_SET_MAC_KEY);
        }
    }




    static if(!is(typeof(EVP_CTRL_GCM_SET_IV_INV))) {
        private enum enumMixinStr_EVP_CTRL_GCM_SET_IV_INV = `enum EVP_CTRL_GCM_SET_IV_INV = 0x18;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_CTRL_GCM_SET_IV_INV); }))) {
            mixin(enumMixinStr_EVP_CTRL_GCM_SET_IV_INV);
        }
    }




    static if(!is(typeof(EVP_CTRL_TLS1_1_MULTIBLOCK_AAD))) {
        private enum enumMixinStr_EVP_CTRL_TLS1_1_MULTIBLOCK_AAD = `enum EVP_CTRL_TLS1_1_MULTIBLOCK_AAD = 0x19;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_CTRL_TLS1_1_MULTIBLOCK_AAD); }))) {
            mixin(enumMixinStr_EVP_CTRL_TLS1_1_MULTIBLOCK_AAD);
        }
    }




    static if(!is(typeof(EVP_CTRL_TLS1_1_MULTIBLOCK_ENCRYPT))) {
        private enum enumMixinStr_EVP_CTRL_TLS1_1_MULTIBLOCK_ENCRYPT = `enum EVP_CTRL_TLS1_1_MULTIBLOCK_ENCRYPT = 0x1a;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_CTRL_TLS1_1_MULTIBLOCK_ENCRYPT); }))) {
            mixin(enumMixinStr_EVP_CTRL_TLS1_1_MULTIBLOCK_ENCRYPT);
        }
    }




    static if(!is(typeof(EVP_CTRL_TLS1_1_MULTIBLOCK_DECRYPT))) {
        private enum enumMixinStr_EVP_CTRL_TLS1_1_MULTIBLOCK_DECRYPT = `enum EVP_CTRL_TLS1_1_MULTIBLOCK_DECRYPT = 0x1b;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_CTRL_TLS1_1_MULTIBLOCK_DECRYPT); }))) {
            mixin(enumMixinStr_EVP_CTRL_TLS1_1_MULTIBLOCK_DECRYPT);
        }
    }




    static if(!is(typeof(EVP_CTRL_TLS1_1_MULTIBLOCK_MAX_BUFSIZE))) {
        private enum enumMixinStr_EVP_CTRL_TLS1_1_MULTIBLOCK_MAX_BUFSIZE = `enum EVP_CTRL_TLS1_1_MULTIBLOCK_MAX_BUFSIZE = 0x1c;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_CTRL_TLS1_1_MULTIBLOCK_MAX_BUFSIZE); }))) {
            mixin(enumMixinStr_EVP_CTRL_TLS1_1_MULTIBLOCK_MAX_BUFSIZE);
        }
    }




    static if(!is(typeof(EVP_CTRL_SSL3_MASTER_SECRET))) {
        private enum enumMixinStr_EVP_CTRL_SSL3_MASTER_SECRET = `enum EVP_CTRL_SSL3_MASTER_SECRET = 0x1d;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_CTRL_SSL3_MASTER_SECRET); }))) {
            mixin(enumMixinStr_EVP_CTRL_SSL3_MASTER_SECRET);
        }
    }




    static if(!is(typeof(EVP_CTRL_SET_SBOX))) {
        private enum enumMixinStr_EVP_CTRL_SET_SBOX = `enum EVP_CTRL_SET_SBOX = 0x1e;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_CTRL_SET_SBOX); }))) {
            mixin(enumMixinStr_EVP_CTRL_SET_SBOX);
        }
    }




    static if(!is(typeof(EVP_CTRL_SBOX_USED))) {
        private enum enumMixinStr_EVP_CTRL_SBOX_USED = `enum EVP_CTRL_SBOX_USED = 0x1f;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_CTRL_SBOX_USED); }))) {
            mixin(enumMixinStr_EVP_CTRL_SBOX_USED);
        }
    }




    static if(!is(typeof(EVP_CTRL_KEY_MESH))) {
        private enum enumMixinStr_EVP_CTRL_KEY_MESH = `enum EVP_CTRL_KEY_MESH = 0x20;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_CTRL_KEY_MESH); }))) {
            mixin(enumMixinStr_EVP_CTRL_KEY_MESH);
        }
    }




    static if(!is(typeof(EVP_CTRL_BLOCK_PADDING_MODE))) {
        private enum enumMixinStr_EVP_CTRL_BLOCK_PADDING_MODE = `enum EVP_CTRL_BLOCK_PADDING_MODE = 0x21;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_CTRL_BLOCK_PADDING_MODE); }))) {
            mixin(enumMixinStr_EVP_CTRL_BLOCK_PADDING_MODE);
        }
    }




    static if(!is(typeof(EVP_CTRL_SET_PIPELINE_OUTPUT_BUFS))) {
        private enum enumMixinStr_EVP_CTRL_SET_PIPELINE_OUTPUT_BUFS = `enum EVP_CTRL_SET_PIPELINE_OUTPUT_BUFS = 0x22;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_CTRL_SET_PIPELINE_OUTPUT_BUFS); }))) {
            mixin(enumMixinStr_EVP_CTRL_SET_PIPELINE_OUTPUT_BUFS);
        }
    }




    static if(!is(typeof(EVP_CTRL_SET_PIPELINE_INPUT_BUFS))) {
        private enum enumMixinStr_EVP_CTRL_SET_PIPELINE_INPUT_BUFS = `enum EVP_CTRL_SET_PIPELINE_INPUT_BUFS = 0x23;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_CTRL_SET_PIPELINE_INPUT_BUFS); }))) {
            mixin(enumMixinStr_EVP_CTRL_SET_PIPELINE_INPUT_BUFS);
        }
    }




    static if(!is(typeof(EVP_CTRL_SET_PIPELINE_INPUT_LENS))) {
        private enum enumMixinStr_EVP_CTRL_SET_PIPELINE_INPUT_LENS = `enum EVP_CTRL_SET_PIPELINE_INPUT_LENS = 0x24;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_CTRL_SET_PIPELINE_INPUT_LENS); }))) {
            mixin(enumMixinStr_EVP_CTRL_SET_PIPELINE_INPUT_LENS);
        }
    }




    static if(!is(typeof(EVP_CTRL_GET_IVLEN))) {
        private enum enumMixinStr_EVP_CTRL_GET_IVLEN = `enum EVP_CTRL_GET_IVLEN = 0x25;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_CTRL_GET_IVLEN); }))) {
            mixin(enumMixinStr_EVP_CTRL_GET_IVLEN);
        }
    }




    static if(!is(typeof(EVP_PADDING_PKCS7))) {
        private enum enumMixinStr_EVP_PADDING_PKCS7 = `enum EVP_PADDING_PKCS7 = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_PADDING_PKCS7); }))) {
            mixin(enumMixinStr_EVP_PADDING_PKCS7);
        }
    }




    static if(!is(typeof(EVP_PADDING_ISO7816_4))) {
        private enum enumMixinStr_EVP_PADDING_ISO7816_4 = `enum EVP_PADDING_ISO7816_4 = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_PADDING_ISO7816_4); }))) {
            mixin(enumMixinStr_EVP_PADDING_ISO7816_4);
        }
    }




    static if(!is(typeof(EVP_PADDING_ANSI923))) {
        private enum enumMixinStr_EVP_PADDING_ANSI923 = `enum EVP_PADDING_ANSI923 = 3;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_PADDING_ANSI923); }))) {
            mixin(enumMixinStr_EVP_PADDING_ANSI923);
        }
    }




    static if(!is(typeof(EVP_PADDING_ISO10126))) {
        private enum enumMixinStr_EVP_PADDING_ISO10126 = `enum EVP_PADDING_ISO10126 = 4;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_PADDING_ISO10126); }))) {
            mixin(enumMixinStr_EVP_PADDING_ISO10126);
        }
    }




    static if(!is(typeof(EVP_PADDING_ZERO))) {
        private enum enumMixinStr_EVP_PADDING_ZERO = `enum EVP_PADDING_ZERO = 5;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_PADDING_ZERO); }))) {
            mixin(enumMixinStr_EVP_PADDING_ZERO);
        }
    }




    static if(!is(typeof(EVP_AEAD_TLS1_AAD_LEN))) {
        private enum enumMixinStr_EVP_AEAD_TLS1_AAD_LEN = `enum EVP_AEAD_TLS1_AAD_LEN = 13;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_AEAD_TLS1_AAD_LEN); }))) {
            mixin(enumMixinStr_EVP_AEAD_TLS1_AAD_LEN);
        }
    }




    static if(!is(typeof(EC_F_EC_ASN1_GROUP2FIELDID))) {
        private enum enumMixinStr_EC_F_EC_ASN1_GROUP2FIELDID = `enum EC_F_EC_ASN1_GROUP2FIELDID = 154;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_EC_ASN1_GROUP2FIELDID); }))) {
            mixin(enumMixinStr_EC_F_EC_ASN1_GROUP2FIELDID);
        }
    }




    static if(!is(typeof(EC_F_EC_ASN1_GROUP2CURVE))) {
        private enum enumMixinStr_EC_F_EC_ASN1_GROUP2CURVE = `enum EC_F_EC_ASN1_GROUP2CURVE = 153;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_EC_ASN1_GROUP2CURVE); }))) {
            mixin(enumMixinStr_EC_F_EC_ASN1_GROUP2CURVE);
        }
    }




    static if(!is(typeof(EVP_GCM_TLS_FIXED_IV_LEN))) {
        private enum enumMixinStr_EVP_GCM_TLS_FIXED_IV_LEN = `enum EVP_GCM_TLS_FIXED_IV_LEN = 4;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_GCM_TLS_FIXED_IV_LEN); }))) {
            mixin(enumMixinStr_EVP_GCM_TLS_FIXED_IV_LEN);
        }
    }




    static if(!is(typeof(EVP_GCM_TLS_EXPLICIT_IV_LEN))) {
        private enum enumMixinStr_EVP_GCM_TLS_EXPLICIT_IV_LEN = `enum EVP_GCM_TLS_EXPLICIT_IV_LEN = 8;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_GCM_TLS_EXPLICIT_IV_LEN); }))) {
            mixin(enumMixinStr_EVP_GCM_TLS_EXPLICIT_IV_LEN);
        }
    }




    static if(!is(typeof(EVP_GCM_TLS_TAG_LEN))) {
        private enum enumMixinStr_EVP_GCM_TLS_TAG_LEN = `enum EVP_GCM_TLS_TAG_LEN = 16;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_GCM_TLS_TAG_LEN); }))) {
            mixin(enumMixinStr_EVP_GCM_TLS_TAG_LEN);
        }
    }




    static if(!is(typeof(EVP_CCM_TLS_FIXED_IV_LEN))) {
        private enum enumMixinStr_EVP_CCM_TLS_FIXED_IV_LEN = `enum EVP_CCM_TLS_FIXED_IV_LEN = 4;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_CCM_TLS_FIXED_IV_LEN); }))) {
            mixin(enumMixinStr_EVP_CCM_TLS_FIXED_IV_LEN);
        }
    }




    static if(!is(typeof(EVP_CCM_TLS_EXPLICIT_IV_LEN))) {
        private enum enumMixinStr_EVP_CCM_TLS_EXPLICIT_IV_LEN = `enum EVP_CCM_TLS_EXPLICIT_IV_LEN = 8;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_CCM_TLS_EXPLICIT_IV_LEN); }))) {
            mixin(enumMixinStr_EVP_CCM_TLS_EXPLICIT_IV_LEN);
        }
    }




    static if(!is(typeof(EVP_CCM_TLS_IV_LEN))) {
        private enum enumMixinStr_EVP_CCM_TLS_IV_LEN = `enum EVP_CCM_TLS_IV_LEN = 12;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_CCM_TLS_IV_LEN); }))) {
            mixin(enumMixinStr_EVP_CCM_TLS_IV_LEN);
        }
    }




    static if(!is(typeof(EVP_CCM_TLS_TAG_LEN))) {
        private enum enumMixinStr_EVP_CCM_TLS_TAG_LEN = `enum EVP_CCM_TLS_TAG_LEN = 16;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_CCM_TLS_TAG_LEN); }))) {
            mixin(enumMixinStr_EVP_CCM_TLS_TAG_LEN);
        }
    }




    static if(!is(typeof(EVP_CCM8_TLS_TAG_LEN))) {
        private enum enumMixinStr_EVP_CCM8_TLS_TAG_LEN = `enum EVP_CCM8_TLS_TAG_LEN = 8;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_CCM8_TLS_TAG_LEN); }))) {
            mixin(enumMixinStr_EVP_CCM8_TLS_TAG_LEN);
        }
    }




    static if(!is(typeof(EVP_CHACHAPOLY_TLS_TAG_LEN))) {
        private enum enumMixinStr_EVP_CHACHAPOLY_TLS_TAG_LEN = `enum EVP_CHACHAPOLY_TLS_TAG_LEN = 16;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_CHACHAPOLY_TLS_TAG_LEN); }))) {
            mixin(enumMixinStr_EVP_CHACHAPOLY_TLS_TAG_LEN);
        }
    }




    static if(!is(typeof(EC_F_ECX_PUB_ENCODE))) {
        private enum enumMixinStr_EC_F_ECX_PUB_ENCODE = `enum EC_F_ECX_PUB_ENCODE = 268;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_ECX_PUB_ENCODE); }))) {
            mixin(enumMixinStr_EC_F_ECX_PUB_ENCODE);
        }
    }




    static if(!is(typeof(EC_F_ECX_PRIV_ENCODE))) {
        private enum enumMixinStr_EC_F_ECX_PRIV_ENCODE = `enum EC_F_ECX_PRIV_ENCODE = 267;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_ECX_PRIV_ENCODE); }))) {
            mixin(enumMixinStr_EC_F_ECX_PRIV_ENCODE);
        }
    }




    static if(!is(typeof(EC_F_ECX_KEY_OP))) {
        private enum enumMixinStr_EC_F_ECX_KEY_OP = `enum EC_F_ECX_KEY_OP = 266;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_ECX_KEY_OP); }))) {
            mixin(enumMixinStr_EC_F_ECX_KEY_OP);
        }
    }




    static if(!is(typeof(EC_F_ECP_NISTZ256_WINDOWED_MUL))) {
        private enum enumMixinStr_EC_F_ECP_NISTZ256_WINDOWED_MUL = `enum EC_F_ECP_NISTZ256_WINDOWED_MUL = 242;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_ECP_NISTZ256_WINDOWED_MUL); }))) {
            mixin(enumMixinStr_EC_F_ECP_NISTZ256_WINDOWED_MUL);
        }
    }
    static if(!is(typeof(EC_F_ECP_NISTZ256_PRE_COMP_NEW))) {
        private enum enumMixinStr_EC_F_ECP_NISTZ256_PRE_COMP_NEW = `enum EC_F_ECP_NISTZ256_PRE_COMP_NEW = 244;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_ECP_NISTZ256_PRE_COMP_NEW); }))) {
            mixin(enumMixinStr_EC_F_ECP_NISTZ256_PRE_COMP_NEW);
        }
    }
    static if(!is(typeof(EC_F_ECP_NISTZ256_POINTS_MUL))) {
        private enum enumMixinStr_EC_F_ECP_NISTZ256_POINTS_MUL = `enum EC_F_ECP_NISTZ256_POINTS_MUL = 241;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_ECP_NISTZ256_POINTS_MUL); }))) {
            mixin(enumMixinStr_EC_F_ECP_NISTZ256_POINTS_MUL);
        }
    }




    static if(!is(typeof(EC_F_ECP_NISTZ256_MULT_PRECOMPUTE))) {
        private enum enumMixinStr_EC_F_ECP_NISTZ256_MULT_PRECOMPUTE = `enum EC_F_ECP_NISTZ256_MULT_PRECOMPUTE = 243;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_ECP_NISTZ256_MULT_PRECOMPUTE); }))) {
            mixin(enumMixinStr_EC_F_ECP_NISTZ256_MULT_PRECOMPUTE);
        }
    }




    static if(!is(typeof(EC_F_ECP_NISTZ256_INV_MOD_ORD))) {
        private enum enumMixinStr_EC_F_ECP_NISTZ256_INV_MOD_ORD = `enum EC_F_ECP_NISTZ256_INV_MOD_ORD = 275;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_ECP_NISTZ256_INV_MOD_ORD); }))) {
            mixin(enumMixinStr_EC_F_ECP_NISTZ256_INV_MOD_ORD);
        }
    }




    static if(!is(typeof(EC_F_ECP_NISTZ256_GET_AFFINE))) {
        private enum enumMixinStr_EC_F_ECP_NISTZ256_GET_AFFINE = `enum EC_F_ECP_NISTZ256_GET_AFFINE = 240;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_ECP_NISTZ256_GET_AFFINE); }))) {
            mixin(enumMixinStr_EC_F_ECP_NISTZ256_GET_AFFINE);
        }
    }




    static if(!is(typeof(EC_F_ECPKPARAMETERS_PRINT_FP))) {
        private enum enumMixinStr_EC_F_ECPKPARAMETERS_PRINT_FP = `enum EC_F_ECPKPARAMETERS_PRINT_FP = 150;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_ECPKPARAMETERS_PRINT_FP); }))) {
            mixin(enumMixinStr_EC_F_ECPKPARAMETERS_PRINT_FP);
        }
    }




    static if(!is(typeof(EC_F_ECPKPARAMETERS_PRINT))) {
        private enum enumMixinStr_EC_F_ECPKPARAMETERS_PRINT = `enum EC_F_ECPKPARAMETERS_PRINT = 149;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_ECPKPARAMETERS_PRINT); }))) {
            mixin(enumMixinStr_EC_F_ECPKPARAMETERS_PRINT);
        }
    }




    static if(!is(typeof(EC_F_ECPARAMETERS_PRINT_FP))) {
        private enum enumMixinStr_EC_F_ECPARAMETERS_PRINT_FP = `enum EC_F_ECPARAMETERS_PRINT_FP = 148;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_ECPARAMETERS_PRINT_FP); }))) {
            mixin(enumMixinStr_EC_F_ECPARAMETERS_PRINT_FP);
        }
    }
    static if(!is(typeof(EC_F_ECPARAMETERS_PRINT))) {
        private enum enumMixinStr_EC_F_ECPARAMETERS_PRINT = `enum EC_F_ECPARAMETERS_PRINT = 147;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_ECPARAMETERS_PRINT); }))) {
            mixin(enumMixinStr_EC_F_ECPARAMETERS_PRINT);
        }
    }




    static if(!is(typeof(EC_F_ECKEY_TYPE2PARAM))) {
        private enum enumMixinStr_EC_F_ECKEY_TYPE2PARAM = `enum EC_F_ECKEY_TYPE2PARAM = 220;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_ECKEY_TYPE2PARAM); }))) {
            mixin(enumMixinStr_EC_F_ECKEY_TYPE2PARAM);
        }
    }




    static if(!is(typeof(EC_F_ECKEY_PUB_ENCODE))) {
        private enum enumMixinStr_EC_F_ECKEY_PUB_ENCODE = `enum EC_F_ECKEY_PUB_ENCODE = 216;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_ECKEY_PUB_ENCODE); }))) {
            mixin(enumMixinStr_EC_F_ECKEY_PUB_ENCODE);
        }
    }




    static if(!is(typeof(EC_F_ECKEY_PUB_DECODE))) {
        private enum enumMixinStr_EC_F_ECKEY_PUB_DECODE = `enum EC_F_ECKEY_PUB_DECODE = 215;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_ECKEY_PUB_DECODE); }))) {
            mixin(enumMixinStr_EC_F_ECKEY_PUB_DECODE);
        }
    }






    static if(!is(typeof(EC_F_ECKEY_PRIV_ENCODE))) {
        private enum enumMixinStr_EC_F_ECKEY_PRIV_ENCODE = `enum EC_F_ECKEY_PRIV_ENCODE = 214;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_ECKEY_PRIV_ENCODE); }))) {
            mixin(enumMixinStr_EC_F_ECKEY_PRIV_ENCODE);
        }
    }




    static if(!is(typeof(EC_F_ECKEY_PRIV_DECODE))) {
        private enum enumMixinStr_EC_F_ECKEY_PRIV_DECODE = `enum EC_F_ECKEY_PRIV_DECODE = 213;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_ECKEY_PRIV_DECODE); }))) {
            mixin(enumMixinStr_EC_F_ECKEY_PRIV_DECODE);
        }
    }




    static if(!is(typeof(EC_F_ECKEY_PARAM_DECODE))) {
        private enum enumMixinStr_EC_F_ECKEY_PARAM_DECODE = `enum EC_F_ECKEY_PARAM_DECODE = 212;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_ECKEY_PARAM_DECODE); }))) {
            mixin(enumMixinStr_EC_F_ECKEY_PARAM_DECODE);
        }
    }




    static if(!is(typeof(EC_F_ECKEY_PARAM2TYPE))) {
        private enum enumMixinStr_EC_F_ECKEY_PARAM2TYPE = `enum EC_F_ECKEY_PARAM2TYPE = 223;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_ECKEY_PARAM2TYPE); }))) {
            mixin(enumMixinStr_EC_F_ECKEY_PARAM2TYPE);
        }
    }




    static if(!is(typeof(EC_F_ECD_ITEM_VERIFY))) {
        private enum enumMixinStr_EC_F_ECD_ITEM_VERIFY = `enum EC_F_ECD_ITEM_VERIFY = 270;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_ECD_ITEM_VERIFY); }))) {
            mixin(enumMixinStr_EC_F_ECD_ITEM_VERIFY);
        }
    }






    static if(!is(typeof(EC_F_ECDSA_VERIFY))) {
        private enum enumMixinStr_EC_F_ECDSA_VERIFY = `enum EC_F_ECDSA_VERIFY = 253;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_ECDSA_VERIFY); }))) {
            mixin(enumMixinStr_EC_F_ECDSA_VERIFY);
        }
    }




    static if(!is(typeof(EC_F_ECDSA_SIG_NEW))) {
        private enum enumMixinStr_EC_F_ECDSA_SIG_NEW = `enum EC_F_ECDSA_SIG_NEW = 265;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_ECDSA_SIG_NEW); }))) {
            mixin(enumMixinStr_EC_F_ECDSA_SIG_NEW);
        }
    }




    static if(!is(typeof(EC_F_ECDSA_SIGN_SETUP))) {
        private enum enumMixinStr_EC_F_ECDSA_SIGN_SETUP = `enum EC_F_ECDSA_SIGN_SETUP = 248;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_ECDSA_SIGN_SETUP); }))) {
            mixin(enumMixinStr_EC_F_ECDSA_SIGN_SETUP);
        }
    }




    static if(!is(typeof(EC_F_ECDSA_SIGN_EX))) {
        private enum enumMixinStr_EC_F_ECDSA_SIGN_EX = `enum EC_F_ECDSA_SIGN_EX = 254;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_ECDSA_SIGN_EX); }))) {
            mixin(enumMixinStr_EC_F_ECDSA_SIGN_EX);
        }
    }




    static if(!is(typeof(EC_F_ECDSA_DO_VERIFY))) {
        private enum enumMixinStr_EC_F_ECDSA_DO_VERIFY = `enum EC_F_ECDSA_DO_VERIFY = 252;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_ECDSA_DO_VERIFY); }))) {
            mixin(enumMixinStr_EC_F_ECDSA_DO_VERIFY);
        }
    }




    static if(!is(typeof(EC_F_ECDSA_DO_SIGN_EX))) {
        private enum enumMixinStr_EC_F_ECDSA_DO_SIGN_EX = `enum EC_F_ECDSA_DO_SIGN_EX = 251;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_ECDSA_DO_SIGN_EX); }))) {
            mixin(enumMixinStr_EC_F_ECDSA_DO_SIGN_EX);
        }
    }




    static if(!is(typeof(EC_F_ECDH_SIMPLE_COMPUTE_KEY))) {
        private enum enumMixinStr_EC_F_ECDH_SIMPLE_COMPUTE_KEY = `enum EC_F_ECDH_SIMPLE_COMPUTE_KEY = 257;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_ECDH_SIMPLE_COMPUTE_KEY); }))) {
            mixin(enumMixinStr_EC_F_ECDH_SIMPLE_COMPUTE_KEY);
        }
    }




    static if(!is(typeof(EC_F_ECDH_COMPUTE_KEY))) {
        private enum enumMixinStr_EC_F_ECDH_COMPUTE_KEY = `enum EC_F_ECDH_COMPUTE_KEY = 246;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_ECDH_COMPUTE_KEY); }))) {
            mixin(enumMixinStr_EC_F_ECDH_COMPUTE_KEY);
        }
    }




    static if(!is(typeof(EC_F_ECDH_CMS_SET_SHARED_INFO))) {
        private enum enumMixinStr_EC_F_ECDH_CMS_SET_SHARED_INFO = `enum EC_F_ECDH_CMS_SET_SHARED_INFO = 239;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_ECDH_CMS_SET_SHARED_INFO); }))) {
            mixin(enumMixinStr_EC_F_ECDH_CMS_SET_SHARED_INFO);
        }
    }




    static if(!is(typeof(EC_F_ECDH_CMS_DECRYPT))) {
        private enum enumMixinStr_EC_F_ECDH_CMS_DECRYPT = `enum EC_F_ECDH_CMS_DECRYPT = 238;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_ECDH_CMS_DECRYPT); }))) {
            mixin(enumMixinStr_EC_F_ECDH_CMS_DECRYPT);
        }
    }




    static if(!is(typeof(EC_F_DO_EC_KEY_PRINT))) {
        private enum enumMixinStr_EC_F_DO_EC_KEY_PRINT = `enum EC_F_DO_EC_KEY_PRINT = 221;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_DO_EC_KEY_PRINT); }))) {
            mixin(enumMixinStr_EC_F_DO_EC_KEY_PRINT);
        }
    }




    static if(!is(typeof(EC_F_D2I_ECPRIVATEKEY))) {
        private enum enumMixinStr_EC_F_D2I_ECPRIVATEKEY = `enum EC_F_D2I_ECPRIVATEKEY = 146;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_D2I_ECPRIVATEKEY); }))) {
            mixin(enumMixinStr_EC_F_D2I_ECPRIVATEKEY);
        }
    }




    static if(!is(typeof(EC_F_D2I_ECPKPARAMETERS))) {
        private enum enumMixinStr_EC_F_D2I_ECPKPARAMETERS = `enum EC_F_D2I_ECPKPARAMETERS = 145;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_D2I_ECPKPARAMETERS); }))) {
            mixin(enumMixinStr_EC_F_D2I_ECPKPARAMETERS);
        }
    }




    static if(!is(typeof(EC_F_D2I_ECPARAMETERS))) {
        private enum enumMixinStr_EC_F_D2I_ECPARAMETERS = `enum EC_F_D2I_ECPARAMETERS = 144;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_D2I_ECPARAMETERS); }))) {
            mixin(enumMixinStr_EC_F_D2I_ECPARAMETERS);
        }
    }




    static if(!is(typeof(EC_F_BN_TO_FELEM))) {
        private enum enumMixinStr_EC_F_BN_TO_FELEM = `enum EC_F_BN_TO_FELEM = 224;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_F_BN_TO_FELEM); }))) {
            mixin(enumMixinStr_EC_F_BN_TO_FELEM);
        }
    }






    static if(!is(typeof(EVP_PKEY_ECDH_KDF_X9_62))) {
        private enum enumMixinStr_EVP_PKEY_ECDH_KDF_X9_62 = `enum EVP_PKEY_ECDH_KDF_X9_62 = EVP_PKEY_ECDH_KDF_X9_63;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_PKEY_ECDH_KDF_X9_62); }))) {
            mixin(enumMixinStr_EVP_PKEY_ECDH_KDF_X9_62);
        }
    }






    static if(!is(typeof(EVP_PKEY_ECDH_KDF_X9_63))) {
        private enum enumMixinStr_EVP_PKEY_ECDH_KDF_X9_63 = `enum EVP_PKEY_ECDH_KDF_X9_63 = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_PKEY_ECDH_KDF_X9_63); }))) {
            mixin(enumMixinStr_EVP_PKEY_ECDH_KDF_X9_63);
        }
    }
    static if(!is(typeof(EVP_PKEY_ECDH_KDF_NONE))) {
        private enum enumMixinStr_EVP_PKEY_ECDH_KDF_NONE = `enum EVP_PKEY_ECDH_KDF_NONE = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_PKEY_ECDH_KDF_NONE); }))) {
            mixin(enumMixinStr_EVP_PKEY_ECDH_KDF_NONE);
        }
    }
    static if(!is(typeof(EVP_PKEY_CTRL_GET1_ID_LEN))) {
        private enum enumMixinStr_EVP_PKEY_CTRL_GET1_ID_LEN = `enum EVP_PKEY_CTRL_GET1_ID_LEN = ( EVP_PKEY_ALG_CTRL + 13 );`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_PKEY_CTRL_GET1_ID_LEN); }))) {
            mixin(enumMixinStr_EVP_PKEY_CTRL_GET1_ID_LEN);
        }
    }




    static if(!is(typeof(EVP_PKEY_CTRL_GET1_ID))) {
        private enum enumMixinStr_EVP_PKEY_CTRL_GET1_ID = `enum EVP_PKEY_CTRL_GET1_ID = ( EVP_PKEY_ALG_CTRL + 12 );`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_PKEY_CTRL_GET1_ID); }))) {
            mixin(enumMixinStr_EVP_PKEY_CTRL_GET1_ID);
        }
    }




    static if(!is(typeof(EVP_PKEY_CTRL_SET1_ID))) {
        private enum enumMixinStr_EVP_PKEY_CTRL_SET1_ID = `enum EVP_PKEY_CTRL_SET1_ID = ( EVP_PKEY_ALG_CTRL + 11 );`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_PKEY_CTRL_SET1_ID); }))) {
            mixin(enumMixinStr_EVP_PKEY_CTRL_SET1_ID);
        }
    }




    static if(!is(typeof(EVP_PKEY_CTRL_GET_EC_KDF_UKM))) {
        private enum enumMixinStr_EVP_PKEY_CTRL_GET_EC_KDF_UKM = `enum EVP_PKEY_CTRL_GET_EC_KDF_UKM = ( EVP_PKEY_ALG_CTRL + 10 );`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_PKEY_CTRL_GET_EC_KDF_UKM); }))) {
            mixin(enumMixinStr_EVP_PKEY_CTRL_GET_EC_KDF_UKM);
        }
    }
    static if(!is(typeof(EVP_PKEY_CTRL_EC_KDF_UKM))) {
        private enum enumMixinStr_EVP_PKEY_CTRL_EC_KDF_UKM = `enum EVP_PKEY_CTRL_EC_KDF_UKM = ( EVP_PKEY_ALG_CTRL + 9 );`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_PKEY_CTRL_EC_KDF_UKM); }))) {
            mixin(enumMixinStr_EVP_PKEY_CTRL_EC_KDF_UKM);
        }
    }




    static if(!is(typeof(EVP_PKEY_CTRL_GET_EC_KDF_OUTLEN))) {
        private enum enumMixinStr_EVP_PKEY_CTRL_GET_EC_KDF_OUTLEN = `enum EVP_PKEY_CTRL_GET_EC_KDF_OUTLEN = ( EVP_PKEY_ALG_CTRL + 8 );`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_PKEY_CTRL_GET_EC_KDF_OUTLEN); }))) {
            mixin(enumMixinStr_EVP_PKEY_CTRL_GET_EC_KDF_OUTLEN);
        }
    }




    static if(!is(typeof(EVP_PKEY_CTRL_EC_KDF_OUTLEN))) {
        private enum enumMixinStr_EVP_PKEY_CTRL_EC_KDF_OUTLEN = `enum EVP_PKEY_CTRL_EC_KDF_OUTLEN = ( EVP_PKEY_ALG_CTRL + 7 );`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_PKEY_CTRL_EC_KDF_OUTLEN); }))) {
            mixin(enumMixinStr_EVP_PKEY_CTRL_EC_KDF_OUTLEN);
        }
    }




    static if(!is(typeof(EVP_PKEY_CTRL_GET_EC_KDF_MD))) {
        private enum enumMixinStr_EVP_PKEY_CTRL_GET_EC_KDF_MD = `enum EVP_PKEY_CTRL_GET_EC_KDF_MD = ( EVP_PKEY_ALG_CTRL + 6 );`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_PKEY_CTRL_GET_EC_KDF_MD); }))) {
            mixin(enumMixinStr_EVP_PKEY_CTRL_GET_EC_KDF_MD);
        }
    }




    static if(!is(typeof(EVP_PKEY_CTRL_EC_KDF_MD))) {
        private enum enumMixinStr_EVP_PKEY_CTRL_EC_KDF_MD = `enum EVP_PKEY_CTRL_EC_KDF_MD = ( EVP_PKEY_ALG_CTRL + 5 );`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_PKEY_CTRL_EC_KDF_MD); }))) {
            mixin(enumMixinStr_EVP_PKEY_CTRL_EC_KDF_MD);
        }
    }




    static if(!is(typeof(EVP_PKEY_CTRL_EC_KDF_TYPE))) {
        private enum enumMixinStr_EVP_PKEY_CTRL_EC_KDF_TYPE = `enum EVP_PKEY_CTRL_EC_KDF_TYPE = ( EVP_PKEY_ALG_CTRL + 4 );`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_PKEY_CTRL_EC_KDF_TYPE); }))) {
            mixin(enumMixinStr_EVP_PKEY_CTRL_EC_KDF_TYPE);
        }
    }




    static if(!is(typeof(EVP_PKEY_CTRL_EC_ECDH_COFACTOR))) {
        private enum enumMixinStr_EVP_PKEY_CTRL_EC_ECDH_COFACTOR = `enum EVP_PKEY_CTRL_EC_ECDH_COFACTOR = ( EVP_PKEY_ALG_CTRL + 3 );`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_PKEY_CTRL_EC_ECDH_COFACTOR); }))) {
            mixin(enumMixinStr_EVP_PKEY_CTRL_EC_ECDH_COFACTOR);
        }
    }




    static if(!is(typeof(EVP_PKEY_CTRL_EC_PARAM_ENC))) {
        private enum enumMixinStr_EVP_PKEY_CTRL_EC_PARAM_ENC = `enum EVP_PKEY_CTRL_EC_PARAM_ENC = ( EVP_PKEY_ALG_CTRL + 2 );`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_PKEY_CTRL_EC_PARAM_ENC); }))) {
            mixin(enumMixinStr_EVP_PKEY_CTRL_EC_PARAM_ENC);
        }
    }




    static if(!is(typeof(EVP_PKEY_CTRL_EC_PARAMGEN_CURVE_NID))) {
        private enum enumMixinStr_EVP_PKEY_CTRL_EC_PARAMGEN_CURVE_NID = `enum EVP_PKEY_CTRL_EC_PARAMGEN_CURVE_NID = ( EVP_PKEY_ALG_CTRL + 1 );`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_PKEY_CTRL_EC_PARAMGEN_CURVE_NID); }))) {
            mixin(enumMixinStr_EVP_PKEY_CTRL_EC_PARAMGEN_CURVE_NID);
        }
    }
    static if(!is(typeof(EC_FLAG_COFACTOR_ECDH))) {
        private enum enumMixinStr_EC_FLAG_COFACTOR_ECDH = `enum EC_FLAG_COFACTOR_ECDH = 0x1000;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_FLAG_COFACTOR_ECDH); }))) {
            mixin(enumMixinStr_EC_FLAG_COFACTOR_ECDH);
        }
    }




    static if(!is(typeof(EC_FLAG_FIPS_CHECKED))) {
        private enum enumMixinStr_EC_FLAG_FIPS_CHECKED = `enum EC_FLAG_FIPS_CHECKED = 0x2;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_FLAG_FIPS_CHECKED); }))) {
            mixin(enumMixinStr_EC_FLAG_FIPS_CHECKED);
        }
    }




    static if(!is(typeof(EC_FLAG_NON_FIPS_ALLOW))) {
        private enum enumMixinStr_EC_FLAG_NON_FIPS_ALLOW = `enum EC_FLAG_NON_FIPS_ALLOW = 0x1;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_FLAG_NON_FIPS_ALLOW); }))) {
            mixin(enumMixinStr_EC_FLAG_NON_FIPS_ALLOW);
        }
    }




    static if(!is(typeof(EC_PKEY_NO_PUBKEY))) {
        private enum enumMixinStr_EC_PKEY_NO_PUBKEY = `enum EC_PKEY_NO_PUBKEY = 0x002;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_PKEY_NO_PUBKEY); }))) {
            mixin(enumMixinStr_EC_PKEY_NO_PUBKEY);
        }
    }




    static if(!is(typeof(EC_PKEY_NO_PARAMETERS))) {
        private enum enumMixinStr_EC_PKEY_NO_PARAMETERS = `enum EC_PKEY_NO_PARAMETERS = 0x001;`;
        static if(is(typeof({ mixin(enumMixinStr_EC_PKEY_NO_PARAMETERS); }))) {
            mixin(enumMixinStr_EC_PKEY_NO_PARAMETERS);
        }
    }
    static if(!is(typeof(OPENSSL_EC_NAMED_CURVE))) {
        private enum enumMixinStr_OPENSSL_EC_NAMED_CURVE = `enum OPENSSL_EC_NAMED_CURVE = 0x001;`;
        static if(is(typeof({ mixin(enumMixinStr_OPENSSL_EC_NAMED_CURVE); }))) {
            mixin(enumMixinStr_OPENSSL_EC_NAMED_CURVE);
        }
    }




    static if(!is(typeof(OPENSSL_EC_EXPLICIT_CURVE))) {
        private enum enumMixinStr_OPENSSL_EC_EXPLICIT_CURVE = `enum OPENSSL_EC_EXPLICIT_CURVE = 0x000;`;
        static if(is(typeof({ mixin(enumMixinStr_OPENSSL_EC_EXPLICIT_CURVE); }))) {
            mixin(enumMixinStr_OPENSSL_EC_EXPLICIT_CURVE);
        }
    }




    static if(!is(typeof(OPENSSL_ECC_MAX_FIELD_BITS))) {
        private enum enumMixinStr_OPENSSL_ECC_MAX_FIELD_BITS = `enum OPENSSL_ECC_MAX_FIELD_BITS = 661;`;
        static if(is(typeof({ mixin(enumMixinStr_OPENSSL_ECC_MAX_FIELD_BITS); }))) {
            mixin(enumMixinStr_OPENSSL_ECC_MAX_FIELD_BITS);
        }
    }






    static if(!is(typeof(ossl_unused))) {
        private enum enumMixinStr_ossl_unused = `enum ossl_unused = __attribute__ ( ( unused ) );`;
        static if(is(typeof({ mixin(enumMixinStr_ossl_unused); }))) {
            mixin(enumMixinStr_ossl_unused);
        }
    }




    static if(!is(typeof(ossl_noreturn))) {
        private enum enumMixinStr_ossl_noreturn = `enum ossl_noreturn = _Noreturn;`;
        static if(is(typeof({ mixin(enumMixinStr_ossl_noreturn); }))) {
            mixin(enumMixinStr_ossl_noreturn);
        }
    }




    static if(!is(typeof(ossl_inline))) {
        private enum enumMixinStr_ossl_inline = `enum ossl_inline = inline;`;
        static if(is(typeof({ mixin(enumMixinStr_ossl_inline); }))) {
            mixin(enumMixinStr_ossl_inline);
        }
    }






    static if(!is(typeof(OSSL_SSIZE_MAX))) {
        private enum enumMixinStr_OSSL_SSIZE_MAX = `enum OSSL_SSIZE_MAX = ( cast( ssize_t ) ( SIZE_MAX >> 1 ) );`;
        static if(is(typeof({ mixin(enumMixinStr_OSSL_SSIZE_MAX); }))) {
            mixin(enumMixinStr_OSSL_SSIZE_MAX);
        }
    }




    static if(!is(typeof(ossl_ssize_t))) {
        private enum enumMixinStr_ossl_ssize_t = `enum ossl_ssize_t = ssize_t;`;
        static if(is(typeof({ mixin(enumMixinStr_ossl_ssize_t); }))) {
            mixin(enumMixinStr_ossl_ssize_t);
        }
    }
    static if(!is(typeof(OPENSSL_EXTERN))) {
        private enum enumMixinStr_OPENSSL_EXTERN = `enum OPENSSL_EXTERN = extern;`;
        static if(is(typeof({ mixin(enumMixinStr_OPENSSL_EXTERN); }))) {
            mixin(enumMixinStr_OPENSSL_EXTERN);
        }
    }




    static if(!is(typeof(OPENSSL_EXPORT))) {
        private enum enumMixinStr_OPENSSL_EXPORT = `enum OPENSSL_EXPORT = extern;`;
        static if(is(typeof({ mixin(enumMixinStr_OPENSSL_EXPORT); }))) {
            mixin(enumMixinStr_OPENSSL_EXPORT);
        }
    }






    static if(!is(typeof(OPENSSL_UNISTD_IO))) {
        private enum enumMixinStr_OPENSSL_UNISTD_IO = `enum OPENSSL_UNISTD_IO = OPENSSL_UNISTD;`;
        static if(is(typeof({ mixin(enumMixinStr_OPENSSL_UNISTD_IO); }))) {
            mixin(enumMixinStr_OPENSSL_UNISTD_IO);
        }
    }
    static if(!is(typeof(DSA_R_SEED_LEN_SMALL))) {
        private enum enumMixinStr_DSA_R_SEED_LEN_SMALL = `enum DSA_R_SEED_LEN_SMALL = 110;`;
        static if(is(typeof({ mixin(enumMixinStr_DSA_R_SEED_LEN_SMALL); }))) {
            mixin(enumMixinStr_DSA_R_SEED_LEN_SMALL);
        }
    }




    static if(!is(typeof(DSA_R_Q_NOT_PRIME))) {
        private enum enumMixinStr_DSA_R_Q_NOT_PRIME = `enum DSA_R_Q_NOT_PRIME = 113;`;
        static if(is(typeof({ mixin(enumMixinStr_DSA_R_Q_NOT_PRIME); }))) {
            mixin(enumMixinStr_DSA_R_Q_NOT_PRIME);
        }
    }




    static if(!is(typeof(DSA_R_PARAMETER_ENCODING_ERROR))) {
        private enum enumMixinStr_DSA_R_PARAMETER_ENCODING_ERROR = `enum DSA_R_PARAMETER_ENCODING_ERROR = 105;`;
        static if(is(typeof({ mixin(enumMixinStr_DSA_R_PARAMETER_ENCODING_ERROR); }))) {
            mixin(enumMixinStr_DSA_R_PARAMETER_ENCODING_ERROR);
        }
    }




    static if(!is(typeof(DSA_R_NO_PARAMETERS_SET))) {
        private enum enumMixinStr_DSA_R_NO_PARAMETERS_SET = `enum DSA_R_NO_PARAMETERS_SET = 107;`;
        static if(is(typeof({ mixin(enumMixinStr_DSA_R_NO_PARAMETERS_SET); }))) {
            mixin(enumMixinStr_DSA_R_NO_PARAMETERS_SET);
        }
    }




    static if(!is(typeof(DSA_R_MODULUS_TOO_LARGE))) {
        private enum enumMixinStr_DSA_R_MODULUS_TOO_LARGE = `enum DSA_R_MODULUS_TOO_LARGE = 103;`;
        static if(is(typeof({ mixin(enumMixinStr_DSA_R_MODULUS_TOO_LARGE); }))) {
            mixin(enumMixinStr_DSA_R_MODULUS_TOO_LARGE);
        }
    }




    static if(!is(typeof(DSA_R_MISSING_PRIVATE_KEY))) {
        private enum enumMixinStr_DSA_R_MISSING_PRIVATE_KEY = `enum DSA_R_MISSING_PRIVATE_KEY = 111;`;
        static if(is(typeof({ mixin(enumMixinStr_DSA_R_MISSING_PRIVATE_KEY); }))) {
            mixin(enumMixinStr_DSA_R_MISSING_PRIVATE_KEY);
        }
    }




    static if(!is(typeof(DSA_R_MISSING_PARAMETERS))) {
        private enum enumMixinStr_DSA_R_MISSING_PARAMETERS = `enum DSA_R_MISSING_PARAMETERS = 101;`;
        static if(is(typeof({ mixin(enumMixinStr_DSA_R_MISSING_PARAMETERS); }))) {
            mixin(enumMixinStr_DSA_R_MISSING_PARAMETERS);
        }
    }




    static if(!is(typeof(DSA_R_INVALID_PARAMETERS))) {
        private enum enumMixinStr_DSA_R_INVALID_PARAMETERS = `enum DSA_R_INVALID_PARAMETERS = 112;`;
        static if(is(typeof({ mixin(enumMixinStr_DSA_R_INVALID_PARAMETERS); }))) {
            mixin(enumMixinStr_DSA_R_INVALID_PARAMETERS);
        }
    }




    static if(!is(typeof(DSA_R_INVALID_DIGEST_TYPE))) {
        private enum enumMixinStr_DSA_R_INVALID_DIGEST_TYPE = `enum DSA_R_INVALID_DIGEST_TYPE = 106;`;
        static if(is(typeof({ mixin(enumMixinStr_DSA_R_INVALID_DIGEST_TYPE); }))) {
            mixin(enumMixinStr_DSA_R_INVALID_DIGEST_TYPE);
        }
    }




    static if(!is(typeof(DSA_R_DECODE_ERROR))) {
        private enum enumMixinStr_DSA_R_DECODE_ERROR = `enum DSA_R_DECODE_ERROR = 104;`;
        static if(is(typeof({ mixin(enumMixinStr_DSA_R_DECODE_ERROR); }))) {
            mixin(enumMixinStr_DSA_R_DECODE_ERROR);
        }
    }




    static if(!is(typeof(DSA_R_BN_ERROR))) {
        private enum enumMixinStr_DSA_R_BN_ERROR = `enum DSA_R_BN_ERROR = 109;`;
        static if(is(typeof({ mixin(enumMixinStr_DSA_R_BN_ERROR); }))) {
            mixin(enumMixinStr_DSA_R_BN_ERROR);
        }
    }




    static if(!is(typeof(DSA_R_BN_DECODE_ERROR))) {
        private enum enumMixinStr_DSA_R_BN_DECODE_ERROR = `enum DSA_R_BN_DECODE_ERROR = 108;`;
        static if(is(typeof({ mixin(enumMixinStr_DSA_R_BN_DECODE_ERROR); }))) {
            mixin(enumMixinStr_DSA_R_BN_DECODE_ERROR);
        }
    }




    static if(!is(typeof(DSA_R_BAD_Q_VALUE))) {
        private enum enumMixinStr_DSA_R_BAD_Q_VALUE = `enum DSA_R_BAD_Q_VALUE = 102;`;
        static if(is(typeof({ mixin(enumMixinStr_DSA_R_BAD_Q_VALUE); }))) {
            mixin(enumMixinStr_DSA_R_BAD_Q_VALUE);
        }
    }




    static if(!is(typeof(DSA_F_PKEY_DSA_KEYGEN))) {
        private enum enumMixinStr_DSA_F_PKEY_DSA_KEYGEN = `enum DSA_F_PKEY_DSA_KEYGEN = 121;`;
        static if(is(typeof({ mixin(enumMixinStr_DSA_F_PKEY_DSA_KEYGEN); }))) {
            mixin(enumMixinStr_DSA_F_PKEY_DSA_KEYGEN);
        }
    }




    static if(!is(typeof(DSA_F_PKEY_DSA_CTRL_STR))) {
        private enum enumMixinStr_DSA_F_PKEY_DSA_CTRL_STR = `enum DSA_F_PKEY_DSA_CTRL_STR = 104;`;
        static if(is(typeof({ mixin(enumMixinStr_DSA_F_PKEY_DSA_CTRL_STR); }))) {
            mixin(enumMixinStr_DSA_F_PKEY_DSA_CTRL_STR);
        }
    }




    static if(!is(typeof(DSA_F_PKEY_DSA_CTRL))) {
        private enum enumMixinStr_DSA_F_PKEY_DSA_CTRL = `enum DSA_F_PKEY_DSA_CTRL = 120;`;
        static if(is(typeof({ mixin(enumMixinStr_DSA_F_PKEY_DSA_CTRL); }))) {
            mixin(enumMixinStr_DSA_F_PKEY_DSA_CTRL);
        }
    }




    static if(!is(typeof(DSA_F_OLD_DSA_PRIV_DECODE))) {
        private enum enumMixinStr_DSA_F_OLD_DSA_PRIV_DECODE = `enum DSA_F_OLD_DSA_PRIV_DECODE = 122;`;
        static if(is(typeof({ mixin(enumMixinStr_DSA_F_OLD_DSA_PRIV_DECODE); }))) {
            mixin(enumMixinStr_DSA_F_OLD_DSA_PRIV_DECODE);
        }
    }




    static if(!is(typeof(DSA_F_DSA_SIG_NEW))) {
        private enum enumMixinStr_DSA_F_DSA_SIG_NEW = `enum DSA_F_DSA_SIG_NEW = 102;`;
        static if(is(typeof({ mixin(enumMixinStr_DSA_F_DSA_SIG_NEW); }))) {
            mixin(enumMixinStr_DSA_F_DSA_SIG_NEW);
        }
    }




    static if(!is(typeof(DSA_F_DSA_SIGN_SETUP))) {
        private enum enumMixinStr_DSA_F_DSA_SIGN_SETUP = `enum DSA_F_DSA_SIGN_SETUP = 107;`;
        static if(is(typeof({ mixin(enumMixinStr_DSA_F_DSA_SIGN_SETUP); }))) {
            mixin(enumMixinStr_DSA_F_DSA_SIGN_SETUP);
        }
    }




    static if(!is(typeof(DSA_F_DSA_SIGN))) {
        private enum enumMixinStr_DSA_F_DSA_SIGN = `enum DSA_F_DSA_SIGN = 106;`;
        static if(is(typeof({ mixin(enumMixinStr_DSA_F_DSA_SIGN); }))) {
            mixin(enumMixinStr_DSA_F_DSA_SIGN);
        }
    }




    static if(!is(typeof(DSA_F_DSA_PUB_ENCODE))) {
        private enum enumMixinStr_DSA_F_DSA_PUB_ENCODE = `enum DSA_F_DSA_PUB_ENCODE = 118;`;
        static if(is(typeof({ mixin(enumMixinStr_DSA_F_DSA_PUB_ENCODE); }))) {
            mixin(enumMixinStr_DSA_F_DSA_PUB_ENCODE);
        }
    }




    static if(!is(typeof(DSA_F_DSA_PUB_DECODE))) {
        private enum enumMixinStr_DSA_F_DSA_PUB_DECODE = `enum DSA_F_DSA_PUB_DECODE = 117;`;
        static if(is(typeof({ mixin(enumMixinStr_DSA_F_DSA_PUB_DECODE); }))) {
            mixin(enumMixinStr_DSA_F_DSA_PUB_DECODE);
        }
    }




    static if(!is(typeof(DSA_F_DSA_PRIV_ENCODE))) {
        private enum enumMixinStr_DSA_F_DSA_PRIV_ENCODE = `enum DSA_F_DSA_PRIV_ENCODE = 116;`;
        static if(is(typeof({ mixin(enumMixinStr_DSA_F_DSA_PRIV_ENCODE); }))) {
            mixin(enumMixinStr_DSA_F_DSA_PRIV_ENCODE);
        }
    }




    static if(!is(typeof(DSA_F_DSA_PRIV_DECODE))) {
        private enum enumMixinStr_DSA_F_DSA_PRIV_DECODE = `enum DSA_F_DSA_PRIV_DECODE = 115;`;
        static if(is(typeof({ mixin(enumMixinStr_DSA_F_DSA_PRIV_DECODE); }))) {
            mixin(enumMixinStr_DSA_F_DSA_PRIV_DECODE);
        }
    }




    static if(!is(typeof(DSA_F_DSA_PRINT_FP))) {
        private enum enumMixinStr_DSA_F_DSA_PRINT_FP = `enum DSA_F_DSA_PRINT_FP = 105;`;
        static if(is(typeof({ mixin(enumMixinStr_DSA_F_DSA_PRINT_FP); }))) {
            mixin(enumMixinStr_DSA_F_DSA_PRINT_FP);
        }
    }




    static if(!is(typeof(DSA_F_DSA_PARAM_DECODE))) {
        private enum enumMixinStr_DSA_F_DSA_PARAM_DECODE = `enum DSA_F_DSA_PARAM_DECODE = 119;`;
        static if(is(typeof({ mixin(enumMixinStr_DSA_F_DSA_PARAM_DECODE); }))) {
            mixin(enumMixinStr_DSA_F_DSA_PARAM_DECODE);
        }
    }




    static if(!is(typeof(DSA_F_DSA_NEW_METHOD))) {
        private enum enumMixinStr_DSA_F_DSA_NEW_METHOD = `enum DSA_F_DSA_NEW_METHOD = 103;`;
        static if(is(typeof({ mixin(enumMixinStr_DSA_F_DSA_NEW_METHOD); }))) {
            mixin(enumMixinStr_DSA_F_DSA_NEW_METHOD);
        }
    }




    static if(!is(typeof(DSA_F_DSA_METH_SET1_NAME))) {
        private enum enumMixinStr_DSA_F_DSA_METH_SET1_NAME = `enum DSA_F_DSA_METH_SET1_NAME = 129;`;
        static if(is(typeof({ mixin(enumMixinStr_DSA_F_DSA_METH_SET1_NAME); }))) {
            mixin(enumMixinStr_DSA_F_DSA_METH_SET1_NAME);
        }
    }




    static if(!is(typeof(DSA_F_DSA_METH_NEW))) {
        private enum enumMixinStr_DSA_F_DSA_METH_NEW = `enum DSA_F_DSA_METH_NEW = 128;`;
        static if(is(typeof({ mixin(enumMixinStr_DSA_F_DSA_METH_NEW); }))) {
            mixin(enumMixinStr_DSA_F_DSA_METH_NEW);
        }
    }




    static if(!is(typeof(DSA_F_DSA_METH_DUP))) {
        private enum enumMixinStr_DSA_F_DSA_METH_DUP = `enum DSA_F_DSA_METH_DUP = 127;`;
        static if(is(typeof({ mixin(enumMixinStr_DSA_F_DSA_METH_DUP); }))) {
            mixin(enumMixinStr_DSA_F_DSA_METH_DUP);
        }
    }




    static if(!is(typeof(DSA_F_DSA_DO_VERIFY))) {
        private enum enumMixinStr_DSA_F_DSA_DO_VERIFY = `enum DSA_F_DSA_DO_VERIFY = 113;`;
        static if(is(typeof({ mixin(enumMixinStr_DSA_F_DSA_DO_VERIFY); }))) {
            mixin(enumMixinStr_DSA_F_DSA_DO_VERIFY);
        }
    }




    static if(!is(typeof(DSA_F_DSA_DO_SIGN))) {
        private enum enumMixinStr_DSA_F_DSA_DO_SIGN = `enum DSA_F_DSA_DO_SIGN = 112;`;
        static if(is(typeof({ mixin(enumMixinStr_DSA_F_DSA_DO_SIGN); }))) {
            mixin(enumMixinStr_DSA_F_DSA_DO_SIGN);
        }
    }




    static if(!is(typeof(DSA_F_DSA_BUILTIN_PARAMGEN2))) {
        private enum enumMixinStr_DSA_F_DSA_BUILTIN_PARAMGEN2 = `enum DSA_F_DSA_BUILTIN_PARAMGEN2 = 126;`;
        static if(is(typeof({ mixin(enumMixinStr_DSA_F_DSA_BUILTIN_PARAMGEN2); }))) {
            mixin(enumMixinStr_DSA_F_DSA_BUILTIN_PARAMGEN2);
        }
    }
    static if(!is(typeof(DSA_F_DSA_BUILTIN_PARAMGEN))) {
        private enum enumMixinStr_DSA_F_DSA_BUILTIN_PARAMGEN = `enum DSA_F_DSA_BUILTIN_PARAMGEN = 125;`;
        static if(is(typeof({ mixin(enumMixinStr_DSA_F_DSA_BUILTIN_PARAMGEN); }))) {
            mixin(enumMixinStr_DSA_F_DSA_BUILTIN_PARAMGEN);
        }
    }




    static if(!is(typeof(DSA_F_DSAPARAMS_PRINT_FP))) {
        private enum enumMixinStr_DSA_F_DSAPARAMS_PRINT_FP = `enum DSA_F_DSAPARAMS_PRINT_FP = 101;`;
        static if(is(typeof({ mixin(enumMixinStr_DSA_F_DSAPARAMS_PRINT_FP); }))) {
            mixin(enumMixinStr_DSA_F_DSAPARAMS_PRINT_FP);
        }
    }




    static if(!is(typeof(DSA_F_DSAPARAMS_PRINT))) {
        private enum enumMixinStr_DSA_F_DSAPARAMS_PRINT = `enum DSA_F_DSAPARAMS_PRINT = 100;`;
        static if(is(typeof({ mixin(enumMixinStr_DSA_F_DSAPARAMS_PRINT); }))) {
            mixin(enumMixinStr_DSA_F_DSAPARAMS_PRINT);
        }
    }






    static if(!is(typeof(EVP_PKEY_CTRL_DSA_PARAMGEN_MD))) {
        private enum enumMixinStr_EVP_PKEY_CTRL_DSA_PARAMGEN_MD = `enum EVP_PKEY_CTRL_DSA_PARAMGEN_MD = ( EVP_PKEY_ALG_CTRL + 3 );`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_PKEY_CTRL_DSA_PARAMGEN_MD); }))) {
            mixin(enumMixinStr_EVP_PKEY_CTRL_DSA_PARAMGEN_MD);
        }
    }




    static if(!is(typeof(EVP_PKEY_CTRL_DSA_PARAMGEN_Q_BITS))) {
        private enum enumMixinStr_EVP_PKEY_CTRL_DSA_PARAMGEN_Q_BITS = `enum EVP_PKEY_CTRL_DSA_PARAMGEN_Q_BITS = ( EVP_PKEY_ALG_CTRL + 2 );`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_PKEY_CTRL_DSA_PARAMGEN_Q_BITS); }))) {
            mixin(enumMixinStr_EVP_PKEY_CTRL_DSA_PARAMGEN_Q_BITS);
        }
    }




    static if(!is(typeof(EVP_PKEY_CTRL_DSA_PARAMGEN_BITS))) {
        private enum enumMixinStr_EVP_PKEY_CTRL_DSA_PARAMGEN_BITS = `enum EVP_PKEY_CTRL_DSA_PARAMGEN_BITS = ( EVP_PKEY_ALG_CTRL + 1 );`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_PKEY_CTRL_DSA_PARAMGEN_BITS); }))) {
            mixin(enumMixinStr_EVP_PKEY_CTRL_DSA_PARAMGEN_BITS);
        }
    }
    static if(!is(typeof(DSS_prime_checks))) {
        private enum enumMixinStr_DSS_prime_checks = `enum DSS_prime_checks = 64;`;
        static if(is(typeof({ mixin(enumMixinStr_DSS_prime_checks); }))) {
            mixin(enumMixinStr_DSS_prime_checks);
        }
    }
    static if(!is(typeof(DSA_FLAG_FIPS_CHECKED))) {
        private enum enumMixinStr_DSA_FLAG_FIPS_CHECKED = `enum DSA_FLAG_FIPS_CHECKED = 0x0800;`;
        static if(is(typeof({ mixin(enumMixinStr_DSA_FLAG_FIPS_CHECKED); }))) {
            mixin(enumMixinStr_DSA_FLAG_FIPS_CHECKED);
        }
    }




    static if(!is(typeof(DSA_FLAG_NON_FIPS_ALLOW))) {
        private enum enumMixinStr_DSA_FLAG_NON_FIPS_ALLOW = `enum DSA_FLAG_NON_FIPS_ALLOW = 0x0400;`;
        static if(is(typeof({ mixin(enumMixinStr_DSA_FLAG_NON_FIPS_ALLOW); }))) {
            mixin(enumMixinStr_DSA_FLAG_NON_FIPS_ALLOW);
        }
    }




    static if(!is(typeof(DSA_FLAG_FIPS_METHOD))) {
        private enum enumMixinStr_DSA_FLAG_FIPS_METHOD = `enum DSA_FLAG_FIPS_METHOD = 0x0400;`;
        static if(is(typeof({ mixin(enumMixinStr_DSA_FLAG_FIPS_METHOD); }))) {
            mixin(enumMixinStr_DSA_FLAG_FIPS_METHOD);
        }
    }




    static if(!is(typeof(DSA_FLAG_NO_EXP_CONSTTIME))) {
        private enum enumMixinStr_DSA_FLAG_NO_EXP_CONSTTIME = `enum DSA_FLAG_NO_EXP_CONSTTIME = 0x00;`;
        static if(is(typeof({ mixin(enumMixinStr_DSA_FLAG_NO_EXP_CONSTTIME); }))) {
            mixin(enumMixinStr_DSA_FLAG_NO_EXP_CONSTTIME);
        }
    }




    static if(!is(typeof(DSA_FLAG_CACHE_MONT_P))) {
        private enum enumMixinStr_DSA_FLAG_CACHE_MONT_P = `enum DSA_FLAG_CACHE_MONT_P = 0x01;`;
        static if(is(typeof({ mixin(enumMixinStr_DSA_FLAG_CACHE_MONT_P); }))) {
            mixin(enumMixinStr_DSA_FLAG_CACHE_MONT_P);
        }
    }




    static if(!is(typeof(OPENSSL_DSA_FIPS_MIN_MODULUS_BITS))) {
        private enum enumMixinStr_OPENSSL_DSA_FIPS_MIN_MODULUS_BITS = `enum OPENSSL_DSA_FIPS_MIN_MODULUS_BITS = 1024;`;
        static if(is(typeof({ mixin(enumMixinStr_OPENSSL_DSA_FIPS_MIN_MODULUS_BITS); }))) {
            mixin(enumMixinStr_OPENSSL_DSA_FIPS_MIN_MODULUS_BITS);
        }
    }




    static if(!is(typeof(OPENSSL_DSA_MAX_MODULUS_BITS))) {
        private enum enumMixinStr_OPENSSL_DSA_MAX_MODULUS_BITS = `enum OPENSSL_DSA_MAX_MODULUS_BITS = 10000;`;
        static if(is(typeof({ mixin(enumMixinStr_OPENSSL_DSA_MAX_MODULUS_BITS); }))) {
            mixin(enumMixinStr_OPENSSL_DSA_MAX_MODULUS_BITS);
        }
    }






    static if(!is(typeof(DH_R_UNABLE_TO_CHECK_GENERATOR))) {
        private enum enumMixinStr_DH_R_UNABLE_TO_CHECK_GENERATOR = `enum DH_R_UNABLE_TO_CHECK_GENERATOR = 121;`;
        static if(is(typeof({ mixin(enumMixinStr_DH_R_UNABLE_TO_CHECK_GENERATOR); }))) {
            mixin(enumMixinStr_DH_R_UNABLE_TO_CHECK_GENERATOR);
        }
    }




    static if(!is(typeof(DH_R_SHARED_INFO_ERROR))) {
        private enum enumMixinStr_DH_R_SHARED_INFO_ERROR = `enum DH_R_SHARED_INFO_ERROR = 113;`;
        static if(is(typeof({ mixin(enumMixinStr_DH_R_SHARED_INFO_ERROR); }))) {
            mixin(enumMixinStr_DH_R_SHARED_INFO_ERROR);
        }
    }




    static if(!is(typeof(DH_R_PEER_KEY_ERROR))) {
        private enum enumMixinStr_DH_R_PEER_KEY_ERROR = `enum DH_R_PEER_KEY_ERROR = 111;`;
        static if(is(typeof({ mixin(enumMixinStr_DH_R_PEER_KEY_ERROR); }))) {
            mixin(enumMixinStr_DH_R_PEER_KEY_ERROR);
        }
    }




    static if(!is(typeof(DH_R_PARAMETER_ENCODING_ERROR))) {
        private enum enumMixinStr_DH_R_PARAMETER_ENCODING_ERROR = `enum DH_R_PARAMETER_ENCODING_ERROR = 105;`;
        static if(is(typeof({ mixin(enumMixinStr_DH_R_PARAMETER_ENCODING_ERROR); }))) {
            mixin(enumMixinStr_DH_R_PARAMETER_ENCODING_ERROR);
        }
    }




    static if(!is(typeof(DH_R_NO_PRIVATE_VALUE))) {
        private enum enumMixinStr_DH_R_NO_PRIVATE_VALUE = `enum DH_R_NO_PRIVATE_VALUE = 100;`;
        static if(is(typeof({ mixin(enumMixinStr_DH_R_NO_PRIVATE_VALUE); }))) {
            mixin(enumMixinStr_DH_R_NO_PRIVATE_VALUE);
        }
    }




    static if(!is(typeof(DH_R_NO_PARAMETERS_SET))) {
        private enum enumMixinStr_DH_R_NO_PARAMETERS_SET = `enum DH_R_NO_PARAMETERS_SET = 107;`;
        static if(is(typeof({ mixin(enumMixinStr_DH_R_NO_PARAMETERS_SET); }))) {
            mixin(enumMixinStr_DH_R_NO_PARAMETERS_SET);
        }
    }




    static if(!is(typeof(DH_R_NOT_SUITABLE_GENERATOR))) {
        private enum enumMixinStr_DH_R_NOT_SUITABLE_GENERATOR = `enum DH_R_NOT_SUITABLE_GENERATOR = 120;`;
        static if(is(typeof({ mixin(enumMixinStr_DH_R_NOT_SUITABLE_GENERATOR); }))) {
            mixin(enumMixinStr_DH_R_NOT_SUITABLE_GENERATOR);
        }
    }




    static if(!is(typeof(DH_R_MODULUS_TOO_LARGE))) {
        private enum enumMixinStr_DH_R_MODULUS_TOO_LARGE = `enum DH_R_MODULUS_TOO_LARGE = 103;`;
        static if(is(typeof({ mixin(enumMixinStr_DH_R_MODULUS_TOO_LARGE); }))) {
            mixin(enumMixinStr_DH_R_MODULUS_TOO_LARGE);
        }
    }




    static if(!is(typeof(DH_R_MISSING_PUBKEY))) {
        private enum enumMixinStr_DH_R_MISSING_PUBKEY = `enum DH_R_MISSING_PUBKEY = 125;`;
        static if(is(typeof({ mixin(enumMixinStr_DH_R_MISSING_PUBKEY); }))) {
            mixin(enumMixinStr_DH_R_MISSING_PUBKEY);
        }
    }




    static if(!is(typeof(DH_R_KEYS_NOT_SET))) {
        private enum enumMixinStr_DH_R_KEYS_NOT_SET = `enum DH_R_KEYS_NOT_SET = 108;`;
        static if(is(typeof({ mixin(enumMixinStr_DH_R_KEYS_NOT_SET); }))) {
            mixin(enumMixinStr_DH_R_KEYS_NOT_SET);
        }
    }




    static if(!is(typeof(DH_R_KDF_PARAMETER_ERROR))) {
        private enum enumMixinStr_DH_R_KDF_PARAMETER_ERROR = `enum DH_R_KDF_PARAMETER_ERROR = 112;`;
        static if(is(typeof({ mixin(enumMixinStr_DH_R_KDF_PARAMETER_ERROR); }))) {
            mixin(enumMixinStr_DH_R_KDF_PARAMETER_ERROR);
        }
    }




    static if(!is(typeof(DH_R_INVALID_PUBKEY))) {
        private enum enumMixinStr_DH_R_INVALID_PUBKEY = `enum DH_R_INVALID_PUBKEY = 102;`;
        static if(is(typeof({ mixin(enumMixinStr_DH_R_INVALID_PUBKEY); }))) {
            mixin(enumMixinStr_DH_R_INVALID_PUBKEY);
        }
    }




    static if(!is(typeof(DH_R_INVALID_PARAMETER_NID))) {
        private enum enumMixinStr_DH_R_INVALID_PARAMETER_NID = `enum DH_R_INVALID_PARAMETER_NID = 114;`;
        static if(is(typeof({ mixin(enumMixinStr_DH_R_INVALID_PARAMETER_NID); }))) {
            mixin(enumMixinStr_DH_R_INVALID_PARAMETER_NID);
        }
    }




    static if(!is(typeof(DH_R_INVALID_PARAMETER_NAME))) {
        private enum enumMixinStr_DH_R_INVALID_PARAMETER_NAME = `enum DH_R_INVALID_PARAMETER_NAME = 110;`;
        static if(is(typeof({ mixin(enumMixinStr_DH_R_INVALID_PARAMETER_NAME); }))) {
            mixin(enumMixinStr_DH_R_INVALID_PARAMETER_NAME);
        }
    }




    static if(!is(typeof(DH_R_DECODE_ERROR))) {
        private enum enumMixinStr_DH_R_DECODE_ERROR = `enum DH_R_DECODE_ERROR = 104;`;
        static if(is(typeof({ mixin(enumMixinStr_DH_R_DECODE_ERROR); }))) {
            mixin(enumMixinStr_DH_R_DECODE_ERROR);
        }
    }




    static if(!is(typeof(DH_R_CHECK_Q_NOT_PRIME))) {
        private enum enumMixinStr_DH_R_CHECK_Q_NOT_PRIME = `enum DH_R_CHECK_Q_NOT_PRIME = 119;`;
        static if(is(typeof({ mixin(enumMixinStr_DH_R_CHECK_Q_NOT_PRIME); }))) {
            mixin(enumMixinStr_DH_R_CHECK_Q_NOT_PRIME);
        }
    }




    static if(!is(typeof(DH_R_CHECK_P_NOT_SAFE_PRIME))) {
        private enum enumMixinStr_DH_R_CHECK_P_NOT_SAFE_PRIME = `enum DH_R_CHECK_P_NOT_SAFE_PRIME = 118;`;
        static if(is(typeof({ mixin(enumMixinStr_DH_R_CHECK_P_NOT_SAFE_PRIME); }))) {
            mixin(enumMixinStr_DH_R_CHECK_P_NOT_SAFE_PRIME);
        }
    }




    static if(!is(typeof(DH_R_CHECK_P_NOT_PRIME))) {
        private enum enumMixinStr_DH_R_CHECK_P_NOT_PRIME = `enum DH_R_CHECK_P_NOT_PRIME = 117;`;
        static if(is(typeof({ mixin(enumMixinStr_DH_R_CHECK_P_NOT_PRIME); }))) {
            mixin(enumMixinStr_DH_R_CHECK_P_NOT_PRIME);
        }
    }




    static if(!is(typeof(DH_R_CHECK_PUBKEY_TOO_SMALL))) {
        private enum enumMixinStr_DH_R_CHECK_PUBKEY_TOO_SMALL = `enum DH_R_CHECK_PUBKEY_TOO_SMALL = 124;`;
        static if(is(typeof({ mixin(enumMixinStr_DH_R_CHECK_PUBKEY_TOO_SMALL); }))) {
            mixin(enumMixinStr_DH_R_CHECK_PUBKEY_TOO_SMALL);
        }
    }




    static if(!is(typeof(EVP_des_cfb))) {
        private enum enumMixinStr_EVP_des_cfb = `enum EVP_des_cfb = EVP_des_cfb64;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_des_cfb); }))) {
            mixin(enumMixinStr_EVP_des_cfb);
        }
    }




    static if(!is(typeof(DH_R_CHECK_PUBKEY_TOO_LARGE))) {
        private enum enumMixinStr_DH_R_CHECK_PUBKEY_TOO_LARGE = `enum DH_R_CHECK_PUBKEY_TOO_LARGE = 123;`;
        static if(is(typeof({ mixin(enumMixinStr_DH_R_CHECK_PUBKEY_TOO_LARGE); }))) {
            mixin(enumMixinStr_DH_R_CHECK_PUBKEY_TOO_LARGE);
        }
    }




    static if(!is(typeof(DH_R_CHECK_PUBKEY_INVALID))) {
        private enum enumMixinStr_DH_R_CHECK_PUBKEY_INVALID = `enum DH_R_CHECK_PUBKEY_INVALID = 122;`;
        static if(is(typeof({ mixin(enumMixinStr_DH_R_CHECK_PUBKEY_INVALID); }))) {
            mixin(enumMixinStr_DH_R_CHECK_PUBKEY_INVALID);
        }
    }




    static if(!is(typeof(DH_R_CHECK_INVALID_Q_VALUE))) {
        private enum enumMixinStr_DH_R_CHECK_INVALID_Q_VALUE = `enum DH_R_CHECK_INVALID_Q_VALUE = 116;`;
        static if(is(typeof({ mixin(enumMixinStr_DH_R_CHECK_INVALID_Q_VALUE); }))) {
            mixin(enumMixinStr_DH_R_CHECK_INVALID_Q_VALUE);
        }
    }




    static if(!is(typeof(EVP_des_ede_cfb))) {
        private enum enumMixinStr_EVP_des_ede_cfb = `enum EVP_des_ede_cfb = EVP_des_ede_cfb64;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_des_ede_cfb); }))) {
            mixin(enumMixinStr_EVP_des_ede_cfb);
        }
    }




    static if(!is(typeof(DH_R_CHECK_INVALID_J_VALUE))) {
        private enum enumMixinStr_DH_R_CHECK_INVALID_J_VALUE = `enum DH_R_CHECK_INVALID_J_VALUE = 115;`;
        static if(is(typeof({ mixin(enumMixinStr_DH_R_CHECK_INVALID_J_VALUE); }))) {
            mixin(enumMixinStr_DH_R_CHECK_INVALID_J_VALUE);
        }
    }




    static if(!is(typeof(EVP_des_ede3_cfb))) {
        private enum enumMixinStr_EVP_des_ede3_cfb = `enum EVP_des_ede3_cfb = EVP_des_ede3_cfb64;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_des_ede3_cfb); }))) {
            mixin(enumMixinStr_EVP_des_ede3_cfb);
        }
    }




    static if(!is(typeof(DH_R_BN_ERROR))) {
        private enum enumMixinStr_DH_R_BN_ERROR = `enum DH_R_BN_ERROR = 106;`;
        static if(is(typeof({ mixin(enumMixinStr_DH_R_BN_ERROR); }))) {
            mixin(enumMixinStr_DH_R_BN_ERROR);
        }
    }




    static if(!is(typeof(DH_R_BN_DECODE_ERROR))) {
        private enum enumMixinStr_DH_R_BN_DECODE_ERROR = `enum DH_R_BN_DECODE_ERROR = 109;`;
        static if(is(typeof({ mixin(enumMixinStr_DH_R_BN_DECODE_ERROR); }))) {
            mixin(enumMixinStr_DH_R_BN_DECODE_ERROR);
        }
    }




    static if(!is(typeof(DH_R_BAD_GENERATOR))) {
        private enum enumMixinStr_DH_R_BAD_GENERATOR = `enum DH_R_BAD_GENERATOR = 101;`;
        static if(is(typeof({ mixin(enumMixinStr_DH_R_BAD_GENERATOR); }))) {
            mixin(enumMixinStr_DH_R_BAD_GENERATOR);
        }
    }




    static if(!is(typeof(DH_F_PKEY_DH_KEYGEN))) {
        private enum enumMixinStr_DH_F_PKEY_DH_KEYGEN = `enum DH_F_PKEY_DH_KEYGEN = 113;`;
        static if(is(typeof({ mixin(enumMixinStr_DH_F_PKEY_DH_KEYGEN); }))) {
            mixin(enumMixinStr_DH_F_PKEY_DH_KEYGEN);
        }
    }




    static if(!is(typeof(DH_F_PKEY_DH_INIT))) {
        private enum enumMixinStr_DH_F_PKEY_DH_INIT = `enum DH_F_PKEY_DH_INIT = 125;`;
        static if(is(typeof({ mixin(enumMixinStr_DH_F_PKEY_DH_INIT); }))) {
            mixin(enumMixinStr_DH_F_PKEY_DH_INIT);
        }
    }




    static if(!is(typeof(DH_F_PKEY_DH_DERIVE))) {
        private enum enumMixinStr_DH_F_PKEY_DH_DERIVE = `enum DH_F_PKEY_DH_DERIVE = 112;`;
        static if(is(typeof({ mixin(enumMixinStr_DH_F_PKEY_DH_DERIVE); }))) {
            mixin(enumMixinStr_DH_F_PKEY_DH_DERIVE);
        }
    }




    static if(!is(typeof(DH_F_PKEY_DH_CTRL_STR))) {
        private enum enumMixinStr_DH_F_PKEY_DH_CTRL_STR = `enum DH_F_PKEY_DH_CTRL_STR = 120;`;
        static if(is(typeof({ mixin(enumMixinStr_DH_F_PKEY_DH_CTRL_STR); }))) {
            mixin(enumMixinStr_DH_F_PKEY_DH_CTRL_STR);
        }
    }




    static if(!is(typeof(DH_F_GENERATE_KEY))) {
        private enum enumMixinStr_DH_F_GENERATE_KEY = `enum DH_F_GENERATE_KEY = 103;`;
        static if(is(typeof({ mixin(enumMixinStr_DH_F_GENERATE_KEY); }))) {
            mixin(enumMixinStr_DH_F_GENERATE_KEY);
        }
    }




    static if(!is(typeof(DH_F_DO_DH_PRINT))) {
        private enum enumMixinStr_DH_F_DO_DH_PRINT = `enum DH_F_DO_DH_PRINT = 100;`;
        static if(is(typeof({ mixin(enumMixinStr_DH_F_DO_DH_PRINT); }))) {
            mixin(enumMixinStr_DH_F_DO_DH_PRINT);
        }
    }




    static if(!is(typeof(DH_F_DH_PUB_ENCODE))) {
        private enum enumMixinStr_DH_F_DH_PUB_ENCODE = `enum DH_F_DH_PUB_ENCODE = 109;`;
        static if(is(typeof({ mixin(enumMixinStr_DH_F_DH_PUB_ENCODE); }))) {
            mixin(enumMixinStr_DH_F_DH_PUB_ENCODE);
        }
    }




    static if(!is(typeof(DH_F_DH_PUB_DECODE))) {
        private enum enumMixinStr_DH_F_DH_PUB_DECODE = `enum DH_F_DH_PUB_DECODE = 108;`;
        static if(is(typeof({ mixin(enumMixinStr_DH_F_DH_PUB_DECODE); }))) {
            mixin(enumMixinStr_DH_F_DH_PUB_DECODE);
        }
    }




    static if(!is(typeof(DH_F_DH_PRIV_ENCODE))) {
        private enum enumMixinStr_DH_F_DH_PRIV_ENCODE = `enum DH_F_DH_PRIV_ENCODE = 111;`;
        static if(is(typeof({ mixin(enumMixinStr_DH_F_DH_PRIV_ENCODE); }))) {
            mixin(enumMixinStr_DH_F_DH_PRIV_ENCODE);
        }
    }




    static if(!is(typeof(DH_F_DH_PRIV_DECODE))) {
        private enum enumMixinStr_DH_F_DH_PRIV_DECODE = `enum DH_F_DH_PRIV_DECODE = 110;`;
        static if(is(typeof({ mixin(enumMixinStr_DH_F_DH_PRIV_DECODE); }))) {
            mixin(enumMixinStr_DH_F_DH_PRIV_DECODE);
        }
    }




    static if(!is(typeof(DH_F_DH_PKEY_PUBLIC_CHECK))) {
        private enum enumMixinStr_DH_F_DH_PKEY_PUBLIC_CHECK = `enum DH_F_DH_PKEY_PUBLIC_CHECK = 124;`;
        static if(is(typeof({ mixin(enumMixinStr_DH_F_DH_PKEY_PUBLIC_CHECK); }))) {
            mixin(enumMixinStr_DH_F_DH_PKEY_PUBLIC_CHECK);
        }
    }




    static if(!is(typeof(DH_F_DH_PARAM_DECODE))) {
        private enum enumMixinStr_DH_F_DH_PARAM_DECODE = `enum DH_F_DH_PARAM_DECODE = 107;`;
        static if(is(typeof({ mixin(enumMixinStr_DH_F_DH_PARAM_DECODE); }))) {
            mixin(enumMixinStr_DH_F_DH_PARAM_DECODE);
        }
    }




    static if(!is(typeof(EVP_idea_cfb))) {
        private enum enumMixinStr_EVP_idea_cfb = `enum EVP_idea_cfb = EVP_idea_cfb64;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_idea_cfb); }))) {
            mixin(enumMixinStr_EVP_idea_cfb);
        }
    }




    static if(!is(typeof(DH_F_DH_NEW_METHOD))) {
        private enum enumMixinStr_DH_F_DH_NEW_METHOD = `enum DH_F_DH_NEW_METHOD = 105;`;
        static if(is(typeof({ mixin(enumMixinStr_DH_F_DH_NEW_METHOD); }))) {
            mixin(enumMixinStr_DH_F_DH_NEW_METHOD);
        }
    }




    static if(!is(typeof(DH_F_DH_NEW_BY_NID))) {
        private enum enumMixinStr_DH_F_DH_NEW_BY_NID = `enum DH_F_DH_NEW_BY_NID = 104;`;
        static if(is(typeof({ mixin(enumMixinStr_DH_F_DH_NEW_BY_NID); }))) {
            mixin(enumMixinStr_DH_F_DH_NEW_BY_NID);
        }
    }




    static if(!is(typeof(DH_F_DH_METH_SET1_NAME))) {
        private enum enumMixinStr_DH_F_DH_METH_SET1_NAME = `enum DH_F_DH_METH_SET1_NAME = 119;`;
        static if(is(typeof({ mixin(enumMixinStr_DH_F_DH_METH_SET1_NAME); }))) {
            mixin(enumMixinStr_DH_F_DH_METH_SET1_NAME);
        }
    }




    static if(!is(typeof(DH_F_DH_METH_NEW))) {
        private enum enumMixinStr_DH_F_DH_METH_NEW = `enum DH_F_DH_METH_NEW = 118;`;
        static if(is(typeof({ mixin(enumMixinStr_DH_F_DH_METH_NEW); }))) {
            mixin(enumMixinStr_DH_F_DH_METH_NEW);
        }
    }




    static if(!is(typeof(DH_F_DH_METH_DUP))) {
        private enum enumMixinStr_DH_F_DH_METH_DUP = `enum DH_F_DH_METH_DUP = 117;`;
        static if(is(typeof({ mixin(enumMixinStr_DH_F_DH_METH_DUP); }))) {
            mixin(enumMixinStr_DH_F_DH_METH_DUP);
        }
    }




    static if(!is(typeof(DH_F_DH_CMS_SET_SHARED_INFO))) {
        private enum enumMixinStr_DH_F_DH_CMS_SET_SHARED_INFO = `enum DH_F_DH_CMS_SET_SHARED_INFO = 116;`;
        static if(is(typeof({ mixin(enumMixinStr_DH_F_DH_CMS_SET_SHARED_INFO); }))) {
            mixin(enumMixinStr_DH_F_DH_CMS_SET_SHARED_INFO);
        }
    }




    static if(!is(typeof(DH_F_DH_CMS_SET_PEERKEY))) {
        private enum enumMixinStr_DH_F_DH_CMS_SET_PEERKEY = `enum DH_F_DH_CMS_SET_PEERKEY = 115;`;
        static if(is(typeof({ mixin(enumMixinStr_DH_F_DH_CMS_SET_PEERKEY); }))) {
            mixin(enumMixinStr_DH_F_DH_CMS_SET_PEERKEY);
        }
    }




    static if(!is(typeof(EVP_rc2_cfb))) {
        private enum enumMixinStr_EVP_rc2_cfb = `enum EVP_rc2_cfb = EVP_rc2_cfb64;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_rc2_cfb); }))) {
            mixin(enumMixinStr_EVP_rc2_cfb);
        }
    }




    static if(!is(typeof(DH_F_DH_CMS_DECRYPT))) {
        private enum enumMixinStr_DH_F_DH_CMS_DECRYPT = `enum DH_F_DH_CMS_DECRYPT = 114;`;
        static if(is(typeof({ mixin(enumMixinStr_DH_F_DH_CMS_DECRYPT); }))) {
            mixin(enumMixinStr_DH_F_DH_CMS_DECRYPT);
        }
    }




    static if(!is(typeof(DH_F_DH_CHECK_PUB_KEY_EX))) {
        private enum enumMixinStr_DH_F_DH_CHECK_PUB_KEY_EX = `enum DH_F_DH_CHECK_PUB_KEY_EX = 123;`;
        static if(is(typeof({ mixin(enumMixinStr_DH_F_DH_CHECK_PUB_KEY_EX); }))) {
            mixin(enumMixinStr_DH_F_DH_CHECK_PUB_KEY_EX);
        }
    }




    static if(!is(typeof(DH_F_DH_CHECK_PARAMS_EX))) {
        private enum enumMixinStr_DH_F_DH_CHECK_PARAMS_EX = `enum DH_F_DH_CHECK_PARAMS_EX = 122;`;
        static if(is(typeof({ mixin(enumMixinStr_DH_F_DH_CHECK_PARAMS_EX); }))) {
            mixin(enumMixinStr_DH_F_DH_CHECK_PARAMS_EX);
        }
    }




    static if(!is(typeof(DH_F_DH_CHECK_EX))) {
        private enum enumMixinStr_DH_F_DH_CHECK_EX = `enum DH_F_DH_CHECK_EX = 121;`;
        static if(is(typeof({ mixin(enumMixinStr_DH_F_DH_CHECK_EX); }))) {
            mixin(enumMixinStr_DH_F_DH_CHECK_EX);
        }
    }




    static if(!is(typeof(EVP_bf_cfb))) {
        private enum enumMixinStr_EVP_bf_cfb = `enum EVP_bf_cfb = EVP_bf_cfb64;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_bf_cfb); }))) {
            mixin(enumMixinStr_EVP_bf_cfb);
        }
    }




    static if(!is(typeof(DH_F_DH_BUILTIN_GENPARAMS))) {
        private enum enumMixinStr_DH_F_DH_BUILTIN_GENPARAMS = `enum DH_F_DH_BUILTIN_GENPARAMS = 106;`;
        static if(is(typeof({ mixin(enumMixinStr_DH_F_DH_BUILTIN_GENPARAMS); }))) {
            mixin(enumMixinStr_DH_F_DH_BUILTIN_GENPARAMS);
        }
    }




    static if(!is(typeof(DH_F_DHPARAMS_PRINT_FP))) {
        private enum enumMixinStr_DH_F_DHPARAMS_PRINT_FP = `enum DH_F_DHPARAMS_PRINT_FP = 101;`;
        static if(is(typeof({ mixin(enumMixinStr_DH_F_DHPARAMS_PRINT_FP); }))) {
            mixin(enumMixinStr_DH_F_DHPARAMS_PRINT_FP);
        }
    }




    static if(!is(typeof(DH_F_COMPUTE_KEY))) {
        private enum enumMixinStr_DH_F_COMPUTE_KEY = `enum DH_F_COMPUTE_KEY = 102;`;
        static if(is(typeof({ mixin(enumMixinStr_DH_F_COMPUTE_KEY); }))) {
            mixin(enumMixinStr_DH_F_COMPUTE_KEY);
        }
    }






    static if(!is(typeof(EVP_cast5_cfb))) {
        private enum enumMixinStr_EVP_cast5_cfb = `enum EVP_cast5_cfb = EVP_cast5_cfb64;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_cast5_cfb); }))) {
            mixin(enumMixinStr_EVP_cast5_cfb);
        }
    }




    static if(!is(typeof(EVP_PKEY_DH_KDF_X9_42))) {
        private enum enumMixinStr_EVP_PKEY_DH_KDF_X9_42 = `enum EVP_PKEY_DH_KDF_X9_42 = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_PKEY_DH_KDF_X9_42); }))) {
            mixin(enumMixinStr_EVP_PKEY_DH_KDF_X9_42);
        }
    }




    static if(!is(typeof(EVP_PKEY_DH_KDF_NONE))) {
        private enum enumMixinStr_EVP_PKEY_DH_KDF_NONE = `enum EVP_PKEY_DH_KDF_NONE = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_PKEY_DH_KDF_NONE); }))) {
            mixin(enumMixinStr_EVP_PKEY_DH_KDF_NONE);
        }
    }




    static if(!is(typeof(EVP_PKEY_CTRL_DH_PAD))) {
        private enum enumMixinStr_EVP_PKEY_CTRL_DH_PAD = `enum EVP_PKEY_CTRL_DH_PAD = ( EVP_PKEY_ALG_CTRL + 16 );`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_PKEY_CTRL_DH_PAD); }))) {
            mixin(enumMixinStr_EVP_PKEY_CTRL_DH_PAD);
        }
    }




    static if(!is(typeof(EVP_PKEY_CTRL_DH_NID))) {
        private enum enumMixinStr_EVP_PKEY_CTRL_DH_NID = `enum EVP_PKEY_CTRL_DH_NID = ( EVP_PKEY_ALG_CTRL + 15 );`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_PKEY_CTRL_DH_NID); }))) {
            mixin(enumMixinStr_EVP_PKEY_CTRL_DH_NID);
        }
    }




    static if(!is(typeof(EVP_PKEY_CTRL_GET_DH_KDF_OID))) {
        private enum enumMixinStr_EVP_PKEY_CTRL_GET_DH_KDF_OID = `enum EVP_PKEY_CTRL_GET_DH_KDF_OID = ( EVP_PKEY_ALG_CTRL + 14 );`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_PKEY_CTRL_GET_DH_KDF_OID); }))) {
            mixin(enumMixinStr_EVP_PKEY_CTRL_GET_DH_KDF_OID);
        }
    }




    static if(!is(typeof(EVP_PKEY_CTRL_DH_KDF_OID))) {
        private enum enumMixinStr_EVP_PKEY_CTRL_DH_KDF_OID = `enum EVP_PKEY_CTRL_DH_KDF_OID = ( EVP_PKEY_ALG_CTRL + 13 );`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_PKEY_CTRL_DH_KDF_OID); }))) {
            mixin(enumMixinStr_EVP_PKEY_CTRL_DH_KDF_OID);
        }
    }




    static if(!is(typeof(EVP_PKEY_CTRL_GET_DH_KDF_UKM))) {
        private enum enumMixinStr_EVP_PKEY_CTRL_GET_DH_KDF_UKM = `enum EVP_PKEY_CTRL_GET_DH_KDF_UKM = ( EVP_PKEY_ALG_CTRL + 12 );`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_PKEY_CTRL_GET_DH_KDF_UKM); }))) {
            mixin(enumMixinStr_EVP_PKEY_CTRL_GET_DH_KDF_UKM);
        }
    }




    static if(!is(typeof(EVP_aes_128_cfb))) {
        private enum enumMixinStr_EVP_aes_128_cfb = `enum EVP_aes_128_cfb = EVP_aes_128_cfb128;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_aes_128_cfb); }))) {
            mixin(enumMixinStr_EVP_aes_128_cfb);
        }
    }




    static if(!is(typeof(EVP_PKEY_CTRL_DH_KDF_UKM))) {
        private enum enumMixinStr_EVP_PKEY_CTRL_DH_KDF_UKM = `enum EVP_PKEY_CTRL_DH_KDF_UKM = ( EVP_PKEY_ALG_CTRL + 11 );`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_PKEY_CTRL_DH_KDF_UKM); }))) {
            mixin(enumMixinStr_EVP_PKEY_CTRL_DH_KDF_UKM);
        }
    }




    static if(!is(typeof(EVP_PKEY_CTRL_GET_DH_KDF_OUTLEN))) {
        private enum enumMixinStr_EVP_PKEY_CTRL_GET_DH_KDF_OUTLEN = `enum EVP_PKEY_CTRL_GET_DH_KDF_OUTLEN = ( EVP_PKEY_ALG_CTRL + 10 );`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_PKEY_CTRL_GET_DH_KDF_OUTLEN); }))) {
            mixin(enumMixinStr_EVP_PKEY_CTRL_GET_DH_KDF_OUTLEN);
        }
    }




    static if(!is(typeof(EVP_PKEY_CTRL_DH_KDF_OUTLEN))) {
        private enum enumMixinStr_EVP_PKEY_CTRL_DH_KDF_OUTLEN = `enum EVP_PKEY_CTRL_DH_KDF_OUTLEN = ( EVP_PKEY_ALG_CTRL + 9 );`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_PKEY_CTRL_DH_KDF_OUTLEN); }))) {
            mixin(enumMixinStr_EVP_PKEY_CTRL_DH_KDF_OUTLEN);
        }
    }




    static if(!is(typeof(EVP_PKEY_CTRL_GET_DH_KDF_MD))) {
        private enum enumMixinStr_EVP_PKEY_CTRL_GET_DH_KDF_MD = `enum EVP_PKEY_CTRL_GET_DH_KDF_MD = ( EVP_PKEY_ALG_CTRL + 8 );`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_PKEY_CTRL_GET_DH_KDF_MD); }))) {
            mixin(enumMixinStr_EVP_PKEY_CTRL_GET_DH_KDF_MD);
        }
    }




    static if(!is(typeof(EVP_PKEY_CTRL_DH_KDF_MD))) {
        private enum enumMixinStr_EVP_PKEY_CTRL_DH_KDF_MD = `enum EVP_PKEY_CTRL_DH_KDF_MD = ( EVP_PKEY_ALG_CTRL + 7 );`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_PKEY_CTRL_DH_KDF_MD); }))) {
            mixin(enumMixinStr_EVP_PKEY_CTRL_DH_KDF_MD);
        }
    }




    static if(!is(typeof(EVP_PKEY_CTRL_DH_KDF_TYPE))) {
        private enum enumMixinStr_EVP_PKEY_CTRL_DH_KDF_TYPE = `enum EVP_PKEY_CTRL_DH_KDF_TYPE = ( EVP_PKEY_ALG_CTRL + 6 );`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_PKEY_CTRL_DH_KDF_TYPE); }))) {
            mixin(enumMixinStr_EVP_PKEY_CTRL_DH_KDF_TYPE);
        }
    }




    static if(!is(typeof(EVP_PKEY_CTRL_DH_PARAMGEN_TYPE))) {
        private enum enumMixinStr_EVP_PKEY_CTRL_DH_PARAMGEN_TYPE = `enum EVP_PKEY_CTRL_DH_PARAMGEN_TYPE = ( EVP_PKEY_ALG_CTRL + 5 );`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_PKEY_CTRL_DH_PARAMGEN_TYPE); }))) {
            mixin(enumMixinStr_EVP_PKEY_CTRL_DH_PARAMGEN_TYPE);
        }
    }




    static if(!is(typeof(EVP_PKEY_CTRL_DH_PARAMGEN_SUBPRIME_LEN))) {
        private enum enumMixinStr_EVP_PKEY_CTRL_DH_PARAMGEN_SUBPRIME_LEN = `enum EVP_PKEY_CTRL_DH_PARAMGEN_SUBPRIME_LEN = ( EVP_PKEY_ALG_CTRL + 4 );`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_PKEY_CTRL_DH_PARAMGEN_SUBPRIME_LEN); }))) {
            mixin(enumMixinStr_EVP_PKEY_CTRL_DH_PARAMGEN_SUBPRIME_LEN);
        }
    }




    static if(!is(typeof(EVP_PKEY_CTRL_DH_RFC5114))) {
        private enum enumMixinStr_EVP_PKEY_CTRL_DH_RFC5114 = `enum EVP_PKEY_CTRL_DH_RFC5114 = ( EVP_PKEY_ALG_CTRL + 3 );`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_PKEY_CTRL_DH_RFC5114); }))) {
            mixin(enumMixinStr_EVP_PKEY_CTRL_DH_RFC5114);
        }
    }




    static if(!is(typeof(EVP_PKEY_CTRL_DH_PARAMGEN_GENERATOR))) {
        private enum enumMixinStr_EVP_PKEY_CTRL_DH_PARAMGEN_GENERATOR = `enum EVP_PKEY_CTRL_DH_PARAMGEN_GENERATOR = ( EVP_PKEY_ALG_CTRL + 2 );`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_PKEY_CTRL_DH_PARAMGEN_GENERATOR); }))) {
            mixin(enumMixinStr_EVP_PKEY_CTRL_DH_PARAMGEN_GENERATOR);
        }
    }




    static if(!is(typeof(EVP_PKEY_CTRL_DH_PARAMGEN_PRIME_LEN))) {
        private enum enumMixinStr_EVP_PKEY_CTRL_DH_PARAMGEN_PRIME_LEN = `enum EVP_PKEY_CTRL_DH_PARAMGEN_PRIME_LEN = ( EVP_PKEY_ALG_CTRL + 1 );`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_PKEY_CTRL_DH_PARAMGEN_PRIME_LEN); }))) {
            mixin(enumMixinStr_EVP_PKEY_CTRL_DH_PARAMGEN_PRIME_LEN);
        }
    }
    static if(!is(typeof(EVP_aes_192_cfb))) {
        private enum enumMixinStr_EVP_aes_192_cfb = `enum EVP_aes_192_cfb = EVP_aes_192_cfb128;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_aes_192_cfb); }))) {
            mixin(enumMixinStr_EVP_aes_192_cfb);
        }
    }
    static if(!is(typeof(EVP_aes_256_cfb))) {
        private enum enumMixinStr_EVP_aes_256_cfb = `enum EVP_aes_256_cfb = EVP_aes_256_cfb128;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_aes_256_cfb); }))) {
            mixin(enumMixinStr_EVP_aes_256_cfb);
        }
    }
    static if(!is(typeof(DH_CHECK_P_NOT_STRONG_PRIME))) {
        private enum enumMixinStr_DH_CHECK_P_NOT_STRONG_PRIME = `enum DH_CHECK_P_NOT_STRONG_PRIME = DH_CHECK_P_NOT_SAFE_PRIME;`;
        static if(is(typeof({ mixin(enumMixinStr_DH_CHECK_P_NOT_STRONG_PRIME); }))) {
            mixin(enumMixinStr_DH_CHECK_P_NOT_STRONG_PRIME);
        }
    }




    static if(!is(typeof(DH_CHECK_PUBKEY_INVALID))) {
        private enum enumMixinStr_DH_CHECK_PUBKEY_INVALID = `enum DH_CHECK_PUBKEY_INVALID = 0x04;`;
        static if(is(typeof({ mixin(enumMixinStr_DH_CHECK_PUBKEY_INVALID); }))) {
            mixin(enumMixinStr_DH_CHECK_PUBKEY_INVALID);
        }
    }




    static if(!is(typeof(DH_CHECK_PUBKEY_TOO_LARGE))) {
        private enum enumMixinStr_DH_CHECK_PUBKEY_TOO_LARGE = `enum DH_CHECK_PUBKEY_TOO_LARGE = 0x02;`;
        static if(is(typeof({ mixin(enumMixinStr_DH_CHECK_PUBKEY_TOO_LARGE); }))) {
            mixin(enumMixinStr_DH_CHECK_PUBKEY_TOO_LARGE);
        }
    }




    static if(!is(typeof(DH_CHECK_PUBKEY_TOO_SMALL))) {
        private enum enumMixinStr_DH_CHECK_PUBKEY_TOO_SMALL = `enum DH_CHECK_PUBKEY_TOO_SMALL = 0x01;`;
        static if(is(typeof({ mixin(enumMixinStr_DH_CHECK_PUBKEY_TOO_SMALL); }))) {
            mixin(enumMixinStr_DH_CHECK_PUBKEY_TOO_SMALL);
        }
    }




    static if(!is(typeof(EVP_aria_128_cfb))) {
        private enum enumMixinStr_EVP_aria_128_cfb = `enum EVP_aria_128_cfb = EVP_aria_128_cfb128;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_aria_128_cfb); }))) {
            mixin(enumMixinStr_EVP_aria_128_cfb);
        }
    }




    static if(!is(typeof(DH_CHECK_INVALID_J_VALUE))) {
        private enum enumMixinStr_DH_CHECK_INVALID_J_VALUE = `enum DH_CHECK_INVALID_J_VALUE = 0x40;`;
        static if(is(typeof({ mixin(enumMixinStr_DH_CHECK_INVALID_J_VALUE); }))) {
            mixin(enumMixinStr_DH_CHECK_INVALID_J_VALUE);
        }
    }




    static if(!is(typeof(DH_CHECK_INVALID_Q_VALUE))) {
        private enum enumMixinStr_DH_CHECK_INVALID_Q_VALUE = `enum DH_CHECK_INVALID_Q_VALUE = 0x20;`;
        static if(is(typeof({ mixin(enumMixinStr_DH_CHECK_INVALID_Q_VALUE); }))) {
            mixin(enumMixinStr_DH_CHECK_INVALID_Q_VALUE);
        }
    }




    static if(!is(typeof(DH_CHECK_Q_NOT_PRIME))) {
        private enum enumMixinStr_DH_CHECK_Q_NOT_PRIME = `enum DH_CHECK_Q_NOT_PRIME = 0x10;`;
        static if(is(typeof({ mixin(enumMixinStr_DH_CHECK_Q_NOT_PRIME); }))) {
            mixin(enumMixinStr_DH_CHECK_Q_NOT_PRIME);
        }
    }




    static if(!is(typeof(DH_NOT_SUITABLE_GENERATOR))) {
        private enum enumMixinStr_DH_NOT_SUITABLE_GENERATOR = `enum DH_NOT_SUITABLE_GENERATOR = 0x08;`;
        static if(is(typeof({ mixin(enumMixinStr_DH_NOT_SUITABLE_GENERATOR); }))) {
            mixin(enumMixinStr_DH_NOT_SUITABLE_GENERATOR);
        }
    }




    static if(!is(typeof(DH_UNABLE_TO_CHECK_GENERATOR))) {
        private enum enumMixinStr_DH_UNABLE_TO_CHECK_GENERATOR = `enum DH_UNABLE_TO_CHECK_GENERATOR = 0x04;`;
        static if(is(typeof({ mixin(enumMixinStr_DH_UNABLE_TO_CHECK_GENERATOR); }))) {
            mixin(enumMixinStr_DH_UNABLE_TO_CHECK_GENERATOR);
        }
    }




    static if(!is(typeof(DH_CHECK_P_NOT_SAFE_PRIME))) {
        private enum enumMixinStr_DH_CHECK_P_NOT_SAFE_PRIME = `enum DH_CHECK_P_NOT_SAFE_PRIME = 0x02;`;
        static if(is(typeof({ mixin(enumMixinStr_DH_CHECK_P_NOT_SAFE_PRIME); }))) {
            mixin(enumMixinStr_DH_CHECK_P_NOT_SAFE_PRIME);
        }
    }




    static if(!is(typeof(DH_CHECK_P_NOT_PRIME))) {
        private enum enumMixinStr_DH_CHECK_P_NOT_PRIME = `enum DH_CHECK_P_NOT_PRIME = 0x01;`;
        static if(is(typeof({ mixin(enumMixinStr_DH_CHECK_P_NOT_PRIME); }))) {
            mixin(enumMixinStr_DH_CHECK_P_NOT_PRIME);
        }
    }




    static if(!is(typeof(DH_GENERATOR_5))) {
        private enum enumMixinStr_DH_GENERATOR_5 = `enum DH_GENERATOR_5 = 5;`;
        static if(is(typeof({ mixin(enumMixinStr_DH_GENERATOR_5); }))) {
            mixin(enumMixinStr_DH_GENERATOR_5);
        }
    }




    static if(!is(typeof(DH_GENERATOR_2))) {
        private enum enumMixinStr_DH_GENERATOR_2 = `enum DH_GENERATOR_2 = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_DH_GENERATOR_2); }))) {
            mixin(enumMixinStr_DH_GENERATOR_2);
        }
    }




    static if(!is(typeof(EVP_aria_192_cfb))) {
        private enum enumMixinStr_EVP_aria_192_cfb = `enum EVP_aria_192_cfb = EVP_aria_192_cfb128;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_aria_192_cfb); }))) {
            mixin(enumMixinStr_EVP_aria_192_cfb);
        }
    }




    static if(!is(typeof(DH_FLAG_NON_FIPS_ALLOW))) {
        private enum enumMixinStr_DH_FLAG_NON_FIPS_ALLOW = `enum DH_FLAG_NON_FIPS_ALLOW = 0x0400;`;
        static if(is(typeof({ mixin(enumMixinStr_DH_FLAG_NON_FIPS_ALLOW); }))) {
            mixin(enumMixinStr_DH_FLAG_NON_FIPS_ALLOW);
        }
    }




    static if(!is(typeof(DH_FLAG_FIPS_METHOD))) {
        private enum enumMixinStr_DH_FLAG_FIPS_METHOD = `enum DH_FLAG_FIPS_METHOD = 0x0400;`;
        static if(is(typeof({ mixin(enumMixinStr_DH_FLAG_FIPS_METHOD); }))) {
            mixin(enumMixinStr_DH_FLAG_FIPS_METHOD);
        }
    }




    static if(!is(typeof(DH_FLAG_NO_EXP_CONSTTIME))) {
        private enum enumMixinStr_DH_FLAG_NO_EXP_CONSTTIME = `enum DH_FLAG_NO_EXP_CONSTTIME = 0x00;`;
        static if(is(typeof({ mixin(enumMixinStr_DH_FLAG_NO_EXP_CONSTTIME); }))) {
            mixin(enumMixinStr_DH_FLAG_NO_EXP_CONSTTIME);
        }
    }




    static if(!is(typeof(DH_FLAG_CACHE_MONT_P))) {
        private enum enumMixinStr_DH_FLAG_CACHE_MONT_P = `enum DH_FLAG_CACHE_MONT_P = 0x01;`;
        static if(is(typeof({ mixin(enumMixinStr_DH_FLAG_CACHE_MONT_P); }))) {
            mixin(enumMixinStr_DH_FLAG_CACHE_MONT_P);
        }
    }




    static if(!is(typeof(OPENSSL_DH_FIPS_MIN_MODULUS_BITS))) {
        private enum enumMixinStr_OPENSSL_DH_FIPS_MIN_MODULUS_BITS = `enum OPENSSL_DH_FIPS_MIN_MODULUS_BITS = 1024;`;
        static if(is(typeof({ mixin(enumMixinStr_OPENSSL_DH_FIPS_MIN_MODULUS_BITS); }))) {
            mixin(enumMixinStr_OPENSSL_DH_FIPS_MIN_MODULUS_BITS);
        }
    }




    static if(!is(typeof(OPENSSL_DH_MAX_MODULUS_BITS))) {
        private enum enumMixinStr_OPENSSL_DH_MAX_MODULUS_BITS = `enum OPENSSL_DH_MAX_MODULUS_BITS = 10000;`;
        static if(is(typeof({ mixin(enumMixinStr_OPENSSL_DH_MAX_MODULUS_BITS); }))) {
            mixin(enumMixinStr_OPENSSL_DH_MAX_MODULUS_BITS);
        }
    }






    static if(!is(typeof(CRYPTO_R_ODD_NUMBER_OF_DIGITS))) {
        private enum enumMixinStr_CRYPTO_R_ODD_NUMBER_OF_DIGITS = `enum CRYPTO_R_ODD_NUMBER_OF_DIGITS = 103;`;
        static if(is(typeof({ mixin(enumMixinStr_CRYPTO_R_ODD_NUMBER_OF_DIGITS); }))) {
            mixin(enumMixinStr_CRYPTO_R_ODD_NUMBER_OF_DIGITS);
        }
    }




    static if(!is(typeof(CRYPTO_R_ILLEGAL_HEX_DIGIT))) {
        private enum enumMixinStr_CRYPTO_R_ILLEGAL_HEX_DIGIT = `enum CRYPTO_R_ILLEGAL_HEX_DIGIT = 102;`;
        static if(is(typeof({ mixin(enumMixinStr_CRYPTO_R_ILLEGAL_HEX_DIGIT); }))) {
            mixin(enumMixinStr_CRYPTO_R_ILLEGAL_HEX_DIGIT);
        }
    }




    static if(!is(typeof(EVP_aria_256_cfb))) {
        private enum enumMixinStr_EVP_aria_256_cfb = `enum EVP_aria_256_cfb = EVP_aria_256_cfb128;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_aria_256_cfb); }))) {
            mixin(enumMixinStr_EVP_aria_256_cfb);
        }
    }




    static if(!is(typeof(CRYPTO_R_FIPS_MODE_NOT_SUPPORTED))) {
        private enum enumMixinStr_CRYPTO_R_FIPS_MODE_NOT_SUPPORTED = `enum CRYPTO_R_FIPS_MODE_NOT_SUPPORTED = 101;`;
        static if(is(typeof({ mixin(enumMixinStr_CRYPTO_R_FIPS_MODE_NOT_SUPPORTED); }))) {
            mixin(enumMixinStr_CRYPTO_R_FIPS_MODE_NOT_SUPPORTED);
        }
    }




    static if(!is(typeof(CRYPTO_F_SK_RESERVE))) {
        private enum enumMixinStr_CRYPTO_F_SK_RESERVE = `enum CRYPTO_F_SK_RESERVE = 129;`;
        static if(is(typeof({ mixin(enumMixinStr_CRYPTO_F_SK_RESERVE); }))) {
            mixin(enumMixinStr_CRYPTO_F_SK_RESERVE);
        }
    }




    static if(!is(typeof(CRYPTO_F_PKEY_SIPHASH_INIT))) {
        private enum enumMixinStr_CRYPTO_F_PKEY_SIPHASH_INIT = `enum CRYPTO_F_PKEY_SIPHASH_INIT = 125;`;
        static if(is(typeof({ mixin(enumMixinStr_CRYPTO_F_PKEY_SIPHASH_INIT); }))) {
            mixin(enumMixinStr_CRYPTO_F_PKEY_SIPHASH_INIT);
        }
    }




    static if(!is(typeof(CRYPTO_F_PKEY_POLY1305_INIT))) {
        private enum enumMixinStr_CRYPTO_F_PKEY_POLY1305_INIT = `enum CRYPTO_F_PKEY_POLY1305_INIT = 124;`;
        static if(is(typeof({ mixin(enumMixinStr_CRYPTO_F_PKEY_POLY1305_INIT); }))) {
            mixin(enumMixinStr_CRYPTO_F_PKEY_POLY1305_INIT);
        }
    }




    static if(!is(typeof(CRYPTO_F_PKEY_HMAC_INIT))) {
        private enum enumMixinStr_CRYPTO_F_PKEY_HMAC_INIT = `enum CRYPTO_F_PKEY_HMAC_INIT = 123;`;
        static if(is(typeof({ mixin(enumMixinStr_CRYPTO_F_PKEY_HMAC_INIT); }))) {
            mixin(enumMixinStr_CRYPTO_F_PKEY_HMAC_INIT);
        }
    }




    static if(!is(typeof(CRYPTO_F_OPENSSL_SK_DUP))) {
        private enum enumMixinStr_CRYPTO_F_OPENSSL_SK_DUP = `enum CRYPTO_F_OPENSSL_SK_DUP = 128;`;
        static if(is(typeof({ mixin(enumMixinStr_CRYPTO_F_OPENSSL_SK_DUP); }))) {
            mixin(enumMixinStr_CRYPTO_F_OPENSSL_SK_DUP);
        }
    }




    static if(!is(typeof(CRYPTO_F_OPENSSL_SK_DEEP_COPY))) {
        private enum enumMixinStr_CRYPTO_F_OPENSSL_SK_DEEP_COPY = `enum CRYPTO_F_OPENSSL_SK_DEEP_COPY = 127;`;
        static if(is(typeof({ mixin(enumMixinStr_CRYPTO_F_OPENSSL_SK_DEEP_COPY); }))) {
            mixin(enumMixinStr_CRYPTO_F_OPENSSL_SK_DEEP_COPY);
        }
    }




    static if(!is(typeof(CRYPTO_F_OPENSSL_LH_NEW))) {
        private enum enumMixinStr_CRYPTO_F_OPENSSL_LH_NEW = `enum CRYPTO_F_OPENSSL_LH_NEW = 126;`;
        static if(is(typeof({ mixin(enumMixinStr_CRYPTO_F_OPENSSL_LH_NEW); }))) {
            mixin(enumMixinStr_CRYPTO_F_OPENSSL_LH_NEW);
        }
    }




    static if(!is(typeof(CRYPTO_F_OPENSSL_INIT_CRYPTO))) {
        private enum enumMixinStr_CRYPTO_F_OPENSSL_INIT_CRYPTO = `enum CRYPTO_F_OPENSSL_INIT_CRYPTO = 116;`;
        static if(is(typeof({ mixin(enumMixinStr_CRYPTO_F_OPENSSL_INIT_CRYPTO); }))) {
            mixin(enumMixinStr_CRYPTO_F_OPENSSL_INIT_CRYPTO);
        }
    }




    static if(!is(typeof(EVP_camellia_128_cfb))) {
        private enum enumMixinStr_EVP_camellia_128_cfb = `enum EVP_camellia_128_cfb = EVP_camellia_128_cfb128;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_camellia_128_cfb); }))) {
            mixin(enumMixinStr_EVP_camellia_128_cfb);
        }
    }




    static if(!is(typeof(CRYPTO_F_OPENSSL_HEXSTR2BUF))) {
        private enum enumMixinStr_CRYPTO_F_OPENSSL_HEXSTR2BUF = `enum CRYPTO_F_OPENSSL_HEXSTR2BUF = 118;`;
        static if(is(typeof({ mixin(enumMixinStr_CRYPTO_F_OPENSSL_HEXSTR2BUF); }))) {
            mixin(enumMixinStr_CRYPTO_F_OPENSSL_HEXSTR2BUF);
        }
    }




    static if(!is(typeof(CRYPTO_F_OPENSSL_FOPEN))) {
        private enum enumMixinStr_CRYPTO_F_OPENSSL_FOPEN = `enum CRYPTO_F_OPENSSL_FOPEN = 119;`;
        static if(is(typeof({ mixin(enumMixinStr_CRYPTO_F_OPENSSL_FOPEN); }))) {
            mixin(enumMixinStr_CRYPTO_F_OPENSSL_FOPEN);
        }
    }




    static if(!is(typeof(CRYPTO_F_OPENSSL_BUF2HEXSTR))) {
        private enum enumMixinStr_CRYPTO_F_OPENSSL_BUF2HEXSTR = `enum CRYPTO_F_OPENSSL_BUF2HEXSTR = 117;`;
        static if(is(typeof({ mixin(enumMixinStr_CRYPTO_F_OPENSSL_BUF2HEXSTR); }))) {
            mixin(enumMixinStr_CRYPTO_F_OPENSSL_BUF2HEXSTR);
        }
    }




    static if(!is(typeof(CRYPTO_F_OPENSSL_ATEXIT))) {
        private enum enumMixinStr_CRYPTO_F_OPENSSL_ATEXIT = `enum CRYPTO_F_OPENSSL_ATEXIT = 114;`;
        static if(is(typeof({ mixin(enumMixinStr_CRYPTO_F_OPENSSL_ATEXIT); }))) {
            mixin(enumMixinStr_CRYPTO_F_OPENSSL_ATEXIT);
        }
    }




    static if(!is(typeof(CRYPTO_F_GET_AND_LOCK))) {
        private enum enumMixinStr_CRYPTO_F_GET_AND_LOCK = `enum CRYPTO_F_GET_AND_LOCK = 113;`;
        static if(is(typeof({ mixin(enumMixinStr_CRYPTO_F_GET_AND_LOCK); }))) {
            mixin(enumMixinStr_CRYPTO_F_GET_AND_LOCK);
        }
    }




    static if(!is(typeof(CRYPTO_F_FIPS_MODE_SET))) {
        private enum enumMixinStr_CRYPTO_F_FIPS_MODE_SET = `enum CRYPTO_F_FIPS_MODE_SET = 109;`;
        static if(is(typeof({ mixin(enumMixinStr_CRYPTO_F_FIPS_MODE_SET); }))) {
            mixin(enumMixinStr_CRYPTO_F_FIPS_MODE_SET);
        }
    }




    static if(!is(typeof(CRYPTO_F_CRYPTO_SET_EX_DATA))) {
        private enum enumMixinStr_CRYPTO_F_CRYPTO_SET_EX_DATA = `enum CRYPTO_F_CRYPTO_SET_EX_DATA = 102;`;
        static if(is(typeof({ mixin(enumMixinStr_CRYPTO_F_CRYPTO_SET_EX_DATA); }))) {
            mixin(enumMixinStr_CRYPTO_F_CRYPTO_SET_EX_DATA);
        }
    }




    static if(!is(typeof(EVP_camellia_192_cfb))) {
        private enum enumMixinStr_EVP_camellia_192_cfb = `enum EVP_camellia_192_cfb = EVP_camellia_192_cfb128;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_camellia_192_cfb); }))) {
            mixin(enumMixinStr_EVP_camellia_192_cfb);
        }
    }




    static if(!is(typeof(CRYPTO_F_CRYPTO_OCB128_INIT))) {
        private enum enumMixinStr_CRYPTO_F_CRYPTO_OCB128_INIT = `enum CRYPTO_F_CRYPTO_OCB128_INIT = 122;`;
        static if(is(typeof({ mixin(enumMixinStr_CRYPTO_F_CRYPTO_OCB128_INIT); }))) {
            mixin(enumMixinStr_CRYPTO_F_CRYPTO_OCB128_INIT);
        }
    }




    static if(!is(typeof(CRYPTO_F_CRYPTO_OCB128_COPY_CTX))) {
        private enum enumMixinStr_CRYPTO_F_CRYPTO_OCB128_COPY_CTX = `enum CRYPTO_F_CRYPTO_OCB128_COPY_CTX = 121;`;
        static if(is(typeof({ mixin(enumMixinStr_CRYPTO_F_CRYPTO_OCB128_COPY_CTX); }))) {
            mixin(enumMixinStr_CRYPTO_F_CRYPTO_OCB128_COPY_CTX);
        }
    }




    static if(!is(typeof(CRYPTO_F_CRYPTO_NEW_EX_DATA))) {
        private enum enumMixinStr_CRYPTO_F_CRYPTO_NEW_EX_DATA = `enum CRYPTO_F_CRYPTO_NEW_EX_DATA = 112;`;
        static if(is(typeof({ mixin(enumMixinStr_CRYPTO_F_CRYPTO_NEW_EX_DATA); }))) {
            mixin(enumMixinStr_CRYPTO_F_CRYPTO_NEW_EX_DATA);
        }
    }




    static if(!is(typeof(CRYPTO_F_CRYPTO_MEMDUP))) {
        private enum enumMixinStr_CRYPTO_F_CRYPTO_MEMDUP = `enum CRYPTO_F_CRYPTO_MEMDUP = 115;`;
        static if(is(typeof({ mixin(enumMixinStr_CRYPTO_F_CRYPTO_MEMDUP); }))) {
            mixin(enumMixinStr_CRYPTO_F_CRYPTO_MEMDUP);
        }
    }




    static if(!is(typeof(CRYPTO_F_CRYPTO_GET_EX_NEW_INDEX))) {
        private enum enumMixinStr_CRYPTO_F_CRYPTO_GET_EX_NEW_INDEX = `enum CRYPTO_F_CRYPTO_GET_EX_NEW_INDEX = 100;`;
        static if(is(typeof({ mixin(enumMixinStr_CRYPTO_F_CRYPTO_GET_EX_NEW_INDEX); }))) {
            mixin(enumMixinStr_CRYPTO_F_CRYPTO_GET_EX_NEW_INDEX);
        }
    }




    static if(!is(typeof(CRYPTO_F_CRYPTO_FREE_EX_DATA))) {
        private enum enumMixinStr_CRYPTO_F_CRYPTO_FREE_EX_DATA = `enum CRYPTO_F_CRYPTO_FREE_EX_DATA = 111;`;
        static if(is(typeof({ mixin(enumMixinStr_CRYPTO_F_CRYPTO_FREE_EX_DATA); }))) {
            mixin(enumMixinStr_CRYPTO_F_CRYPTO_FREE_EX_DATA);
        }
    }




    static if(!is(typeof(CRYPTO_F_CRYPTO_DUP_EX_DATA))) {
        private enum enumMixinStr_CRYPTO_F_CRYPTO_DUP_EX_DATA = `enum CRYPTO_F_CRYPTO_DUP_EX_DATA = 110;`;
        static if(is(typeof({ mixin(enumMixinStr_CRYPTO_F_CRYPTO_DUP_EX_DATA); }))) {
            mixin(enumMixinStr_CRYPTO_F_CRYPTO_DUP_EX_DATA);
        }
    }




    static if(!is(typeof(EVP_camellia_256_cfb))) {
        private enum enumMixinStr_EVP_camellia_256_cfb = `enum EVP_camellia_256_cfb = EVP_camellia_256_cfb128;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_camellia_256_cfb); }))) {
            mixin(enumMixinStr_EVP_camellia_256_cfb);
        }
    }




    static if(!is(typeof(CRYPTO_F_CMAC_CTX_NEW))) {
        private enum enumMixinStr_CRYPTO_F_CMAC_CTX_NEW = `enum CRYPTO_F_CMAC_CTX_NEW = 120;`;
        static if(is(typeof({ mixin(enumMixinStr_CRYPTO_F_CMAC_CTX_NEW); }))) {
            mixin(enumMixinStr_CRYPTO_F_CMAC_CTX_NEW);
        }
    }






    static if(!is(typeof(CRYPTO_ONCE_STATIC_INIT))) {
        private enum enumMixinStr_CRYPTO_ONCE_STATIC_INIT = `enum CRYPTO_ONCE_STATIC_INIT = PTHREAD_ONCE_INIT;`;
        static if(is(typeof({ mixin(enumMixinStr_CRYPTO_ONCE_STATIC_INIT); }))) {
            mixin(enumMixinStr_CRYPTO_ONCE_STATIC_INIT);
        }
    }




    static if(!is(typeof(OPENSSL_INIT_ENGINE_ALL_BUILTIN))) {
        private enum enumMixinStr_OPENSSL_INIT_ENGINE_ALL_BUILTIN = `enum OPENSSL_INIT_ENGINE_ALL_BUILTIN = ( OPENSSL_INIT_ENGINE_RDRAND | OPENSSL_INIT_ENGINE_DYNAMIC | OPENSSL_INIT_ENGINE_CRYPTODEV | OPENSSL_INIT_ENGINE_CAPI | OPENSSL_INIT_ENGINE_PADLOCK );`;
        static if(is(typeof({ mixin(enumMixinStr_OPENSSL_INIT_ENGINE_ALL_BUILTIN); }))) {
            mixin(enumMixinStr_OPENSSL_INIT_ENGINE_ALL_BUILTIN);
        }
    }




    static if(!is(typeof(OPENSSL_INIT_NO_ATEXIT))) {
        private enum enumMixinStr_OPENSSL_INIT_NO_ATEXIT = `enum OPENSSL_INIT_NO_ATEXIT = 0x00080000L;`;
        static if(is(typeof({ mixin(enumMixinStr_OPENSSL_INIT_NO_ATEXIT); }))) {
            mixin(enumMixinStr_OPENSSL_INIT_NO_ATEXIT);
        }
    }




    static if(!is(typeof(OPENSSL_INIT_ATFORK))) {
        private enum enumMixinStr_OPENSSL_INIT_ATFORK = `enum OPENSSL_INIT_ATFORK = 0x00020000L;`;
        static if(is(typeof({ mixin(enumMixinStr_OPENSSL_INIT_ATFORK); }))) {
            mixin(enumMixinStr_OPENSSL_INIT_ATFORK);
        }
    }




    static if(!is(typeof(OPENSSL_INIT_ENGINE_AFALG))) {
        private enum enumMixinStr_OPENSSL_INIT_ENGINE_AFALG = `enum OPENSSL_INIT_ENGINE_AFALG = 0x00008000L;`;
        static if(is(typeof({ mixin(enumMixinStr_OPENSSL_INIT_ENGINE_AFALG); }))) {
            mixin(enumMixinStr_OPENSSL_INIT_ENGINE_AFALG);
        }
    }




    static if(!is(typeof(EVP_seed_cfb))) {
        private enum enumMixinStr_EVP_seed_cfb = `enum EVP_seed_cfb = EVP_seed_cfb128;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_seed_cfb); }))) {
            mixin(enumMixinStr_EVP_seed_cfb);
        }
    }




    static if(!is(typeof(OPENSSL_INIT_ENGINE_PADLOCK))) {
        private enum enumMixinStr_OPENSSL_INIT_ENGINE_PADLOCK = `enum OPENSSL_INIT_ENGINE_PADLOCK = 0x00004000L;`;
        static if(is(typeof({ mixin(enumMixinStr_OPENSSL_INIT_ENGINE_PADLOCK); }))) {
            mixin(enumMixinStr_OPENSSL_INIT_ENGINE_PADLOCK);
        }
    }




    static if(!is(typeof(OPENSSL_INIT_ENGINE_CAPI))) {
        private enum enumMixinStr_OPENSSL_INIT_ENGINE_CAPI = `enum OPENSSL_INIT_ENGINE_CAPI = 0x00002000L;`;
        static if(is(typeof({ mixin(enumMixinStr_OPENSSL_INIT_ENGINE_CAPI); }))) {
            mixin(enumMixinStr_OPENSSL_INIT_ENGINE_CAPI);
        }
    }




    static if(!is(typeof(OPENSSL_INIT_ENGINE_CRYPTODEV))) {
        private enum enumMixinStr_OPENSSL_INIT_ENGINE_CRYPTODEV = `enum OPENSSL_INIT_ENGINE_CRYPTODEV = 0x00001000L;`;
        static if(is(typeof({ mixin(enumMixinStr_OPENSSL_INIT_ENGINE_CRYPTODEV); }))) {
            mixin(enumMixinStr_OPENSSL_INIT_ENGINE_CRYPTODEV);
        }
    }




    static if(!is(typeof(OPENSSL_INIT_ENGINE_OPENSSL))) {
        private enum enumMixinStr_OPENSSL_INIT_ENGINE_OPENSSL = `enum OPENSSL_INIT_ENGINE_OPENSSL = 0x00000800L;`;
        static if(is(typeof({ mixin(enumMixinStr_OPENSSL_INIT_ENGINE_OPENSSL); }))) {
            mixin(enumMixinStr_OPENSSL_INIT_ENGINE_OPENSSL);
        }
    }




    static if(!is(typeof(EVP_sm4_cfb))) {
        private enum enumMixinStr_EVP_sm4_cfb = `enum EVP_sm4_cfb = EVP_sm4_cfb128;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_sm4_cfb); }))) {
            mixin(enumMixinStr_EVP_sm4_cfb);
        }
    }




    static if(!is(typeof(OPENSSL_INIT_ENGINE_DYNAMIC))) {
        private enum enumMixinStr_OPENSSL_INIT_ENGINE_DYNAMIC = `enum OPENSSL_INIT_ENGINE_DYNAMIC = 0x00000400L;`;
        static if(is(typeof({ mixin(enumMixinStr_OPENSSL_INIT_ENGINE_DYNAMIC); }))) {
            mixin(enumMixinStr_OPENSSL_INIT_ENGINE_DYNAMIC);
        }
    }




    static if(!is(typeof(OPENSSL_INIT_ENGINE_RDRAND))) {
        private enum enumMixinStr_OPENSSL_INIT_ENGINE_RDRAND = `enum OPENSSL_INIT_ENGINE_RDRAND = 0x00000200L;`;
        static if(is(typeof({ mixin(enumMixinStr_OPENSSL_INIT_ENGINE_RDRAND); }))) {
            mixin(enumMixinStr_OPENSSL_INIT_ENGINE_RDRAND);
        }
    }




    static if(!is(typeof(OPENSSL_INIT_ASYNC))) {
        private enum enumMixinStr_OPENSSL_INIT_ASYNC = `enum OPENSSL_INIT_ASYNC = 0x00000100L;`;
        static if(is(typeof({ mixin(enumMixinStr_OPENSSL_INIT_ASYNC); }))) {
            mixin(enumMixinStr_OPENSSL_INIT_ASYNC);
        }
    }
    static if(!is(typeof(OPENSSL_INIT_NO_LOAD_CONFIG))) {
        private enum enumMixinStr_OPENSSL_INIT_NO_LOAD_CONFIG = `enum OPENSSL_INIT_NO_LOAD_CONFIG = 0x00000080L;`;
        static if(is(typeof({ mixin(enumMixinStr_OPENSSL_INIT_NO_LOAD_CONFIG); }))) {
            mixin(enumMixinStr_OPENSSL_INIT_NO_LOAD_CONFIG);
        }
    }




    static if(!is(typeof(OPENSSL_INIT_LOAD_CONFIG))) {
        private enum enumMixinStr_OPENSSL_INIT_LOAD_CONFIG = `enum OPENSSL_INIT_LOAD_CONFIG = 0x00000040L;`;
        static if(is(typeof({ mixin(enumMixinStr_OPENSSL_INIT_LOAD_CONFIG); }))) {
            mixin(enumMixinStr_OPENSSL_INIT_LOAD_CONFIG);
        }
    }




    static if(!is(typeof(OPENSSL_INIT_NO_ADD_ALL_DIGESTS))) {
        private enum enumMixinStr_OPENSSL_INIT_NO_ADD_ALL_DIGESTS = `enum OPENSSL_INIT_NO_ADD_ALL_DIGESTS = 0x00000020L;`;
        static if(is(typeof({ mixin(enumMixinStr_OPENSSL_INIT_NO_ADD_ALL_DIGESTS); }))) {
            mixin(enumMixinStr_OPENSSL_INIT_NO_ADD_ALL_DIGESTS);
        }
    }




    static if(!is(typeof(OPENSSL_INIT_NO_ADD_ALL_CIPHERS))) {
        private enum enumMixinStr_OPENSSL_INIT_NO_ADD_ALL_CIPHERS = `enum OPENSSL_INIT_NO_ADD_ALL_CIPHERS = 0x00000010L;`;
        static if(is(typeof({ mixin(enumMixinStr_OPENSSL_INIT_NO_ADD_ALL_CIPHERS); }))) {
            mixin(enumMixinStr_OPENSSL_INIT_NO_ADD_ALL_CIPHERS);
        }
    }




    static if(!is(typeof(OPENSSL_INIT_ADD_ALL_DIGESTS))) {
        private enum enumMixinStr_OPENSSL_INIT_ADD_ALL_DIGESTS = `enum OPENSSL_INIT_ADD_ALL_DIGESTS = 0x00000008L;`;
        static if(is(typeof({ mixin(enumMixinStr_OPENSSL_INIT_ADD_ALL_DIGESTS); }))) {
            mixin(enumMixinStr_OPENSSL_INIT_ADD_ALL_DIGESTS);
        }
    }




    static if(!is(typeof(OPENSSL_INIT_ADD_ALL_CIPHERS))) {
        private enum enumMixinStr_OPENSSL_INIT_ADD_ALL_CIPHERS = `enum OPENSSL_INIT_ADD_ALL_CIPHERS = 0x00000004L;`;
        static if(is(typeof({ mixin(enumMixinStr_OPENSSL_INIT_ADD_ALL_CIPHERS); }))) {
            mixin(enumMixinStr_OPENSSL_INIT_ADD_ALL_CIPHERS);
        }
    }




    static if(!is(typeof(OPENSSL_INIT_LOAD_CRYPTO_STRINGS))) {
        private enum enumMixinStr_OPENSSL_INIT_LOAD_CRYPTO_STRINGS = `enum OPENSSL_INIT_LOAD_CRYPTO_STRINGS = 0x00000002L;`;
        static if(is(typeof({ mixin(enumMixinStr_OPENSSL_INIT_LOAD_CRYPTO_STRINGS); }))) {
            mixin(enumMixinStr_OPENSSL_INIT_LOAD_CRYPTO_STRINGS);
        }
    }




    static if(!is(typeof(OPENSSL_INIT_NO_LOAD_CRYPTO_STRINGS))) {
        private enum enumMixinStr_OPENSSL_INIT_NO_LOAD_CRYPTO_STRINGS = `enum OPENSSL_INIT_NO_LOAD_CRYPTO_STRINGS = 0x00000001L;`;
        static if(is(typeof({ mixin(enumMixinStr_OPENSSL_INIT_NO_LOAD_CRYPTO_STRINGS); }))) {
            mixin(enumMixinStr_OPENSSL_INIT_NO_LOAD_CRYPTO_STRINGS);
        }
    }
    static if(!is(typeof(CRYPTO_WRITE))) {
        private enum enumMixinStr_CRYPTO_WRITE = `enum CRYPTO_WRITE = 8;`;
        static if(is(typeof({ mixin(enumMixinStr_CRYPTO_WRITE); }))) {
            mixin(enumMixinStr_CRYPTO_WRITE);
        }
    }




    static if(!is(typeof(CRYPTO_READ))) {
        private enum enumMixinStr_CRYPTO_READ = `enum CRYPTO_READ = 4;`;
        static if(is(typeof({ mixin(enumMixinStr_CRYPTO_READ); }))) {
            mixin(enumMixinStr_CRYPTO_READ);
        }
    }




    static if(!is(typeof(CRYPTO_UNLOCK))) {
        private enum enumMixinStr_CRYPTO_UNLOCK = `enum CRYPTO_UNLOCK = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_CRYPTO_UNLOCK); }))) {
            mixin(enumMixinStr_CRYPTO_UNLOCK);
        }
    }




    static if(!is(typeof(CRYPTO_LOCK))) {
        private enum enumMixinStr_CRYPTO_LOCK = `enum CRYPTO_LOCK = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_CRYPTO_LOCK); }))) {
            mixin(enumMixinStr_CRYPTO_LOCK);
        }
    }
    static if(!is(typeof(OPENSSL_ENGINES_DIR))) {
        private enum enumMixinStr_OPENSSL_ENGINES_DIR = `enum OPENSSL_ENGINES_DIR = 5;`;
        static if(is(typeof({ mixin(enumMixinStr_OPENSSL_ENGINES_DIR); }))) {
            mixin(enumMixinStr_OPENSSL_ENGINES_DIR);
        }
    }




    static if(!is(typeof(OPENSSL_DIR))) {
        private enum enumMixinStr_OPENSSL_DIR = `enum OPENSSL_DIR = 4;`;
        static if(is(typeof({ mixin(enumMixinStr_OPENSSL_DIR); }))) {
            mixin(enumMixinStr_OPENSSL_DIR);
        }
    }




    static if(!is(typeof(OPENSSL_PLATFORM))) {
        private enum enumMixinStr_OPENSSL_PLATFORM = `enum OPENSSL_PLATFORM = 3;`;
        static if(is(typeof({ mixin(enumMixinStr_OPENSSL_PLATFORM); }))) {
            mixin(enumMixinStr_OPENSSL_PLATFORM);
        }
    }




    static if(!is(typeof(OPENSSL_BUILT_ON))) {
        private enum enumMixinStr_OPENSSL_BUILT_ON = `enum OPENSSL_BUILT_ON = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_OPENSSL_BUILT_ON); }))) {
            mixin(enumMixinStr_OPENSSL_BUILT_ON);
        }
    }




    static if(!is(typeof(OPENSSL_CFLAGS))) {
        private enum enumMixinStr_OPENSSL_CFLAGS = `enum OPENSSL_CFLAGS = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_OPENSSL_CFLAGS); }))) {
            mixin(enumMixinStr_OPENSSL_CFLAGS);
        }
    }




    static if(!is(typeof(OPENSSL_VERSION))) {
        private enum enumMixinStr_OPENSSL_VERSION = `enum OPENSSL_VERSION = 0;`;
        static if(is(typeof({ mixin(enumMixinStr_OPENSSL_VERSION); }))) {
            mixin(enumMixinStr_OPENSSL_VERSION);
        }
    }
    static if(!is(typeof(CRYPTO_EX_INDEX__COUNT))) {
        private enum enumMixinStr_CRYPTO_EX_INDEX__COUNT = `enum CRYPTO_EX_INDEX__COUNT = 16;`;
        static if(is(typeof({ mixin(enumMixinStr_CRYPTO_EX_INDEX__COUNT); }))) {
            mixin(enumMixinStr_CRYPTO_EX_INDEX__COUNT);
        }
    }




    static if(!is(typeof(CRYPTO_EX_INDEX_DRBG))) {
        private enum enumMixinStr_CRYPTO_EX_INDEX_DRBG = `enum CRYPTO_EX_INDEX_DRBG = 15;`;
        static if(is(typeof({ mixin(enumMixinStr_CRYPTO_EX_INDEX_DRBG); }))) {
            mixin(enumMixinStr_CRYPTO_EX_INDEX_DRBG);
        }
    }




    static if(!is(typeof(CRYPTO_EX_INDEX_UI_METHOD))) {
        private enum enumMixinStr_CRYPTO_EX_INDEX_UI_METHOD = `enum CRYPTO_EX_INDEX_UI_METHOD = 14;`;
        static if(is(typeof({ mixin(enumMixinStr_CRYPTO_EX_INDEX_UI_METHOD); }))) {
            mixin(enumMixinStr_CRYPTO_EX_INDEX_UI_METHOD);
        }
    }




    static if(!is(typeof(CRYPTO_EX_INDEX_APP))) {
        private enum enumMixinStr_CRYPTO_EX_INDEX_APP = `enum CRYPTO_EX_INDEX_APP = 13;`;
        static if(is(typeof({ mixin(enumMixinStr_CRYPTO_EX_INDEX_APP); }))) {
            mixin(enumMixinStr_CRYPTO_EX_INDEX_APP);
        }
    }




    static if(!is(typeof(CRYPTO_EX_INDEX_BIO))) {
        private enum enumMixinStr_CRYPTO_EX_INDEX_BIO = `enum CRYPTO_EX_INDEX_BIO = 12;`;
        static if(is(typeof({ mixin(enumMixinStr_CRYPTO_EX_INDEX_BIO); }))) {
            mixin(enumMixinStr_CRYPTO_EX_INDEX_BIO);
        }
    }




    static if(!is(typeof(CRYPTO_EX_INDEX_UI))) {
        private enum enumMixinStr_CRYPTO_EX_INDEX_UI = `enum CRYPTO_EX_INDEX_UI = 11;`;
        static if(is(typeof({ mixin(enumMixinStr_CRYPTO_EX_INDEX_UI); }))) {
            mixin(enumMixinStr_CRYPTO_EX_INDEX_UI);
        }
    }




    static if(!is(typeof(CRYPTO_EX_INDEX_ENGINE))) {
        private enum enumMixinStr_CRYPTO_EX_INDEX_ENGINE = `enum CRYPTO_EX_INDEX_ENGINE = 10;`;
        static if(is(typeof({ mixin(enumMixinStr_CRYPTO_EX_INDEX_ENGINE); }))) {
            mixin(enumMixinStr_CRYPTO_EX_INDEX_ENGINE);
        }
    }




    static if(!is(typeof(CRYPTO_EX_INDEX_RSA))) {
        private enum enumMixinStr_CRYPTO_EX_INDEX_RSA = `enum CRYPTO_EX_INDEX_RSA = 9;`;
        static if(is(typeof({ mixin(enumMixinStr_CRYPTO_EX_INDEX_RSA); }))) {
            mixin(enumMixinStr_CRYPTO_EX_INDEX_RSA);
        }
    }




    static if(!is(typeof(CRYPTO_EX_INDEX_EC_KEY))) {
        private enum enumMixinStr_CRYPTO_EX_INDEX_EC_KEY = `enum CRYPTO_EX_INDEX_EC_KEY = 8;`;
        static if(is(typeof({ mixin(enumMixinStr_CRYPTO_EX_INDEX_EC_KEY); }))) {
            mixin(enumMixinStr_CRYPTO_EX_INDEX_EC_KEY);
        }
    }




    static if(!is(typeof(CRYPTO_EX_INDEX_DSA))) {
        private enum enumMixinStr_CRYPTO_EX_INDEX_DSA = `enum CRYPTO_EX_INDEX_DSA = 7;`;
        static if(is(typeof({ mixin(enumMixinStr_CRYPTO_EX_INDEX_DSA); }))) {
            mixin(enumMixinStr_CRYPTO_EX_INDEX_DSA);
        }
    }




    static if(!is(typeof(CRYPTO_EX_INDEX_DH))) {
        private enum enumMixinStr_CRYPTO_EX_INDEX_DH = `enum CRYPTO_EX_INDEX_DH = 6;`;
        static if(is(typeof({ mixin(enumMixinStr_CRYPTO_EX_INDEX_DH); }))) {
            mixin(enumMixinStr_CRYPTO_EX_INDEX_DH);
        }
    }




    static if(!is(typeof(EVP_PBE_TYPE_OUTER))) {
        private enum enumMixinStr_EVP_PBE_TYPE_OUTER = `enum EVP_PBE_TYPE_OUTER = 0x0;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_PBE_TYPE_OUTER); }))) {
            mixin(enumMixinStr_EVP_PBE_TYPE_OUTER);
        }
    }




    static if(!is(typeof(EVP_PBE_TYPE_PRF))) {
        private enum enumMixinStr_EVP_PBE_TYPE_PRF = `enum EVP_PBE_TYPE_PRF = 0x1;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_PBE_TYPE_PRF); }))) {
            mixin(enumMixinStr_EVP_PBE_TYPE_PRF);
        }
    }




    static if(!is(typeof(EVP_PBE_TYPE_KDF))) {
        private enum enumMixinStr_EVP_PBE_TYPE_KDF = `enum EVP_PBE_TYPE_KDF = 0x2;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_PBE_TYPE_KDF); }))) {
            mixin(enumMixinStr_EVP_PBE_TYPE_KDF);
        }
    }




    static if(!is(typeof(CRYPTO_EX_INDEX_X509_STORE_CTX))) {
        private enum enumMixinStr_CRYPTO_EX_INDEX_X509_STORE_CTX = `enum CRYPTO_EX_INDEX_X509_STORE_CTX = 5;`;
        static if(is(typeof({ mixin(enumMixinStr_CRYPTO_EX_INDEX_X509_STORE_CTX); }))) {
            mixin(enumMixinStr_CRYPTO_EX_INDEX_X509_STORE_CTX);
        }
    }




    static if(!is(typeof(CRYPTO_EX_INDEX_X509_STORE))) {
        private enum enumMixinStr_CRYPTO_EX_INDEX_X509_STORE = `enum CRYPTO_EX_INDEX_X509_STORE = 4;`;
        static if(is(typeof({ mixin(enumMixinStr_CRYPTO_EX_INDEX_X509_STORE); }))) {
            mixin(enumMixinStr_CRYPTO_EX_INDEX_X509_STORE);
        }
    }




    static if(!is(typeof(CRYPTO_EX_INDEX_X509))) {
        private enum enumMixinStr_CRYPTO_EX_INDEX_X509 = `enum CRYPTO_EX_INDEX_X509 = 3;`;
        static if(is(typeof({ mixin(enumMixinStr_CRYPTO_EX_INDEX_X509); }))) {
            mixin(enumMixinStr_CRYPTO_EX_INDEX_X509);
        }
    }




    static if(!is(typeof(CRYPTO_EX_INDEX_SSL_SESSION))) {
        private enum enumMixinStr_CRYPTO_EX_INDEX_SSL_SESSION = `enum CRYPTO_EX_INDEX_SSL_SESSION = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_CRYPTO_EX_INDEX_SSL_SESSION); }))) {
            mixin(enumMixinStr_CRYPTO_EX_INDEX_SSL_SESSION);
        }
    }




    static if(!is(typeof(CRYPTO_EX_INDEX_SSL_CTX))) {
        private enum enumMixinStr_CRYPTO_EX_INDEX_SSL_CTX = `enum CRYPTO_EX_INDEX_SSL_CTX = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_CRYPTO_EX_INDEX_SSL_CTX); }))) {
            mixin(enumMixinStr_CRYPTO_EX_INDEX_SSL_CTX);
        }
    }




    static if(!is(typeof(ASN1_PKEY_ALIAS))) {
        private enum enumMixinStr_ASN1_PKEY_ALIAS = `enum ASN1_PKEY_ALIAS = 0x1;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_PKEY_ALIAS); }))) {
            mixin(enumMixinStr_ASN1_PKEY_ALIAS);
        }
    }




    static if(!is(typeof(ASN1_PKEY_DYNAMIC))) {
        private enum enumMixinStr_ASN1_PKEY_DYNAMIC = `enum ASN1_PKEY_DYNAMIC = 0x2;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_PKEY_DYNAMIC); }))) {
            mixin(enumMixinStr_ASN1_PKEY_DYNAMIC);
        }
    }




    static if(!is(typeof(ASN1_PKEY_SIGPARAM_NULL))) {
        private enum enumMixinStr_ASN1_PKEY_SIGPARAM_NULL = `enum ASN1_PKEY_SIGPARAM_NULL = 0x4;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_PKEY_SIGPARAM_NULL); }))) {
            mixin(enumMixinStr_ASN1_PKEY_SIGPARAM_NULL);
        }
    }




    static if(!is(typeof(ASN1_PKEY_CTRL_PKCS7_SIGN))) {
        private enum enumMixinStr_ASN1_PKEY_CTRL_PKCS7_SIGN = `enum ASN1_PKEY_CTRL_PKCS7_SIGN = 0x1;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_PKEY_CTRL_PKCS7_SIGN); }))) {
            mixin(enumMixinStr_ASN1_PKEY_CTRL_PKCS7_SIGN);
        }
    }




    static if(!is(typeof(ASN1_PKEY_CTRL_PKCS7_ENCRYPT))) {
        private enum enumMixinStr_ASN1_PKEY_CTRL_PKCS7_ENCRYPT = `enum ASN1_PKEY_CTRL_PKCS7_ENCRYPT = 0x2;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_PKEY_CTRL_PKCS7_ENCRYPT); }))) {
            mixin(enumMixinStr_ASN1_PKEY_CTRL_PKCS7_ENCRYPT);
        }
    }




    static if(!is(typeof(ASN1_PKEY_CTRL_DEFAULT_MD_NID))) {
        private enum enumMixinStr_ASN1_PKEY_CTRL_DEFAULT_MD_NID = `enum ASN1_PKEY_CTRL_DEFAULT_MD_NID = 0x3;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_PKEY_CTRL_DEFAULT_MD_NID); }))) {
            mixin(enumMixinStr_ASN1_PKEY_CTRL_DEFAULT_MD_NID);
        }
    }




    static if(!is(typeof(ASN1_PKEY_CTRL_CMS_SIGN))) {
        private enum enumMixinStr_ASN1_PKEY_CTRL_CMS_SIGN = `enum ASN1_PKEY_CTRL_CMS_SIGN = 0x5;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_PKEY_CTRL_CMS_SIGN); }))) {
            mixin(enumMixinStr_ASN1_PKEY_CTRL_CMS_SIGN);
        }
    }




    static if(!is(typeof(ASN1_PKEY_CTRL_CMS_ENVELOPE))) {
        private enum enumMixinStr_ASN1_PKEY_CTRL_CMS_ENVELOPE = `enum ASN1_PKEY_CTRL_CMS_ENVELOPE = 0x7;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_PKEY_CTRL_CMS_ENVELOPE); }))) {
            mixin(enumMixinStr_ASN1_PKEY_CTRL_CMS_ENVELOPE);
        }
    }




    static if(!is(typeof(ASN1_PKEY_CTRL_CMS_RI_TYPE))) {
        private enum enumMixinStr_ASN1_PKEY_CTRL_CMS_RI_TYPE = `enum ASN1_PKEY_CTRL_CMS_RI_TYPE = 0x8;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_PKEY_CTRL_CMS_RI_TYPE); }))) {
            mixin(enumMixinStr_ASN1_PKEY_CTRL_CMS_RI_TYPE);
        }
    }




    static if(!is(typeof(ASN1_PKEY_CTRL_SET1_TLS_ENCPT))) {
        private enum enumMixinStr_ASN1_PKEY_CTRL_SET1_TLS_ENCPT = `enum ASN1_PKEY_CTRL_SET1_TLS_ENCPT = 0x9;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_PKEY_CTRL_SET1_TLS_ENCPT); }))) {
            mixin(enumMixinStr_ASN1_PKEY_CTRL_SET1_TLS_ENCPT);
        }
    }




    static if(!is(typeof(ASN1_PKEY_CTRL_GET1_TLS_ENCPT))) {
        private enum enumMixinStr_ASN1_PKEY_CTRL_GET1_TLS_ENCPT = `enum ASN1_PKEY_CTRL_GET1_TLS_ENCPT = 0xa;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_PKEY_CTRL_GET1_TLS_ENCPT); }))) {
            mixin(enumMixinStr_ASN1_PKEY_CTRL_GET1_TLS_ENCPT);
        }
    }




    static if(!is(typeof(CRYPTO_EX_INDEX_SSL))) {
        private enum enumMixinStr_CRYPTO_EX_INDEX_SSL = `enum CRYPTO_EX_INDEX_SSL = 0;`;
        static if(is(typeof({ mixin(enumMixinStr_CRYPTO_EX_INDEX_SSL); }))) {
            mixin(enumMixinStr_CRYPTO_EX_INDEX_SSL);
        }
    }




    static if(!is(typeof(CRYPTO_MEM_CHECK_DISABLE))) {
        private enum enumMixinStr_CRYPTO_MEM_CHECK_DISABLE = `enum CRYPTO_MEM_CHECK_DISABLE = 0x3;`;
        static if(is(typeof({ mixin(enumMixinStr_CRYPTO_MEM_CHECK_DISABLE); }))) {
            mixin(enumMixinStr_CRYPTO_MEM_CHECK_DISABLE);
        }
    }




    static if(!is(typeof(CRYPTO_MEM_CHECK_ENABLE))) {
        private enum enumMixinStr_CRYPTO_MEM_CHECK_ENABLE = `enum CRYPTO_MEM_CHECK_ENABLE = 0x2;`;
        static if(is(typeof({ mixin(enumMixinStr_CRYPTO_MEM_CHECK_ENABLE); }))) {
            mixin(enumMixinStr_CRYPTO_MEM_CHECK_ENABLE);
        }
    }




    static if(!is(typeof(CRYPTO_MEM_CHECK_ON))) {
        private enum enumMixinStr_CRYPTO_MEM_CHECK_ON = `enum CRYPTO_MEM_CHECK_ON = 0x1;`;
        static if(is(typeof({ mixin(enumMixinStr_CRYPTO_MEM_CHECK_ON); }))) {
            mixin(enumMixinStr_CRYPTO_MEM_CHECK_ON);
        }
    }




    static if(!is(typeof(CRYPTO_MEM_CHECK_OFF))) {
        private enum enumMixinStr_CRYPTO_MEM_CHECK_OFF = `enum CRYPTO_MEM_CHECK_OFF = 0x0;`;
        static if(is(typeof({ mixin(enumMixinStr_CRYPTO_MEM_CHECK_OFF); }))) {
            mixin(enumMixinStr_CRYPTO_MEM_CHECK_OFF);
        }
    }




    static if(!is(typeof(SSLEAY_DIR))) {
        private enum enumMixinStr_SSLEAY_DIR = `enum SSLEAY_DIR = 4;`;
        static if(is(typeof({ mixin(enumMixinStr_SSLEAY_DIR); }))) {
            mixin(enumMixinStr_SSLEAY_DIR);
        }
    }




    static if(!is(typeof(SSLEAY_PLATFORM))) {
        private enum enumMixinStr_SSLEAY_PLATFORM = `enum SSLEAY_PLATFORM = 3;`;
        static if(is(typeof({ mixin(enumMixinStr_SSLEAY_PLATFORM); }))) {
            mixin(enumMixinStr_SSLEAY_PLATFORM);
        }
    }




    static if(!is(typeof(SSLEAY_BUILT_ON))) {
        private enum enumMixinStr_SSLEAY_BUILT_ON = `enum SSLEAY_BUILT_ON = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_SSLEAY_BUILT_ON); }))) {
            mixin(enumMixinStr_SSLEAY_BUILT_ON);
        }
    }




    static if(!is(typeof(SSLEAY_CFLAGS))) {
        private enum enumMixinStr_SSLEAY_CFLAGS = `enum SSLEAY_CFLAGS = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_SSLEAY_CFLAGS); }))) {
            mixin(enumMixinStr_SSLEAY_CFLAGS);
        }
    }




    static if(!is(typeof(SSLEAY_VERSION))) {
        private enum enumMixinStr_SSLEAY_VERSION = `enum SSLEAY_VERSION = 0;`;
        static if(is(typeof({ mixin(enumMixinStr_SSLEAY_VERSION); }))) {
            mixin(enumMixinStr_SSLEAY_VERSION);
        }
    }




    static if(!is(typeof(SSLEAY_VERSION_NUMBER))) {
        private enum enumMixinStr_SSLEAY_VERSION_NUMBER = `enum SSLEAY_VERSION_NUMBER = OPENSSL_VERSION_NUMBER;`;
        static if(is(typeof({ mixin(enumMixinStr_SSLEAY_VERSION_NUMBER); }))) {
            mixin(enumMixinStr_SSLEAY_VERSION_NUMBER);
        }
    }




    static if(!is(typeof(SSLeay_version))) {
        private enum enumMixinStr_SSLeay_version = `enum SSLeay_version = OpenSSL_version;`;
        static if(is(typeof({ mixin(enumMixinStr_SSLeay_version); }))) {
            mixin(enumMixinStr_SSLeay_version);
        }
    }




    static if(!is(typeof(SSLeay))) {
        private enum enumMixinStr_SSLeay = `enum SSLeay = OpenSSL_version_num;`;
        static if(is(typeof({ mixin(enumMixinStr_SSLeay); }))) {
            mixin(enumMixinStr_SSLeay);
        }
    }






    static if(!is(typeof(CONF_R_VARIABLE_HAS_NO_VALUE))) {
        private enum enumMixinStr_CONF_R_VARIABLE_HAS_NO_VALUE = `enum CONF_R_VARIABLE_HAS_NO_VALUE = 104;`;
        static if(is(typeof({ mixin(enumMixinStr_CONF_R_VARIABLE_HAS_NO_VALUE); }))) {
            mixin(enumMixinStr_CONF_R_VARIABLE_HAS_NO_VALUE);
        }
    }




    static if(!is(typeof(CONF_R_VARIABLE_EXPANSION_TOO_LONG))) {
        private enum enumMixinStr_CONF_R_VARIABLE_EXPANSION_TOO_LONG = `enum CONF_R_VARIABLE_EXPANSION_TOO_LONG = 116;`;
        static if(is(typeof({ mixin(enumMixinStr_CONF_R_VARIABLE_EXPANSION_TOO_LONG); }))) {
            mixin(enumMixinStr_CONF_R_VARIABLE_EXPANSION_TOO_LONG);
        }
    }




    static if(!is(typeof(CONF_R_UNKNOWN_MODULE_NAME))) {
        private enum enumMixinStr_CONF_R_UNKNOWN_MODULE_NAME = `enum CONF_R_UNKNOWN_MODULE_NAME = 113;`;
        static if(is(typeof({ mixin(enumMixinStr_CONF_R_UNKNOWN_MODULE_NAME); }))) {
            mixin(enumMixinStr_CONF_R_UNKNOWN_MODULE_NAME);
        }
    }




    static if(!is(typeof(CONF_R_UNABLE_TO_CREATE_NEW_SECTION))) {
        private enum enumMixinStr_CONF_R_UNABLE_TO_CREATE_NEW_SECTION = `enum CONF_R_UNABLE_TO_CREATE_NEW_SECTION = 103;`;
        static if(is(typeof({ mixin(enumMixinStr_CONF_R_UNABLE_TO_CREATE_NEW_SECTION); }))) {
            mixin(enumMixinStr_CONF_R_UNABLE_TO_CREATE_NEW_SECTION);
        }
    }




    static if(!is(typeof(CONF_R_SSL_SECTION_NOT_FOUND))) {
        private enum enumMixinStr_CONF_R_SSL_SECTION_NOT_FOUND = `enum CONF_R_SSL_SECTION_NOT_FOUND = 120;`;
        static if(is(typeof({ mixin(enumMixinStr_CONF_R_SSL_SECTION_NOT_FOUND); }))) {
            mixin(enumMixinStr_CONF_R_SSL_SECTION_NOT_FOUND);
        }
    }




    static if(!is(typeof(CONF_R_SSL_SECTION_EMPTY))) {
        private enum enumMixinStr_CONF_R_SSL_SECTION_EMPTY = `enum CONF_R_SSL_SECTION_EMPTY = 119;`;
        static if(is(typeof({ mixin(enumMixinStr_CONF_R_SSL_SECTION_EMPTY); }))) {
            mixin(enumMixinStr_CONF_R_SSL_SECTION_EMPTY);
        }
    }




    static if(!is(typeof(CONF_R_SSL_COMMAND_SECTION_NOT_FOUND))) {
        private enum enumMixinStr_CONF_R_SSL_COMMAND_SECTION_NOT_FOUND = `enum CONF_R_SSL_COMMAND_SECTION_NOT_FOUND = 118;`;
        static if(is(typeof({ mixin(enumMixinStr_CONF_R_SSL_COMMAND_SECTION_NOT_FOUND); }))) {
            mixin(enumMixinStr_CONF_R_SSL_COMMAND_SECTION_NOT_FOUND);
        }
    }




    static if(!is(typeof(CONF_R_SSL_COMMAND_SECTION_EMPTY))) {
        private enum enumMixinStr_CONF_R_SSL_COMMAND_SECTION_EMPTY = `enum CONF_R_SSL_COMMAND_SECTION_EMPTY = 117;`;
        static if(is(typeof({ mixin(enumMixinStr_CONF_R_SSL_COMMAND_SECTION_EMPTY); }))) {
            mixin(enumMixinStr_CONF_R_SSL_COMMAND_SECTION_EMPTY);
        }
    }




    static if(!is(typeof(CONF_R_RECURSIVE_DIRECTORY_INCLUDE))) {
        private enum enumMixinStr_CONF_R_RECURSIVE_DIRECTORY_INCLUDE = `enum CONF_R_RECURSIVE_DIRECTORY_INCLUDE = 111;`;
        static if(is(typeof({ mixin(enumMixinStr_CONF_R_RECURSIVE_DIRECTORY_INCLUDE); }))) {
            mixin(enumMixinStr_CONF_R_RECURSIVE_DIRECTORY_INCLUDE);
        }
    }




    static if(!is(typeof(CONF_R_NUMBER_TOO_LARGE))) {
        private enum enumMixinStr_CONF_R_NUMBER_TOO_LARGE = `enum CONF_R_NUMBER_TOO_LARGE = 121;`;
        static if(is(typeof({ mixin(enumMixinStr_CONF_R_NUMBER_TOO_LARGE); }))) {
            mixin(enumMixinStr_CONF_R_NUMBER_TOO_LARGE);
        }
    }




    static if(!is(typeof(CONF_R_NO_VALUE))) {
        private enum enumMixinStr_CONF_R_NO_VALUE = `enum CONF_R_NO_VALUE = 108;`;
        static if(is(typeof({ mixin(enumMixinStr_CONF_R_NO_VALUE); }))) {
            mixin(enumMixinStr_CONF_R_NO_VALUE);
        }
    }




    static if(!is(typeof(CONF_R_NO_SUCH_FILE))) {
        private enum enumMixinStr_CONF_R_NO_SUCH_FILE = `enum CONF_R_NO_SUCH_FILE = 114;`;
        static if(is(typeof({ mixin(enumMixinStr_CONF_R_NO_SUCH_FILE); }))) {
            mixin(enumMixinStr_CONF_R_NO_SUCH_FILE);
        }
    }




    static if(!is(typeof(EVP_PKEY_OP_UNDEFINED))) {
        private enum enumMixinStr_EVP_PKEY_OP_UNDEFINED = `enum EVP_PKEY_OP_UNDEFINED = 0;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_PKEY_OP_UNDEFINED); }))) {
            mixin(enumMixinStr_EVP_PKEY_OP_UNDEFINED);
        }
    }




    static if(!is(typeof(EVP_PKEY_OP_PARAMGEN))) {
        private enum enumMixinStr_EVP_PKEY_OP_PARAMGEN = `enum EVP_PKEY_OP_PARAMGEN = ( 1 << 1 );`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_PKEY_OP_PARAMGEN); }))) {
            mixin(enumMixinStr_EVP_PKEY_OP_PARAMGEN);
        }
    }




    static if(!is(typeof(EVP_PKEY_OP_KEYGEN))) {
        private enum enumMixinStr_EVP_PKEY_OP_KEYGEN = `enum EVP_PKEY_OP_KEYGEN = ( 1 << 2 );`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_PKEY_OP_KEYGEN); }))) {
            mixin(enumMixinStr_EVP_PKEY_OP_KEYGEN);
        }
    }




    static if(!is(typeof(EVP_PKEY_OP_SIGN))) {
        private enum enumMixinStr_EVP_PKEY_OP_SIGN = `enum EVP_PKEY_OP_SIGN = ( 1 << 3 );`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_PKEY_OP_SIGN); }))) {
            mixin(enumMixinStr_EVP_PKEY_OP_SIGN);
        }
    }




    static if(!is(typeof(EVP_PKEY_OP_VERIFY))) {
        private enum enumMixinStr_EVP_PKEY_OP_VERIFY = `enum EVP_PKEY_OP_VERIFY = ( 1 << 4 );`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_PKEY_OP_VERIFY); }))) {
            mixin(enumMixinStr_EVP_PKEY_OP_VERIFY);
        }
    }




    static if(!is(typeof(EVP_PKEY_OP_VERIFYRECOVER))) {
        private enum enumMixinStr_EVP_PKEY_OP_VERIFYRECOVER = `enum EVP_PKEY_OP_VERIFYRECOVER = ( 1 << 5 );`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_PKEY_OP_VERIFYRECOVER); }))) {
            mixin(enumMixinStr_EVP_PKEY_OP_VERIFYRECOVER);
        }
    }




    static if(!is(typeof(EVP_PKEY_OP_SIGNCTX))) {
        private enum enumMixinStr_EVP_PKEY_OP_SIGNCTX = `enum EVP_PKEY_OP_SIGNCTX = ( 1 << 6 );`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_PKEY_OP_SIGNCTX); }))) {
            mixin(enumMixinStr_EVP_PKEY_OP_SIGNCTX);
        }
    }




    static if(!is(typeof(EVP_PKEY_OP_VERIFYCTX))) {
        private enum enumMixinStr_EVP_PKEY_OP_VERIFYCTX = `enum EVP_PKEY_OP_VERIFYCTX = ( 1 << 7 );`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_PKEY_OP_VERIFYCTX); }))) {
            mixin(enumMixinStr_EVP_PKEY_OP_VERIFYCTX);
        }
    }




    static if(!is(typeof(EVP_PKEY_OP_ENCRYPT))) {
        private enum enumMixinStr_EVP_PKEY_OP_ENCRYPT = `enum EVP_PKEY_OP_ENCRYPT = ( 1 << 8 );`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_PKEY_OP_ENCRYPT); }))) {
            mixin(enumMixinStr_EVP_PKEY_OP_ENCRYPT);
        }
    }




    static if(!is(typeof(EVP_PKEY_OP_DECRYPT))) {
        private enum enumMixinStr_EVP_PKEY_OP_DECRYPT = `enum EVP_PKEY_OP_DECRYPT = ( 1 << 9 );`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_PKEY_OP_DECRYPT); }))) {
            mixin(enumMixinStr_EVP_PKEY_OP_DECRYPT);
        }
    }




    static if(!is(typeof(EVP_PKEY_OP_DERIVE))) {
        private enum enumMixinStr_EVP_PKEY_OP_DERIVE = `enum EVP_PKEY_OP_DERIVE = ( 1 << 10 );`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_PKEY_OP_DERIVE); }))) {
            mixin(enumMixinStr_EVP_PKEY_OP_DERIVE);
        }
    }




    static if(!is(typeof(EVP_PKEY_OP_TYPE_SIG))) {
        private enum enumMixinStr_EVP_PKEY_OP_TYPE_SIG = `enum EVP_PKEY_OP_TYPE_SIG = ( ( 1 << 3 ) | ( 1 << 4 ) | ( 1 << 5 ) | ( 1 << 6 ) | ( 1 << 7 ) );`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_PKEY_OP_TYPE_SIG); }))) {
            mixin(enumMixinStr_EVP_PKEY_OP_TYPE_SIG);
        }
    }




    static if(!is(typeof(EVP_PKEY_OP_TYPE_CRYPT))) {
        private enum enumMixinStr_EVP_PKEY_OP_TYPE_CRYPT = `enum EVP_PKEY_OP_TYPE_CRYPT = ( ( 1 << 8 ) | ( 1 << 9 ) );`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_PKEY_OP_TYPE_CRYPT); }))) {
            mixin(enumMixinStr_EVP_PKEY_OP_TYPE_CRYPT);
        }
    }




    static if(!is(typeof(EVP_PKEY_OP_TYPE_NOGEN))) {
        private enum enumMixinStr_EVP_PKEY_OP_TYPE_NOGEN = `enum EVP_PKEY_OP_TYPE_NOGEN = ( ( ( 1 << 3 ) | ( 1 << 4 ) | ( 1 << 5 ) | ( 1 << 6 ) | ( 1 << 7 ) ) | ( ( 1 << 8 ) | ( 1 << 9 ) ) | ( 1 << 10 ) );`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_PKEY_OP_TYPE_NOGEN); }))) {
            mixin(enumMixinStr_EVP_PKEY_OP_TYPE_NOGEN);
        }
    }




    static if(!is(typeof(EVP_PKEY_OP_TYPE_GEN))) {
        private enum enumMixinStr_EVP_PKEY_OP_TYPE_GEN = `enum EVP_PKEY_OP_TYPE_GEN = ( ( 1 << 1 ) | ( 1 << 2 ) );`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_PKEY_OP_TYPE_GEN); }))) {
            mixin(enumMixinStr_EVP_PKEY_OP_TYPE_GEN);
        }
    }
    static if(!is(typeof(EVP_PKEY_CTRL_MD))) {
        private enum enumMixinStr_EVP_PKEY_CTRL_MD = `enum EVP_PKEY_CTRL_MD = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_PKEY_CTRL_MD); }))) {
            mixin(enumMixinStr_EVP_PKEY_CTRL_MD);
        }
    }




    static if(!is(typeof(EVP_PKEY_CTRL_PEER_KEY))) {
        private enum enumMixinStr_EVP_PKEY_CTRL_PEER_KEY = `enum EVP_PKEY_CTRL_PEER_KEY = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_PKEY_CTRL_PEER_KEY); }))) {
            mixin(enumMixinStr_EVP_PKEY_CTRL_PEER_KEY);
        }
    }




    static if(!is(typeof(EVP_PKEY_CTRL_PKCS7_ENCRYPT))) {
        private enum enumMixinStr_EVP_PKEY_CTRL_PKCS7_ENCRYPT = `enum EVP_PKEY_CTRL_PKCS7_ENCRYPT = 3;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_PKEY_CTRL_PKCS7_ENCRYPT); }))) {
            mixin(enumMixinStr_EVP_PKEY_CTRL_PKCS7_ENCRYPT);
        }
    }




    static if(!is(typeof(EVP_PKEY_CTRL_PKCS7_DECRYPT))) {
        private enum enumMixinStr_EVP_PKEY_CTRL_PKCS7_DECRYPT = `enum EVP_PKEY_CTRL_PKCS7_DECRYPT = 4;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_PKEY_CTRL_PKCS7_DECRYPT); }))) {
            mixin(enumMixinStr_EVP_PKEY_CTRL_PKCS7_DECRYPT);
        }
    }




    static if(!is(typeof(EVP_PKEY_CTRL_PKCS7_SIGN))) {
        private enum enumMixinStr_EVP_PKEY_CTRL_PKCS7_SIGN = `enum EVP_PKEY_CTRL_PKCS7_SIGN = 5;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_PKEY_CTRL_PKCS7_SIGN); }))) {
            mixin(enumMixinStr_EVP_PKEY_CTRL_PKCS7_SIGN);
        }
    }




    static if(!is(typeof(EVP_PKEY_CTRL_SET_MAC_KEY))) {
        private enum enumMixinStr_EVP_PKEY_CTRL_SET_MAC_KEY = `enum EVP_PKEY_CTRL_SET_MAC_KEY = 6;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_PKEY_CTRL_SET_MAC_KEY); }))) {
            mixin(enumMixinStr_EVP_PKEY_CTRL_SET_MAC_KEY);
        }
    }




    static if(!is(typeof(EVP_PKEY_CTRL_DIGESTINIT))) {
        private enum enumMixinStr_EVP_PKEY_CTRL_DIGESTINIT = `enum EVP_PKEY_CTRL_DIGESTINIT = 7;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_PKEY_CTRL_DIGESTINIT); }))) {
            mixin(enumMixinStr_EVP_PKEY_CTRL_DIGESTINIT);
        }
    }




    static if(!is(typeof(EVP_PKEY_CTRL_SET_IV))) {
        private enum enumMixinStr_EVP_PKEY_CTRL_SET_IV = `enum EVP_PKEY_CTRL_SET_IV = 8;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_PKEY_CTRL_SET_IV); }))) {
            mixin(enumMixinStr_EVP_PKEY_CTRL_SET_IV);
        }
    }




    static if(!is(typeof(EVP_PKEY_CTRL_CMS_ENCRYPT))) {
        private enum enumMixinStr_EVP_PKEY_CTRL_CMS_ENCRYPT = `enum EVP_PKEY_CTRL_CMS_ENCRYPT = 9;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_PKEY_CTRL_CMS_ENCRYPT); }))) {
            mixin(enumMixinStr_EVP_PKEY_CTRL_CMS_ENCRYPT);
        }
    }




    static if(!is(typeof(EVP_PKEY_CTRL_CMS_DECRYPT))) {
        private enum enumMixinStr_EVP_PKEY_CTRL_CMS_DECRYPT = `enum EVP_PKEY_CTRL_CMS_DECRYPT = 10;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_PKEY_CTRL_CMS_DECRYPT); }))) {
            mixin(enumMixinStr_EVP_PKEY_CTRL_CMS_DECRYPT);
        }
    }




    static if(!is(typeof(EVP_PKEY_CTRL_CMS_SIGN))) {
        private enum enumMixinStr_EVP_PKEY_CTRL_CMS_SIGN = `enum EVP_PKEY_CTRL_CMS_SIGN = 11;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_PKEY_CTRL_CMS_SIGN); }))) {
            mixin(enumMixinStr_EVP_PKEY_CTRL_CMS_SIGN);
        }
    }




    static if(!is(typeof(EVP_PKEY_CTRL_CIPHER))) {
        private enum enumMixinStr_EVP_PKEY_CTRL_CIPHER = `enum EVP_PKEY_CTRL_CIPHER = 12;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_PKEY_CTRL_CIPHER); }))) {
            mixin(enumMixinStr_EVP_PKEY_CTRL_CIPHER);
        }
    }




    static if(!is(typeof(EVP_PKEY_CTRL_GET_MD))) {
        private enum enumMixinStr_EVP_PKEY_CTRL_GET_MD = `enum EVP_PKEY_CTRL_GET_MD = 13;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_PKEY_CTRL_GET_MD); }))) {
            mixin(enumMixinStr_EVP_PKEY_CTRL_GET_MD);
        }
    }




    static if(!is(typeof(EVP_PKEY_CTRL_SET_DIGEST_SIZE))) {
        private enum enumMixinStr_EVP_PKEY_CTRL_SET_DIGEST_SIZE = `enum EVP_PKEY_CTRL_SET_DIGEST_SIZE = 14;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_PKEY_CTRL_SET_DIGEST_SIZE); }))) {
            mixin(enumMixinStr_EVP_PKEY_CTRL_SET_DIGEST_SIZE);
        }
    }




    static if(!is(typeof(EVP_PKEY_ALG_CTRL))) {
        private enum enumMixinStr_EVP_PKEY_ALG_CTRL = `enum EVP_PKEY_ALG_CTRL = 0x1000;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_PKEY_ALG_CTRL); }))) {
            mixin(enumMixinStr_EVP_PKEY_ALG_CTRL);
        }
    }




    static if(!is(typeof(EVP_PKEY_FLAG_AUTOARGLEN))) {
        private enum enumMixinStr_EVP_PKEY_FLAG_AUTOARGLEN = `enum EVP_PKEY_FLAG_AUTOARGLEN = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_PKEY_FLAG_AUTOARGLEN); }))) {
            mixin(enumMixinStr_EVP_PKEY_FLAG_AUTOARGLEN);
        }
    }




    static if(!is(typeof(EVP_PKEY_FLAG_SIGCTX_CUSTOM))) {
        private enum enumMixinStr_EVP_PKEY_FLAG_SIGCTX_CUSTOM = `enum EVP_PKEY_FLAG_SIGCTX_CUSTOM = 4;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_PKEY_FLAG_SIGCTX_CUSTOM); }))) {
            mixin(enumMixinStr_EVP_PKEY_FLAG_SIGCTX_CUSTOM);
        }
    }




    static if(!is(typeof(CONF_R_NO_SECTION))) {
        private enum enumMixinStr_CONF_R_NO_SECTION = `enum CONF_R_NO_SECTION = 107;`;
        static if(is(typeof({ mixin(enumMixinStr_CONF_R_NO_SECTION); }))) {
            mixin(enumMixinStr_CONF_R_NO_SECTION);
        }
    }




    static if(!is(typeof(CONF_R_NO_CONF_OR_ENVIRONMENT_VARIABLE))) {
        private enum enumMixinStr_CONF_R_NO_CONF_OR_ENVIRONMENT_VARIABLE = `enum CONF_R_NO_CONF_OR_ENVIRONMENT_VARIABLE = 106;`;
        static if(is(typeof({ mixin(enumMixinStr_CONF_R_NO_CONF_OR_ENVIRONMENT_VARIABLE); }))) {
            mixin(enumMixinStr_CONF_R_NO_CONF_OR_ENVIRONMENT_VARIABLE);
        }
    }




    static if(!is(typeof(CONF_R_NO_CONF))) {
        private enum enumMixinStr_CONF_R_NO_CONF = `enum CONF_R_NO_CONF = 105;`;
        static if(is(typeof({ mixin(enumMixinStr_CONF_R_NO_CONF); }))) {
            mixin(enumMixinStr_CONF_R_NO_CONF);
        }
    }




    static if(!is(typeof(CONF_R_NO_CLOSE_BRACE))) {
        private enum enumMixinStr_CONF_R_NO_CLOSE_BRACE = `enum CONF_R_NO_CLOSE_BRACE = 102;`;
        static if(is(typeof({ mixin(enumMixinStr_CONF_R_NO_CLOSE_BRACE); }))) {
            mixin(enumMixinStr_CONF_R_NO_CLOSE_BRACE);
        }
    }




    static if(!is(typeof(CONF_R_MODULE_INITIALIZATION_ERROR))) {
        private enum enumMixinStr_CONF_R_MODULE_INITIALIZATION_ERROR = `enum CONF_R_MODULE_INITIALIZATION_ERROR = 109;`;
        static if(is(typeof({ mixin(enumMixinStr_CONF_R_MODULE_INITIALIZATION_ERROR); }))) {
            mixin(enumMixinStr_CONF_R_MODULE_INITIALIZATION_ERROR);
        }
    }




    static if(!is(typeof(CONF_R_MISSING_INIT_FUNCTION))) {
        private enum enumMixinStr_CONF_R_MISSING_INIT_FUNCTION = `enum CONF_R_MISSING_INIT_FUNCTION = 112;`;
        static if(is(typeof({ mixin(enumMixinStr_CONF_R_MISSING_INIT_FUNCTION); }))) {
            mixin(enumMixinStr_CONF_R_MISSING_INIT_FUNCTION);
        }
    }




    static if(!is(typeof(CONF_R_MISSING_EQUAL_SIGN))) {
        private enum enumMixinStr_CONF_R_MISSING_EQUAL_SIGN = `enum CONF_R_MISSING_EQUAL_SIGN = 101;`;
        static if(is(typeof({ mixin(enumMixinStr_CONF_R_MISSING_EQUAL_SIGN); }))) {
            mixin(enumMixinStr_CONF_R_MISSING_EQUAL_SIGN);
        }
    }




    static if(!is(typeof(CONF_R_MISSING_CLOSE_SQUARE_BRACKET))) {
        private enum enumMixinStr_CONF_R_MISSING_CLOSE_SQUARE_BRACKET = `enum CONF_R_MISSING_CLOSE_SQUARE_BRACKET = 100;`;
        static if(is(typeof({ mixin(enumMixinStr_CONF_R_MISSING_CLOSE_SQUARE_BRACKET); }))) {
            mixin(enumMixinStr_CONF_R_MISSING_CLOSE_SQUARE_BRACKET);
        }
    }




    static if(!is(typeof(CONF_R_LIST_CANNOT_BE_NULL))) {
        private enum enumMixinStr_CONF_R_LIST_CANNOT_BE_NULL = `enum CONF_R_LIST_CANNOT_BE_NULL = 115;`;
        static if(is(typeof({ mixin(enumMixinStr_CONF_R_LIST_CANNOT_BE_NULL); }))) {
            mixin(enumMixinStr_CONF_R_LIST_CANNOT_BE_NULL);
        }
    }




    static if(!is(typeof(CONF_R_ERROR_LOADING_DSO))) {
        private enum enumMixinStr_CONF_R_ERROR_LOADING_DSO = `enum CONF_R_ERROR_LOADING_DSO = 110;`;
        static if(is(typeof({ mixin(enumMixinStr_CONF_R_ERROR_LOADING_DSO); }))) {
            mixin(enumMixinStr_CONF_R_ERROR_LOADING_DSO);
        }
    }




    static if(!is(typeof(CONF_F_STR_COPY))) {
        private enum enumMixinStr_CONF_F_STR_COPY = `enum CONF_F_STR_COPY = 101;`;
        static if(is(typeof({ mixin(enumMixinStr_CONF_F_STR_COPY); }))) {
            mixin(enumMixinStr_CONF_F_STR_COPY);
        }
    }




    static if(!is(typeof(CONF_F_SSL_MODULE_INIT))) {
        private enum enumMixinStr_CONF_F_SSL_MODULE_INIT = `enum CONF_F_SSL_MODULE_INIT = 123;`;
        static if(is(typeof({ mixin(enumMixinStr_CONF_F_SSL_MODULE_INIT); }))) {
            mixin(enumMixinStr_CONF_F_SSL_MODULE_INIT);
        }
    }




    static if(!is(typeof(CONF_F_PROCESS_INCLUDE))) {
        private enum enumMixinStr_CONF_F_PROCESS_INCLUDE = `enum CONF_F_PROCESS_INCLUDE = 116;`;
        static if(is(typeof({ mixin(enumMixinStr_CONF_F_PROCESS_INCLUDE); }))) {
            mixin(enumMixinStr_CONF_F_PROCESS_INCLUDE);
        }
    }




    static if(!is(typeof(CONF_F_NCONF_NEW))) {
        private enum enumMixinStr_CONF_F_NCONF_NEW = `enum CONF_F_NCONF_NEW = 111;`;
        static if(is(typeof({ mixin(enumMixinStr_CONF_F_NCONF_NEW); }))) {
            mixin(enumMixinStr_CONF_F_NCONF_NEW);
        }
    }




    static if(!is(typeof(CONF_F_NCONF_LOAD_FP))) {
        private enum enumMixinStr_CONF_F_NCONF_LOAD_FP = `enum CONF_F_NCONF_LOAD_FP = 114;`;
        static if(is(typeof({ mixin(enumMixinStr_CONF_F_NCONF_LOAD_FP); }))) {
            mixin(enumMixinStr_CONF_F_NCONF_LOAD_FP);
        }
    }




    static if(!is(typeof(CONF_F_NCONF_LOAD_BIO))) {
        private enum enumMixinStr_CONF_F_NCONF_LOAD_BIO = `enum CONF_F_NCONF_LOAD_BIO = 110;`;
        static if(is(typeof({ mixin(enumMixinStr_CONF_F_NCONF_LOAD_BIO); }))) {
            mixin(enumMixinStr_CONF_F_NCONF_LOAD_BIO);
        }
    }




    static if(!is(typeof(CONF_F_NCONF_LOAD))) {
        private enum enumMixinStr_CONF_F_NCONF_LOAD = `enum CONF_F_NCONF_LOAD = 113;`;
        static if(is(typeof({ mixin(enumMixinStr_CONF_F_NCONF_LOAD); }))) {
            mixin(enumMixinStr_CONF_F_NCONF_LOAD);
        }
    }




    static if(!is(typeof(CONF_F_NCONF_GET_STRING))) {
        private enum enumMixinStr_CONF_F_NCONF_GET_STRING = `enum CONF_F_NCONF_GET_STRING = 109;`;
        static if(is(typeof({ mixin(enumMixinStr_CONF_F_NCONF_GET_STRING); }))) {
            mixin(enumMixinStr_CONF_F_NCONF_GET_STRING);
        }
    }




    static if(!is(typeof(CONF_F_NCONF_GET_SECTION))) {
        private enum enumMixinStr_CONF_F_NCONF_GET_SECTION = `enum CONF_F_NCONF_GET_SECTION = 108;`;
        static if(is(typeof({ mixin(enumMixinStr_CONF_F_NCONF_GET_SECTION); }))) {
            mixin(enumMixinStr_CONF_F_NCONF_GET_SECTION);
        }
    }




    static if(!is(typeof(CONF_F_NCONF_GET_NUMBER_E))) {
        private enum enumMixinStr_CONF_F_NCONF_GET_NUMBER_E = `enum CONF_F_NCONF_GET_NUMBER_E = 112;`;
        static if(is(typeof({ mixin(enumMixinStr_CONF_F_NCONF_GET_NUMBER_E); }))) {
            mixin(enumMixinStr_CONF_F_NCONF_GET_NUMBER_E);
        }
    }




    static if(!is(typeof(CONF_F_NCONF_DUMP_FP))) {
        private enum enumMixinStr_CONF_F_NCONF_DUMP_FP = `enum CONF_F_NCONF_DUMP_FP = 106;`;
        static if(is(typeof({ mixin(enumMixinStr_CONF_F_NCONF_DUMP_FP); }))) {
            mixin(enumMixinStr_CONF_F_NCONF_DUMP_FP);
        }
    }




    static if(!is(typeof(CONF_F_NCONF_DUMP_BIO))) {
        private enum enumMixinStr_CONF_F_NCONF_DUMP_BIO = `enum CONF_F_NCONF_DUMP_BIO = 105;`;
        static if(is(typeof({ mixin(enumMixinStr_CONF_F_NCONF_DUMP_BIO); }))) {
            mixin(enumMixinStr_CONF_F_NCONF_DUMP_BIO);
        }
    }




    static if(!is(typeof(CONF_F_MODULE_RUN))) {
        private enum enumMixinStr_CONF_F_MODULE_RUN = `enum CONF_F_MODULE_RUN = 118;`;
        static if(is(typeof({ mixin(enumMixinStr_CONF_F_MODULE_RUN); }))) {
            mixin(enumMixinStr_CONF_F_MODULE_RUN);
        }
    }




    static if(!is(typeof(CONF_F_MODULE_LOAD_DSO))) {
        private enum enumMixinStr_CONF_F_MODULE_LOAD_DSO = `enum CONF_F_MODULE_LOAD_DSO = 117;`;
        static if(is(typeof({ mixin(enumMixinStr_CONF_F_MODULE_LOAD_DSO); }))) {
            mixin(enumMixinStr_CONF_F_MODULE_LOAD_DSO);
        }
    }




    static if(!is(typeof(CONF_F_MODULE_INIT))) {
        private enum enumMixinStr_CONF_F_MODULE_INIT = `enum CONF_F_MODULE_INIT = 115;`;
        static if(is(typeof({ mixin(enumMixinStr_CONF_F_MODULE_INIT); }))) {
            mixin(enumMixinStr_CONF_F_MODULE_INIT);
        }
    }




    static if(!is(typeof(CONF_F_MODULE_ADD))) {
        private enum enumMixinStr_CONF_F_MODULE_ADD = `enum CONF_F_MODULE_ADD = 122;`;
        static if(is(typeof({ mixin(enumMixinStr_CONF_F_MODULE_ADD); }))) {
            mixin(enumMixinStr_CONF_F_MODULE_ADD);
        }
    }




    static if(!is(typeof(CONF_F_GET_NEXT_FILE))) {
        private enum enumMixinStr_CONF_F_GET_NEXT_FILE = `enum CONF_F_GET_NEXT_FILE = 107;`;
        static if(is(typeof({ mixin(enumMixinStr_CONF_F_GET_NEXT_FILE); }))) {
            mixin(enumMixinStr_CONF_F_GET_NEXT_FILE);
        }
    }




    static if(!is(typeof(CONF_F_DEF_LOAD_BIO))) {
        private enum enumMixinStr_CONF_F_DEF_LOAD_BIO = `enum CONF_F_DEF_LOAD_BIO = 121;`;
        static if(is(typeof({ mixin(enumMixinStr_CONF_F_DEF_LOAD_BIO); }))) {
            mixin(enumMixinStr_CONF_F_DEF_LOAD_BIO);
        }
    }




    static if(!is(typeof(CONF_F_DEF_LOAD))) {
        private enum enumMixinStr_CONF_F_DEF_LOAD = `enum CONF_F_DEF_LOAD = 120;`;
        static if(is(typeof({ mixin(enumMixinStr_CONF_F_DEF_LOAD); }))) {
            mixin(enumMixinStr_CONF_F_DEF_LOAD);
        }
    }




    static if(!is(typeof(CONF_F_CONF_PARSE_LIST))) {
        private enum enumMixinStr_CONF_F_CONF_PARSE_LIST = `enum CONF_F_CONF_PARSE_LIST = 119;`;
        static if(is(typeof({ mixin(enumMixinStr_CONF_F_CONF_PARSE_LIST); }))) {
            mixin(enumMixinStr_CONF_F_CONF_PARSE_LIST);
        }
    }




    static if(!is(typeof(CONF_F_CONF_LOAD_FP))) {
        private enum enumMixinStr_CONF_F_CONF_LOAD_FP = `enum CONF_F_CONF_LOAD_FP = 103;`;
        static if(is(typeof({ mixin(enumMixinStr_CONF_F_CONF_LOAD_FP); }))) {
            mixin(enumMixinStr_CONF_F_CONF_LOAD_FP);
        }
    }




    static if(!is(typeof(CONF_F_CONF_LOAD))) {
        private enum enumMixinStr_CONF_F_CONF_LOAD = `enum CONF_F_CONF_LOAD = 100;`;
        static if(is(typeof({ mixin(enumMixinStr_CONF_F_CONF_LOAD); }))) {
            mixin(enumMixinStr_CONF_F_CONF_LOAD);
        }
    }




    static if(!is(typeof(CONF_F_CONF_DUMP_FP))) {
        private enum enumMixinStr_CONF_F_CONF_DUMP_FP = `enum CONF_F_CONF_DUMP_FP = 104;`;
        static if(is(typeof({ mixin(enumMixinStr_CONF_F_CONF_DUMP_FP); }))) {
            mixin(enumMixinStr_CONF_F_CONF_DUMP_FP);
        }
    }
    static if(!is(typeof(CONF_MFLAGS_DEFAULT_SECTION))) {
        private enum enumMixinStr_CONF_MFLAGS_DEFAULT_SECTION = `enum CONF_MFLAGS_DEFAULT_SECTION = 0x20;`;
        static if(is(typeof({ mixin(enumMixinStr_CONF_MFLAGS_DEFAULT_SECTION); }))) {
            mixin(enumMixinStr_CONF_MFLAGS_DEFAULT_SECTION);
        }
    }




    static if(!is(typeof(CONF_MFLAGS_IGNORE_MISSING_FILE))) {
        private enum enumMixinStr_CONF_MFLAGS_IGNORE_MISSING_FILE = `enum CONF_MFLAGS_IGNORE_MISSING_FILE = 0x10;`;
        static if(is(typeof({ mixin(enumMixinStr_CONF_MFLAGS_IGNORE_MISSING_FILE); }))) {
            mixin(enumMixinStr_CONF_MFLAGS_IGNORE_MISSING_FILE);
        }
    }




    static if(!is(typeof(CONF_MFLAGS_NO_DSO))) {
        private enum enumMixinStr_CONF_MFLAGS_NO_DSO = `enum CONF_MFLAGS_NO_DSO = 0x8;`;
        static if(is(typeof({ mixin(enumMixinStr_CONF_MFLAGS_NO_DSO); }))) {
            mixin(enumMixinStr_CONF_MFLAGS_NO_DSO);
        }
    }




    static if(!is(typeof(CONF_MFLAGS_SILENT))) {
        private enum enumMixinStr_CONF_MFLAGS_SILENT = `enum CONF_MFLAGS_SILENT = 0x4;`;
        static if(is(typeof({ mixin(enumMixinStr_CONF_MFLAGS_SILENT); }))) {
            mixin(enumMixinStr_CONF_MFLAGS_SILENT);
        }
    }




    static if(!is(typeof(CONF_MFLAGS_IGNORE_RETURN_CODES))) {
        private enum enumMixinStr_CONF_MFLAGS_IGNORE_RETURN_CODES = `enum CONF_MFLAGS_IGNORE_RETURN_CODES = 0x2;`;
        static if(is(typeof({ mixin(enumMixinStr_CONF_MFLAGS_IGNORE_RETURN_CODES); }))) {
            mixin(enumMixinStr_CONF_MFLAGS_IGNORE_RETURN_CODES);
        }
    }




    static if(!is(typeof(CONF_MFLAGS_IGNORE_ERRORS))) {
        private enum enumMixinStr_CONF_MFLAGS_IGNORE_ERRORS = `enum CONF_MFLAGS_IGNORE_ERRORS = 0x1;`;
        static if(is(typeof({ mixin(enumMixinStr_CONF_MFLAGS_IGNORE_ERRORS); }))) {
            mixin(enumMixinStr_CONF_MFLAGS_IGNORE_ERRORS);
        }
    }






    static if(!is(typeof(COMP_R_ZLIB_NOT_SUPPORTED))) {
        private enum enumMixinStr_COMP_R_ZLIB_NOT_SUPPORTED = `enum COMP_R_ZLIB_NOT_SUPPORTED = 101;`;
        static if(is(typeof({ mixin(enumMixinStr_COMP_R_ZLIB_NOT_SUPPORTED); }))) {
            mixin(enumMixinStr_COMP_R_ZLIB_NOT_SUPPORTED);
        }
    }




    static if(!is(typeof(COMP_R_ZLIB_INFLATE_ERROR))) {
        private enum enumMixinStr_COMP_R_ZLIB_INFLATE_ERROR = `enum COMP_R_ZLIB_INFLATE_ERROR = 100;`;
        static if(is(typeof({ mixin(enumMixinStr_COMP_R_ZLIB_INFLATE_ERROR); }))) {
            mixin(enumMixinStr_COMP_R_ZLIB_INFLATE_ERROR);
        }
    }




    static if(!is(typeof(COMP_R_ZLIB_DEFLATE_ERROR))) {
        private enum enumMixinStr_COMP_R_ZLIB_DEFLATE_ERROR = `enum COMP_R_ZLIB_DEFLATE_ERROR = 99;`;
        static if(is(typeof({ mixin(enumMixinStr_COMP_R_ZLIB_DEFLATE_ERROR); }))) {
            mixin(enumMixinStr_COMP_R_ZLIB_DEFLATE_ERROR);
        }
    }




    static if(!is(typeof(COMP_F_COMP_CTX_NEW))) {
        private enum enumMixinStr_COMP_F_COMP_CTX_NEW = `enum COMP_F_COMP_CTX_NEW = 103;`;
        static if(is(typeof({ mixin(enumMixinStr_COMP_F_COMP_CTX_NEW); }))) {
            mixin(enumMixinStr_COMP_F_COMP_CTX_NEW);
        }
    }




    static if(!is(typeof(COMP_F_BIO_ZLIB_WRITE))) {
        private enum enumMixinStr_COMP_F_BIO_ZLIB_WRITE = `enum COMP_F_BIO_ZLIB_WRITE = 102;`;
        static if(is(typeof({ mixin(enumMixinStr_COMP_F_BIO_ZLIB_WRITE); }))) {
            mixin(enumMixinStr_COMP_F_BIO_ZLIB_WRITE);
        }
    }




    static if(!is(typeof(COMP_F_BIO_ZLIB_READ))) {
        private enum enumMixinStr_COMP_F_BIO_ZLIB_READ = `enum COMP_F_BIO_ZLIB_READ = 101;`;
        static if(is(typeof({ mixin(enumMixinStr_COMP_F_BIO_ZLIB_READ); }))) {
            mixin(enumMixinStr_COMP_F_BIO_ZLIB_READ);
        }
    }




    static if(!is(typeof(COMP_F_BIO_ZLIB_NEW))) {
        private enum enumMixinStr_COMP_F_BIO_ZLIB_NEW = `enum COMP_F_BIO_ZLIB_NEW = 100;`;
        static if(is(typeof({ mixin(enumMixinStr_COMP_F_BIO_ZLIB_NEW); }))) {
            mixin(enumMixinStr_COMP_F_BIO_ZLIB_NEW);
        }
    }




    static if(!is(typeof(COMP_F_BIO_ZLIB_FLUSH))) {
        private enum enumMixinStr_COMP_F_BIO_ZLIB_FLUSH = `enum COMP_F_BIO_ZLIB_FLUSH = 99;`;
        static if(is(typeof({ mixin(enumMixinStr_COMP_F_BIO_ZLIB_FLUSH); }))) {
            mixin(enumMixinStr_COMP_F_BIO_ZLIB_FLUSH);
        }
    }
    static if(!is(typeof(BUF_F_BUF_MEM_NEW))) {
        private enum enumMixinStr_BUF_F_BUF_MEM_NEW = `enum BUF_F_BUF_MEM_NEW = 101;`;
        static if(is(typeof({ mixin(enumMixinStr_BUF_F_BUF_MEM_NEW); }))) {
            mixin(enumMixinStr_BUF_F_BUF_MEM_NEW);
        }
    }




    static if(!is(typeof(BUF_F_BUF_MEM_GROW_CLEAN))) {
        private enum enumMixinStr_BUF_F_BUF_MEM_GROW_CLEAN = `enum BUF_F_BUF_MEM_GROW_CLEAN = 105;`;
        static if(is(typeof({ mixin(enumMixinStr_BUF_F_BUF_MEM_GROW_CLEAN); }))) {
            mixin(enumMixinStr_BUF_F_BUF_MEM_GROW_CLEAN);
        }
    }




    static if(!is(typeof(BUF_F_BUF_MEM_GROW))) {
        private enum enumMixinStr_BUF_F_BUF_MEM_GROW = `enum BUF_F_BUF_MEM_GROW = 100;`;
        static if(is(typeof({ mixin(enumMixinStr_BUF_F_BUF_MEM_GROW); }))) {
            mixin(enumMixinStr_BUF_F_BUF_MEM_GROW);
        }
    }






    static if(!is(typeof(BUF_MEM_FLAG_SECURE))) {
        private enum enumMixinStr_BUF_MEM_FLAG_SECURE = `enum BUF_MEM_FLAG_SECURE = 0x01;`;
        static if(is(typeof({ mixin(enumMixinStr_BUF_MEM_FLAG_SECURE); }))) {
            mixin(enumMixinStr_BUF_MEM_FLAG_SECURE);
        }
    }
    static if(!is(typeof(BN_R_TOO_MANY_TEMPORARY_VARIABLES))) {
        private enum enumMixinStr_BN_R_TOO_MANY_TEMPORARY_VARIABLES = `enum BN_R_TOO_MANY_TEMPORARY_VARIABLES = 109;`;
        static if(is(typeof({ mixin(enumMixinStr_BN_R_TOO_MANY_TEMPORARY_VARIABLES); }))) {
            mixin(enumMixinStr_BN_R_TOO_MANY_TEMPORARY_VARIABLES);
        }
    }




    static if(!is(typeof(BN_R_TOO_MANY_ITERATIONS))) {
        private enum enumMixinStr_BN_R_TOO_MANY_ITERATIONS = `enum BN_R_TOO_MANY_ITERATIONS = 113;`;
        static if(is(typeof({ mixin(enumMixinStr_BN_R_TOO_MANY_ITERATIONS); }))) {
            mixin(enumMixinStr_BN_R_TOO_MANY_ITERATIONS);
        }
    }




    static if(!is(typeof(BN_R_P_IS_NOT_PRIME))) {
        private enum enumMixinStr_BN_R_P_IS_NOT_PRIME = `enum BN_R_P_IS_NOT_PRIME = 112;`;
        static if(is(typeof({ mixin(enumMixinStr_BN_R_P_IS_NOT_PRIME); }))) {
            mixin(enumMixinStr_BN_R_P_IS_NOT_PRIME);
        }
    }




    static if(!is(typeof(BN_R_PRIVATE_KEY_TOO_LARGE))) {
        private enum enumMixinStr_BN_R_PRIVATE_KEY_TOO_LARGE = `enum BN_R_PRIVATE_KEY_TOO_LARGE = 117;`;
        static if(is(typeof({ mixin(enumMixinStr_BN_R_PRIVATE_KEY_TOO_LARGE); }))) {
            mixin(enumMixinStr_BN_R_PRIVATE_KEY_TOO_LARGE);
        }
    }




    static if(!is(typeof(BN_R_NO_SOLUTION))) {
        private enum enumMixinStr_BN_R_NO_SOLUTION = `enum BN_R_NO_SOLUTION = 116;`;
        static if(is(typeof({ mixin(enumMixinStr_BN_R_NO_SOLUTION); }))) {
            mixin(enumMixinStr_BN_R_NO_SOLUTION);
        }
    }




    static if(!is(typeof(BN_R_NO_INVERSE))) {
        private enum enumMixinStr_BN_R_NO_INVERSE = `enum BN_R_NO_INVERSE = 108;`;
        static if(is(typeof({ mixin(enumMixinStr_BN_R_NO_INVERSE); }))) {
            mixin(enumMixinStr_BN_R_NO_INVERSE);
        }
    }




    static if(!is(typeof(BN_R_NOT_INITIALIZED))) {
        private enum enumMixinStr_BN_R_NOT_INITIALIZED = `enum BN_R_NOT_INITIALIZED = 107;`;
        static if(is(typeof({ mixin(enumMixinStr_BN_R_NOT_INITIALIZED); }))) {
            mixin(enumMixinStr_BN_R_NOT_INITIALIZED);
        }
    }




    static if(!is(typeof(BN_R_NOT_A_SQUARE))) {
        private enum enumMixinStr_BN_R_NOT_A_SQUARE = `enum BN_R_NOT_A_SQUARE = 111;`;
        static if(is(typeof({ mixin(enumMixinStr_BN_R_NOT_A_SQUARE); }))) {
            mixin(enumMixinStr_BN_R_NOT_A_SQUARE);
        }
    }




    static if(!is(typeof(BN_R_INVALID_SHIFT))) {
        private enum enumMixinStr_BN_R_INVALID_SHIFT = `enum BN_R_INVALID_SHIFT = 119;`;
        static if(is(typeof({ mixin(enumMixinStr_BN_R_INVALID_SHIFT); }))) {
            mixin(enumMixinStr_BN_R_INVALID_SHIFT);
        }
    }




    static if(!is(typeof(BN_R_INVALID_RANGE))) {
        private enum enumMixinStr_BN_R_INVALID_RANGE = `enum BN_R_INVALID_RANGE = 115;`;
        static if(is(typeof({ mixin(enumMixinStr_BN_R_INVALID_RANGE); }))) {
            mixin(enumMixinStr_BN_R_INVALID_RANGE);
        }
    }




    static if(!is(typeof(BN_R_INVALID_LENGTH))) {
        private enum enumMixinStr_BN_R_INVALID_LENGTH = `enum BN_R_INVALID_LENGTH = 106;`;
        static if(is(typeof({ mixin(enumMixinStr_BN_R_INVALID_LENGTH); }))) {
            mixin(enumMixinStr_BN_R_INVALID_LENGTH);
        }
    }




    static if(!is(typeof(BN_R_INPUT_NOT_REDUCED))) {
        private enum enumMixinStr_BN_R_INPUT_NOT_REDUCED = `enum BN_R_INPUT_NOT_REDUCED = 110;`;
        static if(is(typeof({ mixin(enumMixinStr_BN_R_INPUT_NOT_REDUCED); }))) {
            mixin(enumMixinStr_BN_R_INPUT_NOT_REDUCED);
        }
    }




    static if(!is(typeof(BN_R_EXPAND_ON_STATIC_BIGNUM_DATA))) {
        private enum enumMixinStr_BN_R_EXPAND_ON_STATIC_BIGNUM_DATA = `enum BN_R_EXPAND_ON_STATIC_BIGNUM_DATA = 105;`;
        static if(is(typeof({ mixin(enumMixinStr_BN_R_EXPAND_ON_STATIC_BIGNUM_DATA); }))) {
            mixin(enumMixinStr_BN_R_EXPAND_ON_STATIC_BIGNUM_DATA);
        }
    }




    static if(!is(typeof(BN_R_ENCODING_ERROR))) {
        private enum enumMixinStr_BN_R_ENCODING_ERROR = `enum BN_R_ENCODING_ERROR = 104;`;
        static if(is(typeof({ mixin(enumMixinStr_BN_R_ENCODING_ERROR); }))) {
            mixin(enumMixinStr_BN_R_ENCODING_ERROR);
        }
    }




    static if(!is(typeof(BN_R_DIV_BY_ZERO))) {
        private enum enumMixinStr_BN_R_DIV_BY_ZERO = `enum BN_R_DIV_BY_ZERO = 103;`;
        static if(is(typeof({ mixin(enumMixinStr_BN_R_DIV_BY_ZERO); }))) {
            mixin(enumMixinStr_BN_R_DIV_BY_ZERO);
        }
    }




    static if(!is(typeof(BN_R_CALLED_WITH_EVEN_MODULUS))) {
        private enum enumMixinStr_BN_R_CALLED_WITH_EVEN_MODULUS = `enum BN_R_CALLED_WITH_EVEN_MODULUS = 102;`;
        static if(is(typeof({ mixin(enumMixinStr_BN_R_CALLED_WITH_EVEN_MODULUS); }))) {
            mixin(enumMixinStr_BN_R_CALLED_WITH_EVEN_MODULUS);
        }
    }




    static if(!is(typeof(BN_R_BITS_TOO_SMALL))) {
        private enum enumMixinStr_BN_R_BITS_TOO_SMALL = `enum BN_R_BITS_TOO_SMALL = 118;`;
        static if(is(typeof({ mixin(enumMixinStr_BN_R_BITS_TOO_SMALL); }))) {
            mixin(enumMixinStr_BN_R_BITS_TOO_SMALL);
        }
    }




    static if(!is(typeof(BN_R_BIGNUM_TOO_LONG))) {
        private enum enumMixinStr_BN_R_BIGNUM_TOO_LONG = `enum BN_R_BIGNUM_TOO_LONG = 114;`;
        static if(is(typeof({ mixin(enumMixinStr_BN_R_BIGNUM_TOO_LONG); }))) {
            mixin(enumMixinStr_BN_R_BIGNUM_TOO_LONG);
        }
    }




    static if(!is(typeof(BN_R_BAD_RECIPROCAL))) {
        private enum enumMixinStr_BN_R_BAD_RECIPROCAL = `enum BN_R_BAD_RECIPROCAL = 101;`;
        static if(is(typeof({ mixin(enumMixinStr_BN_R_BAD_RECIPROCAL); }))) {
            mixin(enumMixinStr_BN_R_BAD_RECIPROCAL);
        }
    }




    static if(!is(typeof(BN_R_ARG2_LT_ARG3))) {
        private enum enumMixinStr_BN_R_ARG2_LT_ARG3 = `enum BN_R_ARG2_LT_ARG3 = 100;`;
        static if(is(typeof({ mixin(enumMixinStr_BN_R_ARG2_LT_ARG3); }))) {
            mixin(enumMixinStr_BN_R_ARG2_LT_ARG3);
        }
    }




    static if(!is(typeof(BN_F_BN_USUB))) {
        private enum enumMixinStr_BN_F_BN_USUB = `enum BN_F_BN_USUB = 115;`;
        static if(is(typeof({ mixin(enumMixinStr_BN_F_BN_USUB); }))) {
            mixin(enumMixinStr_BN_F_BN_USUB);
        }
    }




    static if(!is(typeof(BN_F_BN_STACK_PUSH))) {
        private enum enumMixinStr_BN_F_BN_STACK_PUSH = `enum BN_F_BN_STACK_PUSH = 148;`;
        static if(is(typeof({ mixin(enumMixinStr_BN_F_BN_STACK_PUSH); }))) {
            mixin(enumMixinStr_BN_F_BN_STACK_PUSH);
        }
    }




    static if(!is(typeof(BN_F_BN_SET_WORDS))) {
        private enum enumMixinStr_BN_F_BN_SET_WORDS = `enum BN_F_BN_SET_WORDS = 144;`;
        static if(is(typeof({ mixin(enumMixinStr_BN_F_BN_SET_WORDS); }))) {
            mixin(enumMixinStr_BN_F_BN_SET_WORDS);
        }
    }




    static if(!is(typeof(BN_F_BN_RSHIFT))) {
        private enum enumMixinStr_BN_F_BN_RSHIFT = `enum BN_F_BN_RSHIFT = 146;`;
        static if(is(typeof({ mixin(enumMixinStr_BN_F_BN_RSHIFT); }))) {
            mixin(enumMixinStr_BN_F_BN_RSHIFT);
        }
    }




    static if(!is(typeof(BN_F_BN_RECP_CTX_NEW))) {
        private enum enumMixinStr_BN_F_BN_RECP_CTX_NEW = `enum BN_F_BN_RECP_CTX_NEW = 150;`;
        static if(is(typeof({ mixin(enumMixinStr_BN_F_BN_RECP_CTX_NEW); }))) {
            mixin(enumMixinStr_BN_F_BN_RECP_CTX_NEW);
        }
    }




    static if(!is(typeof(BN_F_BN_RAND_RANGE))) {
        private enum enumMixinStr_BN_F_BN_RAND_RANGE = `enum BN_F_BN_RAND_RANGE = 122;`;
        static if(is(typeof({ mixin(enumMixinStr_BN_F_BN_RAND_RANGE); }))) {
            mixin(enumMixinStr_BN_F_BN_RAND_RANGE);
        }
    }




    static if(!is(typeof(BN_F_BN_RAND))) {
        private enum enumMixinStr_BN_F_BN_RAND = `enum BN_F_BN_RAND = 114;`;
        static if(is(typeof({ mixin(enumMixinStr_BN_F_BN_RAND); }))) {
            mixin(enumMixinStr_BN_F_BN_RAND);
        }
    }




    static if(!is(typeof(BN_F_BN_POOL_GET))) {
        private enum enumMixinStr_BN_F_BN_POOL_GET = `enum BN_F_BN_POOL_GET = 147;`;
        static if(is(typeof({ mixin(enumMixinStr_BN_F_BN_POOL_GET); }))) {
            mixin(enumMixinStr_BN_F_BN_POOL_GET);
        }
    }




    static if(!is(typeof(BN_F_BN_NEW))) {
        private enum enumMixinStr_BN_F_BN_NEW = `enum BN_F_BN_NEW = 113;`;
        static if(is(typeof({ mixin(enumMixinStr_BN_F_BN_NEW); }))) {
            mixin(enumMixinStr_BN_F_BN_NEW);
        }
    }




    static if(!is(typeof(BN_F_BN_MPI2BN))) {
        private enum enumMixinStr_BN_F_BN_MPI2BN = `enum BN_F_BN_MPI2BN = 112;`;
        static if(is(typeof({ mixin(enumMixinStr_BN_F_BN_MPI2BN); }))) {
            mixin(enumMixinStr_BN_F_BN_MPI2BN);
        }
    }




    static if(!is(typeof(BN_F_BN_MONT_CTX_NEW))) {
        private enum enumMixinStr_BN_F_BN_MONT_CTX_NEW = `enum BN_F_BN_MONT_CTX_NEW = 149;`;
        static if(is(typeof({ mixin(enumMixinStr_BN_F_BN_MONT_CTX_NEW); }))) {
            mixin(enumMixinStr_BN_F_BN_MONT_CTX_NEW);
        }
    }






    static if(!is(typeof(BN_F_BN_MOD_SQRT))) {
        private enum enumMixinStr_BN_F_BN_MOD_SQRT = `enum BN_F_BN_MOD_SQRT = 121;`;
        static if(is(typeof({ mixin(enumMixinStr_BN_F_BN_MOD_SQRT); }))) {
            mixin(enumMixinStr_BN_F_BN_MOD_SQRT);
        }
    }




    static if(!is(typeof(BN_F_BN_MOD_LSHIFT_QUICK))) {
        private enum enumMixinStr_BN_F_BN_MOD_LSHIFT_QUICK = `enum BN_F_BN_MOD_LSHIFT_QUICK = 119;`;
        static if(is(typeof({ mixin(enumMixinStr_BN_F_BN_MOD_LSHIFT_QUICK); }))) {
            mixin(enumMixinStr_BN_F_BN_MOD_LSHIFT_QUICK);
        }
    }




    static if(!is(typeof(EVP_F_AESNI_INIT_KEY))) {
        private enum enumMixinStr_EVP_F_AESNI_INIT_KEY = `enum EVP_F_AESNI_INIT_KEY = 165;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_F_AESNI_INIT_KEY); }))) {
            mixin(enumMixinStr_EVP_F_AESNI_INIT_KEY);
        }
    }




    static if(!is(typeof(EVP_F_AESNI_XTS_INIT_KEY))) {
        private enum enumMixinStr_EVP_F_AESNI_XTS_INIT_KEY = `enum EVP_F_AESNI_XTS_INIT_KEY = 207;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_F_AESNI_XTS_INIT_KEY); }))) {
            mixin(enumMixinStr_EVP_F_AESNI_XTS_INIT_KEY);
        }
    }




    static if(!is(typeof(EVP_F_AES_GCM_CTRL))) {
        private enum enumMixinStr_EVP_F_AES_GCM_CTRL = `enum EVP_F_AES_GCM_CTRL = 196;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_F_AES_GCM_CTRL); }))) {
            mixin(enumMixinStr_EVP_F_AES_GCM_CTRL);
        }
    }




    static if(!is(typeof(EVP_F_AES_INIT_KEY))) {
        private enum enumMixinStr_EVP_F_AES_INIT_KEY = `enum EVP_F_AES_INIT_KEY = 133;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_F_AES_INIT_KEY); }))) {
            mixin(enumMixinStr_EVP_F_AES_INIT_KEY);
        }
    }




    static if(!is(typeof(EVP_F_AES_OCB_CIPHER))) {
        private enum enumMixinStr_EVP_F_AES_OCB_CIPHER = `enum EVP_F_AES_OCB_CIPHER = 169;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_F_AES_OCB_CIPHER); }))) {
            mixin(enumMixinStr_EVP_F_AES_OCB_CIPHER);
        }
    }




    static if(!is(typeof(EVP_F_AES_T4_INIT_KEY))) {
        private enum enumMixinStr_EVP_F_AES_T4_INIT_KEY = `enum EVP_F_AES_T4_INIT_KEY = 178;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_F_AES_T4_INIT_KEY); }))) {
            mixin(enumMixinStr_EVP_F_AES_T4_INIT_KEY);
        }
    }




    static if(!is(typeof(EVP_F_AES_T4_XTS_INIT_KEY))) {
        private enum enumMixinStr_EVP_F_AES_T4_XTS_INIT_KEY = `enum EVP_F_AES_T4_XTS_INIT_KEY = 208;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_F_AES_T4_XTS_INIT_KEY); }))) {
            mixin(enumMixinStr_EVP_F_AES_T4_XTS_INIT_KEY);
        }
    }




    static if(!is(typeof(EVP_F_AES_WRAP_CIPHER))) {
        private enum enumMixinStr_EVP_F_AES_WRAP_CIPHER = `enum EVP_F_AES_WRAP_CIPHER = 170;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_F_AES_WRAP_CIPHER); }))) {
            mixin(enumMixinStr_EVP_F_AES_WRAP_CIPHER);
        }
    }




    static if(!is(typeof(EVP_F_AES_XTS_INIT_KEY))) {
        private enum enumMixinStr_EVP_F_AES_XTS_INIT_KEY = `enum EVP_F_AES_XTS_INIT_KEY = 209;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_F_AES_XTS_INIT_KEY); }))) {
            mixin(enumMixinStr_EVP_F_AES_XTS_INIT_KEY);
        }
    }




    static if(!is(typeof(EVP_F_ALG_MODULE_INIT))) {
        private enum enumMixinStr_EVP_F_ALG_MODULE_INIT = `enum EVP_F_ALG_MODULE_INIT = 177;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_F_ALG_MODULE_INIT); }))) {
            mixin(enumMixinStr_EVP_F_ALG_MODULE_INIT);
        }
    }




    static if(!is(typeof(EVP_F_ARIA_CCM_INIT_KEY))) {
        private enum enumMixinStr_EVP_F_ARIA_CCM_INIT_KEY = `enum EVP_F_ARIA_CCM_INIT_KEY = 175;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_F_ARIA_CCM_INIT_KEY); }))) {
            mixin(enumMixinStr_EVP_F_ARIA_CCM_INIT_KEY);
        }
    }




    static if(!is(typeof(EVP_F_ARIA_GCM_CTRL))) {
        private enum enumMixinStr_EVP_F_ARIA_GCM_CTRL = `enum EVP_F_ARIA_GCM_CTRL = 197;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_F_ARIA_GCM_CTRL); }))) {
            mixin(enumMixinStr_EVP_F_ARIA_GCM_CTRL);
        }
    }




    static if(!is(typeof(EVP_F_ARIA_GCM_INIT_KEY))) {
        private enum enumMixinStr_EVP_F_ARIA_GCM_INIT_KEY = `enum EVP_F_ARIA_GCM_INIT_KEY = 176;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_F_ARIA_GCM_INIT_KEY); }))) {
            mixin(enumMixinStr_EVP_F_ARIA_GCM_INIT_KEY);
        }
    }




    static if(!is(typeof(EVP_F_ARIA_INIT_KEY))) {
        private enum enumMixinStr_EVP_F_ARIA_INIT_KEY = `enum EVP_F_ARIA_INIT_KEY = 185;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_F_ARIA_INIT_KEY); }))) {
            mixin(enumMixinStr_EVP_F_ARIA_INIT_KEY);
        }
    }




    static if(!is(typeof(EVP_F_B64_NEW))) {
        private enum enumMixinStr_EVP_F_B64_NEW = `enum EVP_F_B64_NEW = 198;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_F_B64_NEW); }))) {
            mixin(enumMixinStr_EVP_F_B64_NEW);
        }
    }




    static if(!is(typeof(EVP_F_CAMELLIA_INIT_KEY))) {
        private enum enumMixinStr_EVP_F_CAMELLIA_INIT_KEY = `enum EVP_F_CAMELLIA_INIT_KEY = 159;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_F_CAMELLIA_INIT_KEY); }))) {
            mixin(enumMixinStr_EVP_F_CAMELLIA_INIT_KEY);
        }
    }




    static if(!is(typeof(EVP_F_CHACHA20_POLY1305_CTRL))) {
        private enum enumMixinStr_EVP_F_CHACHA20_POLY1305_CTRL = `enum EVP_F_CHACHA20_POLY1305_CTRL = 182;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_F_CHACHA20_POLY1305_CTRL); }))) {
            mixin(enumMixinStr_EVP_F_CHACHA20_POLY1305_CTRL);
        }
    }




    static if(!is(typeof(EVP_F_CMLL_T4_INIT_KEY))) {
        private enum enumMixinStr_EVP_F_CMLL_T4_INIT_KEY = `enum EVP_F_CMLL_T4_INIT_KEY = 179;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_F_CMLL_T4_INIT_KEY); }))) {
            mixin(enumMixinStr_EVP_F_CMLL_T4_INIT_KEY);
        }
    }




    static if(!is(typeof(EVP_F_DES_EDE3_WRAP_CIPHER))) {
        private enum enumMixinStr_EVP_F_DES_EDE3_WRAP_CIPHER = `enum EVP_F_DES_EDE3_WRAP_CIPHER = 171;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_F_DES_EDE3_WRAP_CIPHER); }))) {
            mixin(enumMixinStr_EVP_F_DES_EDE3_WRAP_CIPHER);
        }
    }




    static if(!is(typeof(EVP_F_DO_SIGVER_INIT))) {
        private enum enumMixinStr_EVP_F_DO_SIGVER_INIT = `enum EVP_F_DO_SIGVER_INIT = 161;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_F_DO_SIGVER_INIT); }))) {
            mixin(enumMixinStr_EVP_F_DO_SIGVER_INIT);
        }
    }




    static if(!is(typeof(EVP_F_ENC_NEW))) {
        private enum enumMixinStr_EVP_F_ENC_NEW = `enum EVP_F_ENC_NEW = 199;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_F_ENC_NEW); }))) {
            mixin(enumMixinStr_EVP_F_ENC_NEW);
        }
    }




    static if(!is(typeof(EVP_F_EVP_CIPHERINIT_EX))) {
        private enum enumMixinStr_EVP_F_EVP_CIPHERINIT_EX = `enum EVP_F_EVP_CIPHERINIT_EX = 123;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_F_EVP_CIPHERINIT_EX); }))) {
            mixin(enumMixinStr_EVP_F_EVP_CIPHERINIT_EX);
        }
    }




    static if(!is(typeof(EVP_F_EVP_CIPHER_ASN1_TO_PARAM))) {
        private enum enumMixinStr_EVP_F_EVP_CIPHER_ASN1_TO_PARAM = `enum EVP_F_EVP_CIPHER_ASN1_TO_PARAM = 204;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_F_EVP_CIPHER_ASN1_TO_PARAM); }))) {
            mixin(enumMixinStr_EVP_F_EVP_CIPHER_ASN1_TO_PARAM);
        }
    }




    static if(!is(typeof(EVP_F_EVP_CIPHER_CTX_COPY))) {
        private enum enumMixinStr_EVP_F_EVP_CIPHER_CTX_COPY = `enum EVP_F_EVP_CIPHER_CTX_COPY = 163;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_F_EVP_CIPHER_CTX_COPY); }))) {
            mixin(enumMixinStr_EVP_F_EVP_CIPHER_CTX_COPY);
        }
    }




    static if(!is(typeof(EVP_F_EVP_CIPHER_CTX_CTRL))) {
        private enum enumMixinStr_EVP_F_EVP_CIPHER_CTX_CTRL = `enum EVP_F_EVP_CIPHER_CTX_CTRL = 124;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_F_EVP_CIPHER_CTX_CTRL); }))) {
            mixin(enumMixinStr_EVP_F_EVP_CIPHER_CTX_CTRL);
        }
    }




    static if(!is(typeof(EVP_F_EVP_CIPHER_CTX_SET_KEY_LENGTH))) {
        private enum enumMixinStr_EVP_F_EVP_CIPHER_CTX_SET_KEY_LENGTH = `enum EVP_F_EVP_CIPHER_CTX_SET_KEY_LENGTH = 122;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_F_EVP_CIPHER_CTX_SET_KEY_LENGTH); }))) {
            mixin(enumMixinStr_EVP_F_EVP_CIPHER_CTX_SET_KEY_LENGTH);
        }
    }




    static if(!is(typeof(EVP_F_EVP_CIPHER_PARAM_TO_ASN1))) {
        private enum enumMixinStr_EVP_F_EVP_CIPHER_PARAM_TO_ASN1 = `enum EVP_F_EVP_CIPHER_PARAM_TO_ASN1 = 205;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_F_EVP_CIPHER_PARAM_TO_ASN1); }))) {
            mixin(enumMixinStr_EVP_F_EVP_CIPHER_PARAM_TO_ASN1);
        }
    }




    static if(!is(typeof(EVP_F_EVP_DECRYPTFINAL_EX))) {
        private enum enumMixinStr_EVP_F_EVP_DECRYPTFINAL_EX = `enum EVP_F_EVP_DECRYPTFINAL_EX = 101;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_F_EVP_DECRYPTFINAL_EX); }))) {
            mixin(enumMixinStr_EVP_F_EVP_DECRYPTFINAL_EX);
        }
    }




    static if(!is(typeof(EVP_F_EVP_DECRYPTUPDATE))) {
        private enum enumMixinStr_EVP_F_EVP_DECRYPTUPDATE = `enum EVP_F_EVP_DECRYPTUPDATE = 166;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_F_EVP_DECRYPTUPDATE); }))) {
            mixin(enumMixinStr_EVP_F_EVP_DECRYPTUPDATE);
        }
    }




    static if(!is(typeof(EVP_F_EVP_DIGESTFINALXOF))) {
        private enum enumMixinStr_EVP_F_EVP_DIGESTFINALXOF = `enum EVP_F_EVP_DIGESTFINALXOF = 174;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_F_EVP_DIGESTFINALXOF); }))) {
            mixin(enumMixinStr_EVP_F_EVP_DIGESTFINALXOF);
        }
    }




    static if(!is(typeof(EVP_F_EVP_DIGESTINIT_EX))) {
        private enum enumMixinStr_EVP_F_EVP_DIGESTINIT_EX = `enum EVP_F_EVP_DIGESTINIT_EX = 128;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_F_EVP_DIGESTINIT_EX); }))) {
            mixin(enumMixinStr_EVP_F_EVP_DIGESTINIT_EX);
        }
    }




    static if(!is(typeof(EVP_F_EVP_ENCRYPTDECRYPTUPDATE))) {
        private enum enumMixinStr_EVP_F_EVP_ENCRYPTDECRYPTUPDATE = `enum EVP_F_EVP_ENCRYPTDECRYPTUPDATE = 219;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_F_EVP_ENCRYPTDECRYPTUPDATE); }))) {
            mixin(enumMixinStr_EVP_F_EVP_ENCRYPTDECRYPTUPDATE);
        }
    }




    static if(!is(typeof(EVP_F_EVP_ENCRYPTFINAL_EX))) {
        private enum enumMixinStr_EVP_F_EVP_ENCRYPTFINAL_EX = `enum EVP_F_EVP_ENCRYPTFINAL_EX = 127;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_F_EVP_ENCRYPTFINAL_EX); }))) {
            mixin(enumMixinStr_EVP_F_EVP_ENCRYPTFINAL_EX);
        }
    }




    static if(!is(typeof(EVP_F_EVP_ENCRYPTUPDATE))) {
        private enum enumMixinStr_EVP_F_EVP_ENCRYPTUPDATE = `enum EVP_F_EVP_ENCRYPTUPDATE = 167;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_F_EVP_ENCRYPTUPDATE); }))) {
            mixin(enumMixinStr_EVP_F_EVP_ENCRYPTUPDATE);
        }
    }




    static if(!is(typeof(EVP_F_EVP_MD_CTX_COPY_EX))) {
        private enum enumMixinStr_EVP_F_EVP_MD_CTX_COPY_EX = `enum EVP_F_EVP_MD_CTX_COPY_EX = 110;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_F_EVP_MD_CTX_COPY_EX); }))) {
            mixin(enumMixinStr_EVP_F_EVP_MD_CTX_COPY_EX);
        }
    }




    static if(!is(typeof(EVP_F_EVP_MD_SIZE))) {
        private enum enumMixinStr_EVP_F_EVP_MD_SIZE = `enum EVP_F_EVP_MD_SIZE = 162;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_F_EVP_MD_SIZE); }))) {
            mixin(enumMixinStr_EVP_F_EVP_MD_SIZE);
        }
    }




    static if(!is(typeof(EVP_F_EVP_OPENINIT))) {
        private enum enumMixinStr_EVP_F_EVP_OPENINIT = `enum EVP_F_EVP_OPENINIT = 102;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_F_EVP_OPENINIT); }))) {
            mixin(enumMixinStr_EVP_F_EVP_OPENINIT);
        }
    }




    static if(!is(typeof(EVP_F_EVP_PBE_ALG_ADD))) {
        private enum enumMixinStr_EVP_F_EVP_PBE_ALG_ADD = `enum EVP_F_EVP_PBE_ALG_ADD = 115;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_F_EVP_PBE_ALG_ADD); }))) {
            mixin(enumMixinStr_EVP_F_EVP_PBE_ALG_ADD);
        }
    }




    static if(!is(typeof(EVP_F_EVP_PBE_ALG_ADD_TYPE))) {
        private enum enumMixinStr_EVP_F_EVP_PBE_ALG_ADD_TYPE = `enum EVP_F_EVP_PBE_ALG_ADD_TYPE = 160;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_F_EVP_PBE_ALG_ADD_TYPE); }))) {
            mixin(enumMixinStr_EVP_F_EVP_PBE_ALG_ADD_TYPE);
        }
    }




    static if(!is(typeof(EVP_F_EVP_PBE_CIPHERINIT))) {
        private enum enumMixinStr_EVP_F_EVP_PBE_CIPHERINIT = `enum EVP_F_EVP_PBE_CIPHERINIT = 116;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_F_EVP_PBE_CIPHERINIT); }))) {
            mixin(enumMixinStr_EVP_F_EVP_PBE_CIPHERINIT);
        }
    }




    static if(!is(typeof(EVP_F_EVP_PBE_SCRYPT))) {
        private enum enumMixinStr_EVP_F_EVP_PBE_SCRYPT = `enum EVP_F_EVP_PBE_SCRYPT = 181;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_F_EVP_PBE_SCRYPT); }))) {
            mixin(enumMixinStr_EVP_F_EVP_PBE_SCRYPT);
        }
    }




    static if(!is(typeof(EVP_F_EVP_PKCS82PKEY))) {
        private enum enumMixinStr_EVP_F_EVP_PKCS82PKEY = `enum EVP_F_EVP_PKCS82PKEY = 111;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_F_EVP_PKCS82PKEY); }))) {
            mixin(enumMixinStr_EVP_F_EVP_PKCS82PKEY);
        }
    }




    static if(!is(typeof(EVP_F_EVP_PKEY2PKCS8))) {
        private enum enumMixinStr_EVP_F_EVP_PKEY2PKCS8 = `enum EVP_F_EVP_PKEY2PKCS8 = 113;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_F_EVP_PKEY2PKCS8); }))) {
            mixin(enumMixinStr_EVP_F_EVP_PKEY2PKCS8);
        }
    }




    static if(!is(typeof(EVP_F_EVP_PKEY_ASN1_ADD0))) {
        private enum enumMixinStr_EVP_F_EVP_PKEY_ASN1_ADD0 = `enum EVP_F_EVP_PKEY_ASN1_ADD0 = 188;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_F_EVP_PKEY_ASN1_ADD0); }))) {
            mixin(enumMixinStr_EVP_F_EVP_PKEY_ASN1_ADD0);
        }
    }




    static if(!is(typeof(EVP_F_EVP_PKEY_CHECK))) {
        private enum enumMixinStr_EVP_F_EVP_PKEY_CHECK = `enum EVP_F_EVP_PKEY_CHECK = 186;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_F_EVP_PKEY_CHECK); }))) {
            mixin(enumMixinStr_EVP_F_EVP_PKEY_CHECK);
        }
    }




    static if(!is(typeof(EVP_F_EVP_PKEY_COPY_PARAMETERS))) {
        private enum enumMixinStr_EVP_F_EVP_PKEY_COPY_PARAMETERS = `enum EVP_F_EVP_PKEY_COPY_PARAMETERS = 103;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_F_EVP_PKEY_COPY_PARAMETERS); }))) {
            mixin(enumMixinStr_EVP_F_EVP_PKEY_COPY_PARAMETERS);
        }
    }




    static if(!is(typeof(EVP_F_EVP_PKEY_CTX_CTRL))) {
        private enum enumMixinStr_EVP_F_EVP_PKEY_CTX_CTRL = `enum EVP_F_EVP_PKEY_CTX_CTRL = 137;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_F_EVP_PKEY_CTX_CTRL); }))) {
            mixin(enumMixinStr_EVP_F_EVP_PKEY_CTX_CTRL);
        }
    }




    static if(!is(typeof(EVP_F_EVP_PKEY_CTX_CTRL_STR))) {
        private enum enumMixinStr_EVP_F_EVP_PKEY_CTX_CTRL_STR = `enum EVP_F_EVP_PKEY_CTX_CTRL_STR = 150;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_F_EVP_PKEY_CTX_CTRL_STR); }))) {
            mixin(enumMixinStr_EVP_F_EVP_PKEY_CTX_CTRL_STR);
        }
    }




    static if(!is(typeof(EVP_F_EVP_PKEY_CTX_DUP))) {
        private enum enumMixinStr_EVP_F_EVP_PKEY_CTX_DUP = `enum EVP_F_EVP_PKEY_CTX_DUP = 156;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_F_EVP_PKEY_CTX_DUP); }))) {
            mixin(enumMixinStr_EVP_F_EVP_PKEY_CTX_DUP);
        }
    }




    static if(!is(typeof(EVP_F_EVP_PKEY_CTX_MD))) {
        private enum enumMixinStr_EVP_F_EVP_PKEY_CTX_MD = `enum EVP_F_EVP_PKEY_CTX_MD = 168;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_F_EVP_PKEY_CTX_MD); }))) {
            mixin(enumMixinStr_EVP_F_EVP_PKEY_CTX_MD);
        }
    }




    static if(!is(typeof(EVP_F_EVP_PKEY_DECRYPT))) {
        private enum enumMixinStr_EVP_F_EVP_PKEY_DECRYPT = `enum EVP_F_EVP_PKEY_DECRYPT = 104;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_F_EVP_PKEY_DECRYPT); }))) {
            mixin(enumMixinStr_EVP_F_EVP_PKEY_DECRYPT);
        }
    }




    static if(!is(typeof(EVP_F_EVP_PKEY_DECRYPT_INIT))) {
        private enum enumMixinStr_EVP_F_EVP_PKEY_DECRYPT_INIT = `enum EVP_F_EVP_PKEY_DECRYPT_INIT = 138;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_F_EVP_PKEY_DECRYPT_INIT); }))) {
            mixin(enumMixinStr_EVP_F_EVP_PKEY_DECRYPT_INIT);
        }
    }




    static if(!is(typeof(EVP_F_EVP_PKEY_DECRYPT_OLD))) {
        private enum enumMixinStr_EVP_F_EVP_PKEY_DECRYPT_OLD = `enum EVP_F_EVP_PKEY_DECRYPT_OLD = 151;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_F_EVP_PKEY_DECRYPT_OLD); }))) {
            mixin(enumMixinStr_EVP_F_EVP_PKEY_DECRYPT_OLD);
        }
    }




    static if(!is(typeof(EVP_F_EVP_PKEY_DERIVE))) {
        private enum enumMixinStr_EVP_F_EVP_PKEY_DERIVE = `enum EVP_F_EVP_PKEY_DERIVE = 153;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_F_EVP_PKEY_DERIVE); }))) {
            mixin(enumMixinStr_EVP_F_EVP_PKEY_DERIVE);
        }
    }




    static if(!is(typeof(EVP_F_EVP_PKEY_DERIVE_INIT))) {
        private enum enumMixinStr_EVP_F_EVP_PKEY_DERIVE_INIT = `enum EVP_F_EVP_PKEY_DERIVE_INIT = 154;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_F_EVP_PKEY_DERIVE_INIT); }))) {
            mixin(enumMixinStr_EVP_F_EVP_PKEY_DERIVE_INIT);
        }
    }




    static if(!is(typeof(EVP_F_EVP_PKEY_DERIVE_SET_PEER))) {
        private enum enumMixinStr_EVP_F_EVP_PKEY_DERIVE_SET_PEER = `enum EVP_F_EVP_PKEY_DERIVE_SET_PEER = 155;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_F_EVP_PKEY_DERIVE_SET_PEER); }))) {
            mixin(enumMixinStr_EVP_F_EVP_PKEY_DERIVE_SET_PEER);
        }
    }




    static if(!is(typeof(EVP_F_EVP_PKEY_ENCRYPT))) {
        private enum enumMixinStr_EVP_F_EVP_PKEY_ENCRYPT = `enum EVP_F_EVP_PKEY_ENCRYPT = 105;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_F_EVP_PKEY_ENCRYPT); }))) {
            mixin(enumMixinStr_EVP_F_EVP_PKEY_ENCRYPT);
        }
    }




    static if(!is(typeof(EVP_F_EVP_PKEY_ENCRYPT_INIT))) {
        private enum enumMixinStr_EVP_F_EVP_PKEY_ENCRYPT_INIT = `enum EVP_F_EVP_PKEY_ENCRYPT_INIT = 139;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_F_EVP_PKEY_ENCRYPT_INIT); }))) {
            mixin(enumMixinStr_EVP_F_EVP_PKEY_ENCRYPT_INIT);
        }
    }




    static if(!is(typeof(EVP_F_EVP_PKEY_ENCRYPT_OLD))) {
        private enum enumMixinStr_EVP_F_EVP_PKEY_ENCRYPT_OLD = `enum EVP_F_EVP_PKEY_ENCRYPT_OLD = 152;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_F_EVP_PKEY_ENCRYPT_OLD); }))) {
            mixin(enumMixinStr_EVP_F_EVP_PKEY_ENCRYPT_OLD);
        }
    }




    static if(!is(typeof(EVP_F_EVP_PKEY_GET0_DH))) {
        private enum enumMixinStr_EVP_F_EVP_PKEY_GET0_DH = `enum EVP_F_EVP_PKEY_GET0_DH = 119;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_F_EVP_PKEY_GET0_DH); }))) {
            mixin(enumMixinStr_EVP_F_EVP_PKEY_GET0_DH);
        }
    }




    static if(!is(typeof(EVP_F_EVP_PKEY_GET0_DSA))) {
        private enum enumMixinStr_EVP_F_EVP_PKEY_GET0_DSA = `enum EVP_F_EVP_PKEY_GET0_DSA = 120;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_F_EVP_PKEY_GET0_DSA); }))) {
            mixin(enumMixinStr_EVP_F_EVP_PKEY_GET0_DSA);
        }
    }




    static if(!is(typeof(EVP_F_EVP_PKEY_GET0_EC_KEY))) {
        private enum enumMixinStr_EVP_F_EVP_PKEY_GET0_EC_KEY = `enum EVP_F_EVP_PKEY_GET0_EC_KEY = 131;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_F_EVP_PKEY_GET0_EC_KEY); }))) {
            mixin(enumMixinStr_EVP_F_EVP_PKEY_GET0_EC_KEY);
        }
    }




    static if(!is(typeof(EVP_F_EVP_PKEY_GET0_HMAC))) {
        private enum enumMixinStr_EVP_F_EVP_PKEY_GET0_HMAC = `enum EVP_F_EVP_PKEY_GET0_HMAC = 183;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_F_EVP_PKEY_GET0_HMAC); }))) {
            mixin(enumMixinStr_EVP_F_EVP_PKEY_GET0_HMAC);
        }
    }




    static if(!is(typeof(EVP_F_EVP_PKEY_GET0_POLY1305))) {
        private enum enumMixinStr_EVP_F_EVP_PKEY_GET0_POLY1305 = `enum EVP_F_EVP_PKEY_GET0_POLY1305 = 184;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_F_EVP_PKEY_GET0_POLY1305); }))) {
            mixin(enumMixinStr_EVP_F_EVP_PKEY_GET0_POLY1305);
        }
    }




    static if(!is(typeof(EVP_F_EVP_PKEY_GET0_RSA))) {
        private enum enumMixinStr_EVP_F_EVP_PKEY_GET0_RSA = `enum EVP_F_EVP_PKEY_GET0_RSA = 121;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_F_EVP_PKEY_GET0_RSA); }))) {
            mixin(enumMixinStr_EVP_F_EVP_PKEY_GET0_RSA);
        }
    }




    static if(!is(typeof(EVP_F_EVP_PKEY_GET0_SIPHASH))) {
        private enum enumMixinStr_EVP_F_EVP_PKEY_GET0_SIPHASH = `enum EVP_F_EVP_PKEY_GET0_SIPHASH = 172;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_F_EVP_PKEY_GET0_SIPHASH); }))) {
            mixin(enumMixinStr_EVP_F_EVP_PKEY_GET0_SIPHASH);
        }
    }




    static if(!is(typeof(EVP_F_EVP_PKEY_GET_RAW_PRIVATE_KEY))) {
        private enum enumMixinStr_EVP_F_EVP_PKEY_GET_RAW_PRIVATE_KEY = `enum EVP_F_EVP_PKEY_GET_RAW_PRIVATE_KEY = 202;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_F_EVP_PKEY_GET_RAW_PRIVATE_KEY); }))) {
            mixin(enumMixinStr_EVP_F_EVP_PKEY_GET_RAW_PRIVATE_KEY);
        }
    }




    static if(!is(typeof(EVP_F_EVP_PKEY_GET_RAW_PUBLIC_KEY))) {
        private enum enumMixinStr_EVP_F_EVP_PKEY_GET_RAW_PUBLIC_KEY = `enum EVP_F_EVP_PKEY_GET_RAW_PUBLIC_KEY = 203;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_F_EVP_PKEY_GET_RAW_PUBLIC_KEY); }))) {
            mixin(enumMixinStr_EVP_F_EVP_PKEY_GET_RAW_PUBLIC_KEY);
        }
    }




    static if(!is(typeof(EVP_F_EVP_PKEY_KEYGEN))) {
        private enum enumMixinStr_EVP_F_EVP_PKEY_KEYGEN = `enum EVP_F_EVP_PKEY_KEYGEN = 146;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_F_EVP_PKEY_KEYGEN); }))) {
            mixin(enumMixinStr_EVP_F_EVP_PKEY_KEYGEN);
        }
    }




    static if(!is(typeof(EVP_F_EVP_PKEY_KEYGEN_INIT))) {
        private enum enumMixinStr_EVP_F_EVP_PKEY_KEYGEN_INIT = `enum EVP_F_EVP_PKEY_KEYGEN_INIT = 147;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_F_EVP_PKEY_KEYGEN_INIT); }))) {
            mixin(enumMixinStr_EVP_F_EVP_PKEY_KEYGEN_INIT);
        }
    }




    static if(!is(typeof(EVP_F_EVP_PKEY_METH_ADD0))) {
        private enum enumMixinStr_EVP_F_EVP_PKEY_METH_ADD0 = `enum EVP_F_EVP_PKEY_METH_ADD0 = 194;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_F_EVP_PKEY_METH_ADD0); }))) {
            mixin(enumMixinStr_EVP_F_EVP_PKEY_METH_ADD0);
        }
    }




    static if(!is(typeof(EVP_F_EVP_PKEY_METH_NEW))) {
        private enum enumMixinStr_EVP_F_EVP_PKEY_METH_NEW = `enum EVP_F_EVP_PKEY_METH_NEW = 195;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_F_EVP_PKEY_METH_NEW); }))) {
            mixin(enumMixinStr_EVP_F_EVP_PKEY_METH_NEW);
        }
    }




    static if(!is(typeof(EVP_F_EVP_PKEY_NEW))) {
        private enum enumMixinStr_EVP_F_EVP_PKEY_NEW = `enum EVP_F_EVP_PKEY_NEW = 106;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_F_EVP_PKEY_NEW); }))) {
            mixin(enumMixinStr_EVP_F_EVP_PKEY_NEW);
        }
    }




    static if(!is(typeof(EVP_F_EVP_PKEY_NEW_CMAC_KEY))) {
        private enum enumMixinStr_EVP_F_EVP_PKEY_NEW_CMAC_KEY = `enum EVP_F_EVP_PKEY_NEW_CMAC_KEY = 193;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_F_EVP_PKEY_NEW_CMAC_KEY); }))) {
            mixin(enumMixinStr_EVP_F_EVP_PKEY_NEW_CMAC_KEY);
        }
    }




    static if(!is(typeof(EVP_F_EVP_PKEY_NEW_RAW_PRIVATE_KEY))) {
        private enum enumMixinStr_EVP_F_EVP_PKEY_NEW_RAW_PRIVATE_KEY = `enum EVP_F_EVP_PKEY_NEW_RAW_PRIVATE_KEY = 191;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_F_EVP_PKEY_NEW_RAW_PRIVATE_KEY); }))) {
            mixin(enumMixinStr_EVP_F_EVP_PKEY_NEW_RAW_PRIVATE_KEY);
        }
    }




    static if(!is(typeof(EVP_F_EVP_PKEY_NEW_RAW_PUBLIC_KEY))) {
        private enum enumMixinStr_EVP_F_EVP_PKEY_NEW_RAW_PUBLIC_KEY = `enum EVP_F_EVP_PKEY_NEW_RAW_PUBLIC_KEY = 192;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_F_EVP_PKEY_NEW_RAW_PUBLIC_KEY); }))) {
            mixin(enumMixinStr_EVP_F_EVP_PKEY_NEW_RAW_PUBLIC_KEY);
        }
    }




    static if(!is(typeof(EVP_F_EVP_PKEY_PARAMGEN))) {
        private enum enumMixinStr_EVP_F_EVP_PKEY_PARAMGEN = `enum EVP_F_EVP_PKEY_PARAMGEN = 148;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_F_EVP_PKEY_PARAMGEN); }))) {
            mixin(enumMixinStr_EVP_F_EVP_PKEY_PARAMGEN);
        }
    }




    static if(!is(typeof(EVP_F_EVP_PKEY_PARAMGEN_INIT))) {
        private enum enumMixinStr_EVP_F_EVP_PKEY_PARAMGEN_INIT = `enum EVP_F_EVP_PKEY_PARAMGEN_INIT = 149;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_F_EVP_PKEY_PARAMGEN_INIT); }))) {
            mixin(enumMixinStr_EVP_F_EVP_PKEY_PARAMGEN_INIT);
        }
    }




    static if(!is(typeof(EVP_F_EVP_PKEY_PARAM_CHECK))) {
        private enum enumMixinStr_EVP_F_EVP_PKEY_PARAM_CHECK = `enum EVP_F_EVP_PKEY_PARAM_CHECK = 189;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_F_EVP_PKEY_PARAM_CHECK); }))) {
            mixin(enumMixinStr_EVP_F_EVP_PKEY_PARAM_CHECK);
        }
    }




    static if(!is(typeof(EVP_F_EVP_PKEY_PUBLIC_CHECK))) {
        private enum enumMixinStr_EVP_F_EVP_PKEY_PUBLIC_CHECK = `enum EVP_F_EVP_PKEY_PUBLIC_CHECK = 190;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_F_EVP_PKEY_PUBLIC_CHECK); }))) {
            mixin(enumMixinStr_EVP_F_EVP_PKEY_PUBLIC_CHECK);
        }
    }




    static if(!is(typeof(EVP_F_EVP_PKEY_SET1_ENGINE))) {
        private enum enumMixinStr_EVP_F_EVP_PKEY_SET1_ENGINE = `enum EVP_F_EVP_PKEY_SET1_ENGINE = 187;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_F_EVP_PKEY_SET1_ENGINE); }))) {
            mixin(enumMixinStr_EVP_F_EVP_PKEY_SET1_ENGINE);
        }
    }




    static if(!is(typeof(EVP_F_EVP_PKEY_SET_ALIAS_TYPE))) {
        private enum enumMixinStr_EVP_F_EVP_PKEY_SET_ALIAS_TYPE = `enum EVP_F_EVP_PKEY_SET_ALIAS_TYPE = 206;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_F_EVP_PKEY_SET_ALIAS_TYPE); }))) {
            mixin(enumMixinStr_EVP_F_EVP_PKEY_SET_ALIAS_TYPE);
        }
    }




    static if(!is(typeof(EVP_F_EVP_PKEY_SIGN))) {
        private enum enumMixinStr_EVP_F_EVP_PKEY_SIGN = `enum EVP_F_EVP_PKEY_SIGN = 140;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_F_EVP_PKEY_SIGN); }))) {
            mixin(enumMixinStr_EVP_F_EVP_PKEY_SIGN);
        }
    }




    static if(!is(typeof(EVP_F_EVP_PKEY_SIGN_INIT))) {
        private enum enumMixinStr_EVP_F_EVP_PKEY_SIGN_INIT = `enum EVP_F_EVP_PKEY_SIGN_INIT = 141;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_F_EVP_PKEY_SIGN_INIT); }))) {
            mixin(enumMixinStr_EVP_F_EVP_PKEY_SIGN_INIT);
        }
    }




    static if(!is(typeof(EVP_F_EVP_PKEY_VERIFY))) {
        private enum enumMixinStr_EVP_F_EVP_PKEY_VERIFY = `enum EVP_F_EVP_PKEY_VERIFY = 142;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_F_EVP_PKEY_VERIFY); }))) {
            mixin(enumMixinStr_EVP_F_EVP_PKEY_VERIFY);
        }
    }




    static if(!is(typeof(EVP_F_EVP_PKEY_VERIFY_INIT))) {
        private enum enumMixinStr_EVP_F_EVP_PKEY_VERIFY_INIT = `enum EVP_F_EVP_PKEY_VERIFY_INIT = 143;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_F_EVP_PKEY_VERIFY_INIT); }))) {
            mixin(enumMixinStr_EVP_F_EVP_PKEY_VERIFY_INIT);
        }
    }




    static if(!is(typeof(EVP_F_EVP_PKEY_VERIFY_RECOVER))) {
        private enum enumMixinStr_EVP_F_EVP_PKEY_VERIFY_RECOVER = `enum EVP_F_EVP_PKEY_VERIFY_RECOVER = 144;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_F_EVP_PKEY_VERIFY_RECOVER); }))) {
            mixin(enumMixinStr_EVP_F_EVP_PKEY_VERIFY_RECOVER);
        }
    }




    static if(!is(typeof(EVP_F_EVP_PKEY_VERIFY_RECOVER_INIT))) {
        private enum enumMixinStr_EVP_F_EVP_PKEY_VERIFY_RECOVER_INIT = `enum EVP_F_EVP_PKEY_VERIFY_RECOVER_INIT = 145;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_F_EVP_PKEY_VERIFY_RECOVER_INIT); }))) {
            mixin(enumMixinStr_EVP_F_EVP_PKEY_VERIFY_RECOVER_INIT);
        }
    }




    static if(!is(typeof(EVP_F_EVP_SIGNFINAL))) {
        private enum enumMixinStr_EVP_F_EVP_SIGNFINAL = `enum EVP_F_EVP_SIGNFINAL = 107;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_F_EVP_SIGNFINAL); }))) {
            mixin(enumMixinStr_EVP_F_EVP_SIGNFINAL);
        }
    }




    static if(!is(typeof(EVP_F_EVP_VERIFYFINAL))) {
        private enum enumMixinStr_EVP_F_EVP_VERIFYFINAL = `enum EVP_F_EVP_VERIFYFINAL = 108;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_F_EVP_VERIFYFINAL); }))) {
            mixin(enumMixinStr_EVP_F_EVP_VERIFYFINAL);
        }
    }




    static if(!is(typeof(EVP_F_INT_CTX_NEW))) {
        private enum enumMixinStr_EVP_F_INT_CTX_NEW = `enum EVP_F_INT_CTX_NEW = 157;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_F_INT_CTX_NEW); }))) {
            mixin(enumMixinStr_EVP_F_INT_CTX_NEW);
        }
    }




    static if(!is(typeof(EVP_F_OK_NEW))) {
        private enum enumMixinStr_EVP_F_OK_NEW = `enum EVP_F_OK_NEW = 200;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_F_OK_NEW); }))) {
            mixin(enumMixinStr_EVP_F_OK_NEW);
        }
    }




    static if(!is(typeof(EVP_F_PKCS5_PBE_KEYIVGEN))) {
        private enum enumMixinStr_EVP_F_PKCS5_PBE_KEYIVGEN = `enum EVP_F_PKCS5_PBE_KEYIVGEN = 117;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_F_PKCS5_PBE_KEYIVGEN); }))) {
            mixin(enumMixinStr_EVP_F_PKCS5_PBE_KEYIVGEN);
        }
    }




    static if(!is(typeof(EVP_F_PKCS5_V2_PBE_KEYIVGEN))) {
        private enum enumMixinStr_EVP_F_PKCS5_V2_PBE_KEYIVGEN = `enum EVP_F_PKCS5_V2_PBE_KEYIVGEN = 118;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_F_PKCS5_V2_PBE_KEYIVGEN); }))) {
            mixin(enumMixinStr_EVP_F_PKCS5_V2_PBE_KEYIVGEN);
        }
    }




    static if(!is(typeof(EVP_F_PKCS5_V2_PBKDF2_KEYIVGEN))) {
        private enum enumMixinStr_EVP_F_PKCS5_V2_PBKDF2_KEYIVGEN = `enum EVP_F_PKCS5_V2_PBKDF2_KEYIVGEN = 164;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_F_PKCS5_V2_PBKDF2_KEYIVGEN); }))) {
            mixin(enumMixinStr_EVP_F_PKCS5_V2_PBKDF2_KEYIVGEN);
        }
    }




    static if(!is(typeof(EVP_F_PKCS5_V2_SCRYPT_KEYIVGEN))) {
        private enum enumMixinStr_EVP_F_PKCS5_V2_SCRYPT_KEYIVGEN = `enum EVP_F_PKCS5_V2_SCRYPT_KEYIVGEN = 180;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_F_PKCS5_V2_SCRYPT_KEYIVGEN); }))) {
            mixin(enumMixinStr_EVP_F_PKCS5_V2_SCRYPT_KEYIVGEN);
        }
    }




    static if(!is(typeof(EVP_F_PKEY_SET_TYPE))) {
        private enum enumMixinStr_EVP_F_PKEY_SET_TYPE = `enum EVP_F_PKEY_SET_TYPE = 158;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_F_PKEY_SET_TYPE); }))) {
            mixin(enumMixinStr_EVP_F_PKEY_SET_TYPE);
        }
    }




    static if(!is(typeof(EVP_F_RC2_MAGIC_TO_METH))) {
        private enum enumMixinStr_EVP_F_RC2_MAGIC_TO_METH = `enum EVP_F_RC2_MAGIC_TO_METH = 109;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_F_RC2_MAGIC_TO_METH); }))) {
            mixin(enumMixinStr_EVP_F_RC2_MAGIC_TO_METH);
        }
    }




    static if(!is(typeof(EVP_F_RC5_CTRL))) {
        private enum enumMixinStr_EVP_F_RC5_CTRL = `enum EVP_F_RC5_CTRL = 125;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_F_RC5_CTRL); }))) {
            mixin(enumMixinStr_EVP_F_RC5_CTRL);
        }
    }




    static if(!is(typeof(EVP_F_R_32_12_16_INIT_KEY))) {
        private enum enumMixinStr_EVP_F_R_32_12_16_INIT_KEY = `enum EVP_F_R_32_12_16_INIT_KEY = 242;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_F_R_32_12_16_INIT_KEY); }))) {
            mixin(enumMixinStr_EVP_F_R_32_12_16_INIT_KEY);
        }
    }




    static if(!is(typeof(EVP_F_S390X_AES_GCM_CTRL))) {
        private enum enumMixinStr_EVP_F_S390X_AES_GCM_CTRL = `enum EVP_F_S390X_AES_GCM_CTRL = 201;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_F_S390X_AES_GCM_CTRL); }))) {
            mixin(enumMixinStr_EVP_F_S390X_AES_GCM_CTRL);
        }
    }




    static if(!is(typeof(EVP_F_UPDATE))) {
        private enum enumMixinStr_EVP_F_UPDATE = `enum EVP_F_UPDATE = 173;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_F_UPDATE); }))) {
            mixin(enumMixinStr_EVP_F_UPDATE);
        }
    }




    static if(!is(typeof(EVP_R_AES_KEY_SETUP_FAILED))) {
        private enum enumMixinStr_EVP_R_AES_KEY_SETUP_FAILED = `enum EVP_R_AES_KEY_SETUP_FAILED = 143;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_R_AES_KEY_SETUP_FAILED); }))) {
            mixin(enumMixinStr_EVP_R_AES_KEY_SETUP_FAILED);
        }
    }




    static if(!is(typeof(EVP_R_ARIA_KEY_SETUP_FAILED))) {
        private enum enumMixinStr_EVP_R_ARIA_KEY_SETUP_FAILED = `enum EVP_R_ARIA_KEY_SETUP_FAILED = 176;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_R_ARIA_KEY_SETUP_FAILED); }))) {
            mixin(enumMixinStr_EVP_R_ARIA_KEY_SETUP_FAILED);
        }
    }




    static if(!is(typeof(EVP_R_BAD_DECRYPT))) {
        private enum enumMixinStr_EVP_R_BAD_DECRYPT = `enum EVP_R_BAD_DECRYPT = 100;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_R_BAD_DECRYPT); }))) {
            mixin(enumMixinStr_EVP_R_BAD_DECRYPT);
        }
    }




    static if(!is(typeof(EVP_R_BAD_KEY_LENGTH))) {
        private enum enumMixinStr_EVP_R_BAD_KEY_LENGTH = `enum EVP_R_BAD_KEY_LENGTH = 195;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_R_BAD_KEY_LENGTH); }))) {
            mixin(enumMixinStr_EVP_R_BAD_KEY_LENGTH);
        }
    }




    static if(!is(typeof(EVP_R_BUFFER_TOO_SMALL))) {
        private enum enumMixinStr_EVP_R_BUFFER_TOO_SMALL = `enum EVP_R_BUFFER_TOO_SMALL = 155;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_R_BUFFER_TOO_SMALL); }))) {
            mixin(enumMixinStr_EVP_R_BUFFER_TOO_SMALL);
        }
    }




    static if(!is(typeof(EVP_R_CAMELLIA_KEY_SETUP_FAILED))) {
        private enum enumMixinStr_EVP_R_CAMELLIA_KEY_SETUP_FAILED = `enum EVP_R_CAMELLIA_KEY_SETUP_FAILED = 157;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_R_CAMELLIA_KEY_SETUP_FAILED); }))) {
            mixin(enumMixinStr_EVP_R_CAMELLIA_KEY_SETUP_FAILED);
        }
    }




    static if(!is(typeof(EVP_R_CIPHER_PARAMETER_ERROR))) {
        private enum enumMixinStr_EVP_R_CIPHER_PARAMETER_ERROR = `enum EVP_R_CIPHER_PARAMETER_ERROR = 122;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_R_CIPHER_PARAMETER_ERROR); }))) {
            mixin(enumMixinStr_EVP_R_CIPHER_PARAMETER_ERROR);
        }
    }




    static if(!is(typeof(EVP_R_COMMAND_NOT_SUPPORTED))) {
        private enum enumMixinStr_EVP_R_COMMAND_NOT_SUPPORTED = `enum EVP_R_COMMAND_NOT_SUPPORTED = 147;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_R_COMMAND_NOT_SUPPORTED); }))) {
            mixin(enumMixinStr_EVP_R_COMMAND_NOT_SUPPORTED);
        }
    }




    static if(!is(typeof(EVP_R_COPY_ERROR))) {
        private enum enumMixinStr_EVP_R_COPY_ERROR = `enum EVP_R_COPY_ERROR = 173;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_R_COPY_ERROR); }))) {
            mixin(enumMixinStr_EVP_R_COPY_ERROR);
        }
    }




    static if(!is(typeof(EVP_R_CTRL_NOT_IMPLEMENTED))) {
        private enum enumMixinStr_EVP_R_CTRL_NOT_IMPLEMENTED = `enum EVP_R_CTRL_NOT_IMPLEMENTED = 132;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_R_CTRL_NOT_IMPLEMENTED); }))) {
            mixin(enumMixinStr_EVP_R_CTRL_NOT_IMPLEMENTED);
        }
    }




    static if(!is(typeof(EVP_R_CTRL_OPERATION_NOT_IMPLEMENTED))) {
        private enum enumMixinStr_EVP_R_CTRL_OPERATION_NOT_IMPLEMENTED = `enum EVP_R_CTRL_OPERATION_NOT_IMPLEMENTED = 133;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_R_CTRL_OPERATION_NOT_IMPLEMENTED); }))) {
            mixin(enumMixinStr_EVP_R_CTRL_OPERATION_NOT_IMPLEMENTED);
        }
    }




    static if(!is(typeof(EVP_R_DATA_NOT_MULTIPLE_OF_BLOCK_LENGTH))) {
        private enum enumMixinStr_EVP_R_DATA_NOT_MULTIPLE_OF_BLOCK_LENGTH = `enum EVP_R_DATA_NOT_MULTIPLE_OF_BLOCK_LENGTH = 138;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_R_DATA_NOT_MULTIPLE_OF_BLOCK_LENGTH); }))) {
            mixin(enumMixinStr_EVP_R_DATA_NOT_MULTIPLE_OF_BLOCK_LENGTH);
        }
    }




    static if(!is(typeof(EVP_R_DECODE_ERROR))) {
        private enum enumMixinStr_EVP_R_DECODE_ERROR = `enum EVP_R_DECODE_ERROR = 114;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_R_DECODE_ERROR); }))) {
            mixin(enumMixinStr_EVP_R_DECODE_ERROR);
        }
    }




    static if(!is(typeof(EVP_R_DIFFERENT_KEY_TYPES))) {
        private enum enumMixinStr_EVP_R_DIFFERENT_KEY_TYPES = `enum EVP_R_DIFFERENT_KEY_TYPES = 101;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_R_DIFFERENT_KEY_TYPES); }))) {
            mixin(enumMixinStr_EVP_R_DIFFERENT_KEY_TYPES);
        }
    }




    static if(!is(typeof(EVP_R_DIFFERENT_PARAMETERS))) {
        private enum enumMixinStr_EVP_R_DIFFERENT_PARAMETERS = `enum EVP_R_DIFFERENT_PARAMETERS = 153;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_R_DIFFERENT_PARAMETERS); }))) {
            mixin(enumMixinStr_EVP_R_DIFFERENT_PARAMETERS);
        }
    }




    static if(!is(typeof(EVP_R_ERROR_LOADING_SECTION))) {
        private enum enumMixinStr_EVP_R_ERROR_LOADING_SECTION = `enum EVP_R_ERROR_LOADING_SECTION = 165;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_R_ERROR_LOADING_SECTION); }))) {
            mixin(enumMixinStr_EVP_R_ERROR_LOADING_SECTION);
        }
    }




    static if(!is(typeof(EVP_R_ERROR_SETTING_FIPS_MODE))) {
        private enum enumMixinStr_EVP_R_ERROR_SETTING_FIPS_MODE = `enum EVP_R_ERROR_SETTING_FIPS_MODE = 166;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_R_ERROR_SETTING_FIPS_MODE); }))) {
            mixin(enumMixinStr_EVP_R_ERROR_SETTING_FIPS_MODE);
        }
    }




    static if(!is(typeof(EVP_R_EXPECTING_AN_HMAC_KEY))) {
        private enum enumMixinStr_EVP_R_EXPECTING_AN_HMAC_KEY = `enum EVP_R_EXPECTING_AN_HMAC_KEY = 174;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_R_EXPECTING_AN_HMAC_KEY); }))) {
            mixin(enumMixinStr_EVP_R_EXPECTING_AN_HMAC_KEY);
        }
    }




    static if(!is(typeof(EVP_R_EXPECTING_AN_RSA_KEY))) {
        private enum enumMixinStr_EVP_R_EXPECTING_AN_RSA_KEY = `enum EVP_R_EXPECTING_AN_RSA_KEY = 127;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_R_EXPECTING_AN_RSA_KEY); }))) {
            mixin(enumMixinStr_EVP_R_EXPECTING_AN_RSA_KEY);
        }
    }




    static if(!is(typeof(EVP_R_EXPECTING_A_DH_KEY))) {
        private enum enumMixinStr_EVP_R_EXPECTING_A_DH_KEY = `enum EVP_R_EXPECTING_A_DH_KEY = 128;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_R_EXPECTING_A_DH_KEY); }))) {
            mixin(enumMixinStr_EVP_R_EXPECTING_A_DH_KEY);
        }
    }




    static if(!is(typeof(EVP_R_EXPECTING_A_DSA_KEY))) {
        private enum enumMixinStr_EVP_R_EXPECTING_A_DSA_KEY = `enum EVP_R_EXPECTING_A_DSA_KEY = 129;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_R_EXPECTING_A_DSA_KEY); }))) {
            mixin(enumMixinStr_EVP_R_EXPECTING_A_DSA_KEY);
        }
    }




    static if(!is(typeof(EVP_R_EXPECTING_A_EC_KEY))) {
        private enum enumMixinStr_EVP_R_EXPECTING_A_EC_KEY = `enum EVP_R_EXPECTING_A_EC_KEY = 142;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_R_EXPECTING_A_EC_KEY); }))) {
            mixin(enumMixinStr_EVP_R_EXPECTING_A_EC_KEY);
        }
    }




    static if(!is(typeof(EVP_R_EXPECTING_A_POLY1305_KEY))) {
        private enum enumMixinStr_EVP_R_EXPECTING_A_POLY1305_KEY = `enum EVP_R_EXPECTING_A_POLY1305_KEY = 164;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_R_EXPECTING_A_POLY1305_KEY); }))) {
            mixin(enumMixinStr_EVP_R_EXPECTING_A_POLY1305_KEY);
        }
    }




    static if(!is(typeof(EVP_R_EXPECTING_A_SIPHASH_KEY))) {
        private enum enumMixinStr_EVP_R_EXPECTING_A_SIPHASH_KEY = `enum EVP_R_EXPECTING_A_SIPHASH_KEY = 175;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_R_EXPECTING_A_SIPHASH_KEY); }))) {
            mixin(enumMixinStr_EVP_R_EXPECTING_A_SIPHASH_KEY);
        }
    }




    static if(!is(typeof(EVP_R_FIPS_MODE_NOT_SUPPORTED))) {
        private enum enumMixinStr_EVP_R_FIPS_MODE_NOT_SUPPORTED = `enum EVP_R_FIPS_MODE_NOT_SUPPORTED = 167;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_R_FIPS_MODE_NOT_SUPPORTED); }))) {
            mixin(enumMixinStr_EVP_R_FIPS_MODE_NOT_SUPPORTED);
        }
    }




    static if(!is(typeof(EVP_R_GET_RAW_KEY_FAILED))) {
        private enum enumMixinStr_EVP_R_GET_RAW_KEY_FAILED = `enum EVP_R_GET_RAW_KEY_FAILED = 182;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_R_GET_RAW_KEY_FAILED); }))) {
            mixin(enumMixinStr_EVP_R_GET_RAW_KEY_FAILED);
        }
    }




    static if(!is(typeof(EVP_R_ILLEGAL_SCRYPT_PARAMETERS))) {
        private enum enumMixinStr_EVP_R_ILLEGAL_SCRYPT_PARAMETERS = `enum EVP_R_ILLEGAL_SCRYPT_PARAMETERS = 171;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_R_ILLEGAL_SCRYPT_PARAMETERS); }))) {
            mixin(enumMixinStr_EVP_R_ILLEGAL_SCRYPT_PARAMETERS);
        }
    }




    static if(!is(typeof(EVP_R_INITIALIZATION_ERROR))) {
        private enum enumMixinStr_EVP_R_INITIALIZATION_ERROR = `enum EVP_R_INITIALIZATION_ERROR = 134;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_R_INITIALIZATION_ERROR); }))) {
            mixin(enumMixinStr_EVP_R_INITIALIZATION_ERROR);
        }
    }




    static if(!is(typeof(EVP_R_INPUT_NOT_INITIALIZED))) {
        private enum enumMixinStr_EVP_R_INPUT_NOT_INITIALIZED = `enum EVP_R_INPUT_NOT_INITIALIZED = 111;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_R_INPUT_NOT_INITIALIZED); }))) {
            mixin(enumMixinStr_EVP_R_INPUT_NOT_INITIALIZED);
        }
    }




    static if(!is(typeof(EVP_R_INVALID_DIGEST))) {
        private enum enumMixinStr_EVP_R_INVALID_DIGEST = `enum EVP_R_INVALID_DIGEST = 152;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_R_INVALID_DIGEST); }))) {
            mixin(enumMixinStr_EVP_R_INVALID_DIGEST);
        }
    }




    static if(!is(typeof(EVP_R_INVALID_FIPS_MODE))) {
        private enum enumMixinStr_EVP_R_INVALID_FIPS_MODE = `enum EVP_R_INVALID_FIPS_MODE = 168;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_R_INVALID_FIPS_MODE); }))) {
            mixin(enumMixinStr_EVP_R_INVALID_FIPS_MODE);
        }
    }




    static if(!is(typeof(EVP_R_INVALID_IV_LENGTH))) {
        private enum enumMixinStr_EVP_R_INVALID_IV_LENGTH = `enum EVP_R_INVALID_IV_LENGTH = 194;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_R_INVALID_IV_LENGTH); }))) {
            mixin(enumMixinStr_EVP_R_INVALID_IV_LENGTH);
        }
    }




    static if(!is(typeof(EVP_R_INVALID_KEY))) {
        private enum enumMixinStr_EVP_R_INVALID_KEY = `enum EVP_R_INVALID_KEY = 163;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_R_INVALID_KEY); }))) {
            mixin(enumMixinStr_EVP_R_INVALID_KEY);
        }
    }




    static if(!is(typeof(EVP_R_INVALID_KEY_LENGTH))) {
        private enum enumMixinStr_EVP_R_INVALID_KEY_LENGTH = `enum EVP_R_INVALID_KEY_LENGTH = 130;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_R_INVALID_KEY_LENGTH); }))) {
            mixin(enumMixinStr_EVP_R_INVALID_KEY_LENGTH);
        }
    }




    static if(!is(typeof(EVP_R_INVALID_OPERATION))) {
        private enum enumMixinStr_EVP_R_INVALID_OPERATION = `enum EVP_R_INVALID_OPERATION = 148;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_R_INVALID_OPERATION); }))) {
            mixin(enumMixinStr_EVP_R_INVALID_OPERATION);
        }
    }




    static if(!is(typeof(EVP_R_KEYGEN_FAILURE))) {
        private enum enumMixinStr_EVP_R_KEYGEN_FAILURE = `enum EVP_R_KEYGEN_FAILURE = 120;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_R_KEYGEN_FAILURE); }))) {
            mixin(enumMixinStr_EVP_R_KEYGEN_FAILURE);
        }
    }




    static if(!is(typeof(EVP_R_KEY_SETUP_FAILED))) {
        private enum enumMixinStr_EVP_R_KEY_SETUP_FAILED = `enum EVP_R_KEY_SETUP_FAILED = 180;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_R_KEY_SETUP_FAILED); }))) {
            mixin(enumMixinStr_EVP_R_KEY_SETUP_FAILED);
        }
    }




    static if(!is(typeof(EVP_R_MEMORY_LIMIT_EXCEEDED))) {
        private enum enumMixinStr_EVP_R_MEMORY_LIMIT_EXCEEDED = `enum EVP_R_MEMORY_LIMIT_EXCEEDED = 172;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_R_MEMORY_LIMIT_EXCEEDED); }))) {
            mixin(enumMixinStr_EVP_R_MEMORY_LIMIT_EXCEEDED);
        }
    }




    static if(!is(typeof(EVP_R_MESSAGE_DIGEST_IS_NULL))) {
        private enum enumMixinStr_EVP_R_MESSAGE_DIGEST_IS_NULL = `enum EVP_R_MESSAGE_DIGEST_IS_NULL = 159;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_R_MESSAGE_DIGEST_IS_NULL); }))) {
            mixin(enumMixinStr_EVP_R_MESSAGE_DIGEST_IS_NULL);
        }
    }




    static if(!is(typeof(EVP_R_METHOD_NOT_SUPPORTED))) {
        private enum enumMixinStr_EVP_R_METHOD_NOT_SUPPORTED = `enum EVP_R_METHOD_NOT_SUPPORTED = 144;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_R_METHOD_NOT_SUPPORTED); }))) {
            mixin(enumMixinStr_EVP_R_METHOD_NOT_SUPPORTED);
        }
    }




    static if(!is(typeof(EVP_R_MISSING_PARAMETERS))) {
        private enum enumMixinStr_EVP_R_MISSING_PARAMETERS = `enum EVP_R_MISSING_PARAMETERS = 103;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_R_MISSING_PARAMETERS); }))) {
            mixin(enumMixinStr_EVP_R_MISSING_PARAMETERS);
        }
    }




    static if(!is(typeof(EVP_R_NOT_XOF_OR_INVALID_LENGTH))) {
        private enum enumMixinStr_EVP_R_NOT_XOF_OR_INVALID_LENGTH = `enum EVP_R_NOT_XOF_OR_INVALID_LENGTH = 178;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_R_NOT_XOF_OR_INVALID_LENGTH); }))) {
            mixin(enumMixinStr_EVP_R_NOT_XOF_OR_INVALID_LENGTH);
        }
    }




    static if(!is(typeof(EVP_R_NO_CIPHER_SET))) {
        private enum enumMixinStr_EVP_R_NO_CIPHER_SET = `enum EVP_R_NO_CIPHER_SET = 131;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_R_NO_CIPHER_SET); }))) {
            mixin(enumMixinStr_EVP_R_NO_CIPHER_SET);
        }
    }




    static if(!is(typeof(EVP_R_NO_DEFAULT_DIGEST))) {
        private enum enumMixinStr_EVP_R_NO_DEFAULT_DIGEST = `enum EVP_R_NO_DEFAULT_DIGEST = 158;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_R_NO_DEFAULT_DIGEST); }))) {
            mixin(enumMixinStr_EVP_R_NO_DEFAULT_DIGEST);
        }
    }




    static if(!is(typeof(EVP_R_NO_DIGEST_SET))) {
        private enum enumMixinStr_EVP_R_NO_DIGEST_SET = `enum EVP_R_NO_DIGEST_SET = 139;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_R_NO_DIGEST_SET); }))) {
            mixin(enumMixinStr_EVP_R_NO_DIGEST_SET);
        }
    }




    static if(!is(typeof(EVP_R_NO_KEY_SET))) {
        private enum enumMixinStr_EVP_R_NO_KEY_SET = `enum EVP_R_NO_KEY_SET = 154;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_R_NO_KEY_SET); }))) {
            mixin(enumMixinStr_EVP_R_NO_KEY_SET);
        }
    }




    static if(!is(typeof(EVP_R_NO_OPERATION_SET))) {
        private enum enumMixinStr_EVP_R_NO_OPERATION_SET = `enum EVP_R_NO_OPERATION_SET = 149;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_R_NO_OPERATION_SET); }))) {
            mixin(enumMixinStr_EVP_R_NO_OPERATION_SET);
        }
    }




    static if(!is(typeof(EVP_R_ONLY_ONESHOT_SUPPORTED))) {
        private enum enumMixinStr_EVP_R_ONLY_ONESHOT_SUPPORTED = `enum EVP_R_ONLY_ONESHOT_SUPPORTED = 177;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_R_ONLY_ONESHOT_SUPPORTED); }))) {
            mixin(enumMixinStr_EVP_R_ONLY_ONESHOT_SUPPORTED);
        }
    }




    static if(!is(typeof(EVP_R_OPERATION_NOT_SUPPORTED_FOR_THIS_KEYTYPE))) {
        private enum enumMixinStr_EVP_R_OPERATION_NOT_SUPPORTED_FOR_THIS_KEYTYPE = `enum EVP_R_OPERATION_NOT_SUPPORTED_FOR_THIS_KEYTYPE = 150;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_R_OPERATION_NOT_SUPPORTED_FOR_THIS_KEYTYPE); }))) {
            mixin(enumMixinStr_EVP_R_OPERATION_NOT_SUPPORTED_FOR_THIS_KEYTYPE);
        }
    }




    static if(!is(typeof(EVP_R_OPERATON_NOT_INITIALIZED))) {
        private enum enumMixinStr_EVP_R_OPERATON_NOT_INITIALIZED = `enum EVP_R_OPERATON_NOT_INITIALIZED = 151;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_R_OPERATON_NOT_INITIALIZED); }))) {
            mixin(enumMixinStr_EVP_R_OPERATON_NOT_INITIALIZED);
        }
    }




    static if(!is(typeof(EVP_R_OUTPUT_WOULD_OVERFLOW))) {
        private enum enumMixinStr_EVP_R_OUTPUT_WOULD_OVERFLOW = `enum EVP_R_OUTPUT_WOULD_OVERFLOW = 184;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_R_OUTPUT_WOULD_OVERFLOW); }))) {
            mixin(enumMixinStr_EVP_R_OUTPUT_WOULD_OVERFLOW);
        }
    }




    static if(!is(typeof(EVP_R_PARTIALLY_OVERLAPPING))) {
        private enum enumMixinStr_EVP_R_PARTIALLY_OVERLAPPING = `enum EVP_R_PARTIALLY_OVERLAPPING = 162;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_R_PARTIALLY_OVERLAPPING); }))) {
            mixin(enumMixinStr_EVP_R_PARTIALLY_OVERLAPPING);
        }
    }




    static if(!is(typeof(EVP_R_PBKDF2_ERROR))) {
        private enum enumMixinStr_EVP_R_PBKDF2_ERROR = `enum EVP_R_PBKDF2_ERROR = 181;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_R_PBKDF2_ERROR); }))) {
            mixin(enumMixinStr_EVP_R_PBKDF2_ERROR);
        }
    }




    static if(!is(typeof(EVP_R_PKEY_APPLICATION_ASN1_METHOD_ALREADY_REGISTERED))) {
        private enum enumMixinStr_EVP_R_PKEY_APPLICATION_ASN1_METHOD_ALREADY_REGISTERED = `enum EVP_R_PKEY_APPLICATION_ASN1_METHOD_ALREADY_REGISTERED = 179;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_R_PKEY_APPLICATION_ASN1_METHOD_ALREADY_REGISTERED); }))) {
            mixin(enumMixinStr_EVP_R_PKEY_APPLICATION_ASN1_METHOD_ALREADY_REGISTERED);
        }
    }




    static if(!is(typeof(EVP_R_PRIVATE_KEY_DECODE_ERROR))) {
        private enum enumMixinStr_EVP_R_PRIVATE_KEY_DECODE_ERROR = `enum EVP_R_PRIVATE_KEY_DECODE_ERROR = 145;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_R_PRIVATE_KEY_DECODE_ERROR); }))) {
            mixin(enumMixinStr_EVP_R_PRIVATE_KEY_DECODE_ERROR);
        }
    }




    static if(!is(typeof(EVP_R_PRIVATE_KEY_ENCODE_ERROR))) {
        private enum enumMixinStr_EVP_R_PRIVATE_KEY_ENCODE_ERROR = `enum EVP_R_PRIVATE_KEY_ENCODE_ERROR = 146;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_R_PRIVATE_KEY_ENCODE_ERROR); }))) {
            mixin(enumMixinStr_EVP_R_PRIVATE_KEY_ENCODE_ERROR);
        }
    }




    static if(!is(typeof(EVP_R_PUBLIC_KEY_NOT_RSA))) {
        private enum enumMixinStr_EVP_R_PUBLIC_KEY_NOT_RSA = `enum EVP_R_PUBLIC_KEY_NOT_RSA = 106;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_R_PUBLIC_KEY_NOT_RSA); }))) {
            mixin(enumMixinStr_EVP_R_PUBLIC_KEY_NOT_RSA);
        }
    }




    static if(!is(typeof(EVP_R_UNKNOWN_CIPHER))) {
        private enum enumMixinStr_EVP_R_UNKNOWN_CIPHER = `enum EVP_R_UNKNOWN_CIPHER = 160;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_R_UNKNOWN_CIPHER); }))) {
            mixin(enumMixinStr_EVP_R_UNKNOWN_CIPHER);
        }
    }




    static if(!is(typeof(EVP_R_UNKNOWN_DIGEST))) {
        private enum enumMixinStr_EVP_R_UNKNOWN_DIGEST = `enum EVP_R_UNKNOWN_DIGEST = 161;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_R_UNKNOWN_DIGEST); }))) {
            mixin(enumMixinStr_EVP_R_UNKNOWN_DIGEST);
        }
    }




    static if(!is(typeof(EVP_R_UNKNOWN_OPTION))) {
        private enum enumMixinStr_EVP_R_UNKNOWN_OPTION = `enum EVP_R_UNKNOWN_OPTION = 169;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_R_UNKNOWN_OPTION); }))) {
            mixin(enumMixinStr_EVP_R_UNKNOWN_OPTION);
        }
    }




    static if(!is(typeof(EVP_R_UNKNOWN_PBE_ALGORITHM))) {
        private enum enumMixinStr_EVP_R_UNKNOWN_PBE_ALGORITHM = `enum EVP_R_UNKNOWN_PBE_ALGORITHM = 121;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_R_UNKNOWN_PBE_ALGORITHM); }))) {
            mixin(enumMixinStr_EVP_R_UNKNOWN_PBE_ALGORITHM);
        }
    }




    static if(!is(typeof(EVP_R_UNSUPPORTED_ALGORITHM))) {
        private enum enumMixinStr_EVP_R_UNSUPPORTED_ALGORITHM = `enum EVP_R_UNSUPPORTED_ALGORITHM = 156;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_R_UNSUPPORTED_ALGORITHM); }))) {
            mixin(enumMixinStr_EVP_R_UNSUPPORTED_ALGORITHM);
        }
    }




    static if(!is(typeof(EVP_R_UNSUPPORTED_CIPHER))) {
        private enum enumMixinStr_EVP_R_UNSUPPORTED_CIPHER = `enum EVP_R_UNSUPPORTED_CIPHER = 107;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_R_UNSUPPORTED_CIPHER); }))) {
            mixin(enumMixinStr_EVP_R_UNSUPPORTED_CIPHER);
        }
    }




    static if(!is(typeof(EVP_R_UNSUPPORTED_KEYLENGTH))) {
        private enum enumMixinStr_EVP_R_UNSUPPORTED_KEYLENGTH = `enum EVP_R_UNSUPPORTED_KEYLENGTH = 123;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_R_UNSUPPORTED_KEYLENGTH); }))) {
            mixin(enumMixinStr_EVP_R_UNSUPPORTED_KEYLENGTH);
        }
    }




    static if(!is(typeof(EVP_R_UNSUPPORTED_KEY_DERIVATION_FUNCTION))) {
        private enum enumMixinStr_EVP_R_UNSUPPORTED_KEY_DERIVATION_FUNCTION = `enum EVP_R_UNSUPPORTED_KEY_DERIVATION_FUNCTION = 124;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_R_UNSUPPORTED_KEY_DERIVATION_FUNCTION); }))) {
            mixin(enumMixinStr_EVP_R_UNSUPPORTED_KEY_DERIVATION_FUNCTION);
        }
    }




    static if(!is(typeof(EVP_R_UNSUPPORTED_KEY_SIZE))) {
        private enum enumMixinStr_EVP_R_UNSUPPORTED_KEY_SIZE = `enum EVP_R_UNSUPPORTED_KEY_SIZE = 108;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_R_UNSUPPORTED_KEY_SIZE); }))) {
            mixin(enumMixinStr_EVP_R_UNSUPPORTED_KEY_SIZE);
        }
    }




    static if(!is(typeof(EVP_R_UNSUPPORTED_NUMBER_OF_ROUNDS))) {
        private enum enumMixinStr_EVP_R_UNSUPPORTED_NUMBER_OF_ROUNDS = `enum EVP_R_UNSUPPORTED_NUMBER_OF_ROUNDS = 135;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_R_UNSUPPORTED_NUMBER_OF_ROUNDS); }))) {
            mixin(enumMixinStr_EVP_R_UNSUPPORTED_NUMBER_OF_ROUNDS);
        }
    }




    static if(!is(typeof(EVP_R_UNSUPPORTED_PRF))) {
        private enum enumMixinStr_EVP_R_UNSUPPORTED_PRF = `enum EVP_R_UNSUPPORTED_PRF = 125;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_R_UNSUPPORTED_PRF); }))) {
            mixin(enumMixinStr_EVP_R_UNSUPPORTED_PRF);
        }
    }




    static if(!is(typeof(EVP_R_UNSUPPORTED_PRIVATE_KEY_ALGORITHM))) {
        private enum enumMixinStr_EVP_R_UNSUPPORTED_PRIVATE_KEY_ALGORITHM = `enum EVP_R_UNSUPPORTED_PRIVATE_KEY_ALGORITHM = 118;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_R_UNSUPPORTED_PRIVATE_KEY_ALGORITHM); }))) {
            mixin(enumMixinStr_EVP_R_UNSUPPORTED_PRIVATE_KEY_ALGORITHM);
        }
    }




    static if(!is(typeof(EVP_R_UNSUPPORTED_SALT_TYPE))) {
        private enum enumMixinStr_EVP_R_UNSUPPORTED_SALT_TYPE = `enum EVP_R_UNSUPPORTED_SALT_TYPE = 126;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_R_UNSUPPORTED_SALT_TYPE); }))) {
            mixin(enumMixinStr_EVP_R_UNSUPPORTED_SALT_TYPE);
        }
    }




    static if(!is(typeof(EVP_R_WRAP_MODE_NOT_ALLOWED))) {
        private enum enumMixinStr_EVP_R_WRAP_MODE_NOT_ALLOWED = `enum EVP_R_WRAP_MODE_NOT_ALLOWED = 170;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_R_WRAP_MODE_NOT_ALLOWED); }))) {
            mixin(enumMixinStr_EVP_R_WRAP_MODE_NOT_ALLOWED);
        }
    }




    static if(!is(typeof(EVP_R_WRONG_FINAL_BLOCK_LENGTH))) {
        private enum enumMixinStr_EVP_R_WRONG_FINAL_BLOCK_LENGTH = `enum EVP_R_WRONG_FINAL_BLOCK_LENGTH = 109;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_R_WRONG_FINAL_BLOCK_LENGTH); }))) {
            mixin(enumMixinStr_EVP_R_WRONG_FINAL_BLOCK_LENGTH);
        }
    }




    static if(!is(typeof(EVP_R_XTS_DUPLICATED_KEYS))) {
        private enum enumMixinStr_EVP_R_XTS_DUPLICATED_KEYS = `enum EVP_R_XTS_DUPLICATED_KEYS = 183;`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_R_XTS_DUPLICATED_KEYS); }))) {
            mixin(enumMixinStr_EVP_R_XTS_DUPLICATED_KEYS);
        }
    }




    static if(!is(typeof(BN_F_BN_MOD_INVERSE_NO_BRANCH))) {
        private enum enumMixinStr_BN_F_BN_MOD_INVERSE_NO_BRANCH = `enum BN_F_BN_MOD_INVERSE_NO_BRANCH = 139;`;
        static if(is(typeof({ mixin(enumMixinStr_BN_F_BN_MOD_INVERSE_NO_BRANCH); }))) {
            mixin(enumMixinStr_BN_F_BN_MOD_INVERSE_NO_BRANCH);
        }
    }






    static if(!is(typeof(BN_F_BN_MOD_INVERSE))) {
        private enum enumMixinStr_BN_F_BN_MOD_INVERSE = `enum BN_F_BN_MOD_INVERSE = 110;`;
        static if(is(typeof({ mixin(enumMixinStr_BN_F_BN_MOD_INVERSE); }))) {
            mixin(enumMixinStr_BN_F_BN_MOD_INVERSE);
        }
    }




    static if(!is(typeof(BN_F_BN_MOD_EXP_SIMPLE))) {
        private enum enumMixinStr_BN_F_BN_MOD_EXP_SIMPLE = `enum BN_F_BN_MOD_EXP_SIMPLE = 126;`;
        static if(is(typeof({ mixin(enumMixinStr_BN_F_BN_MOD_EXP_SIMPLE); }))) {
            mixin(enumMixinStr_BN_F_BN_MOD_EXP_SIMPLE);
        }
    }




    static if(!is(typeof(BN_F_BN_MOD_EXP_RECP))) {
        private enum enumMixinStr_BN_F_BN_MOD_EXP_RECP = `enum BN_F_BN_MOD_EXP_RECP = 125;`;
        static if(is(typeof({ mixin(enumMixinStr_BN_F_BN_MOD_EXP_RECP); }))) {
            mixin(enumMixinStr_BN_F_BN_MOD_EXP_RECP);
        }
    }




    static if(!is(typeof(BN_F_BN_MOD_EXP_MONT_WORD))) {
        private enum enumMixinStr_BN_F_BN_MOD_EXP_MONT_WORD = `enum BN_F_BN_MOD_EXP_MONT_WORD = 117;`;
        static if(is(typeof({ mixin(enumMixinStr_BN_F_BN_MOD_EXP_MONT_WORD); }))) {
            mixin(enumMixinStr_BN_F_BN_MOD_EXP_MONT_WORD);
        }
    }




    static if(!is(typeof(BN_F_BN_MOD_EXP_MONT_CONSTTIME))) {
        private enum enumMixinStr_BN_F_BN_MOD_EXP_MONT_CONSTTIME = `enum BN_F_BN_MOD_EXP_MONT_CONSTTIME = 124;`;
        static if(is(typeof({ mixin(enumMixinStr_BN_F_BN_MOD_EXP_MONT_CONSTTIME); }))) {
            mixin(enumMixinStr_BN_F_BN_MOD_EXP_MONT_CONSTTIME);
        }
    }




    static if(!is(typeof(BN_F_BN_MOD_EXP_MONT))) {
        private enum enumMixinStr_BN_F_BN_MOD_EXP_MONT = `enum BN_F_BN_MOD_EXP_MONT = 109;`;
        static if(is(typeof({ mixin(enumMixinStr_BN_F_BN_MOD_EXP_MONT); }))) {
            mixin(enumMixinStr_BN_F_BN_MOD_EXP_MONT);
        }
    }




    static if(!is(typeof(BN_F_BN_MOD_EXP2_MONT))) {
        private enum enumMixinStr_BN_F_BN_MOD_EXP2_MONT = `enum BN_F_BN_MOD_EXP2_MONT = 118;`;
        static if(is(typeof({ mixin(enumMixinStr_BN_F_BN_MOD_EXP2_MONT); }))) {
            mixin(enumMixinStr_BN_F_BN_MOD_EXP2_MONT);
        }
    }




    static if(!is(typeof(BN_F_BN_LSHIFT))) {
        private enum enumMixinStr_BN_F_BN_LSHIFT = `enum BN_F_BN_LSHIFT = 145;`;
        static if(is(typeof({ mixin(enumMixinStr_BN_F_BN_LSHIFT); }))) {
            mixin(enumMixinStr_BN_F_BN_LSHIFT);
        }
    }




    static if(!is(typeof(BN_F_BN_GF2M_MOD_SQRT))) {
        private enum enumMixinStr_BN_F_BN_GF2M_MOD_SQRT = `enum BN_F_BN_GF2M_MOD_SQRT = 137;`;
        static if(is(typeof({ mixin(enumMixinStr_BN_F_BN_GF2M_MOD_SQRT); }))) {
            mixin(enumMixinStr_BN_F_BN_GF2M_MOD_SQRT);
        }
    }




    static if(!is(typeof(BN_F_BN_GF2M_MOD_SQR))) {
        private enum enumMixinStr_BN_F_BN_GF2M_MOD_SQR = `enum BN_F_BN_GF2M_MOD_SQR = 136;`;
        static if(is(typeof({ mixin(enumMixinStr_BN_F_BN_GF2M_MOD_SQR); }))) {
            mixin(enumMixinStr_BN_F_BN_GF2M_MOD_SQR);
        }
    }
    static if(!is(typeof(LH_LOAD_MULT))) {
        private enum enumMixinStr_LH_LOAD_MULT = `enum LH_LOAD_MULT = 256;`;
        static if(is(typeof({ mixin(enumMixinStr_LH_LOAD_MULT); }))) {
            mixin(enumMixinStr_LH_LOAD_MULT);
        }
    }




    static if(!is(typeof(BN_F_BN_GF2M_MOD_SOLVE_QUAD_ARR))) {
        private enum enumMixinStr_BN_F_BN_GF2M_MOD_SOLVE_QUAD_ARR = `enum BN_F_BN_GF2M_MOD_SOLVE_QUAD_ARR = 135;`;
        static if(is(typeof({ mixin(enumMixinStr_BN_F_BN_GF2M_MOD_SOLVE_QUAD_ARR); }))) {
            mixin(enumMixinStr_BN_F_BN_GF2M_MOD_SOLVE_QUAD_ARR);
        }
    }




    static if(!is(typeof(BN_F_BN_GF2M_MOD_SOLVE_QUAD))) {
        private enum enumMixinStr_BN_F_BN_GF2M_MOD_SOLVE_QUAD = `enum BN_F_BN_GF2M_MOD_SOLVE_QUAD = 134;`;
        static if(is(typeof({ mixin(enumMixinStr_BN_F_BN_GF2M_MOD_SOLVE_QUAD); }))) {
            mixin(enumMixinStr_BN_F_BN_GF2M_MOD_SOLVE_QUAD);
        }
    }




    static if(!is(typeof(BN_F_BN_GF2M_MOD_MUL))) {
        private enum enumMixinStr_BN_F_BN_GF2M_MOD_MUL = `enum BN_F_BN_GF2M_MOD_MUL = 133;`;
        static if(is(typeof({ mixin(enumMixinStr_BN_F_BN_GF2M_MOD_MUL); }))) {
            mixin(enumMixinStr_BN_F_BN_GF2M_MOD_MUL);
        }
    }




    static if(!is(typeof(BN_F_BN_GF2M_MOD_EXP))) {
        private enum enumMixinStr_BN_F_BN_GF2M_MOD_EXP = `enum BN_F_BN_GF2M_MOD_EXP = 132;`;
        static if(is(typeof({ mixin(enumMixinStr_BN_F_BN_GF2M_MOD_EXP); }))) {
            mixin(enumMixinStr_BN_F_BN_GF2M_MOD_EXP);
        }
    }




    static if(!is(typeof(BN_F_BN_GF2M_MOD))) {
        private enum enumMixinStr_BN_F_BN_GF2M_MOD = `enum BN_F_BN_GF2M_MOD = 131;`;
        static if(is(typeof({ mixin(enumMixinStr_BN_F_BN_GF2M_MOD); }))) {
            mixin(enumMixinStr_BN_F_BN_GF2M_MOD);
        }
    }




    static if(!is(typeof(BN_F_BN_GENERATE_PRIME_EX))) {
        private enum enumMixinStr_BN_F_BN_GENERATE_PRIME_EX = `enum BN_F_BN_GENERATE_PRIME_EX = 141;`;
        static if(is(typeof({ mixin(enumMixinStr_BN_F_BN_GENERATE_PRIME_EX); }))) {
            mixin(enumMixinStr_BN_F_BN_GENERATE_PRIME_EX);
        }
    }




    static if(!is(typeof(BN_F_BN_GENERATE_DSA_NONCE))) {
        private enum enumMixinStr_BN_F_BN_GENERATE_DSA_NONCE = `enum BN_F_BN_GENERATE_DSA_NONCE = 140;`;
        static if(is(typeof({ mixin(enumMixinStr_BN_F_BN_GENERATE_DSA_NONCE); }))) {
            mixin(enumMixinStr_BN_F_BN_GENERATE_DSA_NONCE);
        }
    }




    static if(!is(typeof(BN_F_BN_GENCB_NEW))) {
        private enum enumMixinStr_BN_F_BN_GENCB_NEW = `enum BN_F_BN_GENCB_NEW = 143;`;
        static if(is(typeof({ mixin(enumMixinStr_BN_F_BN_GENCB_NEW); }))) {
            mixin(enumMixinStr_BN_F_BN_GENCB_NEW);
        }
    }




    static if(!is(typeof(BN_F_BN_EXPAND_INTERNAL))) {
        private enum enumMixinStr_BN_F_BN_EXPAND_INTERNAL = `enum BN_F_BN_EXPAND_INTERNAL = 120;`;
        static if(is(typeof({ mixin(enumMixinStr_BN_F_BN_EXPAND_INTERNAL); }))) {
            mixin(enumMixinStr_BN_F_BN_EXPAND_INTERNAL);
        }
    }




    static if(!is(typeof(BN_F_BN_EXP))) {
        private enum enumMixinStr_BN_F_BN_EXP = `enum BN_F_BN_EXP = 123;`;
        static if(is(typeof({ mixin(enumMixinStr_BN_F_BN_EXP); }))) {
            mixin(enumMixinStr_BN_F_BN_EXP);
        }
    }




    static if(!is(typeof(BN_F_BN_DIV_RECP))) {
        private enum enumMixinStr_BN_F_BN_DIV_RECP = `enum BN_F_BN_DIV_RECP = 130;`;
        static if(is(typeof({ mixin(enumMixinStr_BN_F_BN_DIV_RECP); }))) {
            mixin(enumMixinStr_BN_F_BN_DIV_RECP);
        }
    }




    static if(!is(typeof(BN_F_BN_DIV))) {
        private enum enumMixinStr_BN_F_BN_DIV = `enum BN_F_BN_DIV = 107;`;
        static if(is(typeof({ mixin(enumMixinStr_BN_F_BN_DIV); }))) {
            mixin(enumMixinStr_BN_F_BN_DIV);
        }
    }




    static if(!is(typeof(BN_F_BN_CTX_START))) {
        private enum enumMixinStr_BN_F_BN_CTX_START = `enum BN_F_BN_CTX_START = 129;`;
        static if(is(typeof({ mixin(enumMixinStr_BN_F_BN_CTX_START); }))) {
            mixin(enumMixinStr_BN_F_BN_CTX_START);
        }
    }




    static if(!is(typeof(BN_F_BN_CTX_NEW))) {
        private enum enumMixinStr_BN_F_BN_CTX_NEW = `enum BN_F_BN_CTX_NEW = 106;`;
        static if(is(typeof({ mixin(enumMixinStr_BN_F_BN_CTX_NEW); }))) {
            mixin(enumMixinStr_BN_F_BN_CTX_NEW);
        }
    }




    static if(!is(typeof(BN_F_BN_CTX_GET))) {
        private enum enumMixinStr_BN_F_BN_CTX_GET = `enum BN_F_BN_CTX_GET = 116;`;
        static if(is(typeof({ mixin(enumMixinStr_BN_F_BN_CTX_GET); }))) {
            mixin(enumMixinStr_BN_F_BN_CTX_GET);
        }
    }




    static if(!is(typeof(BN_F_BN_COMPUTE_WNAF))) {
        private enum enumMixinStr_BN_F_BN_COMPUTE_WNAF = `enum BN_F_BN_COMPUTE_WNAF = 142;`;
        static if(is(typeof({ mixin(enumMixinStr_BN_F_BN_COMPUTE_WNAF); }))) {
            mixin(enumMixinStr_BN_F_BN_COMPUTE_WNAF);
        }
    }




    static if(!is(typeof(BN_F_BN_BN2HEX))) {
        private enum enumMixinStr_BN_F_BN_BN2HEX = `enum BN_F_BN_BN2HEX = 105;`;
        static if(is(typeof({ mixin(enumMixinStr_BN_F_BN_BN2HEX); }))) {
            mixin(enumMixinStr_BN_F_BN_BN2HEX);
        }
    }




    static if(!is(typeof(BN_F_BN_BN2DEC))) {
        private enum enumMixinStr_BN_F_BN_BN2DEC = `enum BN_F_BN_BN2DEC = 104;`;
        static if(is(typeof({ mixin(enumMixinStr_BN_F_BN_BN2DEC); }))) {
            mixin(enumMixinStr_BN_F_BN_BN2DEC);
        }
    }




    static if(!is(typeof(BN_F_BN_BLINDING_UPDATE))) {
        private enum enumMixinStr_BN_F_BN_BLINDING_UPDATE = `enum BN_F_BN_BLINDING_UPDATE = 103;`;
        static if(is(typeof({ mixin(enumMixinStr_BN_F_BN_BLINDING_UPDATE); }))) {
            mixin(enumMixinStr_BN_F_BN_BLINDING_UPDATE);
        }
    }




    static if(!is(typeof(_LHASH))) {
        private enum enumMixinStr__LHASH = `enum _LHASH = OPENSSL_LHASH;`;
        static if(is(typeof({ mixin(enumMixinStr__LHASH); }))) {
            mixin(enumMixinStr__LHASH);
        }
    }




    static if(!is(typeof(LHASH_NODE))) {
        private enum enumMixinStr_LHASH_NODE = `enum LHASH_NODE = OPENSSL_LH_NODE;`;
        static if(is(typeof({ mixin(enumMixinStr_LHASH_NODE); }))) {
            mixin(enumMixinStr_LHASH_NODE);
        }
    }




    static if(!is(typeof(lh_error))) {
        private enum enumMixinStr_lh_error = `enum lh_error = OPENSSL_LH_error;`;
        static if(is(typeof({ mixin(enumMixinStr_lh_error); }))) {
            mixin(enumMixinStr_lh_error);
        }
    }




    static if(!is(typeof(lh_new))) {
        private enum enumMixinStr_lh_new = `enum lh_new = OPENSSL_LH_new;`;
        static if(is(typeof({ mixin(enumMixinStr_lh_new); }))) {
            mixin(enumMixinStr_lh_new);
        }
    }




    static if(!is(typeof(lh_free))) {
        private enum enumMixinStr_lh_free = `enum lh_free = OPENSSL_LH_free;`;
        static if(is(typeof({ mixin(enumMixinStr_lh_free); }))) {
            mixin(enumMixinStr_lh_free);
        }
    }




    static if(!is(typeof(lh_insert))) {
        private enum enumMixinStr_lh_insert = `enum lh_insert = OPENSSL_LH_insert;`;
        static if(is(typeof({ mixin(enumMixinStr_lh_insert); }))) {
            mixin(enumMixinStr_lh_insert);
        }
    }




    static if(!is(typeof(lh_delete))) {
        private enum enumMixinStr_lh_delete = `enum lh_delete = OPENSSL_LH_delete;`;
        static if(is(typeof({ mixin(enumMixinStr_lh_delete); }))) {
            mixin(enumMixinStr_lh_delete);
        }
    }




    static if(!is(typeof(lh_retrieve))) {
        private enum enumMixinStr_lh_retrieve = `enum lh_retrieve = OPENSSL_LH_retrieve;`;
        static if(is(typeof({ mixin(enumMixinStr_lh_retrieve); }))) {
            mixin(enumMixinStr_lh_retrieve);
        }
    }




    static if(!is(typeof(lh_doall))) {
        private enum enumMixinStr_lh_doall = `enum lh_doall = OPENSSL_LH_doall;`;
        static if(is(typeof({ mixin(enumMixinStr_lh_doall); }))) {
            mixin(enumMixinStr_lh_doall);
        }
    }




    static if(!is(typeof(lh_doall_arg))) {
        private enum enumMixinStr_lh_doall_arg = `enum lh_doall_arg = OPENSSL_LH_doall_arg;`;
        static if(is(typeof({ mixin(enumMixinStr_lh_doall_arg); }))) {
            mixin(enumMixinStr_lh_doall_arg);
        }
    }




    static if(!is(typeof(lh_strhash))) {
        private enum enumMixinStr_lh_strhash = `enum lh_strhash = OPENSSL_LH_strhash;`;
        static if(is(typeof({ mixin(enumMixinStr_lh_strhash); }))) {
            mixin(enumMixinStr_lh_strhash);
        }
    }




    static if(!is(typeof(lh_num_items))) {
        private enum enumMixinStr_lh_num_items = `enum lh_num_items = OPENSSL_LH_num_items;`;
        static if(is(typeof({ mixin(enumMixinStr_lh_num_items); }))) {
            mixin(enumMixinStr_lh_num_items);
        }
    }




    static if(!is(typeof(lh_stats))) {
        private enum enumMixinStr_lh_stats = `enum lh_stats = OPENSSL_LH_stats;`;
        static if(is(typeof({ mixin(enumMixinStr_lh_stats); }))) {
            mixin(enumMixinStr_lh_stats);
        }
    }




    static if(!is(typeof(lh_node_stats))) {
        private enum enumMixinStr_lh_node_stats = `enum lh_node_stats = OPENSSL_LH_node_stats;`;
        static if(is(typeof({ mixin(enumMixinStr_lh_node_stats); }))) {
            mixin(enumMixinStr_lh_node_stats);
        }
    }




    static if(!is(typeof(lh_node_usage_stats))) {
        private enum enumMixinStr_lh_node_usage_stats = `enum lh_node_usage_stats = OPENSSL_LH_node_usage_stats;`;
        static if(is(typeof({ mixin(enumMixinStr_lh_node_usage_stats); }))) {
            mixin(enumMixinStr_lh_node_usage_stats);
        }
    }




    static if(!is(typeof(lh_stats_bio))) {
        private enum enumMixinStr_lh_stats_bio = `enum lh_stats_bio = OPENSSL_LH_stats_bio;`;
        static if(is(typeof({ mixin(enumMixinStr_lh_stats_bio); }))) {
            mixin(enumMixinStr_lh_stats_bio);
        }
    }




    static if(!is(typeof(lh_node_stats_bio))) {
        private enum enumMixinStr_lh_node_stats_bio = `enum lh_node_stats_bio = OPENSSL_LH_node_stats_bio;`;
        static if(is(typeof({ mixin(enumMixinStr_lh_node_stats_bio); }))) {
            mixin(enumMixinStr_lh_node_stats_bio);
        }
    }




    static if(!is(typeof(lh_node_usage_stats_bio))) {
        private enum enumMixinStr_lh_node_usage_stats_bio = `enum lh_node_usage_stats_bio = OPENSSL_LH_node_usage_stats_bio;`;
        static if(is(typeof({ mixin(enumMixinStr_lh_node_usage_stats_bio); }))) {
            mixin(enumMixinStr_lh_node_usage_stats_bio);
        }
    }
    static if(!is(typeof(BN_F_BN_BLINDING_NEW))) {
        private enum enumMixinStr_BN_F_BN_BLINDING_NEW = `enum BN_F_BN_BLINDING_NEW = 102;`;
        static if(is(typeof({ mixin(enumMixinStr_BN_F_BN_BLINDING_NEW); }))) {
            mixin(enumMixinStr_BN_F_BN_BLINDING_NEW);
        }
    }




    static if(!is(typeof(BN_F_BN_BLINDING_INVERT_EX))) {
        private enum enumMixinStr_BN_F_BN_BLINDING_INVERT_EX = `enum BN_F_BN_BLINDING_INVERT_EX = 101;`;
        static if(is(typeof({ mixin(enumMixinStr_BN_F_BN_BLINDING_INVERT_EX); }))) {
            mixin(enumMixinStr_BN_F_BN_BLINDING_INVERT_EX);
        }
    }




    static if(!is(typeof(BN_F_BN_BLINDING_CREATE_PARAM))) {
        private enum enumMixinStr_BN_F_BN_BLINDING_CREATE_PARAM = `enum BN_F_BN_BLINDING_CREATE_PARAM = 128;`;
        static if(is(typeof({ mixin(enumMixinStr_BN_F_BN_BLINDING_CREATE_PARAM); }))) {
            mixin(enumMixinStr_BN_F_BN_BLINDING_CREATE_PARAM);
        }
    }




    static if(!is(typeof(BN_F_BN_BLINDING_CONVERT_EX))) {
        private enum enumMixinStr_BN_F_BN_BLINDING_CONVERT_EX = `enum BN_F_BN_BLINDING_CONVERT_EX = 100;`;
        static if(is(typeof({ mixin(enumMixinStr_BN_F_BN_BLINDING_CONVERT_EX); }))) {
            mixin(enumMixinStr_BN_F_BN_BLINDING_CONVERT_EX);
        }
    }




    static if(!is(typeof(BN_F_BNRAND_RANGE))) {
        private enum enumMixinStr_BN_F_BNRAND_RANGE = `enum BN_F_BNRAND_RANGE = 138;`;
        static if(is(typeof({ mixin(enumMixinStr_BN_F_BNRAND_RANGE); }))) {
            mixin(enumMixinStr_BN_F_BNRAND_RANGE);
        }
    }




    static if(!is(typeof(BN_F_BNRAND))) {
        private enum enumMixinStr_BN_F_BNRAND = `enum BN_F_BNRAND = 127;`;
        static if(is(typeof({ mixin(enumMixinStr_BN_F_BNRAND); }))) {
            mixin(enumMixinStr_BN_F_BNRAND);
        }
    }






    static if(!is(typeof(get_rfc3526_prime_8192))) {
        private enum enumMixinStr_get_rfc3526_prime_8192 = `enum get_rfc3526_prime_8192 = BN_get_rfc3526_prime_8192;`;
        static if(is(typeof({ mixin(enumMixinStr_get_rfc3526_prime_8192); }))) {
            mixin(enumMixinStr_get_rfc3526_prime_8192);
        }
    }




    static if(!is(typeof(get_rfc3526_prime_6144))) {
        private enum enumMixinStr_get_rfc3526_prime_6144 = `enum get_rfc3526_prime_6144 = BN_get_rfc3526_prime_6144;`;
        static if(is(typeof({ mixin(enumMixinStr_get_rfc3526_prime_6144); }))) {
            mixin(enumMixinStr_get_rfc3526_prime_6144);
        }
    }




    static if(!is(typeof(get_rfc3526_prime_4096))) {
        private enum enumMixinStr_get_rfc3526_prime_4096 = `enum get_rfc3526_prime_4096 = BN_get_rfc3526_prime_4096;`;
        static if(is(typeof({ mixin(enumMixinStr_get_rfc3526_prime_4096); }))) {
            mixin(enumMixinStr_get_rfc3526_prime_4096);
        }
    }




    static if(!is(typeof(get_rfc3526_prime_3072))) {
        private enum enumMixinStr_get_rfc3526_prime_3072 = `enum get_rfc3526_prime_3072 = BN_get_rfc3526_prime_3072;`;
        static if(is(typeof({ mixin(enumMixinStr_get_rfc3526_prime_3072); }))) {
            mixin(enumMixinStr_get_rfc3526_prime_3072);
        }
    }




    static if(!is(typeof(get_rfc3526_prime_2048))) {
        private enum enumMixinStr_get_rfc3526_prime_2048 = `enum get_rfc3526_prime_2048 = BN_get_rfc3526_prime_2048;`;
        static if(is(typeof({ mixin(enumMixinStr_get_rfc3526_prime_2048); }))) {
            mixin(enumMixinStr_get_rfc3526_prime_2048);
        }
    }




    static if(!is(typeof(get_rfc3526_prime_1536))) {
        private enum enumMixinStr_get_rfc3526_prime_1536 = `enum get_rfc3526_prime_1536 = BN_get_rfc3526_prime_1536;`;
        static if(is(typeof({ mixin(enumMixinStr_get_rfc3526_prime_1536); }))) {
            mixin(enumMixinStr_get_rfc3526_prime_1536);
        }
    }




    static if(!is(typeof(get_rfc2409_prime_1024))) {
        private enum enumMixinStr_get_rfc2409_prime_1024 = `enum get_rfc2409_prime_1024 = BN_get_rfc2409_prime_1024;`;
        static if(is(typeof({ mixin(enumMixinStr_get_rfc2409_prime_1024); }))) {
            mixin(enumMixinStr_get_rfc2409_prime_1024);
        }
    }




    static if(!is(typeof(get_rfc2409_prime_768))) {
        private enum enumMixinStr_get_rfc2409_prime_768 = `enum get_rfc2409_prime_768 = BN_get_rfc2409_prime_768;`;
        static if(is(typeof({ mixin(enumMixinStr_get_rfc2409_prime_768); }))) {
            mixin(enumMixinStr_get_rfc2409_prime_768);
        }
    }
    static if(!is(typeof(BN_BLINDING_NO_RECREATE))) {
        private enum enumMixinStr_BN_BLINDING_NO_RECREATE = `enum BN_BLINDING_NO_RECREATE = 0x00000002;`;
        static if(is(typeof({ mixin(enumMixinStr_BN_BLINDING_NO_RECREATE); }))) {
            mixin(enumMixinStr_BN_BLINDING_NO_RECREATE);
        }
    }




    static if(!is(typeof(BN_BLINDING_NO_UPDATE))) {
        private enum enumMixinStr_BN_BLINDING_NO_UPDATE = `enum BN_BLINDING_NO_UPDATE = 0x00000001;`;
        static if(is(typeof({ mixin(enumMixinStr_BN_BLINDING_NO_UPDATE); }))) {
            mixin(enumMixinStr_BN_BLINDING_NO_UPDATE);
        }
    }
    static if(!is(typeof(BN_prime_checks))) {
        private enum enumMixinStr_BN_prime_checks = `enum BN_prime_checks = 0;`;
        static if(is(typeof({ mixin(enumMixinStr_BN_prime_checks); }))) {
            mixin(enumMixinStr_BN_prime_checks);
        }
    }




    static if(!is(typeof(BN_RAND_BOTTOM_ODD))) {
        private enum enumMixinStr_BN_RAND_BOTTOM_ODD = `enum BN_RAND_BOTTOM_ODD = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_BN_RAND_BOTTOM_ODD); }))) {
            mixin(enumMixinStr_BN_RAND_BOTTOM_ODD);
        }
    }




    static if(!is(typeof(BN_RAND_BOTTOM_ANY))) {
        private enum enumMixinStr_BN_RAND_BOTTOM_ANY = `enum BN_RAND_BOTTOM_ANY = 0;`;
        static if(is(typeof({ mixin(enumMixinStr_BN_RAND_BOTTOM_ANY); }))) {
            mixin(enumMixinStr_BN_RAND_BOTTOM_ANY);
        }
    }




    static if(!is(typeof(BN_RAND_TOP_TWO))) {
        private enum enumMixinStr_BN_RAND_TOP_TWO = `enum BN_RAND_TOP_TWO = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_BN_RAND_TOP_TWO); }))) {
            mixin(enumMixinStr_BN_RAND_TOP_TWO);
        }
    }




    static if(!is(typeof(BN_RAND_TOP_ONE))) {
        private enum enumMixinStr_BN_RAND_TOP_ONE = `enum BN_RAND_TOP_ONE = 0;`;
        static if(is(typeof({ mixin(enumMixinStr_BN_RAND_TOP_ONE); }))) {
            mixin(enumMixinStr_BN_RAND_TOP_ONE);
        }
    }




    static if(!is(typeof(BN_RAND_TOP_ANY))) {
        private enum enumMixinStr_BN_RAND_TOP_ANY = `enum BN_RAND_TOP_ANY = - 1;`;
        static if(is(typeof({ mixin(enumMixinStr_BN_RAND_TOP_ANY); }))) {
            mixin(enumMixinStr_BN_RAND_TOP_ANY);
        }
    }




    static if(!is(typeof(BN_FLG_FREE))) {
        private enum enumMixinStr_BN_FLG_FREE = `enum BN_FLG_FREE = 0x8000;`;
        static if(is(typeof({ mixin(enumMixinStr_BN_FLG_FREE); }))) {
            mixin(enumMixinStr_BN_FLG_FREE);
        }
    }




    static if(!is(typeof(BN_FLG_EXP_CONSTTIME))) {
        private enum enumMixinStr_BN_FLG_EXP_CONSTTIME = `enum BN_FLG_EXP_CONSTTIME = BN_FLG_CONSTTIME;`;
        static if(is(typeof({ mixin(enumMixinStr_BN_FLG_EXP_CONSTTIME); }))) {
            mixin(enumMixinStr_BN_FLG_EXP_CONSTTIME);
        }
    }




    static if(!is(typeof(SN_undef))) {
        private enum enumMixinStr_SN_undef = `enum SN_undef = "UNDEF";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_undef); }))) {
            mixin(enumMixinStr_SN_undef);
        }
    }




    static if(!is(typeof(LN_undef))) {
        private enum enumMixinStr_LN_undef = `enum LN_undef = "undefined";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_undef); }))) {
            mixin(enumMixinStr_LN_undef);
        }
    }




    static if(!is(typeof(NID_undef))) {
        private enum enumMixinStr_NID_undef = `enum NID_undef = 0;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_undef); }))) {
            mixin(enumMixinStr_NID_undef);
        }
    }




    static if(!is(typeof(OBJ_undef))) {
        private enum enumMixinStr_OBJ_undef = `enum OBJ_undef = 0L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_undef); }))) {
            mixin(enumMixinStr_OBJ_undef);
        }
    }




    static if(!is(typeof(SN_itu_t))) {
        private enum enumMixinStr_SN_itu_t = `enum SN_itu_t = "ITU-T";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_itu_t); }))) {
            mixin(enumMixinStr_SN_itu_t);
        }
    }




    static if(!is(typeof(LN_itu_t))) {
        private enum enumMixinStr_LN_itu_t = `enum LN_itu_t = "itu-t";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_itu_t); }))) {
            mixin(enumMixinStr_LN_itu_t);
        }
    }




    static if(!is(typeof(NID_itu_t))) {
        private enum enumMixinStr_NID_itu_t = `enum NID_itu_t = 645;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_itu_t); }))) {
            mixin(enumMixinStr_NID_itu_t);
        }
    }




    static if(!is(typeof(OBJ_itu_t))) {
        private enum enumMixinStr_OBJ_itu_t = `enum OBJ_itu_t = 0L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_itu_t); }))) {
            mixin(enumMixinStr_OBJ_itu_t);
        }
    }




    static if(!is(typeof(NID_ccitt))) {
        private enum enumMixinStr_NID_ccitt = `enum NID_ccitt = 404;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_ccitt); }))) {
            mixin(enumMixinStr_NID_ccitt);
        }
    }




    static if(!is(typeof(OBJ_ccitt))) {
        private enum enumMixinStr_OBJ_ccitt = `enum OBJ_ccitt = 0L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_ccitt); }))) {
            mixin(enumMixinStr_OBJ_ccitt);
        }
    }




    static if(!is(typeof(SN_iso))) {
        private enum enumMixinStr_SN_iso = `enum SN_iso = "ISO";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_iso); }))) {
            mixin(enumMixinStr_SN_iso);
        }
    }




    static if(!is(typeof(LN_iso))) {
        private enum enumMixinStr_LN_iso = `enum LN_iso = "iso";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_iso); }))) {
            mixin(enumMixinStr_LN_iso);
        }
    }




    static if(!is(typeof(NID_iso))) {
        private enum enumMixinStr_NID_iso = `enum NID_iso = 181;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_iso); }))) {
            mixin(enumMixinStr_NID_iso);
        }
    }




    static if(!is(typeof(OBJ_iso))) {
        private enum enumMixinStr_OBJ_iso = `enum OBJ_iso = 1L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_iso); }))) {
            mixin(enumMixinStr_OBJ_iso);
        }
    }




    static if(!is(typeof(SN_joint_iso_itu_t))) {
        private enum enumMixinStr_SN_joint_iso_itu_t = `enum SN_joint_iso_itu_t = "JOINT-ISO-ITU-T";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_joint_iso_itu_t); }))) {
            mixin(enumMixinStr_SN_joint_iso_itu_t);
        }
    }




    static if(!is(typeof(LN_joint_iso_itu_t))) {
        private enum enumMixinStr_LN_joint_iso_itu_t = `enum LN_joint_iso_itu_t = "joint-iso-itu-t";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_joint_iso_itu_t); }))) {
            mixin(enumMixinStr_LN_joint_iso_itu_t);
        }
    }




    static if(!is(typeof(NID_joint_iso_itu_t))) {
        private enum enumMixinStr_NID_joint_iso_itu_t = `enum NID_joint_iso_itu_t = 646;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_joint_iso_itu_t); }))) {
            mixin(enumMixinStr_NID_joint_iso_itu_t);
        }
    }




    static if(!is(typeof(OBJ_joint_iso_itu_t))) {
        private enum enumMixinStr_OBJ_joint_iso_itu_t = `enum OBJ_joint_iso_itu_t = 2L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_joint_iso_itu_t); }))) {
            mixin(enumMixinStr_OBJ_joint_iso_itu_t);
        }
    }




    static if(!is(typeof(NID_joint_iso_ccitt))) {
        private enum enumMixinStr_NID_joint_iso_ccitt = `enum NID_joint_iso_ccitt = 393;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_joint_iso_ccitt); }))) {
            mixin(enumMixinStr_NID_joint_iso_ccitt);
        }
    }




    static if(!is(typeof(OBJ_joint_iso_ccitt))) {
        private enum enumMixinStr_OBJ_joint_iso_ccitt = `enum OBJ_joint_iso_ccitt = 2L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_joint_iso_ccitt); }))) {
            mixin(enumMixinStr_OBJ_joint_iso_ccitt);
        }
    }




    static if(!is(typeof(SN_member_body))) {
        private enum enumMixinStr_SN_member_body = `enum SN_member_body = "member-body";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_member_body); }))) {
            mixin(enumMixinStr_SN_member_body);
        }
    }




    static if(!is(typeof(LN_member_body))) {
        private enum enumMixinStr_LN_member_body = `enum LN_member_body = "ISO Member Body";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_member_body); }))) {
            mixin(enumMixinStr_LN_member_body);
        }
    }




    static if(!is(typeof(NID_member_body))) {
        private enum enumMixinStr_NID_member_body = `enum NID_member_body = 182;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_member_body); }))) {
            mixin(enumMixinStr_NID_member_body);
        }
    }




    static if(!is(typeof(OBJ_member_body))) {
        private enum enumMixinStr_OBJ_member_body = `enum OBJ_member_body = 1L , 2L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_member_body); }))) {
            mixin(enumMixinStr_OBJ_member_body);
        }
    }




    static if(!is(typeof(SN_identified_organization))) {
        private enum enumMixinStr_SN_identified_organization = `enum SN_identified_organization = "identified-organization";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_identified_organization); }))) {
            mixin(enumMixinStr_SN_identified_organization);
        }
    }




    static if(!is(typeof(NID_identified_organization))) {
        private enum enumMixinStr_NID_identified_organization = `enum NID_identified_organization = 676;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_identified_organization); }))) {
            mixin(enumMixinStr_NID_identified_organization);
        }
    }




    static if(!is(typeof(OBJ_identified_organization))) {
        private enum enumMixinStr_OBJ_identified_organization = `enum OBJ_identified_organization = 1L , 3L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_identified_organization); }))) {
            mixin(enumMixinStr_OBJ_identified_organization);
        }
    }




    static if(!is(typeof(SN_hmac_md5))) {
        private enum enumMixinStr_SN_hmac_md5 = `enum SN_hmac_md5 = "HMAC-MD5";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_hmac_md5); }))) {
            mixin(enumMixinStr_SN_hmac_md5);
        }
    }




    static if(!is(typeof(LN_hmac_md5))) {
        private enum enumMixinStr_LN_hmac_md5 = `enum LN_hmac_md5 = "hmac-md5";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_hmac_md5); }))) {
            mixin(enumMixinStr_LN_hmac_md5);
        }
    }




    static if(!is(typeof(NID_hmac_md5))) {
        private enum enumMixinStr_NID_hmac_md5 = `enum NID_hmac_md5 = 780;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_hmac_md5); }))) {
            mixin(enumMixinStr_NID_hmac_md5);
        }
    }




    static if(!is(typeof(OBJ_hmac_md5))) {
        private enum enumMixinStr_OBJ_hmac_md5 = `enum OBJ_hmac_md5 = 1L , 3L , 6L , 1L , 5L , 5L , 8L , 1L , 1L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_hmac_md5); }))) {
            mixin(enumMixinStr_OBJ_hmac_md5);
        }
    }




    static if(!is(typeof(SN_hmac_sha1))) {
        private enum enumMixinStr_SN_hmac_sha1 = `enum SN_hmac_sha1 = "HMAC-SHA1";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_hmac_sha1); }))) {
            mixin(enumMixinStr_SN_hmac_sha1);
        }
    }




    static if(!is(typeof(LN_hmac_sha1))) {
        private enum enumMixinStr_LN_hmac_sha1 = `enum LN_hmac_sha1 = "hmac-sha1";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_hmac_sha1); }))) {
            mixin(enumMixinStr_LN_hmac_sha1);
        }
    }




    static if(!is(typeof(NID_hmac_sha1))) {
        private enum enumMixinStr_NID_hmac_sha1 = `enum NID_hmac_sha1 = 781;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_hmac_sha1); }))) {
            mixin(enumMixinStr_NID_hmac_sha1);
        }
    }




    static if(!is(typeof(OBJ_hmac_sha1))) {
        private enum enumMixinStr_OBJ_hmac_sha1 = `enum OBJ_hmac_sha1 = 1L , 3L , 6L , 1L , 5L , 5L , 8L , 1L , 2L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_hmac_sha1); }))) {
            mixin(enumMixinStr_OBJ_hmac_sha1);
        }
    }




    static if(!is(typeof(SN_x509ExtAdmission))) {
        private enum enumMixinStr_SN_x509ExtAdmission = `enum SN_x509ExtAdmission = "x509ExtAdmission";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_x509ExtAdmission); }))) {
            mixin(enumMixinStr_SN_x509ExtAdmission);
        }
    }




    static if(!is(typeof(LN_x509ExtAdmission))) {
        private enum enumMixinStr_LN_x509ExtAdmission = `enum LN_x509ExtAdmission = "Professional Information or basis for Admission";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_x509ExtAdmission); }))) {
            mixin(enumMixinStr_LN_x509ExtAdmission);
        }
    }




    static if(!is(typeof(NID_x509ExtAdmission))) {
        private enum enumMixinStr_NID_x509ExtAdmission = `enum NID_x509ExtAdmission = 1093;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_x509ExtAdmission); }))) {
            mixin(enumMixinStr_NID_x509ExtAdmission);
        }
    }




    static if(!is(typeof(OBJ_x509ExtAdmission))) {
        private enum enumMixinStr_OBJ_x509ExtAdmission = `enum OBJ_x509ExtAdmission = 1L , 3L , 36L , 8L , 3L , 3L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_x509ExtAdmission); }))) {
            mixin(enumMixinStr_OBJ_x509ExtAdmission);
        }
    }




    static if(!is(typeof(SN_certicom_arc))) {
        private enum enumMixinStr_SN_certicom_arc = `enum SN_certicom_arc = "certicom-arc";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_certicom_arc); }))) {
            mixin(enumMixinStr_SN_certicom_arc);
        }
    }




    static if(!is(typeof(NID_certicom_arc))) {
        private enum enumMixinStr_NID_certicom_arc = `enum NID_certicom_arc = 677;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_certicom_arc); }))) {
            mixin(enumMixinStr_NID_certicom_arc);
        }
    }




    static if(!is(typeof(OBJ_certicom_arc))) {
        private enum enumMixinStr_OBJ_certicom_arc = `enum OBJ_certicom_arc = 1L , 3L , 132L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_certicom_arc); }))) {
            mixin(enumMixinStr_OBJ_certicom_arc);
        }
    }




    static if(!is(typeof(SN_ieee))) {
        private enum enumMixinStr_SN_ieee = `enum SN_ieee = "ieee";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_ieee); }))) {
            mixin(enumMixinStr_SN_ieee);
        }
    }




    static if(!is(typeof(NID_ieee))) {
        private enum enumMixinStr_NID_ieee = `enum NID_ieee = 1170;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_ieee); }))) {
            mixin(enumMixinStr_NID_ieee);
        }
    }




    static if(!is(typeof(OBJ_ieee))) {
        private enum enumMixinStr_OBJ_ieee = `enum OBJ_ieee = 1L , 3L , 111L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_ieee); }))) {
            mixin(enumMixinStr_OBJ_ieee);
        }
    }




    static if(!is(typeof(SN_ieee_siswg))) {
        private enum enumMixinStr_SN_ieee_siswg = `enum SN_ieee_siswg = "ieee-siswg";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_ieee_siswg); }))) {
            mixin(enumMixinStr_SN_ieee_siswg);
        }
    }




    static if(!is(typeof(LN_ieee_siswg))) {
        private enum enumMixinStr_LN_ieee_siswg = `enum LN_ieee_siswg = "IEEE Security in Storage Working Group";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_ieee_siswg); }))) {
            mixin(enumMixinStr_LN_ieee_siswg);
        }
    }




    static if(!is(typeof(NID_ieee_siswg))) {
        private enum enumMixinStr_NID_ieee_siswg = `enum NID_ieee_siswg = 1171;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_ieee_siswg); }))) {
            mixin(enumMixinStr_NID_ieee_siswg);
        }
    }




    static if(!is(typeof(OBJ_ieee_siswg))) {
        private enum enumMixinStr_OBJ_ieee_siswg = `enum OBJ_ieee_siswg = 1L , 3L , 111L , 2L , 1619L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_ieee_siswg); }))) {
            mixin(enumMixinStr_OBJ_ieee_siswg);
        }
    }




    static if(!is(typeof(SN_international_organizations))) {
        private enum enumMixinStr_SN_international_organizations = `enum SN_international_organizations = "international-organizations";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_international_organizations); }))) {
            mixin(enumMixinStr_SN_international_organizations);
        }
    }




    static if(!is(typeof(LN_international_organizations))) {
        private enum enumMixinStr_LN_international_organizations = `enum LN_international_organizations = "International Organizations";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_international_organizations); }))) {
            mixin(enumMixinStr_LN_international_organizations);
        }
    }




    static if(!is(typeof(NID_international_organizations))) {
        private enum enumMixinStr_NID_international_organizations = `enum NID_international_organizations = 647;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_international_organizations); }))) {
            mixin(enumMixinStr_NID_international_organizations);
        }
    }




    static if(!is(typeof(OBJ_international_organizations))) {
        private enum enumMixinStr_OBJ_international_organizations = `enum OBJ_international_organizations = 2L , 23L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_international_organizations); }))) {
            mixin(enumMixinStr_OBJ_international_organizations);
        }
    }




    static if(!is(typeof(SN_wap))) {
        private enum enumMixinStr_SN_wap = `enum SN_wap = "wap";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_wap); }))) {
            mixin(enumMixinStr_SN_wap);
        }
    }




    static if(!is(typeof(NID_wap))) {
        private enum enumMixinStr_NID_wap = `enum NID_wap = 678;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_wap); }))) {
            mixin(enumMixinStr_NID_wap);
        }
    }




    static if(!is(typeof(OBJ_wap))) {
        private enum enumMixinStr_OBJ_wap = `enum OBJ_wap = 2L , 23L , 43L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_wap); }))) {
            mixin(enumMixinStr_OBJ_wap);
        }
    }




    static if(!is(typeof(SN_wap_wsg))) {
        private enum enumMixinStr_SN_wap_wsg = `enum SN_wap_wsg = "wap-wsg";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_wap_wsg); }))) {
            mixin(enumMixinStr_SN_wap_wsg);
        }
    }




    static if(!is(typeof(NID_wap_wsg))) {
        private enum enumMixinStr_NID_wap_wsg = `enum NID_wap_wsg = 679;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_wap_wsg); }))) {
            mixin(enumMixinStr_NID_wap_wsg);
        }
    }




    static if(!is(typeof(OBJ_wap_wsg))) {
        private enum enumMixinStr_OBJ_wap_wsg = `enum OBJ_wap_wsg = 2L , 23L , 43L , 1L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_wap_wsg); }))) {
            mixin(enumMixinStr_OBJ_wap_wsg);
        }
    }




    static if(!is(typeof(SN_selected_attribute_types))) {
        private enum enumMixinStr_SN_selected_attribute_types = `enum SN_selected_attribute_types = "selected-attribute-types";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_selected_attribute_types); }))) {
            mixin(enumMixinStr_SN_selected_attribute_types);
        }
    }




    static if(!is(typeof(LN_selected_attribute_types))) {
        private enum enumMixinStr_LN_selected_attribute_types = `enum LN_selected_attribute_types = "Selected Attribute Types";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_selected_attribute_types); }))) {
            mixin(enumMixinStr_LN_selected_attribute_types);
        }
    }




    static if(!is(typeof(NID_selected_attribute_types))) {
        private enum enumMixinStr_NID_selected_attribute_types = `enum NID_selected_attribute_types = 394;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_selected_attribute_types); }))) {
            mixin(enumMixinStr_NID_selected_attribute_types);
        }
    }




    static if(!is(typeof(OBJ_selected_attribute_types))) {
        private enum enumMixinStr_OBJ_selected_attribute_types = `enum OBJ_selected_attribute_types = 2L , 5L , 1L , 5L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_selected_attribute_types); }))) {
            mixin(enumMixinStr_OBJ_selected_attribute_types);
        }
    }




    static if(!is(typeof(SN_clearance))) {
        private enum enumMixinStr_SN_clearance = `enum SN_clearance = "clearance";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_clearance); }))) {
            mixin(enumMixinStr_SN_clearance);
        }
    }




    static if(!is(typeof(NID_clearance))) {
        private enum enumMixinStr_NID_clearance = `enum NID_clearance = 395;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_clearance); }))) {
            mixin(enumMixinStr_NID_clearance);
        }
    }




    static if(!is(typeof(OBJ_clearance))) {
        private enum enumMixinStr_OBJ_clearance = `enum OBJ_clearance = 2L , 5L , 1L , 5L , 55L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_clearance); }))) {
            mixin(enumMixinStr_OBJ_clearance);
        }
    }




    static if(!is(typeof(SN_ISO_US))) {
        private enum enumMixinStr_SN_ISO_US = `enum SN_ISO_US = "ISO-US";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_ISO_US); }))) {
            mixin(enumMixinStr_SN_ISO_US);
        }
    }




    static if(!is(typeof(LN_ISO_US))) {
        private enum enumMixinStr_LN_ISO_US = `enum LN_ISO_US = "ISO US Member Body";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_ISO_US); }))) {
            mixin(enumMixinStr_LN_ISO_US);
        }
    }




    static if(!is(typeof(NID_ISO_US))) {
        private enum enumMixinStr_NID_ISO_US = `enum NID_ISO_US = 183;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_ISO_US); }))) {
            mixin(enumMixinStr_NID_ISO_US);
        }
    }




    static if(!is(typeof(OBJ_ISO_US))) {
        private enum enumMixinStr_OBJ_ISO_US = `enum OBJ_ISO_US = 1L , 2L , 840L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_ISO_US); }))) {
            mixin(enumMixinStr_OBJ_ISO_US);
        }
    }




    static if(!is(typeof(SN_X9_57))) {
        private enum enumMixinStr_SN_X9_57 = `enum SN_X9_57 = "X9-57";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_X9_57); }))) {
            mixin(enumMixinStr_SN_X9_57);
        }
    }




    static if(!is(typeof(LN_X9_57))) {
        private enum enumMixinStr_LN_X9_57 = `enum LN_X9_57 = "X9.57";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_X9_57); }))) {
            mixin(enumMixinStr_LN_X9_57);
        }
    }




    static if(!is(typeof(NID_X9_57))) {
        private enum enumMixinStr_NID_X9_57 = `enum NID_X9_57 = 184;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_X9_57); }))) {
            mixin(enumMixinStr_NID_X9_57);
        }
    }




    static if(!is(typeof(OBJ_X9_57))) {
        private enum enumMixinStr_OBJ_X9_57 = `enum OBJ_X9_57 = 1L , 2L , 840L , 10040L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_X9_57); }))) {
            mixin(enumMixinStr_OBJ_X9_57);
        }
    }




    static if(!is(typeof(SN_X9cm))) {
        private enum enumMixinStr_SN_X9cm = `enum SN_X9cm = "X9cm";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_X9cm); }))) {
            mixin(enumMixinStr_SN_X9cm);
        }
    }




    static if(!is(typeof(LN_X9cm))) {
        private enum enumMixinStr_LN_X9cm = `enum LN_X9cm = "X9.57 CM ?";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_X9cm); }))) {
            mixin(enumMixinStr_LN_X9cm);
        }
    }




    static if(!is(typeof(NID_X9cm))) {
        private enum enumMixinStr_NID_X9cm = `enum NID_X9cm = 185;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_X9cm); }))) {
            mixin(enumMixinStr_NID_X9cm);
        }
    }




    static if(!is(typeof(OBJ_X9cm))) {
        private enum enumMixinStr_OBJ_X9cm = `enum OBJ_X9cm = 1L , 2L , 840L , 10040L , 4L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_X9cm); }))) {
            mixin(enumMixinStr_OBJ_X9cm);
        }
    }




    static if(!is(typeof(SN_ISO_CN))) {
        private enum enumMixinStr_SN_ISO_CN = `enum SN_ISO_CN = "ISO-CN";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_ISO_CN); }))) {
            mixin(enumMixinStr_SN_ISO_CN);
        }
    }




    static if(!is(typeof(LN_ISO_CN))) {
        private enum enumMixinStr_LN_ISO_CN = `enum LN_ISO_CN = "ISO CN Member Body";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_ISO_CN); }))) {
            mixin(enumMixinStr_LN_ISO_CN);
        }
    }




    static if(!is(typeof(NID_ISO_CN))) {
        private enum enumMixinStr_NID_ISO_CN = `enum NID_ISO_CN = 1140;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_ISO_CN); }))) {
            mixin(enumMixinStr_NID_ISO_CN);
        }
    }




    static if(!is(typeof(OBJ_ISO_CN))) {
        private enum enumMixinStr_OBJ_ISO_CN = `enum OBJ_ISO_CN = 1L , 2L , 156L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_ISO_CN); }))) {
            mixin(enumMixinStr_OBJ_ISO_CN);
        }
    }




    static if(!is(typeof(SN_oscca))) {
        private enum enumMixinStr_SN_oscca = `enum SN_oscca = "oscca";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_oscca); }))) {
            mixin(enumMixinStr_SN_oscca);
        }
    }




    static if(!is(typeof(NID_oscca))) {
        private enum enumMixinStr_NID_oscca = `enum NID_oscca = 1141;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_oscca); }))) {
            mixin(enumMixinStr_NID_oscca);
        }
    }




    static if(!is(typeof(OBJ_oscca))) {
        private enum enumMixinStr_OBJ_oscca = `enum OBJ_oscca = 1L , 2L , 156L , 10197L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_oscca); }))) {
            mixin(enumMixinStr_OBJ_oscca);
        }
    }




    static if(!is(typeof(SN_sm_scheme))) {
        private enum enumMixinStr_SN_sm_scheme = `enum SN_sm_scheme = "sm-scheme";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_sm_scheme); }))) {
            mixin(enumMixinStr_SN_sm_scheme);
        }
    }




    static if(!is(typeof(NID_sm_scheme))) {
        private enum enumMixinStr_NID_sm_scheme = `enum NID_sm_scheme = 1142;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_sm_scheme); }))) {
            mixin(enumMixinStr_NID_sm_scheme);
        }
    }




    static if(!is(typeof(OBJ_sm_scheme))) {
        private enum enumMixinStr_OBJ_sm_scheme = `enum OBJ_sm_scheme = 1L , 2L , 156L , 10197L , 1L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_sm_scheme); }))) {
            mixin(enumMixinStr_OBJ_sm_scheme);
        }
    }




    static if(!is(typeof(SN_dsa))) {
        private enum enumMixinStr_SN_dsa = `enum SN_dsa = "DSA";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_dsa); }))) {
            mixin(enumMixinStr_SN_dsa);
        }
    }




    static if(!is(typeof(LN_dsa))) {
        private enum enumMixinStr_LN_dsa = `enum LN_dsa = "dsaEncryption";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_dsa); }))) {
            mixin(enumMixinStr_LN_dsa);
        }
    }




    static if(!is(typeof(NID_dsa))) {
        private enum enumMixinStr_NID_dsa = `enum NID_dsa = 116;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_dsa); }))) {
            mixin(enumMixinStr_NID_dsa);
        }
    }




    static if(!is(typeof(OBJ_dsa))) {
        private enum enumMixinStr_OBJ_dsa = `enum OBJ_dsa = 1L , 2L , 840L , 10040L , 4L , 1L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_dsa); }))) {
            mixin(enumMixinStr_OBJ_dsa);
        }
    }




    static if(!is(typeof(SN_dsaWithSHA1))) {
        private enum enumMixinStr_SN_dsaWithSHA1 = `enum SN_dsaWithSHA1 = "DSA-SHA1";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_dsaWithSHA1); }))) {
            mixin(enumMixinStr_SN_dsaWithSHA1);
        }
    }




    static if(!is(typeof(LN_dsaWithSHA1))) {
        private enum enumMixinStr_LN_dsaWithSHA1 = `enum LN_dsaWithSHA1 = "dsaWithSHA1";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_dsaWithSHA1); }))) {
            mixin(enumMixinStr_LN_dsaWithSHA1);
        }
    }




    static if(!is(typeof(NID_dsaWithSHA1))) {
        private enum enumMixinStr_NID_dsaWithSHA1 = `enum NID_dsaWithSHA1 = 113;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_dsaWithSHA1); }))) {
            mixin(enumMixinStr_NID_dsaWithSHA1);
        }
    }




    static if(!is(typeof(OBJ_dsaWithSHA1))) {
        private enum enumMixinStr_OBJ_dsaWithSHA1 = `enum OBJ_dsaWithSHA1 = 1L , 2L , 840L , 10040L , 4L , 3L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_dsaWithSHA1); }))) {
            mixin(enumMixinStr_OBJ_dsaWithSHA1);
        }
    }




    static if(!is(typeof(SN_ansi_X9_62))) {
        private enum enumMixinStr_SN_ansi_X9_62 = `enum SN_ansi_X9_62 = "ansi-X9-62";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_ansi_X9_62); }))) {
            mixin(enumMixinStr_SN_ansi_X9_62);
        }
    }




    static if(!is(typeof(LN_ansi_X9_62))) {
        private enum enumMixinStr_LN_ansi_X9_62 = `enum LN_ansi_X9_62 = "ANSI X9.62";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_ansi_X9_62); }))) {
            mixin(enumMixinStr_LN_ansi_X9_62);
        }
    }




    static if(!is(typeof(NID_ansi_X9_62))) {
        private enum enumMixinStr_NID_ansi_X9_62 = `enum NID_ansi_X9_62 = 405;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_ansi_X9_62); }))) {
            mixin(enumMixinStr_NID_ansi_X9_62);
        }
    }




    static if(!is(typeof(OBJ_ansi_X9_62))) {
        private enum enumMixinStr_OBJ_ansi_X9_62 = `enum OBJ_ansi_X9_62 = 1L , 2L , 840L , 10045L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_ansi_X9_62); }))) {
            mixin(enumMixinStr_OBJ_ansi_X9_62);
        }
    }




    static if(!is(typeof(OBJ_X9_62_id_fieldType))) {
        private enum enumMixinStr_OBJ_X9_62_id_fieldType = `enum OBJ_X9_62_id_fieldType = 1L , 2L , 840L , 10045L , 1L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_X9_62_id_fieldType); }))) {
            mixin(enumMixinStr_OBJ_X9_62_id_fieldType);
        }
    }




    static if(!is(typeof(SN_X9_62_prime_field))) {
        private enum enumMixinStr_SN_X9_62_prime_field = `enum SN_X9_62_prime_field = "prime-field";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_X9_62_prime_field); }))) {
            mixin(enumMixinStr_SN_X9_62_prime_field);
        }
    }




    static if(!is(typeof(NID_X9_62_prime_field))) {
        private enum enumMixinStr_NID_X9_62_prime_field = `enum NID_X9_62_prime_field = 406;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_X9_62_prime_field); }))) {
            mixin(enumMixinStr_NID_X9_62_prime_field);
        }
    }




    static if(!is(typeof(OBJ_X9_62_prime_field))) {
        private enum enumMixinStr_OBJ_X9_62_prime_field = `enum OBJ_X9_62_prime_field = 1L , 2L , 840L , 10045L , 1L , 1L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_X9_62_prime_field); }))) {
            mixin(enumMixinStr_OBJ_X9_62_prime_field);
        }
    }




    static if(!is(typeof(SN_X9_62_characteristic_two_field))) {
        private enum enumMixinStr_SN_X9_62_characteristic_two_field = `enum SN_X9_62_characteristic_two_field = "characteristic-two-field";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_X9_62_characteristic_two_field); }))) {
            mixin(enumMixinStr_SN_X9_62_characteristic_two_field);
        }
    }




    static if(!is(typeof(NID_X9_62_characteristic_two_field))) {
        private enum enumMixinStr_NID_X9_62_characteristic_two_field = `enum NID_X9_62_characteristic_two_field = 407;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_X9_62_characteristic_two_field); }))) {
            mixin(enumMixinStr_NID_X9_62_characteristic_two_field);
        }
    }




    static if(!is(typeof(OBJ_X9_62_characteristic_two_field))) {
        private enum enumMixinStr_OBJ_X9_62_characteristic_two_field = `enum OBJ_X9_62_characteristic_two_field = 1L , 2L , 840L , 10045L , 1L , 2L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_X9_62_characteristic_two_field); }))) {
            mixin(enumMixinStr_OBJ_X9_62_characteristic_two_field);
        }
    }




    static if(!is(typeof(SN_X9_62_id_characteristic_two_basis))) {
        private enum enumMixinStr_SN_X9_62_id_characteristic_two_basis = `enum SN_X9_62_id_characteristic_two_basis = "id-characteristic-two-basis";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_X9_62_id_characteristic_two_basis); }))) {
            mixin(enumMixinStr_SN_X9_62_id_characteristic_two_basis);
        }
    }




    static if(!is(typeof(NID_X9_62_id_characteristic_two_basis))) {
        private enum enumMixinStr_NID_X9_62_id_characteristic_two_basis = `enum NID_X9_62_id_characteristic_two_basis = 680;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_X9_62_id_characteristic_two_basis); }))) {
            mixin(enumMixinStr_NID_X9_62_id_characteristic_two_basis);
        }
    }




    static if(!is(typeof(OBJ_X9_62_id_characteristic_two_basis))) {
        private enum enumMixinStr_OBJ_X9_62_id_characteristic_two_basis = `enum OBJ_X9_62_id_characteristic_two_basis = 1L , 2L , 840L , 10045L , 1L , 2L , 3L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_X9_62_id_characteristic_two_basis); }))) {
            mixin(enumMixinStr_OBJ_X9_62_id_characteristic_two_basis);
        }
    }




    static if(!is(typeof(SN_X9_62_onBasis))) {
        private enum enumMixinStr_SN_X9_62_onBasis = `enum SN_X9_62_onBasis = "onBasis";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_X9_62_onBasis); }))) {
            mixin(enumMixinStr_SN_X9_62_onBasis);
        }
    }




    static if(!is(typeof(NID_X9_62_onBasis))) {
        private enum enumMixinStr_NID_X9_62_onBasis = `enum NID_X9_62_onBasis = 681;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_X9_62_onBasis); }))) {
            mixin(enumMixinStr_NID_X9_62_onBasis);
        }
    }




    static if(!is(typeof(OBJ_X9_62_onBasis))) {
        private enum enumMixinStr_OBJ_X9_62_onBasis = `enum OBJ_X9_62_onBasis = 1L , 2L , 840L , 10045L , 1L , 2L , 3L , 1L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_X9_62_onBasis); }))) {
            mixin(enumMixinStr_OBJ_X9_62_onBasis);
        }
    }




    static if(!is(typeof(SN_X9_62_tpBasis))) {
        private enum enumMixinStr_SN_X9_62_tpBasis = `enum SN_X9_62_tpBasis = "tpBasis";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_X9_62_tpBasis); }))) {
            mixin(enumMixinStr_SN_X9_62_tpBasis);
        }
    }




    static if(!is(typeof(NID_X9_62_tpBasis))) {
        private enum enumMixinStr_NID_X9_62_tpBasis = `enum NID_X9_62_tpBasis = 682;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_X9_62_tpBasis); }))) {
            mixin(enumMixinStr_NID_X9_62_tpBasis);
        }
    }




    static if(!is(typeof(OBJ_X9_62_tpBasis))) {
        private enum enumMixinStr_OBJ_X9_62_tpBasis = `enum OBJ_X9_62_tpBasis = 1L , 2L , 840L , 10045L , 1L , 2L , 3L , 2L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_X9_62_tpBasis); }))) {
            mixin(enumMixinStr_OBJ_X9_62_tpBasis);
        }
    }




    static if(!is(typeof(SN_X9_62_ppBasis))) {
        private enum enumMixinStr_SN_X9_62_ppBasis = `enum SN_X9_62_ppBasis = "ppBasis";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_X9_62_ppBasis); }))) {
            mixin(enumMixinStr_SN_X9_62_ppBasis);
        }
    }




    static if(!is(typeof(NID_X9_62_ppBasis))) {
        private enum enumMixinStr_NID_X9_62_ppBasis = `enum NID_X9_62_ppBasis = 683;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_X9_62_ppBasis); }))) {
            mixin(enumMixinStr_NID_X9_62_ppBasis);
        }
    }




    static if(!is(typeof(OBJ_X9_62_ppBasis))) {
        private enum enumMixinStr_OBJ_X9_62_ppBasis = `enum OBJ_X9_62_ppBasis = 1L , 2L , 840L , 10045L , 1L , 2L , 3L , 3L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_X9_62_ppBasis); }))) {
            mixin(enumMixinStr_OBJ_X9_62_ppBasis);
        }
    }




    static if(!is(typeof(OBJ_X9_62_id_publicKeyType))) {
        private enum enumMixinStr_OBJ_X9_62_id_publicKeyType = `enum OBJ_X9_62_id_publicKeyType = 1L , 2L , 840L , 10045L , 2L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_X9_62_id_publicKeyType); }))) {
            mixin(enumMixinStr_OBJ_X9_62_id_publicKeyType);
        }
    }




    static if(!is(typeof(SN_X9_62_id_ecPublicKey))) {
        private enum enumMixinStr_SN_X9_62_id_ecPublicKey = `enum SN_X9_62_id_ecPublicKey = "id-ecPublicKey";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_X9_62_id_ecPublicKey); }))) {
            mixin(enumMixinStr_SN_X9_62_id_ecPublicKey);
        }
    }




    static if(!is(typeof(NID_X9_62_id_ecPublicKey))) {
        private enum enumMixinStr_NID_X9_62_id_ecPublicKey = `enum NID_X9_62_id_ecPublicKey = 408;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_X9_62_id_ecPublicKey); }))) {
            mixin(enumMixinStr_NID_X9_62_id_ecPublicKey);
        }
    }




    static if(!is(typeof(OBJ_X9_62_id_ecPublicKey))) {
        private enum enumMixinStr_OBJ_X9_62_id_ecPublicKey = `enum OBJ_X9_62_id_ecPublicKey = 1L , 2L , 840L , 10045L , 2L , 1L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_X9_62_id_ecPublicKey); }))) {
            mixin(enumMixinStr_OBJ_X9_62_id_ecPublicKey);
        }
    }




    static if(!is(typeof(OBJ_X9_62_ellipticCurve))) {
        private enum enumMixinStr_OBJ_X9_62_ellipticCurve = `enum OBJ_X9_62_ellipticCurve = 1L , 2L , 840L , 10045L , 3L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_X9_62_ellipticCurve); }))) {
            mixin(enumMixinStr_OBJ_X9_62_ellipticCurve);
        }
    }




    static if(!is(typeof(OBJ_X9_62_c_TwoCurve))) {
        private enum enumMixinStr_OBJ_X9_62_c_TwoCurve = `enum OBJ_X9_62_c_TwoCurve = 1L , 2L , 840L , 10045L , 3L , 0L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_X9_62_c_TwoCurve); }))) {
            mixin(enumMixinStr_OBJ_X9_62_c_TwoCurve);
        }
    }




    static if(!is(typeof(SN_X9_62_c2pnb163v1))) {
        private enum enumMixinStr_SN_X9_62_c2pnb163v1 = `enum SN_X9_62_c2pnb163v1 = "c2pnb163v1";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_X9_62_c2pnb163v1); }))) {
            mixin(enumMixinStr_SN_X9_62_c2pnb163v1);
        }
    }




    static if(!is(typeof(NID_X9_62_c2pnb163v1))) {
        private enum enumMixinStr_NID_X9_62_c2pnb163v1 = `enum NID_X9_62_c2pnb163v1 = 684;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_X9_62_c2pnb163v1); }))) {
            mixin(enumMixinStr_NID_X9_62_c2pnb163v1);
        }
    }




    static if(!is(typeof(OBJ_X9_62_c2pnb163v1))) {
        private enum enumMixinStr_OBJ_X9_62_c2pnb163v1 = `enum OBJ_X9_62_c2pnb163v1 = 1L , 2L , 840L , 10045L , 3L , 0L , 1L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_X9_62_c2pnb163v1); }))) {
            mixin(enumMixinStr_OBJ_X9_62_c2pnb163v1);
        }
    }




    static if(!is(typeof(SN_X9_62_c2pnb163v2))) {
        private enum enumMixinStr_SN_X9_62_c2pnb163v2 = `enum SN_X9_62_c2pnb163v2 = "c2pnb163v2";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_X9_62_c2pnb163v2); }))) {
            mixin(enumMixinStr_SN_X9_62_c2pnb163v2);
        }
    }




    static if(!is(typeof(NID_X9_62_c2pnb163v2))) {
        private enum enumMixinStr_NID_X9_62_c2pnb163v2 = `enum NID_X9_62_c2pnb163v2 = 685;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_X9_62_c2pnb163v2); }))) {
            mixin(enumMixinStr_NID_X9_62_c2pnb163v2);
        }
    }




    static if(!is(typeof(OBJ_X9_62_c2pnb163v2))) {
        private enum enumMixinStr_OBJ_X9_62_c2pnb163v2 = `enum OBJ_X9_62_c2pnb163v2 = 1L , 2L , 840L , 10045L , 3L , 0L , 2L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_X9_62_c2pnb163v2); }))) {
            mixin(enumMixinStr_OBJ_X9_62_c2pnb163v2);
        }
    }




    static if(!is(typeof(SN_X9_62_c2pnb163v3))) {
        private enum enumMixinStr_SN_X9_62_c2pnb163v3 = `enum SN_X9_62_c2pnb163v3 = "c2pnb163v3";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_X9_62_c2pnb163v3); }))) {
            mixin(enumMixinStr_SN_X9_62_c2pnb163v3);
        }
    }




    static if(!is(typeof(NID_X9_62_c2pnb163v3))) {
        private enum enumMixinStr_NID_X9_62_c2pnb163v3 = `enum NID_X9_62_c2pnb163v3 = 686;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_X9_62_c2pnb163v3); }))) {
            mixin(enumMixinStr_NID_X9_62_c2pnb163v3);
        }
    }




    static if(!is(typeof(OBJ_X9_62_c2pnb163v3))) {
        private enum enumMixinStr_OBJ_X9_62_c2pnb163v3 = `enum OBJ_X9_62_c2pnb163v3 = 1L , 2L , 840L , 10045L , 3L , 0L , 3L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_X9_62_c2pnb163v3); }))) {
            mixin(enumMixinStr_OBJ_X9_62_c2pnb163v3);
        }
    }




    static if(!is(typeof(SN_X9_62_c2pnb176v1))) {
        private enum enumMixinStr_SN_X9_62_c2pnb176v1 = `enum SN_X9_62_c2pnb176v1 = "c2pnb176v1";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_X9_62_c2pnb176v1); }))) {
            mixin(enumMixinStr_SN_X9_62_c2pnb176v1);
        }
    }




    static if(!is(typeof(NID_X9_62_c2pnb176v1))) {
        private enum enumMixinStr_NID_X9_62_c2pnb176v1 = `enum NID_X9_62_c2pnb176v1 = 687;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_X9_62_c2pnb176v1); }))) {
            mixin(enumMixinStr_NID_X9_62_c2pnb176v1);
        }
    }




    static if(!is(typeof(OBJ_X9_62_c2pnb176v1))) {
        private enum enumMixinStr_OBJ_X9_62_c2pnb176v1 = `enum OBJ_X9_62_c2pnb176v1 = 1L , 2L , 840L , 10045L , 3L , 0L , 4L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_X9_62_c2pnb176v1); }))) {
            mixin(enumMixinStr_OBJ_X9_62_c2pnb176v1);
        }
    }




    static if(!is(typeof(SN_X9_62_c2tnb191v1))) {
        private enum enumMixinStr_SN_X9_62_c2tnb191v1 = `enum SN_X9_62_c2tnb191v1 = "c2tnb191v1";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_X9_62_c2tnb191v1); }))) {
            mixin(enumMixinStr_SN_X9_62_c2tnb191v1);
        }
    }




    static if(!is(typeof(NID_X9_62_c2tnb191v1))) {
        private enum enumMixinStr_NID_X9_62_c2tnb191v1 = `enum NID_X9_62_c2tnb191v1 = 688;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_X9_62_c2tnb191v1); }))) {
            mixin(enumMixinStr_NID_X9_62_c2tnb191v1);
        }
    }




    static if(!is(typeof(OBJ_X9_62_c2tnb191v1))) {
        private enum enumMixinStr_OBJ_X9_62_c2tnb191v1 = `enum OBJ_X9_62_c2tnb191v1 = 1L , 2L , 840L , 10045L , 3L , 0L , 5L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_X9_62_c2tnb191v1); }))) {
            mixin(enumMixinStr_OBJ_X9_62_c2tnb191v1);
        }
    }




    static if(!is(typeof(SN_X9_62_c2tnb191v2))) {
        private enum enumMixinStr_SN_X9_62_c2tnb191v2 = `enum SN_X9_62_c2tnb191v2 = "c2tnb191v2";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_X9_62_c2tnb191v2); }))) {
            mixin(enumMixinStr_SN_X9_62_c2tnb191v2);
        }
    }




    static if(!is(typeof(NID_X9_62_c2tnb191v2))) {
        private enum enumMixinStr_NID_X9_62_c2tnb191v2 = `enum NID_X9_62_c2tnb191v2 = 689;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_X9_62_c2tnb191v2); }))) {
            mixin(enumMixinStr_NID_X9_62_c2tnb191v2);
        }
    }




    static if(!is(typeof(OBJ_X9_62_c2tnb191v2))) {
        private enum enumMixinStr_OBJ_X9_62_c2tnb191v2 = `enum OBJ_X9_62_c2tnb191v2 = 1L , 2L , 840L , 10045L , 3L , 0L , 6L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_X9_62_c2tnb191v2); }))) {
            mixin(enumMixinStr_OBJ_X9_62_c2tnb191v2);
        }
    }




    static if(!is(typeof(SN_X9_62_c2tnb191v3))) {
        private enum enumMixinStr_SN_X9_62_c2tnb191v3 = `enum SN_X9_62_c2tnb191v3 = "c2tnb191v3";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_X9_62_c2tnb191v3); }))) {
            mixin(enumMixinStr_SN_X9_62_c2tnb191v3);
        }
    }




    static if(!is(typeof(NID_X9_62_c2tnb191v3))) {
        private enum enumMixinStr_NID_X9_62_c2tnb191v3 = `enum NID_X9_62_c2tnb191v3 = 690;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_X9_62_c2tnb191v3); }))) {
            mixin(enumMixinStr_NID_X9_62_c2tnb191v3);
        }
    }




    static if(!is(typeof(OBJ_X9_62_c2tnb191v3))) {
        private enum enumMixinStr_OBJ_X9_62_c2tnb191v3 = `enum OBJ_X9_62_c2tnb191v3 = 1L , 2L , 840L , 10045L , 3L , 0L , 7L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_X9_62_c2tnb191v3); }))) {
            mixin(enumMixinStr_OBJ_X9_62_c2tnb191v3);
        }
    }




    static if(!is(typeof(SN_X9_62_c2onb191v4))) {
        private enum enumMixinStr_SN_X9_62_c2onb191v4 = `enum SN_X9_62_c2onb191v4 = "c2onb191v4";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_X9_62_c2onb191v4); }))) {
            mixin(enumMixinStr_SN_X9_62_c2onb191v4);
        }
    }




    static if(!is(typeof(NID_X9_62_c2onb191v4))) {
        private enum enumMixinStr_NID_X9_62_c2onb191v4 = `enum NID_X9_62_c2onb191v4 = 691;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_X9_62_c2onb191v4); }))) {
            mixin(enumMixinStr_NID_X9_62_c2onb191v4);
        }
    }




    static if(!is(typeof(OBJ_X9_62_c2onb191v4))) {
        private enum enumMixinStr_OBJ_X9_62_c2onb191v4 = `enum OBJ_X9_62_c2onb191v4 = 1L , 2L , 840L , 10045L , 3L , 0L , 8L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_X9_62_c2onb191v4); }))) {
            mixin(enumMixinStr_OBJ_X9_62_c2onb191v4);
        }
    }




    static if(!is(typeof(SN_X9_62_c2onb191v5))) {
        private enum enumMixinStr_SN_X9_62_c2onb191v5 = `enum SN_X9_62_c2onb191v5 = "c2onb191v5";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_X9_62_c2onb191v5); }))) {
            mixin(enumMixinStr_SN_X9_62_c2onb191v5);
        }
    }




    static if(!is(typeof(NID_X9_62_c2onb191v5))) {
        private enum enumMixinStr_NID_X9_62_c2onb191v5 = `enum NID_X9_62_c2onb191v5 = 692;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_X9_62_c2onb191v5); }))) {
            mixin(enumMixinStr_NID_X9_62_c2onb191v5);
        }
    }




    static if(!is(typeof(OBJ_X9_62_c2onb191v5))) {
        private enum enumMixinStr_OBJ_X9_62_c2onb191v5 = `enum OBJ_X9_62_c2onb191v5 = 1L , 2L , 840L , 10045L , 3L , 0L , 9L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_X9_62_c2onb191v5); }))) {
            mixin(enumMixinStr_OBJ_X9_62_c2onb191v5);
        }
    }




    static if(!is(typeof(SN_X9_62_c2pnb208w1))) {
        private enum enumMixinStr_SN_X9_62_c2pnb208w1 = `enum SN_X9_62_c2pnb208w1 = "c2pnb208w1";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_X9_62_c2pnb208w1); }))) {
            mixin(enumMixinStr_SN_X9_62_c2pnb208w1);
        }
    }




    static if(!is(typeof(NID_X9_62_c2pnb208w1))) {
        private enum enumMixinStr_NID_X9_62_c2pnb208w1 = `enum NID_X9_62_c2pnb208w1 = 693;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_X9_62_c2pnb208w1); }))) {
            mixin(enumMixinStr_NID_X9_62_c2pnb208w1);
        }
    }




    static if(!is(typeof(OBJ_X9_62_c2pnb208w1))) {
        private enum enumMixinStr_OBJ_X9_62_c2pnb208w1 = `enum OBJ_X9_62_c2pnb208w1 = 1L , 2L , 840L , 10045L , 3L , 0L , 10L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_X9_62_c2pnb208w1); }))) {
            mixin(enumMixinStr_OBJ_X9_62_c2pnb208w1);
        }
    }




    static if(!is(typeof(SN_X9_62_c2tnb239v1))) {
        private enum enumMixinStr_SN_X9_62_c2tnb239v1 = `enum SN_X9_62_c2tnb239v1 = "c2tnb239v1";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_X9_62_c2tnb239v1); }))) {
            mixin(enumMixinStr_SN_X9_62_c2tnb239v1);
        }
    }




    static if(!is(typeof(NID_X9_62_c2tnb239v1))) {
        private enum enumMixinStr_NID_X9_62_c2tnb239v1 = `enum NID_X9_62_c2tnb239v1 = 694;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_X9_62_c2tnb239v1); }))) {
            mixin(enumMixinStr_NID_X9_62_c2tnb239v1);
        }
    }




    static if(!is(typeof(OBJ_X9_62_c2tnb239v1))) {
        private enum enumMixinStr_OBJ_X9_62_c2tnb239v1 = `enum OBJ_X9_62_c2tnb239v1 = 1L , 2L , 840L , 10045L , 3L , 0L , 11L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_X9_62_c2tnb239v1); }))) {
            mixin(enumMixinStr_OBJ_X9_62_c2tnb239v1);
        }
    }




    static if(!is(typeof(SN_X9_62_c2tnb239v2))) {
        private enum enumMixinStr_SN_X9_62_c2tnb239v2 = `enum SN_X9_62_c2tnb239v2 = "c2tnb239v2";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_X9_62_c2tnb239v2); }))) {
            mixin(enumMixinStr_SN_X9_62_c2tnb239v2);
        }
    }




    static if(!is(typeof(NID_X9_62_c2tnb239v2))) {
        private enum enumMixinStr_NID_X9_62_c2tnb239v2 = `enum NID_X9_62_c2tnb239v2 = 695;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_X9_62_c2tnb239v2); }))) {
            mixin(enumMixinStr_NID_X9_62_c2tnb239v2);
        }
    }




    static if(!is(typeof(OBJ_X9_62_c2tnb239v2))) {
        private enum enumMixinStr_OBJ_X9_62_c2tnb239v2 = `enum OBJ_X9_62_c2tnb239v2 = 1L , 2L , 840L , 10045L , 3L , 0L , 12L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_X9_62_c2tnb239v2); }))) {
            mixin(enumMixinStr_OBJ_X9_62_c2tnb239v2);
        }
    }




    static if(!is(typeof(SN_X9_62_c2tnb239v3))) {
        private enum enumMixinStr_SN_X9_62_c2tnb239v3 = `enum SN_X9_62_c2tnb239v3 = "c2tnb239v3";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_X9_62_c2tnb239v3); }))) {
            mixin(enumMixinStr_SN_X9_62_c2tnb239v3);
        }
    }




    static if(!is(typeof(NID_X9_62_c2tnb239v3))) {
        private enum enumMixinStr_NID_X9_62_c2tnb239v3 = `enum NID_X9_62_c2tnb239v3 = 696;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_X9_62_c2tnb239v3); }))) {
            mixin(enumMixinStr_NID_X9_62_c2tnb239v3);
        }
    }




    static if(!is(typeof(OBJ_X9_62_c2tnb239v3))) {
        private enum enumMixinStr_OBJ_X9_62_c2tnb239v3 = `enum OBJ_X9_62_c2tnb239v3 = 1L , 2L , 840L , 10045L , 3L , 0L , 13L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_X9_62_c2tnb239v3); }))) {
            mixin(enumMixinStr_OBJ_X9_62_c2tnb239v3);
        }
    }




    static if(!is(typeof(SN_X9_62_c2onb239v4))) {
        private enum enumMixinStr_SN_X9_62_c2onb239v4 = `enum SN_X9_62_c2onb239v4 = "c2onb239v4";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_X9_62_c2onb239v4); }))) {
            mixin(enumMixinStr_SN_X9_62_c2onb239v4);
        }
    }




    static if(!is(typeof(NID_X9_62_c2onb239v4))) {
        private enum enumMixinStr_NID_X9_62_c2onb239v4 = `enum NID_X9_62_c2onb239v4 = 697;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_X9_62_c2onb239v4); }))) {
            mixin(enumMixinStr_NID_X9_62_c2onb239v4);
        }
    }




    static if(!is(typeof(OBJ_X9_62_c2onb239v4))) {
        private enum enumMixinStr_OBJ_X9_62_c2onb239v4 = `enum OBJ_X9_62_c2onb239v4 = 1L , 2L , 840L , 10045L , 3L , 0L , 14L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_X9_62_c2onb239v4); }))) {
            mixin(enumMixinStr_OBJ_X9_62_c2onb239v4);
        }
    }




    static if(!is(typeof(SN_X9_62_c2onb239v5))) {
        private enum enumMixinStr_SN_X9_62_c2onb239v5 = `enum SN_X9_62_c2onb239v5 = "c2onb239v5";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_X9_62_c2onb239v5); }))) {
            mixin(enumMixinStr_SN_X9_62_c2onb239v5);
        }
    }




    static if(!is(typeof(NID_X9_62_c2onb239v5))) {
        private enum enumMixinStr_NID_X9_62_c2onb239v5 = `enum NID_X9_62_c2onb239v5 = 698;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_X9_62_c2onb239v5); }))) {
            mixin(enumMixinStr_NID_X9_62_c2onb239v5);
        }
    }




    static if(!is(typeof(OBJ_X9_62_c2onb239v5))) {
        private enum enumMixinStr_OBJ_X9_62_c2onb239v5 = `enum OBJ_X9_62_c2onb239v5 = 1L , 2L , 840L , 10045L , 3L , 0L , 15L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_X9_62_c2onb239v5); }))) {
            mixin(enumMixinStr_OBJ_X9_62_c2onb239v5);
        }
    }




    static if(!is(typeof(SN_X9_62_c2pnb272w1))) {
        private enum enumMixinStr_SN_X9_62_c2pnb272w1 = `enum SN_X9_62_c2pnb272w1 = "c2pnb272w1";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_X9_62_c2pnb272w1); }))) {
            mixin(enumMixinStr_SN_X9_62_c2pnb272w1);
        }
    }




    static if(!is(typeof(NID_X9_62_c2pnb272w1))) {
        private enum enumMixinStr_NID_X9_62_c2pnb272w1 = `enum NID_X9_62_c2pnb272w1 = 699;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_X9_62_c2pnb272w1); }))) {
            mixin(enumMixinStr_NID_X9_62_c2pnb272w1);
        }
    }




    static if(!is(typeof(OBJ_X9_62_c2pnb272w1))) {
        private enum enumMixinStr_OBJ_X9_62_c2pnb272w1 = `enum OBJ_X9_62_c2pnb272w1 = 1L , 2L , 840L , 10045L , 3L , 0L , 16L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_X9_62_c2pnb272w1); }))) {
            mixin(enumMixinStr_OBJ_X9_62_c2pnb272w1);
        }
    }




    static if(!is(typeof(SN_X9_62_c2pnb304w1))) {
        private enum enumMixinStr_SN_X9_62_c2pnb304w1 = `enum SN_X9_62_c2pnb304w1 = "c2pnb304w1";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_X9_62_c2pnb304w1); }))) {
            mixin(enumMixinStr_SN_X9_62_c2pnb304w1);
        }
    }




    static if(!is(typeof(NID_X9_62_c2pnb304w1))) {
        private enum enumMixinStr_NID_X9_62_c2pnb304w1 = `enum NID_X9_62_c2pnb304w1 = 700;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_X9_62_c2pnb304w1); }))) {
            mixin(enumMixinStr_NID_X9_62_c2pnb304w1);
        }
    }




    static if(!is(typeof(OBJ_X9_62_c2pnb304w1))) {
        private enum enumMixinStr_OBJ_X9_62_c2pnb304w1 = `enum OBJ_X9_62_c2pnb304w1 = 1L , 2L , 840L , 10045L , 3L , 0L , 17L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_X9_62_c2pnb304w1); }))) {
            mixin(enumMixinStr_OBJ_X9_62_c2pnb304w1);
        }
    }




    static if(!is(typeof(SN_X9_62_c2tnb359v1))) {
        private enum enumMixinStr_SN_X9_62_c2tnb359v1 = `enum SN_X9_62_c2tnb359v1 = "c2tnb359v1";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_X9_62_c2tnb359v1); }))) {
            mixin(enumMixinStr_SN_X9_62_c2tnb359v1);
        }
    }




    static if(!is(typeof(NID_X9_62_c2tnb359v1))) {
        private enum enumMixinStr_NID_X9_62_c2tnb359v1 = `enum NID_X9_62_c2tnb359v1 = 701;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_X9_62_c2tnb359v1); }))) {
            mixin(enumMixinStr_NID_X9_62_c2tnb359v1);
        }
    }




    static if(!is(typeof(OBJ_X9_62_c2tnb359v1))) {
        private enum enumMixinStr_OBJ_X9_62_c2tnb359v1 = `enum OBJ_X9_62_c2tnb359v1 = 1L , 2L , 840L , 10045L , 3L , 0L , 18L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_X9_62_c2tnb359v1); }))) {
            mixin(enumMixinStr_OBJ_X9_62_c2tnb359v1);
        }
    }




    static if(!is(typeof(SN_X9_62_c2pnb368w1))) {
        private enum enumMixinStr_SN_X9_62_c2pnb368w1 = `enum SN_X9_62_c2pnb368w1 = "c2pnb368w1";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_X9_62_c2pnb368w1); }))) {
            mixin(enumMixinStr_SN_X9_62_c2pnb368w1);
        }
    }




    static if(!is(typeof(NID_X9_62_c2pnb368w1))) {
        private enum enumMixinStr_NID_X9_62_c2pnb368w1 = `enum NID_X9_62_c2pnb368w1 = 702;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_X9_62_c2pnb368w1); }))) {
            mixin(enumMixinStr_NID_X9_62_c2pnb368w1);
        }
    }




    static if(!is(typeof(OBJ_X9_62_c2pnb368w1))) {
        private enum enumMixinStr_OBJ_X9_62_c2pnb368w1 = `enum OBJ_X9_62_c2pnb368w1 = 1L , 2L , 840L , 10045L , 3L , 0L , 19L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_X9_62_c2pnb368w1); }))) {
            mixin(enumMixinStr_OBJ_X9_62_c2pnb368w1);
        }
    }




    static if(!is(typeof(SN_X9_62_c2tnb431r1))) {
        private enum enumMixinStr_SN_X9_62_c2tnb431r1 = `enum SN_X9_62_c2tnb431r1 = "c2tnb431r1";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_X9_62_c2tnb431r1); }))) {
            mixin(enumMixinStr_SN_X9_62_c2tnb431r1);
        }
    }




    static if(!is(typeof(NID_X9_62_c2tnb431r1))) {
        private enum enumMixinStr_NID_X9_62_c2tnb431r1 = `enum NID_X9_62_c2tnb431r1 = 703;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_X9_62_c2tnb431r1); }))) {
            mixin(enumMixinStr_NID_X9_62_c2tnb431r1);
        }
    }




    static if(!is(typeof(OBJ_X9_62_c2tnb431r1))) {
        private enum enumMixinStr_OBJ_X9_62_c2tnb431r1 = `enum OBJ_X9_62_c2tnb431r1 = 1L , 2L , 840L , 10045L , 3L , 0L , 20L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_X9_62_c2tnb431r1); }))) {
            mixin(enumMixinStr_OBJ_X9_62_c2tnb431r1);
        }
    }




    static if(!is(typeof(OBJ_X9_62_primeCurve))) {
        private enum enumMixinStr_OBJ_X9_62_primeCurve = `enum OBJ_X9_62_primeCurve = 1L , 2L , 840L , 10045L , 3L , 1L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_X9_62_primeCurve); }))) {
            mixin(enumMixinStr_OBJ_X9_62_primeCurve);
        }
    }




    static if(!is(typeof(SN_X9_62_prime192v1))) {
        private enum enumMixinStr_SN_X9_62_prime192v1 = `enum SN_X9_62_prime192v1 = "prime192v1";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_X9_62_prime192v1); }))) {
            mixin(enumMixinStr_SN_X9_62_prime192v1);
        }
    }




    static if(!is(typeof(NID_X9_62_prime192v1))) {
        private enum enumMixinStr_NID_X9_62_prime192v1 = `enum NID_X9_62_prime192v1 = 409;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_X9_62_prime192v1); }))) {
            mixin(enumMixinStr_NID_X9_62_prime192v1);
        }
    }




    static if(!is(typeof(OBJ_X9_62_prime192v1))) {
        private enum enumMixinStr_OBJ_X9_62_prime192v1 = `enum OBJ_X9_62_prime192v1 = 1L , 2L , 840L , 10045L , 3L , 1L , 1L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_X9_62_prime192v1); }))) {
            mixin(enumMixinStr_OBJ_X9_62_prime192v1);
        }
    }




    static if(!is(typeof(SN_X9_62_prime192v2))) {
        private enum enumMixinStr_SN_X9_62_prime192v2 = `enum SN_X9_62_prime192v2 = "prime192v2";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_X9_62_prime192v2); }))) {
            mixin(enumMixinStr_SN_X9_62_prime192v2);
        }
    }




    static if(!is(typeof(NID_X9_62_prime192v2))) {
        private enum enumMixinStr_NID_X9_62_prime192v2 = `enum NID_X9_62_prime192v2 = 410;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_X9_62_prime192v2); }))) {
            mixin(enumMixinStr_NID_X9_62_prime192v2);
        }
    }




    static if(!is(typeof(OBJ_X9_62_prime192v2))) {
        private enum enumMixinStr_OBJ_X9_62_prime192v2 = `enum OBJ_X9_62_prime192v2 = 1L , 2L , 840L , 10045L , 3L , 1L , 2L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_X9_62_prime192v2); }))) {
            mixin(enumMixinStr_OBJ_X9_62_prime192v2);
        }
    }




    static if(!is(typeof(SN_X9_62_prime192v3))) {
        private enum enumMixinStr_SN_X9_62_prime192v3 = `enum SN_X9_62_prime192v3 = "prime192v3";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_X9_62_prime192v3); }))) {
            mixin(enumMixinStr_SN_X9_62_prime192v3);
        }
    }




    static if(!is(typeof(NID_X9_62_prime192v3))) {
        private enum enumMixinStr_NID_X9_62_prime192v3 = `enum NID_X9_62_prime192v3 = 411;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_X9_62_prime192v3); }))) {
            mixin(enumMixinStr_NID_X9_62_prime192v3);
        }
    }




    static if(!is(typeof(OBJ_X9_62_prime192v3))) {
        private enum enumMixinStr_OBJ_X9_62_prime192v3 = `enum OBJ_X9_62_prime192v3 = 1L , 2L , 840L , 10045L , 3L , 1L , 3L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_X9_62_prime192v3); }))) {
            mixin(enumMixinStr_OBJ_X9_62_prime192v3);
        }
    }




    static if(!is(typeof(SN_X9_62_prime239v1))) {
        private enum enumMixinStr_SN_X9_62_prime239v1 = `enum SN_X9_62_prime239v1 = "prime239v1";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_X9_62_prime239v1); }))) {
            mixin(enumMixinStr_SN_X9_62_prime239v1);
        }
    }




    static if(!is(typeof(NID_X9_62_prime239v1))) {
        private enum enumMixinStr_NID_X9_62_prime239v1 = `enum NID_X9_62_prime239v1 = 412;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_X9_62_prime239v1); }))) {
            mixin(enumMixinStr_NID_X9_62_prime239v1);
        }
    }




    static if(!is(typeof(OBJ_X9_62_prime239v1))) {
        private enum enumMixinStr_OBJ_X9_62_prime239v1 = `enum OBJ_X9_62_prime239v1 = 1L , 2L , 840L , 10045L , 3L , 1L , 4L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_X9_62_prime239v1); }))) {
            mixin(enumMixinStr_OBJ_X9_62_prime239v1);
        }
    }




    static if(!is(typeof(SN_X9_62_prime239v2))) {
        private enum enumMixinStr_SN_X9_62_prime239v2 = `enum SN_X9_62_prime239v2 = "prime239v2";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_X9_62_prime239v2); }))) {
            mixin(enumMixinStr_SN_X9_62_prime239v2);
        }
    }




    static if(!is(typeof(NID_X9_62_prime239v2))) {
        private enum enumMixinStr_NID_X9_62_prime239v2 = `enum NID_X9_62_prime239v2 = 413;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_X9_62_prime239v2); }))) {
            mixin(enumMixinStr_NID_X9_62_prime239v2);
        }
    }




    static if(!is(typeof(OBJ_X9_62_prime239v2))) {
        private enum enumMixinStr_OBJ_X9_62_prime239v2 = `enum OBJ_X9_62_prime239v2 = 1L , 2L , 840L , 10045L , 3L , 1L , 5L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_X9_62_prime239v2); }))) {
            mixin(enumMixinStr_OBJ_X9_62_prime239v2);
        }
    }




    static if(!is(typeof(SN_X9_62_prime239v3))) {
        private enum enumMixinStr_SN_X9_62_prime239v3 = `enum SN_X9_62_prime239v3 = "prime239v3";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_X9_62_prime239v3); }))) {
            mixin(enumMixinStr_SN_X9_62_prime239v3);
        }
    }




    static if(!is(typeof(NID_X9_62_prime239v3))) {
        private enum enumMixinStr_NID_X9_62_prime239v3 = `enum NID_X9_62_prime239v3 = 414;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_X9_62_prime239v3); }))) {
            mixin(enumMixinStr_NID_X9_62_prime239v3);
        }
    }




    static if(!is(typeof(OBJ_X9_62_prime239v3))) {
        private enum enumMixinStr_OBJ_X9_62_prime239v3 = `enum OBJ_X9_62_prime239v3 = 1L , 2L , 840L , 10045L , 3L , 1L , 6L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_X9_62_prime239v3); }))) {
            mixin(enumMixinStr_OBJ_X9_62_prime239v3);
        }
    }




    static if(!is(typeof(SN_X9_62_prime256v1))) {
        private enum enumMixinStr_SN_X9_62_prime256v1 = `enum SN_X9_62_prime256v1 = "prime256v1";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_X9_62_prime256v1); }))) {
            mixin(enumMixinStr_SN_X9_62_prime256v1);
        }
    }




    static if(!is(typeof(NID_X9_62_prime256v1))) {
        private enum enumMixinStr_NID_X9_62_prime256v1 = `enum NID_X9_62_prime256v1 = 415;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_X9_62_prime256v1); }))) {
            mixin(enumMixinStr_NID_X9_62_prime256v1);
        }
    }




    static if(!is(typeof(OBJ_X9_62_prime256v1))) {
        private enum enumMixinStr_OBJ_X9_62_prime256v1 = `enum OBJ_X9_62_prime256v1 = 1L , 2L , 840L , 10045L , 3L , 1L , 7L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_X9_62_prime256v1); }))) {
            mixin(enumMixinStr_OBJ_X9_62_prime256v1);
        }
    }




    static if(!is(typeof(OBJ_X9_62_id_ecSigType))) {
        private enum enumMixinStr_OBJ_X9_62_id_ecSigType = `enum OBJ_X9_62_id_ecSigType = 1L , 2L , 840L , 10045L , 4L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_X9_62_id_ecSigType); }))) {
            mixin(enumMixinStr_OBJ_X9_62_id_ecSigType);
        }
    }




    static if(!is(typeof(SN_ecdsa_with_SHA1))) {
        private enum enumMixinStr_SN_ecdsa_with_SHA1 = `enum SN_ecdsa_with_SHA1 = "ecdsa-with-SHA1";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_ecdsa_with_SHA1); }))) {
            mixin(enumMixinStr_SN_ecdsa_with_SHA1);
        }
    }




    static if(!is(typeof(NID_ecdsa_with_SHA1))) {
        private enum enumMixinStr_NID_ecdsa_with_SHA1 = `enum NID_ecdsa_with_SHA1 = 416;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_ecdsa_with_SHA1); }))) {
            mixin(enumMixinStr_NID_ecdsa_with_SHA1);
        }
    }




    static if(!is(typeof(OBJ_ecdsa_with_SHA1))) {
        private enum enumMixinStr_OBJ_ecdsa_with_SHA1 = `enum OBJ_ecdsa_with_SHA1 = 1L , 2L , 840L , 10045L , 4L , 1L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_ecdsa_with_SHA1); }))) {
            mixin(enumMixinStr_OBJ_ecdsa_with_SHA1);
        }
    }




    static if(!is(typeof(SN_ecdsa_with_Recommended))) {
        private enum enumMixinStr_SN_ecdsa_with_Recommended = `enum SN_ecdsa_with_Recommended = "ecdsa-with-Recommended";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_ecdsa_with_Recommended); }))) {
            mixin(enumMixinStr_SN_ecdsa_with_Recommended);
        }
    }




    static if(!is(typeof(NID_ecdsa_with_Recommended))) {
        private enum enumMixinStr_NID_ecdsa_with_Recommended = `enum NID_ecdsa_with_Recommended = 791;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_ecdsa_with_Recommended); }))) {
            mixin(enumMixinStr_NID_ecdsa_with_Recommended);
        }
    }




    static if(!is(typeof(OBJ_ecdsa_with_Recommended))) {
        private enum enumMixinStr_OBJ_ecdsa_with_Recommended = `enum OBJ_ecdsa_with_Recommended = 1L , 2L , 840L , 10045L , 4L , 2L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_ecdsa_with_Recommended); }))) {
            mixin(enumMixinStr_OBJ_ecdsa_with_Recommended);
        }
    }




    static if(!is(typeof(SN_ecdsa_with_Specified))) {
        private enum enumMixinStr_SN_ecdsa_with_Specified = `enum SN_ecdsa_with_Specified = "ecdsa-with-Specified";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_ecdsa_with_Specified); }))) {
            mixin(enumMixinStr_SN_ecdsa_with_Specified);
        }
    }




    static if(!is(typeof(NID_ecdsa_with_Specified))) {
        private enum enumMixinStr_NID_ecdsa_with_Specified = `enum NID_ecdsa_with_Specified = 792;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_ecdsa_with_Specified); }))) {
            mixin(enumMixinStr_NID_ecdsa_with_Specified);
        }
    }




    static if(!is(typeof(OBJ_ecdsa_with_Specified))) {
        private enum enumMixinStr_OBJ_ecdsa_with_Specified = `enum OBJ_ecdsa_with_Specified = 1L , 2L , 840L , 10045L , 4L , 3L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_ecdsa_with_Specified); }))) {
            mixin(enumMixinStr_OBJ_ecdsa_with_Specified);
        }
    }




    static if(!is(typeof(SN_ecdsa_with_SHA224))) {
        private enum enumMixinStr_SN_ecdsa_with_SHA224 = `enum SN_ecdsa_with_SHA224 = "ecdsa-with-SHA224";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_ecdsa_with_SHA224); }))) {
            mixin(enumMixinStr_SN_ecdsa_with_SHA224);
        }
    }




    static if(!is(typeof(NID_ecdsa_with_SHA224))) {
        private enum enumMixinStr_NID_ecdsa_with_SHA224 = `enum NID_ecdsa_with_SHA224 = 793;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_ecdsa_with_SHA224); }))) {
            mixin(enumMixinStr_NID_ecdsa_with_SHA224);
        }
    }




    static if(!is(typeof(OBJ_ecdsa_with_SHA224))) {
        private enum enumMixinStr_OBJ_ecdsa_with_SHA224 = `enum OBJ_ecdsa_with_SHA224 = 1L , 2L , 840L , 10045L , 4L , 3L , 1L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_ecdsa_with_SHA224); }))) {
            mixin(enumMixinStr_OBJ_ecdsa_with_SHA224);
        }
    }




    static if(!is(typeof(SN_ecdsa_with_SHA256))) {
        private enum enumMixinStr_SN_ecdsa_with_SHA256 = `enum SN_ecdsa_with_SHA256 = "ecdsa-with-SHA256";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_ecdsa_with_SHA256); }))) {
            mixin(enumMixinStr_SN_ecdsa_with_SHA256);
        }
    }




    static if(!is(typeof(NID_ecdsa_with_SHA256))) {
        private enum enumMixinStr_NID_ecdsa_with_SHA256 = `enum NID_ecdsa_with_SHA256 = 794;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_ecdsa_with_SHA256); }))) {
            mixin(enumMixinStr_NID_ecdsa_with_SHA256);
        }
    }




    static if(!is(typeof(OBJ_ecdsa_with_SHA256))) {
        private enum enumMixinStr_OBJ_ecdsa_with_SHA256 = `enum OBJ_ecdsa_with_SHA256 = 1L , 2L , 840L , 10045L , 4L , 3L , 2L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_ecdsa_with_SHA256); }))) {
            mixin(enumMixinStr_OBJ_ecdsa_with_SHA256);
        }
    }




    static if(!is(typeof(SN_ecdsa_with_SHA384))) {
        private enum enumMixinStr_SN_ecdsa_with_SHA384 = `enum SN_ecdsa_with_SHA384 = "ecdsa-with-SHA384";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_ecdsa_with_SHA384); }))) {
            mixin(enumMixinStr_SN_ecdsa_with_SHA384);
        }
    }




    static if(!is(typeof(NID_ecdsa_with_SHA384))) {
        private enum enumMixinStr_NID_ecdsa_with_SHA384 = `enum NID_ecdsa_with_SHA384 = 795;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_ecdsa_with_SHA384); }))) {
            mixin(enumMixinStr_NID_ecdsa_with_SHA384);
        }
    }




    static if(!is(typeof(OBJ_ecdsa_with_SHA384))) {
        private enum enumMixinStr_OBJ_ecdsa_with_SHA384 = `enum OBJ_ecdsa_with_SHA384 = 1L , 2L , 840L , 10045L , 4L , 3L , 3L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_ecdsa_with_SHA384); }))) {
            mixin(enumMixinStr_OBJ_ecdsa_with_SHA384);
        }
    }




    static if(!is(typeof(SN_ecdsa_with_SHA512))) {
        private enum enumMixinStr_SN_ecdsa_with_SHA512 = `enum SN_ecdsa_with_SHA512 = "ecdsa-with-SHA512";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_ecdsa_with_SHA512); }))) {
            mixin(enumMixinStr_SN_ecdsa_with_SHA512);
        }
    }




    static if(!is(typeof(NID_ecdsa_with_SHA512))) {
        private enum enumMixinStr_NID_ecdsa_with_SHA512 = `enum NID_ecdsa_with_SHA512 = 796;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_ecdsa_with_SHA512); }))) {
            mixin(enumMixinStr_NID_ecdsa_with_SHA512);
        }
    }




    static if(!is(typeof(OBJ_ecdsa_with_SHA512))) {
        private enum enumMixinStr_OBJ_ecdsa_with_SHA512 = `enum OBJ_ecdsa_with_SHA512 = 1L , 2L , 840L , 10045L , 4L , 3L , 4L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_ecdsa_with_SHA512); }))) {
            mixin(enumMixinStr_OBJ_ecdsa_with_SHA512);
        }
    }




    static if(!is(typeof(OBJ_secg_ellipticCurve))) {
        private enum enumMixinStr_OBJ_secg_ellipticCurve = `enum OBJ_secg_ellipticCurve = 1L , 3L , 132L , 0L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_secg_ellipticCurve); }))) {
            mixin(enumMixinStr_OBJ_secg_ellipticCurve);
        }
    }




    static if(!is(typeof(SN_secp112r1))) {
        private enum enumMixinStr_SN_secp112r1 = `enum SN_secp112r1 = "secp112r1";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_secp112r1); }))) {
            mixin(enumMixinStr_SN_secp112r1);
        }
    }




    static if(!is(typeof(NID_secp112r1))) {
        private enum enumMixinStr_NID_secp112r1 = `enum NID_secp112r1 = 704;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_secp112r1); }))) {
            mixin(enumMixinStr_NID_secp112r1);
        }
    }




    static if(!is(typeof(OBJ_secp112r1))) {
        private enum enumMixinStr_OBJ_secp112r1 = `enum OBJ_secp112r1 = 1L , 3L , 132L , 0L , 6L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_secp112r1); }))) {
            mixin(enumMixinStr_OBJ_secp112r1);
        }
    }




    static if(!is(typeof(SN_secp112r2))) {
        private enum enumMixinStr_SN_secp112r2 = `enum SN_secp112r2 = "secp112r2";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_secp112r2); }))) {
            mixin(enumMixinStr_SN_secp112r2);
        }
    }




    static if(!is(typeof(NID_secp112r2))) {
        private enum enumMixinStr_NID_secp112r2 = `enum NID_secp112r2 = 705;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_secp112r2); }))) {
            mixin(enumMixinStr_NID_secp112r2);
        }
    }




    static if(!is(typeof(OBJ_secp112r2))) {
        private enum enumMixinStr_OBJ_secp112r2 = `enum OBJ_secp112r2 = 1L , 3L , 132L , 0L , 7L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_secp112r2); }))) {
            mixin(enumMixinStr_OBJ_secp112r2);
        }
    }




    static if(!is(typeof(SN_secp128r1))) {
        private enum enumMixinStr_SN_secp128r1 = `enum SN_secp128r1 = "secp128r1";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_secp128r1); }))) {
            mixin(enumMixinStr_SN_secp128r1);
        }
    }




    static if(!is(typeof(NID_secp128r1))) {
        private enum enumMixinStr_NID_secp128r1 = `enum NID_secp128r1 = 706;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_secp128r1); }))) {
            mixin(enumMixinStr_NID_secp128r1);
        }
    }




    static if(!is(typeof(OBJ_secp128r1))) {
        private enum enumMixinStr_OBJ_secp128r1 = `enum OBJ_secp128r1 = 1L , 3L , 132L , 0L , 28L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_secp128r1); }))) {
            mixin(enumMixinStr_OBJ_secp128r1);
        }
    }




    static if(!is(typeof(SN_secp128r2))) {
        private enum enumMixinStr_SN_secp128r2 = `enum SN_secp128r2 = "secp128r2";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_secp128r2); }))) {
            mixin(enumMixinStr_SN_secp128r2);
        }
    }




    static if(!is(typeof(NID_secp128r2))) {
        private enum enumMixinStr_NID_secp128r2 = `enum NID_secp128r2 = 707;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_secp128r2); }))) {
            mixin(enumMixinStr_NID_secp128r2);
        }
    }




    static if(!is(typeof(OBJ_secp128r2))) {
        private enum enumMixinStr_OBJ_secp128r2 = `enum OBJ_secp128r2 = 1L , 3L , 132L , 0L , 29L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_secp128r2); }))) {
            mixin(enumMixinStr_OBJ_secp128r2);
        }
    }




    static if(!is(typeof(SN_secp160k1))) {
        private enum enumMixinStr_SN_secp160k1 = `enum SN_secp160k1 = "secp160k1";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_secp160k1); }))) {
            mixin(enumMixinStr_SN_secp160k1);
        }
    }




    static if(!is(typeof(NID_secp160k1))) {
        private enum enumMixinStr_NID_secp160k1 = `enum NID_secp160k1 = 708;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_secp160k1); }))) {
            mixin(enumMixinStr_NID_secp160k1);
        }
    }




    static if(!is(typeof(OBJ_secp160k1))) {
        private enum enumMixinStr_OBJ_secp160k1 = `enum OBJ_secp160k1 = 1L , 3L , 132L , 0L , 9L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_secp160k1); }))) {
            mixin(enumMixinStr_OBJ_secp160k1);
        }
    }




    static if(!is(typeof(SN_secp160r1))) {
        private enum enumMixinStr_SN_secp160r1 = `enum SN_secp160r1 = "secp160r1";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_secp160r1); }))) {
            mixin(enumMixinStr_SN_secp160r1);
        }
    }




    static if(!is(typeof(NID_secp160r1))) {
        private enum enumMixinStr_NID_secp160r1 = `enum NID_secp160r1 = 709;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_secp160r1); }))) {
            mixin(enumMixinStr_NID_secp160r1);
        }
    }




    static if(!is(typeof(OBJ_secp160r1))) {
        private enum enumMixinStr_OBJ_secp160r1 = `enum OBJ_secp160r1 = 1L , 3L , 132L , 0L , 8L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_secp160r1); }))) {
            mixin(enumMixinStr_OBJ_secp160r1);
        }
    }




    static if(!is(typeof(SN_secp160r2))) {
        private enum enumMixinStr_SN_secp160r2 = `enum SN_secp160r2 = "secp160r2";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_secp160r2); }))) {
            mixin(enumMixinStr_SN_secp160r2);
        }
    }




    static if(!is(typeof(NID_secp160r2))) {
        private enum enumMixinStr_NID_secp160r2 = `enum NID_secp160r2 = 710;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_secp160r2); }))) {
            mixin(enumMixinStr_NID_secp160r2);
        }
    }




    static if(!is(typeof(OBJ_secp160r2))) {
        private enum enumMixinStr_OBJ_secp160r2 = `enum OBJ_secp160r2 = 1L , 3L , 132L , 0L , 30L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_secp160r2); }))) {
            mixin(enumMixinStr_OBJ_secp160r2);
        }
    }




    static if(!is(typeof(SN_secp192k1))) {
        private enum enumMixinStr_SN_secp192k1 = `enum SN_secp192k1 = "secp192k1";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_secp192k1); }))) {
            mixin(enumMixinStr_SN_secp192k1);
        }
    }




    static if(!is(typeof(NID_secp192k1))) {
        private enum enumMixinStr_NID_secp192k1 = `enum NID_secp192k1 = 711;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_secp192k1); }))) {
            mixin(enumMixinStr_NID_secp192k1);
        }
    }




    static if(!is(typeof(OBJ_secp192k1))) {
        private enum enumMixinStr_OBJ_secp192k1 = `enum OBJ_secp192k1 = 1L , 3L , 132L , 0L , 31L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_secp192k1); }))) {
            mixin(enumMixinStr_OBJ_secp192k1);
        }
    }




    static if(!is(typeof(SN_secp224k1))) {
        private enum enumMixinStr_SN_secp224k1 = `enum SN_secp224k1 = "secp224k1";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_secp224k1); }))) {
            mixin(enumMixinStr_SN_secp224k1);
        }
    }




    static if(!is(typeof(NID_secp224k1))) {
        private enum enumMixinStr_NID_secp224k1 = `enum NID_secp224k1 = 712;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_secp224k1); }))) {
            mixin(enumMixinStr_NID_secp224k1);
        }
    }




    static if(!is(typeof(OBJ_secp224k1))) {
        private enum enumMixinStr_OBJ_secp224k1 = `enum OBJ_secp224k1 = 1L , 3L , 132L , 0L , 32L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_secp224k1); }))) {
            mixin(enumMixinStr_OBJ_secp224k1);
        }
    }




    static if(!is(typeof(SN_secp224r1))) {
        private enum enumMixinStr_SN_secp224r1 = `enum SN_secp224r1 = "secp224r1";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_secp224r1); }))) {
            mixin(enumMixinStr_SN_secp224r1);
        }
    }




    static if(!is(typeof(NID_secp224r1))) {
        private enum enumMixinStr_NID_secp224r1 = `enum NID_secp224r1 = 713;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_secp224r1); }))) {
            mixin(enumMixinStr_NID_secp224r1);
        }
    }




    static if(!is(typeof(OBJ_secp224r1))) {
        private enum enumMixinStr_OBJ_secp224r1 = `enum OBJ_secp224r1 = 1L , 3L , 132L , 0L , 33L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_secp224r1); }))) {
            mixin(enumMixinStr_OBJ_secp224r1);
        }
    }




    static if(!is(typeof(SN_secp256k1))) {
        private enum enumMixinStr_SN_secp256k1 = `enum SN_secp256k1 = "secp256k1";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_secp256k1); }))) {
            mixin(enumMixinStr_SN_secp256k1);
        }
    }




    static if(!is(typeof(NID_secp256k1))) {
        private enum enumMixinStr_NID_secp256k1 = `enum NID_secp256k1 = 714;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_secp256k1); }))) {
            mixin(enumMixinStr_NID_secp256k1);
        }
    }




    static if(!is(typeof(OBJ_secp256k1))) {
        private enum enumMixinStr_OBJ_secp256k1 = `enum OBJ_secp256k1 = 1L , 3L , 132L , 0L , 10L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_secp256k1); }))) {
            mixin(enumMixinStr_OBJ_secp256k1);
        }
    }




    static if(!is(typeof(SN_secp384r1))) {
        private enum enumMixinStr_SN_secp384r1 = `enum SN_secp384r1 = "secp384r1";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_secp384r1); }))) {
            mixin(enumMixinStr_SN_secp384r1);
        }
    }




    static if(!is(typeof(NID_secp384r1))) {
        private enum enumMixinStr_NID_secp384r1 = `enum NID_secp384r1 = 715;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_secp384r1); }))) {
            mixin(enumMixinStr_NID_secp384r1);
        }
    }




    static if(!is(typeof(OBJ_secp384r1))) {
        private enum enumMixinStr_OBJ_secp384r1 = `enum OBJ_secp384r1 = 1L , 3L , 132L , 0L , 34L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_secp384r1); }))) {
            mixin(enumMixinStr_OBJ_secp384r1);
        }
    }




    static if(!is(typeof(SN_secp521r1))) {
        private enum enumMixinStr_SN_secp521r1 = `enum SN_secp521r1 = "secp521r1";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_secp521r1); }))) {
            mixin(enumMixinStr_SN_secp521r1);
        }
    }




    static if(!is(typeof(NID_secp521r1))) {
        private enum enumMixinStr_NID_secp521r1 = `enum NID_secp521r1 = 716;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_secp521r1); }))) {
            mixin(enumMixinStr_NID_secp521r1);
        }
    }




    static if(!is(typeof(OBJ_secp521r1))) {
        private enum enumMixinStr_OBJ_secp521r1 = `enum OBJ_secp521r1 = 1L , 3L , 132L , 0L , 35L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_secp521r1); }))) {
            mixin(enumMixinStr_OBJ_secp521r1);
        }
    }




    static if(!is(typeof(SN_sect113r1))) {
        private enum enumMixinStr_SN_sect113r1 = `enum SN_sect113r1 = "sect113r1";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_sect113r1); }))) {
            mixin(enumMixinStr_SN_sect113r1);
        }
    }




    static if(!is(typeof(NID_sect113r1))) {
        private enum enumMixinStr_NID_sect113r1 = `enum NID_sect113r1 = 717;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_sect113r1); }))) {
            mixin(enumMixinStr_NID_sect113r1);
        }
    }




    static if(!is(typeof(OBJ_sect113r1))) {
        private enum enumMixinStr_OBJ_sect113r1 = `enum OBJ_sect113r1 = 1L , 3L , 132L , 0L , 4L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_sect113r1); }))) {
            mixin(enumMixinStr_OBJ_sect113r1);
        }
    }




    static if(!is(typeof(SN_sect113r2))) {
        private enum enumMixinStr_SN_sect113r2 = `enum SN_sect113r2 = "sect113r2";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_sect113r2); }))) {
            mixin(enumMixinStr_SN_sect113r2);
        }
    }




    static if(!is(typeof(NID_sect113r2))) {
        private enum enumMixinStr_NID_sect113r2 = `enum NID_sect113r2 = 718;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_sect113r2); }))) {
            mixin(enumMixinStr_NID_sect113r2);
        }
    }




    static if(!is(typeof(OBJ_sect113r2))) {
        private enum enumMixinStr_OBJ_sect113r2 = `enum OBJ_sect113r2 = 1L , 3L , 132L , 0L , 5L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_sect113r2); }))) {
            mixin(enumMixinStr_OBJ_sect113r2);
        }
    }




    static if(!is(typeof(SN_sect131r1))) {
        private enum enumMixinStr_SN_sect131r1 = `enum SN_sect131r1 = "sect131r1";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_sect131r1); }))) {
            mixin(enumMixinStr_SN_sect131r1);
        }
    }




    static if(!is(typeof(NID_sect131r1))) {
        private enum enumMixinStr_NID_sect131r1 = `enum NID_sect131r1 = 719;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_sect131r1); }))) {
            mixin(enumMixinStr_NID_sect131r1);
        }
    }




    static if(!is(typeof(OBJ_sect131r1))) {
        private enum enumMixinStr_OBJ_sect131r1 = `enum OBJ_sect131r1 = 1L , 3L , 132L , 0L , 22L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_sect131r1); }))) {
            mixin(enumMixinStr_OBJ_sect131r1);
        }
    }




    static if(!is(typeof(SN_sect131r2))) {
        private enum enumMixinStr_SN_sect131r2 = `enum SN_sect131r2 = "sect131r2";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_sect131r2); }))) {
            mixin(enumMixinStr_SN_sect131r2);
        }
    }




    static if(!is(typeof(NID_sect131r2))) {
        private enum enumMixinStr_NID_sect131r2 = `enum NID_sect131r2 = 720;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_sect131r2); }))) {
            mixin(enumMixinStr_NID_sect131r2);
        }
    }




    static if(!is(typeof(OBJ_sect131r2))) {
        private enum enumMixinStr_OBJ_sect131r2 = `enum OBJ_sect131r2 = 1L , 3L , 132L , 0L , 23L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_sect131r2); }))) {
            mixin(enumMixinStr_OBJ_sect131r2);
        }
    }




    static if(!is(typeof(SN_sect163k1))) {
        private enum enumMixinStr_SN_sect163k1 = `enum SN_sect163k1 = "sect163k1";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_sect163k1); }))) {
            mixin(enumMixinStr_SN_sect163k1);
        }
    }




    static if(!is(typeof(NID_sect163k1))) {
        private enum enumMixinStr_NID_sect163k1 = `enum NID_sect163k1 = 721;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_sect163k1); }))) {
            mixin(enumMixinStr_NID_sect163k1);
        }
    }




    static if(!is(typeof(OBJ_sect163k1))) {
        private enum enumMixinStr_OBJ_sect163k1 = `enum OBJ_sect163k1 = 1L , 3L , 132L , 0L , 1L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_sect163k1); }))) {
            mixin(enumMixinStr_OBJ_sect163k1);
        }
    }




    static if(!is(typeof(SN_sect163r1))) {
        private enum enumMixinStr_SN_sect163r1 = `enum SN_sect163r1 = "sect163r1";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_sect163r1); }))) {
            mixin(enumMixinStr_SN_sect163r1);
        }
    }




    static if(!is(typeof(NID_sect163r1))) {
        private enum enumMixinStr_NID_sect163r1 = `enum NID_sect163r1 = 722;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_sect163r1); }))) {
            mixin(enumMixinStr_NID_sect163r1);
        }
    }




    static if(!is(typeof(OBJ_sect163r1))) {
        private enum enumMixinStr_OBJ_sect163r1 = `enum OBJ_sect163r1 = 1L , 3L , 132L , 0L , 2L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_sect163r1); }))) {
            mixin(enumMixinStr_OBJ_sect163r1);
        }
    }




    static if(!is(typeof(SN_sect163r2))) {
        private enum enumMixinStr_SN_sect163r2 = `enum SN_sect163r2 = "sect163r2";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_sect163r2); }))) {
            mixin(enumMixinStr_SN_sect163r2);
        }
    }




    static if(!is(typeof(NID_sect163r2))) {
        private enum enumMixinStr_NID_sect163r2 = `enum NID_sect163r2 = 723;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_sect163r2); }))) {
            mixin(enumMixinStr_NID_sect163r2);
        }
    }




    static if(!is(typeof(OBJ_sect163r2))) {
        private enum enumMixinStr_OBJ_sect163r2 = `enum OBJ_sect163r2 = 1L , 3L , 132L , 0L , 15L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_sect163r2); }))) {
            mixin(enumMixinStr_OBJ_sect163r2);
        }
    }




    static if(!is(typeof(SN_sect193r1))) {
        private enum enumMixinStr_SN_sect193r1 = `enum SN_sect193r1 = "sect193r1";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_sect193r1); }))) {
            mixin(enumMixinStr_SN_sect193r1);
        }
    }




    static if(!is(typeof(NID_sect193r1))) {
        private enum enumMixinStr_NID_sect193r1 = `enum NID_sect193r1 = 724;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_sect193r1); }))) {
            mixin(enumMixinStr_NID_sect193r1);
        }
    }




    static if(!is(typeof(OBJ_sect193r1))) {
        private enum enumMixinStr_OBJ_sect193r1 = `enum OBJ_sect193r1 = 1L , 3L , 132L , 0L , 24L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_sect193r1); }))) {
            mixin(enumMixinStr_OBJ_sect193r1);
        }
    }




    static if(!is(typeof(SN_sect193r2))) {
        private enum enumMixinStr_SN_sect193r2 = `enum SN_sect193r2 = "sect193r2";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_sect193r2); }))) {
            mixin(enumMixinStr_SN_sect193r2);
        }
    }




    static if(!is(typeof(NID_sect193r2))) {
        private enum enumMixinStr_NID_sect193r2 = `enum NID_sect193r2 = 725;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_sect193r2); }))) {
            mixin(enumMixinStr_NID_sect193r2);
        }
    }




    static if(!is(typeof(OBJ_sect193r2))) {
        private enum enumMixinStr_OBJ_sect193r2 = `enum OBJ_sect193r2 = 1L , 3L , 132L , 0L , 25L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_sect193r2); }))) {
            mixin(enumMixinStr_OBJ_sect193r2);
        }
    }




    static if(!is(typeof(SN_sect233k1))) {
        private enum enumMixinStr_SN_sect233k1 = `enum SN_sect233k1 = "sect233k1";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_sect233k1); }))) {
            mixin(enumMixinStr_SN_sect233k1);
        }
    }




    static if(!is(typeof(NID_sect233k1))) {
        private enum enumMixinStr_NID_sect233k1 = `enum NID_sect233k1 = 726;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_sect233k1); }))) {
            mixin(enumMixinStr_NID_sect233k1);
        }
    }




    static if(!is(typeof(OBJ_sect233k1))) {
        private enum enumMixinStr_OBJ_sect233k1 = `enum OBJ_sect233k1 = 1L , 3L , 132L , 0L , 26L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_sect233k1); }))) {
            mixin(enumMixinStr_OBJ_sect233k1);
        }
    }




    static if(!is(typeof(SN_sect233r1))) {
        private enum enumMixinStr_SN_sect233r1 = `enum SN_sect233r1 = "sect233r1";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_sect233r1); }))) {
            mixin(enumMixinStr_SN_sect233r1);
        }
    }




    static if(!is(typeof(NID_sect233r1))) {
        private enum enumMixinStr_NID_sect233r1 = `enum NID_sect233r1 = 727;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_sect233r1); }))) {
            mixin(enumMixinStr_NID_sect233r1);
        }
    }




    static if(!is(typeof(OBJ_sect233r1))) {
        private enum enumMixinStr_OBJ_sect233r1 = `enum OBJ_sect233r1 = 1L , 3L , 132L , 0L , 27L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_sect233r1); }))) {
            mixin(enumMixinStr_OBJ_sect233r1);
        }
    }




    static if(!is(typeof(SN_sect239k1))) {
        private enum enumMixinStr_SN_sect239k1 = `enum SN_sect239k1 = "sect239k1";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_sect239k1); }))) {
            mixin(enumMixinStr_SN_sect239k1);
        }
    }




    static if(!is(typeof(NID_sect239k1))) {
        private enum enumMixinStr_NID_sect239k1 = `enum NID_sect239k1 = 728;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_sect239k1); }))) {
            mixin(enumMixinStr_NID_sect239k1);
        }
    }




    static if(!is(typeof(OBJ_sect239k1))) {
        private enum enumMixinStr_OBJ_sect239k1 = `enum OBJ_sect239k1 = 1L , 3L , 132L , 0L , 3L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_sect239k1); }))) {
            mixin(enumMixinStr_OBJ_sect239k1);
        }
    }




    static if(!is(typeof(SN_sect283k1))) {
        private enum enumMixinStr_SN_sect283k1 = `enum SN_sect283k1 = "sect283k1";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_sect283k1); }))) {
            mixin(enumMixinStr_SN_sect283k1);
        }
    }




    static if(!is(typeof(NID_sect283k1))) {
        private enum enumMixinStr_NID_sect283k1 = `enum NID_sect283k1 = 729;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_sect283k1); }))) {
            mixin(enumMixinStr_NID_sect283k1);
        }
    }




    static if(!is(typeof(OBJ_sect283k1))) {
        private enum enumMixinStr_OBJ_sect283k1 = `enum OBJ_sect283k1 = 1L , 3L , 132L , 0L , 16L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_sect283k1); }))) {
            mixin(enumMixinStr_OBJ_sect283k1);
        }
    }




    static if(!is(typeof(SN_sect283r1))) {
        private enum enumMixinStr_SN_sect283r1 = `enum SN_sect283r1 = "sect283r1";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_sect283r1); }))) {
            mixin(enumMixinStr_SN_sect283r1);
        }
    }




    static if(!is(typeof(NID_sect283r1))) {
        private enum enumMixinStr_NID_sect283r1 = `enum NID_sect283r1 = 730;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_sect283r1); }))) {
            mixin(enumMixinStr_NID_sect283r1);
        }
    }




    static if(!is(typeof(OBJ_sect283r1))) {
        private enum enumMixinStr_OBJ_sect283r1 = `enum OBJ_sect283r1 = 1L , 3L , 132L , 0L , 17L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_sect283r1); }))) {
            mixin(enumMixinStr_OBJ_sect283r1);
        }
    }




    static if(!is(typeof(SN_sect409k1))) {
        private enum enumMixinStr_SN_sect409k1 = `enum SN_sect409k1 = "sect409k1";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_sect409k1); }))) {
            mixin(enumMixinStr_SN_sect409k1);
        }
    }




    static if(!is(typeof(NID_sect409k1))) {
        private enum enumMixinStr_NID_sect409k1 = `enum NID_sect409k1 = 731;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_sect409k1); }))) {
            mixin(enumMixinStr_NID_sect409k1);
        }
    }




    static if(!is(typeof(OBJ_sect409k1))) {
        private enum enumMixinStr_OBJ_sect409k1 = `enum OBJ_sect409k1 = 1L , 3L , 132L , 0L , 36L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_sect409k1); }))) {
            mixin(enumMixinStr_OBJ_sect409k1);
        }
    }




    static if(!is(typeof(SN_sect409r1))) {
        private enum enumMixinStr_SN_sect409r1 = `enum SN_sect409r1 = "sect409r1";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_sect409r1); }))) {
            mixin(enumMixinStr_SN_sect409r1);
        }
    }




    static if(!is(typeof(NID_sect409r1))) {
        private enum enumMixinStr_NID_sect409r1 = `enum NID_sect409r1 = 732;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_sect409r1); }))) {
            mixin(enumMixinStr_NID_sect409r1);
        }
    }




    static if(!is(typeof(OBJ_sect409r1))) {
        private enum enumMixinStr_OBJ_sect409r1 = `enum OBJ_sect409r1 = 1L , 3L , 132L , 0L , 37L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_sect409r1); }))) {
            mixin(enumMixinStr_OBJ_sect409r1);
        }
    }




    static if(!is(typeof(SN_sect571k1))) {
        private enum enumMixinStr_SN_sect571k1 = `enum SN_sect571k1 = "sect571k1";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_sect571k1); }))) {
            mixin(enumMixinStr_SN_sect571k1);
        }
    }




    static if(!is(typeof(NID_sect571k1))) {
        private enum enumMixinStr_NID_sect571k1 = `enum NID_sect571k1 = 733;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_sect571k1); }))) {
            mixin(enumMixinStr_NID_sect571k1);
        }
    }




    static if(!is(typeof(OBJ_sect571k1))) {
        private enum enumMixinStr_OBJ_sect571k1 = `enum OBJ_sect571k1 = 1L , 3L , 132L , 0L , 38L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_sect571k1); }))) {
            mixin(enumMixinStr_OBJ_sect571k1);
        }
    }




    static if(!is(typeof(SN_sect571r1))) {
        private enum enumMixinStr_SN_sect571r1 = `enum SN_sect571r1 = "sect571r1";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_sect571r1); }))) {
            mixin(enumMixinStr_SN_sect571r1);
        }
    }




    static if(!is(typeof(NID_sect571r1))) {
        private enum enumMixinStr_NID_sect571r1 = `enum NID_sect571r1 = 734;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_sect571r1); }))) {
            mixin(enumMixinStr_NID_sect571r1);
        }
    }




    static if(!is(typeof(OBJ_sect571r1))) {
        private enum enumMixinStr_OBJ_sect571r1 = `enum OBJ_sect571r1 = 1L , 3L , 132L , 0L , 39L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_sect571r1); }))) {
            mixin(enumMixinStr_OBJ_sect571r1);
        }
    }




    static if(!is(typeof(OBJ_wap_wsg_idm_ecid))) {
        private enum enumMixinStr_OBJ_wap_wsg_idm_ecid = `enum OBJ_wap_wsg_idm_ecid = 2L , 23L , 43L , 1L , 4L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_wap_wsg_idm_ecid); }))) {
            mixin(enumMixinStr_OBJ_wap_wsg_idm_ecid);
        }
    }




    static if(!is(typeof(SN_wap_wsg_idm_ecid_wtls1))) {
        private enum enumMixinStr_SN_wap_wsg_idm_ecid_wtls1 = `enum SN_wap_wsg_idm_ecid_wtls1 = "wap-wsg-idm-ecid-wtls1";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_wap_wsg_idm_ecid_wtls1); }))) {
            mixin(enumMixinStr_SN_wap_wsg_idm_ecid_wtls1);
        }
    }




    static if(!is(typeof(NID_wap_wsg_idm_ecid_wtls1))) {
        private enum enumMixinStr_NID_wap_wsg_idm_ecid_wtls1 = `enum NID_wap_wsg_idm_ecid_wtls1 = 735;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_wap_wsg_idm_ecid_wtls1); }))) {
            mixin(enumMixinStr_NID_wap_wsg_idm_ecid_wtls1);
        }
    }




    static if(!is(typeof(OBJ_wap_wsg_idm_ecid_wtls1))) {
        private enum enumMixinStr_OBJ_wap_wsg_idm_ecid_wtls1 = `enum OBJ_wap_wsg_idm_ecid_wtls1 = 2L , 23L , 43L , 1L , 4L , 1L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_wap_wsg_idm_ecid_wtls1); }))) {
            mixin(enumMixinStr_OBJ_wap_wsg_idm_ecid_wtls1);
        }
    }




    static if(!is(typeof(SN_wap_wsg_idm_ecid_wtls3))) {
        private enum enumMixinStr_SN_wap_wsg_idm_ecid_wtls3 = `enum SN_wap_wsg_idm_ecid_wtls3 = "wap-wsg-idm-ecid-wtls3";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_wap_wsg_idm_ecid_wtls3); }))) {
            mixin(enumMixinStr_SN_wap_wsg_idm_ecid_wtls3);
        }
    }




    static if(!is(typeof(NID_wap_wsg_idm_ecid_wtls3))) {
        private enum enumMixinStr_NID_wap_wsg_idm_ecid_wtls3 = `enum NID_wap_wsg_idm_ecid_wtls3 = 736;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_wap_wsg_idm_ecid_wtls3); }))) {
            mixin(enumMixinStr_NID_wap_wsg_idm_ecid_wtls3);
        }
    }




    static if(!is(typeof(OBJ_wap_wsg_idm_ecid_wtls3))) {
        private enum enumMixinStr_OBJ_wap_wsg_idm_ecid_wtls3 = `enum OBJ_wap_wsg_idm_ecid_wtls3 = 2L , 23L , 43L , 1L , 4L , 3L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_wap_wsg_idm_ecid_wtls3); }))) {
            mixin(enumMixinStr_OBJ_wap_wsg_idm_ecid_wtls3);
        }
    }




    static if(!is(typeof(SN_wap_wsg_idm_ecid_wtls4))) {
        private enum enumMixinStr_SN_wap_wsg_idm_ecid_wtls4 = `enum SN_wap_wsg_idm_ecid_wtls4 = "wap-wsg-idm-ecid-wtls4";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_wap_wsg_idm_ecid_wtls4); }))) {
            mixin(enumMixinStr_SN_wap_wsg_idm_ecid_wtls4);
        }
    }




    static if(!is(typeof(NID_wap_wsg_idm_ecid_wtls4))) {
        private enum enumMixinStr_NID_wap_wsg_idm_ecid_wtls4 = `enum NID_wap_wsg_idm_ecid_wtls4 = 737;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_wap_wsg_idm_ecid_wtls4); }))) {
            mixin(enumMixinStr_NID_wap_wsg_idm_ecid_wtls4);
        }
    }




    static if(!is(typeof(OBJ_wap_wsg_idm_ecid_wtls4))) {
        private enum enumMixinStr_OBJ_wap_wsg_idm_ecid_wtls4 = `enum OBJ_wap_wsg_idm_ecid_wtls4 = 2L , 23L , 43L , 1L , 4L , 4L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_wap_wsg_idm_ecid_wtls4); }))) {
            mixin(enumMixinStr_OBJ_wap_wsg_idm_ecid_wtls4);
        }
    }




    static if(!is(typeof(SN_wap_wsg_idm_ecid_wtls5))) {
        private enum enumMixinStr_SN_wap_wsg_idm_ecid_wtls5 = `enum SN_wap_wsg_idm_ecid_wtls5 = "wap-wsg-idm-ecid-wtls5";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_wap_wsg_idm_ecid_wtls5); }))) {
            mixin(enumMixinStr_SN_wap_wsg_idm_ecid_wtls5);
        }
    }




    static if(!is(typeof(NID_wap_wsg_idm_ecid_wtls5))) {
        private enum enumMixinStr_NID_wap_wsg_idm_ecid_wtls5 = `enum NID_wap_wsg_idm_ecid_wtls5 = 738;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_wap_wsg_idm_ecid_wtls5); }))) {
            mixin(enumMixinStr_NID_wap_wsg_idm_ecid_wtls5);
        }
    }




    static if(!is(typeof(OBJ_wap_wsg_idm_ecid_wtls5))) {
        private enum enumMixinStr_OBJ_wap_wsg_idm_ecid_wtls5 = `enum OBJ_wap_wsg_idm_ecid_wtls5 = 2L , 23L , 43L , 1L , 4L , 5L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_wap_wsg_idm_ecid_wtls5); }))) {
            mixin(enumMixinStr_OBJ_wap_wsg_idm_ecid_wtls5);
        }
    }




    static if(!is(typeof(SN_wap_wsg_idm_ecid_wtls6))) {
        private enum enumMixinStr_SN_wap_wsg_idm_ecid_wtls6 = `enum SN_wap_wsg_idm_ecid_wtls6 = "wap-wsg-idm-ecid-wtls6";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_wap_wsg_idm_ecid_wtls6); }))) {
            mixin(enumMixinStr_SN_wap_wsg_idm_ecid_wtls6);
        }
    }




    static if(!is(typeof(NID_wap_wsg_idm_ecid_wtls6))) {
        private enum enumMixinStr_NID_wap_wsg_idm_ecid_wtls6 = `enum NID_wap_wsg_idm_ecid_wtls6 = 739;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_wap_wsg_idm_ecid_wtls6); }))) {
            mixin(enumMixinStr_NID_wap_wsg_idm_ecid_wtls6);
        }
    }




    static if(!is(typeof(OBJ_wap_wsg_idm_ecid_wtls6))) {
        private enum enumMixinStr_OBJ_wap_wsg_idm_ecid_wtls6 = `enum OBJ_wap_wsg_idm_ecid_wtls6 = 2L , 23L , 43L , 1L , 4L , 6L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_wap_wsg_idm_ecid_wtls6); }))) {
            mixin(enumMixinStr_OBJ_wap_wsg_idm_ecid_wtls6);
        }
    }




    static if(!is(typeof(SN_wap_wsg_idm_ecid_wtls7))) {
        private enum enumMixinStr_SN_wap_wsg_idm_ecid_wtls7 = `enum SN_wap_wsg_idm_ecid_wtls7 = "wap-wsg-idm-ecid-wtls7";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_wap_wsg_idm_ecid_wtls7); }))) {
            mixin(enumMixinStr_SN_wap_wsg_idm_ecid_wtls7);
        }
    }




    static if(!is(typeof(NID_wap_wsg_idm_ecid_wtls7))) {
        private enum enumMixinStr_NID_wap_wsg_idm_ecid_wtls7 = `enum NID_wap_wsg_idm_ecid_wtls7 = 740;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_wap_wsg_idm_ecid_wtls7); }))) {
            mixin(enumMixinStr_NID_wap_wsg_idm_ecid_wtls7);
        }
    }




    static if(!is(typeof(OBJ_wap_wsg_idm_ecid_wtls7))) {
        private enum enumMixinStr_OBJ_wap_wsg_idm_ecid_wtls7 = `enum OBJ_wap_wsg_idm_ecid_wtls7 = 2L , 23L , 43L , 1L , 4L , 7L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_wap_wsg_idm_ecid_wtls7); }))) {
            mixin(enumMixinStr_OBJ_wap_wsg_idm_ecid_wtls7);
        }
    }




    static if(!is(typeof(SN_wap_wsg_idm_ecid_wtls8))) {
        private enum enumMixinStr_SN_wap_wsg_idm_ecid_wtls8 = `enum SN_wap_wsg_idm_ecid_wtls8 = "wap-wsg-idm-ecid-wtls8";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_wap_wsg_idm_ecid_wtls8); }))) {
            mixin(enumMixinStr_SN_wap_wsg_idm_ecid_wtls8);
        }
    }




    static if(!is(typeof(NID_wap_wsg_idm_ecid_wtls8))) {
        private enum enumMixinStr_NID_wap_wsg_idm_ecid_wtls8 = `enum NID_wap_wsg_idm_ecid_wtls8 = 741;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_wap_wsg_idm_ecid_wtls8); }))) {
            mixin(enumMixinStr_NID_wap_wsg_idm_ecid_wtls8);
        }
    }




    static if(!is(typeof(OBJ_wap_wsg_idm_ecid_wtls8))) {
        private enum enumMixinStr_OBJ_wap_wsg_idm_ecid_wtls8 = `enum OBJ_wap_wsg_idm_ecid_wtls8 = 2L , 23L , 43L , 1L , 4L , 8L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_wap_wsg_idm_ecid_wtls8); }))) {
            mixin(enumMixinStr_OBJ_wap_wsg_idm_ecid_wtls8);
        }
    }




    static if(!is(typeof(SN_wap_wsg_idm_ecid_wtls9))) {
        private enum enumMixinStr_SN_wap_wsg_idm_ecid_wtls9 = `enum SN_wap_wsg_idm_ecid_wtls9 = "wap-wsg-idm-ecid-wtls9";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_wap_wsg_idm_ecid_wtls9); }))) {
            mixin(enumMixinStr_SN_wap_wsg_idm_ecid_wtls9);
        }
    }




    static if(!is(typeof(NID_wap_wsg_idm_ecid_wtls9))) {
        private enum enumMixinStr_NID_wap_wsg_idm_ecid_wtls9 = `enum NID_wap_wsg_idm_ecid_wtls9 = 742;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_wap_wsg_idm_ecid_wtls9); }))) {
            mixin(enumMixinStr_NID_wap_wsg_idm_ecid_wtls9);
        }
    }




    static if(!is(typeof(OBJ_wap_wsg_idm_ecid_wtls9))) {
        private enum enumMixinStr_OBJ_wap_wsg_idm_ecid_wtls9 = `enum OBJ_wap_wsg_idm_ecid_wtls9 = 2L , 23L , 43L , 1L , 4L , 9L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_wap_wsg_idm_ecid_wtls9); }))) {
            mixin(enumMixinStr_OBJ_wap_wsg_idm_ecid_wtls9);
        }
    }




    static if(!is(typeof(SN_wap_wsg_idm_ecid_wtls10))) {
        private enum enumMixinStr_SN_wap_wsg_idm_ecid_wtls10 = `enum SN_wap_wsg_idm_ecid_wtls10 = "wap-wsg-idm-ecid-wtls10";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_wap_wsg_idm_ecid_wtls10); }))) {
            mixin(enumMixinStr_SN_wap_wsg_idm_ecid_wtls10);
        }
    }




    static if(!is(typeof(NID_wap_wsg_idm_ecid_wtls10))) {
        private enum enumMixinStr_NID_wap_wsg_idm_ecid_wtls10 = `enum NID_wap_wsg_idm_ecid_wtls10 = 743;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_wap_wsg_idm_ecid_wtls10); }))) {
            mixin(enumMixinStr_NID_wap_wsg_idm_ecid_wtls10);
        }
    }




    static if(!is(typeof(OBJ_wap_wsg_idm_ecid_wtls10))) {
        private enum enumMixinStr_OBJ_wap_wsg_idm_ecid_wtls10 = `enum OBJ_wap_wsg_idm_ecid_wtls10 = 2L , 23L , 43L , 1L , 4L , 10L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_wap_wsg_idm_ecid_wtls10); }))) {
            mixin(enumMixinStr_OBJ_wap_wsg_idm_ecid_wtls10);
        }
    }




    static if(!is(typeof(SN_wap_wsg_idm_ecid_wtls11))) {
        private enum enumMixinStr_SN_wap_wsg_idm_ecid_wtls11 = `enum SN_wap_wsg_idm_ecid_wtls11 = "wap-wsg-idm-ecid-wtls11";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_wap_wsg_idm_ecid_wtls11); }))) {
            mixin(enumMixinStr_SN_wap_wsg_idm_ecid_wtls11);
        }
    }




    static if(!is(typeof(NID_wap_wsg_idm_ecid_wtls11))) {
        private enum enumMixinStr_NID_wap_wsg_idm_ecid_wtls11 = `enum NID_wap_wsg_idm_ecid_wtls11 = 744;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_wap_wsg_idm_ecid_wtls11); }))) {
            mixin(enumMixinStr_NID_wap_wsg_idm_ecid_wtls11);
        }
    }




    static if(!is(typeof(OBJ_wap_wsg_idm_ecid_wtls11))) {
        private enum enumMixinStr_OBJ_wap_wsg_idm_ecid_wtls11 = `enum OBJ_wap_wsg_idm_ecid_wtls11 = 2L , 23L , 43L , 1L , 4L , 11L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_wap_wsg_idm_ecid_wtls11); }))) {
            mixin(enumMixinStr_OBJ_wap_wsg_idm_ecid_wtls11);
        }
    }




    static if(!is(typeof(SN_wap_wsg_idm_ecid_wtls12))) {
        private enum enumMixinStr_SN_wap_wsg_idm_ecid_wtls12 = `enum SN_wap_wsg_idm_ecid_wtls12 = "wap-wsg-idm-ecid-wtls12";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_wap_wsg_idm_ecid_wtls12); }))) {
            mixin(enumMixinStr_SN_wap_wsg_idm_ecid_wtls12);
        }
    }




    static if(!is(typeof(NID_wap_wsg_idm_ecid_wtls12))) {
        private enum enumMixinStr_NID_wap_wsg_idm_ecid_wtls12 = `enum NID_wap_wsg_idm_ecid_wtls12 = 745;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_wap_wsg_idm_ecid_wtls12); }))) {
            mixin(enumMixinStr_NID_wap_wsg_idm_ecid_wtls12);
        }
    }




    static if(!is(typeof(OBJ_wap_wsg_idm_ecid_wtls12))) {
        private enum enumMixinStr_OBJ_wap_wsg_idm_ecid_wtls12 = `enum OBJ_wap_wsg_idm_ecid_wtls12 = 2L , 23L , 43L , 1L , 4L , 12L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_wap_wsg_idm_ecid_wtls12); }))) {
            mixin(enumMixinStr_OBJ_wap_wsg_idm_ecid_wtls12);
        }
    }




    static if(!is(typeof(SN_cast5_cbc))) {
        private enum enumMixinStr_SN_cast5_cbc = `enum SN_cast5_cbc = "CAST5-CBC";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_cast5_cbc); }))) {
            mixin(enumMixinStr_SN_cast5_cbc);
        }
    }




    static if(!is(typeof(LN_cast5_cbc))) {
        private enum enumMixinStr_LN_cast5_cbc = `enum LN_cast5_cbc = "cast5-cbc";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_cast5_cbc); }))) {
            mixin(enumMixinStr_LN_cast5_cbc);
        }
    }




    static if(!is(typeof(NID_cast5_cbc))) {
        private enum enumMixinStr_NID_cast5_cbc = `enum NID_cast5_cbc = 108;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_cast5_cbc); }))) {
            mixin(enumMixinStr_NID_cast5_cbc);
        }
    }




    static if(!is(typeof(OBJ_cast5_cbc))) {
        private enum enumMixinStr_OBJ_cast5_cbc = `enum OBJ_cast5_cbc = 1L , 2L , 840L , 113533L , 7L , 66L , 10L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_cast5_cbc); }))) {
            mixin(enumMixinStr_OBJ_cast5_cbc);
        }
    }




    static if(!is(typeof(SN_cast5_ecb))) {
        private enum enumMixinStr_SN_cast5_ecb = `enum SN_cast5_ecb = "CAST5-ECB";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_cast5_ecb); }))) {
            mixin(enumMixinStr_SN_cast5_ecb);
        }
    }




    static if(!is(typeof(LN_cast5_ecb))) {
        private enum enumMixinStr_LN_cast5_ecb = `enum LN_cast5_ecb = "cast5-ecb";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_cast5_ecb); }))) {
            mixin(enumMixinStr_LN_cast5_ecb);
        }
    }




    static if(!is(typeof(NID_cast5_ecb))) {
        private enum enumMixinStr_NID_cast5_ecb = `enum NID_cast5_ecb = 109;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_cast5_ecb); }))) {
            mixin(enumMixinStr_NID_cast5_ecb);
        }
    }




    static if(!is(typeof(SN_cast5_cfb64))) {
        private enum enumMixinStr_SN_cast5_cfb64 = `enum SN_cast5_cfb64 = "CAST5-CFB";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_cast5_cfb64); }))) {
            mixin(enumMixinStr_SN_cast5_cfb64);
        }
    }




    static if(!is(typeof(LN_cast5_cfb64))) {
        private enum enumMixinStr_LN_cast5_cfb64 = `enum LN_cast5_cfb64 = "cast5-cfb";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_cast5_cfb64); }))) {
            mixin(enumMixinStr_LN_cast5_cfb64);
        }
    }




    static if(!is(typeof(NID_cast5_cfb64))) {
        private enum enumMixinStr_NID_cast5_cfb64 = `enum NID_cast5_cfb64 = 110;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_cast5_cfb64); }))) {
            mixin(enumMixinStr_NID_cast5_cfb64);
        }
    }




    static if(!is(typeof(SN_cast5_ofb64))) {
        private enum enumMixinStr_SN_cast5_ofb64 = `enum SN_cast5_ofb64 = "CAST5-OFB";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_cast5_ofb64); }))) {
            mixin(enumMixinStr_SN_cast5_ofb64);
        }
    }




    static if(!is(typeof(LN_cast5_ofb64))) {
        private enum enumMixinStr_LN_cast5_ofb64 = `enum LN_cast5_ofb64 = "cast5-ofb";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_cast5_ofb64); }))) {
            mixin(enumMixinStr_LN_cast5_ofb64);
        }
    }




    static if(!is(typeof(NID_cast5_ofb64))) {
        private enum enumMixinStr_NID_cast5_ofb64 = `enum NID_cast5_ofb64 = 111;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_cast5_ofb64); }))) {
            mixin(enumMixinStr_NID_cast5_ofb64);
        }
    }




    static if(!is(typeof(LN_pbeWithMD5AndCast5_CBC))) {
        private enum enumMixinStr_LN_pbeWithMD5AndCast5_CBC = `enum LN_pbeWithMD5AndCast5_CBC = "pbeWithMD5AndCast5CBC";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_pbeWithMD5AndCast5_CBC); }))) {
            mixin(enumMixinStr_LN_pbeWithMD5AndCast5_CBC);
        }
    }




    static if(!is(typeof(NID_pbeWithMD5AndCast5_CBC))) {
        private enum enumMixinStr_NID_pbeWithMD5AndCast5_CBC = `enum NID_pbeWithMD5AndCast5_CBC = 112;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_pbeWithMD5AndCast5_CBC); }))) {
            mixin(enumMixinStr_NID_pbeWithMD5AndCast5_CBC);
        }
    }




    static if(!is(typeof(OBJ_pbeWithMD5AndCast5_CBC))) {
        private enum enumMixinStr_OBJ_pbeWithMD5AndCast5_CBC = `enum OBJ_pbeWithMD5AndCast5_CBC = 1L , 2L , 840L , 113533L , 7L , 66L , 12L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_pbeWithMD5AndCast5_CBC); }))) {
            mixin(enumMixinStr_OBJ_pbeWithMD5AndCast5_CBC);
        }
    }




    static if(!is(typeof(SN_id_PasswordBasedMAC))) {
        private enum enumMixinStr_SN_id_PasswordBasedMAC = `enum SN_id_PasswordBasedMAC = "id-PasswordBasedMAC";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_PasswordBasedMAC); }))) {
            mixin(enumMixinStr_SN_id_PasswordBasedMAC);
        }
    }




    static if(!is(typeof(LN_id_PasswordBasedMAC))) {
        private enum enumMixinStr_LN_id_PasswordBasedMAC = `enum LN_id_PasswordBasedMAC = "password based MAC";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_id_PasswordBasedMAC); }))) {
            mixin(enumMixinStr_LN_id_PasswordBasedMAC);
        }
    }




    static if(!is(typeof(NID_id_PasswordBasedMAC))) {
        private enum enumMixinStr_NID_id_PasswordBasedMAC = `enum NID_id_PasswordBasedMAC = 782;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_PasswordBasedMAC); }))) {
            mixin(enumMixinStr_NID_id_PasswordBasedMAC);
        }
    }




    static if(!is(typeof(OBJ_id_PasswordBasedMAC))) {
        private enum enumMixinStr_OBJ_id_PasswordBasedMAC = `enum OBJ_id_PasswordBasedMAC = 1L , 2L , 840L , 113533L , 7L , 66L , 13L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_PasswordBasedMAC); }))) {
            mixin(enumMixinStr_OBJ_id_PasswordBasedMAC);
        }
    }




    static if(!is(typeof(SN_id_DHBasedMac))) {
        private enum enumMixinStr_SN_id_DHBasedMac = `enum SN_id_DHBasedMac = "id-DHBasedMac";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_DHBasedMac); }))) {
            mixin(enumMixinStr_SN_id_DHBasedMac);
        }
    }




    static if(!is(typeof(LN_id_DHBasedMac))) {
        private enum enumMixinStr_LN_id_DHBasedMac = `enum LN_id_DHBasedMac = "Diffie-Hellman based MAC";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_id_DHBasedMac); }))) {
            mixin(enumMixinStr_LN_id_DHBasedMac);
        }
    }




    static if(!is(typeof(NID_id_DHBasedMac))) {
        private enum enumMixinStr_NID_id_DHBasedMac = `enum NID_id_DHBasedMac = 783;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_DHBasedMac); }))) {
            mixin(enumMixinStr_NID_id_DHBasedMac);
        }
    }




    static if(!is(typeof(OBJ_id_DHBasedMac))) {
        private enum enumMixinStr_OBJ_id_DHBasedMac = `enum OBJ_id_DHBasedMac = 1L , 2L , 840L , 113533L , 7L , 66L , 30L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_DHBasedMac); }))) {
            mixin(enumMixinStr_OBJ_id_DHBasedMac);
        }
    }




    static if(!is(typeof(SN_rsadsi))) {
        private enum enumMixinStr_SN_rsadsi = `enum SN_rsadsi = "rsadsi";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_rsadsi); }))) {
            mixin(enumMixinStr_SN_rsadsi);
        }
    }




    static if(!is(typeof(LN_rsadsi))) {
        private enum enumMixinStr_LN_rsadsi = `enum LN_rsadsi = "RSA Data Security, Inc.";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_rsadsi); }))) {
            mixin(enumMixinStr_LN_rsadsi);
        }
    }




    static if(!is(typeof(NID_rsadsi))) {
        private enum enumMixinStr_NID_rsadsi = `enum NID_rsadsi = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_rsadsi); }))) {
            mixin(enumMixinStr_NID_rsadsi);
        }
    }




    static if(!is(typeof(OBJ_rsadsi))) {
        private enum enumMixinStr_OBJ_rsadsi = `enum OBJ_rsadsi = 1L , 2L , 840L , 113549L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_rsadsi); }))) {
            mixin(enumMixinStr_OBJ_rsadsi);
        }
    }




    static if(!is(typeof(SN_pkcs))) {
        private enum enumMixinStr_SN_pkcs = `enum SN_pkcs = "pkcs";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_pkcs); }))) {
            mixin(enumMixinStr_SN_pkcs);
        }
    }




    static if(!is(typeof(LN_pkcs))) {
        private enum enumMixinStr_LN_pkcs = `enum LN_pkcs = "RSA Data Security, Inc. PKCS";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_pkcs); }))) {
            mixin(enumMixinStr_LN_pkcs);
        }
    }




    static if(!is(typeof(NID_pkcs))) {
        private enum enumMixinStr_NID_pkcs = `enum NID_pkcs = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_pkcs); }))) {
            mixin(enumMixinStr_NID_pkcs);
        }
    }




    static if(!is(typeof(OBJ_pkcs))) {
        private enum enumMixinStr_OBJ_pkcs = `enum OBJ_pkcs = 1L , 2L , 840L , 113549L , 1L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_pkcs); }))) {
            mixin(enumMixinStr_OBJ_pkcs);
        }
    }




    static if(!is(typeof(SN_pkcs1))) {
        private enum enumMixinStr_SN_pkcs1 = `enum SN_pkcs1 = "pkcs1";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_pkcs1); }))) {
            mixin(enumMixinStr_SN_pkcs1);
        }
    }




    static if(!is(typeof(NID_pkcs1))) {
        private enum enumMixinStr_NID_pkcs1 = `enum NID_pkcs1 = 186;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_pkcs1); }))) {
            mixin(enumMixinStr_NID_pkcs1);
        }
    }




    static if(!is(typeof(OBJ_pkcs1))) {
        private enum enumMixinStr_OBJ_pkcs1 = `enum OBJ_pkcs1 = 1L , 2L , 840L , 113549L , 1L , 1L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_pkcs1); }))) {
            mixin(enumMixinStr_OBJ_pkcs1);
        }
    }




    static if(!is(typeof(LN_rsaEncryption))) {
        private enum enumMixinStr_LN_rsaEncryption = `enum LN_rsaEncryption = "rsaEncryption";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_rsaEncryption); }))) {
            mixin(enumMixinStr_LN_rsaEncryption);
        }
    }




    static if(!is(typeof(NID_rsaEncryption))) {
        private enum enumMixinStr_NID_rsaEncryption = `enum NID_rsaEncryption = 6;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_rsaEncryption); }))) {
            mixin(enumMixinStr_NID_rsaEncryption);
        }
    }




    static if(!is(typeof(OBJ_rsaEncryption))) {
        private enum enumMixinStr_OBJ_rsaEncryption = `enum OBJ_rsaEncryption = 1L , 2L , 840L , 113549L , 1L , 1L , 1L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_rsaEncryption); }))) {
            mixin(enumMixinStr_OBJ_rsaEncryption);
        }
    }




    static if(!is(typeof(SN_md2WithRSAEncryption))) {
        private enum enumMixinStr_SN_md2WithRSAEncryption = `enum SN_md2WithRSAEncryption = "RSA-MD2";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_md2WithRSAEncryption); }))) {
            mixin(enumMixinStr_SN_md2WithRSAEncryption);
        }
    }




    static if(!is(typeof(LN_md2WithRSAEncryption))) {
        private enum enumMixinStr_LN_md2WithRSAEncryption = `enum LN_md2WithRSAEncryption = "md2WithRSAEncryption";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_md2WithRSAEncryption); }))) {
            mixin(enumMixinStr_LN_md2WithRSAEncryption);
        }
    }




    static if(!is(typeof(NID_md2WithRSAEncryption))) {
        private enum enumMixinStr_NID_md2WithRSAEncryption = `enum NID_md2WithRSAEncryption = 7;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_md2WithRSAEncryption); }))) {
            mixin(enumMixinStr_NID_md2WithRSAEncryption);
        }
    }




    static if(!is(typeof(OBJ_md2WithRSAEncryption))) {
        private enum enumMixinStr_OBJ_md2WithRSAEncryption = `enum OBJ_md2WithRSAEncryption = 1L , 2L , 840L , 113549L , 1L , 1L , 2L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_md2WithRSAEncryption); }))) {
            mixin(enumMixinStr_OBJ_md2WithRSAEncryption);
        }
    }




    static if(!is(typeof(SN_md4WithRSAEncryption))) {
        private enum enumMixinStr_SN_md4WithRSAEncryption = `enum SN_md4WithRSAEncryption = "RSA-MD4";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_md4WithRSAEncryption); }))) {
            mixin(enumMixinStr_SN_md4WithRSAEncryption);
        }
    }




    static if(!is(typeof(LN_md4WithRSAEncryption))) {
        private enum enumMixinStr_LN_md4WithRSAEncryption = `enum LN_md4WithRSAEncryption = "md4WithRSAEncryption";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_md4WithRSAEncryption); }))) {
            mixin(enumMixinStr_LN_md4WithRSAEncryption);
        }
    }




    static if(!is(typeof(NID_md4WithRSAEncryption))) {
        private enum enumMixinStr_NID_md4WithRSAEncryption = `enum NID_md4WithRSAEncryption = 396;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_md4WithRSAEncryption); }))) {
            mixin(enumMixinStr_NID_md4WithRSAEncryption);
        }
    }




    static if(!is(typeof(OBJ_md4WithRSAEncryption))) {
        private enum enumMixinStr_OBJ_md4WithRSAEncryption = `enum OBJ_md4WithRSAEncryption = 1L , 2L , 840L , 113549L , 1L , 1L , 3L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_md4WithRSAEncryption); }))) {
            mixin(enumMixinStr_OBJ_md4WithRSAEncryption);
        }
    }




    static if(!is(typeof(SN_md5WithRSAEncryption))) {
        private enum enumMixinStr_SN_md5WithRSAEncryption = `enum SN_md5WithRSAEncryption = "RSA-MD5";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_md5WithRSAEncryption); }))) {
            mixin(enumMixinStr_SN_md5WithRSAEncryption);
        }
    }




    static if(!is(typeof(LN_md5WithRSAEncryption))) {
        private enum enumMixinStr_LN_md5WithRSAEncryption = `enum LN_md5WithRSAEncryption = "md5WithRSAEncryption";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_md5WithRSAEncryption); }))) {
            mixin(enumMixinStr_LN_md5WithRSAEncryption);
        }
    }




    static if(!is(typeof(NID_md5WithRSAEncryption))) {
        private enum enumMixinStr_NID_md5WithRSAEncryption = `enum NID_md5WithRSAEncryption = 8;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_md5WithRSAEncryption); }))) {
            mixin(enumMixinStr_NID_md5WithRSAEncryption);
        }
    }




    static if(!is(typeof(OBJ_md5WithRSAEncryption))) {
        private enum enumMixinStr_OBJ_md5WithRSAEncryption = `enum OBJ_md5WithRSAEncryption = 1L , 2L , 840L , 113549L , 1L , 1L , 4L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_md5WithRSAEncryption); }))) {
            mixin(enumMixinStr_OBJ_md5WithRSAEncryption);
        }
    }




    static if(!is(typeof(SN_sha1WithRSAEncryption))) {
        private enum enumMixinStr_SN_sha1WithRSAEncryption = `enum SN_sha1WithRSAEncryption = "RSA-SHA1";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_sha1WithRSAEncryption); }))) {
            mixin(enumMixinStr_SN_sha1WithRSAEncryption);
        }
    }




    static if(!is(typeof(LN_sha1WithRSAEncryption))) {
        private enum enumMixinStr_LN_sha1WithRSAEncryption = `enum LN_sha1WithRSAEncryption = "sha1WithRSAEncryption";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_sha1WithRSAEncryption); }))) {
            mixin(enumMixinStr_LN_sha1WithRSAEncryption);
        }
    }




    static if(!is(typeof(NID_sha1WithRSAEncryption))) {
        private enum enumMixinStr_NID_sha1WithRSAEncryption = `enum NID_sha1WithRSAEncryption = 65;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_sha1WithRSAEncryption); }))) {
            mixin(enumMixinStr_NID_sha1WithRSAEncryption);
        }
    }




    static if(!is(typeof(OBJ_sha1WithRSAEncryption))) {
        private enum enumMixinStr_OBJ_sha1WithRSAEncryption = `enum OBJ_sha1WithRSAEncryption = 1L , 2L , 840L , 113549L , 1L , 1L , 5L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_sha1WithRSAEncryption); }))) {
            mixin(enumMixinStr_OBJ_sha1WithRSAEncryption);
        }
    }




    static if(!is(typeof(SN_rsaesOaep))) {
        private enum enumMixinStr_SN_rsaesOaep = `enum SN_rsaesOaep = "RSAES-OAEP";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_rsaesOaep); }))) {
            mixin(enumMixinStr_SN_rsaesOaep);
        }
    }




    static if(!is(typeof(LN_rsaesOaep))) {
        private enum enumMixinStr_LN_rsaesOaep = `enum LN_rsaesOaep = "rsaesOaep";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_rsaesOaep); }))) {
            mixin(enumMixinStr_LN_rsaesOaep);
        }
    }




    static if(!is(typeof(NID_rsaesOaep))) {
        private enum enumMixinStr_NID_rsaesOaep = `enum NID_rsaesOaep = 919;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_rsaesOaep); }))) {
            mixin(enumMixinStr_NID_rsaesOaep);
        }
    }




    static if(!is(typeof(OBJ_rsaesOaep))) {
        private enum enumMixinStr_OBJ_rsaesOaep = `enum OBJ_rsaesOaep = 1L , 2L , 840L , 113549L , 1L , 1L , 7L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_rsaesOaep); }))) {
            mixin(enumMixinStr_OBJ_rsaesOaep);
        }
    }




    static if(!is(typeof(SN_mgf1))) {
        private enum enumMixinStr_SN_mgf1 = `enum SN_mgf1 = "MGF1";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_mgf1); }))) {
            mixin(enumMixinStr_SN_mgf1);
        }
    }




    static if(!is(typeof(LN_mgf1))) {
        private enum enumMixinStr_LN_mgf1 = `enum LN_mgf1 = "mgf1";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_mgf1); }))) {
            mixin(enumMixinStr_LN_mgf1);
        }
    }




    static if(!is(typeof(NID_mgf1))) {
        private enum enumMixinStr_NID_mgf1 = `enum NID_mgf1 = 911;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_mgf1); }))) {
            mixin(enumMixinStr_NID_mgf1);
        }
    }




    static if(!is(typeof(OBJ_mgf1))) {
        private enum enumMixinStr_OBJ_mgf1 = `enum OBJ_mgf1 = 1L , 2L , 840L , 113549L , 1L , 1L , 8L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_mgf1); }))) {
            mixin(enumMixinStr_OBJ_mgf1);
        }
    }




    static if(!is(typeof(SN_pSpecified))) {
        private enum enumMixinStr_SN_pSpecified = `enum SN_pSpecified = "PSPECIFIED";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_pSpecified); }))) {
            mixin(enumMixinStr_SN_pSpecified);
        }
    }




    static if(!is(typeof(LN_pSpecified))) {
        private enum enumMixinStr_LN_pSpecified = `enum LN_pSpecified = "pSpecified";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_pSpecified); }))) {
            mixin(enumMixinStr_LN_pSpecified);
        }
    }




    static if(!is(typeof(NID_pSpecified))) {
        private enum enumMixinStr_NID_pSpecified = `enum NID_pSpecified = 935;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_pSpecified); }))) {
            mixin(enumMixinStr_NID_pSpecified);
        }
    }




    static if(!is(typeof(OBJ_pSpecified))) {
        private enum enumMixinStr_OBJ_pSpecified = `enum OBJ_pSpecified = 1L , 2L , 840L , 113549L , 1L , 1L , 9L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_pSpecified); }))) {
            mixin(enumMixinStr_OBJ_pSpecified);
        }
    }




    static if(!is(typeof(SN_rsassaPss))) {
        private enum enumMixinStr_SN_rsassaPss = `enum SN_rsassaPss = "RSASSA-PSS";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_rsassaPss); }))) {
            mixin(enumMixinStr_SN_rsassaPss);
        }
    }




    static if(!is(typeof(LN_rsassaPss))) {
        private enum enumMixinStr_LN_rsassaPss = `enum LN_rsassaPss = "rsassaPss";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_rsassaPss); }))) {
            mixin(enumMixinStr_LN_rsassaPss);
        }
    }




    static if(!is(typeof(NID_rsassaPss))) {
        private enum enumMixinStr_NID_rsassaPss = `enum NID_rsassaPss = 912;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_rsassaPss); }))) {
            mixin(enumMixinStr_NID_rsassaPss);
        }
    }




    static if(!is(typeof(OBJ_rsassaPss))) {
        private enum enumMixinStr_OBJ_rsassaPss = `enum OBJ_rsassaPss = 1L , 2L , 840L , 113549L , 1L , 1L , 10L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_rsassaPss); }))) {
            mixin(enumMixinStr_OBJ_rsassaPss);
        }
    }




    static if(!is(typeof(SN_sha256WithRSAEncryption))) {
        private enum enumMixinStr_SN_sha256WithRSAEncryption = `enum SN_sha256WithRSAEncryption = "RSA-SHA256";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_sha256WithRSAEncryption); }))) {
            mixin(enumMixinStr_SN_sha256WithRSAEncryption);
        }
    }




    static if(!is(typeof(LN_sha256WithRSAEncryption))) {
        private enum enumMixinStr_LN_sha256WithRSAEncryption = `enum LN_sha256WithRSAEncryption = "sha256WithRSAEncryption";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_sha256WithRSAEncryption); }))) {
            mixin(enumMixinStr_LN_sha256WithRSAEncryption);
        }
    }




    static if(!is(typeof(NID_sha256WithRSAEncryption))) {
        private enum enumMixinStr_NID_sha256WithRSAEncryption = `enum NID_sha256WithRSAEncryption = 668;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_sha256WithRSAEncryption); }))) {
            mixin(enumMixinStr_NID_sha256WithRSAEncryption);
        }
    }




    static if(!is(typeof(OBJ_sha256WithRSAEncryption))) {
        private enum enumMixinStr_OBJ_sha256WithRSAEncryption = `enum OBJ_sha256WithRSAEncryption = 1L , 2L , 840L , 113549L , 1L , 1L , 11L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_sha256WithRSAEncryption); }))) {
            mixin(enumMixinStr_OBJ_sha256WithRSAEncryption);
        }
    }




    static if(!is(typeof(SN_sha384WithRSAEncryption))) {
        private enum enumMixinStr_SN_sha384WithRSAEncryption = `enum SN_sha384WithRSAEncryption = "RSA-SHA384";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_sha384WithRSAEncryption); }))) {
            mixin(enumMixinStr_SN_sha384WithRSAEncryption);
        }
    }




    static if(!is(typeof(LN_sha384WithRSAEncryption))) {
        private enum enumMixinStr_LN_sha384WithRSAEncryption = `enum LN_sha384WithRSAEncryption = "sha384WithRSAEncryption";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_sha384WithRSAEncryption); }))) {
            mixin(enumMixinStr_LN_sha384WithRSAEncryption);
        }
    }




    static if(!is(typeof(NID_sha384WithRSAEncryption))) {
        private enum enumMixinStr_NID_sha384WithRSAEncryption = `enum NID_sha384WithRSAEncryption = 669;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_sha384WithRSAEncryption); }))) {
            mixin(enumMixinStr_NID_sha384WithRSAEncryption);
        }
    }




    static if(!is(typeof(OBJ_sha384WithRSAEncryption))) {
        private enum enumMixinStr_OBJ_sha384WithRSAEncryption = `enum OBJ_sha384WithRSAEncryption = 1L , 2L , 840L , 113549L , 1L , 1L , 12L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_sha384WithRSAEncryption); }))) {
            mixin(enumMixinStr_OBJ_sha384WithRSAEncryption);
        }
    }




    static if(!is(typeof(SN_sha512WithRSAEncryption))) {
        private enum enumMixinStr_SN_sha512WithRSAEncryption = `enum SN_sha512WithRSAEncryption = "RSA-SHA512";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_sha512WithRSAEncryption); }))) {
            mixin(enumMixinStr_SN_sha512WithRSAEncryption);
        }
    }




    static if(!is(typeof(LN_sha512WithRSAEncryption))) {
        private enum enumMixinStr_LN_sha512WithRSAEncryption = `enum LN_sha512WithRSAEncryption = "sha512WithRSAEncryption";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_sha512WithRSAEncryption); }))) {
            mixin(enumMixinStr_LN_sha512WithRSAEncryption);
        }
    }




    static if(!is(typeof(NID_sha512WithRSAEncryption))) {
        private enum enumMixinStr_NID_sha512WithRSAEncryption = `enum NID_sha512WithRSAEncryption = 670;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_sha512WithRSAEncryption); }))) {
            mixin(enumMixinStr_NID_sha512WithRSAEncryption);
        }
    }




    static if(!is(typeof(OBJ_sha512WithRSAEncryption))) {
        private enum enumMixinStr_OBJ_sha512WithRSAEncryption = `enum OBJ_sha512WithRSAEncryption = 1L , 2L , 840L , 113549L , 1L , 1L , 13L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_sha512WithRSAEncryption); }))) {
            mixin(enumMixinStr_OBJ_sha512WithRSAEncryption);
        }
    }




    static if(!is(typeof(SN_sha224WithRSAEncryption))) {
        private enum enumMixinStr_SN_sha224WithRSAEncryption = `enum SN_sha224WithRSAEncryption = "RSA-SHA224";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_sha224WithRSAEncryption); }))) {
            mixin(enumMixinStr_SN_sha224WithRSAEncryption);
        }
    }




    static if(!is(typeof(LN_sha224WithRSAEncryption))) {
        private enum enumMixinStr_LN_sha224WithRSAEncryption = `enum LN_sha224WithRSAEncryption = "sha224WithRSAEncryption";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_sha224WithRSAEncryption); }))) {
            mixin(enumMixinStr_LN_sha224WithRSAEncryption);
        }
    }




    static if(!is(typeof(NID_sha224WithRSAEncryption))) {
        private enum enumMixinStr_NID_sha224WithRSAEncryption = `enum NID_sha224WithRSAEncryption = 671;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_sha224WithRSAEncryption); }))) {
            mixin(enumMixinStr_NID_sha224WithRSAEncryption);
        }
    }




    static if(!is(typeof(OBJ_sha224WithRSAEncryption))) {
        private enum enumMixinStr_OBJ_sha224WithRSAEncryption = `enum OBJ_sha224WithRSAEncryption = 1L , 2L , 840L , 113549L , 1L , 1L , 14L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_sha224WithRSAEncryption); }))) {
            mixin(enumMixinStr_OBJ_sha224WithRSAEncryption);
        }
    }




    static if(!is(typeof(SN_sha512_224WithRSAEncryption))) {
        private enum enumMixinStr_SN_sha512_224WithRSAEncryption = `enum SN_sha512_224WithRSAEncryption = "RSA-SHA512/224";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_sha512_224WithRSAEncryption); }))) {
            mixin(enumMixinStr_SN_sha512_224WithRSAEncryption);
        }
    }




    static if(!is(typeof(LN_sha512_224WithRSAEncryption))) {
        private enum enumMixinStr_LN_sha512_224WithRSAEncryption = `enum LN_sha512_224WithRSAEncryption = "sha512-224WithRSAEncryption";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_sha512_224WithRSAEncryption); }))) {
            mixin(enumMixinStr_LN_sha512_224WithRSAEncryption);
        }
    }




    static if(!is(typeof(NID_sha512_224WithRSAEncryption))) {
        private enum enumMixinStr_NID_sha512_224WithRSAEncryption = `enum NID_sha512_224WithRSAEncryption = 1145;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_sha512_224WithRSAEncryption); }))) {
            mixin(enumMixinStr_NID_sha512_224WithRSAEncryption);
        }
    }




    static if(!is(typeof(OBJ_sha512_224WithRSAEncryption))) {
        private enum enumMixinStr_OBJ_sha512_224WithRSAEncryption = `enum OBJ_sha512_224WithRSAEncryption = 1L , 2L , 840L , 113549L , 1L , 1L , 15L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_sha512_224WithRSAEncryption); }))) {
            mixin(enumMixinStr_OBJ_sha512_224WithRSAEncryption);
        }
    }




    static if(!is(typeof(SN_sha512_256WithRSAEncryption))) {
        private enum enumMixinStr_SN_sha512_256WithRSAEncryption = `enum SN_sha512_256WithRSAEncryption = "RSA-SHA512/256";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_sha512_256WithRSAEncryption); }))) {
            mixin(enumMixinStr_SN_sha512_256WithRSAEncryption);
        }
    }




    static if(!is(typeof(LN_sha512_256WithRSAEncryption))) {
        private enum enumMixinStr_LN_sha512_256WithRSAEncryption = `enum LN_sha512_256WithRSAEncryption = "sha512-256WithRSAEncryption";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_sha512_256WithRSAEncryption); }))) {
            mixin(enumMixinStr_LN_sha512_256WithRSAEncryption);
        }
    }




    static if(!is(typeof(NID_sha512_256WithRSAEncryption))) {
        private enum enumMixinStr_NID_sha512_256WithRSAEncryption = `enum NID_sha512_256WithRSAEncryption = 1146;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_sha512_256WithRSAEncryption); }))) {
            mixin(enumMixinStr_NID_sha512_256WithRSAEncryption);
        }
    }




    static if(!is(typeof(OBJ_sha512_256WithRSAEncryption))) {
        private enum enumMixinStr_OBJ_sha512_256WithRSAEncryption = `enum OBJ_sha512_256WithRSAEncryption = 1L , 2L , 840L , 113549L , 1L , 1L , 16L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_sha512_256WithRSAEncryption); }))) {
            mixin(enumMixinStr_OBJ_sha512_256WithRSAEncryption);
        }
    }




    static if(!is(typeof(SN_pkcs3))) {
        private enum enumMixinStr_SN_pkcs3 = `enum SN_pkcs3 = "pkcs3";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_pkcs3); }))) {
            mixin(enumMixinStr_SN_pkcs3);
        }
    }




    static if(!is(typeof(NID_pkcs3))) {
        private enum enumMixinStr_NID_pkcs3 = `enum NID_pkcs3 = 27;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_pkcs3); }))) {
            mixin(enumMixinStr_NID_pkcs3);
        }
    }




    static if(!is(typeof(OBJ_pkcs3))) {
        private enum enumMixinStr_OBJ_pkcs3 = `enum OBJ_pkcs3 = 1L , 2L , 840L , 113549L , 1L , 3L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_pkcs3); }))) {
            mixin(enumMixinStr_OBJ_pkcs3);
        }
    }




    static if(!is(typeof(LN_dhKeyAgreement))) {
        private enum enumMixinStr_LN_dhKeyAgreement = `enum LN_dhKeyAgreement = "dhKeyAgreement";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_dhKeyAgreement); }))) {
            mixin(enumMixinStr_LN_dhKeyAgreement);
        }
    }




    static if(!is(typeof(NID_dhKeyAgreement))) {
        private enum enumMixinStr_NID_dhKeyAgreement = `enum NID_dhKeyAgreement = 28;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_dhKeyAgreement); }))) {
            mixin(enumMixinStr_NID_dhKeyAgreement);
        }
    }




    static if(!is(typeof(OBJ_dhKeyAgreement))) {
        private enum enumMixinStr_OBJ_dhKeyAgreement = `enum OBJ_dhKeyAgreement = 1L , 2L , 840L , 113549L , 1L , 3L , 1L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_dhKeyAgreement); }))) {
            mixin(enumMixinStr_OBJ_dhKeyAgreement);
        }
    }




    static if(!is(typeof(SN_pkcs5))) {
        private enum enumMixinStr_SN_pkcs5 = `enum SN_pkcs5 = "pkcs5";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_pkcs5); }))) {
            mixin(enumMixinStr_SN_pkcs5);
        }
    }




    static if(!is(typeof(NID_pkcs5))) {
        private enum enumMixinStr_NID_pkcs5 = `enum NID_pkcs5 = 187;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_pkcs5); }))) {
            mixin(enumMixinStr_NID_pkcs5);
        }
    }




    static if(!is(typeof(OBJ_pkcs5))) {
        private enum enumMixinStr_OBJ_pkcs5 = `enum OBJ_pkcs5 = 1L , 2L , 840L , 113549L , 1L , 5L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_pkcs5); }))) {
            mixin(enumMixinStr_OBJ_pkcs5);
        }
    }




    static if(!is(typeof(SN_pbeWithMD2AndDES_CBC))) {
        private enum enumMixinStr_SN_pbeWithMD2AndDES_CBC = `enum SN_pbeWithMD2AndDES_CBC = "PBE-MD2-DES";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_pbeWithMD2AndDES_CBC); }))) {
            mixin(enumMixinStr_SN_pbeWithMD2AndDES_CBC);
        }
    }




    static if(!is(typeof(LN_pbeWithMD2AndDES_CBC))) {
        private enum enumMixinStr_LN_pbeWithMD2AndDES_CBC = `enum LN_pbeWithMD2AndDES_CBC = "pbeWithMD2AndDES-CBC";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_pbeWithMD2AndDES_CBC); }))) {
            mixin(enumMixinStr_LN_pbeWithMD2AndDES_CBC);
        }
    }




    static if(!is(typeof(NID_pbeWithMD2AndDES_CBC))) {
        private enum enumMixinStr_NID_pbeWithMD2AndDES_CBC = `enum NID_pbeWithMD2AndDES_CBC = 9;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_pbeWithMD2AndDES_CBC); }))) {
            mixin(enumMixinStr_NID_pbeWithMD2AndDES_CBC);
        }
    }




    static if(!is(typeof(OBJ_pbeWithMD2AndDES_CBC))) {
        private enum enumMixinStr_OBJ_pbeWithMD2AndDES_CBC = `enum OBJ_pbeWithMD2AndDES_CBC = 1L , 2L , 840L , 113549L , 1L , 5L , 1L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_pbeWithMD2AndDES_CBC); }))) {
            mixin(enumMixinStr_OBJ_pbeWithMD2AndDES_CBC);
        }
    }




    static if(!is(typeof(SN_pbeWithMD5AndDES_CBC))) {
        private enum enumMixinStr_SN_pbeWithMD5AndDES_CBC = `enum SN_pbeWithMD5AndDES_CBC = "PBE-MD5-DES";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_pbeWithMD5AndDES_CBC); }))) {
            mixin(enumMixinStr_SN_pbeWithMD5AndDES_CBC);
        }
    }




    static if(!is(typeof(LN_pbeWithMD5AndDES_CBC))) {
        private enum enumMixinStr_LN_pbeWithMD5AndDES_CBC = `enum LN_pbeWithMD5AndDES_CBC = "pbeWithMD5AndDES-CBC";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_pbeWithMD5AndDES_CBC); }))) {
            mixin(enumMixinStr_LN_pbeWithMD5AndDES_CBC);
        }
    }




    static if(!is(typeof(NID_pbeWithMD5AndDES_CBC))) {
        private enum enumMixinStr_NID_pbeWithMD5AndDES_CBC = `enum NID_pbeWithMD5AndDES_CBC = 10;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_pbeWithMD5AndDES_CBC); }))) {
            mixin(enumMixinStr_NID_pbeWithMD5AndDES_CBC);
        }
    }




    static if(!is(typeof(OBJ_pbeWithMD5AndDES_CBC))) {
        private enum enumMixinStr_OBJ_pbeWithMD5AndDES_CBC = `enum OBJ_pbeWithMD5AndDES_CBC = 1L , 2L , 840L , 113549L , 1L , 5L , 3L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_pbeWithMD5AndDES_CBC); }))) {
            mixin(enumMixinStr_OBJ_pbeWithMD5AndDES_CBC);
        }
    }




    static if(!is(typeof(SN_pbeWithMD2AndRC2_CBC))) {
        private enum enumMixinStr_SN_pbeWithMD2AndRC2_CBC = `enum SN_pbeWithMD2AndRC2_CBC = "PBE-MD2-RC2-64";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_pbeWithMD2AndRC2_CBC); }))) {
            mixin(enumMixinStr_SN_pbeWithMD2AndRC2_CBC);
        }
    }




    static if(!is(typeof(LN_pbeWithMD2AndRC2_CBC))) {
        private enum enumMixinStr_LN_pbeWithMD2AndRC2_CBC = `enum LN_pbeWithMD2AndRC2_CBC = "pbeWithMD2AndRC2-CBC";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_pbeWithMD2AndRC2_CBC); }))) {
            mixin(enumMixinStr_LN_pbeWithMD2AndRC2_CBC);
        }
    }




    static if(!is(typeof(NID_pbeWithMD2AndRC2_CBC))) {
        private enum enumMixinStr_NID_pbeWithMD2AndRC2_CBC = `enum NID_pbeWithMD2AndRC2_CBC = 168;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_pbeWithMD2AndRC2_CBC); }))) {
            mixin(enumMixinStr_NID_pbeWithMD2AndRC2_CBC);
        }
    }




    static if(!is(typeof(OBJ_pbeWithMD2AndRC2_CBC))) {
        private enum enumMixinStr_OBJ_pbeWithMD2AndRC2_CBC = `enum OBJ_pbeWithMD2AndRC2_CBC = 1L , 2L , 840L , 113549L , 1L , 5L , 4L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_pbeWithMD2AndRC2_CBC); }))) {
            mixin(enumMixinStr_OBJ_pbeWithMD2AndRC2_CBC);
        }
    }




    static if(!is(typeof(SN_pbeWithMD5AndRC2_CBC))) {
        private enum enumMixinStr_SN_pbeWithMD5AndRC2_CBC = `enum SN_pbeWithMD5AndRC2_CBC = "PBE-MD5-RC2-64";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_pbeWithMD5AndRC2_CBC); }))) {
            mixin(enumMixinStr_SN_pbeWithMD5AndRC2_CBC);
        }
    }




    static if(!is(typeof(LN_pbeWithMD5AndRC2_CBC))) {
        private enum enumMixinStr_LN_pbeWithMD5AndRC2_CBC = `enum LN_pbeWithMD5AndRC2_CBC = "pbeWithMD5AndRC2-CBC";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_pbeWithMD5AndRC2_CBC); }))) {
            mixin(enumMixinStr_LN_pbeWithMD5AndRC2_CBC);
        }
    }




    static if(!is(typeof(NID_pbeWithMD5AndRC2_CBC))) {
        private enum enumMixinStr_NID_pbeWithMD5AndRC2_CBC = `enum NID_pbeWithMD5AndRC2_CBC = 169;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_pbeWithMD5AndRC2_CBC); }))) {
            mixin(enumMixinStr_NID_pbeWithMD5AndRC2_CBC);
        }
    }




    static if(!is(typeof(OBJ_pbeWithMD5AndRC2_CBC))) {
        private enum enumMixinStr_OBJ_pbeWithMD5AndRC2_CBC = `enum OBJ_pbeWithMD5AndRC2_CBC = 1L , 2L , 840L , 113549L , 1L , 5L , 6L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_pbeWithMD5AndRC2_CBC); }))) {
            mixin(enumMixinStr_OBJ_pbeWithMD5AndRC2_CBC);
        }
    }




    static if(!is(typeof(SN_pbeWithSHA1AndDES_CBC))) {
        private enum enumMixinStr_SN_pbeWithSHA1AndDES_CBC = `enum SN_pbeWithSHA1AndDES_CBC = "PBE-SHA1-DES";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_pbeWithSHA1AndDES_CBC); }))) {
            mixin(enumMixinStr_SN_pbeWithSHA1AndDES_CBC);
        }
    }




    static if(!is(typeof(LN_pbeWithSHA1AndDES_CBC))) {
        private enum enumMixinStr_LN_pbeWithSHA1AndDES_CBC = `enum LN_pbeWithSHA1AndDES_CBC = "pbeWithSHA1AndDES-CBC";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_pbeWithSHA1AndDES_CBC); }))) {
            mixin(enumMixinStr_LN_pbeWithSHA1AndDES_CBC);
        }
    }




    static if(!is(typeof(NID_pbeWithSHA1AndDES_CBC))) {
        private enum enumMixinStr_NID_pbeWithSHA1AndDES_CBC = `enum NID_pbeWithSHA1AndDES_CBC = 170;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_pbeWithSHA1AndDES_CBC); }))) {
            mixin(enumMixinStr_NID_pbeWithSHA1AndDES_CBC);
        }
    }




    static if(!is(typeof(OBJ_pbeWithSHA1AndDES_CBC))) {
        private enum enumMixinStr_OBJ_pbeWithSHA1AndDES_CBC = `enum OBJ_pbeWithSHA1AndDES_CBC = 1L , 2L , 840L , 113549L , 1L , 5L , 10L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_pbeWithSHA1AndDES_CBC); }))) {
            mixin(enumMixinStr_OBJ_pbeWithSHA1AndDES_CBC);
        }
    }




    static if(!is(typeof(SN_pbeWithSHA1AndRC2_CBC))) {
        private enum enumMixinStr_SN_pbeWithSHA1AndRC2_CBC = `enum SN_pbeWithSHA1AndRC2_CBC = "PBE-SHA1-RC2-64";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_pbeWithSHA1AndRC2_CBC); }))) {
            mixin(enumMixinStr_SN_pbeWithSHA1AndRC2_CBC);
        }
    }




    static if(!is(typeof(LN_pbeWithSHA1AndRC2_CBC))) {
        private enum enumMixinStr_LN_pbeWithSHA1AndRC2_CBC = `enum LN_pbeWithSHA1AndRC2_CBC = "pbeWithSHA1AndRC2-CBC";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_pbeWithSHA1AndRC2_CBC); }))) {
            mixin(enumMixinStr_LN_pbeWithSHA1AndRC2_CBC);
        }
    }




    static if(!is(typeof(NID_pbeWithSHA1AndRC2_CBC))) {
        private enum enumMixinStr_NID_pbeWithSHA1AndRC2_CBC = `enum NID_pbeWithSHA1AndRC2_CBC = 68;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_pbeWithSHA1AndRC2_CBC); }))) {
            mixin(enumMixinStr_NID_pbeWithSHA1AndRC2_CBC);
        }
    }




    static if(!is(typeof(OBJ_pbeWithSHA1AndRC2_CBC))) {
        private enum enumMixinStr_OBJ_pbeWithSHA1AndRC2_CBC = `enum OBJ_pbeWithSHA1AndRC2_CBC = 1L , 2L , 840L , 113549L , 1L , 5L , 11L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_pbeWithSHA1AndRC2_CBC); }))) {
            mixin(enumMixinStr_OBJ_pbeWithSHA1AndRC2_CBC);
        }
    }




    static if(!is(typeof(LN_id_pbkdf2))) {
        private enum enumMixinStr_LN_id_pbkdf2 = `enum LN_id_pbkdf2 = "PBKDF2";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_id_pbkdf2); }))) {
            mixin(enumMixinStr_LN_id_pbkdf2);
        }
    }




    static if(!is(typeof(NID_id_pbkdf2))) {
        private enum enumMixinStr_NID_id_pbkdf2 = `enum NID_id_pbkdf2 = 69;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_pbkdf2); }))) {
            mixin(enumMixinStr_NID_id_pbkdf2);
        }
    }




    static if(!is(typeof(OBJ_id_pbkdf2))) {
        private enum enumMixinStr_OBJ_id_pbkdf2 = `enum OBJ_id_pbkdf2 = 1L , 2L , 840L , 113549L , 1L , 5L , 12L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_pbkdf2); }))) {
            mixin(enumMixinStr_OBJ_id_pbkdf2);
        }
    }




    static if(!is(typeof(LN_pbes2))) {
        private enum enumMixinStr_LN_pbes2 = `enum LN_pbes2 = "PBES2";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_pbes2); }))) {
            mixin(enumMixinStr_LN_pbes2);
        }
    }




    static if(!is(typeof(NID_pbes2))) {
        private enum enumMixinStr_NID_pbes2 = `enum NID_pbes2 = 161;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_pbes2); }))) {
            mixin(enumMixinStr_NID_pbes2);
        }
    }




    static if(!is(typeof(OBJ_pbes2))) {
        private enum enumMixinStr_OBJ_pbes2 = `enum OBJ_pbes2 = 1L , 2L , 840L , 113549L , 1L , 5L , 13L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_pbes2); }))) {
            mixin(enumMixinStr_OBJ_pbes2);
        }
    }




    static if(!is(typeof(LN_pbmac1))) {
        private enum enumMixinStr_LN_pbmac1 = `enum LN_pbmac1 = "PBMAC1";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_pbmac1); }))) {
            mixin(enumMixinStr_LN_pbmac1);
        }
    }




    static if(!is(typeof(NID_pbmac1))) {
        private enum enumMixinStr_NID_pbmac1 = `enum NID_pbmac1 = 162;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_pbmac1); }))) {
            mixin(enumMixinStr_NID_pbmac1);
        }
    }




    static if(!is(typeof(OBJ_pbmac1))) {
        private enum enumMixinStr_OBJ_pbmac1 = `enum OBJ_pbmac1 = 1L , 2L , 840L , 113549L , 1L , 5L , 14L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_pbmac1); }))) {
            mixin(enumMixinStr_OBJ_pbmac1);
        }
    }




    static if(!is(typeof(SN_pkcs7))) {
        private enum enumMixinStr_SN_pkcs7 = `enum SN_pkcs7 = "pkcs7";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_pkcs7); }))) {
            mixin(enumMixinStr_SN_pkcs7);
        }
    }




    static if(!is(typeof(NID_pkcs7))) {
        private enum enumMixinStr_NID_pkcs7 = `enum NID_pkcs7 = 20;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_pkcs7); }))) {
            mixin(enumMixinStr_NID_pkcs7);
        }
    }




    static if(!is(typeof(OBJ_pkcs7))) {
        private enum enumMixinStr_OBJ_pkcs7 = `enum OBJ_pkcs7 = 1L , 2L , 840L , 113549L , 1L , 7L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_pkcs7); }))) {
            mixin(enumMixinStr_OBJ_pkcs7);
        }
    }




    static if(!is(typeof(LN_pkcs7_data))) {
        private enum enumMixinStr_LN_pkcs7_data = `enum LN_pkcs7_data = "pkcs7-data";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_pkcs7_data); }))) {
            mixin(enumMixinStr_LN_pkcs7_data);
        }
    }




    static if(!is(typeof(NID_pkcs7_data))) {
        private enum enumMixinStr_NID_pkcs7_data = `enum NID_pkcs7_data = 21;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_pkcs7_data); }))) {
            mixin(enumMixinStr_NID_pkcs7_data);
        }
    }




    static if(!is(typeof(OBJ_pkcs7_data))) {
        private enum enumMixinStr_OBJ_pkcs7_data = `enum OBJ_pkcs7_data = 1L , 2L , 840L , 113549L , 1L , 7L , 1L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_pkcs7_data); }))) {
            mixin(enumMixinStr_OBJ_pkcs7_data);
        }
    }




    static if(!is(typeof(LN_pkcs7_signed))) {
        private enum enumMixinStr_LN_pkcs7_signed = `enum LN_pkcs7_signed = "pkcs7-signedData";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_pkcs7_signed); }))) {
            mixin(enumMixinStr_LN_pkcs7_signed);
        }
    }




    static if(!is(typeof(NID_pkcs7_signed))) {
        private enum enumMixinStr_NID_pkcs7_signed = `enum NID_pkcs7_signed = 22;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_pkcs7_signed); }))) {
            mixin(enumMixinStr_NID_pkcs7_signed);
        }
    }




    static if(!is(typeof(OBJ_pkcs7_signed))) {
        private enum enumMixinStr_OBJ_pkcs7_signed = `enum OBJ_pkcs7_signed = 1L , 2L , 840L , 113549L , 1L , 7L , 2L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_pkcs7_signed); }))) {
            mixin(enumMixinStr_OBJ_pkcs7_signed);
        }
    }




    static if(!is(typeof(LN_pkcs7_enveloped))) {
        private enum enumMixinStr_LN_pkcs7_enveloped = `enum LN_pkcs7_enveloped = "pkcs7-envelopedData";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_pkcs7_enveloped); }))) {
            mixin(enumMixinStr_LN_pkcs7_enveloped);
        }
    }




    static if(!is(typeof(NID_pkcs7_enveloped))) {
        private enum enumMixinStr_NID_pkcs7_enveloped = `enum NID_pkcs7_enveloped = 23;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_pkcs7_enveloped); }))) {
            mixin(enumMixinStr_NID_pkcs7_enveloped);
        }
    }




    static if(!is(typeof(OBJ_pkcs7_enveloped))) {
        private enum enumMixinStr_OBJ_pkcs7_enveloped = `enum OBJ_pkcs7_enveloped = 1L , 2L , 840L , 113549L , 1L , 7L , 3L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_pkcs7_enveloped); }))) {
            mixin(enumMixinStr_OBJ_pkcs7_enveloped);
        }
    }




    static if(!is(typeof(LN_pkcs7_signedAndEnveloped))) {
        private enum enumMixinStr_LN_pkcs7_signedAndEnveloped = `enum LN_pkcs7_signedAndEnveloped = "pkcs7-signedAndEnvelopedData";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_pkcs7_signedAndEnveloped); }))) {
            mixin(enumMixinStr_LN_pkcs7_signedAndEnveloped);
        }
    }




    static if(!is(typeof(NID_pkcs7_signedAndEnveloped))) {
        private enum enumMixinStr_NID_pkcs7_signedAndEnveloped = `enum NID_pkcs7_signedAndEnveloped = 24;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_pkcs7_signedAndEnveloped); }))) {
            mixin(enumMixinStr_NID_pkcs7_signedAndEnveloped);
        }
    }




    static if(!is(typeof(OBJ_pkcs7_signedAndEnveloped))) {
        private enum enumMixinStr_OBJ_pkcs7_signedAndEnveloped = `enum OBJ_pkcs7_signedAndEnveloped = 1L , 2L , 840L , 113549L , 1L , 7L , 4L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_pkcs7_signedAndEnveloped); }))) {
            mixin(enumMixinStr_OBJ_pkcs7_signedAndEnveloped);
        }
    }




    static if(!is(typeof(LN_pkcs7_digest))) {
        private enum enumMixinStr_LN_pkcs7_digest = `enum LN_pkcs7_digest = "pkcs7-digestData";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_pkcs7_digest); }))) {
            mixin(enumMixinStr_LN_pkcs7_digest);
        }
    }




    static if(!is(typeof(NID_pkcs7_digest))) {
        private enum enumMixinStr_NID_pkcs7_digest = `enum NID_pkcs7_digest = 25;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_pkcs7_digest); }))) {
            mixin(enumMixinStr_NID_pkcs7_digest);
        }
    }




    static if(!is(typeof(OBJ_pkcs7_digest))) {
        private enum enumMixinStr_OBJ_pkcs7_digest = `enum OBJ_pkcs7_digest = 1L , 2L , 840L , 113549L , 1L , 7L , 5L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_pkcs7_digest); }))) {
            mixin(enumMixinStr_OBJ_pkcs7_digest);
        }
    }




    static if(!is(typeof(LN_pkcs7_encrypted))) {
        private enum enumMixinStr_LN_pkcs7_encrypted = `enum LN_pkcs7_encrypted = "pkcs7-encryptedData";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_pkcs7_encrypted); }))) {
            mixin(enumMixinStr_LN_pkcs7_encrypted);
        }
    }




    static if(!is(typeof(NID_pkcs7_encrypted))) {
        private enum enumMixinStr_NID_pkcs7_encrypted = `enum NID_pkcs7_encrypted = 26;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_pkcs7_encrypted); }))) {
            mixin(enumMixinStr_NID_pkcs7_encrypted);
        }
    }




    static if(!is(typeof(OBJ_pkcs7_encrypted))) {
        private enum enumMixinStr_OBJ_pkcs7_encrypted = `enum OBJ_pkcs7_encrypted = 1L , 2L , 840L , 113549L , 1L , 7L , 6L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_pkcs7_encrypted); }))) {
            mixin(enumMixinStr_OBJ_pkcs7_encrypted);
        }
    }




    static if(!is(typeof(SN_pkcs9))) {
        private enum enumMixinStr_SN_pkcs9 = `enum SN_pkcs9 = "pkcs9";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_pkcs9); }))) {
            mixin(enumMixinStr_SN_pkcs9);
        }
    }




    static if(!is(typeof(NID_pkcs9))) {
        private enum enumMixinStr_NID_pkcs9 = `enum NID_pkcs9 = 47;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_pkcs9); }))) {
            mixin(enumMixinStr_NID_pkcs9);
        }
    }




    static if(!is(typeof(OBJ_pkcs9))) {
        private enum enumMixinStr_OBJ_pkcs9 = `enum OBJ_pkcs9 = 1L , 2L , 840L , 113549L , 1L , 9L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_pkcs9); }))) {
            mixin(enumMixinStr_OBJ_pkcs9);
        }
    }




    static if(!is(typeof(LN_pkcs9_emailAddress))) {
        private enum enumMixinStr_LN_pkcs9_emailAddress = `enum LN_pkcs9_emailAddress = "emailAddress";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_pkcs9_emailAddress); }))) {
            mixin(enumMixinStr_LN_pkcs9_emailAddress);
        }
    }




    static if(!is(typeof(NID_pkcs9_emailAddress))) {
        private enum enumMixinStr_NID_pkcs9_emailAddress = `enum NID_pkcs9_emailAddress = 48;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_pkcs9_emailAddress); }))) {
            mixin(enumMixinStr_NID_pkcs9_emailAddress);
        }
    }




    static if(!is(typeof(OBJ_pkcs9_emailAddress))) {
        private enum enumMixinStr_OBJ_pkcs9_emailAddress = `enum OBJ_pkcs9_emailAddress = 1L , 2L , 840L , 113549L , 1L , 9L , 1L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_pkcs9_emailAddress); }))) {
            mixin(enumMixinStr_OBJ_pkcs9_emailAddress);
        }
    }




    static if(!is(typeof(LN_pkcs9_unstructuredName))) {
        private enum enumMixinStr_LN_pkcs9_unstructuredName = `enum LN_pkcs9_unstructuredName = "unstructuredName";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_pkcs9_unstructuredName); }))) {
            mixin(enumMixinStr_LN_pkcs9_unstructuredName);
        }
    }




    static if(!is(typeof(NID_pkcs9_unstructuredName))) {
        private enum enumMixinStr_NID_pkcs9_unstructuredName = `enum NID_pkcs9_unstructuredName = 49;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_pkcs9_unstructuredName); }))) {
            mixin(enumMixinStr_NID_pkcs9_unstructuredName);
        }
    }




    static if(!is(typeof(OBJ_pkcs9_unstructuredName))) {
        private enum enumMixinStr_OBJ_pkcs9_unstructuredName = `enum OBJ_pkcs9_unstructuredName = 1L , 2L , 840L , 113549L , 1L , 9L , 2L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_pkcs9_unstructuredName); }))) {
            mixin(enumMixinStr_OBJ_pkcs9_unstructuredName);
        }
    }




    static if(!is(typeof(LN_pkcs9_contentType))) {
        private enum enumMixinStr_LN_pkcs9_contentType = `enum LN_pkcs9_contentType = "contentType";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_pkcs9_contentType); }))) {
            mixin(enumMixinStr_LN_pkcs9_contentType);
        }
    }




    static if(!is(typeof(NID_pkcs9_contentType))) {
        private enum enumMixinStr_NID_pkcs9_contentType = `enum NID_pkcs9_contentType = 50;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_pkcs9_contentType); }))) {
            mixin(enumMixinStr_NID_pkcs9_contentType);
        }
    }




    static if(!is(typeof(OBJ_pkcs9_contentType))) {
        private enum enumMixinStr_OBJ_pkcs9_contentType = `enum OBJ_pkcs9_contentType = 1L , 2L , 840L , 113549L , 1L , 9L , 3L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_pkcs9_contentType); }))) {
            mixin(enumMixinStr_OBJ_pkcs9_contentType);
        }
    }




    static if(!is(typeof(LN_pkcs9_messageDigest))) {
        private enum enumMixinStr_LN_pkcs9_messageDigest = `enum LN_pkcs9_messageDigest = "messageDigest";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_pkcs9_messageDigest); }))) {
            mixin(enumMixinStr_LN_pkcs9_messageDigest);
        }
    }




    static if(!is(typeof(NID_pkcs9_messageDigest))) {
        private enum enumMixinStr_NID_pkcs9_messageDigest = `enum NID_pkcs9_messageDigest = 51;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_pkcs9_messageDigest); }))) {
            mixin(enumMixinStr_NID_pkcs9_messageDigest);
        }
    }




    static if(!is(typeof(OBJ_pkcs9_messageDigest))) {
        private enum enumMixinStr_OBJ_pkcs9_messageDigest = `enum OBJ_pkcs9_messageDigest = 1L , 2L , 840L , 113549L , 1L , 9L , 4L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_pkcs9_messageDigest); }))) {
            mixin(enumMixinStr_OBJ_pkcs9_messageDigest);
        }
    }




    static if(!is(typeof(LN_pkcs9_signingTime))) {
        private enum enumMixinStr_LN_pkcs9_signingTime = `enum LN_pkcs9_signingTime = "signingTime";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_pkcs9_signingTime); }))) {
            mixin(enumMixinStr_LN_pkcs9_signingTime);
        }
    }




    static if(!is(typeof(NID_pkcs9_signingTime))) {
        private enum enumMixinStr_NID_pkcs9_signingTime = `enum NID_pkcs9_signingTime = 52;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_pkcs9_signingTime); }))) {
            mixin(enumMixinStr_NID_pkcs9_signingTime);
        }
    }




    static if(!is(typeof(OBJ_pkcs9_signingTime))) {
        private enum enumMixinStr_OBJ_pkcs9_signingTime = `enum OBJ_pkcs9_signingTime = 1L , 2L , 840L , 113549L , 1L , 9L , 5L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_pkcs9_signingTime); }))) {
            mixin(enumMixinStr_OBJ_pkcs9_signingTime);
        }
    }




    static if(!is(typeof(LN_pkcs9_countersignature))) {
        private enum enumMixinStr_LN_pkcs9_countersignature = `enum LN_pkcs9_countersignature = "countersignature";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_pkcs9_countersignature); }))) {
            mixin(enumMixinStr_LN_pkcs9_countersignature);
        }
    }




    static if(!is(typeof(NID_pkcs9_countersignature))) {
        private enum enumMixinStr_NID_pkcs9_countersignature = `enum NID_pkcs9_countersignature = 53;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_pkcs9_countersignature); }))) {
            mixin(enumMixinStr_NID_pkcs9_countersignature);
        }
    }




    static if(!is(typeof(OBJ_pkcs9_countersignature))) {
        private enum enumMixinStr_OBJ_pkcs9_countersignature = `enum OBJ_pkcs9_countersignature = 1L , 2L , 840L , 113549L , 1L , 9L , 6L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_pkcs9_countersignature); }))) {
            mixin(enumMixinStr_OBJ_pkcs9_countersignature);
        }
    }




    static if(!is(typeof(LN_pkcs9_challengePassword))) {
        private enum enumMixinStr_LN_pkcs9_challengePassword = `enum LN_pkcs9_challengePassword = "challengePassword";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_pkcs9_challengePassword); }))) {
            mixin(enumMixinStr_LN_pkcs9_challengePassword);
        }
    }




    static if(!is(typeof(NID_pkcs9_challengePassword))) {
        private enum enumMixinStr_NID_pkcs9_challengePassword = `enum NID_pkcs9_challengePassword = 54;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_pkcs9_challengePassword); }))) {
            mixin(enumMixinStr_NID_pkcs9_challengePassword);
        }
    }




    static if(!is(typeof(OBJ_pkcs9_challengePassword))) {
        private enum enumMixinStr_OBJ_pkcs9_challengePassword = `enum OBJ_pkcs9_challengePassword = 1L , 2L , 840L , 113549L , 1L , 9L , 7L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_pkcs9_challengePassword); }))) {
            mixin(enumMixinStr_OBJ_pkcs9_challengePassword);
        }
    }




    static if(!is(typeof(LN_pkcs9_unstructuredAddress))) {
        private enum enumMixinStr_LN_pkcs9_unstructuredAddress = `enum LN_pkcs9_unstructuredAddress = "unstructuredAddress";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_pkcs9_unstructuredAddress); }))) {
            mixin(enumMixinStr_LN_pkcs9_unstructuredAddress);
        }
    }




    static if(!is(typeof(NID_pkcs9_unstructuredAddress))) {
        private enum enumMixinStr_NID_pkcs9_unstructuredAddress = `enum NID_pkcs9_unstructuredAddress = 55;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_pkcs9_unstructuredAddress); }))) {
            mixin(enumMixinStr_NID_pkcs9_unstructuredAddress);
        }
    }




    static if(!is(typeof(OBJ_pkcs9_unstructuredAddress))) {
        private enum enumMixinStr_OBJ_pkcs9_unstructuredAddress = `enum OBJ_pkcs9_unstructuredAddress = 1L , 2L , 840L , 113549L , 1L , 9L , 8L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_pkcs9_unstructuredAddress); }))) {
            mixin(enumMixinStr_OBJ_pkcs9_unstructuredAddress);
        }
    }




    static if(!is(typeof(LN_pkcs9_extCertAttributes))) {
        private enum enumMixinStr_LN_pkcs9_extCertAttributes = `enum LN_pkcs9_extCertAttributes = "extendedCertificateAttributes";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_pkcs9_extCertAttributes); }))) {
            mixin(enumMixinStr_LN_pkcs9_extCertAttributes);
        }
    }




    static if(!is(typeof(NID_pkcs9_extCertAttributes))) {
        private enum enumMixinStr_NID_pkcs9_extCertAttributes = `enum NID_pkcs9_extCertAttributes = 56;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_pkcs9_extCertAttributes); }))) {
            mixin(enumMixinStr_NID_pkcs9_extCertAttributes);
        }
    }




    static if(!is(typeof(OBJ_pkcs9_extCertAttributes))) {
        private enum enumMixinStr_OBJ_pkcs9_extCertAttributes = `enum OBJ_pkcs9_extCertAttributes = 1L , 2L , 840L , 113549L , 1L , 9L , 9L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_pkcs9_extCertAttributes); }))) {
            mixin(enumMixinStr_OBJ_pkcs9_extCertAttributes);
        }
    }




    static if(!is(typeof(SN_ext_req))) {
        private enum enumMixinStr_SN_ext_req = `enum SN_ext_req = "extReq";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_ext_req); }))) {
            mixin(enumMixinStr_SN_ext_req);
        }
    }




    static if(!is(typeof(LN_ext_req))) {
        private enum enumMixinStr_LN_ext_req = `enum LN_ext_req = "Extension Request";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_ext_req); }))) {
            mixin(enumMixinStr_LN_ext_req);
        }
    }




    static if(!is(typeof(NID_ext_req))) {
        private enum enumMixinStr_NID_ext_req = `enum NID_ext_req = 172;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_ext_req); }))) {
            mixin(enumMixinStr_NID_ext_req);
        }
    }




    static if(!is(typeof(OBJ_ext_req))) {
        private enum enumMixinStr_OBJ_ext_req = `enum OBJ_ext_req = 1L , 2L , 840L , 113549L , 1L , 9L , 14L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_ext_req); }))) {
            mixin(enumMixinStr_OBJ_ext_req);
        }
    }




    static if(!is(typeof(SN_SMIMECapabilities))) {
        private enum enumMixinStr_SN_SMIMECapabilities = `enum SN_SMIMECapabilities = "SMIME-CAPS";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_SMIMECapabilities); }))) {
            mixin(enumMixinStr_SN_SMIMECapabilities);
        }
    }




    static if(!is(typeof(LN_SMIMECapabilities))) {
        private enum enumMixinStr_LN_SMIMECapabilities = `enum LN_SMIMECapabilities = "S/MIME Capabilities";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_SMIMECapabilities); }))) {
            mixin(enumMixinStr_LN_SMIMECapabilities);
        }
    }




    static if(!is(typeof(NID_SMIMECapabilities))) {
        private enum enumMixinStr_NID_SMIMECapabilities = `enum NID_SMIMECapabilities = 167;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_SMIMECapabilities); }))) {
            mixin(enumMixinStr_NID_SMIMECapabilities);
        }
    }




    static if(!is(typeof(OBJ_SMIMECapabilities))) {
        private enum enumMixinStr_OBJ_SMIMECapabilities = `enum OBJ_SMIMECapabilities = 1L , 2L , 840L , 113549L , 1L , 9L , 15L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_SMIMECapabilities); }))) {
            mixin(enumMixinStr_OBJ_SMIMECapabilities);
        }
    }




    static if(!is(typeof(SN_SMIME))) {
        private enum enumMixinStr_SN_SMIME = `enum SN_SMIME = "SMIME";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_SMIME); }))) {
            mixin(enumMixinStr_SN_SMIME);
        }
    }




    static if(!is(typeof(LN_SMIME))) {
        private enum enumMixinStr_LN_SMIME = `enum LN_SMIME = "S/MIME";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_SMIME); }))) {
            mixin(enumMixinStr_LN_SMIME);
        }
    }




    static if(!is(typeof(NID_SMIME))) {
        private enum enumMixinStr_NID_SMIME = `enum NID_SMIME = 188;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_SMIME); }))) {
            mixin(enumMixinStr_NID_SMIME);
        }
    }




    static if(!is(typeof(OBJ_SMIME))) {
        private enum enumMixinStr_OBJ_SMIME = `enum OBJ_SMIME = 1L , 2L , 840L , 113549L , 1L , 9L , 16L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_SMIME); }))) {
            mixin(enumMixinStr_OBJ_SMIME);
        }
    }




    static if(!is(typeof(SN_id_smime_mod))) {
        private enum enumMixinStr_SN_id_smime_mod = `enum SN_id_smime_mod = "id-smime-mod";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_smime_mod); }))) {
            mixin(enumMixinStr_SN_id_smime_mod);
        }
    }




    static if(!is(typeof(NID_id_smime_mod))) {
        private enum enumMixinStr_NID_id_smime_mod = `enum NID_id_smime_mod = 189;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_smime_mod); }))) {
            mixin(enumMixinStr_NID_id_smime_mod);
        }
    }




    static if(!is(typeof(OBJ_id_smime_mod))) {
        private enum enumMixinStr_OBJ_id_smime_mod = `enum OBJ_id_smime_mod = 1L , 2L , 840L , 113549L , 1L , 9L , 16L , 0L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_smime_mod); }))) {
            mixin(enumMixinStr_OBJ_id_smime_mod);
        }
    }




    static if(!is(typeof(SN_id_smime_ct))) {
        private enum enumMixinStr_SN_id_smime_ct = `enum SN_id_smime_ct = "id-smime-ct";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_smime_ct); }))) {
            mixin(enumMixinStr_SN_id_smime_ct);
        }
    }




    static if(!is(typeof(NID_id_smime_ct))) {
        private enum enumMixinStr_NID_id_smime_ct = `enum NID_id_smime_ct = 190;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_smime_ct); }))) {
            mixin(enumMixinStr_NID_id_smime_ct);
        }
    }




    static if(!is(typeof(OBJ_id_smime_ct))) {
        private enum enumMixinStr_OBJ_id_smime_ct = `enum OBJ_id_smime_ct = 1L , 2L , 840L , 113549L , 1L , 9L , 16L , 1L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_smime_ct); }))) {
            mixin(enumMixinStr_OBJ_id_smime_ct);
        }
    }




    static if(!is(typeof(SN_id_smime_aa))) {
        private enum enumMixinStr_SN_id_smime_aa = `enum SN_id_smime_aa = "id-smime-aa";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_smime_aa); }))) {
            mixin(enumMixinStr_SN_id_smime_aa);
        }
    }




    static if(!is(typeof(NID_id_smime_aa))) {
        private enum enumMixinStr_NID_id_smime_aa = `enum NID_id_smime_aa = 191;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_smime_aa); }))) {
            mixin(enumMixinStr_NID_id_smime_aa);
        }
    }




    static if(!is(typeof(OBJ_id_smime_aa))) {
        private enum enumMixinStr_OBJ_id_smime_aa = `enum OBJ_id_smime_aa = 1L , 2L , 840L , 113549L , 1L , 9L , 16L , 2L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_smime_aa); }))) {
            mixin(enumMixinStr_OBJ_id_smime_aa);
        }
    }




    static if(!is(typeof(SN_id_smime_alg))) {
        private enum enumMixinStr_SN_id_smime_alg = `enum SN_id_smime_alg = "id-smime-alg";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_smime_alg); }))) {
            mixin(enumMixinStr_SN_id_smime_alg);
        }
    }




    static if(!is(typeof(NID_id_smime_alg))) {
        private enum enumMixinStr_NID_id_smime_alg = `enum NID_id_smime_alg = 192;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_smime_alg); }))) {
            mixin(enumMixinStr_NID_id_smime_alg);
        }
    }




    static if(!is(typeof(OBJ_id_smime_alg))) {
        private enum enumMixinStr_OBJ_id_smime_alg = `enum OBJ_id_smime_alg = 1L , 2L , 840L , 113549L , 1L , 9L , 16L , 3L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_smime_alg); }))) {
            mixin(enumMixinStr_OBJ_id_smime_alg);
        }
    }




    static if(!is(typeof(SN_id_smime_cd))) {
        private enum enumMixinStr_SN_id_smime_cd = `enum SN_id_smime_cd = "id-smime-cd";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_smime_cd); }))) {
            mixin(enumMixinStr_SN_id_smime_cd);
        }
    }




    static if(!is(typeof(NID_id_smime_cd))) {
        private enum enumMixinStr_NID_id_smime_cd = `enum NID_id_smime_cd = 193;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_smime_cd); }))) {
            mixin(enumMixinStr_NID_id_smime_cd);
        }
    }




    static if(!is(typeof(OBJ_id_smime_cd))) {
        private enum enumMixinStr_OBJ_id_smime_cd = `enum OBJ_id_smime_cd = 1L , 2L , 840L , 113549L , 1L , 9L , 16L , 4L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_smime_cd); }))) {
            mixin(enumMixinStr_OBJ_id_smime_cd);
        }
    }




    static if(!is(typeof(SN_id_smime_spq))) {
        private enum enumMixinStr_SN_id_smime_spq = `enum SN_id_smime_spq = "id-smime-spq";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_smime_spq); }))) {
            mixin(enumMixinStr_SN_id_smime_spq);
        }
    }




    static if(!is(typeof(NID_id_smime_spq))) {
        private enum enumMixinStr_NID_id_smime_spq = `enum NID_id_smime_spq = 194;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_smime_spq); }))) {
            mixin(enumMixinStr_NID_id_smime_spq);
        }
    }




    static if(!is(typeof(OBJ_id_smime_spq))) {
        private enum enumMixinStr_OBJ_id_smime_spq = `enum OBJ_id_smime_spq = 1L , 2L , 840L , 113549L , 1L , 9L , 16L , 5L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_smime_spq); }))) {
            mixin(enumMixinStr_OBJ_id_smime_spq);
        }
    }




    static if(!is(typeof(SN_id_smime_cti))) {
        private enum enumMixinStr_SN_id_smime_cti = `enum SN_id_smime_cti = "id-smime-cti";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_smime_cti); }))) {
            mixin(enumMixinStr_SN_id_smime_cti);
        }
    }




    static if(!is(typeof(NID_id_smime_cti))) {
        private enum enumMixinStr_NID_id_smime_cti = `enum NID_id_smime_cti = 195;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_smime_cti); }))) {
            mixin(enumMixinStr_NID_id_smime_cti);
        }
    }




    static if(!is(typeof(OBJ_id_smime_cti))) {
        private enum enumMixinStr_OBJ_id_smime_cti = `enum OBJ_id_smime_cti = 1L , 2L , 840L , 113549L , 1L , 9L , 16L , 6L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_smime_cti); }))) {
            mixin(enumMixinStr_OBJ_id_smime_cti);
        }
    }




    static if(!is(typeof(SN_id_smime_mod_cms))) {
        private enum enumMixinStr_SN_id_smime_mod_cms = `enum SN_id_smime_mod_cms = "id-smime-mod-cms";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_smime_mod_cms); }))) {
            mixin(enumMixinStr_SN_id_smime_mod_cms);
        }
    }




    static if(!is(typeof(NID_id_smime_mod_cms))) {
        private enum enumMixinStr_NID_id_smime_mod_cms = `enum NID_id_smime_mod_cms = 196;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_smime_mod_cms); }))) {
            mixin(enumMixinStr_NID_id_smime_mod_cms);
        }
    }




    static if(!is(typeof(OBJ_id_smime_mod_cms))) {
        private enum enumMixinStr_OBJ_id_smime_mod_cms = `enum OBJ_id_smime_mod_cms = 1L , 2L , 840L , 113549L , 1L , 9L , 16L , 0L , 1L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_smime_mod_cms); }))) {
            mixin(enumMixinStr_OBJ_id_smime_mod_cms);
        }
    }




    static if(!is(typeof(SN_id_smime_mod_ess))) {
        private enum enumMixinStr_SN_id_smime_mod_ess = `enum SN_id_smime_mod_ess = "id-smime-mod-ess";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_smime_mod_ess); }))) {
            mixin(enumMixinStr_SN_id_smime_mod_ess);
        }
    }




    static if(!is(typeof(NID_id_smime_mod_ess))) {
        private enum enumMixinStr_NID_id_smime_mod_ess = `enum NID_id_smime_mod_ess = 197;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_smime_mod_ess); }))) {
            mixin(enumMixinStr_NID_id_smime_mod_ess);
        }
    }




    static if(!is(typeof(OBJ_id_smime_mod_ess))) {
        private enum enumMixinStr_OBJ_id_smime_mod_ess = `enum OBJ_id_smime_mod_ess = 1L , 2L , 840L , 113549L , 1L , 9L , 16L , 0L , 2L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_smime_mod_ess); }))) {
            mixin(enumMixinStr_OBJ_id_smime_mod_ess);
        }
    }




    static if(!is(typeof(SN_id_smime_mod_oid))) {
        private enum enumMixinStr_SN_id_smime_mod_oid = `enum SN_id_smime_mod_oid = "id-smime-mod-oid";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_smime_mod_oid); }))) {
            mixin(enumMixinStr_SN_id_smime_mod_oid);
        }
    }




    static if(!is(typeof(NID_id_smime_mod_oid))) {
        private enum enumMixinStr_NID_id_smime_mod_oid = `enum NID_id_smime_mod_oid = 198;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_smime_mod_oid); }))) {
            mixin(enumMixinStr_NID_id_smime_mod_oid);
        }
    }




    static if(!is(typeof(OBJ_id_smime_mod_oid))) {
        private enum enumMixinStr_OBJ_id_smime_mod_oid = `enum OBJ_id_smime_mod_oid = 1L , 2L , 840L , 113549L , 1L , 9L , 16L , 0L , 3L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_smime_mod_oid); }))) {
            mixin(enumMixinStr_OBJ_id_smime_mod_oid);
        }
    }




    static if(!is(typeof(SN_id_smime_mod_msg_v3))) {
        private enum enumMixinStr_SN_id_smime_mod_msg_v3 = `enum SN_id_smime_mod_msg_v3 = "id-smime-mod-msg-v3";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_smime_mod_msg_v3); }))) {
            mixin(enumMixinStr_SN_id_smime_mod_msg_v3);
        }
    }




    static if(!is(typeof(NID_id_smime_mod_msg_v3))) {
        private enum enumMixinStr_NID_id_smime_mod_msg_v3 = `enum NID_id_smime_mod_msg_v3 = 199;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_smime_mod_msg_v3); }))) {
            mixin(enumMixinStr_NID_id_smime_mod_msg_v3);
        }
    }




    static if(!is(typeof(OBJ_id_smime_mod_msg_v3))) {
        private enum enumMixinStr_OBJ_id_smime_mod_msg_v3 = `enum OBJ_id_smime_mod_msg_v3 = 1L , 2L , 840L , 113549L , 1L , 9L , 16L , 0L , 4L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_smime_mod_msg_v3); }))) {
            mixin(enumMixinStr_OBJ_id_smime_mod_msg_v3);
        }
    }




    static if(!is(typeof(SN_id_smime_mod_ets_eSignature_88))) {
        private enum enumMixinStr_SN_id_smime_mod_ets_eSignature_88 = `enum SN_id_smime_mod_ets_eSignature_88 = "id-smime-mod-ets-eSignature-88";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_smime_mod_ets_eSignature_88); }))) {
            mixin(enumMixinStr_SN_id_smime_mod_ets_eSignature_88);
        }
    }




    static if(!is(typeof(NID_id_smime_mod_ets_eSignature_88))) {
        private enum enumMixinStr_NID_id_smime_mod_ets_eSignature_88 = `enum NID_id_smime_mod_ets_eSignature_88 = 200;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_smime_mod_ets_eSignature_88); }))) {
            mixin(enumMixinStr_NID_id_smime_mod_ets_eSignature_88);
        }
    }




    static if(!is(typeof(OBJ_id_smime_mod_ets_eSignature_88))) {
        private enum enumMixinStr_OBJ_id_smime_mod_ets_eSignature_88 = `enum OBJ_id_smime_mod_ets_eSignature_88 = 1L , 2L , 840L , 113549L , 1L , 9L , 16L , 0L , 5L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_smime_mod_ets_eSignature_88); }))) {
            mixin(enumMixinStr_OBJ_id_smime_mod_ets_eSignature_88);
        }
    }




    static if(!is(typeof(SN_id_smime_mod_ets_eSignature_97))) {
        private enum enumMixinStr_SN_id_smime_mod_ets_eSignature_97 = `enum SN_id_smime_mod_ets_eSignature_97 = "id-smime-mod-ets-eSignature-97";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_smime_mod_ets_eSignature_97); }))) {
            mixin(enumMixinStr_SN_id_smime_mod_ets_eSignature_97);
        }
    }




    static if(!is(typeof(NID_id_smime_mod_ets_eSignature_97))) {
        private enum enumMixinStr_NID_id_smime_mod_ets_eSignature_97 = `enum NID_id_smime_mod_ets_eSignature_97 = 201;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_smime_mod_ets_eSignature_97); }))) {
            mixin(enumMixinStr_NID_id_smime_mod_ets_eSignature_97);
        }
    }




    static if(!is(typeof(OBJ_id_smime_mod_ets_eSignature_97))) {
        private enum enumMixinStr_OBJ_id_smime_mod_ets_eSignature_97 = `enum OBJ_id_smime_mod_ets_eSignature_97 = 1L , 2L , 840L , 113549L , 1L , 9L , 16L , 0L , 6L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_smime_mod_ets_eSignature_97); }))) {
            mixin(enumMixinStr_OBJ_id_smime_mod_ets_eSignature_97);
        }
    }




    static if(!is(typeof(SN_id_smime_mod_ets_eSigPolicy_88))) {
        private enum enumMixinStr_SN_id_smime_mod_ets_eSigPolicy_88 = `enum SN_id_smime_mod_ets_eSigPolicy_88 = "id-smime-mod-ets-eSigPolicy-88";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_smime_mod_ets_eSigPolicy_88); }))) {
            mixin(enumMixinStr_SN_id_smime_mod_ets_eSigPolicy_88);
        }
    }




    static if(!is(typeof(NID_id_smime_mod_ets_eSigPolicy_88))) {
        private enum enumMixinStr_NID_id_smime_mod_ets_eSigPolicy_88 = `enum NID_id_smime_mod_ets_eSigPolicy_88 = 202;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_smime_mod_ets_eSigPolicy_88); }))) {
            mixin(enumMixinStr_NID_id_smime_mod_ets_eSigPolicy_88);
        }
    }




    static if(!is(typeof(OBJ_id_smime_mod_ets_eSigPolicy_88))) {
        private enum enumMixinStr_OBJ_id_smime_mod_ets_eSigPolicy_88 = `enum OBJ_id_smime_mod_ets_eSigPolicy_88 = 1L , 2L , 840L , 113549L , 1L , 9L , 16L , 0L , 7L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_smime_mod_ets_eSigPolicy_88); }))) {
            mixin(enumMixinStr_OBJ_id_smime_mod_ets_eSigPolicy_88);
        }
    }




    static if(!is(typeof(SN_id_smime_mod_ets_eSigPolicy_97))) {
        private enum enumMixinStr_SN_id_smime_mod_ets_eSigPolicy_97 = `enum SN_id_smime_mod_ets_eSigPolicy_97 = "id-smime-mod-ets-eSigPolicy-97";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_smime_mod_ets_eSigPolicy_97); }))) {
            mixin(enumMixinStr_SN_id_smime_mod_ets_eSigPolicy_97);
        }
    }




    static if(!is(typeof(NID_id_smime_mod_ets_eSigPolicy_97))) {
        private enum enumMixinStr_NID_id_smime_mod_ets_eSigPolicy_97 = `enum NID_id_smime_mod_ets_eSigPolicy_97 = 203;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_smime_mod_ets_eSigPolicy_97); }))) {
            mixin(enumMixinStr_NID_id_smime_mod_ets_eSigPolicy_97);
        }
    }




    static if(!is(typeof(OBJ_id_smime_mod_ets_eSigPolicy_97))) {
        private enum enumMixinStr_OBJ_id_smime_mod_ets_eSigPolicy_97 = `enum OBJ_id_smime_mod_ets_eSigPolicy_97 = 1L , 2L , 840L , 113549L , 1L , 9L , 16L , 0L , 8L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_smime_mod_ets_eSigPolicy_97); }))) {
            mixin(enumMixinStr_OBJ_id_smime_mod_ets_eSigPolicy_97);
        }
    }




    static if(!is(typeof(SN_id_smime_ct_receipt))) {
        private enum enumMixinStr_SN_id_smime_ct_receipt = `enum SN_id_smime_ct_receipt = "id-smime-ct-receipt";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_smime_ct_receipt); }))) {
            mixin(enumMixinStr_SN_id_smime_ct_receipt);
        }
    }




    static if(!is(typeof(NID_id_smime_ct_receipt))) {
        private enum enumMixinStr_NID_id_smime_ct_receipt = `enum NID_id_smime_ct_receipt = 204;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_smime_ct_receipt); }))) {
            mixin(enumMixinStr_NID_id_smime_ct_receipt);
        }
    }




    static if(!is(typeof(OBJ_id_smime_ct_receipt))) {
        private enum enumMixinStr_OBJ_id_smime_ct_receipt = `enum OBJ_id_smime_ct_receipt = 1L , 2L , 840L , 113549L , 1L , 9L , 16L , 1L , 1L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_smime_ct_receipt); }))) {
            mixin(enumMixinStr_OBJ_id_smime_ct_receipt);
        }
    }




    static if(!is(typeof(SN_id_smime_ct_authData))) {
        private enum enumMixinStr_SN_id_smime_ct_authData = `enum SN_id_smime_ct_authData = "id-smime-ct-authData";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_smime_ct_authData); }))) {
            mixin(enumMixinStr_SN_id_smime_ct_authData);
        }
    }




    static if(!is(typeof(NID_id_smime_ct_authData))) {
        private enum enumMixinStr_NID_id_smime_ct_authData = `enum NID_id_smime_ct_authData = 205;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_smime_ct_authData); }))) {
            mixin(enumMixinStr_NID_id_smime_ct_authData);
        }
    }




    static if(!is(typeof(OBJ_id_smime_ct_authData))) {
        private enum enumMixinStr_OBJ_id_smime_ct_authData = `enum OBJ_id_smime_ct_authData = 1L , 2L , 840L , 113549L , 1L , 9L , 16L , 1L , 2L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_smime_ct_authData); }))) {
            mixin(enumMixinStr_OBJ_id_smime_ct_authData);
        }
    }




    static if(!is(typeof(SN_id_smime_ct_publishCert))) {
        private enum enumMixinStr_SN_id_smime_ct_publishCert = `enum SN_id_smime_ct_publishCert = "id-smime-ct-publishCert";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_smime_ct_publishCert); }))) {
            mixin(enumMixinStr_SN_id_smime_ct_publishCert);
        }
    }




    static if(!is(typeof(NID_id_smime_ct_publishCert))) {
        private enum enumMixinStr_NID_id_smime_ct_publishCert = `enum NID_id_smime_ct_publishCert = 206;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_smime_ct_publishCert); }))) {
            mixin(enumMixinStr_NID_id_smime_ct_publishCert);
        }
    }




    static if(!is(typeof(OBJ_id_smime_ct_publishCert))) {
        private enum enumMixinStr_OBJ_id_smime_ct_publishCert = `enum OBJ_id_smime_ct_publishCert = 1L , 2L , 840L , 113549L , 1L , 9L , 16L , 1L , 3L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_smime_ct_publishCert); }))) {
            mixin(enumMixinStr_OBJ_id_smime_ct_publishCert);
        }
    }




    static if(!is(typeof(SN_id_smime_ct_TSTInfo))) {
        private enum enumMixinStr_SN_id_smime_ct_TSTInfo = `enum SN_id_smime_ct_TSTInfo = "id-smime-ct-TSTInfo";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_smime_ct_TSTInfo); }))) {
            mixin(enumMixinStr_SN_id_smime_ct_TSTInfo);
        }
    }




    static if(!is(typeof(NID_id_smime_ct_TSTInfo))) {
        private enum enumMixinStr_NID_id_smime_ct_TSTInfo = `enum NID_id_smime_ct_TSTInfo = 207;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_smime_ct_TSTInfo); }))) {
            mixin(enumMixinStr_NID_id_smime_ct_TSTInfo);
        }
    }




    static if(!is(typeof(OBJ_id_smime_ct_TSTInfo))) {
        private enum enumMixinStr_OBJ_id_smime_ct_TSTInfo = `enum OBJ_id_smime_ct_TSTInfo = 1L , 2L , 840L , 113549L , 1L , 9L , 16L , 1L , 4L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_smime_ct_TSTInfo); }))) {
            mixin(enumMixinStr_OBJ_id_smime_ct_TSTInfo);
        }
    }




    static if(!is(typeof(SN_id_smime_ct_TDTInfo))) {
        private enum enumMixinStr_SN_id_smime_ct_TDTInfo = `enum SN_id_smime_ct_TDTInfo = "id-smime-ct-TDTInfo";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_smime_ct_TDTInfo); }))) {
            mixin(enumMixinStr_SN_id_smime_ct_TDTInfo);
        }
    }




    static if(!is(typeof(NID_id_smime_ct_TDTInfo))) {
        private enum enumMixinStr_NID_id_smime_ct_TDTInfo = `enum NID_id_smime_ct_TDTInfo = 208;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_smime_ct_TDTInfo); }))) {
            mixin(enumMixinStr_NID_id_smime_ct_TDTInfo);
        }
    }




    static if(!is(typeof(OBJ_id_smime_ct_TDTInfo))) {
        private enum enumMixinStr_OBJ_id_smime_ct_TDTInfo = `enum OBJ_id_smime_ct_TDTInfo = 1L , 2L , 840L , 113549L , 1L , 9L , 16L , 1L , 5L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_smime_ct_TDTInfo); }))) {
            mixin(enumMixinStr_OBJ_id_smime_ct_TDTInfo);
        }
    }




    static if(!is(typeof(SN_id_smime_ct_contentInfo))) {
        private enum enumMixinStr_SN_id_smime_ct_contentInfo = `enum SN_id_smime_ct_contentInfo = "id-smime-ct-contentInfo";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_smime_ct_contentInfo); }))) {
            mixin(enumMixinStr_SN_id_smime_ct_contentInfo);
        }
    }




    static if(!is(typeof(NID_id_smime_ct_contentInfo))) {
        private enum enumMixinStr_NID_id_smime_ct_contentInfo = `enum NID_id_smime_ct_contentInfo = 209;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_smime_ct_contentInfo); }))) {
            mixin(enumMixinStr_NID_id_smime_ct_contentInfo);
        }
    }




    static if(!is(typeof(OBJ_id_smime_ct_contentInfo))) {
        private enum enumMixinStr_OBJ_id_smime_ct_contentInfo = `enum OBJ_id_smime_ct_contentInfo = 1L , 2L , 840L , 113549L , 1L , 9L , 16L , 1L , 6L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_smime_ct_contentInfo); }))) {
            mixin(enumMixinStr_OBJ_id_smime_ct_contentInfo);
        }
    }




    static if(!is(typeof(SN_id_smime_ct_DVCSRequestData))) {
        private enum enumMixinStr_SN_id_smime_ct_DVCSRequestData = `enum SN_id_smime_ct_DVCSRequestData = "id-smime-ct-DVCSRequestData";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_smime_ct_DVCSRequestData); }))) {
            mixin(enumMixinStr_SN_id_smime_ct_DVCSRequestData);
        }
    }




    static if(!is(typeof(NID_id_smime_ct_DVCSRequestData))) {
        private enum enumMixinStr_NID_id_smime_ct_DVCSRequestData = `enum NID_id_smime_ct_DVCSRequestData = 210;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_smime_ct_DVCSRequestData); }))) {
            mixin(enumMixinStr_NID_id_smime_ct_DVCSRequestData);
        }
    }




    static if(!is(typeof(OBJ_id_smime_ct_DVCSRequestData))) {
        private enum enumMixinStr_OBJ_id_smime_ct_DVCSRequestData = `enum OBJ_id_smime_ct_DVCSRequestData = 1L , 2L , 840L , 113549L , 1L , 9L , 16L , 1L , 7L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_smime_ct_DVCSRequestData); }))) {
            mixin(enumMixinStr_OBJ_id_smime_ct_DVCSRequestData);
        }
    }




    static if(!is(typeof(SN_id_smime_ct_DVCSResponseData))) {
        private enum enumMixinStr_SN_id_smime_ct_DVCSResponseData = `enum SN_id_smime_ct_DVCSResponseData = "id-smime-ct-DVCSResponseData";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_smime_ct_DVCSResponseData); }))) {
            mixin(enumMixinStr_SN_id_smime_ct_DVCSResponseData);
        }
    }




    static if(!is(typeof(NID_id_smime_ct_DVCSResponseData))) {
        private enum enumMixinStr_NID_id_smime_ct_DVCSResponseData = `enum NID_id_smime_ct_DVCSResponseData = 211;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_smime_ct_DVCSResponseData); }))) {
            mixin(enumMixinStr_NID_id_smime_ct_DVCSResponseData);
        }
    }




    static if(!is(typeof(OBJ_id_smime_ct_DVCSResponseData))) {
        private enum enumMixinStr_OBJ_id_smime_ct_DVCSResponseData = `enum OBJ_id_smime_ct_DVCSResponseData = 1L , 2L , 840L , 113549L , 1L , 9L , 16L , 1L , 8L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_smime_ct_DVCSResponseData); }))) {
            mixin(enumMixinStr_OBJ_id_smime_ct_DVCSResponseData);
        }
    }




    static if(!is(typeof(SN_id_smime_ct_compressedData))) {
        private enum enumMixinStr_SN_id_smime_ct_compressedData = `enum SN_id_smime_ct_compressedData = "id-smime-ct-compressedData";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_smime_ct_compressedData); }))) {
            mixin(enumMixinStr_SN_id_smime_ct_compressedData);
        }
    }




    static if(!is(typeof(NID_id_smime_ct_compressedData))) {
        private enum enumMixinStr_NID_id_smime_ct_compressedData = `enum NID_id_smime_ct_compressedData = 786;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_smime_ct_compressedData); }))) {
            mixin(enumMixinStr_NID_id_smime_ct_compressedData);
        }
    }




    static if(!is(typeof(OBJ_id_smime_ct_compressedData))) {
        private enum enumMixinStr_OBJ_id_smime_ct_compressedData = `enum OBJ_id_smime_ct_compressedData = 1L , 2L , 840L , 113549L , 1L , 9L , 16L , 1L , 9L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_smime_ct_compressedData); }))) {
            mixin(enumMixinStr_OBJ_id_smime_ct_compressedData);
        }
    }




    static if(!is(typeof(SN_id_smime_ct_contentCollection))) {
        private enum enumMixinStr_SN_id_smime_ct_contentCollection = `enum SN_id_smime_ct_contentCollection = "id-smime-ct-contentCollection";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_smime_ct_contentCollection); }))) {
            mixin(enumMixinStr_SN_id_smime_ct_contentCollection);
        }
    }




    static if(!is(typeof(NID_id_smime_ct_contentCollection))) {
        private enum enumMixinStr_NID_id_smime_ct_contentCollection = `enum NID_id_smime_ct_contentCollection = 1058;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_smime_ct_contentCollection); }))) {
            mixin(enumMixinStr_NID_id_smime_ct_contentCollection);
        }
    }




    static if(!is(typeof(OBJ_id_smime_ct_contentCollection))) {
        private enum enumMixinStr_OBJ_id_smime_ct_contentCollection = `enum OBJ_id_smime_ct_contentCollection = 1L , 2L , 840L , 113549L , 1L , 9L , 16L , 1L , 19L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_smime_ct_contentCollection); }))) {
            mixin(enumMixinStr_OBJ_id_smime_ct_contentCollection);
        }
    }




    static if(!is(typeof(SN_id_smime_ct_authEnvelopedData))) {
        private enum enumMixinStr_SN_id_smime_ct_authEnvelopedData = `enum SN_id_smime_ct_authEnvelopedData = "id-smime-ct-authEnvelopedData";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_smime_ct_authEnvelopedData); }))) {
            mixin(enumMixinStr_SN_id_smime_ct_authEnvelopedData);
        }
    }




    static if(!is(typeof(NID_id_smime_ct_authEnvelopedData))) {
        private enum enumMixinStr_NID_id_smime_ct_authEnvelopedData = `enum NID_id_smime_ct_authEnvelopedData = 1059;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_smime_ct_authEnvelopedData); }))) {
            mixin(enumMixinStr_NID_id_smime_ct_authEnvelopedData);
        }
    }




    static if(!is(typeof(OBJ_id_smime_ct_authEnvelopedData))) {
        private enum enumMixinStr_OBJ_id_smime_ct_authEnvelopedData = `enum OBJ_id_smime_ct_authEnvelopedData = 1L , 2L , 840L , 113549L , 1L , 9L , 16L , 1L , 23L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_smime_ct_authEnvelopedData); }))) {
            mixin(enumMixinStr_OBJ_id_smime_ct_authEnvelopedData);
        }
    }




    static if(!is(typeof(SN_id_ct_asciiTextWithCRLF))) {
        private enum enumMixinStr_SN_id_ct_asciiTextWithCRLF = `enum SN_id_ct_asciiTextWithCRLF = "id-ct-asciiTextWithCRLF";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_ct_asciiTextWithCRLF); }))) {
            mixin(enumMixinStr_SN_id_ct_asciiTextWithCRLF);
        }
    }




    static if(!is(typeof(NID_id_ct_asciiTextWithCRLF))) {
        private enum enumMixinStr_NID_id_ct_asciiTextWithCRLF = `enum NID_id_ct_asciiTextWithCRLF = 787;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_ct_asciiTextWithCRLF); }))) {
            mixin(enumMixinStr_NID_id_ct_asciiTextWithCRLF);
        }
    }




    static if(!is(typeof(OBJ_id_ct_asciiTextWithCRLF))) {
        private enum enumMixinStr_OBJ_id_ct_asciiTextWithCRLF = `enum OBJ_id_ct_asciiTextWithCRLF = 1L , 2L , 840L , 113549L , 1L , 9L , 16L , 1L , 27L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_ct_asciiTextWithCRLF); }))) {
            mixin(enumMixinStr_OBJ_id_ct_asciiTextWithCRLF);
        }
    }




    static if(!is(typeof(SN_id_ct_xml))) {
        private enum enumMixinStr_SN_id_ct_xml = `enum SN_id_ct_xml = "id-ct-xml";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_ct_xml); }))) {
            mixin(enumMixinStr_SN_id_ct_xml);
        }
    }




    static if(!is(typeof(NID_id_ct_xml))) {
        private enum enumMixinStr_NID_id_ct_xml = `enum NID_id_ct_xml = 1060;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_ct_xml); }))) {
            mixin(enumMixinStr_NID_id_ct_xml);
        }
    }




    static if(!is(typeof(OBJ_id_ct_xml))) {
        private enum enumMixinStr_OBJ_id_ct_xml = `enum OBJ_id_ct_xml = 1L , 2L , 840L , 113549L , 1L , 9L , 16L , 1L , 28L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_ct_xml); }))) {
            mixin(enumMixinStr_OBJ_id_ct_xml);
        }
    }




    static if(!is(typeof(SN_id_smime_aa_receiptRequest))) {
        private enum enumMixinStr_SN_id_smime_aa_receiptRequest = `enum SN_id_smime_aa_receiptRequest = "id-smime-aa-receiptRequest";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_smime_aa_receiptRequest); }))) {
            mixin(enumMixinStr_SN_id_smime_aa_receiptRequest);
        }
    }




    static if(!is(typeof(NID_id_smime_aa_receiptRequest))) {
        private enum enumMixinStr_NID_id_smime_aa_receiptRequest = `enum NID_id_smime_aa_receiptRequest = 212;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_smime_aa_receiptRequest); }))) {
            mixin(enumMixinStr_NID_id_smime_aa_receiptRequest);
        }
    }




    static if(!is(typeof(OBJ_id_smime_aa_receiptRequest))) {
        private enum enumMixinStr_OBJ_id_smime_aa_receiptRequest = `enum OBJ_id_smime_aa_receiptRequest = 1L , 2L , 840L , 113549L , 1L , 9L , 16L , 2L , 1L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_smime_aa_receiptRequest); }))) {
            mixin(enumMixinStr_OBJ_id_smime_aa_receiptRequest);
        }
    }




    static if(!is(typeof(SN_id_smime_aa_securityLabel))) {
        private enum enumMixinStr_SN_id_smime_aa_securityLabel = `enum SN_id_smime_aa_securityLabel = "id-smime-aa-securityLabel";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_smime_aa_securityLabel); }))) {
            mixin(enumMixinStr_SN_id_smime_aa_securityLabel);
        }
    }




    static if(!is(typeof(NID_id_smime_aa_securityLabel))) {
        private enum enumMixinStr_NID_id_smime_aa_securityLabel = `enum NID_id_smime_aa_securityLabel = 213;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_smime_aa_securityLabel); }))) {
            mixin(enumMixinStr_NID_id_smime_aa_securityLabel);
        }
    }




    static if(!is(typeof(OBJ_id_smime_aa_securityLabel))) {
        private enum enumMixinStr_OBJ_id_smime_aa_securityLabel = `enum OBJ_id_smime_aa_securityLabel = 1L , 2L , 840L , 113549L , 1L , 9L , 16L , 2L , 2L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_smime_aa_securityLabel); }))) {
            mixin(enumMixinStr_OBJ_id_smime_aa_securityLabel);
        }
    }




    static if(!is(typeof(SN_id_smime_aa_mlExpandHistory))) {
        private enum enumMixinStr_SN_id_smime_aa_mlExpandHistory = `enum SN_id_smime_aa_mlExpandHistory = "id-smime-aa-mlExpandHistory";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_smime_aa_mlExpandHistory); }))) {
            mixin(enumMixinStr_SN_id_smime_aa_mlExpandHistory);
        }
    }




    static if(!is(typeof(NID_id_smime_aa_mlExpandHistory))) {
        private enum enumMixinStr_NID_id_smime_aa_mlExpandHistory = `enum NID_id_smime_aa_mlExpandHistory = 214;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_smime_aa_mlExpandHistory); }))) {
            mixin(enumMixinStr_NID_id_smime_aa_mlExpandHistory);
        }
    }




    static if(!is(typeof(OBJ_id_smime_aa_mlExpandHistory))) {
        private enum enumMixinStr_OBJ_id_smime_aa_mlExpandHistory = `enum OBJ_id_smime_aa_mlExpandHistory = 1L , 2L , 840L , 113549L , 1L , 9L , 16L , 2L , 3L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_smime_aa_mlExpandHistory); }))) {
            mixin(enumMixinStr_OBJ_id_smime_aa_mlExpandHistory);
        }
    }




    static if(!is(typeof(SN_id_smime_aa_contentHint))) {
        private enum enumMixinStr_SN_id_smime_aa_contentHint = `enum SN_id_smime_aa_contentHint = "id-smime-aa-contentHint";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_smime_aa_contentHint); }))) {
            mixin(enumMixinStr_SN_id_smime_aa_contentHint);
        }
    }




    static if(!is(typeof(NID_id_smime_aa_contentHint))) {
        private enum enumMixinStr_NID_id_smime_aa_contentHint = `enum NID_id_smime_aa_contentHint = 215;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_smime_aa_contentHint); }))) {
            mixin(enumMixinStr_NID_id_smime_aa_contentHint);
        }
    }




    static if(!is(typeof(OBJ_id_smime_aa_contentHint))) {
        private enum enumMixinStr_OBJ_id_smime_aa_contentHint = `enum OBJ_id_smime_aa_contentHint = 1L , 2L , 840L , 113549L , 1L , 9L , 16L , 2L , 4L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_smime_aa_contentHint); }))) {
            mixin(enumMixinStr_OBJ_id_smime_aa_contentHint);
        }
    }




    static if(!is(typeof(SN_id_smime_aa_msgSigDigest))) {
        private enum enumMixinStr_SN_id_smime_aa_msgSigDigest = `enum SN_id_smime_aa_msgSigDigest = "id-smime-aa-msgSigDigest";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_smime_aa_msgSigDigest); }))) {
            mixin(enumMixinStr_SN_id_smime_aa_msgSigDigest);
        }
    }




    static if(!is(typeof(NID_id_smime_aa_msgSigDigest))) {
        private enum enumMixinStr_NID_id_smime_aa_msgSigDigest = `enum NID_id_smime_aa_msgSigDigest = 216;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_smime_aa_msgSigDigest); }))) {
            mixin(enumMixinStr_NID_id_smime_aa_msgSigDigest);
        }
    }




    static if(!is(typeof(OBJ_id_smime_aa_msgSigDigest))) {
        private enum enumMixinStr_OBJ_id_smime_aa_msgSigDigest = `enum OBJ_id_smime_aa_msgSigDigest = 1L , 2L , 840L , 113549L , 1L , 9L , 16L , 2L , 5L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_smime_aa_msgSigDigest); }))) {
            mixin(enumMixinStr_OBJ_id_smime_aa_msgSigDigest);
        }
    }




    static if(!is(typeof(SN_id_smime_aa_encapContentType))) {
        private enum enumMixinStr_SN_id_smime_aa_encapContentType = `enum SN_id_smime_aa_encapContentType = "id-smime-aa-encapContentType";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_smime_aa_encapContentType); }))) {
            mixin(enumMixinStr_SN_id_smime_aa_encapContentType);
        }
    }




    static if(!is(typeof(NID_id_smime_aa_encapContentType))) {
        private enum enumMixinStr_NID_id_smime_aa_encapContentType = `enum NID_id_smime_aa_encapContentType = 217;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_smime_aa_encapContentType); }))) {
            mixin(enumMixinStr_NID_id_smime_aa_encapContentType);
        }
    }




    static if(!is(typeof(OBJ_id_smime_aa_encapContentType))) {
        private enum enumMixinStr_OBJ_id_smime_aa_encapContentType = `enum OBJ_id_smime_aa_encapContentType = 1L , 2L , 840L , 113549L , 1L , 9L , 16L , 2L , 6L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_smime_aa_encapContentType); }))) {
            mixin(enumMixinStr_OBJ_id_smime_aa_encapContentType);
        }
    }




    static if(!is(typeof(SN_id_smime_aa_contentIdentifier))) {
        private enum enumMixinStr_SN_id_smime_aa_contentIdentifier = `enum SN_id_smime_aa_contentIdentifier = "id-smime-aa-contentIdentifier";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_smime_aa_contentIdentifier); }))) {
            mixin(enumMixinStr_SN_id_smime_aa_contentIdentifier);
        }
    }




    static if(!is(typeof(NID_id_smime_aa_contentIdentifier))) {
        private enum enumMixinStr_NID_id_smime_aa_contentIdentifier = `enum NID_id_smime_aa_contentIdentifier = 218;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_smime_aa_contentIdentifier); }))) {
            mixin(enumMixinStr_NID_id_smime_aa_contentIdentifier);
        }
    }




    static if(!is(typeof(OBJ_id_smime_aa_contentIdentifier))) {
        private enum enumMixinStr_OBJ_id_smime_aa_contentIdentifier = `enum OBJ_id_smime_aa_contentIdentifier = 1L , 2L , 840L , 113549L , 1L , 9L , 16L , 2L , 7L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_smime_aa_contentIdentifier); }))) {
            mixin(enumMixinStr_OBJ_id_smime_aa_contentIdentifier);
        }
    }




    static if(!is(typeof(SN_id_smime_aa_macValue))) {
        private enum enumMixinStr_SN_id_smime_aa_macValue = `enum SN_id_smime_aa_macValue = "id-smime-aa-macValue";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_smime_aa_macValue); }))) {
            mixin(enumMixinStr_SN_id_smime_aa_macValue);
        }
    }




    static if(!is(typeof(NID_id_smime_aa_macValue))) {
        private enum enumMixinStr_NID_id_smime_aa_macValue = `enum NID_id_smime_aa_macValue = 219;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_smime_aa_macValue); }))) {
            mixin(enumMixinStr_NID_id_smime_aa_macValue);
        }
    }




    static if(!is(typeof(OBJ_id_smime_aa_macValue))) {
        private enum enumMixinStr_OBJ_id_smime_aa_macValue = `enum OBJ_id_smime_aa_macValue = 1L , 2L , 840L , 113549L , 1L , 9L , 16L , 2L , 8L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_smime_aa_macValue); }))) {
            mixin(enumMixinStr_OBJ_id_smime_aa_macValue);
        }
    }




    static if(!is(typeof(SN_id_smime_aa_equivalentLabels))) {
        private enum enumMixinStr_SN_id_smime_aa_equivalentLabels = `enum SN_id_smime_aa_equivalentLabels = "id-smime-aa-equivalentLabels";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_smime_aa_equivalentLabels); }))) {
            mixin(enumMixinStr_SN_id_smime_aa_equivalentLabels);
        }
    }




    static if(!is(typeof(NID_id_smime_aa_equivalentLabels))) {
        private enum enumMixinStr_NID_id_smime_aa_equivalentLabels = `enum NID_id_smime_aa_equivalentLabels = 220;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_smime_aa_equivalentLabels); }))) {
            mixin(enumMixinStr_NID_id_smime_aa_equivalentLabels);
        }
    }




    static if(!is(typeof(OBJ_id_smime_aa_equivalentLabels))) {
        private enum enumMixinStr_OBJ_id_smime_aa_equivalentLabels = `enum OBJ_id_smime_aa_equivalentLabels = 1L , 2L , 840L , 113549L , 1L , 9L , 16L , 2L , 9L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_smime_aa_equivalentLabels); }))) {
            mixin(enumMixinStr_OBJ_id_smime_aa_equivalentLabels);
        }
    }




    static if(!is(typeof(SN_id_smime_aa_contentReference))) {
        private enum enumMixinStr_SN_id_smime_aa_contentReference = `enum SN_id_smime_aa_contentReference = "id-smime-aa-contentReference";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_smime_aa_contentReference); }))) {
            mixin(enumMixinStr_SN_id_smime_aa_contentReference);
        }
    }




    static if(!is(typeof(NID_id_smime_aa_contentReference))) {
        private enum enumMixinStr_NID_id_smime_aa_contentReference = `enum NID_id_smime_aa_contentReference = 221;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_smime_aa_contentReference); }))) {
            mixin(enumMixinStr_NID_id_smime_aa_contentReference);
        }
    }




    static if(!is(typeof(OBJ_id_smime_aa_contentReference))) {
        private enum enumMixinStr_OBJ_id_smime_aa_contentReference = `enum OBJ_id_smime_aa_contentReference = 1L , 2L , 840L , 113549L , 1L , 9L , 16L , 2L , 10L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_smime_aa_contentReference); }))) {
            mixin(enumMixinStr_OBJ_id_smime_aa_contentReference);
        }
    }




    static if(!is(typeof(SN_id_smime_aa_encrypKeyPref))) {
        private enum enumMixinStr_SN_id_smime_aa_encrypKeyPref = `enum SN_id_smime_aa_encrypKeyPref = "id-smime-aa-encrypKeyPref";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_smime_aa_encrypKeyPref); }))) {
            mixin(enumMixinStr_SN_id_smime_aa_encrypKeyPref);
        }
    }




    static if(!is(typeof(NID_id_smime_aa_encrypKeyPref))) {
        private enum enumMixinStr_NID_id_smime_aa_encrypKeyPref = `enum NID_id_smime_aa_encrypKeyPref = 222;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_smime_aa_encrypKeyPref); }))) {
            mixin(enumMixinStr_NID_id_smime_aa_encrypKeyPref);
        }
    }




    static if(!is(typeof(OBJ_id_smime_aa_encrypKeyPref))) {
        private enum enumMixinStr_OBJ_id_smime_aa_encrypKeyPref = `enum OBJ_id_smime_aa_encrypKeyPref = 1L , 2L , 840L , 113549L , 1L , 9L , 16L , 2L , 11L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_smime_aa_encrypKeyPref); }))) {
            mixin(enumMixinStr_OBJ_id_smime_aa_encrypKeyPref);
        }
    }




    static if(!is(typeof(SN_id_smime_aa_signingCertificate))) {
        private enum enumMixinStr_SN_id_smime_aa_signingCertificate = `enum SN_id_smime_aa_signingCertificate = "id-smime-aa-signingCertificate";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_smime_aa_signingCertificate); }))) {
            mixin(enumMixinStr_SN_id_smime_aa_signingCertificate);
        }
    }




    static if(!is(typeof(NID_id_smime_aa_signingCertificate))) {
        private enum enumMixinStr_NID_id_smime_aa_signingCertificate = `enum NID_id_smime_aa_signingCertificate = 223;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_smime_aa_signingCertificate); }))) {
            mixin(enumMixinStr_NID_id_smime_aa_signingCertificate);
        }
    }




    static if(!is(typeof(OBJ_id_smime_aa_signingCertificate))) {
        private enum enumMixinStr_OBJ_id_smime_aa_signingCertificate = `enum OBJ_id_smime_aa_signingCertificate = 1L , 2L , 840L , 113549L , 1L , 9L , 16L , 2L , 12L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_smime_aa_signingCertificate); }))) {
            mixin(enumMixinStr_OBJ_id_smime_aa_signingCertificate);
        }
    }




    static if(!is(typeof(SN_id_smime_aa_smimeEncryptCerts))) {
        private enum enumMixinStr_SN_id_smime_aa_smimeEncryptCerts = `enum SN_id_smime_aa_smimeEncryptCerts = "id-smime-aa-smimeEncryptCerts";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_smime_aa_smimeEncryptCerts); }))) {
            mixin(enumMixinStr_SN_id_smime_aa_smimeEncryptCerts);
        }
    }




    static if(!is(typeof(NID_id_smime_aa_smimeEncryptCerts))) {
        private enum enumMixinStr_NID_id_smime_aa_smimeEncryptCerts = `enum NID_id_smime_aa_smimeEncryptCerts = 224;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_smime_aa_smimeEncryptCerts); }))) {
            mixin(enumMixinStr_NID_id_smime_aa_smimeEncryptCerts);
        }
    }




    static if(!is(typeof(OBJ_id_smime_aa_smimeEncryptCerts))) {
        private enum enumMixinStr_OBJ_id_smime_aa_smimeEncryptCerts = `enum OBJ_id_smime_aa_smimeEncryptCerts = 1L , 2L , 840L , 113549L , 1L , 9L , 16L , 2L , 13L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_smime_aa_smimeEncryptCerts); }))) {
            mixin(enumMixinStr_OBJ_id_smime_aa_smimeEncryptCerts);
        }
    }




    static if(!is(typeof(SN_id_smime_aa_timeStampToken))) {
        private enum enumMixinStr_SN_id_smime_aa_timeStampToken = `enum SN_id_smime_aa_timeStampToken = "id-smime-aa-timeStampToken";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_smime_aa_timeStampToken); }))) {
            mixin(enumMixinStr_SN_id_smime_aa_timeStampToken);
        }
    }




    static if(!is(typeof(NID_id_smime_aa_timeStampToken))) {
        private enum enumMixinStr_NID_id_smime_aa_timeStampToken = `enum NID_id_smime_aa_timeStampToken = 225;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_smime_aa_timeStampToken); }))) {
            mixin(enumMixinStr_NID_id_smime_aa_timeStampToken);
        }
    }




    static if(!is(typeof(OBJ_id_smime_aa_timeStampToken))) {
        private enum enumMixinStr_OBJ_id_smime_aa_timeStampToken = `enum OBJ_id_smime_aa_timeStampToken = 1L , 2L , 840L , 113549L , 1L , 9L , 16L , 2L , 14L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_smime_aa_timeStampToken); }))) {
            mixin(enumMixinStr_OBJ_id_smime_aa_timeStampToken);
        }
    }




    static if(!is(typeof(SN_id_smime_aa_ets_sigPolicyId))) {
        private enum enumMixinStr_SN_id_smime_aa_ets_sigPolicyId = `enum SN_id_smime_aa_ets_sigPolicyId = "id-smime-aa-ets-sigPolicyId";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_smime_aa_ets_sigPolicyId); }))) {
            mixin(enumMixinStr_SN_id_smime_aa_ets_sigPolicyId);
        }
    }




    static if(!is(typeof(NID_id_smime_aa_ets_sigPolicyId))) {
        private enum enumMixinStr_NID_id_smime_aa_ets_sigPolicyId = `enum NID_id_smime_aa_ets_sigPolicyId = 226;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_smime_aa_ets_sigPolicyId); }))) {
            mixin(enumMixinStr_NID_id_smime_aa_ets_sigPolicyId);
        }
    }




    static if(!is(typeof(OBJ_id_smime_aa_ets_sigPolicyId))) {
        private enum enumMixinStr_OBJ_id_smime_aa_ets_sigPolicyId = `enum OBJ_id_smime_aa_ets_sigPolicyId = 1L , 2L , 840L , 113549L , 1L , 9L , 16L , 2L , 15L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_smime_aa_ets_sigPolicyId); }))) {
            mixin(enumMixinStr_OBJ_id_smime_aa_ets_sigPolicyId);
        }
    }




    static if(!is(typeof(SN_id_smime_aa_ets_commitmentType))) {
        private enum enumMixinStr_SN_id_smime_aa_ets_commitmentType = `enum SN_id_smime_aa_ets_commitmentType = "id-smime-aa-ets-commitmentType";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_smime_aa_ets_commitmentType); }))) {
            mixin(enumMixinStr_SN_id_smime_aa_ets_commitmentType);
        }
    }




    static if(!is(typeof(NID_id_smime_aa_ets_commitmentType))) {
        private enum enumMixinStr_NID_id_smime_aa_ets_commitmentType = `enum NID_id_smime_aa_ets_commitmentType = 227;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_smime_aa_ets_commitmentType); }))) {
            mixin(enumMixinStr_NID_id_smime_aa_ets_commitmentType);
        }
    }




    static if(!is(typeof(OBJ_id_smime_aa_ets_commitmentType))) {
        private enum enumMixinStr_OBJ_id_smime_aa_ets_commitmentType = `enum OBJ_id_smime_aa_ets_commitmentType = 1L , 2L , 840L , 113549L , 1L , 9L , 16L , 2L , 16L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_smime_aa_ets_commitmentType); }))) {
            mixin(enumMixinStr_OBJ_id_smime_aa_ets_commitmentType);
        }
    }




    static if(!is(typeof(SN_id_smime_aa_ets_signerLocation))) {
        private enum enumMixinStr_SN_id_smime_aa_ets_signerLocation = `enum SN_id_smime_aa_ets_signerLocation = "id-smime-aa-ets-signerLocation";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_smime_aa_ets_signerLocation); }))) {
            mixin(enumMixinStr_SN_id_smime_aa_ets_signerLocation);
        }
    }




    static if(!is(typeof(NID_id_smime_aa_ets_signerLocation))) {
        private enum enumMixinStr_NID_id_smime_aa_ets_signerLocation = `enum NID_id_smime_aa_ets_signerLocation = 228;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_smime_aa_ets_signerLocation); }))) {
            mixin(enumMixinStr_NID_id_smime_aa_ets_signerLocation);
        }
    }




    static if(!is(typeof(OBJ_id_smime_aa_ets_signerLocation))) {
        private enum enumMixinStr_OBJ_id_smime_aa_ets_signerLocation = `enum OBJ_id_smime_aa_ets_signerLocation = 1L , 2L , 840L , 113549L , 1L , 9L , 16L , 2L , 17L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_smime_aa_ets_signerLocation); }))) {
            mixin(enumMixinStr_OBJ_id_smime_aa_ets_signerLocation);
        }
    }




    static if(!is(typeof(SN_id_smime_aa_ets_signerAttr))) {
        private enum enumMixinStr_SN_id_smime_aa_ets_signerAttr = `enum SN_id_smime_aa_ets_signerAttr = "id-smime-aa-ets-signerAttr";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_smime_aa_ets_signerAttr); }))) {
            mixin(enumMixinStr_SN_id_smime_aa_ets_signerAttr);
        }
    }




    static if(!is(typeof(NID_id_smime_aa_ets_signerAttr))) {
        private enum enumMixinStr_NID_id_smime_aa_ets_signerAttr = `enum NID_id_smime_aa_ets_signerAttr = 229;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_smime_aa_ets_signerAttr); }))) {
            mixin(enumMixinStr_NID_id_smime_aa_ets_signerAttr);
        }
    }




    static if(!is(typeof(OBJ_id_smime_aa_ets_signerAttr))) {
        private enum enumMixinStr_OBJ_id_smime_aa_ets_signerAttr = `enum OBJ_id_smime_aa_ets_signerAttr = 1L , 2L , 840L , 113549L , 1L , 9L , 16L , 2L , 18L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_smime_aa_ets_signerAttr); }))) {
            mixin(enumMixinStr_OBJ_id_smime_aa_ets_signerAttr);
        }
    }




    static if(!is(typeof(SN_id_smime_aa_ets_otherSigCert))) {
        private enum enumMixinStr_SN_id_smime_aa_ets_otherSigCert = `enum SN_id_smime_aa_ets_otherSigCert = "id-smime-aa-ets-otherSigCert";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_smime_aa_ets_otherSigCert); }))) {
            mixin(enumMixinStr_SN_id_smime_aa_ets_otherSigCert);
        }
    }




    static if(!is(typeof(NID_id_smime_aa_ets_otherSigCert))) {
        private enum enumMixinStr_NID_id_smime_aa_ets_otherSigCert = `enum NID_id_smime_aa_ets_otherSigCert = 230;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_smime_aa_ets_otherSigCert); }))) {
            mixin(enumMixinStr_NID_id_smime_aa_ets_otherSigCert);
        }
    }




    static if(!is(typeof(OBJ_id_smime_aa_ets_otherSigCert))) {
        private enum enumMixinStr_OBJ_id_smime_aa_ets_otherSigCert = `enum OBJ_id_smime_aa_ets_otherSigCert = 1L , 2L , 840L , 113549L , 1L , 9L , 16L , 2L , 19L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_smime_aa_ets_otherSigCert); }))) {
            mixin(enumMixinStr_OBJ_id_smime_aa_ets_otherSigCert);
        }
    }




    static if(!is(typeof(SN_id_smime_aa_ets_contentTimestamp))) {
        private enum enumMixinStr_SN_id_smime_aa_ets_contentTimestamp = `enum SN_id_smime_aa_ets_contentTimestamp = "id-smime-aa-ets-contentTimestamp";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_smime_aa_ets_contentTimestamp); }))) {
            mixin(enumMixinStr_SN_id_smime_aa_ets_contentTimestamp);
        }
    }




    static if(!is(typeof(NID_id_smime_aa_ets_contentTimestamp))) {
        private enum enumMixinStr_NID_id_smime_aa_ets_contentTimestamp = `enum NID_id_smime_aa_ets_contentTimestamp = 231;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_smime_aa_ets_contentTimestamp); }))) {
            mixin(enumMixinStr_NID_id_smime_aa_ets_contentTimestamp);
        }
    }




    static if(!is(typeof(OBJ_id_smime_aa_ets_contentTimestamp))) {
        private enum enumMixinStr_OBJ_id_smime_aa_ets_contentTimestamp = `enum OBJ_id_smime_aa_ets_contentTimestamp = 1L , 2L , 840L , 113549L , 1L , 9L , 16L , 2L , 20L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_smime_aa_ets_contentTimestamp); }))) {
            mixin(enumMixinStr_OBJ_id_smime_aa_ets_contentTimestamp);
        }
    }




    static if(!is(typeof(SN_id_smime_aa_ets_CertificateRefs))) {
        private enum enumMixinStr_SN_id_smime_aa_ets_CertificateRefs = `enum SN_id_smime_aa_ets_CertificateRefs = "id-smime-aa-ets-CertificateRefs";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_smime_aa_ets_CertificateRefs); }))) {
            mixin(enumMixinStr_SN_id_smime_aa_ets_CertificateRefs);
        }
    }




    static if(!is(typeof(NID_id_smime_aa_ets_CertificateRefs))) {
        private enum enumMixinStr_NID_id_smime_aa_ets_CertificateRefs = `enum NID_id_smime_aa_ets_CertificateRefs = 232;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_smime_aa_ets_CertificateRefs); }))) {
            mixin(enumMixinStr_NID_id_smime_aa_ets_CertificateRefs);
        }
    }




    static if(!is(typeof(OBJ_id_smime_aa_ets_CertificateRefs))) {
        private enum enumMixinStr_OBJ_id_smime_aa_ets_CertificateRefs = `enum OBJ_id_smime_aa_ets_CertificateRefs = 1L , 2L , 840L , 113549L , 1L , 9L , 16L , 2L , 21L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_smime_aa_ets_CertificateRefs); }))) {
            mixin(enumMixinStr_OBJ_id_smime_aa_ets_CertificateRefs);
        }
    }




    static if(!is(typeof(SN_id_smime_aa_ets_RevocationRefs))) {
        private enum enumMixinStr_SN_id_smime_aa_ets_RevocationRefs = `enum SN_id_smime_aa_ets_RevocationRefs = "id-smime-aa-ets-RevocationRefs";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_smime_aa_ets_RevocationRefs); }))) {
            mixin(enumMixinStr_SN_id_smime_aa_ets_RevocationRefs);
        }
    }




    static if(!is(typeof(NID_id_smime_aa_ets_RevocationRefs))) {
        private enum enumMixinStr_NID_id_smime_aa_ets_RevocationRefs = `enum NID_id_smime_aa_ets_RevocationRefs = 233;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_smime_aa_ets_RevocationRefs); }))) {
            mixin(enumMixinStr_NID_id_smime_aa_ets_RevocationRefs);
        }
    }




    static if(!is(typeof(OBJ_id_smime_aa_ets_RevocationRefs))) {
        private enum enumMixinStr_OBJ_id_smime_aa_ets_RevocationRefs = `enum OBJ_id_smime_aa_ets_RevocationRefs = 1L , 2L , 840L , 113549L , 1L , 9L , 16L , 2L , 22L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_smime_aa_ets_RevocationRefs); }))) {
            mixin(enumMixinStr_OBJ_id_smime_aa_ets_RevocationRefs);
        }
    }




    static if(!is(typeof(SN_id_smime_aa_ets_certValues))) {
        private enum enumMixinStr_SN_id_smime_aa_ets_certValues = `enum SN_id_smime_aa_ets_certValues = "id-smime-aa-ets-certValues";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_smime_aa_ets_certValues); }))) {
            mixin(enumMixinStr_SN_id_smime_aa_ets_certValues);
        }
    }




    static if(!is(typeof(NID_id_smime_aa_ets_certValues))) {
        private enum enumMixinStr_NID_id_smime_aa_ets_certValues = `enum NID_id_smime_aa_ets_certValues = 234;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_smime_aa_ets_certValues); }))) {
            mixin(enumMixinStr_NID_id_smime_aa_ets_certValues);
        }
    }




    static if(!is(typeof(OBJ_id_smime_aa_ets_certValues))) {
        private enum enumMixinStr_OBJ_id_smime_aa_ets_certValues = `enum OBJ_id_smime_aa_ets_certValues = 1L , 2L , 840L , 113549L , 1L , 9L , 16L , 2L , 23L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_smime_aa_ets_certValues); }))) {
            mixin(enumMixinStr_OBJ_id_smime_aa_ets_certValues);
        }
    }




    static if(!is(typeof(SN_id_smime_aa_ets_revocationValues))) {
        private enum enumMixinStr_SN_id_smime_aa_ets_revocationValues = `enum SN_id_smime_aa_ets_revocationValues = "id-smime-aa-ets-revocationValues";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_smime_aa_ets_revocationValues); }))) {
            mixin(enumMixinStr_SN_id_smime_aa_ets_revocationValues);
        }
    }




    static if(!is(typeof(NID_id_smime_aa_ets_revocationValues))) {
        private enum enumMixinStr_NID_id_smime_aa_ets_revocationValues = `enum NID_id_smime_aa_ets_revocationValues = 235;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_smime_aa_ets_revocationValues); }))) {
            mixin(enumMixinStr_NID_id_smime_aa_ets_revocationValues);
        }
    }




    static if(!is(typeof(OBJ_id_smime_aa_ets_revocationValues))) {
        private enum enumMixinStr_OBJ_id_smime_aa_ets_revocationValues = `enum OBJ_id_smime_aa_ets_revocationValues = 1L , 2L , 840L , 113549L , 1L , 9L , 16L , 2L , 24L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_smime_aa_ets_revocationValues); }))) {
            mixin(enumMixinStr_OBJ_id_smime_aa_ets_revocationValues);
        }
    }




    static if(!is(typeof(SN_id_smime_aa_ets_escTimeStamp))) {
        private enum enumMixinStr_SN_id_smime_aa_ets_escTimeStamp = `enum SN_id_smime_aa_ets_escTimeStamp = "id-smime-aa-ets-escTimeStamp";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_smime_aa_ets_escTimeStamp); }))) {
            mixin(enumMixinStr_SN_id_smime_aa_ets_escTimeStamp);
        }
    }




    static if(!is(typeof(NID_id_smime_aa_ets_escTimeStamp))) {
        private enum enumMixinStr_NID_id_smime_aa_ets_escTimeStamp = `enum NID_id_smime_aa_ets_escTimeStamp = 236;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_smime_aa_ets_escTimeStamp); }))) {
            mixin(enumMixinStr_NID_id_smime_aa_ets_escTimeStamp);
        }
    }




    static if(!is(typeof(OBJ_id_smime_aa_ets_escTimeStamp))) {
        private enum enumMixinStr_OBJ_id_smime_aa_ets_escTimeStamp = `enum OBJ_id_smime_aa_ets_escTimeStamp = 1L , 2L , 840L , 113549L , 1L , 9L , 16L , 2L , 25L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_smime_aa_ets_escTimeStamp); }))) {
            mixin(enumMixinStr_OBJ_id_smime_aa_ets_escTimeStamp);
        }
    }




    static if(!is(typeof(SN_id_smime_aa_ets_certCRLTimestamp))) {
        private enum enumMixinStr_SN_id_smime_aa_ets_certCRLTimestamp = `enum SN_id_smime_aa_ets_certCRLTimestamp = "id-smime-aa-ets-certCRLTimestamp";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_smime_aa_ets_certCRLTimestamp); }))) {
            mixin(enumMixinStr_SN_id_smime_aa_ets_certCRLTimestamp);
        }
    }




    static if(!is(typeof(NID_id_smime_aa_ets_certCRLTimestamp))) {
        private enum enumMixinStr_NID_id_smime_aa_ets_certCRLTimestamp = `enum NID_id_smime_aa_ets_certCRLTimestamp = 237;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_smime_aa_ets_certCRLTimestamp); }))) {
            mixin(enumMixinStr_NID_id_smime_aa_ets_certCRLTimestamp);
        }
    }




    static if(!is(typeof(OBJ_id_smime_aa_ets_certCRLTimestamp))) {
        private enum enumMixinStr_OBJ_id_smime_aa_ets_certCRLTimestamp = `enum OBJ_id_smime_aa_ets_certCRLTimestamp = 1L , 2L , 840L , 113549L , 1L , 9L , 16L , 2L , 26L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_smime_aa_ets_certCRLTimestamp); }))) {
            mixin(enumMixinStr_OBJ_id_smime_aa_ets_certCRLTimestamp);
        }
    }




    static if(!is(typeof(SN_id_smime_aa_ets_archiveTimeStamp))) {
        private enum enumMixinStr_SN_id_smime_aa_ets_archiveTimeStamp = `enum SN_id_smime_aa_ets_archiveTimeStamp = "id-smime-aa-ets-archiveTimeStamp";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_smime_aa_ets_archiveTimeStamp); }))) {
            mixin(enumMixinStr_SN_id_smime_aa_ets_archiveTimeStamp);
        }
    }




    static if(!is(typeof(NID_id_smime_aa_ets_archiveTimeStamp))) {
        private enum enumMixinStr_NID_id_smime_aa_ets_archiveTimeStamp = `enum NID_id_smime_aa_ets_archiveTimeStamp = 238;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_smime_aa_ets_archiveTimeStamp); }))) {
            mixin(enumMixinStr_NID_id_smime_aa_ets_archiveTimeStamp);
        }
    }




    static if(!is(typeof(OBJ_id_smime_aa_ets_archiveTimeStamp))) {
        private enum enumMixinStr_OBJ_id_smime_aa_ets_archiveTimeStamp = `enum OBJ_id_smime_aa_ets_archiveTimeStamp = 1L , 2L , 840L , 113549L , 1L , 9L , 16L , 2L , 27L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_smime_aa_ets_archiveTimeStamp); }))) {
            mixin(enumMixinStr_OBJ_id_smime_aa_ets_archiveTimeStamp);
        }
    }




    static if(!is(typeof(SN_id_smime_aa_signatureType))) {
        private enum enumMixinStr_SN_id_smime_aa_signatureType = `enum SN_id_smime_aa_signatureType = "id-smime-aa-signatureType";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_smime_aa_signatureType); }))) {
            mixin(enumMixinStr_SN_id_smime_aa_signatureType);
        }
    }




    static if(!is(typeof(NID_id_smime_aa_signatureType))) {
        private enum enumMixinStr_NID_id_smime_aa_signatureType = `enum NID_id_smime_aa_signatureType = 239;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_smime_aa_signatureType); }))) {
            mixin(enumMixinStr_NID_id_smime_aa_signatureType);
        }
    }




    static if(!is(typeof(OBJ_id_smime_aa_signatureType))) {
        private enum enumMixinStr_OBJ_id_smime_aa_signatureType = `enum OBJ_id_smime_aa_signatureType = 1L , 2L , 840L , 113549L , 1L , 9L , 16L , 2L , 28L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_smime_aa_signatureType); }))) {
            mixin(enumMixinStr_OBJ_id_smime_aa_signatureType);
        }
    }




    static if(!is(typeof(SN_id_smime_aa_dvcs_dvc))) {
        private enum enumMixinStr_SN_id_smime_aa_dvcs_dvc = `enum SN_id_smime_aa_dvcs_dvc = "id-smime-aa-dvcs-dvc";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_smime_aa_dvcs_dvc); }))) {
            mixin(enumMixinStr_SN_id_smime_aa_dvcs_dvc);
        }
    }




    static if(!is(typeof(NID_id_smime_aa_dvcs_dvc))) {
        private enum enumMixinStr_NID_id_smime_aa_dvcs_dvc = `enum NID_id_smime_aa_dvcs_dvc = 240;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_smime_aa_dvcs_dvc); }))) {
            mixin(enumMixinStr_NID_id_smime_aa_dvcs_dvc);
        }
    }




    static if(!is(typeof(OBJ_id_smime_aa_dvcs_dvc))) {
        private enum enumMixinStr_OBJ_id_smime_aa_dvcs_dvc = `enum OBJ_id_smime_aa_dvcs_dvc = 1L , 2L , 840L , 113549L , 1L , 9L , 16L , 2L , 29L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_smime_aa_dvcs_dvc); }))) {
            mixin(enumMixinStr_OBJ_id_smime_aa_dvcs_dvc);
        }
    }




    static if(!is(typeof(SN_id_smime_aa_signingCertificateV2))) {
        private enum enumMixinStr_SN_id_smime_aa_signingCertificateV2 = `enum SN_id_smime_aa_signingCertificateV2 = "id-smime-aa-signingCertificateV2";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_smime_aa_signingCertificateV2); }))) {
            mixin(enumMixinStr_SN_id_smime_aa_signingCertificateV2);
        }
    }




    static if(!is(typeof(NID_id_smime_aa_signingCertificateV2))) {
        private enum enumMixinStr_NID_id_smime_aa_signingCertificateV2 = `enum NID_id_smime_aa_signingCertificateV2 = 1086;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_smime_aa_signingCertificateV2); }))) {
            mixin(enumMixinStr_NID_id_smime_aa_signingCertificateV2);
        }
    }




    static if(!is(typeof(OBJ_id_smime_aa_signingCertificateV2))) {
        private enum enumMixinStr_OBJ_id_smime_aa_signingCertificateV2 = `enum OBJ_id_smime_aa_signingCertificateV2 = 1L , 2L , 840L , 113549L , 1L , 9L , 16L , 2L , 47L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_smime_aa_signingCertificateV2); }))) {
            mixin(enumMixinStr_OBJ_id_smime_aa_signingCertificateV2);
        }
    }




    static if(!is(typeof(SN_id_smime_alg_ESDHwith3DES))) {
        private enum enumMixinStr_SN_id_smime_alg_ESDHwith3DES = `enum SN_id_smime_alg_ESDHwith3DES = "id-smime-alg-ESDHwith3DES";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_smime_alg_ESDHwith3DES); }))) {
            mixin(enumMixinStr_SN_id_smime_alg_ESDHwith3DES);
        }
    }




    static if(!is(typeof(NID_id_smime_alg_ESDHwith3DES))) {
        private enum enumMixinStr_NID_id_smime_alg_ESDHwith3DES = `enum NID_id_smime_alg_ESDHwith3DES = 241;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_smime_alg_ESDHwith3DES); }))) {
            mixin(enumMixinStr_NID_id_smime_alg_ESDHwith3DES);
        }
    }




    static if(!is(typeof(OBJ_id_smime_alg_ESDHwith3DES))) {
        private enum enumMixinStr_OBJ_id_smime_alg_ESDHwith3DES = `enum OBJ_id_smime_alg_ESDHwith3DES = 1L , 2L , 840L , 113549L , 1L , 9L , 16L , 3L , 1L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_smime_alg_ESDHwith3DES); }))) {
            mixin(enumMixinStr_OBJ_id_smime_alg_ESDHwith3DES);
        }
    }




    static if(!is(typeof(SN_id_smime_alg_ESDHwithRC2))) {
        private enum enumMixinStr_SN_id_smime_alg_ESDHwithRC2 = `enum SN_id_smime_alg_ESDHwithRC2 = "id-smime-alg-ESDHwithRC2";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_smime_alg_ESDHwithRC2); }))) {
            mixin(enumMixinStr_SN_id_smime_alg_ESDHwithRC2);
        }
    }




    static if(!is(typeof(NID_id_smime_alg_ESDHwithRC2))) {
        private enum enumMixinStr_NID_id_smime_alg_ESDHwithRC2 = `enum NID_id_smime_alg_ESDHwithRC2 = 242;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_smime_alg_ESDHwithRC2); }))) {
            mixin(enumMixinStr_NID_id_smime_alg_ESDHwithRC2);
        }
    }




    static if(!is(typeof(OBJ_id_smime_alg_ESDHwithRC2))) {
        private enum enumMixinStr_OBJ_id_smime_alg_ESDHwithRC2 = `enum OBJ_id_smime_alg_ESDHwithRC2 = 1L , 2L , 840L , 113549L , 1L , 9L , 16L , 3L , 2L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_smime_alg_ESDHwithRC2); }))) {
            mixin(enumMixinStr_OBJ_id_smime_alg_ESDHwithRC2);
        }
    }




    static if(!is(typeof(SN_id_smime_alg_3DESwrap))) {
        private enum enumMixinStr_SN_id_smime_alg_3DESwrap = `enum SN_id_smime_alg_3DESwrap = "id-smime-alg-3DESwrap";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_smime_alg_3DESwrap); }))) {
            mixin(enumMixinStr_SN_id_smime_alg_3DESwrap);
        }
    }




    static if(!is(typeof(NID_id_smime_alg_3DESwrap))) {
        private enum enumMixinStr_NID_id_smime_alg_3DESwrap = `enum NID_id_smime_alg_3DESwrap = 243;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_smime_alg_3DESwrap); }))) {
            mixin(enumMixinStr_NID_id_smime_alg_3DESwrap);
        }
    }




    static if(!is(typeof(OBJ_id_smime_alg_3DESwrap))) {
        private enum enumMixinStr_OBJ_id_smime_alg_3DESwrap = `enum OBJ_id_smime_alg_3DESwrap = 1L , 2L , 840L , 113549L , 1L , 9L , 16L , 3L , 3L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_smime_alg_3DESwrap); }))) {
            mixin(enumMixinStr_OBJ_id_smime_alg_3DESwrap);
        }
    }




    static if(!is(typeof(SN_id_smime_alg_RC2wrap))) {
        private enum enumMixinStr_SN_id_smime_alg_RC2wrap = `enum SN_id_smime_alg_RC2wrap = "id-smime-alg-RC2wrap";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_smime_alg_RC2wrap); }))) {
            mixin(enumMixinStr_SN_id_smime_alg_RC2wrap);
        }
    }




    static if(!is(typeof(NID_id_smime_alg_RC2wrap))) {
        private enum enumMixinStr_NID_id_smime_alg_RC2wrap = `enum NID_id_smime_alg_RC2wrap = 244;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_smime_alg_RC2wrap); }))) {
            mixin(enumMixinStr_NID_id_smime_alg_RC2wrap);
        }
    }




    static if(!is(typeof(OBJ_id_smime_alg_RC2wrap))) {
        private enum enumMixinStr_OBJ_id_smime_alg_RC2wrap = `enum OBJ_id_smime_alg_RC2wrap = 1L , 2L , 840L , 113549L , 1L , 9L , 16L , 3L , 4L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_smime_alg_RC2wrap); }))) {
            mixin(enumMixinStr_OBJ_id_smime_alg_RC2wrap);
        }
    }




    static if(!is(typeof(SN_id_smime_alg_ESDH))) {
        private enum enumMixinStr_SN_id_smime_alg_ESDH = `enum SN_id_smime_alg_ESDH = "id-smime-alg-ESDH";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_smime_alg_ESDH); }))) {
            mixin(enumMixinStr_SN_id_smime_alg_ESDH);
        }
    }




    static if(!is(typeof(NID_id_smime_alg_ESDH))) {
        private enum enumMixinStr_NID_id_smime_alg_ESDH = `enum NID_id_smime_alg_ESDH = 245;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_smime_alg_ESDH); }))) {
            mixin(enumMixinStr_NID_id_smime_alg_ESDH);
        }
    }




    static if(!is(typeof(OBJ_id_smime_alg_ESDH))) {
        private enum enumMixinStr_OBJ_id_smime_alg_ESDH = `enum OBJ_id_smime_alg_ESDH = 1L , 2L , 840L , 113549L , 1L , 9L , 16L , 3L , 5L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_smime_alg_ESDH); }))) {
            mixin(enumMixinStr_OBJ_id_smime_alg_ESDH);
        }
    }




    static if(!is(typeof(SN_id_smime_alg_CMS3DESwrap))) {
        private enum enumMixinStr_SN_id_smime_alg_CMS3DESwrap = `enum SN_id_smime_alg_CMS3DESwrap = "id-smime-alg-CMS3DESwrap";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_smime_alg_CMS3DESwrap); }))) {
            mixin(enumMixinStr_SN_id_smime_alg_CMS3DESwrap);
        }
    }




    static if(!is(typeof(NID_id_smime_alg_CMS3DESwrap))) {
        private enum enumMixinStr_NID_id_smime_alg_CMS3DESwrap = `enum NID_id_smime_alg_CMS3DESwrap = 246;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_smime_alg_CMS3DESwrap); }))) {
            mixin(enumMixinStr_NID_id_smime_alg_CMS3DESwrap);
        }
    }




    static if(!is(typeof(OBJ_id_smime_alg_CMS3DESwrap))) {
        private enum enumMixinStr_OBJ_id_smime_alg_CMS3DESwrap = `enum OBJ_id_smime_alg_CMS3DESwrap = 1L , 2L , 840L , 113549L , 1L , 9L , 16L , 3L , 6L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_smime_alg_CMS3DESwrap); }))) {
            mixin(enumMixinStr_OBJ_id_smime_alg_CMS3DESwrap);
        }
    }




    static if(!is(typeof(SN_id_smime_alg_CMSRC2wrap))) {
        private enum enumMixinStr_SN_id_smime_alg_CMSRC2wrap = `enum SN_id_smime_alg_CMSRC2wrap = "id-smime-alg-CMSRC2wrap";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_smime_alg_CMSRC2wrap); }))) {
            mixin(enumMixinStr_SN_id_smime_alg_CMSRC2wrap);
        }
    }




    static if(!is(typeof(NID_id_smime_alg_CMSRC2wrap))) {
        private enum enumMixinStr_NID_id_smime_alg_CMSRC2wrap = `enum NID_id_smime_alg_CMSRC2wrap = 247;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_smime_alg_CMSRC2wrap); }))) {
            mixin(enumMixinStr_NID_id_smime_alg_CMSRC2wrap);
        }
    }




    static if(!is(typeof(OBJ_id_smime_alg_CMSRC2wrap))) {
        private enum enumMixinStr_OBJ_id_smime_alg_CMSRC2wrap = `enum OBJ_id_smime_alg_CMSRC2wrap = 1L , 2L , 840L , 113549L , 1L , 9L , 16L , 3L , 7L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_smime_alg_CMSRC2wrap); }))) {
            mixin(enumMixinStr_OBJ_id_smime_alg_CMSRC2wrap);
        }
    }




    static if(!is(typeof(SN_id_alg_PWRI_KEK))) {
        private enum enumMixinStr_SN_id_alg_PWRI_KEK = `enum SN_id_alg_PWRI_KEK = "id-alg-PWRI-KEK";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_alg_PWRI_KEK); }))) {
            mixin(enumMixinStr_SN_id_alg_PWRI_KEK);
        }
    }




    static if(!is(typeof(NID_id_alg_PWRI_KEK))) {
        private enum enumMixinStr_NID_id_alg_PWRI_KEK = `enum NID_id_alg_PWRI_KEK = 893;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_alg_PWRI_KEK); }))) {
            mixin(enumMixinStr_NID_id_alg_PWRI_KEK);
        }
    }




    static if(!is(typeof(OBJ_id_alg_PWRI_KEK))) {
        private enum enumMixinStr_OBJ_id_alg_PWRI_KEK = `enum OBJ_id_alg_PWRI_KEK = 1L , 2L , 840L , 113549L , 1L , 9L , 16L , 3L , 9L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_alg_PWRI_KEK); }))) {
            mixin(enumMixinStr_OBJ_id_alg_PWRI_KEK);
        }
    }




    static if(!is(typeof(SN_id_smime_cd_ldap))) {
        private enum enumMixinStr_SN_id_smime_cd_ldap = `enum SN_id_smime_cd_ldap = "id-smime-cd-ldap";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_smime_cd_ldap); }))) {
            mixin(enumMixinStr_SN_id_smime_cd_ldap);
        }
    }




    static if(!is(typeof(NID_id_smime_cd_ldap))) {
        private enum enumMixinStr_NID_id_smime_cd_ldap = `enum NID_id_smime_cd_ldap = 248;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_smime_cd_ldap); }))) {
            mixin(enumMixinStr_NID_id_smime_cd_ldap);
        }
    }




    static if(!is(typeof(OBJ_id_smime_cd_ldap))) {
        private enum enumMixinStr_OBJ_id_smime_cd_ldap = `enum OBJ_id_smime_cd_ldap = 1L , 2L , 840L , 113549L , 1L , 9L , 16L , 4L , 1L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_smime_cd_ldap); }))) {
            mixin(enumMixinStr_OBJ_id_smime_cd_ldap);
        }
    }




    static if(!is(typeof(SN_id_smime_spq_ets_sqt_uri))) {
        private enum enumMixinStr_SN_id_smime_spq_ets_sqt_uri = `enum SN_id_smime_spq_ets_sqt_uri = "id-smime-spq-ets-sqt-uri";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_smime_spq_ets_sqt_uri); }))) {
            mixin(enumMixinStr_SN_id_smime_spq_ets_sqt_uri);
        }
    }




    static if(!is(typeof(NID_id_smime_spq_ets_sqt_uri))) {
        private enum enumMixinStr_NID_id_smime_spq_ets_sqt_uri = `enum NID_id_smime_spq_ets_sqt_uri = 249;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_smime_spq_ets_sqt_uri); }))) {
            mixin(enumMixinStr_NID_id_smime_spq_ets_sqt_uri);
        }
    }




    static if(!is(typeof(OBJ_id_smime_spq_ets_sqt_uri))) {
        private enum enumMixinStr_OBJ_id_smime_spq_ets_sqt_uri = `enum OBJ_id_smime_spq_ets_sqt_uri = 1L , 2L , 840L , 113549L , 1L , 9L , 16L , 5L , 1L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_smime_spq_ets_sqt_uri); }))) {
            mixin(enumMixinStr_OBJ_id_smime_spq_ets_sqt_uri);
        }
    }




    static if(!is(typeof(SN_id_smime_spq_ets_sqt_unotice))) {
        private enum enumMixinStr_SN_id_smime_spq_ets_sqt_unotice = `enum SN_id_smime_spq_ets_sqt_unotice = "id-smime-spq-ets-sqt-unotice";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_smime_spq_ets_sqt_unotice); }))) {
            mixin(enumMixinStr_SN_id_smime_spq_ets_sqt_unotice);
        }
    }




    static if(!is(typeof(NID_id_smime_spq_ets_sqt_unotice))) {
        private enum enumMixinStr_NID_id_smime_spq_ets_sqt_unotice = `enum NID_id_smime_spq_ets_sqt_unotice = 250;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_smime_spq_ets_sqt_unotice); }))) {
            mixin(enumMixinStr_NID_id_smime_spq_ets_sqt_unotice);
        }
    }




    static if(!is(typeof(OBJ_id_smime_spq_ets_sqt_unotice))) {
        private enum enumMixinStr_OBJ_id_smime_spq_ets_sqt_unotice = `enum OBJ_id_smime_spq_ets_sqt_unotice = 1L , 2L , 840L , 113549L , 1L , 9L , 16L , 5L , 2L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_smime_spq_ets_sqt_unotice); }))) {
            mixin(enumMixinStr_OBJ_id_smime_spq_ets_sqt_unotice);
        }
    }




    static if(!is(typeof(SN_id_smime_cti_ets_proofOfOrigin))) {
        private enum enumMixinStr_SN_id_smime_cti_ets_proofOfOrigin = `enum SN_id_smime_cti_ets_proofOfOrigin = "id-smime-cti-ets-proofOfOrigin";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_smime_cti_ets_proofOfOrigin); }))) {
            mixin(enumMixinStr_SN_id_smime_cti_ets_proofOfOrigin);
        }
    }




    static if(!is(typeof(NID_id_smime_cti_ets_proofOfOrigin))) {
        private enum enumMixinStr_NID_id_smime_cti_ets_proofOfOrigin = `enum NID_id_smime_cti_ets_proofOfOrigin = 251;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_smime_cti_ets_proofOfOrigin); }))) {
            mixin(enumMixinStr_NID_id_smime_cti_ets_proofOfOrigin);
        }
    }




    static if(!is(typeof(OBJ_id_smime_cti_ets_proofOfOrigin))) {
        private enum enumMixinStr_OBJ_id_smime_cti_ets_proofOfOrigin = `enum OBJ_id_smime_cti_ets_proofOfOrigin = 1L , 2L , 840L , 113549L , 1L , 9L , 16L , 6L , 1L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_smime_cti_ets_proofOfOrigin); }))) {
            mixin(enumMixinStr_OBJ_id_smime_cti_ets_proofOfOrigin);
        }
    }




    static if(!is(typeof(SN_id_smime_cti_ets_proofOfReceipt))) {
        private enum enumMixinStr_SN_id_smime_cti_ets_proofOfReceipt = `enum SN_id_smime_cti_ets_proofOfReceipt = "id-smime-cti-ets-proofOfReceipt";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_smime_cti_ets_proofOfReceipt); }))) {
            mixin(enumMixinStr_SN_id_smime_cti_ets_proofOfReceipt);
        }
    }




    static if(!is(typeof(NID_id_smime_cti_ets_proofOfReceipt))) {
        private enum enumMixinStr_NID_id_smime_cti_ets_proofOfReceipt = `enum NID_id_smime_cti_ets_proofOfReceipt = 252;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_smime_cti_ets_proofOfReceipt); }))) {
            mixin(enumMixinStr_NID_id_smime_cti_ets_proofOfReceipt);
        }
    }




    static if(!is(typeof(OBJ_id_smime_cti_ets_proofOfReceipt))) {
        private enum enumMixinStr_OBJ_id_smime_cti_ets_proofOfReceipt = `enum OBJ_id_smime_cti_ets_proofOfReceipt = 1L , 2L , 840L , 113549L , 1L , 9L , 16L , 6L , 2L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_smime_cti_ets_proofOfReceipt); }))) {
            mixin(enumMixinStr_OBJ_id_smime_cti_ets_proofOfReceipt);
        }
    }




    static if(!is(typeof(SN_id_smime_cti_ets_proofOfDelivery))) {
        private enum enumMixinStr_SN_id_smime_cti_ets_proofOfDelivery = `enum SN_id_smime_cti_ets_proofOfDelivery = "id-smime-cti-ets-proofOfDelivery";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_smime_cti_ets_proofOfDelivery); }))) {
            mixin(enumMixinStr_SN_id_smime_cti_ets_proofOfDelivery);
        }
    }




    static if(!is(typeof(NID_id_smime_cti_ets_proofOfDelivery))) {
        private enum enumMixinStr_NID_id_smime_cti_ets_proofOfDelivery = `enum NID_id_smime_cti_ets_proofOfDelivery = 253;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_smime_cti_ets_proofOfDelivery); }))) {
            mixin(enumMixinStr_NID_id_smime_cti_ets_proofOfDelivery);
        }
    }




    static if(!is(typeof(OBJ_id_smime_cti_ets_proofOfDelivery))) {
        private enum enumMixinStr_OBJ_id_smime_cti_ets_proofOfDelivery = `enum OBJ_id_smime_cti_ets_proofOfDelivery = 1L , 2L , 840L , 113549L , 1L , 9L , 16L , 6L , 3L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_smime_cti_ets_proofOfDelivery); }))) {
            mixin(enumMixinStr_OBJ_id_smime_cti_ets_proofOfDelivery);
        }
    }




    static if(!is(typeof(SN_id_smime_cti_ets_proofOfSender))) {
        private enum enumMixinStr_SN_id_smime_cti_ets_proofOfSender = `enum SN_id_smime_cti_ets_proofOfSender = "id-smime-cti-ets-proofOfSender";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_smime_cti_ets_proofOfSender); }))) {
            mixin(enumMixinStr_SN_id_smime_cti_ets_proofOfSender);
        }
    }




    static if(!is(typeof(NID_id_smime_cti_ets_proofOfSender))) {
        private enum enumMixinStr_NID_id_smime_cti_ets_proofOfSender = `enum NID_id_smime_cti_ets_proofOfSender = 254;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_smime_cti_ets_proofOfSender); }))) {
            mixin(enumMixinStr_NID_id_smime_cti_ets_proofOfSender);
        }
    }




    static if(!is(typeof(OBJ_id_smime_cti_ets_proofOfSender))) {
        private enum enumMixinStr_OBJ_id_smime_cti_ets_proofOfSender = `enum OBJ_id_smime_cti_ets_proofOfSender = 1L , 2L , 840L , 113549L , 1L , 9L , 16L , 6L , 4L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_smime_cti_ets_proofOfSender); }))) {
            mixin(enumMixinStr_OBJ_id_smime_cti_ets_proofOfSender);
        }
    }




    static if(!is(typeof(SN_id_smime_cti_ets_proofOfApproval))) {
        private enum enumMixinStr_SN_id_smime_cti_ets_proofOfApproval = `enum SN_id_smime_cti_ets_proofOfApproval = "id-smime-cti-ets-proofOfApproval";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_smime_cti_ets_proofOfApproval); }))) {
            mixin(enumMixinStr_SN_id_smime_cti_ets_proofOfApproval);
        }
    }




    static if(!is(typeof(NID_id_smime_cti_ets_proofOfApproval))) {
        private enum enumMixinStr_NID_id_smime_cti_ets_proofOfApproval = `enum NID_id_smime_cti_ets_proofOfApproval = 255;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_smime_cti_ets_proofOfApproval); }))) {
            mixin(enumMixinStr_NID_id_smime_cti_ets_proofOfApproval);
        }
    }




    static if(!is(typeof(OBJ_id_smime_cti_ets_proofOfApproval))) {
        private enum enumMixinStr_OBJ_id_smime_cti_ets_proofOfApproval = `enum OBJ_id_smime_cti_ets_proofOfApproval = 1L , 2L , 840L , 113549L , 1L , 9L , 16L , 6L , 5L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_smime_cti_ets_proofOfApproval); }))) {
            mixin(enumMixinStr_OBJ_id_smime_cti_ets_proofOfApproval);
        }
    }




    static if(!is(typeof(SN_id_smime_cti_ets_proofOfCreation))) {
        private enum enumMixinStr_SN_id_smime_cti_ets_proofOfCreation = `enum SN_id_smime_cti_ets_proofOfCreation = "id-smime-cti-ets-proofOfCreation";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_smime_cti_ets_proofOfCreation); }))) {
            mixin(enumMixinStr_SN_id_smime_cti_ets_proofOfCreation);
        }
    }




    static if(!is(typeof(NID_id_smime_cti_ets_proofOfCreation))) {
        private enum enumMixinStr_NID_id_smime_cti_ets_proofOfCreation = `enum NID_id_smime_cti_ets_proofOfCreation = 256;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_smime_cti_ets_proofOfCreation); }))) {
            mixin(enumMixinStr_NID_id_smime_cti_ets_proofOfCreation);
        }
    }




    static if(!is(typeof(OBJ_id_smime_cti_ets_proofOfCreation))) {
        private enum enumMixinStr_OBJ_id_smime_cti_ets_proofOfCreation = `enum OBJ_id_smime_cti_ets_proofOfCreation = 1L , 2L , 840L , 113549L , 1L , 9L , 16L , 6L , 6L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_smime_cti_ets_proofOfCreation); }))) {
            mixin(enumMixinStr_OBJ_id_smime_cti_ets_proofOfCreation);
        }
    }




    static if(!is(typeof(LN_friendlyName))) {
        private enum enumMixinStr_LN_friendlyName = `enum LN_friendlyName = "friendlyName";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_friendlyName); }))) {
            mixin(enumMixinStr_LN_friendlyName);
        }
    }




    static if(!is(typeof(NID_friendlyName))) {
        private enum enumMixinStr_NID_friendlyName = `enum NID_friendlyName = 156;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_friendlyName); }))) {
            mixin(enumMixinStr_NID_friendlyName);
        }
    }




    static if(!is(typeof(OBJ_friendlyName))) {
        private enum enumMixinStr_OBJ_friendlyName = `enum OBJ_friendlyName = 1L , 2L , 840L , 113549L , 1L , 9L , 20L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_friendlyName); }))) {
            mixin(enumMixinStr_OBJ_friendlyName);
        }
    }




    static if(!is(typeof(LN_localKeyID))) {
        private enum enumMixinStr_LN_localKeyID = `enum LN_localKeyID = "localKeyID";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_localKeyID); }))) {
            mixin(enumMixinStr_LN_localKeyID);
        }
    }




    static if(!is(typeof(NID_localKeyID))) {
        private enum enumMixinStr_NID_localKeyID = `enum NID_localKeyID = 157;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_localKeyID); }))) {
            mixin(enumMixinStr_NID_localKeyID);
        }
    }




    static if(!is(typeof(OBJ_localKeyID))) {
        private enum enumMixinStr_OBJ_localKeyID = `enum OBJ_localKeyID = 1L , 2L , 840L , 113549L , 1L , 9L , 21L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_localKeyID); }))) {
            mixin(enumMixinStr_OBJ_localKeyID);
        }
    }




    static if(!is(typeof(SN_ms_csp_name))) {
        private enum enumMixinStr_SN_ms_csp_name = `enum SN_ms_csp_name = "CSPName";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_ms_csp_name); }))) {
            mixin(enumMixinStr_SN_ms_csp_name);
        }
    }




    static if(!is(typeof(LN_ms_csp_name))) {
        private enum enumMixinStr_LN_ms_csp_name = `enum LN_ms_csp_name = "Microsoft CSP Name";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_ms_csp_name); }))) {
            mixin(enumMixinStr_LN_ms_csp_name);
        }
    }




    static if(!is(typeof(NID_ms_csp_name))) {
        private enum enumMixinStr_NID_ms_csp_name = `enum NID_ms_csp_name = 417;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_ms_csp_name); }))) {
            mixin(enumMixinStr_NID_ms_csp_name);
        }
    }




    static if(!is(typeof(OBJ_ms_csp_name))) {
        private enum enumMixinStr_OBJ_ms_csp_name = `enum OBJ_ms_csp_name = 1L , 3L , 6L , 1L , 4L , 1L , 311L , 17L , 1L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_ms_csp_name); }))) {
            mixin(enumMixinStr_OBJ_ms_csp_name);
        }
    }




    static if(!is(typeof(SN_LocalKeySet))) {
        private enum enumMixinStr_SN_LocalKeySet = `enum SN_LocalKeySet = "LocalKeySet";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_LocalKeySet); }))) {
            mixin(enumMixinStr_SN_LocalKeySet);
        }
    }




    static if(!is(typeof(LN_LocalKeySet))) {
        private enum enumMixinStr_LN_LocalKeySet = `enum LN_LocalKeySet = "Microsoft Local Key set";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_LocalKeySet); }))) {
            mixin(enumMixinStr_LN_LocalKeySet);
        }
    }




    static if(!is(typeof(NID_LocalKeySet))) {
        private enum enumMixinStr_NID_LocalKeySet = `enum NID_LocalKeySet = 856;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_LocalKeySet); }))) {
            mixin(enumMixinStr_NID_LocalKeySet);
        }
    }




    static if(!is(typeof(OBJ_LocalKeySet))) {
        private enum enumMixinStr_OBJ_LocalKeySet = `enum OBJ_LocalKeySet = 1L , 3L , 6L , 1L , 4L , 1L , 311L , 17L , 2L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_LocalKeySet); }))) {
            mixin(enumMixinStr_OBJ_LocalKeySet);
        }
    }




    static if(!is(typeof(OBJ_certTypes))) {
        private enum enumMixinStr_OBJ_certTypes = `enum OBJ_certTypes = 1L , 2L , 840L , 113549L , 1L , 9L , 22L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_certTypes); }))) {
            mixin(enumMixinStr_OBJ_certTypes);
        }
    }




    static if(!is(typeof(LN_x509Certificate))) {
        private enum enumMixinStr_LN_x509Certificate = `enum LN_x509Certificate = "x509Certificate";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_x509Certificate); }))) {
            mixin(enumMixinStr_LN_x509Certificate);
        }
    }




    static if(!is(typeof(NID_x509Certificate))) {
        private enum enumMixinStr_NID_x509Certificate = `enum NID_x509Certificate = 158;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_x509Certificate); }))) {
            mixin(enumMixinStr_NID_x509Certificate);
        }
    }




    static if(!is(typeof(OBJ_x509Certificate))) {
        private enum enumMixinStr_OBJ_x509Certificate = `enum OBJ_x509Certificate = 1L , 2L , 840L , 113549L , 1L , 9L , 22L , 1L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_x509Certificate); }))) {
            mixin(enumMixinStr_OBJ_x509Certificate);
        }
    }




    static if(!is(typeof(LN_sdsiCertificate))) {
        private enum enumMixinStr_LN_sdsiCertificate = `enum LN_sdsiCertificate = "sdsiCertificate";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_sdsiCertificate); }))) {
            mixin(enumMixinStr_LN_sdsiCertificate);
        }
    }




    static if(!is(typeof(NID_sdsiCertificate))) {
        private enum enumMixinStr_NID_sdsiCertificate = `enum NID_sdsiCertificate = 159;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_sdsiCertificate); }))) {
            mixin(enumMixinStr_NID_sdsiCertificate);
        }
    }




    static if(!is(typeof(OBJ_sdsiCertificate))) {
        private enum enumMixinStr_OBJ_sdsiCertificate = `enum OBJ_sdsiCertificate = 1L , 2L , 840L , 113549L , 1L , 9L , 22L , 2L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_sdsiCertificate); }))) {
            mixin(enumMixinStr_OBJ_sdsiCertificate);
        }
    }




    static if(!is(typeof(OBJ_crlTypes))) {
        private enum enumMixinStr_OBJ_crlTypes = `enum OBJ_crlTypes = 1L , 2L , 840L , 113549L , 1L , 9L , 23L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_crlTypes); }))) {
            mixin(enumMixinStr_OBJ_crlTypes);
        }
    }




    static if(!is(typeof(LN_x509Crl))) {
        private enum enumMixinStr_LN_x509Crl = `enum LN_x509Crl = "x509Crl";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_x509Crl); }))) {
            mixin(enumMixinStr_LN_x509Crl);
        }
    }




    static if(!is(typeof(NID_x509Crl))) {
        private enum enumMixinStr_NID_x509Crl = `enum NID_x509Crl = 160;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_x509Crl); }))) {
            mixin(enumMixinStr_NID_x509Crl);
        }
    }




    static if(!is(typeof(OBJ_x509Crl))) {
        private enum enumMixinStr_OBJ_x509Crl = `enum OBJ_x509Crl = 1L , 2L , 840L , 113549L , 1L , 9L , 23L , 1L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_x509Crl); }))) {
            mixin(enumMixinStr_OBJ_x509Crl);
        }
    }




    static if(!is(typeof(OBJ_pkcs12))) {
        private enum enumMixinStr_OBJ_pkcs12 = `enum OBJ_pkcs12 = 1L , 2L , 840L , 113549L , 1L , 12L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_pkcs12); }))) {
            mixin(enumMixinStr_OBJ_pkcs12);
        }
    }




    static if(!is(typeof(OBJ_pkcs12_pbeids))) {
        private enum enumMixinStr_OBJ_pkcs12_pbeids = `enum OBJ_pkcs12_pbeids = 1L , 2L , 840L , 113549L , 1L , 12L , 1L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_pkcs12_pbeids); }))) {
            mixin(enumMixinStr_OBJ_pkcs12_pbeids);
        }
    }




    static if(!is(typeof(SN_pbe_WithSHA1And128BitRC4))) {
        private enum enumMixinStr_SN_pbe_WithSHA1And128BitRC4 = `enum SN_pbe_WithSHA1And128BitRC4 = "PBE-SHA1-RC4-128";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_pbe_WithSHA1And128BitRC4); }))) {
            mixin(enumMixinStr_SN_pbe_WithSHA1And128BitRC4);
        }
    }




    static if(!is(typeof(LN_pbe_WithSHA1And128BitRC4))) {
        private enum enumMixinStr_LN_pbe_WithSHA1And128BitRC4 = `enum LN_pbe_WithSHA1And128BitRC4 = "pbeWithSHA1And128BitRC4";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_pbe_WithSHA1And128BitRC4); }))) {
            mixin(enumMixinStr_LN_pbe_WithSHA1And128BitRC4);
        }
    }




    static if(!is(typeof(NID_pbe_WithSHA1And128BitRC4))) {
        private enum enumMixinStr_NID_pbe_WithSHA1And128BitRC4 = `enum NID_pbe_WithSHA1And128BitRC4 = 144;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_pbe_WithSHA1And128BitRC4); }))) {
            mixin(enumMixinStr_NID_pbe_WithSHA1And128BitRC4);
        }
    }




    static if(!is(typeof(OBJ_pbe_WithSHA1And128BitRC4))) {
        private enum enumMixinStr_OBJ_pbe_WithSHA1And128BitRC4 = `enum OBJ_pbe_WithSHA1And128BitRC4 = 1L , 2L , 840L , 113549L , 1L , 12L , 1L , 1L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_pbe_WithSHA1And128BitRC4); }))) {
            mixin(enumMixinStr_OBJ_pbe_WithSHA1And128BitRC4);
        }
    }




    static if(!is(typeof(SN_pbe_WithSHA1And40BitRC4))) {
        private enum enumMixinStr_SN_pbe_WithSHA1And40BitRC4 = `enum SN_pbe_WithSHA1And40BitRC4 = "PBE-SHA1-RC4-40";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_pbe_WithSHA1And40BitRC4); }))) {
            mixin(enumMixinStr_SN_pbe_WithSHA1And40BitRC4);
        }
    }




    static if(!is(typeof(LN_pbe_WithSHA1And40BitRC4))) {
        private enum enumMixinStr_LN_pbe_WithSHA1And40BitRC4 = `enum LN_pbe_WithSHA1And40BitRC4 = "pbeWithSHA1And40BitRC4";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_pbe_WithSHA1And40BitRC4); }))) {
            mixin(enumMixinStr_LN_pbe_WithSHA1And40BitRC4);
        }
    }




    static if(!is(typeof(NID_pbe_WithSHA1And40BitRC4))) {
        private enum enumMixinStr_NID_pbe_WithSHA1And40BitRC4 = `enum NID_pbe_WithSHA1And40BitRC4 = 145;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_pbe_WithSHA1And40BitRC4); }))) {
            mixin(enumMixinStr_NID_pbe_WithSHA1And40BitRC4);
        }
    }




    static if(!is(typeof(OBJ_pbe_WithSHA1And40BitRC4))) {
        private enum enumMixinStr_OBJ_pbe_WithSHA1And40BitRC4 = `enum OBJ_pbe_WithSHA1And40BitRC4 = 1L , 2L , 840L , 113549L , 1L , 12L , 1L , 2L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_pbe_WithSHA1And40BitRC4); }))) {
            mixin(enumMixinStr_OBJ_pbe_WithSHA1And40BitRC4);
        }
    }




    static if(!is(typeof(SN_pbe_WithSHA1And3_Key_TripleDES_CBC))) {
        private enum enumMixinStr_SN_pbe_WithSHA1And3_Key_TripleDES_CBC = `enum SN_pbe_WithSHA1And3_Key_TripleDES_CBC = "PBE-SHA1-3DES";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_pbe_WithSHA1And3_Key_TripleDES_CBC); }))) {
            mixin(enumMixinStr_SN_pbe_WithSHA1And3_Key_TripleDES_CBC);
        }
    }




    static if(!is(typeof(LN_pbe_WithSHA1And3_Key_TripleDES_CBC))) {
        private enum enumMixinStr_LN_pbe_WithSHA1And3_Key_TripleDES_CBC = `enum LN_pbe_WithSHA1And3_Key_TripleDES_CBC = "pbeWithSHA1And3-KeyTripleDES-CBC";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_pbe_WithSHA1And3_Key_TripleDES_CBC); }))) {
            mixin(enumMixinStr_LN_pbe_WithSHA1And3_Key_TripleDES_CBC);
        }
    }




    static if(!is(typeof(NID_pbe_WithSHA1And3_Key_TripleDES_CBC))) {
        private enum enumMixinStr_NID_pbe_WithSHA1And3_Key_TripleDES_CBC = `enum NID_pbe_WithSHA1And3_Key_TripleDES_CBC = 146;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_pbe_WithSHA1And3_Key_TripleDES_CBC); }))) {
            mixin(enumMixinStr_NID_pbe_WithSHA1And3_Key_TripleDES_CBC);
        }
    }




    static if(!is(typeof(OBJ_pbe_WithSHA1And3_Key_TripleDES_CBC))) {
        private enum enumMixinStr_OBJ_pbe_WithSHA1And3_Key_TripleDES_CBC = `enum OBJ_pbe_WithSHA1And3_Key_TripleDES_CBC = 1L , 2L , 840L , 113549L , 1L , 12L , 1L , 3L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_pbe_WithSHA1And3_Key_TripleDES_CBC); }))) {
            mixin(enumMixinStr_OBJ_pbe_WithSHA1And3_Key_TripleDES_CBC);
        }
    }




    static if(!is(typeof(SN_pbe_WithSHA1And2_Key_TripleDES_CBC))) {
        private enum enumMixinStr_SN_pbe_WithSHA1And2_Key_TripleDES_CBC = `enum SN_pbe_WithSHA1And2_Key_TripleDES_CBC = "PBE-SHA1-2DES";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_pbe_WithSHA1And2_Key_TripleDES_CBC); }))) {
            mixin(enumMixinStr_SN_pbe_WithSHA1And2_Key_TripleDES_CBC);
        }
    }




    static if(!is(typeof(LN_pbe_WithSHA1And2_Key_TripleDES_CBC))) {
        private enum enumMixinStr_LN_pbe_WithSHA1And2_Key_TripleDES_CBC = `enum LN_pbe_WithSHA1And2_Key_TripleDES_CBC = "pbeWithSHA1And2-KeyTripleDES-CBC";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_pbe_WithSHA1And2_Key_TripleDES_CBC); }))) {
            mixin(enumMixinStr_LN_pbe_WithSHA1And2_Key_TripleDES_CBC);
        }
    }




    static if(!is(typeof(NID_pbe_WithSHA1And2_Key_TripleDES_CBC))) {
        private enum enumMixinStr_NID_pbe_WithSHA1And2_Key_TripleDES_CBC = `enum NID_pbe_WithSHA1And2_Key_TripleDES_CBC = 147;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_pbe_WithSHA1And2_Key_TripleDES_CBC); }))) {
            mixin(enumMixinStr_NID_pbe_WithSHA1And2_Key_TripleDES_CBC);
        }
    }




    static if(!is(typeof(OBJ_pbe_WithSHA1And2_Key_TripleDES_CBC))) {
        private enum enumMixinStr_OBJ_pbe_WithSHA1And2_Key_TripleDES_CBC = `enum OBJ_pbe_WithSHA1And2_Key_TripleDES_CBC = 1L , 2L , 840L , 113549L , 1L , 12L , 1L , 4L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_pbe_WithSHA1And2_Key_TripleDES_CBC); }))) {
            mixin(enumMixinStr_OBJ_pbe_WithSHA1And2_Key_TripleDES_CBC);
        }
    }




    static if(!is(typeof(SN_pbe_WithSHA1And128BitRC2_CBC))) {
        private enum enumMixinStr_SN_pbe_WithSHA1And128BitRC2_CBC = `enum SN_pbe_WithSHA1And128BitRC2_CBC = "PBE-SHA1-RC2-128";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_pbe_WithSHA1And128BitRC2_CBC); }))) {
            mixin(enumMixinStr_SN_pbe_WithSHA1And128BitRC2_CBC);
        }
    }




    static if(!is(typeof(LN_pbe_WithSHA1And128BitRC2_CBC))) {
        private enum enumMixinStr_LN_pbe_WithSHA1And128BitRC2_CBC = `enum LN_pbe_WithSHA1And128BitRC2_CBC = "pbeWithSHA1And128BitRC2-CBC";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_pbe_WithSHA1And128BitRC2_CBC); }))) {
            mixin(enumMixinStr_LN_pbe_WithSHA1And128BitRC2_CBC);
        }
    }




    static if(!is(typeof(NID_pbe_WithSHA1And128BitRC2_CBC))) {
        private enum enumMixinStr_NID_pbe_WithSHA1And128BitRC2_CBC = `enum NID_pbe_WithSHA1And128BitRC2_CBC = 148;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_pbe_WithSHA1And128BitRC2_CBC); }))) {
            mixin(enumMixinStr_NID_pbe_WithSHA1And128BitRC2_CBC);
        }
    }




    static if(!is(typeof(OBJ_pbe_WithSHA1And128BitRC2_CBC))) {
        private enum enumMixinStr_OBJ_pbe_WithSHA1And128BitRC2_CBC = `enum OBJ_pbe_WithSHA1And128BitRC2_CBC = 1L , 2L , 840L , 113549L , 1L , 12L , 1L , 5L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_pbe_WithSHA1And128BitRC2_CBC); }))) {
            mixin(enumMixinStr_OBJ_pbe_WithSHA1And128BitRC2_CBC);
        }
    }




    static if(!is(typeof(SN_pbe_WithSHA1And40BitRC2_CBC))) {
        private enum enumMixinStr_SN_pbe_WithSHA1And40BitRC2_CBC = `enum SN_pbe_WithSHA1And40BitRC2_CBC = "PBE-SHA1-RC2-40";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_pbe_WithSHA1And40BitRC2_CBC); }))) {
            mixin(enumMixinStr_SN_pbe_WithSHA1And40BitRC2_CBC);
        }
    }




    static if(!is(typeof(LN_pbe_WithSHA1And40BitRC2_CBC))) {
        private enum enumMixinStr_LN_pbe_WithSHA1And40BitRC2_CBC = `enum LN_pbe_WithSHA1And40BitRC2_CBC = "pbeWithSHA1And40BitRC2-CBC";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_pbe_WithSHA1And40BitRC2_CBC); }))) {
            mixin(enumMixinStr_LN_pbe_WithSHA1And40BitRC2_CBC);
        }
    }




    static if(!is(typeof(NID_pbe_WithSHA1And40BitRC2_CBC))) {
        private enum enumMixinStr_NID_pbe_WithSHA1And40BitRC2_CBC = `enum NID_pbe_WithSHA1And40BitRC2_CBC = 149;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_pbe_WithSHA1And40BitRC2_CBC); }))) {
            mixin(enumMixinStr_NID_pbe_WithSHA1And40BitRC2_CBC);
        }
    }




    static if(!is(typeof(OBJ_pbe_WithSHA1And40BitRC2_CBC))) {
        private enum enumMixinStr_OBJ_pbe_WithSHA1And40BitRC2_CBC = `enum OBJ_pbe_WithSHA1And40BitRC2_CBC = 1L , 2L , 840L , 113549L , 1L , 12L , 1L , 6L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_pbe_WithSHA1And40BitRC2_CBC); }))) {
            mixin(enumMixinStr_OBJ_pbe_WithSHA1And40BitRC2_CBC);
        }
    }




    static if(!is(typeof(OBJ_pkcs12_Version1))) {
        private enum enumMixinStr_OBJ_pkcs12_Version1 = `enum OBJ_pkcs12_Version1 = 1L , 2L , 840L , 113549L , 1L , 12L , 10L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_pkcs12_Version1); }))) {
            mixin(enumMixinStr_OBJ_pkcs12_Version1);
        }
    }




    static if(!is(typeof(OBJ_pkcs12_BagIds))) {
        private enum enumMixinStr_OBJ_pkcs12_BagIds = `enum OBJ_pkcs12_BagIds = 1L , 2L , 840L , 113549L , 1L , 12L , 10L , 1L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_pkcs12_BagIds); }))) {
            mixin(enumMixinStr_OBJ_pkcs12_BagIds);
        }
    }




    static if(!is(typeof(LN_keyBag))) {
        private enum enumMixinStr_LN_keyBag = `enum LN_keyBag = "keyBag";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_keyBag); }))) {
            mixin(enumMixinStr_LN_keyBag);
        }
    }




    static if(!is(typeof(NID_keyBag))) {
        private enum enumMixinStr_NID_keyBag = `enum NID_keyBag = 150;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_keyBag); }))) {
            mixin(enumMixinStr_NID_keyBag);
        }
    }




    static if(!is(typeof(OBJ_keyBag))) {
        private enum enumMixinStr_OBJ_keyBag = `enum OBJ_keyBag = 1L , 2L , 840L , 113549L , 1L , 12L , 10L , 1L , 1L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_keyBag); }))) {
            mixin(enumMixinStr_OBJ_keyBag);
        }
    }




    static if(!is(typeof(LN_pkcs8ShroudedKeyBag))) {
        private enum enumMixinStr_LN_pkcs8ShroudedKeyBag = `enum LN_pkcs8ShroudedKeyBag = "pkcs8ShroudedKeyBag";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_pkcs8ShroudedKeyBag); }))) {
            mixin(enumMixinStr_LN_pkcs8ShroudedKeyBag);
        }
    }




    static if(!is(typeof(NID_pkcs8ShroudedKeyBag))) {
        private enum enumMixinStr_NID_pkcs8ShroudedKeyBag = `enum NID_pkcs8ShroudedKeyBag = 151;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_pkcs8ShroudedKeyBag); }))) {
            mixin(enumMixinStr_NID_pkcs8ShroudedKeyBag);
        }
    }




    static if(!is(typeof(OBJ_pkcs8ShroudedKeyBag))) {
        private enum enumMixinStr_OBJ_pkcs8ShroudedKeyBag = `enum OBJ_pkcs8ShroudedKeyBag = 1L , 2L , 840L , 113549L , 1L , 12L , 10L , 1L , 2L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_pkcs8ShroudedKeyBag); }))) {
            mixin(enumMixinStr_OBJ_pkcs8ShroudedKeyBag);
        }
    }




    static if(!is(typeof(LN_certBag))) {
        private enum enumMixinStr_LN_certBag = `enum LN_certBag = "certBag";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_certBag); }))) {
            mixin(enumMixinStr_LN_certBag);
        }
    }




    static if(!is(typeof(NID_certBag))) {
        private enum enumMixinStr_NID_certBag = `enum NID_certBag = 152;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_certBag); }))) {
            mixin(enumMixinStr_NID_certBag);
        }
    }




    static if(!is(typeof(OBJ_certBag))) {
        private enum enumMixinStr_OBJ_certBag = `enum OBJ_certBag = 1L , 2L , 840L , 113549L , 1L , 12L , 10L , 1L , 3L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_certBag); }))) {
            mixin(enumMixinStr_OBJ_certBag);
        }
    }




    static if(!is(typeof(LN_crlBag))) {
        private enum enumMixinStr_LN_crlBag = `enum LN_crlBag = "crlBag";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_crlBag); }))) {
            mixin(enumMixinStr_LN_crlBag);
        }
    }




    static if(!is(typeof(NID_crlBag))) {
        private enum enumMixinStr_NID_crlBag = `enum NID_crlBag = 153;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_crlBag); }))) {
            mixin(enumMixinStr_NID_crlBag);
        }
    }




    static if(!is(typeof(OBJ_crlBag))) {
        private enum enumMixinStr_OBJ_crlBag = `enum OBJ_crlBag = 1L , 2L , 840L , 113549L , 1L , 12L , 10L , 1L , 4L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_crlBag); }))) {
            mixin(enumMixinStr_OBJ_crlBag);
        }
    }




    static if(!is(typeof(LN_secretBag))) {
        private enum enumMixinStr_LN_secretBag = `enum LN_secretBag = "secretBag";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_secretBag); }))) {
            mixin(enumMixinStr_LN_secretBag);
        }
    }




    static if(!is(typeof(NID_secretBag))) {
        private enum enumMixinStr_NID_secretBag = `enum NID_secretBag = 154;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_secretBag); }))) {
            mixin(enumMixinStr_NID_secretBag);
        }
    }




    static if(!is(typeof(OBJ_secretBag))) {
        private enum enumMixinStr_OBJ_secretBag = `enum OBJ_secretBag = 1L , 2L , 840L , 113549L , 1L , 12L , 10L , 1L , 5L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_secretBag); }))) {
            mixin(enumMixinStr_OBJ_secretBag);
        }
    }




    static if(!is(typeof(LN_safeContentsBag))) {
        private enum enumMixinStr_LN_safeContentsBag = `enum LN_safeContentsBag = "safeContentsBag";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_safeContentsBag); }))) {
            mixin(enumMixinStr_LN_safeContentsBag);
        }
    }




    static if(!is(typeof(NID_safeContentsBag))) {
        private enum enumMixinStr_NID_safeContentsBag = `enum NID_safeContentsBag = 155;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_safeContentsBag); }))) {
            mixin(enumMixinStr_NID_safeContentsBag);
        }
    }




    static if(!is(typeof(OBJ_safeContentsBag))) {
        private enum enumMixinStr_OBJ_safeContentsBag = `enum OBJ_safeContentsBag = 1L , 2L , 840L , 113549L , 1L , 12L , 10L , 1L , 6L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_safeContentsBag); }))) {
            mixin(enumMixinStr_OBJ_safeContentsBag);
        }
    }




    static if(!is(typeof(SN_md2))) {
        private enum enumMixinStr_SN_md2 = `enum SN_md2 = "MD2";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_md2); }))) {
            mixin(enumMixinStr_SN_md2);
        }
    }




    static if(!is(typeof(LN_md2))) {
        private enum enumMixinStr_LN_md2 = `enum LN_md2 = "md2";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_md2); }))) {
            mixin(enumMixinStr_LN_md2);
        }
    }




    static if(!is(typeof(NID_md2))) {
        private enum enumMixinStr_NID_md2 = `enum NID_md2 = 3;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_md2); }))) {
            mixin(enumMixinStr_NID_md2);
        }
    }




    static if(!is(typeof(OBJ_md2))) {
        private enum enumMixinStr_OBJ_md2 = `enum OBJ_md2 = 1L , 2L , 840L , 113549L , 2L , 2L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_md2); }))) {
            mixin(enumMixinStr_OBJ_md2);
        }
    }




    static if(!is(typeof(SN_md4))) {
        private enum enumMixinStr_SN_md4 = `enum SN_md4 = "MD4";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_md4); }))) {
            mixin(enumMixinStr_SN_md4);
        }
    }




    static if(!is(typeof(LN_md4))) {
        private enum enumMixinStr_LN_md4 = `enum LN_md4 = "md4";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_md4); }))) {
            mixin(enumMixinStr_LN_md4);
        }
    }




    static if(!is(typeof(NID_md4))) {
        private enum enumMixinStr_NID_md4 = `enum NID_md4 = 257;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_md4); }))) {
            mixin(enumMixinStr_NID_md4);
        }
    }




    static if(!is(typeof(OBJ_md4))) {
        private enum enumMixinStr_OBJ_md4 = `enum OBJ_md4 = 1L , 2L , 840L , 113549L , 2L , 4L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_md4); }))) {
            mixin(enumMixinStr_OBJ_md4);
        }
    }




    static if(!is(typeof(SN_md5))) {
        private enum enumMixinStr_SN_md5 = `enum SN_md5 = "MD5";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_md5); }))) {
            mixin(enumMixinStr_SN_md5);
        }
    }




    static if(!is(typeof(LN_md5))) {
        private enum enumMixinStr_LN_md5 = `enum LN_md5 = "md5";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_md5); }))) {
            mixin(enumMixinStr_LN_md5);
        }
    }




    static if(!is(typeof(NID_md5))) {
        private enum enumMixinStr_NID_md5 = `enum NID_md5 = 4;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_md5); }))) {
            mixin(enumMixinStr_NID_md5);
        }
    }




    static if(!is(typeof(OBJ_md5))) {
        private enum enumMixinStr_OBJ_md5 = `enum OBJ_md5 = 1L , 2L , 840L , 113549L , 2L , 5L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_md5); }))) {
            mixin(enumMixinStr_OBJ_md5);
        }
    }




    static if(!is(typeof(SN_md5_sha1))) {
        private enum enumMixinStr_SN_md5_sha1 = `enum SN_md5_sha1 = "MD5-SHA1";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_md5_sha1); }))) {
            mixin(enumMixinStr_SN_md5_sha1);
        }
    }




    static if(!is(typeof(LN_md5_sha1))) {
        private enum enumMixinStr_LN_md5_sha1 = `enum LN_md5_sha1 = "md5-sha1";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_md5_sha1); }))) {
            mixin(enumMixinStr_LN_md5_sha1);
        }
    }




    static if(!is(typeof(NID_md5_sha1))) {
        private enum enumMixinStr_NID_md5_sha1 = `enum NID_md5_sha1 = 114;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_md5_sha1); }))) {
            mixin(enumMixinStr_NID_md5_sha1);
        }
    }




    static if(!is(typeof(LN_hmacWithMD5))) {
        private enum enumMixinStr_LN_hmacWithMD5 = `enum LN_hmacWithMD5 = "hmacWithMD5";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_hmacWithMD5); }))) {
            mixin(enumMixinStr_LN_hmacWithMD5);
        }
    }




    static if(!is(typeof(NID_hmacWithMD5))) {
        private enum enumMixinStr_NID_hmacWithMD5 = `enum NID_hmacWithMD5 = 797;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_hmacWithMD5); }))) {
            mixin(enumMixinStr_NID_hmacWithMD5);
        }
    }




    static if(!is(typeof(OBJ_hmacWithMD5))) {
        private enum enumMixinStr_OBJ_hmacWithMD5 = `enum OBJ_hmacWithMD5 = 1L , 2L , 840L , 113549L , 2L , 6L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_hmacWithMD5); }))) {
            mixin(enumMixinStr_OBJ_hmacWithMD5);
        }
    }




    static if(!is(typeof(LN_hmacWithSHA1))) {
        private enum enumMixinStr_LN_hmacWithSHA1 = `enum LN_hmacWithSHA1 = "hmacWithSHA1";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_hmacWithSHA1); }))) {
            mixin(enumMixinStr_LN_hmacWithSHA1);
        }
    }




    static if(!is(typeof(NID_hmacWithSHA1))) {
        private enum enumMixinStr_NID_hmacWithSHA1 = `enum NID_hmacWithSHA1 = 163;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_hmacWithSHA1); }))) {
            mixin(enumMixinStr_NID_hmacWithSHA1);
        }
    }




    static if(!is(typeof(OBJ_hmacWithSHA1))) {
        private enum enumMixinStr_OBJ_hmacWithSHA1 = `enum OBJ_hmacWithSHA1 = 1L , 2L , 840L , 113549L , 2L , 7L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_hmacWithSHA1); }))) {
            mixin(enumMixinStr_OBJ_hmacWithSHA1);
        }
    }




    static if(!is(typeof(SN_sm2))) {
        private enum enumMixinStr_SN_sm2 = `enum SN_sm2 = "SM2";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_sm2); }))) {
            mixin(enumMixinStr_SN_sm2);
        }
    }




    static if(!is(typeof(LN_sm2))) {
        private enum enumMixinStr_LN_sm2 = `enum LN_sm2 = "sm2";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_sm2); }))) {
            mixin(enumMixinStr_LN_sm2);
        }
    }




    static if(!is(typeof(NID_sm2))) {
        private enum enumMixinStr_NID_sm2 = `enum NID_sm2 = 1172;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_sm2); }))) {
            mixin(enumMixinStr_NID_sm2);
        }
    }




    static if(!is(typeof(OBJ_sm2))) {
        private enum enumMixinStr_OBJ_sm2 = `enum OBJ_sm2 = 1L , 2L , 156L , 10197L , 1L , 301L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_sm2); }))) {
            mixin(enumMixinStr_OBJ_sm2);
        }
    }




    static if(!is(typeof(SN_sm3))) {
        private enum enumMixinStr_SN_sm3 = `enum SN_sm3 = "SM3";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_sm3); }))) {
            mixin(enumMixinStr_SN_sm3);
        }
    }




    static if(!is(typeof(LN_sm3))) {
        private enum enumMixinStr_LN_sm3 = `enum LN_sm3 = "sm3";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_sm3); }))) {
            mixin(enumMixinStr_LN_sm3);
        }
    }




    static if(!is(typeof(NID_sm3))) {
        private enum enumMixinStr_NID_sm3 = `enum NID_sm3 = 1143;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_sm3); }))) {
            mixin(enumMixinStr_NID_sm3);
        }
    }




    static if(!is(typeof(OBJ_sm3))) {
        private enum enumMixinStr_OBJ_sm3 = `enum OBJ_sm3 = 1L , 2L , 156L , 10197L , 1L , 401L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_sm3); }))) {
            mixin(enumMixinStr_OBJ_sm3);
        }
    }




    static if(!is(typeof(SN_sm3WithRSAEncryption))) {
        private enum enumMixinStr_SN_sm3WithRSAEncryption = `enum SN_sm3WithRSAEncryption = "RSA-SM3";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_sm3WithRSAEncryption); }))) {
            mixin(enumMixinStr_SN_sm3WithRSAEncryption);
        }
    }




    static if(!is(typeof(LN_sm3WithRSAEncryption))) {
        private enum enumMixinStr_LN_sm3WithRSAEncryption = `enum LN_sm3WithRSAEncryption = "sm3WithRSAEncryption";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_sm3WithRSAEncryption); }))) {
            mixin(enumMixinStr_LN_sm3WithRSAEncryption);
        }
    }




    static if(!is(typeof(NID_sm3WithRSAEncryption))) {
        private enum enumMixinStr_NID_sm3WithRSAEncryption = `enum NID_sm3WithRSAEncryption = 1144;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_sm3WithRSAEncryption); }))) {
            mixin(enumMixinStr_NID_sm3WithRSAEncryption);
        }
    }




    static if(!is(typeof(OBJ_sm3WithRSAEncryption))) {
        private enum enumMixinStr_OBJ_sm3WithRSAEncryption = `enum OBJ_sm3WithRSAEncryption = 1L , 2L , 156L , 10197L , 1L , 504L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_sm3WithRSAEncryption); }))) {
            mixin(enumMixinStr_OBJ_sm3WithRSAEncryption);
        }
    }




    static if(!is(typeof(LN_hmacWithSHA224))) {
        private enum enumMixinStr_LN_hmacWithSHA224 = `enum LN_hmacWithSHA224 = "hmacWithSHA224";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_hmacWithSHA224); }))) {
            mixin(enumMixinStr_LN_hmacWithSHA224);
        }
    }




    static if(!is(typeof(NID_hmacWithSHA224))) {
        private enum enumMixinStr_NID_hmacWithSHA224 = `enum NID_hmacWithSHA224 = 798;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_hmacWithSHA224); }))) {
            mixin(enumMixinStr_NID_hmacWithSHA224);
        }
    }




    static if(!is(typeof(OBJ_hmacWithSHA224))) {
        private enum enumMixinStr_OBJ_hmacWithSHA224 = `enum OBJ_hmacWithSHA224 = 1L , 2L , 840L , 113549L , 2L , 8L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_hmacWithSHA224); }))) {
            mixin(enumMixinStr_OBJ_hmacWithSHA224);
        }
    }




    static if(!is(typeof(LN_hmacWithSHA256))) {
        private enum enumMixinStr_LN_hmacWithSHA256 = `enum LN_hmacWithSHA256 = "hmacWithSHA256";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_hmacWithSHA256); }))) {
            mixin(enumMixinStr_LN_hmacWithSHA256);
        }
    }




    static if(!is(typeof(NID_hmacWithSHA256))) {
        private enum enumMixinStr_NID_hmacWithSHA256 = `enum NID_hmacWithSHA256 = 799;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_hmacWithSHA256); }))) {
            mixin(enumMixinStr_NID_hmacWithSHA256);
        }
    }




    static if(!is(typeof(OBJ_hmacWithSHA256))) {
        private enum enumMixinStr_OBJ_hmacWithSHA256 = `enum OBJ_hmacWithSHA256 = 1L , 2L , 840L , 113549L , 2L , 9L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_hmacWithSHA256); }))) {
            mixin(enumMixinStr_OBJ_hmacWithSHA256);
        }
    }




    static if(!is(typeof(LN_hmacWithSHA384))) {
        private enum enumMixinStr_LN_hmacWithSHA384 = `enum LN_hmacWithSHA384 = "hmacWithSHA384";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_hmacWithSHA384); }))) {
            mixin(enumMixinStr_LN_hmacWithSHA384);
        }
    }




    static if(!is(typeof(NID_hmacWithSHA384))) {
        private enum enumMixinStr_NID_hmacWithSHA384 = `enum NID_hmacWithSHA384 = 800;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_hmacWithSHA384); }))) {
            mixin(enumMixinStr_NID_hmacWithSHA384);
        }
    }




    static if(!is(typeof(OBJ_hmacWithSHA384))) {
        private enum enumMixinStr_OBJ_hmacWithSHA384 = `enum OBJ_hmacWithSHA384 = 1L , 2L , 840L , 113549L , 2L , 10L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_hmacWithSHA384); }))) {
            mixin(enumMixinStr_OBJ_hmacWithSHA384);
        }
    }




    static if(!is(typeof(LN_hmacWithSHA512))) {
        private enum enumMixinStr_LN_hmacWithSHA512 = `enum LN_hmacWithSHA512 = "hmacWithSHA512";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_hmacWithSHA512); }))) {
            mixin(enumMixinStr_LN_hmacWithSHA512);
        }
    }




    static if(!is(typeof(NID_hmacWithSHA512))) {
        private enum enumMixinStr_NID_hmacWithSHA512 = `enum NID_hmacWithSHA512 = 801;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_hmacWithSHA512); }))) {
            mixin(enumMixinStr_NID_hmacWithSHA512);
        }
    }




    static if(!is(typeof(OBJ_hmacWithSHA512))) {
        private enum enumMixinStr_OBJ_hmacWithSHA512 = `enum OBJ_hmacWithSHA512 = 1L , 2L , 840L , 113549L , 2L , 11L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_hmacWithSHA512); }))) {
            mixin(enumMixinStr_OBJ_hmacWithSHA512);
        }
    }




    static if(!is(typeof(LN_hmacWithSHA512_224))) {
        private enum enumMixinStr_LN_hmacWithSHA512_224 = `enum LN_hmacWithSHA512_224 = "hmacWithSHA512-224";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_hmacWithSHA512_224); }))) {
            mixin(enumMixinStr_LN_hmacWithSHA512_224);
        }
    }




    static if(!is(typeof(NID_hmacWithSHA512_224))) {
        private enum enumMixinStr_NID_hmacWithSHA512_224 = `enum NID_hmacWithSHA512_224 = 1193;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_hmacWithSHA512_224); }))) {
            mixin(enumMixinStr_NID_hmacWithSHA512_224);
        }
    }




    static if(!is(typeof(OBJ_hmacWithSHA512_224))) {
        private enum enumMixinStr_OBJ_hmacWithSHA512_224 = `enum OBJ_hmacWithSHA512_224 = 1L , 2L , 840L , 113549L , 2L , 12L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_hmacWithSHA512_224); }))) {
            mixin(enumMixinStr_OBJ_hmacWithSHA512_224);
        }
    }




    static if(!is(typeof(LN_hmacWithSHA512_256))) {
        private enum enumMixinStr_LN_hmacWithSHA512_256 = `enum LN_hmacWithSHA512_256 = "hmacWithSHA512-256";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_hmacWithSHA512_256); }))) {
            mixin(enumMixinStr_LN_hmacWithSHA512_256);
        }
    }




    static if(!is(typeof(NID_hmacWithSHA512_256))) {
        private enum enumMixinStr_NID_hmacWithSHA512_256 = `enum NID_hmacWithSHA512_256 = 1194;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_hmacWithSHA512_256); }))) {
            mixin(enumMixinStr_NID_hmacWithSHA512_256);
        }
    }




    static if(!is(typeof(OBJ_hmacWithSHA512_256))) {
        private enum enumMixinStr_OBJ_hmacWithSHA512_256 = `enum OBJ_hmacWithSHA512_256 = 1L , 2L , 840L , 113549L , 2L , 13L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_hmacWithSHA512_256); }))) {
            mixin(enumMixinStr_OBJ_hmacWithSHA512_256);
        }
    }




    static if(!is(typeof(SN_rc2_cbc))) {
        private enum enumMixinStr_SN_rc2_cbc = `enum SN_rc2_cbc = "RC2-CBC";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_rc2_cbc); }))) {
            mixin(enumMixinStr_SN_rc2_cbc);
        }
    }




    static if(!is(typeof(LN_rc2_cbc))) {
        private enum enumMixinStr_LN_rc2_cbc = `enum LN_rc2_cbc = "rc2-cbc";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_rc2_cbc); }))) {
            mixin(enumMixinStr_LN_rc2_cbc);
        }
    }




    static if(!is(typeof(NID_rc2_cbc))) {
        private enum enumMixinStr_NID_rc2_cbc = `enum NID_rc2_cbc = 37;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_rc2_cbc); }))) {
            mixin(enumMixinStr_NID_rc2_cbc);
        }
    }




    static if(!is(typeof(OBJ_rc2_cbc))) {
        private enum enumMixinStr_OBJ_rc2_cbc = `enum OBJ_rc2_cbc = 1L , 2L , 840L , 113549L , 3L , 2L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_rc2_cbc); }))) {
            mixin(enumMixinStr_OBJ_rc2_cbc);
        }
    }




    static if(!is(typeof(SN_rc2_ecb))) {
        private enum enumMixinStr_SN_rc2_ecb = `enum SN_rc2_ecb = "RC2-ECB";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_rc2_ecb); }))) {
            mixin(enumMixinStr_SN_rc2_ecb);
        }
    }




    static if(!is(typeof(LN_rc2_ecb))) {
        private enum enumMixinStr_LN_rc2_ecb = `enum LN_rc2_ecb = "rc2-ecb";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_rc2_ecb); }))) {
            mixin(enumMixinStr_LN_rc2_ecb);
        }
    }




    static if(!is(typeof(NID_rc2_ecb))) {
        private enum enumMixinStr_NID_rc2_ecb = `enum NID_rc2_ecb = 38;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_rc2_ecb); }))) {
            mixin(enumMixinStr_NID_rc2_ecb);
        }
    }




    static if(!is(typeof(SN_rc2_cfb64))) {
        private enum enumMixinStr_SN_rc2_cfb64 = `enum SN_rc2_cfb64 = "RC2-CFB";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_rc2_cfb64); }))) {
            mixin(enumMixinStr_SN_rc2_cfb64);
        }
    }




    static if(!is(typeof(LN_rc2_cfb64))) {
        private enum enumMixinStr_LN_rc2_cfb64 = `enum LN_rc2_cfb64 = "rc2-cfb";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_rc2_cfb64); }))) {
            mixin(enumMixinStr_LN_rc2_cfb64);
        }
    }




    static if(!is(typeof(NID_rc2_cfb64))) {
        private enum enumMixinStr_NID_rc2_cfb64 = `enum NID_rc2_cfb64 = 39;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_rc2_cfb64); }))) {
            mixin(enumMixinStr_NID_rc2_cfb64);
        }
    }




    static if(!is(typeof(SN_rc2_ofb64))) {
        private enum enumMixinStr_SN_rc2_ofb64 = `enum SN_rc2_ofb64 = "RC2-OFB";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_rc2_ofb64); }))) {
            mixin(enumMixinStr_SN_rc2_ofb64);
        }
    }




    static if(!is(typeof(LN_rc2_ofb64))) {
        private enum enumMixinStr_LN_rc2_ofb64 = `enum LN_rc2_ofb64 = "rc2-ofb";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_rc2_ofb64); }))) {
            mixin(enumMixinStr_LN_rc2_ofb64);
        }
    }




    static if(!is(typeof(NID_rc2_ofb64))) {
        private enum enumMixinStr_NID_rc2_ofb64 = `enum NID_rc2_ofb64 = 40;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_rc2_ofb64); }))) {
            mixin(enumMixinStr_NID_rc2_ofb64);
        }
    }




    static if(!is(typeof(SN_rc2_40_cbc))) {
        private enum enumMixinStr_SN_rc2_40_cbc = `enum SN_rc2_40_cbc = "RC2-40-CBC";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_rc2_40_cbc); }))) {
            mixin(enumMixinStr_SN_rc2_40_cbc);
        }
    }




    static if(!is(typeof(LN_rc2_40_cbc))) {
        private enum enumMixinStr_LN_rc2_40_cbc = `enum LN_rc2_40_cbc = "rc2-40-cbc";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_rc2_40_cbc); }))) {
            mixin(enumMixinStr_LN_rc2_40_cbc);
        }
    }




    static if(!is(typeof(NID_rc2_40_cbc))) {
        private enum enumMixinStr_NID_rc2_40_cbc = `enum NID_rc2_40_cbc = 98;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_rc2_40_cbc); }))) {
            mixin(enumMixinStr_NID_rc2_40_cbc);
        }
    }




    static if(!is(typeof(SN_rc2_64_cbc))) {
        private enum enumMixinStr_SN_rc2_64_cbc = `enum SN_rc2_64_cbc = "RC2-64-CBC";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_rc2_64_cbc); }))) {
            mixin(enumMixinStr_SN_rc2_64_cbc);
        }
    }




    static if(!is(typeof(LN_rc2_64_cbc))) {
        private enum enumMixinStr_LN_rc2_64_cbc = `enum LN_rc2_64_cbc = "rc2-64-cbc";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_rc2_64_cbc); }))) {
            mixin(enumMixinStr_LN_rc2_64_cbc);
        }
    }




    static if(!is(typeof(NID_rc2_64_cbc))) {
        private enum enumMixinStr_NID_rc2_64_cbc = `enum NID_rc2_64_cbc = 166;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_rc2_64_cbc); }))) {
            mixin(enumMixinStr_NID_rc2_64_cbc);
        }
    }




    static if(!is(typeof(SN_rc4))) {
        private enum enumMixinStr_SN_rc4 = `enum SN_rc4 = "RC4";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_rc4); }))) {
            mixin(enumMixinStr_SN_rc4);
        }
    }




    static if(!is(typeof(LN_rc4))) {
        private enum enumMixinStr_LN_rc4 = `enum LN_rc4 = "rc4";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_rc4); }))) {
            mixin(enumMixinStr_LN_rc4);
        }
    }




    static if(!is(typeof(NID_rc4))) {
        private enum enumMixinStr_NID_rc4 = `enum NID_rc4 = 5;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_rc4); }))) {
            mixin(enumMixinStr_NID_rc4);
        }
    }




    static if(!is(typeof(OBJ_rc4))) {
        private enum enumMixinStr_OBJ_rc4 = `enum OBJ_rc4 = 1L , 2L , 840L , 113549L , 3L , 4L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_rc4); }))) {
            mixin(enumMixinStr_OBJ_rc4);
        }
    }




    static if(!is(typeof(SN_rc4_40))) {
        private enum enumMixinStr_SN_rc4_40 = `enum SN_rc4_40 = "RC4-40";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_rc4_40); }))) {
            mixin(enumMixinStr_SN_rc4_40);
        }
    }




    static if(!is(typeof(LN_rc4_40))) {
        private enum enumMixinStr_LN_rc4_40 = `enum LN_rc4_40 = "rc4-40";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_rc4_40); }))) {
            mixin(enumMixinStr_LN_rc4_40);
        }
    }




    static if(!is(typeof(NID_rc4_40))) {
        private enum enumMixinStr_NID_rc4_40 = `enum NID_rc4_40 = 97;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_rc4_40); }))) {
            mixin(enumMixinStr_NID_rc4_40);
        }
    }




    static if(!is(typeof(SN_des_ede3_cbc))) {
        private enum enumMixinStr_SN_des_ede3_cbc = `enum SN_des_ede3_cbc = "DES-EDE3-CBC";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_des_ede3_cbc); }))) {
            mixin(enumMixinStr_SN_des_ede3_cbc);
        }
    }




    static if(!is(typeof(LN_des_ede3_cbc))) {
        private enum enumMixinStr_LN_des_ede3_cbc = `enum LN_des_ede3_cbc = "des-ede3-cbc";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_des_ede3_cbc); }))) {
            mixin(enumMixinStr_LN_des_ede3_cbc);
        }
    }




    static if(!is(typeof(NID_des_ede3_cbc))) {
        private enum enumMixinStr_NID_des_ede3_cbc = `enum NID_des_ede3_cbc = 44;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_des_ede3_cbc); }))) {
            mixin(enumMixinStr_NID_des_ede3_cbc);
        }
    }




    static if(!is(typeof(OBJ_des_ede3_cbc))) {
        private enum enumMixinStr_OBJ_des_ede3_cbc = `enum OBJ_des_ede3_cbc = 1L , 2L , 840L , 113549L , 3L , 7L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_des_ede3_cbc); }))) {
            mixin(enumMixinStr_OBJ_des_ede3_cbc);
        }
    }




    static if(!is(typeof(SN_rc5_cbc))) {
        private enum enumMixinStr_SN_rc5_cbc = `enum SN_rc5_cbc = "RC5-CBC";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_rc5_cbc); }))) {
            mixin(enumMixinStr_SN_rc5_cbc);
        }
    }




    static if(!is(typeof(LN_rc5_cbc))) {
        private enum enumMixinStr_LN_rc5_cbc = `enum LN_rc5_cbc = "rc5-cbc";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_rc5_cbc); }))) {
            mixin(enumMixinStr_LN_rc5_cbc);
        }
    }




    static if(!is(typeof(NID_rc5_cbc))) {
        private enum enumMixinStr_NID_rc5_cbc = `enum NID_rc5_cbc = 120;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_rc5_cbc); }))) {
            mixin(enumMixinStr_NID_rc5_cbc);
        }
    }




    static if(!is(typeof(OBJ_rc5_cbc))) {
        private enum enumMixinStr_OBJ_rc5_cbc = `enum OBJ_rc5_cbc = 1L , 2L , 840L , 113549L , 3L , 8L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_rc5_cbc); }))) {
            mixin(enumMixinStr_OBJ_rc5_cbc);
        }
    }




    static if(!is(typeof(SN_rc5_ecb))) {
        private enum enumMixinStr_SN_rc5_ecb = `enum SN_rc5_ecb = "RC5-ECB";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_rc5_ecb); }))) {
            mixin(enumMixinStr_SN_rc5_ecb);
        }
    }




    static if(!is(typeof(LN_rc5_ecb))) {
        private enum enumMixinStr_LN_rc5_ecb = `enum LN_rc5_ecb = "rc5-ecb";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_rc5_ecb); }))) {
            mixin(enumMixinStr_LN_rc5_ecb);
        }
    }




    static if(!is(typeof(NID_rc5_ecb))) {
        private enum enumMixinStr_NID_rc5_ecb = `enum NID_rc5_ecb = 121;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_rc5_ecb); }))) {
            mixin(enumMixinStr_NID_rc5_ecb);
        }
    }




    static if(!is(typeof(SN_rc5_cfb64))) {
        private enum enumMixinStr_SN_rc5_cfb64 = `enum SN_rc5_cfb64 = "RC5-CFB";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_rc5_cfb64); }))) {
            mixin(enumMixinStr_SN_rc5_cfb64);
        }
    }




    static if(!is(typeof(LN_rc5_cfb64))) {
        private enum enumMixinStr_LN_rc5_cfb64 = `enum LN_rc5_cfb64 = "rc5-cfb";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_rc5_cfb64); }))) {
            mixin(enumMixinStr_LN_rc5_cfb64);
        }
    }




    static if(!is(typeof(NID_rc5_cfb64))) {
        private enum enumMixinStr_NID_rc5_cfb64 = `enum NID_rc5_cfb64 = 122;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_rc5_cfb64); }))) {
            mixin(enumMixinStr_NID_rc5_cfb64);
        }
    }




    static if(!is(typeof(SN_rc5_ofb64))) {
        private enum enumMixinStr_SN_rc5_ofb64 = `enum SN_rc5_ofb64 = "RC5-OFB";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_rc5_ofb64); }))) {
            mixin(enumMixinStr_SN_rc5_ofb64);
        }
    }




    static if(!is(typeof(LN_rc5_ofb64))) {
        private enum enumMixinStr_LN_rc5_ofb64 = `enum LN_rc5_ofb64 = "rc5-ofb";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_rc5_ofb64); }))) {
            mixin(enumMixinStr_LN_rc5_ofb64);
        }
    }




    static if(!is(typeof(NID_rc5_ofb64))) {
        private enum enumMixinStr_NID_rc5_ofb64 = `enum NID_rc5_ofb64 = 123;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_rc5_ofb64); }))) {
            mixin(enumMixinStr_NID_rc5_ofb64);
        }
    }




    static if(!is(typeof(SN_ms_ext_req))) {
        private enum enumMixinStr_SN_ms_ext_req = `enum SN_ms_ext_req = "msExtReq";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_ms_ext_req); }))) {
            mixin(enumMixinStr_SN_ms_ext_req);
        }
    }




    static if(!is(typeof(LN_ms_ext_req))) {
        private enum enumMixinStr_LN_ms_ext_req = `enum LN_ms_ext_req = "Microsoft Extension Request";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_ms_ext_req); }))) {
            mixin(enumMixinStr_LN_ms_ext_req);
        }
    }




    static if(!is(typeof(NID_ms_ext_req))) {
        private enum enumMixinStr_NID_ms_ext_req = `enum NID_ms_ext_req = 171;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_ms_ext_req); }))) {
            mixin(enumMixinStr_NID_ms_ext_req);
        }
    }




    static if(!is(typeof(OBJ_ms_ext_req))) {
        private enum enumMixinStr_OBJ_ms_ext_req = `enum OBJ_ms_ext_req = 1L , 3L , 6L , 1L , 4L , 1L , 311L , 2L , 1L , 14L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_ms_ext_req); }))) {
            mixin(enumMixinStr_OBJ_ms_ext_req);
        }
    }




    static if(!is(typeof(SN_ms_code_ind))) {
        private enum enumMixinStr_SN_ms_code_ind = `enum SN_ms_code_ind = "msCodeInd";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_ms_code_ind); }))) {
            mixin(enumMixinStr_SN_ms_code_ind);
        }
    }




    static if(!is(typeof(LN_ms_code_ind))) {
        private enum enumMixinStr_LN_ms_code_ind = `enum LN_ms_code_ind = "Microsoft Individual Code Signing";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_ms_code_ind); }))) {
            mixin(enumMixinStr_LN_ms_code_ind);
        }
    }




    static if(!is(typeof(NID_ms_code_ind))) {
        private enum enumMixinStr_NID_ms_code_ind = `enum NID_ms_code_ind = 134;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_ms_code_ind); }))) {
            mixin(enumMixinStr_NID_ms_code_ind);
        }
    }




    static if(!is(typeof(OBJ_ms_code_ind))) {
        private enum enumMixinStr_OBJ_ms_code_ind = `enum OBJ_ms_code_ind = 1L , 3L , 6L , 1L , 4L , 1L , 311L , 2L , 1L , 21L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_ms_code_ind); }))) {
            mixin(enumMixinStr_OBJ_ms_code_ind);
        }
    }




    static if(!is(typeof(SN_ms_code_com))) {
        private enum enumMixinStr_SN_ms_code_com = `enum SN_ms_code_com = "msCodeCom";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_ms_code_com); }))) {
            mixin(enumMixinStr_SN_ms_code_com);
        }
    }




    static if(!is(typeof(LN_ms_code_com))) {
        private enum enumMixinStr_LN_ms_code_com = `enum LN_ms_code_com = "Microsoft Commercial Code Signing";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_ms_code_com); }))) {
            mixin(enumMixinStr_LN_ms_code_com);
        }
    }




    static if(!is(typeof(NID_ms_code_com))) {
        private enum enumMixinStr_NID_ms_code_com = `enum NID_ms_code_com = 135;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_ms_code_com); }))) {
            mixin(enumMixinStr_NID_ms_code_com);
        }
    }




    static if(!is(typeof(OBJ_ms_code_com))) {
        private enum enumMixinStr_OBJ_ms_code_com = `enum OBJ_ms_code_com = 1L , 3L , 6L , 1L , 4L , 1L , 311L , 2L , 1L , 22L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_ms_code_com); }))) {
            mixin(enumMixinStr_OBJ_ms_code_com);
        }
    }




    static if(!is(typeof(SN_ms_ctl_sign))) {
        private enum enumMixinStr_SN_ms_ctl_sign = `enum SN_ms_ctl_sign = "msCTLSign";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_ms_ctl_sign); }))) {
            mixin(enumMixinStr_SN_ms_ctl_sign);
        }
    }




    static if(!is(typeof(LN_ms_ctl_sign))) {
        private enum enumMixinStr_LN_ms_ctl_sign = `enum LN_ms_ctl_sign = "Microsoft Trust List Signing";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_ms_ctl_sign); }))) {
            mixin(enumMixinStr_LN_ms_ctl_sign);
        }
    }




    static if(!is(typeof(NID_ms_ctl_sign))) {
        private enum enumMixinStr_NID_ms_ctl_sign = `enum NID_ms_ctl_sign = 136;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_ms_ctl_sign); }))) {
            mixin(enumMixinStr_NID_ms_ctl_sign);
        }
    }




    static if(!is(typeof(OBJ_ms_ctl_sign))) {
        private enum enumMixinStr_OBJ_ms_ctl_sign = `enum OBJ_ms_ctl_sign = 1L , 3L , 6L , 1L , 4L , 1L , 311L , 10L , 3L , 1L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_ms_ctl_sign); }))) {
            mixin(enumMixinStr_OBJ_ms_ctl_sign);
        }
    }




    static if(!is(typeof(SN_ms_sgc))) {
        private enum enumMixinStr_SN_ms_sgc = `enum SN_ms_sgc = "msSGC";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_ms_sgc); }))) {
            mixin(enumMixinStr_SN_ms_sgc);
        }
    }




    static if(!is(typeof(LN_ms_sgc))) {
        private enum enumMixinStr_LN_ms_sgc = `enum LN_ms_sgc = "Microsoft Server Gated Crypto";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_ms_sgc); }))) {
            mixin(enumMixinStr_LN_ms_sgc);
        }
    }




    static if(!is(typeof(NID_ms_sgc))) {
        private enum enumMixinStr_NID_ms_sgc = `enum NID_ms_sgc = 137;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_ms_sgc); }))) {
            mixin(enumMixinStr_NID_ms_sgc);
        }
    }




    static if(!is(typeof(OBJ_ms_sgc))) {
        private enum enumMixinStr_OBJ_ms_sgc = `enum OBJ_ms_sgc = 1L , 3L , 6L , 1L , 4L , 1L , 311L , 10L , 3L , 3L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_ms_sgc); }))) {
            mixin(enumMixinStr_OBJ_ms_sgc);
        }
    }




    static if(!is(typeof(SN_ms_efs))) {
        private enum enumMixinStr_SN_ms_efs = `enum SN_ms_efs = "msEFS";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_ms_efs); }))) {
            mixin(enumMixinStr_SN_ms_efs);
        }
    }




    static if(!is(typeof(LN_ms_efs))) {
        private enum enumMixinStr_LN_ms_efs = `enum LN_ms_efs = "Microsoft Encrypted File System";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_ms_efs); }))) {
            mixin(enumMixinStr_LN_ms_efs);
        }
    }




    static if(!is(typeof(NID_ms_efs))) {
        private enum enumMixinStr_NID_ms_efs = `enum NID_ms_efs = 138;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_ms_efs); }))) {
            mixin(enumMixinStr_NID_ms_efs);
        }
    }




    static if(!is(typeof(OBJ_ms_efs))) {
        private enum enumMixinStr_OBJ_ms_efs = `enum OBJ_ms_efs = 1L , 3L , 6L , 1L , 4L , 1L , 311L , 10L , 3L , 4L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_ms_efs); }))) {
            mixin(enumMixinStr_OBJ_ms_efs);
        }
    }




    static if(!is(typeof(SN_ms_smartcard_login))) {
        private enum enumMixinStr_SN_ms_smartcard_login = `enum SN_ms_smartcard_login = "msSmartcardLogin";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_ms_smartcard_login); }))) {
            mixin(enumMixinStr_SN_ms_smartcard_login);
        }
    }




    static if(!is(typeof(LN_ms_smartcard_login))) {
        private enum enumMixinStr_LN_ms_smartcard_login = `enum LN_ms_smartcard_login = "Microsoft Smartcard Login";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_ms_smartcard_login); }))) {
            mixin(enumMixinStr_LN_ms_smartcard_login);
        }
    }




    static if(!is(typeof(NID_ms_smartcard_login))) {
        private enum enumMixinStr_NID_ms_smartcard_login = `enum NID_ms_smartcard_login = 648;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_ms_smartcard_login); }))) {
            mixin(enumMixinStr_NID_ms_smartcard_login);
        }
    }




    static if(!is(typeof(OBJ_ms_smartcard_login))) {
        private enum enumMixinStr_OBJ_ms_smartcard_login = `enum OBJ_ms_smartcard_login = 1L , 3L , 6L , 1L , 4L , 1L , 311L , 20L , 2L , 2L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_ms_smartcard_login); }))) {
            mixin(enumMixinStr_OBJ_ms_smartcard_login);
        }
    }




    static if(!is(typeof(SN_ms_upn))) {
        private enum enumMixinStr_SN_ms_upn = `enum SN_ms_upn = "msUPN";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_ms_upn); }))) {
            mixin(enumMixinStr_SN_ms_upn);
        }
    }




    static if(!is(typeof(LN_ms_upn))) {
        private enum enumMixinStr_LN_ms_upn = `enum LN_ms_upn = "Microsoft User Principal Name";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_ms_upn); }))) {
            mixin(enumMixinStr_LN_ms_upn);
        }
    }




    static if(!is(typeof(NID_ms_upn))) {
        private enum enumMixinStr_NID_ms_upn = `enum NID_ms_upn = 649;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_ms_upn); }))) {
            mixin(enumMixinStr_NID_ms_upn);
        }
    }




    static if(!is(typeof(OBJ_ms_upn))) {
        private enum enumMixinStr_OBJ_ms_upn = `enum OBJ_ms_upn = 1L , 3L , 6L , 1L , 4L , 1L , 311L , 20L , 2L , 3L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_ms_upn); }))) {
            mixin(enumMixinStr_OBJ_ms_upn);
        }
    }




    static if(!is(typeof(SN_idea_cbc))) {
        private enum enumMixinStr_SN_idea_cbc = `enum SN_idea_cbc = "IDEA-CBC";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_idea_cbc); }))) {
            mixin(enumMixinStr_SN_idea_cbc);
        }
    }




    static if(!is(typeof(LN_idea_cbc))) {
        private enum enumMixinStr_LN_idea_cbc = `enum LN_idea_cbc = "idea-cbc";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_idea_cbc); }))) {
            mixin(enumMixinStr_LN_idea_cbc);
        }
    }




    static if(!is(typeof(NID_idea_cbc))) {
        private enum enumMixinStr_NID_idea_cbc = `enum NID_idea_cbc = 34;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_idea_cbc); }))) {
            mixin(enumMixinStr_NID_idea_cbc);
        }
    }




    static if(!is(typeof(OBJ_idea_cbc))) {
        private enum enumMixinStr_OBJ_idea_cbc = `enum OBJ_idea_cbc = 1L , 3L , 6L , 1L , 4L , 1L , 188L , 7L , 1L , 1L , 2L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_idea_cbc); }))) {
            mixin(enumMixinStr_OBJ_idea_cbc);
        }
    }




    static if(!is(typeof(SN_idea_ecb))) {
        private enum enumMixinStr_SN_idea_ecb = `enum SN_idea_ecb = "IDEA-ECB";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_idea_ecb); }))) {
            mixin(enumMixinStr_SN_idea_ecb);
        }
    }




    static if(!is(typeof(LN_idea_ecb))) {
        private enum enumMixinStr_LN_idea_ecb = `enum LN_idea_ecb = "idea-ecb";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_idea_ecb); }))) {
            mixin(enumMixinStr_LN_idea_ecb);
        }
    }




    static if(!is(typeof(NID_idea_ecb))) {
        private enum enumMixinStr_NID_idea_ecb = `enum NID_idea_ecb = 36;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_idea_ecb); }))) {
            mixin(enumMixinStr_NID_idea_ecb);
        }
    }




    static if(!is(typeof(SN_idea_cfb64))) {
        private enum enumMixinStr_SN_idea_cfb64 = `enum SN_idea_cfb64 = "IDEA-CFB";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_idea_cfb64); }))) {
            mixin(enumMixinStr_SN_idea_cfb64);
        }
    }




    static if(!is(typeof(LN_idea_cfb64))) {
        private enum enumMixinStr_LN_idea_cfb64 = `enum LN_idea_cfb64 = "idea-cfb";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_idea_cfb64); }))) {
            mixin(enumMixinStr_LN_idea_cfb64);
        }
    }




    static if(!is(typeof(NID_idea_cfb64))) {
        private enum enumMixinStr_NID_idea_cfb64 = `enum NID_idea_cfb64 = 35;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_idea_cfb64); }))) {
            mixin(enumMixinStr_NID_idea_cfb64);
        }
    }




    static if(!is(typeof(SN_idea_ofb64))) {
        private enum enumMixinStr_SN_idea_ofb64 = `enum SN_idea_ofb64 = "IDEA-OFB";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_idea_ofb64); }))) {
            mixin(enumMixinStr_SN_idea_ofb64);
        }
    }




    static if(!is(typeof(LN_idea_ofb64))) {
        private enum enumMixinStr_LN_idea_ofb64 = `enum LN_idea_ofb64 = "idea-ofb";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_idea_ofb64); }))) {
            mixin(enumMixinStr_LN_idea_ofb64);
        }
    }




    static if(!is(typeof(NID_idea_ofb64))) {
        private enum enumMixinStr_NID_idea_ofb64 = `enum NID_idea_ofb64 = 46;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_idea_ofb64); }))) {
            mixin(enumMixinStr_NID_idea_ofb64);
        }
    }




    static if(!is(typeof(SN_bf_cbc))) {
        private enum enumMixinStr_SN_bf_cbc = `enum SN_bf_cbc = "BF-CBC";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_bf_cbc); }))) {
            mixin(enumMixinStr_SN_bf_cbc);
        }
    }




    static if(!is(typeof(LN_bf_cbc))) {
        private enum enumMixinStr_LN_bf_cbc = `enum LN_bf_cbc = "bf-cbc";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_bf_cbc); }))) {
            mixin(enumMixinStr_LN_bf_cbc);
        }
    }




    static if(!is(typeof(NID_bf_cbc))) {
        private enum enumMixinStr_NID_bf_cbc = `enum NID_bf_cbc = 91;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_bf_cbc); }))) {
            mixin(enumMixinStr_NID_bf_cbc);
        }
    }




    static if(!is(typeof(OBJ_bf_cbc))) {
        private enum enumMixinStr_OBJ_bf_cbc = `enum OBJ_bf_cbc = 1L , 3L , 6L , 1L , 4L , 1L , 3029L , 1L , 2L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_bf_cbc); }))) {
            mixin(enumMixinStr_OBJ_bf_cbc);
        }
    }




    static if(!is(typeof(SN_bf_ecb))) {
        private enum enumMixinStr_SN_bf_ecb = `enum SN_bf_ecb = "BF-ECB";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_bf_ecb); }))) {
            mixin(enumMixinStr_SN_bf_ecb);
        }
    }




    static if(!is(typeof(LN_bf_ecb))) {
        private enum enumMixinStr_LN_bf_ecb = `enum LN_bf_ecb = "bf-ecb";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_bf_ecb); }))) {
            mixin(enumMixinStr_LN_bf_ecb);
        }
    }




    static if(!is(typeof(NID_bf_ecb))) {
        private enum enumMixinStr_NID_bf_ecb = `enum NID_bf_ecb = 92;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_bf_ecb); }))) {
            mixin(enumMixinStr_NID_bf_ecb);
        }
    }




    static if(!is(typeof(SN_bf_cfb64))) {
        private enum enumMixinStr_SN_bf_cfb64 = `enum SN_bf_cfb64 = "BF-CFB";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_bf_cfb64); }))) {
            mixin(enumMixinStr_SN_bf_cfb64);
        }
    }




    static if(!is(typeof(LN_bf_cfb64))) {
        private enum enumMixinStr_LN_bf_cfb64 = `enum LN_bf_cfb64 = "bf-cfb";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_bf_cfb64); }))) {
            mixin(enumMixinStr_LN_bf_cfb64);
        }
    }




    static if(!is(typeof(NID_bf_cfb64))) {
        private enum enumMixinStr_NID_bf_cfb64 = `enum NID_bf_cfb64 = 93;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_bf_cfb64); }))) {
            mixin(enumMixinStr_NID_bf_cfb64);
        }
    }




    static if(!is(typeof(SN_bf_ofb64))) {
        private enum enumMixinStr_SN_bf_ofb64 = `enum SN_bf_ofb64 = "BF-OFB";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_bf_ofb64); }))) {
            mixin(enumMixinStr_SN_bf_ofb64);
        }
    }




    static if(!is(typeof(LN_bf_ofb64))) {
        private enum enumMixinStr_LN_bf_ofb64 = `enum LN_bf_ofb64 = "bf-ofb";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_bf_ofb64); }))) {
            mixin(enumMixinStr_LN_bf_ofb64);
        }
    }




    static if(!is(typeof(NID_bf_ofb64))) {
        private enum enumMixinStr_NID_bf_ofb64 = `enum NID_bf_ofb64 = 94;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_bf_ofb64); }))) {
            mixin(enumMixinStr_NID_bf_ofb64);
        }
    }




    static if(!is(typeof(SN_id_pkix))) {
        private enum enumMixinStr_SN_id_pkix = `enum SN_id_pkix = "PKIX";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_pkix); }))) {
            mixin(enumMixinStr_SN_id_pkix);
        }
    }




    static if(!is(typeof(NID_id_pkix))) {
        private enum enumMixinStr_NID_id_pkix = `enum NID_id_pkix = 127;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_pkix); }))) {
            mixin(enumMixinStr_NID_id_pkix);
        }
    }




    static if(!is(typeof(OBJ_id_pkix))) {
        private enum enumMixinStr_OBJ_id_pkix = `enum OBJ_id_pkix = 1L , 3L , 6L , 1L , 5L , 5L , 7L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_pkix); }))) {
            mixin(enumMixinStr_OBJ_id_pkix);
        }
    }




    static if(!is(typeof(SN_id_pkix_mod))) {
        private enum enumMixinStr_SN_id_pkix_mod = `enum SN_id_pkix_mod = "id-pkix-mod";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_pkix_mod); }))) {
            mixin(enumMixinStr_SN_id_pkix_mod);
        }
    }




    static if(!is(typeof(NID_id_pkix_mod))) {
        private enum enumMixinStr_NID_id_pkix_mod = `enum NID_id_pkix_mod = 258;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_pkix_mod); }))) {
            mixin(enumMixinStr_NID_id_pkix_mod);
        }
    }




    static if(!is(typeof(OBJ_id_pkix_mod))) {
        private enum enumMixinStr_OBJ_id_pkix_mod = `enum OBJ_id_pkix_mod = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 0L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_pkix_mod); }))) {
            mixin(enumMixinStr_OBJ_id_pkix_mod);
        }
    }




    static if(!is(typeof(SN_id_pe))) {
        private enum enumMixinStr_SN_id_pe = `enum SN_id_pe = "id-pe";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_pe); }))) {
            mixin(enumMixinStr_SN_id_pe);
        }
    }




    static if(!is(typeof(NID_id_pe))) {
        private enum enumMixinStr_NID_id_pe = `enum NID_id_pe = 175;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_pe); }))) {
            mixin(enumMixinStr_NID_id_pe);
        }
    }




    static if(!is(typeof(OBJ_id_pe))) {
        private enum enumMixinStr_OBJ_id_pe = `enum OBJ_id_pe = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 1L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_pe); }))) {
            mixin(enumMixinStr_OBJ_id_pe);
        }
    }




    static if(!is(typeof(SN_id_qt))) {
        private enum enumMixinStr_SN_id_qt = `enum SN_id_qt = "id-qt";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_qt); }))) {
            mixin(enumMixinStr_SN_id_qt);
        }
    }




    static if(!is(typeof(NID_id_qt))) {
        private enum enumMixinStr_NID_id_qt = `enum NID_id_qt = 259;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_qt); }))) {
            mixin(enumMixinStr_NID_id_qt);
        }
    }




    static if(!is(typeof(OBJ_id_qt))) {
        private enum enumMixinStr_OBJ_id_qt = `enum OBJ_id_qt = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 2L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_qt); }))) {
            mixin(enumMixinStr_OBJ_id_qt);
        }
    }




    static if(!is(typeof(SN_id_kp))) {
        private enum enumMixinStr_SN_id_kp = `enum SN_id_kp = "id-kp";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_kp); }))) {
            mixin(enumMixinStr_SN_id_kp);
        }
    }




    static if(!is(typeof(NID_id_kp))) {
        private enum enumMixinStr_NID_id_kp = `enum NID_id_kp = 128;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_kp); }))) {
            mixin(enumMixinStr_NID_id_kp);
        }
    }




    static if(!is(typeof(OBJ_id_kp))) {
        private enum enumMixinStr_OBJ_id_kp = `enum OBJ_id_kp = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 3L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_kp); }))) {
            mixin(enumMixinStr_OBJ_id_kp);
        }
    }




    static if(!is(typeof(SN_id_it))) {
        private enum enumMixinStr_SN_id_it = `enum SN_id_it = "id-it";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_it); }))) {
            mixin(enumMixinStr_SN_id_it);
        }
    }




    static if(!is(typeof(NID_id_it))) {
        private enum enumMixinStr_NID_id_it = `enum NID_id_it = 260;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_it); }))) {
            mixin(enumMixinStr_NID_id_it);
        }
    }




    static if(!is(typeof(OBJ_id_it))) {
        private enum enumMixinStr_OBJ_id_it = `enum OBJ_id_it = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 4L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_it); }))) {
            mixin(enumMixinStr_OBJ_id_it);
        }
    }




    static if(!is(typeof(SN_id_pkip))) {
        private enum enumMixinStr_SN_id_pkip = `enum SN_id_pkip = "id-pkip";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_pkip); }))) {
            mixin(enumMixinStr_SN_id_pkip);
        }
    }




    static if(!is(typeof(NID_id_pkip))) {
        private enum enumMixinStr_NID_id_pkip = `enum NID_id_pkip = 261;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_pkip); }))) {
            mixin(enumMixinStr_NID_id_pkip);
        }
    }




    static if(!is(typeof(OBJ_id_pkip))) {
        private enum enumMixinStr_OBJ_id_pkip = `enum OBJ_id_pkip = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 5L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_pkip); }))) {
            mixin(enumMixinStr_OBJ_id_pkip);
        }
    }




    static if(!is(typeof(SN_id_alg))) {
        private enum enumMixinStr_SN_id_alg = `enum SN_id_alg = "id-alg";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_alg); }))) {
            mixin(enumMixinStr_SN_id_alg);
        }
    }




    static if(!is(typeof(NID_id_alg))) {
        private enum enumMixinStr_NID_id_alg = `enum NID_id_alg = 262;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_alg); }))) {
            mixin(enumMixinStr_NID_id_alg);
        }
    }




    static if(!is(typeof(OBJ_id_alg))) {
        private enum enumMixinStr_OBJ_id_alg = `enum OBJ_id_alg = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 6L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_alg); }))) {
            mixin(enumMixinStr_OBJ_id_alg);
        }
    }




    static if(!is(typeof(SN_id_cmc))) {
        private enum enumMixinStr_SN_id_cmc = `enum SN_id_cmc = "id-cmc";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_cmc); }))) {
            mixin(enumMixinStr_SN_id_cmc);
        }
    }




    static if(!is(typeof(NID_id_cmc))) {
        private enum enumMixinStr_NID_id_cmc = `enum NID_id_cmc = 263;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_cmc); }))) {
            mixin(enumMixinStr_NID_id_cmc);
        }
    }




    static if(!is(typeof(OBJ_id_cmc))) {
        private enum enumMixinStr_OBJ_id_cmc = `enum OBJ_id_cmc = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 7L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_cmc); }))) {
            mixin(enumMixinStr_OBJ_id_cmc);
        }
    }




    static if(!is(typeof(SN_id_on))) {
        private enum enumMixinStr_SN_id_on = `enum SN_id_on = "id-on";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_on); }))) {
            mixin(enumMixinStr_SN_id_on);
        }
    }




    static if(!is(typeof(NID_id_on))) {
        private enum enumMixinStr_NID_id_on = `enum NID_id_on = 264;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_on); }))) {
            mixin(enumMixinStr_NID_id_on);
        }
    }




    static if(!is(typeof(OBJ_id_on))) {
        private enum enumMixinStr_OBJ_id_on = `enum OBJ_id_on = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 8L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_on); }))) {
            mixin(enumMixinStr_OBJ_id_on);
        }
    }




    static if(!is(typeof(SN_id_pda))) {
        private enum enumMixinStr_SN_id_pda = `enum SN_id_pda = "id-pda";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_pda); }))) {
            mixin(enumMixinStr_SN_id_pda);
        }
    }




    static if(!is(typeof(NID_id_pda))) {
        private enum enumMixinStr_NID_id_pda = `enum NID_id_pda = 265;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_pda); }))) {
            mixin(enumMixinStr_NID_id_pda);
        }
    }




    static if(!is(typeof(OBJ_id_pda))) {
        private enum enumMixinStr_OBJ_id_pda = `enum OBJ_id_pda = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 9L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_pda); }))) {
            mixin(enumMixinStr_OBJ_id_pda);
        }
    }




    static if(!is(typeof(SN_id_aca))) {
        private enum enumMixinStr_SN_id_aca = `enum SN_id_aca = "id-aca";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_aca); }))) {
            mixin(enumMixinStr_SN_id_aca);
        }
    }




    static if(!is(typeof(NID_id_aca))) {
        private enum enumMixinStr_NID_id_aca = `enum NID_id_aca = 266;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_aca); }))) {
            mixin(enumMixinStr_NID_id_aca);
        }
    }




    static if(!is(typeof(OBJ_id_aca))) {
        private enum enumMixinStr_OBJ_id_aca = `enum OBJ_id_aca = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 10L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_aca); }))) {
            mixin(enumMixinStr_OBJ_id_aca);
        }
    }




    static if(!is(typeof(SN_id_qcs))) {
        private enum enumMixinStr_SN_id_qcs = `enum SN_id_qcs = "id-qcs";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_qcs); }))) {
            mixin(enumMixinStr_SN_id_qcs);
        }
    }




    static if(!is(typeof(NID_id_qcs))) {
        private enum enumMixinStr_NID_id_qcs = `enum NID_id_qcs = 267;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_qcs); }))) {
            mixin(enumMixinStr_NID_id_qcs);
        }
    }




    static if(!is(typeof(OBJ_id_qcs))) {
        private enum enumMixinStr_OBJ_id_qcs = `enum OBJ_id_qcs = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 11L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_qcs); }))) {
            mixin(enumMixinStr_OBJ_id_qcs);
        }
    }




    static if(!is(typeof(SN_id_cct))) {
        private enum enumMixinStr_SN_id_cct = `enum SN_id_cct = "id-cct";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_cct); }))) {
            mixin(enumMixinStr_SN_id_cct);
        }
    }




    static if(!is(typeof(NID_id_cct))) {
        private enum enumMixinStr_NID_id_cct = `enum NID_id_cct = 268;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_cct); }))) {
            mixin(enumMixinStr_NID_id_cct);
        }
    }




    static if(!is(typeof(OBJ_id_cct))) {
        private enum enumMixinStr_OBJ_id_cct = `enum OBJ_id_cct = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 12L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_cct); }))) {
            mixin(enumMixinStr_OBJ_id_cct);
        }
    }




    static if(!is(typeof(SN_id_ppl))) {
        private enum enumMixinStr_SN_id_ppl = `enum SN_id_ppl = "id-ppl";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_ppl); }))) {
            mixin(enumMixinStr_SN_id_ppl);
        }
    }




    static if(!is(typeof(NID_id_ppl))) {
        private enum enumMixinStr_NID_id_ppl = `enum NID_id_ppl = 662;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_ppl); }))) {
            mixin(enumMixinStr_NID_id_ppl);
        }
    }




    static if(!is(typeof(OBJ_id_ppl))) {
        private enum enumMixinStr_OBJ_id_ppl = `enum OBJ_id_ppl = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 21L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_ppl); }))) {
            mixin(enumMixinStr_OBJ_id_ppl);
        }
    }




    static if(!is(typeof(SN_id_ad))) {
        private enum enumMixinStr_SN_id_ad = `enum SN_id_ad = "id-ad";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_ad); }))) {
            mixin(enumMixinStr_SN_id_ad);
        }
    }




    static if(!is(typeof(NID_id_ad))) {
        private enum enumMixinStr_NID_id_ad = `enum NID_id_ad = 176;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_ad); }))) {
            mixin(enumMixinStr_NID_id_ad);
        }
    }




    static if(!is(typeof(OBJ_id_ad))) {
        private enum enumMixinStr_OBJ_id_ad = `enum OBJ_id_ad = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 48L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_ad); }))) {
            mixin(enumMixinStr_OBJ_id_ad);
        }
    }




    static if(!is(typeof(SN_id_pkix1_explicit_88))) {
        private enum enumMixinStr_SN_id_pkix1_explicit_88 = `enum SN_id_pkix1_explicit_88 = "id-pkix1-explicit-88";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_pkix1_explicit_88); }))) {
            mixin(enumMixinStr_SN_id_pkix1_explicit_88);
        }
    }




    static if(!is(typeof(NID_id_pkix1_explicit_88))) {
        private enum enumMixinStr_NID_id_pkix1_explicit_88 = `enum NID_id_pkix1_explicit_88 = 269;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_pkix1_explicit_88); }))) {
            mixin(enumMixinStr_NID_id_pkix1_explicit_88);
        }
    }




    static if(!is(typeof(OBJ_id_pkix1_explicit_88))) {
        private enum enumMixinStr_OBJ_id_pkix1_explicit_88 = `enum OBJ_id_pkix1_explicit_88 = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 0L , 1L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_pkix1_explicit_88); }))) {
            mixin(enumMixinStr_OBJ_id_pkix1_explicit_88);
        }
    }




    static if(!is(typeof(SN_id_pkix1_implicit_88))) {
        private enum enumMixinStr_SN_id_pkix1_implicit_88 = `enum SN_id_pkix1_implicit_88 = "id-pkix1-implicit-88";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_pkix1_implicit_88); }))) {
            mixin(enumMixinStr_SN_id_pkix1_implicit_88);
        }
    }




    static if(!is(typeof(NID_id_pkix1_implicit_88))) {
        private enum enumMixinStr_NID_id_pkix1_implicit_88 = `enum NID_id_pkix1_implicit_88 = 270;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_pkix1_implicit_88); }))) {
            mixin(enumMixinStr_NID_id_pkix1_implicit_88);
        }
    }




    static if(!is(typeof(OBJ_id_pkix1_implicit_88))) {
        private enum enumMixinStr_OBJ_id_pkix1_implicit_88 = `enum OBJ_id_pkix1_implicit_88 = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 0L , 2L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_pkix1_implicit_88); }))) {
            mixin(enumMixinStr_OBJ_id_pkix1_implicit_88);
        }
    }




    static if(!is(typeof(SN_id_pkix1_explicit_93))) {
        private enum enumMixinStr_SN_id_pkix1_explicit_93 = `enum SN_id_pkix1_explicit_93 = "id-pkix1-explicit-93";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_pkix1_explicit_93); }))) {
            mixin(enumMixinStr_SN_id_pkix1_explicit_93);
        }
    }




    static if(!is(typeof(NID_id_pkix1_explicit_93))) {
        private enum enumMixinStr_NID_id_pkix1_explicit_93 = `enum NID_id_pkix1_explicit_93 = 271;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_pkix1_explicit_93); }))) {
            mixin(enumMixinStr_NID_id_pkix1_explicit_93);
        }
    }




    static if(!is(typeof(OBJ_id_pkix1_explicit_93))) {
        private enum enumMixinStr_OBJ_id_pkix1_explicit_93 = `enum OBJ_id_pkix1_explicit_93 = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 0L , 3L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_pkix1_explicit_93); }))) {
            mixin(enumMixinStr_OBJ_id_pkix1_explicit_93);
        }
    }




    static if(!is(typeof(SN_id_pkix1_implicit_93))) {
        private enum enumMixinStr_SN_id_pkix1_implicit_93 = `enum SN_id_pkix1_implicit_93 = "id-pkix1-implicit-93";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_pkix1_implicit_93); }))) {
            mixin(enumMixinStr_SN_id_pkix1_implicit_93);
        }
    }




    static if(!is(typeof(NID_id_pkix1_implicit_93))) {
        private enum enumMixinStr_NID_id_pkix1_implicit_93 = `enum NID_id_pkix1_implicit_93 = 272;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_pkix1_implicit_93); }))) {
            mixin(enumMixinStr_NID_id_pkix1_implicit_93);
        }
    }




    static if(!is(typeof(OBJ_id_pkix1_implicit_93))) {
        private enum enumMixinStr_OBJ_id_pkix1_implicit_93 = `enum OBJ_id_pkix1_implicit_93 = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 0L , 4L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_pkix1_implicit_93); }))) {
            mixin(enumMixinStr_OBJ_id_pkix1_implicit_93);
        }
    }




    static if(!is(typeof(SN_id_mod_crmf))) {
        private enum enumMixinStr_SN_id_mod_crmf = `enum SN_id_mod_crmf = "id-mod-crmf";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_mod_crmf); }))) {
            mixin(enumMixinStr_SN_id_mod_crmf);
        }
    }




    static if(!is(typeof(NID_id_mod_crmf))) {
        private enum enumMixinStr_NID_id_mod_crmf = `enum NID_id_mod_crmf = 273;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_mod_crmf); }))) {
            mixin(enumMixinStr_NID_id_mod_crmf);
        }
    }




    static if(!is(typeof(OBJ_id_mod_crmf))) {
        private enum enumMixinStr_OBJ_id_mod_crmf = `enum OBJ_id_mod_crmf = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 0L , 5L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_mod_crmf); }))) {
            mixin(enumMixinStr_OBJ_id_mod_crmf);
        }
    }




    static if(!is(typeof(SN_id_mod_cmc))) {
        private enum enumMixinStr_SN_id_mod_cmc = `enum SN_id_mod_cmc = "id-mod-cmc";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_mod_cmc); }))) {
            mixin(enumMixinStr_SN_id_mod_cmc);
        }
    }




    static if(!is(typeof(NID_id_mod_cmc))) {
        private enum enumMixinStr_NID_id_mod_cmc = `enum NID_id_mod_cmc = 274;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_mod_cmc); }))) {
            mixin(enumMixinStr_NID_id_mod_cmc);
        }
    }




    static if(!is(typeof(OBJ_id_mod_cmc))) {
        private enum enumMixinStr_OBJ_id_mod_cmc = `enum OBJ_id_mod_cmc = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 0L , 6L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_mod_cmc); }))) {
            mixin(enumMixinStr_OBJ_id_mod_cmc);
        }
    }




    static if(!is(typeof(SN_id_mod_kea_profile_88))) {
        private enum enumMixinStr_SN_id_mod_kea_profile_88 = `enum SN_id_mod_kea_profile_88 = "id-mod-kea-profile-88";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_mod_kea_profile_88); }))) {
            mixin(enumMixinStr_SN_id_mod_kea_profile_88);
        }
    }




    static if(!is(typeof(NID_id_mod_kea_profile_88))) {
        private enum enumMixinStr_NID_id_mod_kea_profile_88 = `enum NID_id_mod_kea_profile_88 = 275;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_mod_kea_profile_88); }))) {
            mixin(enumMixinStr_NID_id_mod_kea_profile_88);
        }
    }




    static if(!is(typeof(OBJ_id_mod_kea_profile_88))) {
        private enum enumMixinStr_OBJ_id_mod_kea_profile_88 = `enum OBJ_id_mod_kea_profile_88 = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 0L , 7L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_mod_kea_profile_88); }))) {
            mixin(enumMixinStr_OBJ_id_mod_kea_profile_88);
        }
    }




    static if(!is(typeof(SN_id_mod_kea_profile_93))) {
        private enum enumMixinStr_SN_id_mod_kea_profile_93 = `enum SN_id_mod_kea_profile_93 = "id-mod-kea-profile-93";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_mod_kea_profile_93); }))) {
            mixin(enumMixinStr_SN_id_mod_kea_profile_93);
        }
    }




    static if(!is(typeof(NID_id_mod_kea_profile_93))) {
        private enum enumMixinStr_NID_id_mod_kea_profile_93 = `enum NID_id_mod_kea_profile_93 = 276;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_mod_kea_profile_93); }))) {
            mixin(enumMixinStr_NID_id_mod_kea_profile_93);
        }
    }




    static if(!is(typeof(OBJ_id_mod_kea_profile_93))) {
        private enum enumMixinStr_OBJ_id_mod_kea_profile_93 = `enum OBJ_id_mod_kea_profile_93 = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 0L , 8L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_mod_kea_profile_93); }))) {
            mixin(enumMixinStr_OBJ_id_mod_kea_profile_93);
        }
    }




    static if(!is(typeof(SN_id_mod_cmp))) {
        private enum enumMixinStr_SN_id_mod_cmp = `enum SN_id_mod_cmp = "id-mod-cmp";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_mod_cmp); }))) {
            mixin(enumMixinStr_SN_id_mod_cmp);
        }
    }




    static if(!is(typeof(NID_id_mod_cmp))) {
        private enum enumMixinStr_NID_id_mod_cmp = `enum NID_id_mod_cmp = 277;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_mod_cmp); }))) {
            mixin(enumMixinStr_NID_id_mod_cmp);
        }
    }




    static if(!is(typeof(OBJ_id_mod_cmp))) {
        private enum enumMixinStr_OBJ_id_mod_cmp = `enum OBJ_id_mod_cmp = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 0L , 9L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_mod_cmp); }))) {
            mixin(enumMixinStr_OBJ_id_mod_cmp);
        }
    }




    static if(!is(typeof(SN_id_mod_qualified_cert_88))) {
        private enum enumMixinStr_SN_id_mod_qualified_cert_88 = `enum SN_id_mod_qualified_cert_88 = "id-mod-qualified-cert-88";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_mod_qualified_cert_88); }))) {
            mixin(enumMixinStr_SN_id_mod_qualified_cert_88);
        }
    }




    static if(!is(typeof(NID_id_mod_qualified_cert_88))) {
        private enum enumMixinStr_NID_id_mod_qualified_cert_88 = `enum NID_id_mod_qualified_cert_88 = 278;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_mod_qualified_cert_88); }))) {
            mixin(enumMixinStr_NID_id_mod_qualified_cert_88);
        }
    }




    static if(!is(typeof(OBJ_id_mod_qualified_cert_88))) {
        private enum enumMixinStr_OBJ_id_mod_qualified_cert_88 = `enum OBJ_id_mod_qualified_cert_88 = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 0L , 10L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_mod_qualified_cert_88); }))) {
            mixin(enumMixinStr_OBJ_id_mod_qualified_cert_88);
        }
    }




    static if(!is(typeof(SN_id_mod_qualified_cert_93))) {
        private enum enumMixinStr_SN_id_mod_qualified_cert_93 = `enum SN_id_mod_qualified_cert_93 = "id-mod-qualified-cert-93";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_mod_qualified_cert_93); }))) {
            mixin(enumMixinStr_SN_id_mod_qualified_cert_93);
        }
    }




    static if(!is(typeof(NID_id_mod_qualified_cert_93))) {
        private enum enumMixinStr_NID_id_mod_qualified_cert_93 = `enum NID_id_mod_qualified_cert_93 = 279;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_mod_qualified_cert_93); }))) {
            mixin(enumMixinStr_NID_id_mod_qualified_cert_93);
        }
    }




    static if(!is(typeof(OBJ_id_mod_qualified_cert_93))) {
        private enum enumMixinStr_OBJ_id_mod_qualified_cert_93 = `enum OBJ_id_mod_qualified_cert_93 = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 0L , 11L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_mod_qualified_cert_93); }))) {
            mixin(enumMixinStr_OBJ_id_mod_qualified_cert_93);
        }
    }




    static if(!is(typeof(SN_id_mod_attribute_cert))) {
        private enum enumMixinStr_SN_id_mod_attribute_cert = `enum SN_id_mod_attribute_cert = "id-mod-attribute-cert";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_mod_attribute_cert); }))) {
            mixin(enumMixinStr_SN_id_mod_attribute_cert);
        }
    }




    static if(!is(typeof(NID_id_mod_attribute_cert))) {
        private enum enumMixinStr_NID_id_mod_attribute_cert = `enum NID_id_mod_attribute_cert = 280;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_mod_attribute_cert); }))) {
            mixin(enumMixinStr_NID_id_mod_attribute_cert);
        }
    }




    static if(!is(typeof(OBJ_id_mod_attribute_cert))) {
        private enum enumMixinStr_OBJ_id_mod_attribute_cert = `enum OBJ_id_mod_attribute_cert = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 0L , 12L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_mod_attribute_cert); }))) {
            mixin(enumMixinStr_OBJ_id_mod_attribute_cert);
        }
    }




    static if(!is(typeof(SN_id_mod_timestamp_protocol))) {
        private enum enumMixinStr_SN_id_mod_timestamp_protocol = `enum SN_id_mod_timestamp_protocol = "id-mod-timestamp-protocol";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_mod_timestamp_protocol); }))) {
            mixin(enumMixinStr_SN_id_mod_timestamp_protocol);
        }
    }




    static if(!is(typeof(NID_id_mod_timestamp_protocol))) {
        private enum enumMixinStr_NID_id_mod_timestamp_protocol = `enum NID_id_mod_timestamp_protocol = 281;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_mod_timestamp_protocol); }))) {
            mixin(enumMixinStr_NID_id_mod_timestamp_protocol);
        }
    }




    static if(!is(typeof(OBJ_id_mod_timestamp_protocol))) {
        private enum enumMixinStr_OBJ_id_mod_timestamp_protocol = `enum OBJ_id_mod_timestamp_protocol = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 0L , 13L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_mod_timestamp_protocol); }))) {
            mixin(enumMixinStr_OBJ_id_mod_timestamp_protocol);
        }
    }




    static if(!is(typeof(SN_id_mod_ocsp))) {
        private enum enumMixinStr_SN_id_mod_ocsp = `enum SN_id_mod_ocsp = "id-mod-ocsp";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_mod_ocsp); }))) {
            mixin(enumMixinStr_SN_id_mod_ocsp);
        }
    }




    static if(!is(typeof(NID_id_mod_ocsp))) {
        private enum enumMixinStr_NID_id_mod_ocsp = `enum NID_id_mod_ocsp = 282;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_mod_ocsp); }))) {
            mixin(enumMixinStr_NID_id_mod_ocsp);
        }
    }




    static if(!is(typeof(OBJ_id_mod_ocsp))) {
        private enum enumMixinStr_OBJ_id_mod_ocsp = `enum OBJ_id_mod_ocsp = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 0L , 14L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_mod_ocsp); }))) {
            mixin(enumMixinStr_OBJ_id_mod_ocsp);
        }
    }




    static if(!is(typeof(SN_id_mod_dvcs))) {
        private enum enumMixinStr_SN_id_mod_dvcs = `enum SN_id_mod_dvcs = "id-mod-dvcs";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_mod_dvcs); }))) {
            mixin(enumMixinStr_SN_id_mod_dvcs);
        }
    }




    static if(!is(typeof(NID_id_mod_dvcs))) {
        private enum enumMixinStr_NID_id_mod_dvcs = `enum NID_id_mod_dvcs = 283;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_mod_dvcs); }))) {
            mixin(enumMixinStr_NID_id_mod_dvcs);
        }
    }




    static if(!is(typeof(OBJ_id_mod_dvcs))) {
        private enum enumMixinStr_OBJ_id_mod_dvcs = `enum OBJ_id_mod_dvcs = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 0L , 15L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_mod_dvcs); }))) {
            mixin(enumMixinStr_OBJ_id_mod_dvcs);
        }
    }




    static if(!is(typeof(SN_id_mod_cmp2000))) {
        private enum enumMixinStr_SN_id_mod_cmp2000 = `enum SN_id_mod_cmp2000 = "id-mod-cmp2000";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_mod_cmp2000); }))) {
            mixin(enumMixinStr_SN_id_mod_cmp2000);
        }
    }




    static if(!is(typeof(NID_id_mod_cmp2000))) {
        private enum enumMixinStr_NID_id_mod_cmp2000 = `enum NID_id_mod_cmp2000 = 284;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_mod_cmp2000); }))) {
            mixin(enumMixinStr_NID_id_mod_cmp2000);
        }
    }




    static if(!is(typeof(OBJ_id_mod_cmp2000))) {
        private enum enumMixinStr_OBJ_id_mod_cmp2000 = `enum OBJ_id_mod_cmp2000 = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 0L , 16L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_mod_cmp2000); }))) {
            mixin(enumMixinStr_OBJ_id_mod_cmp2000);
        }
    }




    static if(!is(typeof(SN_info_access))) {
        private enum enumMixinStr_SN_info_access = `enum SN_info_access = "authorityInfoAccess";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_info_access); }))) {
            mixin(enumMixinStr_SN_info_access);
        }
    }




    static if(!is(typeof(LN_info_access))) {
        private enum enumMixinStr_LN_info_access = `enum LN_info_access = "Authority Information Access";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_info_access); }))) {
            mixin(enumMixinStr_LN_info_access);
        }
    }




    static if(!is(typeof(NID_info_access))) {
        private enum enumMixinStr_NID_info_access = `enum NID_info_access = 177;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_info_access); }))) {
            mixin(enumMixinStr_NID_info_access);
        }
    }




    static if(!is(typeof(OBJ_info_access))) {
        private enum enumMixinStr_OBJ_info_access = `enum OBJ_info_access = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 1L , 1L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_info_access); }))) {
            mixin(enumMixinStr_OBJ_info_access);
        }
    }




    static if(!is(typeof(SN_biometricInfo))) {
        private enum enumMixinStr_SN_biometricInfo = `enum SN_biometricInfo = "biometricInfo";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_biometricInfo); }))) {
            mixin(enumMixinStr_SN_biometricInfo);
        }
    }




    static if(!is(typeof(LN_biometricInfo))) {
        private enum enumMixinStr_LN_biometricInfo = `enum LN_biometricInfo = "Biometric Info";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_biometricInfo); }))) {
            mixin(enumMixinStr_LN_biometricInfo);
        }
    }




    static if(!is(typeof(NID_biometricInfo))) {
        private enum enumMixinStr_NID_biometricInfo = `enum NID_biometricInfo = 285;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_biometricInfo); }))) {
            mixin(enumMixinStr_NID_biometricInfo);
        }
    }




    static if(!is(typeof(OBJ_biometricInfo))) {
        private enum enumMixinStr_OBJ_biometricInfo = `enum OBJ_biometricInfo = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 1L , 2L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_biometricInfo); }))) {
            mixin(enumMixinStr_OBJ_biometricInfo);
        }
    }




    static if(!is(typeof(SN_qcStatements))) {
        private enum enumMixinStr_SN_qcStatements = `enum SN_qcStatements = "qcStatements";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_qcStatements); }))) {
            mixin(enumMixinStr_SN_qcStatements);
        }
    }




    static if(!is(typeof(NID_qcStatements))) {
        private enum enumMixinStr_NID_qcStatements = `enum NID_qcStatements = 286;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_qcStatements); }))) {
            mixin(enumMixinStr_NID_qcStatements);
        }
    }




    static if(!is(typeof(OBJ_qcStatements))) {
        private enum enumMixinStr_OBJ_qcStatements = `enum OBJ_qcStatements = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 1L , 3L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_qcStatements); }))) {
            mixin(enumMixinStr_OBJ_qcStatements);
        }
    }




    static if(!is(typeof(SN_ac_auditEntity))) {
        private enum enumMixinStr_SN_ac_auditEntity = `enum SN_ac_auditEntity = "ac-auditEntity";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_ac_auditEntity); }))) {
            mixin(enumMixinStr_SN_ac_auditEntity);
        }
    }




    static if(!is(typeof(NID_ac_auditEntity))) {
        private enum enumMixinStr_NID_ac_auditEntity = `enum NID_ac_auditEntity = 287;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_ac_auditEntity); }))) {
            mixin(enumMixinStr_NID_ac_auditEntity);
        }
    }




    static if(!is(typeof(OBJ_ac_auditEntity))) {
        private enum enumMixinStr_OBJ_ac_auditEntity = `enum OBJ_ac_auditEntity = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 1L , 4L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_ac_auditEntity); }))) {
            mixin(enumMixinStr_OBJ_ac_auditEntity);
        }
    }




    static if(!is(typeof(SN_ac_targeting))) {
        private enum enumMixinStr_SN_ac_targeting = `enum SN_ac_targeting = "ac-targeting";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_ac_targeting); }))) {
            mixin(enumMixinStr_SN_ac_targeting);
        }
    }




    static if(!is(typeof(NID_ac_targeting))) {
        private enum enumMixinStr_NID_ac_targeting = `enum NID_ac_targeting = 288;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_ac_targeting); }))) {
            mixin(enumMixinStr_NID_ac_targeting);
        }
    }




    static if(!is(typeof(OBJ_ac_targeting))) {
        private enum enumMixinStr_OBJ_ac_targeting = `enum OBJ_ac_targeting = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 1L , 5L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_ac_targeting); }))) {
            mixin(enumMixinStr_OBJ_ac_targeting);
        }
    }




    static if(!is(typeof(SN_aaControls))) {
        private enum enumMixinStr_SN_aaControls = `enum SN_aaControls = "aaControls";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_aaControls); }))) {
            mixin(enumMixinStr_SN_aaControls);
        }
    }




    static if(!is(typeof(NID_aaControls))) {
        private enum enumMixinStr_NID_aaControls = `enum NID_aaControls = 289;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_aaControls); }))) {
            mixin(enumMixinStr_NID_aaControls);
        }
    }




    static if(!is(typeof(OBJ_aaControls))) {
        private enum enumMixinStr_OBJ_aaControls = `enum OBJ_aaControls = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 1L , 6L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_aaControls); }))) {
            mixin(enumMixinStr_OBJ_aaControls);
        }
    }




    static if(!is(typeof(SN_sbgp_ipAddrBlock))) {
        private enum enumMixinStr_SN_sbgp_ipAddrBlock = `enum SN_sbgp_ipAddrBlock = "sbgp-ipAddrBlock";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_sbgp_ipAddrBlock); }))) {
            mixin(enumMixinStr_SN_sbgp_ipAddrBlock);
        }
    }




    static if(!is(typeof(NID_sbgp_ipAddrBlock))) {
        private enum enumMixinStr_NID_sbgp_ipAddrBlock = `enum NID_sbgp_ipAddrBlock = 290;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_sbgp_ipAddrBlock); }))) {
            mixin(enumMixinStr_NID_sbgp_ipAddrBlock);
        }
    }




    static if(!is(typeof(OBJ_sbgp_ipAddrBlock))) {
        private enum enumMixinStr_OBJ_sbgp_ipAddrBlock = `enum OBJ_sbgp_ipAddrBlock = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 1L , 7L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_sbgp_ipAddrBlock); }))) {
            mixin(enumMixinStr_OBJ_sbgp_ipAddrBlock);
        }
    }




    static if(!is(typeof(SN_sbgp_autonomousSysNum))) {
        private enum enumMixinStr_SN_sbgp_autonomousSysNum = `enum SN_sbgp_autonomousSysNum = "sbgp-autonomousSysNum";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_sbgp_autonomousSysNum); }))) {
            mixin(enumMixinStr_SN_sbgp_autonomousSysNum);
        }
    }




    static if(!is(typeof(NID_sbgp_autonomousSysNum))) {
        private enum enumMixinStr_NID_sbgp_autonomousSysNum = `enum NID_sbgp_autonomousSysNum = 291;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_sbgp_autonomousSysNum); }))) {
            mixin(enumMixinStr_NID_sbgp_autonomousSysNum);
        }
    }




    static if(!is(typeof(OBJ_sbgp_autonomousSysNum))) {
        private enum enumMixinStr_OBJ_sbgp_autonomousSysNum = `enum OBJ_sbgp_autonomousSysNum = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 1L , 8L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_sbgp_autonomousSysNum); }))) {
            mixin(enumMixinStr_OBJ_sbgp_autonomousSysNum);
        }
    }




    static if(!is(typeof(SN_sbgp_routerIdentifier))) {
        private enum enumMixinStr_SN_sbgp_routerIdentifier = `enum SN_sbgp_routerIdentifier = "sbgp-routerIdentifier";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_sbgp_routerIdentifier); }))) {
            mixin(enumMixinStr_SN_sbgp_routerIdentifier);
        }
    }




    static if(!is(typeof(NID_sbgp_routerIdentifier))) {
        private enum enumMixinStr_NID_sbgp_routerIdentifier = `enum NID_sbgp_routerIdentifier = 292;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_sbgp_routerIdentifier); }))) {
            mixin(enumMixinStr_NID_sbgp_routerIdentifier);
        }
    }




    static if(!is(typeof(OBJ_sbgp_routerIdentifier))) {
        private enum enumMixinStr_OBJ_sbgp_routerIdentifier = `enum OBJ_sbgp_routerIdentifier = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 1L , 9L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_sbgp_routerIdentifier); }))) {
            mixin(enumMixinStr_OBJ_sbgp_routerIdentifier);
        }
    }




    static if(!is(typeof(SN_ac_proxying))) {
        private enum enumMixinStr_SN_ac_proxying = `enum SN_ac_proxying = "ac-proxying";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_ac_proxying); }))) {
            mixin(enumMixinStr_SN_ac_proxying);
        }
    }




    static if(!is(typeof(NID_ac_proxying))) {
        private enum enumMixinStr_NID_ac_proxying = `enum NID_ac_proxying = 397;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_ac_proxying); }))) {
            mixin(enumMixinStr_NID_ac_proxying);
        }
    }




    static if(!is(typeof(OBJ_ac_proxying))) {
        private enum enumMixinStr_OBJ_ac_proxying = `enum OBJ_ac_proxying = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 1L , 10L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_ac_proxying); }))) {
            mixin(enumMixinStr_OBJ_ac_proxying);
        }
    }




    static if(!is(typeof(SN_sinfo_access))) {
        private enum enumMixinStr_SN_sinfo_access = `enum SN_sinfo_access = "subjectInfoAccess";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_sinfo_access); }))) {
            mixin(enumMixinStr_SN_sinfo_access);
        }
    }




    static if(!is(typeof(LN_sinfo_access))) {
        private enum enumMixinStr_LN_sinfo_access = `enum LN_sinfo_access = "Subject Information Access";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_sinfo_access); }))) {
            mixin(enumMixinStr_LN_sinfo_access);
        }
    }




    static if(!is(typeof(NID_sinfo_access))) {
        private enum enumMixinStr_NID_sinfo_access = `enum NID_sinfo_access = 398;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_sinfo_access); }))) {
            mixin(enumMixinStr_NID_sinfo_access);
        }
    }




    static if(!is(typeof(OBJ_sinfo_access))) {
        private enum enumMixinStr_OBJ_sinfo_access = `enum OBJ_sinfo_access = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 1L , 11L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_sinfo_access); }))) {
            mixin(enumMixinStr_OBJ_sinfo_access);
        }
    }




    static if(!is(typeof(SN_proxyCertInfo))) {
        private enum enumMixinStr_SN_proxyCertInfo = `enum SN_proxyCertInfo = "proxyCertInfo";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_proxyCertInfo); }))) {
            mixin(enumMixinStr_SN_proxyCertInfo);
        }
    }




    static if(!is(typeof(LN_proxyCertInfo))) {
        private enum enumMixinStr_LN_proxyCertInfo = `enum LN_proxyCertInfo = "Proxy Certificate Information";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_proxyCertInfo); }))) {
            mixin(enumMixinStr_LN_proxyCertInfo);
        }
    }




    static if(!is(typeof(NID_proxyCertInfo))) {
        private enum enumMixinStr_NID_proxyCertInfo = `enum NID_proxyCertInfo = 663;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_proxyCertInfo); }))) {
            mixin(enumMixinStr_NID_proxyCertInfo);
        }
    }




    static if(!is(typeof(OBJ_proxyCertInfo))) {
        private enum enumMixinStr_OBJ_proxyCertInfo = `enum OBJ_proxyCertInfo = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 1L , 14L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_proxyCertInfo); }))) {
            mixin(enumMixinStr_OBJ_proxyCertInfo);
        }
    }




    static if(!is(typeof(SN_tlsfeature))) {
        private enum enumMixinStr_SN_tlsfeature = `enum SN_tlsfeature = "tlsfeature";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_tlsfeature); }))) {
            mixin(enumMixinStr_SN_tlsfeature);
        }
    }




    static if(!is(typeof(LN_tlsfeature))) {
        private enum enumMixinStr_LN_tlsfeature = `enum LN_tlsfeature = "TLS Feature";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_tlsfeature); }))) {
            mixin(enumMixinStr_LN_tlsfeature);
        }
    }




    static if(!is(typeof(NID_tlsfeature))) {
        private enum enumMixinStr_NID_tlsfeature = `enum NID_tlsfeature = 1020;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_tlsfeature); }))) {
            mixin(enumMixinStr_NID_tlsfeature);
        }
    }




    static if(!is(typeof(OBJ_tlsfeature))) {
        private enum enumMixinStr_OBJ_tlsfeature = `enum OBJ_tlsfeature = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 1L , 24L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_tlsfeature); }))) {
            mixin(enumMixinStr_OBJ_tlsfeature);
        }
    }




    static if(!is(typeof(SN_id_qt_cps))) {
        private enum enumMixinStr_SN_id_qt_cps = `enum SN_id_qt_cps = "id-qt-cps";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_qt_cps); }))) {
            mixin(enumMixinStr_SN_id_qt_cps);
        }
    }




    static if(!is(typeof(LN_id_qt_cps))) {
        private enum enumMixinStr_LN_id_qt_cps = `enum LN_id_qt_cps = "Policy Qualifier CPS";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_id_qt_cps); }))) {
            mixin(enumMixinStr_LN_id_qt_cps);
        }
    }




    static if(!is(typeof(NID_id_qt_cps))) {
        private enum enumMixinStr_NID_id_qt_cps = `enum NID_id_qt_cps = 164;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_qt_cps); }))) {
            mixin(enumMixinStr_NID_id_qt_cps);
        }
    }




    static if(!is(typeof(OBJ_id_qt_cps))) {
        private enum enumMixinStr_OBJ_id_qt_cps = `enum OBJ_id_qt_cps = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 2L , 1L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_qt_cps); }))) {
            mixin(enumMixinStr_OBJ_id_qt_cps);
        }
    }




    static if(!is(typeof(SN_id_qt_unotice))) {
        private enum enumMixinStr_SN_id_qt_unotice = `enum SN_id_qt_unotice = "id-qt-unotice";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_qt_unotice); }))) {
            mixin(enumMixinStr_SN_id_qt_unotice);
        }
    }




    static if(!is(typeof(LN_id_qt_unotice))) {
        private enum enumMixinStr_LN_id_qt_unotice = `enum LN_id_qt_unotice = "Policy Qualifier User Notice";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_id_qt_unotice); }))) {
            mixin(enumMixinStr_LN_id_qt_unotice);
        }
    }




    static if(!is(typeof(NID_id_qt_unotice))) {
        private enum enumMixinStr_NID_id_qt_unotice = `enum NID_id_qt_unotice = 165;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_qt_unotice); }))) {
            mixin(enumMixinStr_NID_id_qt_unotice);
        }
    }




    static if(!is(typeof(OBJ_id_qt_unotice))) {
        private enum enumMixinStr_OBJ_id_qt_unotice = `enum OBJ_id_qt_unotice = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 2L , 2L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_qt_unotice); }))) {
            mixin(enumMixinStr_OBJ_id_qt_unotice);
        }
    }




    static if(!is(typeof(SN_textNotice))) {
        private enum enumMixinStr_SN_textNotice = `enum SN_textNotice = "textNotice";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_textNotice); }))) {
            mixin(enumMixinStr_SN_textNotice);
        }
    }




    static if(!is(typeof(NID_textNotice))) {
        private enum enumMixinStr_NID_textNotice = `enum NID_textNotice = 293;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_textNotice); }))) {
            mixin(enumMixinStr_NID_textNotice);
        }
    }




    static if(!is(typeof(OBJ_textNotice))) {
        private enum enumMixinStr_OBJ_textNotice = `enum OBJ_textNotice = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 2L , 3L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_textNotice); }))) {
            mixin(enumMixinStr_OBJ_textNotice);
        }
    }




    static if(!is(typeof(SN_server_auth))) {
        private enum enumMixinStr_SN_server_auth = `enum SN_server_auth = "serverAuth";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_server_auth); }))) {
            mixin(enumMixinStr_SN_server_auth);
        }
    }




    static if(!is(typeof(LN_server_auth))) {
        private enum enumMixinStr_LN_server_auth = `enum LN_server_auth = "TLS Web Server Authentication";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_server_auth); }))) {
            mixin(enumMixinStr_LN_server_auth);
        }
    }




    static if(!is(typeof(NID_server_auth))) {
        private enum enumMixinStr_NID_server_auth = `enum NID_server_auth = 129;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_server_auth); }))) {
            mixin(enumMixinStr_NID_server_auth);
        }
    }




    static if(!is(typeof(OBJ_server_auth))) {
        private enum enumMixinStr_OBJ_server_auth = `enum OBJ_server_auth = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 3L , 1L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_server_auth); }))) {
            mixin(enumMixinStr_OBJ_server_auth);
        }
    }




    static if(!is(typeof(SN_client_auth))) {
        private enum enumMixinStr_SN_client_auth = `enum SN_client_auth = "clientAuth";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_client_auth); }))) {
            mixin(enumMixinStr_SN_client_auth);
        }
    }




    static if(!is(typeof(LN_client_auth))) {
        private enum enumMixinStr_LN_client_auth = `enum LN_client_auth = "TLS Web Client Authentication";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_client_auth); }))) {
            mixin(enumMixinStr_LN_client_auth);
        }
    }




    static if(!is(typeof(NID_client_auth))) {
        private enum enumMixinStr_NID_client_auth = `enum NID_client_auth = 130;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_client_auth); }))) {
            mixin(enumMixinStr_NID_client_auth);
        }
    }




    static if(!is(typeof(OBJ_client_auth))) {
        private enum enumMixinStr_OBJ_client_auth = `enum OBJ_client_auth = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 3L , 2L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_client_auth); }))) {
            mixin(enumMixinStr_OBJ_client_auth);
        }
    }




    static if(!is(typeof(SN_code_sign))) {
        private enum enumMixinStr_SN_code_sign = `enum SN_code_sign = "codeSigning";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_code_sign); }))) {
            mixin(enumMixinStr_SN_code_sign);
        }
    }




    static if(!is(typeof(LN_code_sign))) {
        private enum enumMixinStr_LN_code_sign = `enum LN_code_sign = "Code Signing";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_code_sign); }))) {
            mixin(enumMixinStr_LN_code_sign);
        }
    }




    static if(!is(typeof(NID_code_sign))) {
        private enum enumMixinStr_NID_code_sign = `enum NID_code_sign = 131;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_code_sign); }))) {
            mixin(enumMixinStr_NID_code_sign);
        }
    }




    static if(!is(typeof(OBJ_code_sign))) {
        private enum enumMixinStr_OBJ_code_sign = `enum OBJ_code_sign = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 3L , 3L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_code_sign); }))) {
            mixin(enumMixinStr_OBJ_code_sign);
        }
    }




    static if(!is(typeof(SN_email_protect))) {
        private enum enumMixinStr_SN_email_protect = `enum SN_email_protect = "emailProtection";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_email_protect); }))) {
            mixin(enumMixinStr_SN_email_protect);
        }
    }




    static if(!is(typeof(LN_email_protect))) {
        private enum enumMixinStr_LN_email_protect = `enum LN_email_protect = "E-mail Protection";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_email_protect); }))) {
            mixin(enumMixinStr_LN_email_protect);
        }
    }




    static if(!is(typeof(NID_email_protect))) {
        private enum enumMixinStr_NID_email_protect = `enum NID_email_protect = 132;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_email_protect); }))) {
            mixin(enumMixinStr_NID_email_protect);
        }
    }




    static if(!is(typeof(OBJ_email_protect))) {
        private enum enumMixinStr_OBJ_email_protect = `enum OBJ_email_protect = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 3L , 4L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_email_protect); }))) {
            mixin(enumMixinStr_OBJ_email_protect);
        }
    }




    static if(!is(typeof(SN_ipsecEndSystem))) {
        private enum enumMixinStr_SN_ipsecEndSystem = `enum SN_ipsecEndSystem = "ipsecEndSystem";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_ipsecEndSystem); }))) {
            mixin(enumMixinStr_SN_ipsecEndSystem);
        }
    }




    static if(!is(typeof(LN_ipsecEndSystem))) {
        private enum enumMixinStr_LN_ipsecEndSystem = `enum LN_ipsecEndSystem = "IPSec End System";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_ipsecEndSystem); }))) {
            mixin(enumMixinStr_LN_ipsecEndSystem);
        }
    }




    static if(!is(typeof(NID_ipsecEndSystem))) {
        private enum enumMixinStr_NID_ipsecEndSystem = `enum NID_ipsecEndSystem = 294;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_ipsecEndSystem); }))) {
            mixin(enumMixinStr_NID_ipsecEndSystem);
        }
    }




    static if(!is(typeof(OBJ_ipsecEndSystem))) {
        private enum enumMixinStr_OBJ_ipsecEndSystem = `enum OBJ_ipsecEndSystem = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 3L , 5L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_ipsecEndSystem); }))) {
            mixin(enumMixinStr_OBJ_ipsecEndSystem);
        }
    }




    static if(!is(typeof(SN_ipsecTunnel))) {
        private enum enumMixinStr_SN_ipsecTunnel = `enum SN_ipsecTunnel = "ipsecTunnel";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_ipsecTunnel); }))) {
            mixin(enumMixinStr_SN_ipsecTunnel);
        }
    }




    static if(!is(typeof(LN_ipsecTunnel))) {
        private enum enumMixinStr_LN_ipsecTunnel = `enum LN_ipsecTunnel = "IPSec Tunnel";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_ipsecTunnel); }))) {
            mixin(enumMixinStr_LN_ipsecTunnel);
        }
    }




    static if(!is(typeof(NID_ipsecTunnel))) {
        private enum enumMixinStr_NID_ipsecTunnel = `enum NID_ipsecTunnel = 295;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_ipsecTunnel); }))) {
            mixin(enumMixinStr_NID_ipsecTunnel);
        }
    }




    static if(!is(typeof(OBJ_ipsecTunnel))) {
        private enum enumMixinStr_OBJ_ipsecTunnel = `enum OBJ_ipsecTunnel = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 3L , 6L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_ipsecTunnel); }))) {
            mixin(enumMixinStr_OBJ_ipsecTunnel);
        }
    }




    static if(!is(typeof(SN_ipsecUser))) {
        private enum enumMixinStr_SN_ipsecUser = `enum SN_ipsecUser = "ipsecUser";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_ipsecUser); }))) {
            mixin(enumMixinStr_SN_ipsecUser);
        }
    }




    static if(!is(typeof(LN_ipsecUser))) {
        private enum enumMixinStr_LN_ipsecUser = `enum LN_ipsecUser = "IPSec User";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_ipsecUser); }))) {
            mixin(enumMixinStr_LN_ipsecUser);
        }
    }




    static if(!is(typeof(NID_ipsecUser))) {
        private enum enumMixinStr_NID_ipsecUser = `enum NID_ipsecUser = 296;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_ipsecUser); }))) {
            mixin(enumMixinStr_NID_ipsecUser);
        }
    }




    static if(!is(typeof(OBJ_ipsecUser))) {
        private enum enumMixinStr_OBJ_ipsecUser = `enum OBJ_ipsecUser = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 3L , 7L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_ipsecUser); }))) {
            mixin(enumMixinStr_OBJ_ipsecUser);
        }
    }




    static if(!is(typeof(SN_time_stamp))) {
        private enum enumMixinStr_SN_time_stamp = `enum SN_time_stamp = "timeStamping";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_time_stamp); }))) {
            mixin(enumMixinStr_SN_time_stamp);
        }
    }




    static if(!is(typeof(LN_time_stamp))) {
        private enum enumMixinStr_LN_time_stamp = `enum LN_time_stamp = "Time Stamping";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_time_stamp); }))) {
            mixin(enumMixinStr_LN_time_stamp);
        }
    }




    static if(!is(typeof(NID_time_stamp))) {
        private enum enumMixinStr_NID_time_stamp = `enum NID_time_stamp = 133;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_time_stamp); }))) {
            mixin(enumMixinStr_NID_time_stamp);
        }
    }




    static if(!is(typeof(OBJ_time_stamp))) {
        private enum enumMixinStr_OBJ_time_stamp = `enum OBJ_time_stamp = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 3L , 8L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_time_stamp); }))) {
            mixin(enumMixinStr_OBJ_time_stamp);
        }
    }




    static if(!is(typeof(SN_OCSP_sign))) {
        private enum enumMixinStr_SN_OCSP_sign = `enum SN_OCSP_sign = "OCSPSigning";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_OCSP_sign); }))) {
            mixin(enumMixinStr_SN_OCSP_sign);
        }
    }




    static if(!is(typeof(LN_OCSP_sign))) {
        private enum enumMixinStr_LN_OCSP_sign = `enum LN_OCSP_sign = "OCSP Signing";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_OCSP_sign); }))) {
            mixin(enumMixinStr_LN_OCSP_sign);
        }
    }




    static if(!is(typeof(NID_OCSP_sign))) {
        private enum enumMixinStr_NID_OCSP_sign = `enum NID_OCSP_sign = 180;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_OCSP_sign); }))) {
            mixin(enumMixinStr_NID_OCSP_sign);
        }
    }




    static if(!is(typeof(OBJ_OCSP_sign))) {
        private enum enumMixinStr_OBJ_OCSP_sign = `enum OBJ_OCSP_sign = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 3L , 9L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_OCSP_sign); }))) {
            mixin(enumMixinStr_OBJ_OCSP_sign);
        }
    }




    static if(!is(typeof(SN_dvcs))) {
        private enum enumMixinStr_SN_dvcs = `enum SN_dvcs = "DVCS";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_dvcs); }))) {
            mixin(enumMixinStr_SN_dvcs);
        }
    }




    static if(!is(typeof(LN_dvcs))) {
        private enum enumMixinStr_LN_dvcs = `enum LN_dvcs = "dvcs";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_dvcs); }))) {
            mixin(enumMixinStr_LN_dvcs);
        }
    }




    static if(!is(typeof(NID_dvcs))) {
        private enum enumMixinStr_NID_dvcs = `enum NID_dvcs = 297;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_dvcs); }))) {
            mixin(enumMixinStr_NID_dvcs);
        }
    }




    static if(!is(typeof(OBJ_dvcs))) {
        private enum enumMixinStr_OBJ_dvcs = `enum OBJ_dvcs = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 3L , 10L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_dvcs); }))) {
            mixin(enumMixinStr_OBJ_dvcs);
        }
    }




    static if(!is(typeof(SN_ipsec_IKE))) {
        private enum enumMixinStr_SN_ipsec_IKE = `enum SN_ipsec_IKE = "ipsecIKE";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_ipsec_IKE); }))) {
            mixin(enumMixinStr_SN_ipsec_IKE);
        }
    }




    static if(!is(typeof(LN_ipsec_IKE))) {
        private enum enumMixinStr_LN_ipsec_IKE = `enum LN_ipsec_IKE = "ipsec Internet Key Exchange";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_ipsec_IKE); }))) {
            mixin(enumMixinStr_LN_ipsec_IKE);
        }
    }




    static if(!is(typeof(NID_ipsec_IKE))) {
        private enum enumMixinStr_NID_ipsec_IKE = `enum NID_ipsec_IKE = 1022;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_ipsec_IKE); }))) {
            mixin(enumMixinStr_NID_ipsec_IKE);
        }
    }




    static if(!is(typeof(OBJ_ipsec_IKE))) {
        private enum enumMixinStr_OBJ_ipsec_IKE = `enum OBJ_ipsec_IKE = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 3L , 17L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_ipsec_IKE); }))) {
            mixin(enumMixinStr_OBJ_ipsec_IKE);
        }
    }




    static if(!is(typeof(SN_capwapAC))) {
        private enum enumMixinStr_SN_capwapAC = `enum SN_capwapAC = "capwapAC";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_capwapAC); }))) {
            mixin(enumMixinStr_SN_capwapAC);
        }
    }




    static if(!is(typeof(LN_capwapAC))) {
        private enum enumMixinStr_LN_capwapAC = `enum LN_capwapAC = "Ctrl/provision WAP Access";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_capwapAC); }))) {
            mixin(enumMixinStr_LN_capwapAC);
        }
    }




    static if(!is(typeof(NID_capwapAC))) {
        private enum enumMixinStr_NID_capwapAC = `enum NID_capwapAC = 1023;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_capwapAC); }))) {
            mixin(enumMixinStr_NID_capwapAC);
        }
    }




    static if(!is(typeof(OBJ_capwapAC))) {
        private enum enumMixinStr_OBJ_capwapAC = `enum OBJ_capwapAC = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 3L , 18L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_capwapAC); }))) {
            mixin(enumMixinStr_OBJ_capwapAC);
        }
    }




    static if(!is(typeof(SN_capwapWTP))) {
        private enum enumMixinStr_SN_capwapWTP = `enum SN_capwapWTP = "capwapWTP";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_capwapWTP); }))) {
            mixin(enumMixinStr_SN_capwapWTP);
        }
    }




    static if(!is(typeof(LN_capwapWTP))) {
        private enum enumMixinStr_LN_capwapWTP = `enum LN_capwapWTP = "Ctrl/Provision WAP Termination";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_capwapWTP); }))) {
            mixin(enumMixinStr_LN_capwapWTP);
        }
    }




    static if(!is(typeof(NID_capwapWTP))) {
        private enum enumMixinStr_NID_capwapWTP = `enum NID_capwapWTP = 1024;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_capwapWTP); }))) {
            mixin(enumMixinStr_NID_capwapWTP);
        }
    }




    static if(!is(typeof(OBJ_capwapWTP))) {
        private enum enumMixinStr_OBJ_capwapWTP = `enum OBJ_capwapWTP = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 3L , 19L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_capwapWTP); }))) {
            mixin(enumMixinStr_OBJ_capwapWTP);
        }
    }




    static if(!is(typeof(SN_sshClient))) {
        private enum enumMixinStr_SN_sshClient = `enum SN_sshClient = "secureShellClient";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_sshClient); }))) {
            mixin(enumMixinStr_SN_sshClient);
        }
    }




    static if(!is(typeof(LN_sshClient))) {
        private enum enumMixinStr_LN_sshClient = `enum LN_sshClient = "SSH Client";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_sshClient); }))) {
            mixin(enumMixinStr_LN_sshClient);
        }
    }




    static if(!is(typeof(NID_sshClient))) {
        private enum enumMixinStr_NID_sshClient = `enum NID_sshClient = 1025;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_sshClient); }))) {
            mixin(enumMixinStr_NID_sshClient);
        }
    }




    static if(!is(typeof(OBJ_sshClient))) {
        private enum enumMixinStr_OBJ_sshClient = `enum OBJ_sshClient = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 3L , 21L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_sshClient); }))) {
            mixin(enumMixinStr_OBJ_sshClient);
        }
    }




    static if(!is(typeof(SN_sshServer))) {
        private enum enumMixinStr_SN_sshServer = `enum SN_sshServer = "secureShellServer";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_sshServer); }))) {
            mixin(enumMixinStr_SN_sshServer);
        }
    }




    static if(!is(typeof(LN_sshServer))) {
        private enum enumMixinStr_LN_sshServer = `enum LN_sshServer = "SSH Server";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_sshServer); }))) {
            mixin(enumMixinStr_LN_sshServer);
        }
    }




    static if(!is(typeof(NID_sshServer))) {
        private enum enumMixinStr_NID_sshServer = `enum NID_sshServer = 1026;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_sshServer); }))) {
            mixin(enumMixinStr_NID_sshServer);
        }
    }




    static if(!is(typeof(OBJ_sshServer))) {
        private enum enumMixinStr_OBJ_sshServer = `enum OBJ_sshServer = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 3L , 22L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_sshServer); }))) {
            mixin(enumMixinStr_OBJ_sshServer);
        }
    }




    static if(!is(typeof(SN_sendRouter))) {
        private enum enumMixinStr_SN_sendRouter = `enum SN_sendRouter = "sendRouter";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_sendRouter); }))) {
            mixin(enumMixinStr_SN_sendRouter);
        }
    }




    static if(!is(typeof(LN_sendRouter))) {
        private enum enumMixinStr_LN_sendRouter = `enum LN_sendRouter = "Send Router";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_sendRouter); }))) {
            mixin(enumMixinStr_LN_sendRouter);
        }
    }




    static if(!is(typeof(NID_sendRouter))) {
        private enum enumMixinStr_NID_sendRouter = `enum NID_sendRouter = 1027;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_sendRouter); }))) {
            mixin(enumMixinStr_NID_sendRouter);
        }
    }




    static if(!is(typeof(OBJ_sendRouter))) {
        private enum enumMixinStr_OBJ_sendRouter = `enum OBJ_sendRouter = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 3L , 23L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_sendRouter); }))) {
            mixin(enumMixinStr_OBJ_sendRouter);
        }
    }




    static if(!is(typeof(SN_sendProxiedRouter))) {
        private enum enumMixinStr_SN_sendProxiedRouter = `enum SN_sendProxiedRouter = "sendProxiedRouter";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_sendProxiedRouter); }))) {
            mixin(enumMixinStr_SN_sendProxiedRouter);
        }
    }




    static if(!is(typeof(LN_sendProxiedRouter))) {
        private enum enumMixinStr_LN_sendProxiedRouter = `enum LN_sendProxiedRouter = "Send Proxied Router";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_sendProxiedRouter); }))) {
            mixin(enumMixinStr_LN_sendProxiedRouter);
        }
    }




    static if(!is(typeof(NID_sendProxiedRouter))) {
        private enum enumMixinStr_NID_sendProxiedRouter = `enum NID_sendProxiedRouter = 1028;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_sendProxiedRouter); }))) {
            mixin(enumMixinStr_NID_sendProxiedRouter);
        }
    }




    static if(!is(typeof(OBJ_sendProxiedRouter))) {
        private enum enumMixinStr_OBJ_sendProxiedRouter = `enum OBJ_sendProxiedRouter = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 3L , 24L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_sendProxiedRouter); }))) {
            mixin(enumMixinStr_OBJ_sendProxiedRouter);
        }
    }




    static if(!is(typeof(SN_sendOwner))) {
        private enum enumMixinStr_SN_sendOwner = `enum SN_sendOwner = "sendOwner";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_sendOwner); }))) {
            mixin(enumMixinStr_SN_sendOwner);
        }
    }




    static if(!is(typeof(LN_sendOwner))) {
        private enum enumMixinStr_LN_sendOwner = `enum LN_sendOwner = "Send Owner";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_sendOwner); }))) {
            mixin(enumMixinStr_LN_sendOwner);
        }
    }




    static if(!is(typeof(NID_sendOwner))) {
        private enum enumMixinStr_NID_sendOwner = `enum NID_sendOwner = 1029;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_sendOwner); }))) {
            mixin(enumMixinStr_NID_sendOwner);
        }
    }




    static if(!is(typeof(OBJ_sendOwner))) {
        private enum enumMixinStr_OBJ_sendOwner = `enum OBJ_sendOwner = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 3L , 25L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_sendOwner); }))) {
            mixin(enumMixinStr_OBJ_sendOwner);
        }
    }




    static if(!is(typeof(SN_sendProxiedOwner))) {
        private enum enumMixinStr_SN_sendProxiedOwner = `enum SN_sendProxiedOwner = "sendProxiedOwner";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_sendProxiedOwner); }))) {
            mixin(enumMixinStr_SN_sendProxiedOwner);
        }
    }




    static if(!is(typeof(LN_sendProxiedOwner))) {
        private enum enumMixinStr_LN_sendProxiedOwner = `enum LN_sendProxiedOwner = "Send Proxied Owner";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_sendProxiedOwner); }))) {
            mixin(enumMixinStr_LN_sendProxiedOwner);
        }
    }




    static if(!is(typeof(NID_sendProxiedOwner))) {
        private enum enumMixinStr_NID_sendProxiedOwner = `enum NID_sendProxiedOwner = 1030;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_sendProxiedOwner); }))) {
            mixin(enumMixinStr_NID_sendProxiedOwner);
        }
    }




    static if(!is(typeof(OBJ_sendProxiedOwner))) {
        private enum enumMixinStr_OBJ_sendProxiedOwner = `enum OBJ_sendProxiedOwner = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 3L , 26L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_sendProxiedOwner); }))) {
            mixin(enumMixinStr_OBJ_sendProxiedOwner);
        }
    }




    static if(!is(typeof(SN_cmcCA))) {
        private enum enumMixinStr_SN_cmcCA = `enum SN_cmcCA = "cmcCA";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_cmcCA); }))) {
            mixin(enumMixinStr_SN_cmcCA);
        }
    }




    static if(!is(typeof(LN_cmcCA))) {
        private enum enumMixinStr_LN_cmcCA = `enum LN_cmcCA = "CMC Certificate Authority";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_cmcCA); }))) {
            mixin(enumMixinStr_LN_cmcCA);
        }
    }




    static if(!is(typeof(NID_cmcCA))) {
        private enum enumMixinStr_NID_cmcCA = `enum NID_cmcCA = 1131;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_cmcCA); }))) {
            mixin(enumMixinStr_NID_cmcCA);
        }
    }




    static if(!is(typeof(OBJ_cmcCA))) {
        private enum enumMixinStr_OBJ_cmcCA = `enum OBJ_cmcCA = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 3L , 27L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_cmcCA); }))) {
            mixin(enumMixinStr_OBJ_cmcCA);
        }
    }




    static if(!is(typeof(SN_cmcRA))) {
        private enum enumMixinStr_SN_cmcRA = `enum SN_cmcRA = "cmcRA";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_cmcRA); }))) {
            mixin(enumMixinStr_SN_cmcRA);
        }
    }




    static if(!is(typeof(LN_cmcRA))) {
        private enum enumMixinStr_LN_cmcRA = `enum LN_cmcRA = "CMC Registration Authority";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_cmcRA); }))) {
            mixin(enumMixinStr_LN_cmcRA);
        }
    }




    static if(!is(typeof(NID_cmcRA))) {
        private enum enumMixinStr_NID_cmcRA = `enum NID_cmcRA = 1132;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_cmcRA); }))) {
            mixin(enumMixinStr_NID_cmcRA);
        }
    }




    static if(!is(typeof(OBJ_cmcRA))) {
        private enum enumMixinStr_OBJ_cmcRA = `enum OBJ_cmcRA = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 3L , 28L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_cmcRA); }))) {
            mixin(enumMixinStr_OBJ_cmcRA);
        }
    }




    static if(!is(typeof(SN_id_it_caProtEncCert))) {
        private enum enumMixinStr_SN_id_it_caProtEncCert = `enum SN_id_it_caProtEncCert = "id-it-caProtEncCert";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_it_caProtEncCert); }))) {
            mixin(enumMixinStr_SN_id_it_caProtEncCert);
        }
    }




    static if(!is(typeof(NID_id_it_caProtEncCert))) {
        private enum enumMixinStr_NID_id_it_caProtEncCert = `enum NID_id_it_caProtEncCert = 298;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_it_caProtEncCert); }))) {
            mixin(enumMixinStr_NID_id_it_caProtEncCert);
        }
    }




    static if(!is(typeof(OBJ_id_it_caProtEncCert))) {
        private enum enumMixinStr_OBJ_id_it_caProtEncCert = `enum OBJ_id_it_caProtEncCert = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 4L , 1L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_it_caProtEncCert); }))) {
            mixin(enumMixinStr_OBJ_id_it_caProtEncCert);
        }
    }




    static if(!is(typeof(SN_id_it_signKeyPairTypes))) {
        private enum enumMixinStr_SN_id_it_signKeyPairTypes = `enum SN_id_it_signKeyPairTypes = "id-it-signKeyPairTypes";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_it_signKeyPairTypes); }))) {
            mixin(enumMixinStr_SN_id_it_signKeyPairTypes);
        }
    }




    static if(!is(typeof(NID_id_it_signKeyPairTypes))) {
        private enum enumMixinStr_NID_id_it_signKeyPairTypes = `enum NID_id_it_signKeyPairTypes = 299;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_it_signKeyPairTypes); }))) {
            mixin(enumMixinStr_NID_id_it_signKeyPairTypes);
        }
    }




    static if(!is(typeof(OBJ_id_it_signKeyPairTypes))) {
        private enum enumMixinStr_OBJ_id_it_signKeyPairTypes = `enum OBJ_id_it_signKeyPairTypes = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 4L , 2L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_it_signKeyPairTypes); }))) {
            mixin(enumMixinStr_OBJ_id_it_signKeyPairTypes);
        }
    }




    static if(!is(typeof(SN_id_it_encKeyPairTypes))) {
        private enum enumMixinStr_SN_id_it_encKeyPairTypes = `enum SN_id_it_encKeyPairTypes = "id-it-encKeyPairTypes";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_it_encKeyPairTypes); }))) {
            mixin(enumMixinStr_SN_id_it_encKeyPairTypes);
        }
    }




    static if(!is(typeof(NID_id_it_encKeyPairTypes))) {
        private enum enumMixinStr_NID_id_it_encKeyPairTypes = `enum NID_id_it_encKeyPairTypes = 300;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_it_encKeyPairTypes); }))) {
            mixin(enumMixinStr_NID_id_it_encKeyPairTypes);
        }
    }




    static if(!is(typeof(OBJ_id_it_encKeyPairTypes))) {
        private enum enumMixinStr_OBJ_id_it_encKeyPairTypes = `enum OBJ_id_it_encKeyPairTypes = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 4L , 3L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_it_encKeyPairTypes); }))) {
            mixin(enumMixinStr_OBJ_id_it_encKeyPairTypes);
        }
    }




    static if(!is(typeof(SN_id_it_preferredSymmAlg))) {
        private enum enumMixinStr_SN_id_it_preferredSymmAlg = `enum SN_id_it_preferredSymmAlg = "id-it-preferredSymmAlg";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_it_preferredSymmAlg); }))) {
            mixin(enumMixinStr_SN_id_it_preferredSymmAlg);
        }
    }




    static if(!is(typeof(NID_id_it_preferredSymmAlg))) {
        private enum enumMixinStr_NID_id_it_preferredSymmAlg = `enum NID_id_it_preferredSymmAlg = 301;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_it_preferredSymmAlg); }))) {
            mixin(enumMixinStr_NID_id_it_preferredSymmAlg);
        }
    }




    static if(!is(typeof(OBJ_id_it_preferredSymmAlg))) {
        private enum enumMixinStr_OBJ_id_it_preferredSymmAlg = `enum OBJ_id_it_preferredSymmAlg = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 4L , 4L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_it_preferredSymmAlg); }))) {
            mixin(enumMixinStr_OBJ_id_it_preferredSymmAlg);
        }
    }




    static if(!is(typeof(SN_id_it_caKeyUpdateInfo))) {
        private enum enumMixinStr_SN_id_it_caKeyUpdateInfo = `enum SN_id_it_caKeyUpdateInfo = "id-it-caKeyUpdateInfo";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_it_caKeyUpdateInfo); }))) {
            mixin(enumMixinStr_SN_id_it_caKeyUpdateInfo);
        }
    }




    static if(!is(typeof(NID_id_it_caKeyUpdateInfo))) {
        private enum enumMixinStr_NID_id_it_caKeyUpdateInfo = `enum NID_id_it_caKeyUpdateInfo = 302;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_it_caKeyUpdateInfo); }))) {
            mixin(enumMixinStr_NID_id_it_caKeyUpdateInfo);
        }
    }




    static if(!is(typeof(OBJ_id_it_caKeyUpdateInfo))) {
        private enum enumMixinStr_OBJ_id_it_caKeyUpdateInfo = `enum OBJ_id_it_caKeyUpdateInfo = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 4L , 5L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_it_caKeyUpdateInfo); }))) {
            mixin(enumMixinStr_OBJ_id_it_caKeyUpdateInfo);
        }
    }




    static if(!is(typeof(SN_id_it_currentCRL))) {
        private enum enumMixinStr_SN_id_it_currentCRL = `enum SN_id_it_currentCRL = "id-it-currentCRL";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_it_currentCRL); }))) {
            mixin(enumMixinStr_SN_id_it_currentCRL);
        }
    }




    static if(!is(typeof(NID_id_it_currentCRL))) {
        private enum enumMixinStr_NID_id_it_currentCRL = `enum NID_id_it_currentCRL = 303;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_it_currentCRL); }))) {
            mixin(enumMixinStr_NID_id_it_currentCRL);
        }
    }




    static if(!is(typeof(OBJ_id_it_currentCRL))) {
        private enum enumMixinStr_OBJ_id_it_currentCRL = `enum OBJ_id_it_currentCRL = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 4L , 6L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_it_currentCRL); }))) {
            mixin(enumMixinStr_OBJ_id_it_currentCRL);
        }
    }




    static if(!is(typeof(SN_id_it_unsupportedOIDs))) {
        private enum enumMixinStr_SN_id_it_unsupportedOIDs = `enum SN_id_it_unsupportedOIDs = "id-it-unsupportedOIDs";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_it_unsupportedOIDs); }))) {
            mixin(enumMixinStr_SN_id_it_unsupportedOIDs);
        }
    }




    static if(!is(typeof(NID_id_it_unsupportedOIDs))) {
        private enum enumMixinStr_NID_id_it_unsupportedOIDs = `enum NID_id_it_unsupportedOIDs = 304;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_it_unsupportedOIDs); }))) {
            mixin(enumMixinStr_NID_id_it_unsupportedOIDs);
        }
    }




    static if(!is(typeof(OBJ_id_it_unsupportedOIDs))) {
        private enum enumMixinStr_OBJ_id_it_unsupportedOIDs = `enum OBJ_id_it_unsupportedOIDs = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 4L , 7L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_it_unsupportedOIDs); }))) {
            mixin(enumMixinStr_OBJ_id_it_unsupportedOIDs);
        }
    }




    static if(!is(typeof(SN_id_it_subscriptionRequest))) {
        private enum enumMixinStr_SN_id_it_subscriptionRequest = `enum SN_id_it_subscriptionRequest = "id-it-subscriptionRequest";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_it_subscriptionRequest); }))) {
            mixin(enumMixinStr_SN_id_it_subscriptionRequest);
        }
    }




    static if(!is(typeof(NID_id_it_subscriptionRequest))) {
        private enum enumMixinStr_NID_id_it_subscriptionRequest = `enum NID_id_it_subscriptionRequest = 305;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_it_subscriptionRequest); }))) {
            mixin(enumMixinStr_NID_id_it_subscriptionRequest);
        }
    }




    static if(!is(typeof(OBJ_id_it_subscriptionRequest))) {
        private enum enumMixinStr_OBJ_id_it_subscriptionRequest = `enum OBJ_id_it_subscriptionRequest = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 4L , 8L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_it_subscriptionRequest); }))) {
            mixin(enumMixinStr_OBJ_id_it_subscriptionRequest);
        }
    }




    static if(!is(typeof(SN_id_it_subscriptionResponse))) {
        private enum enumMixinStr_SN_id_it_subscriptionResponse = `enum SN_id_it_subscriptionResponse = "id-it-subscriptionResponse";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_it_subscriptionResponse); }))) {
            mixin(enumMixinStr_SN_id_it_subscriptionResponse);
        }
    }




    static if(!is(typeof(NID_id_it_subscriptionResponse))) {
        private enum enumMixinStr_NID_id_it_subscriptionResponse = `enum NID_id_it_subscriptionResponse = 306;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_it_subscriptionResponse); }))) {
            mixin(enumMixinStr_NID_id_it_subscriptionResponse);
        }
    }




    static if(!is(typeof(OBJ_id_it_subscriptionResponse))) {
        private enum enumMixinStr_OBJ_id_it_subscriptionResponse = `enum OBJ_id_it_subscriptionResponse = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 4L , 9L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_it_subscriptionResponse); }))) {
            mixin(enumMixinStr_OBJ_id_it_subscriptionResponse);
        }
    }




    static if(!is(typeof(SN_id_it_keyPairParamReq))) {
        private enum enumMixinStr_SN_id_it_keyPairParamReq = `enum SN_id_it_keyPairParamReq = "id-it-keyPairParamReq";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_it_keyPairParamReq); }))) {
            mixin(enumMixinStr_SN_id_it_keyPairParamReq);
        }
    }




    static if(!is(typeof(NID_id_it_keyPairParamReq))) {
        private enum enumMixinStr_NID_id_it_keyPairParamReq = `enum NID_id_it_keyPairParamReq = 307;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_it_keyPairParamReq); }))) {
            mixin(enumMixinStr_NID_id_it_keyPairParamReq);
        }
    }




    static if(!is(typeof(OBJ_id_it_keyPairParamReq))) {
        private enum enumMixinStr_OBJ_id_it_keyPairParamReq = `enum OBJ_id_it_keyPairParamReq = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 4L , 10L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_it_keyPairParamReq); }))) {
            mixin(enumMixinStr_OBJ_id_it_keyPairParamReq);
        }
    }




    static if(!is(typeof(SN_id_it_keyPairParamRep))) {
        private enum enumMixinStr_SN_id_it_keyPairParamRep = `enum SN_id_it_keyPairParamRep = "id-it-keyPairParamRep";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_it_keyPairParamRep); }))) {
            mixin(enumMixinStr_SN_id_it_keyPairParamRep);
        }
    }




    static if(!is(typeof(NID_id_it_keyPairParamRep))) {
        private enum enumMixinStr_NID_id_it_keyPairParamRep = `enum NID_id_it_keyPairParamRep = 308;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_it_keyPairParamRep); }))) {
            mixin(enumMixinStr_NID_id_it_keyPairParamRep);
        }
    }




    static if(!is(typeof(OBJ_id_it_keyPairParamRep))) {
        private enum enumMixinStr_OBJ_id_it_keyPairParamRep = `enum OBJ_id_it_keyPairParamRep = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 4L , 11L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_it_keyPairParamRep); }))) {
            mixin(enumMixinStr_OBJ_id_it_keyPairParamRep);
        }
    }




    static if(!is(typeof(SN_id_it_revPassphrase))) {
        private enum enumMixinStr_SN_id_it_revPassphrase = `enum SN_id_it_revPassphrase = "id-it-revPassphrase";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_it_revPassphrase); }))) {
            mixin(enumMixinStr_SN_id_it_revPassphrase);
        }
    }




    static if(!is(typeof(NID_id_it_revPassphrase))) {
        private enum enumMixinStr_NID_id_it_revPassphrase = `enum NID_id_it_revPassphrase = 309;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_it_revPassphrase); }))) {
            mixin(enumMixinStr_NID_id_it_revPassphrase);
        }
    }




    static if(!is(typeof(OBJ_id_it_revPassphrase))) {
        private enum enumMixinStr_OBJ_id_it_revPassphrase = `enum OBJ_id_it_revPassphrase = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 4L , 12L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_it_revPassphrase); }))) {
            mixin(enumMixinStr_OBJ_id_it_revPassphrase);
        }
    }




    static if(!is(typeof(SN_id_it_implicitConfirm))) {
        private enum enumMixinStr_SN_id_it_implicitConfirm = `enum SN_id_it_implicitConfirm = "id-it-implicitConfirm";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_it_implicitConfirm); }))) {
            mixin(enumMixinStr_SN_id_it_implicitConfirm);
        }
    }




    static if(!is(typeof(NID_id_it_implicitConfirm))) {
        private enum enumMixinStr_NID_id_it_implicitConfirm = `enum NID_id_it_implicitConfirm = 310;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_it_implicitConfirm); }))) {
            mixin(enumMixinStr_NID_id_it_implicitConfirm);
        }
    }




    static if(!is(typeof(OBJ_id_it_implicitConfirm))) {
        private enum enumMixinStr_OBJ_id_it_implicitConfirm = `enum OBJ_id_it_implicitConfirm = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 4L , 13L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_it_implicitConfirm); }))) {
            mixin(enumMixinStr_OBJ_id_it_implicitConfirm);
        }
    }




    static if(!is(typeof(SN_id_it_confirmWaitTime))) {
        private enum enumMixinStr_SN_id_it_confirmWaitTime = `enum SN_id_it_confirmWaitTime = "id-it-confirmWaitTime";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_it_confirmWaitTime); }))) {
            mixin(enumMixinStr_SN_id_it_confirmWaitTime);
        }
    }




    static if(!is(typeof(NID_id_it_confirmWaitTime))) {
        private enum enumMixinStr_NID_id_it_confirmWaitTime = `enum NID_id_it_confirmWaitTime = 311;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_it_confirmWaitTime); }))) {
            mixin(enumMixinStr_NID_id_it_confirmWaitTime);
        }
    }




    static if(!is(typeof(OBJ_id_it_confirmWaitTime))) {
        private enum enumMixinStr_OBJ_id_it_confirmWaitTime = `enum OBJ_id_it_confirmWaitTime = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 4L , 14L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_it_confirmWaitTime); }))) {
            mixin(enumMixinStr_OBJ_id_it_confirmWaitTime);
        }
    }




    static if(!is(typeof(SN_id_it_origPKIMessage))) {
        private enum enumMixinStr_SN_id_it_origPKIMessage = `enum SN_id_it_origPKIMessage = "id-it-origPKIMessage";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_it_origPKIMessage); }))) {
            mixin(enumMixinStr_SN_id_it_origPKIMessage);
        }
    }




    static if(!is(typeof(NID_id_it_origPKIMessage))) {
        private enum enumMixinStr_NID_id_it_origPKIMessage = `enum NID_id_it_origPKIMessage = 312;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_it_origPKIMessage); }))) {
            mixin(enumMixinStr_NID_id_it_origPKIMessage);
        }
    }




    static if(!is(typeof(OBJ_id_it_origPKIMessage))) {
        private enum enumMixinStr_OBJ_id_it_origPKIMessage = `enum OBJ_id_it_origPKIMessage = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 4L , 15L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_it_origPKIMessage); }))) {
            mixin(enumMixinStr_OBJ_id_it_origPKIMessage);
        }
    }




    static if(!is(typeof(SN_id_it_suppLangTags))) {
        private enum enumMixinStr_SN_id_it_suppLangTags = `enum SN_id_it_suppLangTags = "id-it-suppLangTags";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_it_suppLangTags); }))) {
            mixin(enumMixinStr_SN_id_it_suppLangTags);
        }
    }




    static if(!is(typeof(NID_id_it_suppLangTags))) {
        private enum enumMixinStr_NID_id_it_suppLangTags = `enum NID_id_it_suppLangTags = 784;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_it_suppLangTags); }))) {
            mixin(enumMixinStr_NID_id_it_suppLangTags);
        }
    }




    static if(!is(typeof(OBJ_id_it_suppLangTags))) {
        private enum enumMixinStr_OBJ_id_it_suppLangTags = `enum OBJ_id_it_suppLangTags = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 4L , 16L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_it_suppLangTags); }))) {
            mixin(enumMixinStr_OBJ_id_it_suppLangTags);
        }
    }




    static if(!is(typeof(SN_id_regCtrl))) {
        private enum enumMixinStr_SN_id_regCtrl = `enum SN_id_regCtrl = "id-regCtrl";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_regCtrl); }))) {
            mixin(enumMixinStr_SN_id_regCtrl);
        }
    }




    static if(!is(typeof(NID_id_regCtrl))) {
        private enum enumMixinStr_NID_id_regCtrl = `enum NID_id_regCtrl = 313;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_regCtrl); }))) {
            mixin(enumMixinStr_NID_id_regCtrl);
        }
    }




    static if(!is(typeof(OBJ_id_regCtrl))) {
        private enum enumMixinStr_OBJ_id_regCtrl = `enum OBJ_id_regCtrl = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 5L , 1L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_regCtrl); }))) {
            mixin(enumMixinStr_OBJ_id_regCtrl);
        }
    }




    static if(!is(typeof(SN_id_regInfo))) {
        private enum enumMixinStr_SN_id_regInfo = `enum SN_id_regInfo = "id-regInfo";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_regInfo); }))) {
            mixin(enumMixinStr_SN_id_regInfo);
        }
    }




    static if(!is(typeof(NID_id_regInfo))) {
        private enum enumMixinStr_NID_id_regInfo = `enum NID_id_regInfo = 314;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_regInfo); }))) {
            mixin(enumMixinStr_NID_id_regInfo);
        }
    }




    static if(!is(typeof(OBJ_id_regInfo))) {
        private enum enumMixinStr_OBJ_id_regInfo = `enum OBJ_id_regInfo = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 5L , 2L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_regInfo); }))) {
            mixin(enumMixinStr_OBJ_id_regInfo);
        }
    }




    static if(!is(typeof(SN_id_regCtrl_regToken))) {
        private enum enumMixinStr_SN_id_regCtrl_regToken = `enum SN_id_regCtrl_regToken = "id-regCtrl-regToken";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_regCtrl_regToken); }))) {
            mixin(enumMixinStr_SN_id_regCtrl_regToken);
        }
    }




    static if(!is(typeof(NID_id_regCtrl_regToken))) {
        private enum enumMixinStr_NID_id_regCtrl_regToken = `enum NID_id_regCtrl_regToken = 315;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_regCtrl_regToken); }))) {
            mixin(enumMixinStr_NID_id_regCtrl_regToken);
        }
    }




    static if(!is(typeof(OBJ_id_regCtrl_regToken))) {
        private enum enumMixinStr_OBJ_id_regCtrl_regToken = `enum OBJ_id_regCtrl_regToken = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 5L , 1L , 1L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_regCtrl_regToken); }))) {
            mixin(enumMixinStr_OBJ_id_regCtrl_regToken);
        }
    }




    static if(!is(typeof(SN_id_regCtrl_authenticator))) {
        private enum enumMixinStr_SN_id_regCtrl_authenticator = `enum SN_id_regCtrl_authenticator = "id-regCtrl-authenticator";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_regCtrl_authenticator); }))) {
            mixin(enumMixinStr_SN_id_regCtrl_authenticator);
        }
    }




    static if(!is(typeof(NID_id_regCtrl_authenticator))) {
        private enum enumMixinStr_NID_id_regCtrl_authenticator = `enum NID_id_regCtrl_authenticator = 316;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_regCtrl_authenticator); }))) {
            mixin(enumMixinStr_NID_id_regCtrl_authenticator);
        }
    }




    static if(!is(typeof(OBJ_id_regCtrl_authenticator))) {
        private enum enumMixinStr_OBJ_id_regCtrl_authenticator = `enum OBJ_id_regCtrl_authenticator = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 5L , 1L , 2L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_regCtrl_authenticator); }))) {
            mixin(enumMixinStr_OBJ_id_regCtrl_authenticator);
        }
    }




    static if(!is(typeof(SN_id_regCtrl_pkiPublicationInfo))) {
        private enum enumMixinStr_SN_id_regCtrl_pkiPublicationInfo = `enum SN_id_regCtrl_pkiPublicationInfo = "id-regCtrl-pkiPublicationInfo";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_regCtrl_pkiPublicationInfo); }))) {
            mixin(enumMixinStr_SN_id_regCtrl_pkiPublicationInfo);
        }
    }




    static if(!is(typeof(NID_id_regCtrl_pkiPublicationInfo))) {
        private enum enumMixinStr_NID_id_regCtrl_pkiPublicationInfo = `enum NID_id_regCtrl_pkiPublicationInfo = 317;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_regCtrl_pkiPublicationInfo); }))) {
            mixin(enumMixinStr_NID_id_regCtrl_pkiPublicationInfo);
        }
    }




    static if(!is(typeof(OBJ_id_regCtrl_pkiPublicationInfo))) {
        private enum enumMixinStr_OBJ_id_regCtrl_pkiPublicationInfo = `enum OBJ_id_regCtrl_pkiPublicationInfo = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 5L , 1L , 3L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_regCtrl_pkiPublicationInfo); }))) {
            mixin(enumMixinStr_OBJ_id_regCtrl_pkiPublicationInfo);
        }
    }




    static if(!is(typeof(SN_id_regCtrl_pkiArchiveOptions))) {
        private enum enumMixinStr_SN_id_regCtrl_pkiArchiveOptions = `enum SN_id_regCtrl_pkiArchiveOptions = "id-regCtrl-pkiArchiveOptions";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_regCtrl_pkiArchiveOptions); }))) {
            mixin(enumMixinStr_SN_id_regCtrl_pkiArchiveOptions);
        }
    }




    static if(!is(typeof(NID_id_regCtrl_pkiArchiveOptions))) {
        private enum enumMixinStr_NID_id_regCtrl_pkiArchiveOptions = `enum NID_id_regCtrl_pkiArchiveOptions = 318;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_regCtrl_pkiArchiveOptions); }))) {
            mixin(enumMixinStr_NID_id_regCtrl_pkiArchiveOptions);
        }
    }




    static if(!is(typeof(OBJ_id_regCtrl_pkiArchiveOptions))) {
        private enum enumMixinStr_OBJ_id_regCtrl_pkiArchiveOptions = `enum OBJ_id_regCtrl_pkiArchiveOptions = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 5L , 1L , 4L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_regCtrl_pkiArchiveOptions); }))) {
            mixin(enumMixinStr_OBJ_id_regCtrl_pkiArchiveOptions);
        }
    }




    static if(!is(typeof(SN_id_regCtrl_oldCertID))) {
        private enum enumMixinStr_SN_id_regCtrl_oldCertID = `enum SN_id_regCtrl_oldCertID = "id-regCtrl-oldCertID";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_regCtrl_oldCertID); }))) {
            mixin(enumMixinStr_SN_id_regCtrl_oldCertID);
        }
    }




    static if(!is(typeof(NID_id_regCtrl_oldCertID))) {
        private enum enumMixinStr_NID_id_regCtrl_oldCertID = `enum NID_id_regCtrl_oldCertID = 319;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_regCtrl_oldCertID); }))) {
            mixin(enumMixinStr_NID_id_regCtrl_oldCertID);
        }
    }




    static if(!is(typeof(OBJ_id_regCtrl_oldCertID))) {
        private enum enumMixinStr_OBJ_id_regCtrl_oldCertID = `enum OBJ_id_regCtrl_oldCertID = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 5L , 1L , 5L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_regCtrl_oldCertID); }))) {
            mixin(enumMixinStr_OBJ_id_regCtrl_oldCertID);
        }
    }




    static if(!is(typeof(SN_id_regCtrl_protocolEncrKey))) {
        private enum enumMixinStr_SN_id_regCtrl_protocolEncrKey = `enum SN_id_regCtrl_protocolEncrKey = "id-regCtrl-protocolEncrKey";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_regCtrl_protocolEncrKey); }))) {
            mixin(enumMixinStr_SN_id_regCtrl_protocolEncrKey);
        }
    }




    static if(!is(typeof(NID_id_regCtrl_protocolEncrKey))) {
        private enum enumMixinStr_NID_id_regCtrl_protocolEncrKey = `enum NID_id_regCtrl_protocolEncrKey = 320;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_regCtrl_protocolEncrKey); }))) {
            mixin(enumMixinStr_NID_id_regCtrl_protocolEncrKey);
        }
    }




    static if(!is(typeof(OBJ_id_regCtrl_protocolEncrKey))) {
        private enum enumMixinStr_OBJ_id_regCtrl_protocolEncrKey = `enum OBJ_id_regCtrl_protocolEncrKey = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 5L , 1L , 6L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_regCtrl_protocolEncrKey); }))) {
            mixin(enumMixinStr_OBJ_id_regCtrl_protocolEncrKey);
        }
    }




    static if(!is(typeof(SN_id_regInfo_utf8Pairs))) {
        private enum enumMixinStr_SN_id_regInfo_utf8Pairs = `enum SN_id_regInfo_utf8Pairs = "id-regInfo-utf8Pairs";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_regInfo_utf8Pairs); }))) {
            mixin(enumMixinStr_SN_id_regInfo_utf8Pairs);
        }
    }




    static if(!is(typeof(NID_id_regInfo_utf8Pairs))) {
        private enum enumMixinStr_NID_id_regInfo_utf8Pairs = `enum NID_id_regInfo_utf8Pairs = 321;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_regInfo_utf8Pairs); }))) {
            mixin(enumMixinStr_NID_id_regInfo_utf8Pairs);
        }
    }




    static if(!is(typeof(OBJ_id_regInfo_utf8Pairs))) {
        private enum enumMixinStr_OBJ_id_regInfo_utf8Pairs = `enum OBJ_id_regInfo_utf8Pairs = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 5L , 2L , 1L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_regInfo_utf8Pairs); }))) {
            mixin(enumMixinStr_OBJ_id_regInfo_utf8Pairs);
        }
    }




    static if(!is(typeof(SN_id_regInfo_certReq))) {
        private enum enumMixinStr_SN_id_regInfo_certReq = `enum SN_id_regInfo_certReq = "id-regInfo-certReq";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_regInfo_certReq); }))) {
            mixin(enumMixinStr_SN_id_regInfo_certReq);
        }
    }




    static if(!is(typeof(NID_id_regInfo_certReq))) {
        private enum enumMixinStr_NID_id_regInfo_certReq = `enum NID_id_regInfo_certReq = 322;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_regInfo_certReq); }))) {
            mixin(enumMixinStr_NID_id_regInfo_certReq);
        }
    }




    static if(!is(typeof(OBJ_id_regInfo_certReq))) {
        private enum enumMixinStr_OBJ_id_regInfo_certReq = `enum OBJ_id_regInfo_certReq = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 5L , 2L , 2L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_regInfo_certReq); }))) {
            mixin(enumMixinStr_OBJ_id_regInfo_certReq);
        }
    }




    static if(!is(typeof(SN_id_alg_des40))) {
        private enum enumMixinStr_SN_id_alg_des40 = `enum SN_id_alg_des40 = "id-alg-des40";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_alg_des40); }))) {
            mixin(enumMixinStr_SN_id_alg_des40);
        }
    }




    static if(!is(typeof(NID_id_alg_des40))) {
        private enum enumMixinStr_NID_id_alg_des40 = `enum NID_id_alg_des40 = 323;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_alg_des40); }))) {
            mixin(enumMixinStr_NID_id_alg_des40);
        }
    }




    static if(!is(typeof(OBJ_id_alg_des40))) {
        private enum enumMixinStr_OBJ_id_alg_des40 = `enum OBJ_id_alg_des40 = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 6L , 1L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_alg_des40); }))) {
            mixin(enumMixinStr_OBJ_id_alg_des40);
        }
    }




    static if(!is(typeof(SN_id_alg_noSignature))) {
        private enum enumMixinStr_SN_id_alg_noSignature = `enum SN_id_alg_noSignature = "id-alg-noSignature";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_alg_noSignature); }))) {
            mixin(enumMixinStr_SN_id_alg_noSignature);
        }
    }




    static if(!is(typeof(NID_id_alg_noSignature))) {
        private enum enumMixinStr_NID_id_alg_noSignature = `enum NID_id_alg_noSignature = 324;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_alg_noSignature); }))) {
            mixin(enumMixinStr_NID_id_alg_noSignature);
        }
    }




    static if(!is(typeof(OBJ_id_alg_noSignature))) {
        private enum enumMixinStr_OBJ_id_alg_noSignature = `enum OBJ_id_alg_noSignature = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 6L , 2L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_alg_noSignature); }))) {
            mixin(enumMixinStr_OBJ_id_alg_noSignature);
        }
    }




    static if(!is(typeof(SN_id_alg_dh_sig_hmac_sha1))) {
        private enum enumMixinStr_SN_id_alg_dh_sig_hmac_sha1 = `enum SN_id_alg_dh_sig_hmac_sha1 = "id-alg-dh-sig-hmac-sha1";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_alg_dh_sig_hmac_sha1); }))) {
            mixin(enumMixinStr_SN_id_alg_dh_sig_hmac_sha1);
        }
    }




    static if(!is(typeof(NID_id_alg_dh_sig_hmac_sha1))) {
        private enum enumMixinStr_NID_id_alg_dh_sig_hmac_sha1 = `enum NID_id_alg_dh_sig_hmac_sha1 = 325;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_alg_dh_sig_hmac_sha1); }))) {
            mixin(enumMixinStr_NID_id_alg_dh_sig_hmac_sha1);
        }
    }




    static if(!is(typeof(OBJ_id_alg_dh_sig_hmac_sha1))) {
        private enum enumMixinStr_OBJ_id_alg_dh_sig_hmac_sha1 = `enum OBJ_id_alg_dh_sig_hmac_sha1 = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 6L , 3L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_alg_dh_sig_hmac_sha1); }))) {
            mixin(enumMixinStr_OBJ_id_alg_dh_sig_hmac_sha1);
        }
    }




    static if(!is(typeof(SN_id_alg_dh_pop))) {
        private enum enumMixinStr_SN_id_alg_dh_pop = `enum SN_id_alg_dh_pop = "id-alg-dh-pop";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_alg_dh_pop); }))) {
            mixin(enumMixinStr_SN_id_alg_dh_pop);
        }
    }




    static if(!is(typeof(NID_id_alg_dh_pop))) {
        private enum enumMixinStr_NID_id_alg_dh_pop = `enum NID_id_alg_dh_pop = 326;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_alg_dh_pop); }))) {
            mixin(enumMixinStr_NID_id_alg_dh_pop);
        }
    }




    static if(!is(typeof(OBJ_id_alg_dh_pop))) {
        private enum enumMixinStr_OBJ_id_alg_dh_pop = `enum OBJ_id_alg_dh_pop = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 6L , 4L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_alg_dh_pop); }))) {
            mixin(enumMixinStr_OBJ_id_alg_dh_pop);
        }
    }




    static if(!is(typeof(SN_id_cmc_statusInfo))) {
        private enum enumMixinStr_SN_id_cmc_statusInfo = `enum SN_id_cmc_statusInfo = "id-cmc-statusInfo";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_cmc_statusInfo); }))) {
            mixin(enumMixinStr_SN_id_cmc_statusInfo);
        }
    }




    static if(!is(typeof(NID_id_cmc_statusInfo))) {
        private enum enumMixinStr_NID_id_cmc_statusInfo = `enum NID_id_cmc_statusInfo = 327;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_cmc_statusInfo); }))) {
            mixin(enumMixinStr_NID_id_cmc_statusInfo);
        }
    }




    static if(!is(typeof(OBJ_id_cmc_statusInfo))) {
        private enum enumMixinStr_OBJ_id_cmc_statusInfo = `enum OBJ_id_cmc_statusInfo = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 7L , 1L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_cmc_statusInfo); }))) {
            mixin(enumMixinStr_OBJ_id_cmc_statusInfo);
        }
    }




    static if(!is(typeof(SN_id_cmc_identification))) {
        private enum enumMixinStr_SN_id_cmc_identification = `enum SN_id_cmc_identification = "id-cmc-identification";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_cmc_identification); }))) {
            mixin(enumMixinStr_SN_id_cmc_identification);
        }
    }




    static if(!is(typeof(NID_id_cmc_identification))) {
        private enum enumMixinStr_NID_id_cmc_identification = `enum NID_id_cmc_identification = 328;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_cmc_identification); }))) {
            mixin(enumMixinStr_NID_id_cmc_identification);
        }
    }




    static if(!is(typeof(OBJ_id_cmc_identification))) {
        private enum enumMixinStr_OBJ_id_cmc_identification = `enum OBJ_id_cmc_identification = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 7L , 2L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_cmc_identification); }))) {
            mixin(enumMixinStr_OBJ_id_cmc_identification);
        }
    }




    static if(!is(typeof(SN_id_cmc_identityProof))) {
        private enum enumMixinStr_SN_id_cmc_identityProof = `enum SN_id_cmc_identityProof = "id-cmc-identityProof";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_cmc_identityProof); }))) {
            mixin(enumMixinStr_SN_id_cmc_identityProof);
        }
    }




    static if(!is(typeof(NID_id_cmc_identityProof))) {
        private enum enumMixinStr_NID_id_cmc_identityProof = `enum NID_id_cmc_identityProof = 329;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_cmc_identityProof); }))) {
            mixin(enumMixinStr_NID_id_cmc_identityProof);
        }
    }




    static if(!is(typeof(OBJ_id_cmc_identityProof))) {
        private enum enumMixinStr_OBJ_id_cmc_identityProof = `enum OBJ_id_cmc_identityProof = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 7L , 3L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_cmc_identityProof); }))) {
            mixin(enumMixinStr_OBJ_id_cmc_identityProof);
        }
    }




    static if(!is(typeof(SN_id_cmc_dataReturn))) {
        private enum enumMixinStr_SN_id_cmc_dataReturn = `enum SN_id_cmc_dataReturn = "id-cmc-dataReturn";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_cmc_dataReturn); }))) {
            mixin(enumMixinStr_SN_id_cmc_dataReturn);
        }
    }




    static if(!is(typeof(NID_id_cmc_dataReturn))) {
        private enum enumMixinStr_NID_id_cmc_dataReturn = `enum NID_id_cmc_dataReturn = 330;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_cmc_dataReturn); }))) {
            mixin(enumMixinStr_NID_id_cmc_dataReturn);
        }
    }




    static if(!is(typeof(OBJ_id_cmc_dataReturn))) {
        private enum enumMixinStr_OBJ_id_cmc_dataReturn = `enum OBJ_id_cmc_dataReturn = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 7L , 4L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_cmc_dataReturn); }))) {
            mixin(enumMixinStr_OBJ_id_cmc_dataReturn);
        }
    }




    static if(!is(typeof(SN_id_cmc_transactionId))) {
        private enum enumMixinStr_SN_id_cmc_transactionId = `enum SN_id_cmc_transactionId = "id-cmc-transactionId";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_cmc_transactionId); }))) {
            mixin(enumMixinStr_SN_id_cmc_transactionId);
        }
    }




    static if(!is(typeof(NID_id_cmc_transactionId))) {
        private enum enumMixinStr_NID_id_cmc_transactionId = `enum NID_id_cmc_transactionId = 331;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_cmc_transactionId); }))) {
            mixin(enumMixinStr_NID_id_cmc_transactionId);
        }
    }




    static if(!is(typeof(OBJ_id_cmc_transactionId))) {
        private enum enumMixinStr_OBJ_id_cmc_transactionId = `enum OBJ_id_cmc_transactionId = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 7L , 5L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_cmc_transactionId); }))) {
            mixin(enumMixinStr_OBJ_id_cmc_transactionId);
        }
    }




    static if(!is(typeof(SN_id_cmc_senderNonce))) {
        private enum enumMixinStr_SN_id_cmc_senderNonce = `enum SN_id_cmc_senderNonce = "id-cmc-senderNonce";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_cmc_senderNonce); }))) {
            mixin(enumMixinStr_SN_id_cmc_senderNonce);
        }
    }




    static if(!is(typeof(NID_id_cmc_senderNonce))) {
        private enum enumMixinStr_NID_id_cmc_senderNonce = `enum NID_id_cmc_senderNonce = 332;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_cmc_senderNonce); }))) {
            mixin(enumMixinStr_NID_id_cmc_senderNonce);
        }
    }




    static if(!is(typeof(OBJ_id_cmc_senderNonce))) {
        private enum enumMixinStr_OBJ_id_cmc_senderNonce = `enum OBJ_id_cmc_senderNonce = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 7L , 6L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_cmc_senderNonce); }))) {
            mixin(enumMixinStr_OBJ_id_cmc_senderNonce);
        }
    }




    static if(!is(typeof(SN_id_cmc_recipientNonce))) {
        private enum enumMixinStr_SN_id_cmc_recipientNonce = `enum SN_id_cmc_recipientNonce = "id-cmc-recipientNonce";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_cmc_recipientNonce); }))) {
            mixin(enumMixinStr_SN_id_cmc_recipientNonce);
        }
    }




    static if(!is(typeof(NID_id_cmc_recipientNonce))) {
        private enum enumMixinStr_NID_id_cmc_recipientNonce = `enum NID_id_cmc_recipientNonce = 333;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_cmc_recipientNonce); }))) {
            mixin(enumMixinStr_NID_id_cmc_recipientNonce);
        }
    }




    static if(!is(typeof(OBJ_id_cmc_recipientNonce))) {
        private enum enumMixinStr_OBJ_id_cmc_recipientNonce = `enum OBJ_id_cmc_recipientNonce = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 7L , 7L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_cmc_recipientNonce); }))) {
            mixin(enumMixinStr_OBJ_id_cmc_recipientNonce);
        }
    }




    static if(!is(typeof(SN_id_cmc_addExtensions))) {
        private enum enumMixinStr_SN_id_cmc_addExtensions = `enum SN_id_cmc_addExtensions = "id-cmc-addExtensions";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_cmc_addExtensions); }))) {
            mixin(enumMixinStr_SN_id_cmc_addExtensions);
        }
    }




    static if(!is(typeof(NID_id_cmc_addExtensions))) {
        private enum enumMixinStr_NID_id_cmc_addExtensions = `enum NID_id_cmc_addExtensions = 334;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_cmc_addExtensions); }))) {
            mixin(enumMixinStr_NID_id_cmc_addExtensions);
        }
    }




    static if(!is(typeof(OBJ_id_cmc_addExtensions))) {
        private enum enumMixinStr_OBJ_id_cmc_addExtensions = `enum OBJ_id_cmc_addExtensions = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 7L , 8L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_cmc_addExtensions); }))) {
            mixin(enumMixinStr_OBJ_id_cmc_addExtensions);
        }
    }




    static if(!is(typeof(SN_id_cmc_encryptedPOP))) {
        private enum enumMixinStr_SN_id_cmc_encryptedPOP = `enum SN_id_cmc_encryptedPOP = "id-cmc-encryptedPOP";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_cmc_encryptedPOP); }))) {
            mixin(enumMixinStr_SN_id_cmc_encryptedPOP);
        }
    }




    static if(!is(typeof(NID_id_cmc_encryptedPOP))) {
        private enum enumMixinStr_NID_id_cmc_encryptedPOP = `enum NID_id_cmc_encryptedPOP = 335;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_cmc_encryptedPOP); }))) {
            mixin(enumMixinStr_NID_id_cmc_encryptedPOP);
        }
    }




    static if(!is(typeof(OBJ_id_cmc_encryptedPOP))) {
        private enum enumMixinStr_OBJ_id_cmc_encryptedPOP = `enum OBJ_id_cmc_encryptedPOP = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 7L , 9L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_cmc_encryptedPOP); }))) {
            mixin(enumMixinStr_OBJ_id_cmc_encryptedPOP);
        }
    }




    static if(!is(typeof(SN_id_cmc_decryptedPOP))) {
        private enum enumMixinStr_SN_id_cmc_decryptedPOP = `enum SN_id_cmc_decryptedPOP = "id-cmc-decryptedPOP";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_cmc_decryptedPOP); }))) {
            mixin(enumMixinStr_SN_id_cmc_decryptedPOP);
        }
    }




    static if(!is(typeof(NID_id_cmc_decryptedPOP))) {
        private enum enumMixinStr_NID_id_cmc_decryptedPOP = `enum NID_id_cmc_decryptedPOP = 336;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_cmc_decryptedPOP); }))) {
            mixin(enumMixinStr_NID_id_cmc_decryptedPOP);
        }
    }




    static if(!is(typeof(OBJ_id_cmc_decryptedPOP))) {
        private enum enumMixinStr_OBJ_id_cmc_decryptedPOP = `enum OBJ_id_cmc_decryptedPOP = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 7L , 10L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_cmc_decryptedPOP); }))) {
            mixin(enumMixinStr_OBJ_id_cmc_decryptedPOP);
        }
    }




    static if(!is(typeof(SN_id_cmc_lraPOPWitness))) {
        private enum enumMixinStr_SN_id_cmc_lraPOPWitness = `enum SN_id_cmc_lraPOPWitness = "id-cmc-lraPOPWitness";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_cmc_lraPOPWitness); }))) {
            mixin(enumMixinStr_SN_id_cmc_lraPOPWitness);
        }
    }




    static if(!is(typeof(NID_id_cmc_lraPOPWitness))) {
        private enum enumMixinStr_NID_id_cmc_lraPOPWitness = `enum NID_id_cmc_lraPOPWitness = 337;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_cmc_lraPOPWitness); }))) {
            mixin(enumMixinStr_NID_id_cmc_lraPOPWitness);
        }
    }




    static if(!is(typeof(OBJ_id_cmc_lraPOPWitness))) {
        private enum enumMixinStr_OBJ_id_cmc_lraPOPWitness = `enum OBJ_id_cmc_lraPOPWitness = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 7L , 11L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_cmc_lraPOPWitness); }))) {
            mixin(enumMixinStr_OBJ_id_cmc_lraPOPWitness);
        }
    }




    static if(!is(typeof(SN_id_cmc_getCert))) {
        private enum enumMixinStr_SN_id_cmc_getCert = `enum SN_id_cmc_getCert = "id-cmc-getCert";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_cmc_getCert); }))) {
            mixin(enumMixinStr_SN_id_cmc_getCert);
        }
    }




    static if(!is(typeof(NID_id_cmc_getCert))) {
        private enum enumMixinStr_NID_id_cmc_getCert = `enum NID_id_cmc_getCert = 338;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_cmc_getCert); }))) {
            mixin(enumMixinStr_NID_id_cmc_getCert);
        }
    }




    static if(!is(typeof(OBJ_id_cmc_getCert))) {
        private enum enumMixinStr_OBJ_id_cmc_getCert = `enum OBJ_id_cmc_getCert = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 7L , 15L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_cmc_getCert); }))) {
            mixin(enumMixinStr_OBJ_id_cmc_getCert);
        }
    }




    static if(!is(typeof(SN_id_cmc_getCRL))) {
        private enum enumMixinStr_SN_id_cmc_getCRL = `enum SN_id_cmc_getCRL = "id-cmc-getCRL";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_cmc_getCRL); }))) {
            mixin(enumMixinStr_SN_id_cmc_getCRL);
        }
    }




    static if(!is(typeof(NID_id_cmc_getCRL))) {
        private enum enumMixinStr_NID_id_cmc_getCRL = `enum NID_id_cmc_getCRL = 339;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_cmc_getCRL); }))) {
            mixin(enumMixinStr_NID_id_cmc_getCRL);
        }
    }




    static if(!is(typeof(OBJ_id_cmc_getCRL))) {
        private enum enumMixinStr_OBJ_id_cmc_getCRL = `enum OBJ_id_cmc_getCRL = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 7L , 16L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_cmc_getCRL); }))) {
            mixin(enumMixinStr_OBJ_id_cmc_getCRL);
        }
    }




    static if(!is(typeof(SN_id_cmc_revokeRequest))) {
        private enum enumMixinStr_SN_id_cmc_revokeRequest = `enum SN_id_cmc_revokeRequest = "id-cmc-revokeRequest";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_cmc_revokeRequest); }))) {
            mixin(enumMixinStr_SN_id_cmc_revokeRequest);
        }
    }




    static if(!is(typeof(NID_id_cmc_revokeRequest))) {
        private enum enumMixinStr_NID_id_cmc_revokeRequest = `enum NID_id_cmc_revokeRequest = 340;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_cmc_revokeRequest); }))) {
            mixin(enumMixinStr_NID_id_cmc_revokeRequest);
        }
    }




    static if(!is(typeof(OBJ_id_cmc_revokeRequest))) {
        private enum enumMixinStr_OBJ_id_cmc_revokeRequest = `enum OBJ_id_cmc_revokeRequest = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 7L , 17L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_cmc_revokeRequest); }))) {
            mixin(enumMixinStr_OBJ_id_cmc_revokeRequest);
        }
    }




    static if(!is(typeof(SN_id_cmc_regInfo))) {
        private enum enumMixinStr_SN_id_cmc_regInfo = `enum SN_id_cmc_regInfo = "id-cmc-regInfo";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_cmc_regInfo); }))) {
            mixin(enumMixinStr_SN_id_cmc_regInfo);
        }
    }




    static if(!is(typeof(NID_id_cmc_regInfo))) {
        private enum enumMixinStr_NID_id_cmc_regInfo = `enum NID_id_cmc_regInfo = 341;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_cmc_regInfo); }))) {
            mixin(enumMixinStr_NID_id_cmc_regInfo);
        }
    }




    static if(!is(typeof(OBJ_id_cmc_regInfo))) {
        private enum enumMixinStr_OBJ_id_cmc_regInfo = `enum OBJ_id_cmc_regInfo = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 7L , 18L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_cmc_regInfo); }))) {
            mixin(enumMixinStr_OBJ_id_cmc_regInfo);
        }
    }




    static if(!is(typeof(SN_id_cmc_responseInfo))) {
        private enum enumMixinStr_SN_id_cmc_responseInfo = `enum SN_id_cmc_responseInfo = "id-cmc-responseInfo";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_cmc_responseInfo); }))) {
            mixin(enumMixinStr_SN_id_cmc_responseInfo);
        }
    }




    static if(!is(typeof(NID_id_cmc_responseInfo))) {
        private enum enumMixinStr_NID_id_cmc_responseInfo = `enum NID_id_cmc_responseInfo = 342;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_cmc_responseInfo); }))) {
            mixin(enumMixinStr_NID_id_cmc_responseInfo);
        }
    }




    static if(!is(typeof(OBJ_id_cmc_responseInfo))) {
        private enum enumMixinStr_OBJ_id_cmc_responseInfo = `enum OBJ_id_cmc_responseInfo = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 7L , 19L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_cmc_responseInfo); }))) {
            mixin(enumMixinStr_OBJ_id_cmc_responseInfo);
        }
    }




    static if(!is(typeof(SN_id_cmc_queryPending))) {
        private enum enumMixinStr_SN_id_cmc_queryPending = `enum SN_id_cmc_queryPending = "id-cmc-queryPending";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_cmc_queryPending); }))) {
            mixin(enumMixinStr_SN_id_cmc_queryPending);
        }
    }




    static if(!is(typeof(NID_id_cmc_queryPending))) {
        private enum enumMixinStr_NID_id_cmc_queryPending = `enum NID_id_cmc_queryPending = 343;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_cmc_queryPending); }))) {
            mixin(enumMixinStr_NID_id_cmc_queryPending);
        }
    }




    static if(!is(typeof(OBJ_id_cmc_queryPending))) {
        private enum enumMixinStr_OBJ_id_cmc_queryPending = `enum OBJ_id_cmc_queryPending = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 7L , 21L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_cmc_queryPending); }))) {
            mixin(enumMixinStr_OBJ_id_cmc_queryPending);
        }
    }




    static if(!is(typeof(SN_id_cmc_popLinkRandom))) {
        private enum enumMixinStr_SN_id_cmc_popLinkRandom = `enum SN_id_cmc_popLinkRandom = "id-cmc-popLinkRandom";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_cmc_popLinkRandom); }))) {
            mixin(enumMixinStr_SN_id_cmc_popLinkRandom);
        }
    }




    static if(!is(typeof(NID_id_cmc_popLinkRandom))) {
        private enum enumMixinStr_NID_id_cmc_popLinkRandom = `enum NID_id_cmc_popLinkRandom = 344;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_cmc_popLinkRandom); }))) {
            mixin(enumMixinStr_NID_id_cmc_popLinkRandom);
        }
    }




    static if(!is(typeof(OBJ_id_cmc_popLinkRandom))) {
        private enum enumMixinStr_OBJ_id_cmc_popLinkRandom = `enum OBJ_id_cmc_popLinkRandom = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 7L , 22L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_cmc_popLinkRandom); }))) {
            mixin(enumMixinStr_OBJ_id_cmc_popLinkRandom);
        }
    }




    static if(!is(typeof(SN_id_cmc_popLinkWitness))) {
        private enum enumMixinStr_SN_id_cmc_popLinkWitness = `enum SN_id_cmc_popLinkWitness = "id-cmc-popLinkWitness";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_cmc_popLinkWitness); }))) {
            mixin(enumMixinStr_SN_id_cmc_popLinkWitness);
        }
    }




    static if(!is(typeof(NID_id_cmc_popLinkWitness))) {
        private enum enumMixinStr_NID_id_cmc_popLinkWitness = `enum NID_id_cmc_popLinkWitness = 345;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_cmc_popLinkWitness); }))) {
            mixin(enumMixinStr_NID_id_cmc_popLinkWitness);
        }
    }




    static if(!is(typeof(OBJ_id_cmc_popLinkWitness))) {
        private enum enumMixinStr_OBJ_id_cmc_popLinkWitness = `enum OBJ_id_cmc_popLinkWitness = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 7L , 23L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_cmc_popLinkWitness); }))) {
            mixin(enumMixinStr_OBJ_id_cmc_popLinkWitness);
        }
    }




    static if(!is(typeof(SN_id_cmc_confirmCertAcceptance))) {
        private enum enumMixinStr_SN_id_cmc_confirmCertAcceptance = `enum SN_id_cmc_confirmCertAcceptance = "id-cmc-confirmCertAcceptance";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_cmc_confirmCertAcceptance); }))) {
            mixin(enumMixinStr_SN_id_cmc_confirmCertAcceptance);
        }
    }




    static if(!is(typeof(NID_id_cmc_confirmCertAcceptance))) {
        private enum enumMixinStr_NID_id_cmc_confirmCertAcceptance = `enum NID_id_cmc_confirmCertAcceptance = 346;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_cmc_confirmCertAcceptance); }))) {
            mixin(enumMixinStr_NID_id_cmc_confirmCertAcceptance);
        }
    }




    static if(!is(typeof(OBJ_id_cmc_confirmCertAcceptance))) {
        private enum enumMixinStr_OBJ_id_cmc_confirmCertAcceptance = `enum OBJ_id_cmc_confirmCertAcceptance = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 7L , 24L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_cmc_confirmCertAcceptance); }))) {
            mixin(enumMixinStr_OBJ_id_cmc_confirmCertAcceptance);
        }
    }




    static if(!is(typeof(SN_id_on_personalData))) {
        private enum enumMixinStr_SN_id_on_personalData = `enum SN_id_on_personalData = "id-on-personalData";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_on_personalData); }))) {
            mixin(enumMixinStr_SN_id_on_personalData);
        }
    }




    static if(!is(typeof(NID_id_on_personalData))) {
        private enum enumMixinStr_NID_id_on_personalData = `enum NID_id_on_personalData = 347;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_on_personalData); }))) {
            mixin(enumMixinStr_NID_id_on_personalData);
        }
    }




    static if(!is(typeof(OBJ_id_on_personalData))) {
        private enum enumMixinStr_OBJ_id_on_personalData = `enum OBJ_id_on_personalData = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 8L , 1L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_on_personalData); }))) {
            mixin(enumMixinStr_OBJ_id_on_personalData);
        }
    }




    static if(!is(typeof(SN_id_on_permanentIdentifier))) {
        private enum enumMixinStr_SN_id_on_permanentIdentifier = `enum SN_id_on_permanentIdentifier = "id-on-permanentIdentifier";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_on_permanentIdentifier); }))) {
            mixin(enumMixinStr_SN_id_on_permanentIdentifier);
        }
    }




    static if(!is(typeof(LN_id_on_permanentIdentifier))) {
        private enum enumMixinStr_LN_id_on_permanentIdentifier = `enum LN_id_on_permanentIdentifier = "Permanent Identifier";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_id_on_permanentIdentifier); }))) {
            mixin(enumMixinStr_LN_id_on_permanentIdentifier);
        }
    }




    static if(!is(typeof(NID_id_on_permanentIdentifier))) {
        private enum enumMixinStr_NID_id_on_permanentIdentifier = `enum NID_id_on_permanentIdentifier = 858;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_on_permanentIdentifier); }))) {
            mixin(enumMixinStr_NID_id_on_permanentIdentifier);
        }
    }




    static if(!is(typeof(OBJ_id_on_permanentIdentifier))) {
        private enum enumMixinStr_OBJ_id_on_permanentIdentifier = `enum OBJ_id_on_permanentIdentifier = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 8L , 3L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_on_permanentIdentifier); }))) {
            mixin(enumMixinStr_OBJ_id_on_permanentIdentifier);
        }
    }




    static if(!is(typeof(SN_id_pda_dateOfBirth))) {
        private enum enumMixinStr_SN_id_pda_dateOfBirth = `enum SN_id_pda_dateOfBirth = "id-pda-dateOfBirth";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_pda_dateOfBirth); }))) {
            mixin(enumMixinStr_SN_id_pda_dateOfBirth);
        }
    }




    static if(!is(typeof(NID_id_pda_dateOfBirth))) {
        private enum enumMixinStr_NID_id_pda_dateOfBirth = `enum NID_id_pda_dateOfBirth = 348;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_pda_dateOfBirth); }))) {
            mixin(enumMixinStr_NID_id_pda_dateOfBirth);
        }
    }




    static if(!is(typeof(OBJ_id_pda_dateOfBirth))) {
        private enum enumMixinStr_OBJ_id_pda_dateOfBirth = `enum OBJ_id_pda_dateOfBirth = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 9L , 1L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_pda_dateOfBirth); }))) {
            mixin(enumMixinStr_OBJ_id_pda_dateOfBirth);
        }
    }




    static if(!is(typeof(SN_id_pda_placeOfBirth))) {
        private enum enumMixinStr_SN_id_pda_placeOfBirth = `enum SN_id_pda_placeOfBirth = "id-pda-placeOfBirth";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_pda_placeOfBirth); }))) {
            mixin(enumMixinStr_SN_id_pda_placeOfBirth);
        }
    }




    static if(!is(typeof(NID_id_pda_placeOfBirth))) {
        private enum enumMixinStr_NID_id_pda_placeOfBirth = `enum NID_id_pda_placeOfBirth = 349;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_pda_placeOfBirth); }))) {
            mixin(enumMixinStr_NID_id_pda_placeOfBirth);
        }
    }




    static if(!is(typeof(OBJ_id_pda_placeOfBirth))) {
        private enum enumMixinStr_OBJ_id_pda_placeOfBirth = `enum OBJ_id_pda_placeOfBirth = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 9L , 2L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_pda_placeOfBirth); }))) {
            mixin(enumMixinStr_OBJ_id_pda_placeOfBirth);
        }
    }




    static if(!is(typeof(SN_id_pda_gender))) {
        private enum enumMixinStr_SN_id_pda_gender = `enum SN_id_pda_gender = "id-pda-gender";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_pda_gender); }))) {
            mixin(enumMixinStr_SN_id_pda_gender);
        }
    }




    static if(!is(typeof(NID_id_pda_gender))) {
        private enum enumMixinStr_NID_id_pda_gender = `enum NID_id_pda_gender = 351;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_pda_gender); }))) {
            mixin(enumMixinStr_NID_id_pda_gender);
        }
    }




    static if(!is(typeof(OBJ_id_pda_gender))) {
        private enum enumMixinStr_OBJ_id_pda_gender = `enum OBJ_id_pda_gender = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 9L , 3L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_pda_gender); }))) {
            mixin(enumMixinStr_OBJ_id_pda_gender);
        }
    }




    static if(!is(typeof(SN_id_pda_countryOfCitizenship))) {
        private enum enumMixinStr_SN_id_pda_countryOfCitizenship = `enum SN_id_pda_countryOfCitizenship = "id-pda-countryOfCitizenship";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_pda_countryOfCitizenship); }))) {
            mixin(enumMixinStr_SN_id_pda_countryOfCitizenship);
        }
    }




    static if(!is(typeof(NID_id_pda_countryOfCitizenship))) {
        private enum enumMixinStr_NID_id_pda_countryOfCitizenship = `enum NID_id_pda_countryOfCitizenship = 352;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_pda_countryOfCitizenship); }))) {
            mixin(enumMixinStr_NID_id_pda_countryOfCitizenship);
        }
    }




    static if(!is(typeof(OBJ_id_pda_countryOfCitizenship))) {
        private enum enumMixinStr_OBJ_id_pda_countryOfCitizenship = `enum OBJ_id_pda_countryOfCitizenship = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 9L , 4L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_pda_countryOfCitizenship); }))) {
            mixin(enumMixinStr_OBJ_id_pda_countryOfCitizenship);
        }
    }




    static if(!is(typeof(SN_id_pda_countryOfResidence))) {
        private enum enumMixinStr_SN_id_pda_countryOfResidence = `enum SN_id_pda_countryOfResidence = "id-pda-countryOfResidence";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_pda_countryOfResidence); }))) {
            mixin(enumMixinStr_SN_id_pda_countryOfResidence);
        }
    }




    static if(!is(typeof(NID_id_pda_countryOfResidence))) {
        private enum enumMixinStr_NID_id_pda_countryOfResidence = `enum NID_id_pda_countryOfResidence = 353;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_pda_countryOfResidence); }))) {
            mixin(enumMixinStr_NID_id_pda_countryOfResidence);
        }
    }




    static if(!is(typeof(OBJ_id_pda_countryOfResidence))) {
        private enum enumMixinStr_OBJ_id_pda_countryOfResidence = `enum OBJ_id_pda_countryOfResidence = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 9L , 5L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_pda_countryOfResidence); }))) {
            mixin(enumMixinStr_OBJ_id_pda_countryOfResidence);
        }
    }




    static if(!is(typeof(SN_id_aca_authenticationInfo))) {
        private enum enumMixinStr_SN_id_aca_authenticationInfo = `enum SN_id_aca_authenticationInfo = "id-aca-authenticationInfo";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_aca_authenticationInfo); }))) {
            mixin(enumMixinStr_SN_id_aca_authenticationInfo);
        }
    }




    static if(!is(typeof(NID_id_aca_authenticationInfo))) {
        private enum enumMixinStr_NID_id_aca_authenticationInfo = `enum NID_id_aca_authenticationInfo = 354;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_aca_authenticationInfo); }))) {
            mixin(enumMixinStr_NID_id_aca_authenticationInfo);
        }
    }




    static if(!is(typeof(OBJ_id_aca_authenticationInfo))) {
        private enum enumMixinStr_OBJ_id_aca_authenticationInfo = `enum OBJ_id_aca_authenticationInfo = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 10L , 1L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_aca_authenticationInfo); }))) {
            mixin(enumMixinStr_OBJ_id_aca_authenticationInfo);
        }
    }




    static if(!is(typeof(SN_id_aca_accessIdentity))) {
        private enum enumMixinStr_SN_id_aca_accessIdentity = `enum SN_id_aca_accessIdentity = "id-aca-accessIdentity";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_aca_accessIdentity); }))) {
            mixin(enumMixinStr_SN_id_aca_accessIdentity);
        }
    }




    static if(!is(typeof(NID_id_aca_accessIdentity))) {
        private enum enumMixinStr_NID_id_aca_accessIdentity = `enum NID_id_aca_accessIdentity = 355;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_aca_accessIdentity); }))) {
            mixin(enumMixinStr_NID_id_aca_accessIdentity);
        }
    }




    static if(!is(typeof(OBJ_id_aca_accessIdentity))) {
        private enum enumMixinStr_OBJ_id_aca_accessIdentity = `enum OBJ_id_aca_accessIdentity = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 10L , 2L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_aca_accessIdentity); }))) {
            mixin(enumMixinStr_OBJ_id_aca_accessIdentity);
        }
    }




    static if(!is(typeof(SN_id_aca_chargingIdentity))) {
        private enum enumMixinStr_SN_id_aca_chargingIdentity = `enum SN_id_aca_chargingIdentity = "id-aca-chargingIdentity";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_aca_chargingIdentity); }))) {
            mixin(enumMixinStr_SN_id_aca_chargingIdentity);
        }
    }




    static if(!is(typeof(NID_id_aca_chargingIdentity))) {
        private enum enumMixinStr_NID_id_aca_chargingIdentity = `enum NID_id_aca_chargingIdentity = 356;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_aca_chargingIdentity); }))) {
            mixin(enumMixinStr_NID_id_aca_chargingIdentity);
        }
    }




    static if(!is(typeof(OBJ_id_aca_chargingIdentity))) {
        private enum enumMixinStr_OBJ_id_aca_chargingIdentity = `enum OBJ_id_aca_chargingIdentity = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 10L , 3L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_aca_chargingIdentity); }))) {
            mixin(enumMixinStr_OBJ_id_aca_chargingIdentity);
        }
    }




    static if(!is(typeof(SN_id_aca_group))) {
        private enum enumMixinStr_SN_id_aca_group = `enum SN_id_aca_group = "id-aca-group";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_aca_group); }))) {
            mixin(enumMixinStr_SN_id_aca_group);
        }
    }




    static if(!is(typeof(NID_id_aca_group))) {
        private enum enumMixinStr_NID_id_aca_group = `enum NID_id_aca_group = 357;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_aca_group); }))) {
            mixin(enumMixinStr_NID_id_aca_group);
        }
    }




    static if(!is(typeof(OBJ_id_aca_group))) {
        private enum enumMixinStr_OBJ_id_aca_group = `enum OBJ_id_aca_group = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 10L , 4L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_aca_group); }))) {
            mixin(enumMixinStr_OBJ_id_aca_group);
        }
    }




    static if(!is(typeof(SN_id_aca_role))) {
        private enum enumMixinStr_SN_id_aca_role = `enum SN_id_aca_role = "id-aca-role";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_aca_role); }))) {
            mixin(enumMixinStr_SN_id_aca_role);
        }
    }




    static if(!is(typeof(NID_id_aca_role))) {
        private enum enumMixinStr_NID_id_aca_role = `enum NID_id_aca_role = 358;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_aca_role); }))) {
            mixin(enumMixinStr_NID_id_aca_role);
        }
    }




    static if(!is(typeof(OBJ_id_aca_role))) {
        private enum enumMixinStr_OBJ_id_aca_role = `enum OBJ_id_aca_role = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 10L , 5L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_aca_role); }))) {
            mixin(enumMixinStr_OBJ_id_aca_role);
        }
    }




    static if(!is(typeof(SN_id_aca_encAttrs))) {
        private enum enumMixinStr_SN_id_aca_encAttrs = `enum SN_id_aca_encAttrs = "id-aca-encAttrs";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_aca_encAttrs); }))) {
            mixin(enumMixinStr_SN_id_aca_encAttrs);
        }
    }




    static if(!is(typeof(NID_id_aca_encAttrs))) {
        private enum enumMixinStr_NID_id_aca_encAttrs = `enum NID_id_aca_encAttrs = 399;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_aca_encAttrs); }))) {
            mixin(enumMixinStr_NID_id_aca_encAttrs);
        }
    }




    static if(!is(typeof(OBJ_id_aca_encAttrs))) {
        private enum enumMixinStr_OBJ_id_aca_encAttrs = `enum OBJ_id_aca_encAttrs = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 10L , 6L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_aca_encAttrs); }))) {
            mixin(enumMixinStr_OBJ_id_aca_encAttrs);
        }
    }




    static if(!is(typeof(SN_id_qcs_pkixQCSyntax_v1))) {
        private enum enumMixinStr_SN_id_qcs_pkixQCSyntax_v1 = `enum SN_id_qcs_pkixQCSyntax_v1 = "id-qcs-pkixQCSyntax-v1";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_qcs_pkixQCSyntax_v1); }))) {
            mixin(enumMixinStr_SN_id_qcs_pkixQCSyntax_v1);
        }
    }




    static if(!is(typeof(NID_id_qcs_pkixQCSyntax_v1))) {
        private enum enumMixinStr_NID_id_qcs_pkixQCSyntax_v1 = `enum NID_id_qcs_pkixQCSyntax_v1 = 359;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_qcs_pkixQCSyntax_v1); }))) {
            mixin(enumMixinStr_NID_id_qcs_pkixQCSyntax_v1);
        }
    }




    static if(!is(typeof(OBJ_id_qcs_pkixQCSyntax_v1))) {
        private enum enumMixinStr_OBJ_id_qcs_pkixQCSyntax_v1 = `enum OBJ_id_qcs_pkixQCSyntax_v1 = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 11L , 1L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_qcs_pkixQCSyntax_v1); }))) {
            mixin(enumMixinStr_OBJ_id_qcs_pkixQCSyntax_v1);
        }
    }




    static if(!is(typeof(SN_id_cct_crs))) {
        private enum enumMixinStr_SN_id_cct_crs = `enum SN_id_cct_crs = "id-cct-crs";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_cct_crs); }))) {
            mixin(enumMixinStr_SN_id_cct_crs);
        }
    }




    static if(!is(typeof(NID_id_cct_crs))) {
        private enum enumMixinStr_NID_id_cct_crs = `enum NID_id_cct_crs = 360;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_cct_crs); }))) {
            mixin(enumMixinStr_NID_id_cct_crs);
        }
    }




    static if(!is(typeof(OBJ_id_cct_crs))) {
        private enum enumMixinStr_OBJ_id_cct_crs = `enum OBJ_id_cct_crs = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 12L , 1L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_cct_crs); }))) {
            mixin(enumMixinStr_OBJ_id_cct_crs);
        }
    }




    static if(!is(typeof(SN_id_cct_PKIData))) {
        private enum enumMixinStr_SN_id_cct_PKIData = `enum SN_id_cct_PKIData = "id-cct-PKIData";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_cct_PKIData); }))) {
            mixin(enumMixinStr_SN_id_cct_PKIData);
        }
    }




    static if(!is(typeof(NID_id_cct_PKIData))) {
        private enum enumMixinStr_NID_id_cct_PKIData = `enum NID_id_cct_PKIData = 361;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_cct_PKIData); }))) {
            mixin(enumMixinStr_NID_id_cct_PKIData);
        }
    }




    static if(!is(typeof(OBJ_id_cct_PKIData))) {
        private enum enumMixinStr_OBJ_id_cct_PKIData = `enum OBJ_id_cct_PKIData = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 12L , 2L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_cct_PKIData); }))) {
            mixin(enumMixinStr_OBJ_id_cct_PKIData);
        }
    }




    static if(!is(typeof(SN_id_cct_PKIResponse))) {
        private enum enumMixinStr_SN_id_cct_PKIResponse = `enum SN_id_cct_PKIResponse = "id-cct-PKIResponse";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_cct_PKIResponse); }))) {
            mixin(enumMixinStr_SN_id_cct_PKIResponse);
        }
    }




    static if(!is(typeof(NID_id_cct_PKIResponse))) {
        private enum enumMixinStr_NID_id_cct_PKIResponse = `enum NID_id_cct_PKIResponse = 362;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_cct_PKIResponse); }))) {
            mixin(enumMixinStr_NID_id_cct_PKIResponse);
        }
    }




    static if(!is(typeof(OBJ_id_cct_PKIResponse))) {
        private enum enumMixinStr_OBJ_id_cct_PKIResponse = `enum OBJ_id_cct_PKIResponse = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 12L , 3L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_cct_PKIResponse); }))) {
            mixin(enumMixinStr_OBJ_id_cct_PKIResponse);
        }
    }




    static if(!is(typeof(SN_id_ppl_anyLanguage))) {
        private enum enumMixinStr_SN_id_ppl_anyLanguage = `enum SN_id_ppl_anyLanguage = "id-ppl-anyLanguage";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_ppl_anyLanguage); }))) {
            mixin(enumMixinStr_SN_id_ppl_anyLanguage);
        }
    }




    static if(!is(typeof(LN_id_ppl_anyLanguage))) {
        private enum enumMixinStr_LN_id_ppl_anyLanguage = `enum LN_id_ppl_anyLanguage = "Any language";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_id_ppl_anyLanguage); }))) {
            mixin(enumMixinStr_LN_id_ppl_anyLanguage);
        }
    }




    static if(!is(typeof(NID_id_ppl_anyLanguage))) {
        private enum enumMixinStr_NID_id_ppl_anyLanguage = `enum NID_id_ppl_anyLanguage = 664;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_ppl_anyLanguage); }))) {
            mixin(enumMixinStr_NID_id_ppl_anyLanguage);
        }
    }




    static if(!is(typeof(OBJ_id_ppl_anyLanguage))) {
        private enum enumMixinStr_OBJ_id_ppl_anyLanguage = `enum OBJ_id_ppl_anyLanguage = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 21L , 0L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_ppl_anyLanguage); }))) {
            mixin(enumMixinStr_OBJ_id_ppl_anyLanguage);
        }
    }




    static if(!is(typeof(SN_id_ppl_inheritAll))) {
        private enum enumMixinStr_SN_id_ppl_inheritAll = `enum SN_id_ppl_inheritAll = "id-ppl-inheritAll";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_ppl_inheritAll); }))) {
            mixin(enumMixinStr_SN_id_ppl_inheritAll);
        }
    }




    static if(!is(typeof(LN_id_ppl_inheritAll))) {
        private enum enumMixinStr_LN_id_ppl_inheritAll = `enum LN_id_ppl_inheritAll = "Inherit all";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_id_ppl_inheritAll); }))) {
            mixin(enumMixinStr_LN_id_ppl_inheritAll);
        }
    }




    static if(!is(typeof(NID_id_ppl_inheritAll))) {
        private enum enumMixinStr_NID_id_ppl_inheritAll = `enum NID_id_ppl_inheritAll = 665;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_ppl_inheritAll); }))) {
            mixin(enumMixinStr_NID_id_ppl_inheritAll);
        }
    }




    static if(!is(typeof(OBJ_id_ppl_inheritAll))) {
        private enum enumMixinStr_OBJ_id_ppl_inheritAll = `enum OBJ_id_ppl_inheritAll = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 21L , 1L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_ppl_inheritAll); }))) {
            mixin(enumMixinStr_OBJ_id_ppl_inheritAll);
        }
    }




    static if(!is(typeof(SN_Independent))) {
        private enum enumMixinStr_SN_Independent = `enum SN_Independent = "id-ppl-independent";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_Independent); }))) {
            mixin(enumMixinStr_SN_Independent);
        }
    }




    static if(!is(typeof(LN_Independent))) {
        private enum enumMixinStr_LN_Independent = `enum LN_Independent = "Independent";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_Independent); }))) {
            mixin(enumMixinStr_LN_Independent);
        }
    }




    static if(!is(typeof(NID_Independent))) {
        private enum enumMixinStr_NID_Independent = `enum NID_Independent = 667;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_Independent); }))) {
            mixin(enumMixinStr_NID_Independent);
        }
    }




    static if(!is(typeof(OBJ_Independent))) {
        private enum enumMixinStr_OBJ_Independent = `enum OBJ_Independent = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 21L , 2L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_Independent); }))) {
            mixin(enumMixinStr_OBJ_Independent);
        }
    }




    static if(!is(typeof(SN_ad_OCSP))) {
        private enum enumMixinStr_SN_ad_OCSP = `enum SN_ad_OCSP = "OCSP";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_ad_OCSP); }))) {
            mixin(enumMixinStr_SN_ad_OCSP);
        }
    }




    static if(!is(typeof(LN_ad_OCSP))) {
        private enum enumMixinStr_LN_ad_OCSP = `enum LN_ad_OCSP = "OCSP";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_ad_OCSP); }))) {
            mixin(enumMixinStr_LN_ad_OCSP);
        }
    }




    static if(!is(typeof(NID_ad_OCSP))) {
        private enum enumMixinStr_NID_ad_OCSP = `enum NID_ad_OCSP = 178;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_ad_OCSP); }))) {
            mixin(enumMixinStr_NID_ad_OCSP);
        }
    }




    static if(!is(typeof(OBJ_ad_OCSP))) {
        private enum enumMixinStr_OBJ_ad_OCSP = `enum OBJ_ad_OCSP = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 48L , 1L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_ad_OCSP); }))) {
            mixin(enumMixinStr_OBJ_ad_OCSP);
        }
    }




    static if(!is(typeof(SN_ad_ca_issuers))) {
        private enum enumMixinStr_SN_ad_ca_issuers = `enum SN_ad_ca_issuers = "caIssuers";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_ad_ca_issuers); }))) {
            mixin(enumMixinStr_SN_ad_ca_issuers);
        }
    }




    static if(!is(typeof(LN_ad_ca_issuers))) {
        private enum enumMixinStr_LN_ad_ca_issuers = `enum LN_ad_ca_issuers = "CA Issuers";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_ad_ca_issuers); }))) {
            mixin(enumMixinStr_LN_ad_ca_issuers);
        }
    }




    static if(!is(typeof(NID_ad_ca_issuers))) {
        private enum enumMixinStr_NID_ad_ca_issuers = `enum NID_ad_ca_issuers = 179;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_ad_ca_issuers); }))) {
            mixin(enumMixinStr_NID_ad_ca_issuers);
        }
    }




    static if(!is(typeof(OBJ_ad_ca_issuers))) {
        private enum enumMixinStr_OBJ_ad_ca_issuers = `enum OBJ_ad_ca_issuers = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 48L , 2L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_ad_ca_issuers); }))) {
            mixin(enumMixinStr_OBJ_ad_ca_issuers);
        }
    }




    static if(!is(typeof(SN_ad_timeStamping))) {
        private enum enumMixinStr_SN_ad_timeStamping = `enum SN_ad_timeStamping = "ad_timestamping";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_ad_timeStamping); }))) {
            mixin(enumMixinStr_SN_ad_timeStamping);
        }
    }




    static if(!is(typeof(LN_ad_timeStamping))) {
        private enum enumMixinStr_LN_ad_timeStamping = `enum LN_ad_timeStamping = "AD Time Stamping";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_ad_timeStamping); }))) {
            mixin(enumMixinStr_LN_ad_timeStamping);
        }
    }




    static if(!is(typeof(NID_ad_timeStamping))) {
        private enum enumMixinStr_NID_ad_timeStamping = `enum NID_ad_timeStamping = 363;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_ad_timeStamping); }))) {
            mixin(enumMixinStr_NID_ad_timeStamping);
        }
    }




    static if(!is(typeof(OBJ_ad_timeStamping))) {
        private enum enumMixinStr_OBJ_ad_timeStamping = `enum OBJ_ad_timeStamping = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 48L , 3L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_ad_timeStamping); }))) {
            mixin(enumMixinStr_OBJ_ad_timeStamping);
        }
    }




    static if(!is(typeof(SN_ad_dvcs))) {
        private enum enumMixinStr_SN_ad_dvcs = `enum SN_ad_dvcs = "AD_DVCS";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_ad_dvcs); }))) {
            mixin(enumMixinStr_SN_ad_dvcs);
        }
    }




    static if(!is(typeof(LN_ad_dvcs))) {
        private enum enumMixinStr_LN_ad_dvcs = `enum LN_ad_dvcs = "ad dvcs";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_ad_dvcs); }))) {
            mixin(enumMixinStr_LN_ad_dvcs);
        }
    }




    static if(!is(typeof(NID_ad_dvcs))) {
        private enum enumMixinStr_NID_ad_dvcs = `enum NID_ad_dvcs = 364;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_ad_dvcs); }))) {
            mixin(enumMixinStr_NID_ad_dvcs);
        }
    }




    static if(!is(typeof(OBJ_ad_dvcs))) {
        private enum enumMixinStr_OBJ_ad_dvcs = `enum OBJ_ad_dvcs = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 48L , 4L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_ad_dvcs); }))) {
            mixin(enumMixinStr_OBJ_ad_dvcs);
        }
    }




    static if(!is(typeof(SN_caRepository))) {
        private enum enumMixinStr_SN_caRepository = `enum SN_caRepository = "caRepository";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_caRepository); }))) {
            mixin(enumMixinStr_SN_caRepository);
        }
    }




    static if(!is(typeof(LN_caRepository))) {
        private enum enumMixinStr_LN_caRepository = `enum LN_caRepository = "CA Repository";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_caRepository); }))) {
            mixin(enumMixinStr_LN_caRepository);
        }
    }




    static if(!is(typeof(NID_caRepository))) {
        private enum enumMixinStr_NID_caRepository = `enum NID_caRepository = 785;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_caRepository); }))) {
            mixin(enumMixinStr_NID_caRepository);
        }
    }




    static if(!is(typeof(OBJ_caRepository))) {
        private enum enumMixinStr_OBJ_caRepository = `enum OBJ_caRepository = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 48L , 5L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_caRepository); }))) {
            mixin(enumMixinStr_OBJ_caRepository);
        }
    }




    static if(!is(typeof(OBJ_id_pkix_OCSP))) {
        private enum enumMixinStr_OBJ_id_pkix_OCSP = `enum OBJ_id_pkix_OCSP = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 48L , 1L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_pkix_OCSP); }))) {
            mixin(enumMixinStr_OBJ_id_pkix_OCSP);
        }
    }




    static if(!is(typeof(SN_id_pkix_OCSP_basic))) {
        private enum enumMixinStr_SN_id_pkix_OCSP_basic = `enum SN_id_pkix_OCSP_basic = "basicOCSPResponse";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_pkix_OCSP_basic); }))) {
            mixin(enumMixinStr_SN_id_pkix_OCSP_basic);
        }
    }




    static if(!is(typeof(LN_id_pkix_OCSP_basic))) {
        private enum enumMixinStr_LN_id_pkix_OCSP_basic = `enum LN_id_pkix_OCSP_basic = "Basic OCSP Response";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_id_pkix_OCSP_basic); }))) {
            mixin(enumMixinStr_LN_id_pkix_OCSP_basic);
        }
    }




    static if(!is(typeof(NID_id_pkix_OCSP_basic))) {
        private enum enumMixinStr_NID_id_pkix_OCSP_basic = `enum NID_id_pkix_OCSP_basic = 365;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_pkix_OCSP_basic); }))) {
            mixin(enumMixinStr_NID_id_pkix_OCSP_basic);
        }
    }




    static if(!is(typeof(OBJ_id_pkix_OCSP_basic))) {
        private enum enumMixinStr_OBJ_id_pkix_OCSP_basic = `enum OBJ_id_pkix_OCSP_basic = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 48L , 1L , 1L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_pkix_OCSP_basic); }))) {
            mixin(enumMixinStr_OBJ_id_pkix_OCSP_basic);
        }
    }




    static if(!is(typeof(SN_id_pkix_OCSP_Nonce))) {
        private enum enumMixinStr_SN_id_pkix_OCSP_Nonce = `enum SN_id_pkix_OCSP_Nonce = "Nonce";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_pkix_OCSP_Nonce); }))) {
            mixin(enumMixinStr_SN_id_pkix_OCSP_Nonce);
        }
    }




    static if(!is(typeof(LN_id_pkix_OCSP_Nonce))) {
        private enum enumMixinStr_LN_id_pkix_OCSP_Nonce = `enum LN_id_pkix_OCSP_Nonce = "OCSP Nonce";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_id_pkix_OCSP_Nonce); }))) {
            mixin(enumMixinStr_LN_id_pkix_OCSP_Nonce);
        }
    }




    static if(!is(typeof(NID_id_pkix_OCSP_Nonce))) {
        private enum enumMixinStr_NID_id_pkix_OCSP_Nonce = `enum NID_id_pkix_OCSP_Nonce = 366;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_pkix_OCSP_Nonce); }))) {
            mixin(enumMixinStr_NID_id_pkix_OCSP_Nonce);
        }
    }




    static if(!is(typeof(OBJ_id_pkix_OCSP_Nonce))) {
        private enum enumMixinStr_OBJ_id_pkix_OCSP_Nonce = `enum OBJ_id_pkix_OCSP_Nonce = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 48L , 1L , 2L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_pkix_OCSP_Nonce); }))) {
            mixin(enumMixinStr_OBJ_id_pkix_OCSP_Nonce);
        }
    }




    static if(!is(typeof(SN_id_pkix_OCSP_CrlID))) {
        private enum enumMixinStr_SN_id_pkix_OCSP_CrlID = `enum SN_id_pkix_OCSP_CrlID = "CrlID";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_pkix_OCSP_CrlID); }))) {
            mixin(enumMixinStr_SN_id_pkix_OCSP_CrlID);
        }
    }




    static if(!is(typeof(LN_id_pkix_OCSP_CrlID))) {
        private enum enumMixinStr_LN_id_pkix_OCSP_CrlID = `enum LN_id_pkix_OCSP_CrlID = "OCSP CRL ID";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_id_pkix_OCSP_CrlID); }))) {
            mixin(enumMixinStr_LN_id_pkix_OCSP_CrlID);
        }
    }




    static if(!is(typeof(NID_id_pkix_OCSP_CrlID))) {
        private enum enumMixinStr_NID_id_pkix_OCSP_CrlID = `enum NID_id_pkix_OCSP_CrlID = 367;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_pkix_OCSP_CrlID); }))) {
            mixin(enumMixinStr_NID_id_pkix_OCSP_CrlID);
        }
    }




    static if(!is(typeof(OBJ_id_pkix_OCSP_CrlID))) {
        private enum enumMixinStr_OBJ_id_pkix_OCSP_CrlID = `enum OBJ_id_pkix_OCSP_CrlID = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 48L , 1L , 3L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_pkix_OCSP_CrlID); }))) {
            mixin(enumMixinStr_OBJ_id_pkix_OCSP_CrlID);
        }
    }




    static if(!is(typeof(SN_id_pkix_OCSP_acceptableResponses))) {
        private enum enumMixinStr_SN_id_pkix_OCSP_acceptableResponses = `enum SN_id_pkix_OCSP_acceptableResponses = "acceptableResponses";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_pkix_OCSP_acceptableResponses); }))) {
            mixin(enumMixinStr_SN_id_pkix_OCSP_acceptableResponses);
        }
    }




    static if(!is(typeof(LN_id_pkix_OCSP_acceptableResponses))) {
        private enum enumMixinStr_LN_id_pkix_OCSP_acceptableResponses = `enum LN_id_pkix_OCSP_acceptableResponses = "Acceptable OCSP Responses";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_id_pkix_OCSP_acceptableResponses); }))) {
            mixin(enumMixinStr_LN_id_pkix_OCSP_acceptableResponses);
        }
    }




    static if(!is(typeof(NID_id_pkix_OCSP_acceptableResponses))) {
        private enum enumMixinStr_NID_id_pkix_OCSP_acceptableResponses = `enum NID_id_pkix_OCSP_acceptableResponses = 368;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_pkix_OCSP_acceptableResponses); }))) {
            mixin(enumMixinStr_NID_id_pkix_OCSP_acceptableResponses);
        }
    }




    static if(!is(typeof(OBJ_id_pkix_OCSP_acceptableResponses))) {
        private enum enumMixinStr_OBJ_id_pkix_OCSP_acceptableResponses = `enum OBJ_id_pkix_OCSP_acceptableResponses = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 48L , 1L , 4L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_pkix_OCSP_acceptableResponses); }))) {
            mixin(enumMixinStr_OBJ_id_pkix_OCSP_acceptableResponses);
        }
    }




    static if(!is(typeof(SN_id_pkix_OCSP_noCheck))) {
        private enum enumMixinStr_SN_id_pkix_OCSP_noCheck = `enum SN_id_pkix_OCSP_noCheck = "noCheck";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_pkix_OCSP_noCheck); }))) {
            mixin(enumMixinStr_SN_id_pkix_OCSP_noCheck);
        }
    }




    static if(!is(typeof(LN_id_pkix_OCSP_noCheck))) {
        private enum enumMixinStr_LN_id_pkix_OCSP_noCheck = `enum LN_id_pkix_OCSP_noCheck = "OCSP No Check";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_id_pkix_OCSP_noCheck); }))) {
            mixin(enumMixinStr_LN_id_pkix_OCSP_noCheck);
        }
    }




    static if(!is(typeof(NID_id_pkix_OCSP_noCheck))) {
        private enum enumMixinStr_NID_id_pkix_OCSP_noCheck = `enum NID_id_pkix_OCSP_noCheck = 369;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_pkix_OCSP_noCheck); }))) {
            mixin(enumMixinStr_NID_id_pkix_OCSP_noCheck);
        }
    }




    static if(!is(typeof(OBJ_id_pkix_OCSP_noCheck))) {
        private enum enumMixinStr_OBJ_id_pkix_OCSP_noCheck = `enum OBJ_id_pkix_OCSP_noCheck = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 48L , 1L , 5L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_pkix_OCSP_noCheck); }))) {
            mixin(enumMixinStr_OBJ_id_pkix_OCSP_noCheck);
        }
    }




    static if(!is(typeof(SN_id_pkix_OCSP_archiveCutoff))) {
        private enum enumMixinStr_SN_id_pkix_OCSP_archiveCutoff = `enum SN_id_pkix_OCSP_archiveCutoff = "archiveCutoff";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_pkix_OCSP_archiveCutoff); }))) {
            mixin(enumMixinStr_SN_id_pkix_OCSP_archiveCutoff);
        }
    }




    static if(!is(typeof(LN_id_pkix_OCSP_archiveCutoff))) {
        private enum enumMixinStr_LN_id_pkix_OCSP_archiveCutoff = `enum LN_id_pkix_OCSP_archiveCutoff = "OCSP Archive Cutoff";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_id_pkix_OCSP_archiveCutoff); }))) {
            mixin(enumMixinStr_LN_id_pkix_OCSP_archiveCutoff);
        }
    }




    static if(!is(typeof(NID_id_pkix_OCSP_archiveCutoff))) {
        private enum enumMixinStr_NID_id_pkix_OCSP_archiveCutoff = `enum NID_id_pkix_OCSP_archiveCutoff = 370;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_pkix_OCSP_archiveCutoff); }))) {
            mixin(enumMixinStr_NID_id_pkix_OCSP_archiveCutoff);
        }
    }




    static if(!is(typeof(OBJ_id_pkix_OCSP_archiveCutoff))) {
        private enum enumMixinStr_OBJ_id_pkix_OCSP_archiveCutoff = `enum OBJ_id_pkix_OCSP_archiveCutoff = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 48L , 1L , 6L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_pkix_OCSP_archiveCutoff); }))) {
            mixin(enumMixinStr_OBJ_id_pkix_OCSP_archiveCutoff);
        }
    }




    static if(!is(typeof(SN_id_pkix_OCSP_serviceLocator))) {
        private enum enumMixinStr_SN_id_pkix_OCSP_serviceLocator = `enum SN_id_pkix_OCSP_serviceLocator = "serviceLocator";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_pkix_OCSP_serviceLocator); }))) {
            mixin(enumMixinStr_SN_id_pkix_OCSP_serviceLocator);
        }
    }




    static if(!is(typeof(LN_id_pkix_OCSP_serviceLocator))) {
        private enum enumMixinStr_LN_id_pkix_OCSP_serviceLocator = `enum LN_id_pkix_OCSP_serviceLocator = "OCSP Service Locator";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_id_pkix_OCSP_serviceLocator); }))) {
            mixin(enumMixinStr_LN_id_pkix_OCSP_serviceLocator);
        }
    }




    static if(!is(typeof(NID_id_pkix_OCSP_serviceLocator))) {
        private enum enumMixinStr_NID_id_pkix_OCSP_serviceLocator = `enum NID_id_pkix_OCSP_serviceLocator = 371;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_pkix_OCSP_serviceLocator); }))) {
            mixin(enumMixinStr_NID_id_pkix_OCSP_serviceLocator);
        }
    }




    static if(!is(typeof(OBJ_id_pkix_OCSP_serviceLocator))) {
        private enum enumMixinStr_OBJ_id_pkix_OCSP_serviceLocator = `enum OBJ_id_pkix_OCSP_serviceLocator = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 48L , 1L , 7L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_pkix_OCSP_serviceLocator); }))) {
            mixin(enumMixinStr_OBJ_id_pkix_OCSP_serviceLocator);
        }
    }




    static if(!is(typeof(SN_id_pkix_OCSP_extendedStatus))) {
        private enum enumMixinStr_SN_id_pkix_OCSP_extendedStatus = `enum SN_id_pkix_OCSP_extendedStatus = "extendedStatus";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_pkix_OCSP_extendedStatus); }))) {
            mixin(enumMixinStr_SN_id_pkix_OCSP_extendedStatus);
        }
    }




    static if(!is(typeof(LN_id_pkix_OCSP_extendedStatus))) {
        private enum enumMixinStr_LN_id_pkix_OCSP_extendedStatus = `enum LN_id_pkix_OCSP_extendedStatus = "Extended OCSP Status";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_id_pkix_OCSP_extendedStatus); }))) {
            mixin(enumMixinStr_LN_id_pkix_OCSP_extendedStatus);
        }
    }




    static if(!is(typeof(NID_id_pkix_OCSP_extendedStatus))) {
        private enum enumMixinStr_NID_id_pkix_OCSP_extendedStatus = `enum NID_id_pkix_OCSP_extendedStatus = 372;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_pkix_OCSP_extendedStatus); }))) {
            mixin(enumMixinStr_NID_id_pkix_OCSP_extendedStatus);
        }
    }




    static if(!is(typeof(OBJ_id_pkix_OCSP_extendedStatus))) {
        private enum enumMixinStr_OBJ_id_pkix_OCSP_extendedStatus = `enum OBJ_id_pkix_OCSP_extendedStatus = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 48L , 1L , 8L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_pkix_OCSP_extendedStatus); }))) {
            mixin(enumMixinStr_OBJ_id_pkix_OCSP_extendedStatus);
        }
    }




    static if(!is(typeof(SN_id_pkix_OCSP_valid))) {
        private enum enumMixinStr_SN_id_pkix_OCSP_valid = `enum SN_id_pkix_OCSP_valid = "valid";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_pkix_OCSP_valid); }))) {
            mixin(enumMixinStr_SN_id_pkix_OCSP_valid);
        }
    }




    static if(!is(typeof(NID_id_pkix_OCSP_valid))) {
        private enum enumMixinStr_NID_id_pkix_OCSP_valid = `enum NID_id_pkix_OCSP_valid = 373;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_pkix_OCSP_valid); }))) {
            mixin(enumMixinStr_NID_id_pkix_OCSP_valid);
        }
    }




    static if(!is(typeof(OBJ_id_pkix_OCSP_valid))) {
        private enum enumMixinStr_OBJ_id_pkix_OCSP_valid = `enum OBJ_id_pkix_OCSP_valid = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 48L , 1L , 9L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_pkix_OCSP_valid); }))) {
            mixin(enumMixinStr_OBJ_id_pkix_OCSP_valid);
        }
    }




    static if(!is(typeof(SN_id_pkix_OCSP_path))) {
        private enum enumMixinStr_SN_id_pkix_OCSP_path = `enum SN_id_pkix_OCSP_path = "path";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_pkix_OCSP_path); }))) {
            mixin(enumMixinStr_SN_id_pkix_OCSP_path);
        }
    }




    static if(!is(typeof(NID_id_pkix_OCSP_path))) {
        private enum enumMixinStr_NID_id_pkix_OCSP_path = `enum NID_id_pkix_OCSP_path = 374;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_pkix_OCSP_path); }))) {
            mixin(enumMixinStr_NID_id_pkix_OCSP_path);
        }
    }




    static if(!is(typeof(OBJ_id_pkix_OCSP_path))) {
        private enum enumMixinStr_OBJ_id_pkix_OCSP_path = `enum OBJ_id_pkix_OCSP_path = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 48L , 1L , 10L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_pkix_OCSP_path); }))) {
            mixin(enumMixinStr_OBJ_id_pkix_OCSP_path);
        }
    }




    static if(!is(typeof(SN_id_pkix_OCSP_trustRoot))) {
        private enum enumMixinStr_SN_id_pkix_OCSP_trustRoot = `enum SN_id_pkix_OCSP_trustRoot = "trustRoot";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_pkix_OCSP_trustRoot); }))) {
            mixin(enumMixinStr_SN_id_pkix_OCSP_trustRoot);
        }
    }




    static if(!is(typeof(LN_id_pkix_OCSP_trustRoot))) {
        private enum enumMixinStr_LN_id_pkix_OCSP_trustRoot = `enum LN_id_pkix_OCSP_trustRoot = "Trust Root";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_id_pkix_OCSP_trustRoot); }))) {
            mixin(enumMixinStr_LN_id_pkix_OCSP_trustRoot);
        }
    }




    static if(!is(typeof(NID_id_pkix_OCSP_trustRoot))) {
        private enum enumMixinStr_NID_id_pkix_OCSP_trustRoot = `enum NID_id_pkix_OCSP_trustRoot = 375;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_pkix_OCSP_trustRoot); }))) {
            mixin(enumMixinStr_NID_id_pkix_OCSP_trustRoot);
        }
    }




    static if(!is(typeof(OBJ_id_pkix_OCSP_trustRoot))) {
        private enum enumMixinStr_OBJ_id_pkix_OCSP_trustRoot = `enum OBJ_id_pkix_OCSP_trustRoot = 1L , 3L , 6L , 1L , 5L , 5L , 7L , 48L , 1L , 11L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_pkix_OCSP_trustRoot); }))) {
            mixin(enumMixinStr_OBJ_id_pkix_OCSP_trustRoot);
        }
    }




    static if(!is(typeof(SN_algorithm))) {
        private enum enumMixinStr_SN_algorithm = `enum SN_algorithm = "algorithm";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_algorithm); }))) {
            mixin(enumMixinStr_SN_algorithm);
        }
    }




    static if(!is(typeof(LN_algorithm))) {
        private enum enumMixinStr_LN_algorithm = `enum LN_algorithm = "algorithm";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_algorithm); }))) {
            mixin(enumMixinStr_LN_algorithm);
        }
    }




    static if(!is(typeof(NID_algorithm))) {
        private enum enumMixinStr_NID_algorithm = `enum NID_algorithm = 376;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_algorithm); }))) {
            mixin(enumMixinStr_NID_algorithm);
        }
    }




    static if(!is(typeof(OBJ_algorithm))) {
        private enum enumMixinStr_OBJ_algorithm = `enum OBJ_algorithm = 1L , 3L , 14L , 3L , 2L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_algorithm); }))) {
            mixin(enumMixinStr_OBJ_algorithm);
        }
    }




    static if(!is(typeof(SN_md5WithRSA))) {
        private enum enumMixinStr_SN_md5WithRSA = `enum SN_md5WithRSA = "RSA-NP-MD5";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_md5WithRSA); }))) {
            mixin(enumMixinStr_SN_md5WithRSA);
        }
    }




    static if(!is(typeof(LN_md5WithRSA))) {
        private enum enumMixinStr_LN_md5WithRSA = `enum LN_md5WithRSA = "md5WithRSA";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_md5WithRSA); }))) {
            mixin(enumMixinStr_LN_md5WithRSA);
        }
    }




    static if(!is(typeof(NID_md5WithRSA))) {
        private enum enumMixinStr_NID_md5WithRSA = `enum NID_md5WithRSA = 104;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_md5WithRSA); }))) {
            mixin(enumMixinStr_NID_md5WithRSA);
        }
    }




    static if(!is(typeof(OBJ_md5WithRSA))) {
        private enum enumMixinStr_OBJ_md5WithRSA = `enum OBJ_md5WithRSA = 1L , 3L , 14L , 3L , 2L , 3L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_md5WithRSA); }))) {
            mixin(enumMixinStr_OBJ_md5WithRSA);
        }
    }




    static if(!is(typeof(SN_des_ecb))) {
        private enum enumMixinStr_SN_des_ecb = `enum SN_des_ecb = "DES-ECB";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_des_ecb); }))) {
            mixin(enumMixinStr_SN_des_ecb);
        }
    }




    static if(!is(typeof(LN_des_ecb))) {
        private enum enumMixinStr_LN_des_ecb = `enum LN_des_ecb = "des-ecb";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_des_ecb); }))) {
            mixin(enumMixinStr_LN_des_ecb);
        }
    }




    static if(!is(typeof(NID_des_ecb))) {
        private enum enumMixinStr_NID_des_ecb = `enum NID_des_ecb = 29;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_des_ecb); }))) {
            mixin(enumMixinStr_NID_des_ecb);
        }
    }




    static if(!is(typeof(OBJ_des_ecb))) {
        private enum enumMixinStr_OBJ_des_ecb = `enum OBJ_des_ecb = 1L , 3L , 14L , 3L , 2L , 6L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_des_ecb); }))) {
            mixin(enumMixinStr_OBJ_des_ecb);
        }
    }




    static if(!is(typeof(SN_des_cbc))) {
        private enum enumMixinStr_SN_des_cbc = `enum SN_des_cbc = "DES-CBC";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_des_cbc); }))) {
            mixin(enumMixinStr_SN_des_cbc);
        }
    }




    static if(!is(typeof(LN_des_cbc))) {
        private enum enumMixinStr_LN_des_cbc = `enum LN_des_cbc = "des-cbc";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_des_cbc); }))) {
            mixin(enumMixinStr_LN_des_cbc);
        }
    }




    static if(!is(typeof(NID_des_cbc))) {
        private enum enumMixinStr_NID_des_cbc = `enum NID_des_cbc = 31;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_des_cbc); }))) {
            mixin(enumMixinStr_NID_des_cbc);
        }
    }




    static if(!is(typeof(OBJ_des_cbc))) {
        private enum enumMixinStr_OBJ_des_cbc = `enum OBJ_des_cbc = 1L , 3L , 14L , 3L , 2L , 7L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_des_cbc); }))) {
            mixin(enumMixinStr_OBJ_des_cbc);
        }
    }




    static if(!is(typeof(SN_des_ofb64))) {
        private enum enumMixinStr_SN_des_ofb64 = `enum SN_des_ofb64 = "DES-OFB";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_des_ofb64); }))) {
            mixin(enumMixinStr_SN_des_ofb64);
        }
    }




    static if(!is(typeof(LN_des_ofb64))) {
        private enum enumMixinStr_LN_des_ofb64 = `enum LN_des_ofb64 = "des-ofb";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_des_ofb64); }))) {
            mixin(enumMixinStr_LN_des_ofb64);
        }
    }




    static if(!is(typeof(NID_des_ofb64))) {
        private enum enumMixinStr_NID_des_ofb64 = `enum NID_des_ofb64 = 45;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_des_ofb64); }))) {
            mixin(enumMixinStr_NID_des_ofb64);
        }
    }




    static if(!is(typeof(OBJ_des_ofb64))) {
        private enum enumMixinStr_OBJ_des_ofb64 = `enum OBJ_des_ofb64 = 1L , 3L , 14L , 3L , 2L , 8L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_des_ofb64); }))) {
            mixin(enumMixinStr_OBJ_des_ofb64);
        }
    }




    static if(!is(typeof(SN_des_cfb64))) {
        private enum enumMixinStr_SN_des_cfb64 = `enum SN_des_cfb64 = "DES-CFB";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_des_cfb64); }))) {
            mixin(enumMixinStr_SN_des_cfb64);
        }
    }




    static if(!is(typeof(LN_des_cfb64))) {
        private enum enumMixinStr_LN_des_cfb64 = `enum LN_des_cfb64 = "des-cfb";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_des_cfb64); }))) {
            mixin(enumMixinStr_LN_des_cfb64);
        }
    }




    static if(!is(typeof(NID_des_cfb64))) {
        private enum enumMixinStr_NID_des_cfb64 = `enum NID_des_cfb64 = 30;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_des_cfb64); }))) {
            mixin(enumMixinStr_NID_des_cfb64);
        }
    }




    static if(!is(typeof(OBJ_des_cfb64))) {
        private enum enumMixinStr_OBJ_des_cfb64 = `enum OBJ_des_cfb64 = 1L , 3L , 14L , 3L , 2L , 9L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_des_cfb64); }))) {
            mixin(enumMixinStr_OBJ_des_cfb64);
        }
    }




    static if(!is(typeof(SN_rsaSignature))) {
        private enum enumMixinStr_SN_rsaSignature = `enum SN_rsaSignature = "rsaSignature";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_rsaSignature); }))) {
            mixin(enumMixinStr_SN_rsaSignature);
        }
    }




    static if(!is(typeof(NID_rsaSignature))) {
        private enum enumMixinStr_NID_rsaSignature = `enum NID_rsaSignature = 377;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_rsaSignature); }))) {
            mixin(enumMixinStr_NID_rsaSignature);
        }
    }




    static if(!is(typeof(OBJ_rsaSignature))) {
        private enum enumMixinStr_OBJ_rsaSignature = `enum OBJ_rsaSignature = 1L , 3L , 14L , 3L , 2L , 11L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_rsaSignature); }))) {
            mixin(enumMixinStr_OBJ_rsaSignature);
        }
    }




    static if(!is(typeof(SN_dsa_2))) {
        private enum enumMixinStr_SN_dsa_2 = `enum SN_dsa_2 = "DSA-old";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_dsa_2); }))) {
            mixin(enumMixinStr_SN_dsa_2);
        }
    }




    static if(!is(typeof(LN_dsa_2))) {
        private enum enumMixinStr_LN_dsa_2 = `enum LN_dsa_2 = "dsaEncryption-old";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_dsa_2); }))) {
            mixin(enumMixinStr_LN_dsa_2);
        }
    }




    static if(!is(typeof(NID_dsa_2))) {
        private enum enumMixinStr_NID_dsa_2 = `enum NID_dsa_2 = 67;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_dsa_2); }))) {
            mixin(enumMixinStr_NID_dsa_2);
        }
    }




    static if(!is(typeof(OBJ_dsa_2))) {
        private enum enumMixinStr_OBJ_dsa_2 = `enum OBJ_dsa_2 = 1L , 3L , 14L , 3L , 2L , 12L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_dsa_2); }))) {
            mixin(enumMixinStr_OBJ_dsa_2);
        }
    }




    static if(!is(typeof(SN_dsaWithSHA))) {
        private enum enumMixinStr_SN_dsaWithSHA = `enum SN_dsaWithSHA = "DSA-SHA";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_dsaWithSHA); }))) {
            mixin(enumMixinStr_SN_dsaWithSHA);
        }
    }




    static if(!is(typeof(LN_dsaWithSHA))) {
        private enum enumMixinStr_LN_dsaWithSHA = `enum LN_dsaWithSHA = "dsaWithSHA";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_dsaWithSHA); }))) {
            mixin(enumMixinStr_LN_dsaWithSHA);
        }
    }




    static if(!is(typeof(NID_dsaWithSHA))) {
        private enum enumMixinStr_NID_dsaWithSHA = `enum NID_dsaWithSHA = 66;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_dsaWithSHA); }))) {
            mixin(enumMixinStr_NID_dsaWithSHA);
        }
    }




    static if(!is(typeof(OBJ_dsaWithSHA))) {
        private enum enumMixinStr_OBJ_dsaWithSHA = `enum OBJ_dsaWithSHA = 1L , 3L , 14L , 3L , 2L , 13L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_dsaWithSHA); }))) {
            mixin(enumMixinStr_OBJ_dsaWithSHA);
        }
    }




    static if(!is(typeof(SN_shaWithRSAEncryption))) {
        private enum enumMixinStr_SN_shaWithRSAEncryption = `enum SN_shaWithRSAEncryption = "RSA-SHA";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_shaWithRSAEncryption); }))) {
            mixin(enumMixinStr_SN_shaWithRSAEncryption);
        }
    }




    static if(!is(typeof(LN_shaWithRSAEncryption))) {
        private enum enumMixinStr_LN_shaWithRSAEncryption = `enum LN_shaWithRSAEncryption = "shaWithRSAEncryption";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_shaWithRSAEncryption); }))) {
            mixin(enumMixinStr_LN_shaWithRSAEncryption);
        }
    }




    static if(!is(typeof(NID_shaWithRSAEncryption))) {
        private enum enumMixinStr_NID_shaWithRSAEncryption = `enum NID_shaWithRSAEncryption = 42;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_shaWithRSAEncryption); }))) {
            mixin(enumMixinStr_NID_shaWithRSAEncryption);
        }
    }




    static if(!is(typeof(OBJ_shaWithRSAEncryption))) {
        private enum enumMixinStr_OBJ_shaWithRSAEncryption = `enum OBJ_shaWithRSAEncryption = 1L , 3L , 14L , 3L , 2L , 15L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_shaWithRSAEncryption); }))) {
            mixin(enumMixinStr_OBJ_shaWithRSAEncryption);
        }
    }




    static if(!is(typeof(SN_des_ede_ecb))) {
        private enum enumMixinStr_SN_des_ede_ecb = `enum SN_des_ede_ecb = "DES-EDE";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_des_ede_ecb); }))) {
            mixin(enumMixinStr_SN_des_ede_ecb);
        }
    }




    static if(!is(typeof(LN_des_ede_ecb))) {
        private enum enumMixinStr_LN_des_ede_ecb = `enum LN_des_ede_ecb = "des-ede";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_des_ede_ecb); }))) {
            mixin(enumMixinStr_LN_des_ede_ecb);
        }
    }




    static if(!is(typeof(NID_des_ede_ecb))) {
        private enum enumMixinStr_NID_des_ede_ecb = `enum NID_des_ede_ecb = 32;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_des_ede_ecb); }))) {
            mixin(enumMixinStr_NID_des_ede_ecb);
        }
    }




    static if(!is(typeof(OBJ_des_ede_ecb))) {
        private enum enumMixinStr_OBJ_des_ede_ecb = `enum OBJ_des_ede_ecb = 1L , 3L , 14L , 3L , 2L , 17L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_des_ede_ecb); }))) {
            mixin(enumMixinStr_OBJ_des_ede_ecb);
        }
    }




    static if(!is(typeof(SN_des_ede3_ecb))) {
        private enum enumMixinStr_SN_des_ede3_ecb = `enum SN_des_ede3_ecb = "DES-EDE3";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_des_ede3_ecb); }))) {
            mixin(enumMixinStr_SN_des_ede3_ecb);
        }
    }




    static if(!is(typeof(LN_des_ede3_ecb))) {
        private enum enumMixinStr_LN_des_ede3_ecb = `enum LN_des_ede3_ecb = "des-ede3";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_des_ede3_ecb); }))) {
            mixin(enumMixinStr_LN_des_ede3_ecb);
        }
    }




    static if(!is(typeof(NID_des_ede3_ecb))) {
        private enum enumMixinStr_NID_des_ede3_ecb = `enum NID_des_ede3_ecb = 33;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_des_ede3_ecb); }))) {
            mixin(enumMixinStr_NID_des_ede3_ecb);
        }
    }




    static if(!is(typeof(SN_des_ede_cbc))) {
        private enum enumMixinStr_SN_des_ede_cbc = `enum SN_des_ede_cbc = "DES-EDE-CBC";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_des_ede_cbc); }))) {
            mixin(enumMixinStr_SN_des_ede_cbc);
        }
    }




    static if(!is(typeof(LN_des_ede_cbc))) {
        private enum enumMixinStr_LN_des_ede_cbc = `enum LN_des_ede_cbc = "des-ede-cbc";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_des_ede_cbc); }))) {
            mixin(enumMixinStr_LN_des_ede_cbc);
        }
    }




    static if(!is(typeof(NID_des_ede_cbc))) {
        private enum enumMixinStr_NID_des_ede_cbc = `enum NID_des_ede_cbc = 43;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_des_ede_cbc); }))) {
            mixin(enumMixinStr_NID_des_ede_cbc);
        }
    }




    static if(!is(typeof(SN_des_ede_cfb64))) {
        private enum enumMixinStr_SN_des_ede_cfb64 = `enum SN_des_ede_cfb64 = "DES-EDE-CFB";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_des_ede_cfb64); }))) {
            mixin(enumMixinStr_SN_des_ede_cfb64);
        }
    }




    static if(!is(typeof(LN_des_ede_cfb64))) {
        private enum enumMixinStr_LN_des_ede_cfb64 = `enum LN_des_ede_cfb64 = "des-ede-cfb";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_des_ede_cfb64); }))) {
            mixin(enumMixinStr_LN_des_ede_cfb64);
        }
    }




    static if(!is(typeof(NID_des_ede_cfb64))) {
        private enum enumMixinStr_NID_des_ede_cfb64 = `enum NID_des_ede_cfb64 = 60;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_des_ede_cfb64); }))) {
            mixin(enumMixinStr_NID_des_ede_cfb64);
        }
    }




    static if(!is(typeof(SN_des_ede3_cfb64))) {
        private enum enumMixinStr_SN_des_ede3_cfb64 = `enum SN_des_ede3_cfb64 = "DES-EDE3-CFB";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_des_ede3_cfb64); }))) {
            mixin(enumMixinStr_SN_des_ede3_cfb64);
        }
    }




    static if(!is(typeof(LN_des_ede3_cfb64))) {
        private enum enumMixinStr_LN_des_ede3_cfb64 = `enum LN_des_ede3_cfb64 = "des-ede3-cfb";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_des_ede3_cfb64); }))) {
            mixin(enumMixinStr_LN_des_ede3_cfb64);
        }
    }




    static if(!is(typeof(NID_des_ede3_cfb64))) {
        private enum enumMixinStr_NID_des_ede3_cfb64 = `enum NID_des_ede3_cfb64 = 61;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_des_ede3_cfb64); }))) {
            mixin(enumMixinStr_NID_des_ede3_cfb64);
        }
    }




    static if(!is(typeof(SN_des_ede_ofb64))) {
        private enum enumMixinStr_SN_des_ede_ofb64 = `enum SN_des_ede_ofb64 = "DES-EDE-OFB";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_des_ede_ofb64); }))) {
            mixin(enumMixinStr_SN_des_ede_ofb64);
        }
    }




    static if(!is(typeof(LN_des_ede_ofb64))) {
        private enum enumMixinStr_LN_des_ede_ofb64 = `enum LN_des_ede_ofb64 = "des-ede-ofb";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_des_ede_ofb64); }))) {
            mixin(enumMixinStr_LN_des_ede_ofb64);
        }
    }




    static if(!is(typeof(NID_des_ede_ofb64))) {
        private enum enumMixinStr_NID_des_ede_ofb64 = `enum NID_des_ede_ofb64 = 62;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_des_ede_ofb64); }))) {
            mixin(enumMixinStr_NID_des_ede_ofb64);
        }
    }




    static if(!is(typeof(SN_des_ede3_ofb64))) {
        private enum enumMixinStr_SN_des_ede3_ofb64 = `enum SN_des_ede3_ofb64 = "DES-EDE3-OFB";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_des_ede3_ofb64); }))) {
            mixin(enumMixinStr_SN_des_ede3_ofb64);
        }
    }




    static if(!is(typeof(LN_des_ede3_ofb64))) {
        private enum enumMixinStr_LN_des_ede3_ofb64 = `enum LN_des_ede3_ofb64 = "des-ede3-ofb";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_des_ede3_ofb64); }))) {
            mixin(enumMixinStr_LN_des_ede3_ofb64);
        }
    }




    static if(!is(typeof(NID_des_ede3_ofb64))) {
        private enum enumMixinStr_NID_des_ede3_ofb64 = `enum NID_des_ede3_ofb64 = 63;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_des_ede3_ofb64); }))) {
            mixin(enumMixinStr_NID_des_ede3_ofb64);
        }
    }




    static if(!is(typeof(SN_desx_cbc))) {
        private enum enumMixinStr_SN_desx_cbc = `enum SN_desx_cbc = "DESX-CBC";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_desx_cbc); }))) {
            mixin(enumMixinStr_SN_desx_cbc);
        }
    }




    static if(!is(typeof(LN_desx_cbc))) {
        private enum enumMixinStr_LN_desx_cbc = `enum LN_desx_cbc = "desx-cbc";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_desx_cbc); }))) {
            mixin(enumMixinStr_LN_desx_cbc);
        }
    }




    static if(!is(typeof(NID_desx_cbc))) {
        private enum enumMixinStr_NID_desx_cbc = `enum NID_desx_cbc = 80;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_desx_cbc); }))) {
            mixin(enumMixinStr_NID_desx_cbc);
        }
    }




    static if(!is(typeof(SN_sha))) {
        private enum enumMixinStr_SN_sha = `enum SN_sha = "SHA";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_sha); }))) {
            mixin(enumMixinStr_SN_sha);
        }
    }




    static if(!is(typeof(LN_sha))) {
        private enum enumMixinStr_LN_sha = `enum LN_sha = "sha";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_sha); }))) {
            mixin(enumMixinStr_LN_sha);
        }
    }




    static if(!is(typeof(NID_sha))) {
        private enum enumMixinStr_NID_sha = `enum NID_sha = 41;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_sha); }))) {
            mixin(enumMixinStr_NID_sha);
        }
    }




    static if(!is(typeof(OBJ_sha))) {
        private enum enumMixinStr_OBJ_sha = `enum OBJ_sha = 1L , 3L , 14L , 3L , 2L , 18L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_sha); }))) {
            mixin(enumMixinStr_OBJ_sha);
        }
    }




    static if(!is(typeof(SN_sha1))) {
        private enum enumMixinStr_SN_sha1 = `enum SN_sha1 = "SHA1";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_sha1); }))) {
            mixin(enumMixinStr_SN_sha1);
        }
    }




    static if(!is(typeof(LN_sha1))) {
        private enum enumMixinStr_LN_sha1 = `enum LN_sha1 = "sha1";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_sha1); }))) {
            mixin(enumMixinStr_LN_sha1);
        }
    }




    static if(!is(typeof(NID_sha1))) {
        private enum enumMixinStr_NID_sha1 = `enum NID_sha1 = 64;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_sha1); }))) {
            mixin(enumMixinStr_NID_sha1);
        }
    }




    static if(!is(typeof(OBJ_sha1))) {
        private enum enumMixinStr_OBJ_sha1 = `enum OBJ_sha1 = 1L , 3L , 14L , 3L , 2L , 26L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_sha1); }))) {
            mixin(enumMixinStr_OBJ_sha1);
        }
    }




    static if(!is(typeof(SN_dsaWithSHA1_2))) {
        private enum enumMixinStr_SN_dsaWithSHA1_2 = `enum SN_dsaWithSHA1_2 = "DSA-SHA1-old";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_dsaWithSHA1_2); }))) {
            mixin(enumMixinStr_SN_dsaWithSHA1_2);
        }
    }




    static if(!is(typeof(LN_dsaWithSHA1_2))) {
        private enum enumMixinStr_LN_dsaWithSHA1_2 = `enum LN_dsaWithSHA1_2 = "dsaWithSHA1-old";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_dsaWithSHA1_2); }))) {
            mixin(enumMixinStr_LN_dsaWithSHA1_2);
        }
    }




    static if(!is(typeof(NID_dsaWithSHA1_2))) {
        private enum enumMixinStr_NID_dsaWithSHA1_2 = `enum NID_dsaWithSHA1_2 = 70;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_dsaWithSHA1_2); }))) {
            mixin(enumMixinStr_NID_dsaWithSHA1_2);
        }
    }




    static if(!is(typeof(OBJ_dsaWithSHA1_2))) {
        private enum enumMixinStr_OBJ_dsaWithSHA1_2 = `enum OBJ_dsaWithSHA1_2 = 1L , 3L , 14L , 3L , 2L , 27L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_dsaWithSHA1_2); }))) {
            mixin(enumMixinStr_OBJ_dsaWithSHA1_2);
        }
    }




    static if(!is(typeof(SN_sha1WithRSA))) {
        private enum enumMixinStr_SN_sha1WithRSA = `enum SN_sha1WithRSA = "RSA-SHA1-2";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_sha1WithRSA); }))) {
            mixin(enumMixinStr_SN_sha1WithRSA);
        }
    }




    static if(!is(typeof(LN_sha1WithRSA))) {
        private enum enumMixinStr_LN_sha1WithRSA = `enum LN_sha1WithRSA = "sha1WithRSA";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_sha1WithRSA); }))) {
            mixin(enumMixinStr_LN_sha1WithRSA);
        }
    }




    static if(!is(typeof(NID_sha1WithRSA))) {
        private enum enumMixinStr_NID_sha1WithRSA = `enum NID_sha1WithRSA = 115;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_sha1WithRSA); }))) {
            mixin(enumMixinStr_NID_sha1WithRSA);
        }
    }




    static if(!is(typeof(OBJ_sha1WithRSA))) {
        private enum enumMixinStr_OBJ_sha1WithRSA = `enum OBJ_sha1WithRSA = 1L , 3L , 14L , 3L , 2L , 29L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_sha1WithRSA); }))) {
            mixin(enumMixinStr_OBJ_sha1WithRSA);
        }
    }




    static if(!is(typeof(SN_ripemd160))) {
        private enum enumMixinStr_SN_ripemd160 = `enum SN_ripemd160 = "RIPEMD160";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_ripemd160); }))) {
            mixin(enumMixinStr_SN_ripemd160);
        }
    }




    static if(!is(typeof(LN_ripemd160))) {
        private enum enumMixinStr_LN_ripemd160 = `enum LN_ripemd160 = "ripemd160";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_ripemd160); }))) {
            mixin(enumMixinStr_LN_ripemd160);
        }
    }




    static if(!is(typeof(NID_ripemd160))) {
        private enum enumMixinStr_NID_ripemd160 = `enum NID_ripemd160 = 117;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_ripemd160); }))) {
            mixin(enumMixinStr_NID_ripemd160);
        }
    }




    static if(!is(typeof(OBJ_ripemd160))) {
        private enum enumMixinStr_OBJ_ripemd160 = `enum OBJ_ripemd160 = 1L , 3L , 36L , 3L , 2L , 1L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_ripemd160); }))) {
            mixin(enumMixinStr_OBJ_ripemd160);
        }
    }




    static if(!is(typeof(SN_ripemd160WithRSA))) {
        private enum enumMixinStr_SN_ripemd160WithRSA = `enum SN_ripemd160WithRSA = "RSA-RIPEMD160";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_ripemd160WithRSA); }))) {
            mixin(enumMixinStr_SN_ripemd160WithRSA);
        }
    }




    static if(!is(typeof(LN_ripemd160WithRSA))) {
        private enum enumMixinStr_LN_ripemd160WithRSA = `enum LN_ripemd160WithRSA = "ripemd160WithRSA";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_ripemd160WithRSA); }))) {
            mixin(enumMixinStr_LN_ripemd160WithRSA);
        }
    }




    static if(!is(typeof(NID_ripemd160WithRSA))) {
        private enum enumMixinStr_NID_ripemd160WithRSA = `enum NID_ripemd160WithRSA = 119;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_ripemd160WithRSA); }))) {
            mixin(enumMixinStr_NID_ripemd160WithRSA);
        }
    }




    static if(!is(typeof(OBJ_ripemd160WithRSA))) {
        private enum enumMixinStr_OBJ_ripemd160WithRSA = `enum OBJ_ripemd160WithRSA = 1L , 3L , 36L , 3L , 3L , 1L , 2L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_ripemd160WithRSA); }))) {
            mixin(enumMixinStr_OBJ_ripemd160WithRSA);
        }
    }




    static if(!is(typeof(SN_blake2b512))) {
        private enum enumMixinStr_SN_blake2b512 = `enum SN_blake2b512 = "BLAKE2b512";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_blake2b512); }))) {
            mixin(enumMixinStr_SN_blake2b512);
        }
    }




    static if(!is(typeof(LN_blake2b512))) {
        private enum enumMixinStr_LN_blake2b512 = `enum LN_blake2b512 = "blake2b512";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_blake2b512); }))) {
            mixin(enumMixinStr_LN_blake2b512);
        }
    }




    static if(!is(typeof(NID_blake2b512))) {
        private enum enumMixinStr_NID_blake2b512 = `enum NID_blake2b512 = 1056;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_blake2b512); }))) {
            mixin(enumMixinStr_NID_blake2b512);
        }
    }




    static if(!is(typeof(OBJ_blake2b512))) {
        private enum enumMixinStr_OBJ_blake2b512 = `enum OBJ_blake2b512 = 1L , 3L , 6L , 1L , 4L , 1L , 1722L , 12L , 2L , 1L , 16L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_blake2b512); }))) {
            mixin(enumMixinStr_OBJ_blake2b512);
        }
    }




    static if(!is(typeof(SN_blake2s256))) {
        private enum enumMixinStr_SN_blake2s256 = `enum SN_blake2s256 = "BLAKE2s256";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_blake2s256); }))) {
            mixin(enumMixinStr_SN_blake2s256);
        }
    }




    static if(!is(typeof(LN_blake2s256))) {
        private enum enumMixinStr_LN_blake2s256 = `enum LN_blake2s256 = "blake2s256";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_blake2s256); }))) {
            mixin(enumMixinStr_LN_blake2s256);
        }
    }




    static if(!is(typeof(NID_blake2s256))) {
        private enum enumMixinStr_NID_blake2s256 = `enum NID_blake2s256 = 1057;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_blake2s256); }))) {
            mixin(enumMixinStr_NID_blake2s256);
        }
    }




    static if(!is(typeof(OBJ_blake2s256))) {
        private enum enumMixinStr_OBJ_blake2s256 = `enum OBJ_blake2s256 = 1L , 3L , 6L , 1L , 4L , 1L , 1722L , 12L , 2L , 2L , 8L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_blake2s256); }))) {
            mixin(enumMixinStr_OBJ_blake2s256);
        }
    }




    static if(!is(typeof(SN_sxnet))) {
        private enum enumMixinStr_SN_sxnet = `enum SN_sxnet = "SXNetID";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_sxnet); }))) {
            mixin(enumMixinStr_SN_sxnet);
        }
    }




    static if(!is(typeof(LN_sxnet))) {
        private enum enumMixinStr_LN_sxnet = `enum LN_sxnet = "Strong Extranet ID";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_sxnet); }))) {
            mixin(enumMixinStr_LN_sxnet);
        }
    }




    static if(!is(typeof(NID_sxnet))) {
        private enum enumMixinStr_NID_sxnet = `enum NID_sxnet = 143;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_sxnet); }))) {
            mixin(enumMixinStr_NID_sxnet);
        }
    }




    static if(!is(typeof(OBJ_sxnet))) {
        private enum enumMixinStr_OBJ_sxnet = `enum OBJ_sxnet = 1L , 3L , 101L , 1L , 4L , 1L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_sxnet); }))) {
            mixin(enumMixinStr_OBJ_sxnet);
        }
    }




    static if(!is(typeof(SN_X500))) {
        private enum enumMixinStr_SN_X500 = `enum SN_X500 = "X500";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_X500); }))) {
            mixin(enumMixinStr_SN_X500);
        }
    }




    static if(!is(typeof(LN_X500))) {
        private enum enumMixinStr_LN_X500 = `enum LN_X500 = "directory services (X.500)";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_X500); }))) {
            mixin(enumMixinStr_LN_X500);
        }
    }




    static if(!is(typeof(NID_X500))) {
        private enum enumMixinStr_NID_X500 = `enum NID_X500 = 11;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_X500); }))) {
            mixin(enumMixinStr_NID_X500);
        }
    }




    static if(!is(typeof(OBJ_X500))) {
        private enum enumMixinStr_OBJ_X500 = `enum OBJ_X500 = 2L , 5L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_X500); }))) {
            mixin(enumMixinStr_OBJ_X500);
        }
    }




    static if(!is(typeof(SN_X509))) {
        private enum enumMixinStr_SN_X509 = `enum SN_X509 = "X509";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_X509); }))) {
            mixin(enumMixinStr_SN_X509);
        }
    }




    static if(!is(typeof(NID_X509))) {
        private enum enumMixinStr_NID_X509 = `enum NID_X509 = 12;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_X509); }))) {
            mixin(enumMixinStr_NID_X509);
        }
    }




    static if(!is(typeof(OBJ_X509))) {
        private enum enumMixinStr_OBJ_X509 = `enum OBJ_X509 = 2L , 5L , 4L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_X509); }))) {
            mixin(enumMixinStr_OBJ_X509);
        }
    }




    static if(!is(typeof(SN_commonName))) {
        private enum enumMixinStr_SN_commonName = `enum SN_commonName = "CN";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_commonName); }))) {
            mixin(enumMixinStr_SN_commonName);
        }
    }




    static if(!is(typeof(LN_commonName))) {
        private enum enumMixinStr_LN_commonName = `enum LN_commonName = "commonName";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_commonName); }))) {
            mixin(enumMixinStr_LN_commonName);
        }
    }




    static if(!is(typeof(NID_commonName))) {
        private enum enumMixinStr_NID_commonName = `enum NID_commonName = 13;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_commonName); }))) {
            mixin(enumMixinStr_NID_commonName);
        }
    }




    static if(!is(typeof(OBJ_commonName))) {
        private enum enumMixinStr_OBJ_commonName = `enum OBJ_commonName = 2L , 5L , 4L , 3L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_commonName); }))) {
            mixin(enumMixinStr_OBJ_commonName);
        }
    }




    static if(!is(typeof(SN_surname))) {
        private enum enumMixinStr_SN_surname = `enum SN_surname = "SN";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_surname); }))) {
            mixin(enumMixinStr_SN_surname);
        }
    }




    static if(!is(typeof(LN_surname))) {
        private enum enumMixinStr_LN_surname = `enum LN_surname = "surname";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_surname); }))) {
            mixin(enumMixinStr_LN_surname);
        }
    }




    static if(!is(typeof(NID_surname))) {
        private enum enumMixinStr_NID_surname = `enum NID_surname = 100;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_surname); }))) {
            mixin(enumMixinStr_NID_surname);
        }
    }




    static if(!is(typeof(OBJ_surname))) {
        private enum enumMixinStr_OBJ_surname = `enum OBJ_surname = 2L , 5L , 4L , 4L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_surname); }))) {
            mixin(enumMixinStr_OBJ_surname);
        }
    }




    static if(!is(typeof(LN_serialNumber))) {
        private enum enumMixinStr_LN_serialNumber = `enum LN_serialNumber = "serialNumber";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_serialNumber); }))) {
            mixin(enumMixinStr_LN_serialNumber);
        }
    }




    static if(!is(typeof(NID_serialNumber))) {
        private enum enumMixinStr_NID_serialNumber = `enum NID_serialNumber = 105;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_serialNumber); }))) {
            mixin(enumMixinStr_NID_serialNumber);
        }
    }




    static if(!is(typeof(OBJ_serialNumber))) {
        private enum enumMixinStr_OBJ_serialNumber = `enum OBJ_serialNumber = 2L , 5L , 4L , 5L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_serialNumber); }))) {
            mixin(enumMixinStr_OBJ_serialNumber);
        }
    }




    static if(!is(typeof(SN_countryName))) {
        private enum enumMixinStr_SN_countryName = `enum SN_countryName = "C";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_countryName); }))) {
            mixin(enumMixinStr_SN_countryName);
        }
    }




    static if(!is(typeof(LN_countryName))) {
        private enum enumMixinStr_LN_countryName = `enum LN_countryName = "countryName";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_countryName); }))) {
            mixin(enumMixinStr_LN_countryName);
        }
    }




    static if(!is(typeof(NID_countryName))) {
        private enum enumMixinStr_NID_countryName = `enum NID_countryName = 14;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_countryName); }))) {
            mixin(enumMixinStr_NID_countryName);
        }
    }




    static if(!is(typeof(OBJ_countryName))) {
        private enum enumMixinStr_OBJ_countryName = `enum OBJ_countryName = 2L , 5L , 4L , 6L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_countryName); }))) {
            mixin(enumMixinStr_OBJ_countryName);
        }
    }




    static if(!is(typeof(SN_localityName))) {
        private enum enumMixinStr_SN_localityName = `enum SN_localityName = "L";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_localityName); }))) {
            mixin(enumMixinStr_SN_localityName);
        }
    }




    static if(!is(typeof(LN_localityName))) {
        private enum enumMixinStr_LN_localityName = `enum LN_localityName = "localityName";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_localityName); }))) {
            mixin(enumMixinStr_LN_localityName);
        }
    }




    static if(!is(typeof(NID_localityName))) {
        private enum enumMixinStr_NID_localityName = `enum NID_localityName = 15;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_localityName); }))) {
            mixin(enumMixinStr_NID_localityName);
        }
    }




    static if(!is(typeof(OBJ_localityName))) {
        private enum enumMixinStr_OBJ_localityName = `enum OBJ_localityName = 2L , 5L , 4L , 7L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_localityName); }))) {
            mixin(enumMixinStr_OBJ_localityName);
        }
    }




    static if(!is(typeof(SN_stateOrProvinceName))) {
        private enum enumMixinStr_SN_stateOrProvinceName = `enum SN_stateOrProvinceName = "ST";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_stateOrProvinceName); }))) {
            mixin(enumMixinStr_SN_stateOrProvinceName);
        }
    }




    static if(!is(typeof(LN_stateOrProvinceName))) {
        private enum enumMixinStr_LN_stateOrProvinceName = `enum LN_stateOrProvinceName = "stateOrProvinceName";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_stateOrProvinceName); }))) {
            mixin(enumMixinStr_LN_stateOrProvinceName);
        }
    }




    static if(!is(typeof(NID_stateOrProvinceName))) {
        private enum enumMixinStr_NID_stateOrProvinceName = `enum NID_stateOrProvinceName = 16;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_stateOrProvinceName); }))) {
            mixin(enumMixinStr_NID_stateOrProvinceName);
        }
    }




    static if(!is(typeof(OBJ_stateOrProvinceName))) {
        private enum enumMixinStr_OBJ_stateOrProvinceName = `enum OBJ_stateOrProvinceName = 2L , 5L , 4L , 8L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_stateOrProvinceName); }))) {
            mixin(enumMixinStr_OBJ_stateOrProvinceName);
        }
    }




    static if(!is(typeof(SN_streetAddress))) {
        private enum enumMixinStr_SN_streetAddress = `enum SN_streetAddress = "street";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_streetAddress); }))) {
            mixin(enumMixinStr_SN_streetAddress);
        }
    }




    static if(!is(typeof(LN_streetAddress))) {
        private enum enumMixinStr_LN_streetAddress = `enum LN_streetAddress = "streetAddress";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_streetAddress); }))) {
            mixin(enumMixinStr_LN_streetAddress);
        }
    }




    static if(!is(typeof(NID_streetAddress))) {
        private enum enumMixinStr_NID_streetAddress = `enum NID_streetAddress = 660;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_streetAddress); }))) {
            mixin(enumMixinStr_NID_streetAddress);
        }
    }




    static if(!is(typeof(OBJ_streetAddress))) {
        private enum enumMixinStr_OBJ_streetAddress = `enum OBJ_streetAddress = 2L , 5L , 4L , 9L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_streetAddress); }))) {
            mixin(enumMixinStr_OBJ_streetAddress);
        }
    }




    static if(!is(typeof(SN_organizationName))) {
        private enum enumMixinStr_SN_organizationName = `enum SN_organizationName = "O";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_organizationName); }))) {
            mixin(enumMixinStr_SN_organizationName);
        }
    }




    static if(!is(typeof(LN_organizationName))) {
        private enum enumMixinStr_LN_organizationName = `enum LN_organizationName = "organizationName";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_organizationName); }))) {
            mixin(enumMixinStr_LN_organizationName);
        }
    }




    static if(!is(typeof(NID_organizationName))) {
        private enum enumMixinStr_NID_organizationName = `enum NID_organizationName = 17;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_organizationName); }))) {
            mixin(enumMixinStr_NID_organizationName);
        }
    }




    static if(!is(typeof(OBJ_organizationName))) {
        private enum enumMixinStr_OBJ_organizationName = `enum OBJ_organizationName = 2L , 5L , 4L , 10L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_organizationName); }))) {
            mixin(enumMixinStr_OBJ_organizationName);
        }
    }




    static if(!is(typeof(SN_organizationalUnitName))) {
        private enum enumMixinStr_SN_organizationalUnitName = `enum SN_organizationalUnitName = "OU";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_organizationalUnitName); }))) {
            mixin(enumMixinStr_SN_organizationalUnitName);
        }
    }




    static if(!is(typeof(LN_organizationalUnitName))) {
        private enum enumMixinStr_LN_organizationalUnitName = `enum LN_organizationalUnitName = "organizationalUnitName";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_organizationalUnitName); }))) {
            mixin(enumMixinStr_LN_organizationalUnitName);
        }
    }




    static if(!is(typeof(NID_organizationalUnitName))) {
        private enum enumMixinStr_NID_organizationalUnitName = `enum NID_organizationalUnitName = 18;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_organizationalUnitName); }))) {
            mixin(enumMixinStr_NID_organizationalUnitName);
        }
    }




    static if(!is(typeof(OBJ_organizationalUnitName))) {
        private enum enumMixinStr_OBJ_organizationalUnitName = `enum OBJ_organizationalUnitName = 2L , 5L , 4L , 11L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_organizationalUnitName); }))) {
            mixin(enumMixinStr_OBJ_organizationalUnitName);
        }
    }




    static if(!is(typeof(SN_title))) {
        private enum enumMixinStr_SN_title = `enum SN_title = "title";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_title); }))) {
            mixin(enumMixinStr_SN_title);
        }
    }




    static if(!is(typeof(LN_title))) {
        private enum enumMixinStr_LN_title = `enum LN_title = "title";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_title); }))) {
            mixin(enumMixinStr_LN_title);
        }
    }




    static if(!is(typeof(NID_title))) {
        private enum enumMixinStr_NID_title = `enum NID_title = 106;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_title); }))) {
            mixin(enumMixinStr_NID_title);
        }
    }




    static if(!is(typeof(OBJ_title))) {
        private enum enumMixinStr_OBJ_title = `enum OBJ_title = 2L , 5L , 4L , 12L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_title); }))) {
            mixin(enumMixinStr_OBJ_title);
        }
    }




    static if(!is(typeof(LN_description))) {
        private enum enumMixinStr_LN_description = `enum LN_description = "description";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_description); }))) {
            mixin(enumMixinStr_LN_description);
        }
    }




    static if(!is(typeof(NID_description))) {
        private enum enumMixinStr_NID_description = `enum NID_description = 107;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_description); }))) {
            mixin(enumMixinStr_NID_description);
        }
    }




    static if(!is(typeof(OBJ_description))) {
        private enum enumMixinStr_OBJ_description = `enum OBJ_description = 2L , 5L , 4L , 13L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_description); }))) {
            mixin(enumMixinStr_OBJ_description);
        }
    }




    static if(!is(typeof(LN_searchGuide))) {
        private enum enumMixinStr_LN_searchGuide = `enum LN_searchGuide = "searchGuide";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_searchGuide); }))) {
            mixin(enumMixinStr_LN_searchGuide);
        }
    }




    static if(!is(typeof(NID_searchGuide))) {
        private enum enumMixinStr_NID_searchGuide = `enum NID_searchGuide = 859;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_searchGuide); }))) {
            mixin(enumMixinStr_NID_searchGuide);
        }
    }




    static if(!is(typeof(OBJ_searchGuide))) {
        private enum enumMixinStr_OBJ_searchGuide = `enum OBJ_searchGuide = 2L , 5L , 4L , 14L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_searchGuide); }))) {
            mixin(enumMixinStr_OBJ_searchGuide);
        }
    }




    static if(!is(typeof(LN_businessCategory))) {
        private enum enumMixinStr_LN_businessCategory = `enum LN_businessCategory = "businessCategory";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_businessCategory); }))) {
            mixin(enumMixinStr_LN_businessCategory);
        }
    }




    static if(!is(typeof(NID_businessCategory))) {
        private enum enumMixinStr_NID_businessCategory = `enum NID_businessCategory = 860;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_businessCategory); }))) {
            mixin(enumMixinStr_NID_businessCategory);
        }
    }




    static if(!is(typeof(OBJ_businessCategory))) {
        private enum enumMixinStr_OBJ_businessCategory = `enum OBJ_businessCategory = 2L , 5L , 4L , 15L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_businessCategory); }))) {
            mixin(enumMixinStr_OBJ_businessCategory);
        }
    }




    static if(!is(typeof(LN_postalAddress))) {
        private enum enumMixinStr_LN_postalAddress = `enum LN_postalAddress = "postalAddress";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_postalAddress); }))) {
            mixin(enumMixinStr_LN_postalAddress);
        }
    }




    static if(!is(typeof(NID_postalAddress))) {
        private enum enumMixinStr_NID_postalAddress = `enum NID_postalAddress = 861;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_postalAddress); }))) {
            mixin(enumMixinStr_NID_postalAddress);
        }
    }




    static if(!is(typeof(OBJ_postalAddress))) {
        private enum enumMixinStr_OBJ_postalAddress = `enum OBJ_postalAddress = 2L , 5L , 4L , 16L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_postalAddress); }))) {
            mixin(enumMixinStr_OBJ_postalAddress);
        }
    }




    static if(!is(typeof(LN_postalCode))) {
        private enum enumMixinStr_LN_postalCode = `enum LN_postalCode = "postalCode";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_postalCode); }))) {
            mixin(enumMixinStr_LN_postalCode);
        }
    }




    static if(!is(typeof(NID_postalCode))) {
        private enum enumMixinStr_NID_postalCode = `enum NID_postalCode = 661;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_postalCode); }))) {
            mixin(enumMixinStr_NID_postalCode);
        }
    }




    static if(!is(typeof(OBJ_postalCode))) {
        private enum enumMixinStr_OBJ_postalCode = `enum OBJ_postalCode = 2L , 5L , 4L , 17L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_postalCode); }))) {
            mixin(enumMixinStr_OBJ_postalCode);
        }
    }




    static if(!is(typeof(LN_postOfficeBox))) {
        private enum enumMixinStr_LN_postOfficeBox = `enum LN_postOfficeBox = "postOfficeBox";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_postOfficeBox); }))) {
            mixin(enumMixinStr_LN_postOfficeBox);
        }
    }




    static if(!is(typeof(NID_postOfficeBox))) {
        private enum enumMixinStr_NID_postOfficeBox = `enum NID_postOfficeBox = 862;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_postOfficeBox); }))) {
            mixin(enumMixinStr_NID_postOfficeBox);
        }
    }




    static if(!is(typeof(OBJ_postOfficeBox))) {
        private enum enumMixinStr_OBJ_postOfficeBox = `enum OBJ_postOfficeBox = 2L , 5L , 4L , 18L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_postOfficeBox); }))) {
            mixin(enumMixinStr_OBJ_postOfficeBox);
        }
    }




    static if(!is(typeof(LN_physicalDeliveryOfficeName))) {
        private enum enumMixinStr_LN_physicalDeliveryOfficeName = `enum LN_physicalDeliveryOfficeName = "physicalDeliveryOfficeName";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_physicalDeliveryOfficeName); }))) {
            mixin(enumMixinStr_LN_physicalDeliveryOfficeName);
        }
    }




    static if(!is(typeof(NID_physicalDeliveryOfficeName))) {
        private enum enumMixinStr_NID_physicalDeliveryOfficeName = `enum NID_physicalDeliveryOfficeName = 863;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_physicalDeliveryOfficeName); }))) {
            mixin(enumMixinStr_NID_physicalDeliveryOfficeName);
        }
    }




    static if(!is(typeof(OBJ_physicalDeliveryOfficeName))) {
        private enum enumMixinStr_OBJ_physicalDeliveryOfficeName = `enum OBJ_physicalDeliveryOfficeName = 2L , 5L , 4L , 19L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_physicalDeliveryOfficeName); }))) {
            mixin(enumMixinStr_OBJ_physicalDeliveryOfficeName);
        }
    }




    static if(!is(typeof(LN_telephoneNumber))) {
        private enum enumMixinStr_LN_telephoneNumber = `enum LN_telephoneNumber = "telephoneNumber";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_telephoneNumber); }))) {
            mixin(enumMixinStr_LN_telephoneNumber);
        }
    }




    static if(!is(typeof(NID_telephoneNumber))) {
        private enum enumMixinStr_NID_telephoneNumber = `enum NID_telephoneNumber = 864;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_telephoneNumber); }))) {
            mixin(enumMixinStr_NID_telephoneNumber);
        }
    }




    static if(!is(typeof(OBJ_telephoneNumber))) {
        private enum enumMixinStr_OBJ_telephoneNumber = `enum OBJ_telephoneNumber = 2L , 5L , 4L , 20L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_telephoneNumber); }))) {
            mixin(enumMixinStr_OBJ_telephoneNumber);
        }
    }




    static if(!is(typeof(LN_telexNumber))) {
        private enum enumMixinStr_LN_telexNumber = `enum LN_telexNumber = "telexNumber";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_telexNumber); }))) {
            mixin(enumMixinStr_LN_telexNumber);
        }
    }




    static if(!is(typeof(NID_telexNumber))) {
        private enum enumMixinStr_NID_telexNumber = `enum NID_telexNumber = 865;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_telexNumber); }))) {
            mixin(enumMixinStr_NID_telexNumber);
        }
    }




    static if(!is(typeof(OBJ_telexNumber))) {
        private enum enumMixinStr_OBJ_telexNumber = `enum OBJ_telexNumber = 2L , 5L , 4L , 21L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_telexNumber); }))) {
            mixin(enumMixinStr_OBJ_telexNumber);
        }
    }




    static if(!is(typeof(LN_teletexTerminalIdentifier))) {
        private enum enumMixinStr_LN_teletexTerminalIdentifier = `enum LN_teletexTerminalIdentifier = "teletexTerminalIdentifier";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_teletexTerminalIdentifier); }))) {
            mixin(enumMixinStr_LN_teletexTerminalIdentifier);
        }
    }




    static if(!is(typeof(NID_teletexTerminalIdentifier))) {
        private enum enumMixinStr_NID_teletexTerminalIdentifier = `enum NID_teletexTerminalIdentifier = 866;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_teletexTerminalIdentifier); }))) {
            mixin(enumMixinStr_NID_teletexTerminalIdentifier);
        }
    }




    static if(!is(typeof(OBJ_teletexTerminalIdentifier))) {
        private enum enumMixinStr_OBJ_teletexTerminalIdentifier = `enum OBJ_teletexTerminalIdentifier = 2L , 5L , 4L , 22L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_teletexTerminalIdentifier); }))) {
            mixin(enumMixinStr_OBJ_teletexTerminalIdentifier);
        }
    }




    static if(!is(typeof(LN_facsimileTelephoneNumber))) {
        private enum enumMixinStr_LN_facsimileTelephoneNumber = `enum LN_facsimileTelephoneNumber = "facsimileTelephoneNumber";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_facsimileTelephoneNumber); }))) {
            mixin(enumMixinStr_LN_facsimileTelephoneNumber);
        }
    }




    static if(!is(typeof(NID_facsimileTelephoneNumber))) {
        private enum enumMixinStr_NID_facsimileTelephoneNumber = `enum NID_facsimileTelephoneNumber = 867;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_facsimileTelephoneNumber); }))) {
            mixin(enumMixinStr_NID_facsimileTelephoneNumber);
        }
    }




    static if(!is(typeof(OBJ_facsimileTelephoneNumber))) {
        private enum enumMixinStr_OBJ_facsimileTelephoneNumber = `enum OBJ_facsimileTelephoneNumber = 2L , 5L , 4L , 23L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_facsimileTelephoneNumber); }))) {
            mixin(enumMixinStr_OBJ_facsimileTelephoneNumber);
        }
    }




    static if(!is(typeof(LN_x121Address))) {
        private enum enumMixinStr_LN_x121Address = `enum LN_x121Address = "x121Address";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_x121Address); }))) {
            mixin(enumMixinStr_LN_x121Address);
        }
    }




    static if(!is(typeof(NID_x121Address))) {
        private enum enumMixinStr_NID_x121Address = `enum NID_x121Address = 868;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_x121Address); }))) {
            mixin(enumMixinStr_NID_x121Address);
        }
    }




    static if(!is(typeof(OBJ_x121Address))) {
        private enum enumMixinStr_OBJ_x121Address = `enum OBJ_x121Address = 2L , 5L , 4L , 24L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_x121Address); }))) {
            mixin(enumMixinStr_OBJ_x121Address);
        }
    }




    static if(!is(typeof(LN_internationaliSDNNumber))) {
        private enum enumMixinStr_LN_internationaliSDNNumber = `enum LN_internationaliSDNNumber = "internationaliSDNNumber";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_internationaliSDNNumber); }))) {
            mixin(enumMixinStr_LN_internationaliSDNNumber);
        }
    }




    static if(!is(typeof(NID_internationaliSDNNumber))) {
        private enum enumMixinStr_NID_internationaliSDNNumber = `enum NID_internationaliSDNNumber = 869;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_internationaliSDNNumber); }))) {
            mixin(enumMixinStr_NID_internationaliSDNNumber);
        }
    }




    static if(!is(typeof(OBJ_internationaliSDNNumber))) {
        private enum enumMixinStr_OBJ_internationaliSDNNumber = `enum OBJ_internationaliSDNNumber = 2L , 5L , 4L , 25L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_internationaliSDNNumber); }))) {
            mixin(enumMixinStr_OBJ_internationaliSDNNumber);
        }
    }




    static if(!is(typeof(LN_registeredAddress))) {
        private enum enumMixinStr_LN_registeredAddress = `enum LN_registeredAddress = "registeredAddress";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_registeredAddress); }))) {
            mixin(enumMixinStr_LN_registeredAddress);
        }
    }




    static if(!is(typeof(NID_registeredAddress))) {
        private enum enumMixinStr_NID_registeredAddress = `enum NID_registeredAddress = 870;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_registeredAddress); }))) {
            mixin(enumMixinStr_NID_registeredAddress);
        }
    }




    static if(!is(typeof(OBJ_registeredAddress))) {
        private enum enumMixinStr_OBJ_registeredAddress = `enum OBJ_registeredAddress = 2L , 5L , 4L , 26L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_registeredAddress); }))) {
            mixin(enumMixinStr_OBJ_registeredAddress);
        }
    }




    static if(!is(typeof(LN_destinationIndicator))) {
        private enum enumMixinStr_LN_destinationIndicator = `enum LN_destinationIndicator = "destinationIndicator";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_destinationIndicator); }))) {
            mixin(enumMixinStr_LN_destinationIndicator);
        }
    }




    static if(!is(typeof(NID_destinationIndicator))) {
        private enum enumMixinStr_NID_destinationIndicator = `enum NID_destinationIndicator = 871;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_destinationIndicator); }))) {
            mixin(enumMixinStr_NID_destinationIndicator);
        }
    }




    static if(!is(typeof(OBJ_destinationIndicator))) {
        private enum enumMixinStr_OBJ_destinationIndicator = `enum OBJ_destinationIndicator = 2L , 5L , 4L , 27L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_destinationIndicator); }))) {
            mixin(enumMixinStr_OBJ_destinationIndicator);
        }
    }




    static if(!is(typeof(LN_preferredDeliveryMethod))) {
        private enum enumMixinStr_LN_preferredDeliveryMethod = `enum LN_preferredDeliveryMethod = "preferredDeliveryMethod";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_preferredDeliveryMethod); }))) {
            mixin(enumMixinStr_LN_preferredDeliveryMethod);
        }
    }




    static if(!is(typeof(NID_preferredDeliveryMethod))) {
        private enum enumMixinStr_NID_preferredDeliveryMethod = `enum NID_preferredDeliveryMethod = 872;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_preferredDeliveryMethod); }))) {
            mixin(enumMixinStr_NID_preferredDeliveryMethod);
        }
    }




    static if(!is(typeof(OBJ_preferredDeliveryMethod))) {
        private enum enumMixinStr_OBJ_preferredDeliveryMethod = `enum OBJ_preferredDeliveryMethod = 2L , 5L , 4L , 28L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_preferredDeliveryMethod); }))) {
            mixin(enumMixinStr_OBJ_preferredDeliveryMethod);
        }
    }




    static if(!is(typeof(LN_presentationAddress))) {
        private enum enumMixinStr_LN_presentationAddress = `enum LN_presentationAddress = "presentationAddress";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_presentationAddress); }))) {
            mixin(enumMixinStr_LN_presentationAddress);
        }
    }




    static if(!is(typeof(NID_presentationAddress))) {
        private enum enumMixinStr_NID_presentationAddress = `enum NID_presentationAddress = 873;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_presentationAddress); }))) {
            mixin(enumMixinStr_NID_presentationAddress);
        }
    }




    static if(!is(typeof(OBJ_presentationAddress))) {
        private enum enumMixinStr_OBJ_presentationAddress = `enum OBJ_presentationAddress = 2L , 5L , 4L , 29L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_presentationAddress); }))) {
            mixin(enumMixinStr_OBJ_presentationAddress);
        }
    }




    static if(!is(typeof(LN_supportedApplicationContext))) {
        private enum enumMixinStr_LN_supportedApplicationContext = `enum LN_supportedApplicationContext = "supportedApplicationContext";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_supportedApplicationContext); }))) {
            mixin(enumMixinStr_LN_supportedApplicationContext);
        }
    }




    static if(!is(typeof(NID_supportedApplicationContext))) {
        private enum enumMixinStr_NID_supportedApplicationContext = `enum NID_supportedApplicationContext = 874;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_supportedApplicationContext); }))) {
            mixin(enumMixinStr_NID_supportedApplicationContext);
        }
    }




    static if(!is(typeof(OBJ_supportedApplicationContext))) {
        private enum enumMixinStr_OBJ_supportedApplicationContext = `enum OBJ_supportedApplicationContext = 2L , 5L , 4L , 30L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_supportedApplicationContext); }))) {
            mixin(enumMixinStr_OBJ_supportedApplicationContext);
        }
    }




    static if(!is(typeof(SN_member))) {
        private enum enumMixinStr_SN_member = `enum SN_member = "member";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_member); }))) {
            mixin(enumMixinStr_SN_member);
        }
    }




    static if(!is(typeof(NID_member))) {
        private enum enumMixinStr_NID_member = `enum NID_member = 875;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_member); }))) {
            mixin(enumMixinStr_NID_member);
        }
    }




    static if(!is(typeof(OBJ_member))) {
        private enum enumMixinStr_OBJ_member = `enum OBJ_member = 2L , 5L , 4L , 31L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_member); }))) {
            mixin(enumMixinStr_OBJ_member);
        }
    }




    static if(!is(typeof(SN_owner))) {
        private enum enumMixinStr_SN_owner = `enum SN_owner = "owner";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_owner); }))) {
            mixin(enumMixinStr_SN_owner);
        }
    }




    static if(!is(typeof(NID_owner))) {
        private enum enumMixinStr_NID_owner = `enum NID_owner = 876;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_owner); }))) {
            mixin(enumMixinStr_NID_owner);
        }
    }




    static if(!is(typeof(OBJ_owner))) {
        private enum enumMixinStr_OBJ_owner = `enum OBJ_owner = 2L , 5L , 4L , 32L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_owner); }))) {
            mixin(enumMixinStr_OBJ_owner);
        }
    }




    static if(!is(typeof(LN_roleOccupant))) {
        private enum enumMixinStr_LN_roleOccupant = `enum LN_roleOccupant = "roleOccupant";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_roleOccupant); }))) {
            mixin(enumMixinStr_LN_roleOccupant);
        }
    }




    static if(!is(typeof(NID_roleOccupant))) {
        private enum enumMixinStr_NID_roleOccupant = `enum NID_roleOccupant = 877;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_roleOccupant); }))) {
            mixin(enumMixinStr_NID_roleOccupant);
        }
    }




    static if(!is(typeof(OBJ_roleOccupant))) {
        private enum enumMixinStr_OBJ_roleOccupant = `enum OBJ_roleOccupant = 2L , 5L , 4L , 33L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_roleOccupant); }))) {
            mixin(enumMixinStr_OBJ_roleOccupant);
        }
    }




    static if(!is(typeof(SN_seeAlso))) {
        private enum enumMixinStr_SN_seeAlso = `enum SN_seeAlso = "seeAlso";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_seeAlso); }))) {
            mixin(enumMixinStr_SN_seeAlso);
        }
    }




    static if(!is(typeof(NID_seeAlso))) {
        private enum enumMixinStr_NID_seeAlso = `enum NID_seeAlso = 878;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_seeAlso); }))) {
            mixin(enumMixinStr_NID_seeAlso);
        }
    }




    static if(!is(typeof(OBJ_seeAlso))) {
        private enum enumMixinStr_OBJ_seeAlso = `enum OBJ_seeAlso = 2L , 5L , 4L , 34L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_seeAlso); }))) {
            mixin(enumMixinStr_OBJ_seeAlso);
        }
    }




    static if(!is(typeof(LN_userPassword))) {
        private enum enumMixinStr_LN_userPassword = `enum LN_userPassword = "userPassword";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_userPassword); }))) {
            mixin(enumMixinStr_LN_userPassword);
        }
    }




    static if(!is(typeof(NID_userPassword))) {
        private enum enumMixinStr_NID_userPassword = `enum NID_userPassword = 879;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_userPassword); }))) {
            mixin(enumMixinStr_NID_userPassword);
        }
    }




    static if(!is(typeof(OBJ_userPassword))) {
        private enum enumMixinStr_OBJ_userPassword = `enum OBJ_userPassword = 2L , 5L , 4L , 35L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_userPassword); }))) {
            mixin(enumMixinStr_OBJ_userPassword);
        }
    }




    static if(!is(typeof(LN_userCertificate))) {
        private enum enumMixinStr_LN_userCertificate = `enum LN_userCertificate = "userCertificate";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_userCertificate); }))) {
            mixin(enumMixinStr_LN_userCertificate);
        }
    }




    static if(!is(typeof(NID_userCertificate))) {
        private enum enumMixinStr_NID_userCertificate = `enum NID_userCertificate = 880;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_userCertificate); }))) {
            mixin(enumMixinStr_NID_userCertificate);
        }
    }




    static if(!is(typeof(OBJ_userCertificate))) {
        private enum enumMixinStr_OBJ_userCertificate = `enum OBJ_userCertificate = 2L , 5L , 4L , 36L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_userCertificate); }))) {
            mixin(enumMixinStr_OBJ_userCertificate);
        }
    }




    static if(!is(typeof(LN_cACertificate))) {
        private enum enumMixinStr_LN_cACertificate = `enum LN_cACertificate = "cACertificate";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_cACertificate); }))) {
            mixin(enumMixinStr_LN_cACertificate);
        }
    }




    static if(!is(typeof(NID_cACertificate))) {
        private enum enumMixinStr_NID_cACertificate = `enum NID_cACertificate = 881;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_cACertificate); }))) {
            mixin(enumMixinStr_NID_cACertificate);
        }
    }




    static if(!is(typeof(OBJ_cACertificate))) {
        private enum enumMixinStr_OBJ_cACertificate = `enum OBJ_cACertificate = 2L , 5L , 4L , 37L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_cACertificate); }))) {
            mixin(enumMixinStr_OBJ_cACertificate);
        }
    }




    static if(!is(typeof(LN_authorityRevocationList))) {
        private enum enumMixinStr_LN_authorityRevocationList = `enum LN_authorityRevocationList = "authorityRevocationList";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_authorityRevocationList); }))) {
            mixin(enumMixinStr_LN_authorityRevocationList);
        }
    }




    static if(!is(typeof(NID_authorityRevocationList))) {
        private enum enumMixinStr_NID_authorityRevocationList = `enum NID_authorityRevocationList = 882;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_authorityRevocationList); }))) {
            mixin(enumMixinStr_NID_authorityRevocationList);
        }
    }




    static if(!is(typeof(OBJ_authorityRevocationList))) {
        private enum enumMixinStr_OBJ_authorityRevocationList = `enum OBJ_authorityRevocationList = 2L , 5L , 4L , 38L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_authorityRevocationList); }))) {
            mixin(enumMixinStr_OBJ_authorityRevocationList);
        }
    }




    static if(!is(typeof(LN_certificateRevocationList))) {
        private enum enumMixinStr_LN_certificateRevocationList = `enum LN_certificateRevocationList = "certificateRevocationList";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_certificateRevocationList); }))) {
            mixin(enumMixinStr_LN_certificateRevocationList);
        }
    }




    static if(!is(typeof(NID_certificateRevocationList))) {
        private enum enumMixinStr_NID_certificateRevocationList = `enum NID_certificateRevocationList = 883;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_certificateRevocationList); }))) {
            mixin(enumMixinStr_NID_certificateRevocationList);
        }
    }




    static if(!is(typeof(OBJ_certificateRevocationList))) {
        private enum enumMixinStr_OBJ_certificateRevocationList = `enum OBJ_certificateRevocationList = 2L , 5L , 4L , 39L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_certificateRevocationList); }))) {
            mixin(enumMixinStr_OBJ_certificateRevocationList);
        }
    }




    static if(!is(typeof(LN_crossCertificatePair))) {
        private enum enumMixinStr_LN_crossCertificatePair = `enum LN_crossCertificatePair = "crossCertificatePair";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_crossCertificatePair); }))) {
            mixin(enumMixinStr_LN_crossCertificatePair);
        }
    }




    static if(!is(typeof(NID_crossCertificatePair))) {
        private enum enumMixinStr_NID_crossCertificatePair = `enum NID_crossCertificatePair = 884;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_crossCertificatePair); }))) {
            mixin(enumMixinStr_NID_crossCertificatePair);
        }
    }




    static if(!is(typeof(OBJ_crossCertificatePair))) {
        private enum enumMixinStr_OBJ_crossCertificatePair = `enum OBJ_crossCertificatePair = 2L , 5L , 4L , 40L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_crossCertificatePair); }))) {
            mixin(enumMixinStr_OBJ_crossCertificatePair);
        }
    }




    static if(!is(typeof(SN_name))) {
        private enum enumMixinStr_SN_name = `enum SN_name = "name";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_name); }))) {
            mixin(enumMixinStr_SN_name);
        }
    }




    static if(!is(typeof(LN_name))) {
        private enum enumMixinStr_LN_name = `enum LN_name = "name";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_name); }))) {
            mixin(enumMixinStr_LN_name);
        }
    }




    static if(!is(typeof(NID_name))) {
        private enum enumMixinStr_NID_name = `enum NID_name = 173;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_name); }))) {
            mixin(enumMixinStr_NID_name);
        }
    }




    static if(!is(typeof(OBJ_name))) {
        private enum enumMixinStr_OBJ_name = `enum OBJ_name = 2L , 5L , 4L , 41L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_name); }))) {
            mixin(enumMixinStr_OBJ_name);
        }
    }




    static if(!is(typeof(SN_givenName))) {
        private enum enumMixinStr_SN_givenName = `enum SN_givenName = "GN";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_givenName); }))) {
            mixin(enumMixinStr_SN_givenName);
        }
    }




    static if(!is(typeof(LN_givenName))) {
        private enum enumMixinStr_LN_givenName = `enum LN_givenName = "givenName";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_givenName); }))) {
            mixin(enumMixinStr_LN_givenName);
        }
    }




    static if(!is(typeof(NID_givenName))) {
        private enum enumMixinStr_NID_givenName = `enum NID_givenName = 99;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_givenName); }))) {
            mixin(enumMixinStr_NID_givenName);
        }
    }




    static if(!is(typeof(OBJ_givenName))) {
        private enum enumMixinStr_OBJ_givenName = `enum OBJ_givenName = 2L , 5L , 4L , 42L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_givenName); }))) {
            mixin(enumMixinStr_OBJ_givenName);
        }
    }




    static if(!is(typeof(SN_initials))) {
        private enum enumMixinStr_SN_initials = `enum SN_initials = "initials";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_initials); }))) {
            mixin(enumMixinStr_SN_initials);
        }
    }




    static if(!is(typeof(LN_initials))) {
        private enum enumMixinStr_LN_initials = `enum LN_initials = "initials";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_initials); }))) {
            mixin(enumMixinStr_LN_initials);
        }
    }




    static if(!is(typeof(NID_initials))) {
        private enum enumMixinStr_NID_initials = `enum NID_initials = 101;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_initials); }))) {
            mixin(enumMixinStr_NID_initials);
        }
    }




    static if(!is(typeof(OBJ_initials))) {
        private enum enumMixinStr_OBJ_initials = `enum OBJ_initials = 2L , 5L , 4L , 43L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_initials); }))) {
            mixin(enumMixinStr_OBJ_initials);
        }
    }




    static if(!is(typeof(LN_generationQualifier))) {
        private enum enumMixinStr_LN_generationQualifier = `enum LN_generationQualifier = "generationQualifier";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_generationQualifier); }))) {
            mixin(enumMixinStr_LN_generationQualifier);
        }
    }




    static if(!is(typeof(NID_generationQualifier))) {
        private enum enumMixinStr_NID_generationQualifier = `enum NID_generationQualifier = 509;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_generationQualifier); }))) {
            mixin(enumMixinStr_NID_generationQualifier);
        }
    }




    static if(!is(typeof(OBJ_generationQualifier))) {
        private enum enumMixinStr_OBJ_generationQualifier = `enum OBJ_generationQualifier = 2L , 5L , 4L , 44L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_generationQualifier); }))) {
            mixin(enumMixinStr_OBJ_generationQualifier);
        }
    }




    static if(!is(typeof(LN_x500UniqueIdentifier))) {
        private enum enumMixinStr_LN_x500UniqueIdentifier = `enum LN_x500UniqueIdentifier = "x500UniqueIdentifier";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_x500UniqueIdentifier); }))) {
            mixin(enumMixinStr_LN_x500UniqueIdentifier);
        }
    }




    static if(!is(typeof(NID_x500UniqueIdentifier))) {
        private enum enumMixinStr_NID_x500UniqueIdentifier = `enum NID_x500UniqueIdentifier = 503;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_x500UniqueIdentifier); }))) {
            mixin(enumMixinStr_NID_x500UniqueIdentifier);
        }
    }




    static if(!is(typeof(OBJ_x500UniqueIdentifier))) {
        private enum enumMixinStr_OBJ_x500UniqueIdentifier = `enum OBJ_x500UniqueIdentifier = 2L , 5L , 4L , 45L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_x500UniqueIdentifier); }))) {
            mixin(enumMixinStr_OBJ_x500UniqueIdentifier);
        }
    }




    static if(!is(typeof(SN_dnQualifier))) {
        private enum enumMixinStr_SN_dnQualifier = `enum SN_dnQualifier = "dnQualifier";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_dnQualifier); }))) {
            mixin(enumMixinStr_SN_dnQualifier);
        }
    }




    static if(!is(typeof(LN_dnQualifier))) {
        private enum enumMixinStr_LN_dnQualifier = `enum LN_dnQualifier = "dnQualifier";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_dnQualifier); }))) {
            mixin(enumMixinStr_LN_dnQualifier);
        }
    }




    static if(!is(typeof(NID_dnQualifier))) {
        private enum enumMixinStr_NID_dnQualifier = `enum NID_dnQualifier = 174;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_dnQualifier); }))) {
            mixin(enumMixinStr_NID_dnQualifier);
        }
    }




    static if(!is(typeof(OBJ_dnQualifier))) {
        private enum enumMixinStr_OBJ_dnQualifier = `enum OBJ_dnQualifier = 2L , 5L , 4L , 46L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_dnQualifier); }))) {
            mixin(enumMixinStr_OBJ_dnQualifier);
        }
    }




    static if(!is(typeof(LN_enhancedSearchGuide))) {
        private enum enumMixinStr_LN_enhancedSearchGuide = `enum LN_enhancedSearchGuide = "enhancedSearchGuide";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_enhancedSearchGuide); }))) {
            mixin(enumMixinStr_LN_enhancedSearchGuide);
        }
    }




    static if(!is(typeof(NID_enhancedSearchGuide))) {
        private enum enumMixinStr_NID_enhancedSearchGuide = `enum NID_enhancedSearchGuide = 885;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_enhancedSearchGuide); }))) {
            mixin(enumMixinStr_NID_enhancedSearchGuide);
        }
    }




    static if(!is(typeof(OBJ_enhancedSearchGuide))) {
        private enum enumMixinStr_OBJ_enhancedSearchGuide = `enum OBJ_enhancedSearchGuide = 2L , 5L , 4L , 47L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_enhancedSearchGuide); }))) {
            mixin(enumMixinStr_OBJ_enhancedSearchGuide);
        }
    }




    static if(!is(typeof(LN_protocolInformation))) {
        private enum enumMixinStr_LN_protocolInformation = `enum LN_protocolInformation = "protocolInformation";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_protocolInformation); }))) {
            mixin(enumMixinStr_LN_protocolInformation);
        }
    }




    static if(!is(typeof(NID_protocolInformation))) {
        private enum enumMixinStr_NID_protocolInformation = `enum NID_protocolInformation = 886;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_protocolInformation); }))) {
            mixin(enumMixinStr_NID_protocolInformation);
        }
    }




    static if(!is(typeof(OBJ_protocolInformation))) {
        private enum enumMixinStr_OBJ_protocolInformation = `enum OBJ_protocolInformation = 2L , 5L , 4L , 48L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_protocolInformation); }))) {
            mixin(enumMixinStr_OBJ_protocolInformation);
        }
    }




    static if(!is(typeof(LN_distinguishedName))) {
        private enum enumMixinStr_LN_distinguishedName = `enum LN_distinguishedName = "distinguishedName";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_distinguishedName); }))) {
            mixin(enumMixinStr_LN_distinguishedName);
        }
    }




    static if(!is(typeof(NID_distinguishedName))) {
        private enum enumMixinStr_NID_distinguishedName = `enum NID_distinguishedName = 887;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_distinguishedName); }))) {
            mixin(enumMixinStr_NID_distinguishedName);
        }
    }




    static if(!is(typeof(OBJ_distinguishedName))) {
        private enum enumMixinStr_OBJ_distinguishedName = `enum OBJ_distinguishedName = 2L , 5L , 4L , 49L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_distinguishedName); }))) {
            mixin(enumMixinStr_OBJ_distinguishedName);
        }
    }




    static if(!is(typeof(LN_uniqueMember))) {
        private enum enumMixinStr_LN_uniqueMember = `enum LN_uniqueMember = "uniqueMember";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_uniqueMember); }))) {
            mixin(enumMixinStr_LN_uniqueMember);
        }
    }




    static if(!is(typeof(NID_uniqueMember))) {
        private enum enumMixinStr_NID_uniqueMember = `enum NID_uniqueMember = 888;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_uniqueMember); }))) {
            mixin(enumMixinStr_NID_uniqueMember);
        }
    }




    static if(!is(typeof(OBJ_uniqueMember))) {
        private enum enumMixinStr_OBJ_uniqueMember = `enum OBJ_uniqueMember = 2L , 5L , 4L , 50L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_uniqueMember); }))) {
            mixin(enumMixinStr_OBJ_uniqueMember);
        }
    }




    static if(!is(typeof(LN_houseIdentifier))) {
        private enum enumMixinStr_LN_houseIdentifier = `enum LN_houseIdentifier = "houseIdentifier";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_houseIdentifier); }))) {
            mixin(enumMixinStr_LN_houseIdentifier);
        }
    }




    static if(!is(typeof(NID_houseIdentifier))) {
        private enum enumMixinStr_NID_houseIdentifier = `enum NID_houseIdentifier = 889;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_houseIdentifier); }))) {
            mixin(enumMixinStr_NID_houseIdentifier);
        }
    }




    static if(!is(typeof(OBJ_houseIdentifier))) {
        private enum enumMixinStr_OBJ_houseIdentifier = `enum OBJ_houseIdentifier = 2L , 5L , 4L , 51L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_houseIdentifier); }))) {
            mixin(enumMixinStr_OBJ_houseIdentifier);
        }
    }




    static if(!is(typeof(LN_supportedAlgorithms))) {
        private enum enumMixinStr_LN_supportedAlgorithms = `enum LN_supportedAlgorithms = "supportedAlgorithms";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_supportedAlgorithms); }))) {
            mixin(enumMixinStr_LN_supportedAlgorithms);
        }
    }




    static if(!is(typeof(NID_supportedAlgorithms))) {
        private enum enumMixinStr_NID_supportedAlgorithms = `enum NID_supportedAlgorithms = 890;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_supportedAlgorithms); }))) {
            mixin(enumMixinStr_NID_supportedAlgorithms);
        }
    }




    static if(!is(typeof(OBJ_supportedAlgorithms))) {
        private enum enumMixinStr_OBJ_supportedAlgorithms = `enum OBJ_supportedAlgorithms = 2L , 5L , 4L , 52L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_supportedAlgorithms); }))) {
            mixin(enumMixinStr_OBJ_supportedAlgorithms);
        }
    }




    static if(!is(typeof(LN_deltaRevocationList))) {
        private enum enumMixinStr_LN_deltaRevocationList = `enum LN_deltaRevocationList = "deltaRevocationList";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_deltaRevocationList); }))) {
            mixin(enumMixinStr_LN_deltaRevocationList);
        }
    }




    static if(!is(typeof(NID_deltaRevocationList))) {
        private enum enumMixinStr_NID_deltaRevocationList = `enum NID_deltaRevocationList = 891;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_deltaRevocationList); }))) {
            mixin(enumMixinStr_NID_deltaRevocationList);
        }
    }




    static if(!is(typeof(OBJ_deltaRevocationList))) {
        private enum enumMixinStr_OBJ_deltaRevocationList = `enum OBJ_deltaRevocationList = 2L , 5L , 4L , 53L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_deltaRevocationList); }))) {
            mixin(enumMixinStr_OBJ_deltaRevocationList);
        }
    }




    static if(!is(typeof(SN_dmdName))) {
        private enum enumMixinStr_SN_dmdName = `enum SN_dmdName = "dmdName";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_dmdName); }))) {
            mixin(enumMixinStr_SN_dmdName);
        }
    }




    static if(!is(typeof(NID_dmdName))) {
        private enum enumMixinStr_NID_dmdName = `enum NID_dmdName = 892;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_dmdName); }))) {
            mixin(enumMixinStr_NID_dmdName);
        }
    }




    static if(!is(typeof(OBJ_dmdName))) {
        private enum enumMixinStr_OBJ_dmdName = `enum OBJ_dmdName = 2L , 5L , 4L , 54L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_dmdName); }))) {
            mixin(enumMixinStr_OBJ_dmdName);
        }
    }




    static if(!is(typeof(LN_pseudonym))) {
        private enum enumMixinStr_LN_pseudonym = `enum LN_pseudonym = "pseudonym";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_pseudonym); }))) {
            mixin(enumMixinStr_LN_pseudonym);
        }
    }




    static if(!is(typeof(NID_pseudonym))) {
        private enum enumMixinStr_NID_pseudonym = `enum NID_pseudonym = 510;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_pseudonym); }))) {
            mixin(enumMixinStr_NID_pseudonym);
        }
    }




    static if(!is(typeof(OBJ_pseudonym))) {
        private enum enumMixinStr_OBJ_pseudonym = `enum OBJ_pseudonym = 2L , 5L , 4L , 65L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_pseudonym); }))) {
            mixin(enumMixinStr_OBJ_pseudonym);
        }
    }




    static if(!is(typeof(SN_role))) {
        private enum enumMixinStr_SN_role = `enum SN_role = "role";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_role); }))) {
            mixin(enumMixinStr_SN_role);
        }
    }




    static if(!is(typeof(LN_role))) {
        private enum enumMixinStr_LN_role = `enum LN_role = "role";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_role); }))) {
            mixin(enumMixinStr_LN_role);
        }
    }




    static if(!is(typeof(NID_role))) {
        private enum enumMixinStr_NID_role = `enum NID_role = 400;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_role); }))) {
            mixin(enumMixinStr_NID_role);
        }
    }




    static if(!is(typeof(OBJ_role))) {
        private enum enumMixinStr_OBJ_role = `enum OBJ_role = 2L , 5L , 4L , 72L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_role); }))) {
            mixin(enumMixinStr_OBJ_role);
        }
    }




    static if(!is(typeof(LN_organizationIdentifier))) {
        private enum enumMixinStr_LN_organizationIdentifier = `enum LN_organizationIdentifier = "organizationIdentifier";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_organizationIdentifier); }))) {
            mixin(enumMixinStr_LN_organizationIdentifier);
        }
    }




    static if(!is(typeof(NID_organizationIdentifier))) {
        private enum enumMixinStr_NID_organizationIdentifier = `enum NID_organizationIdentifier = 1089;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_organizationIdentifier); }))) {
            mixin(enumMixinStr_NID_organizationIdentifier);
        }
    }




    static if(!is(typeof(OBJ_organizationIdentifier))) {
        private enum enumMixinStr_OBJ_organizationIdentifier = `enum OBJ_organizationIdentifier = 2L , 5L , 4L , 97L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_organizationIdentifier); }))) {
            mixin(enumMixinStr_OBJ_organizationIdentifier);
        }
    }




    static if(!is(typeof(SN_countryCode3c))) {
        private enum enumMixinStr_SN_countryCode3c = `enum SN_countryCode3c = "c3";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_countryCode3c); }))) {
            mixin(enumMixinStr_SN_countryCode3c);
        }
    }




    static if(!is(typeof(LN_countryCode3c))) {
        private enum enumMixinStr_LN_countryCode3c = `enum LN_countryCode3c = "countryCode3c";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_countryCode3c); }))) {
            mixin(enumMixinStr_LN_countryCode3c);
        }
    }




    static if(!is(typeof(NID_countryCode3c))) {
        private enum enumMixinStr_NID_countryCode3c = `enum NID_countryCode3c = 1090;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_countryCode3c); }))) {
            mixin(enumMixinStr_NID_countryCode3c);
        }
    }




    static if(!is(typeof(OBJ_countryCode3c))) {
        private enum enumMixinStr_OBJ_countryCode3c = `enum OBJ_countryCode3c = 2L , 5L , 4L , 98L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_countryCode3c); }))) {
            mixin(enumMixinStr_OBJ_countryCode3c);
        }
    }




    static if(!is(typeof(SN_countryCode3n))) {
        private enum enumMixinStr_SN_countryCode3n = `enum SN_countryCode3n = "n3";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_countryCode3n); }))) {
            mixin(enumMixinStr_SN_countryCode3n);
        }
    }




    static if(!is(typeof(LN_countryCode3n))) {
        private enum enumMixinStr_LN_countryCode3n = `enum LN_countryCode3n = "countryCode3n";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_countryCode3n); }))) {
            mixin(enumMixinStr_LN_countryCode3n);
        }
    }




    static if(!is(typeof(NID_countryCode3n))) {
        private enum enumMixinStr_NID_countryCode3n = `enum NID_countryCode3n = 1091;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_countryCode3n); }))) {
            mixin(enumMixinStr_NID_countryCode3n);
        }
    }




    static if(!is(typeof(OBJ_countryCode3n))) {
        private enum enumMixinStr_OBJ_countryCode3n = `enum OBJ_countryCode3n = 2L , 5L , 4L , 99L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_countryCode3n); }))) {
            mixin(enumMixinStr_OBJ_countryCode3n);
        }
    }




    static if(!is(typeof(LN_dnsName))) {
        private enum enumMixinStr_LN_dnsName = `enum LN_dnsName = "dnsName";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_dnsName); }))) {
            mixin(enumMixinStr_LN_dnsName);
        }
    }




    static if(!is(typeof(NID_dnsName))) {
        private enum enumMixinStr_NID_dnsName = `enum NID_dnsName = 1092;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_dnsName); }))) {
            mixin(enumMixinStr_NID_dnsName);
        }
    }




    static if(!is(typeof(OBJ_dnsName))) {
        private enum enumMixinStr_OBJ_dnsName = `enum OBJ_dnsName = 2L , 5L , 4L , 100L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_dnsName); }))) {
            mixin(enumMixinStr_OBJ_dnsName);
        }
    }




    static if(!is(typeof(SN_X500algorithms))) {
        private enum enumMixinStr_SN_X500algorithms = `enum SN_X500algorithms = "X500algorithms";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_X500algorithms); }))) {
            mixin(enumMixinStr_SN_X500algorithms);
        }
    }




    static if(!is(typeof(LN_X500algorithms))) {
        private enum enumMixinStr_LN_X500algorithms = `enum LN_X500algorithms = "directory services - algorithms";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_X500algorithms); }))) {
            mixin(enumMixinStr_LN_X500algorithms);
        }
    }




    static if(!is(typeof(NID_X500algorithms))) {
        private enum enumMixinStr_NID_X500algorithms = `enum NID_X500algorithms = 378;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_X500algorithms); }))) {
            mixin(enumMixinStr_NID_X500algorithms);
        }
    }




    static if(!is(typeof(OBJ_X500algorithms))) {
        private enum enumMixinStr_OBJ_X500algorithms = `enum OBJ_X500algorithms = 2L , 5L , 8L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_X500algorithms); }))) {
            mixin(enumMixinStr_OBJ_X500algorithms);
        }
    }




    static if(!is(typeof(SN_rsa))) {
        private enum enumMixinStr_SN_rsa = `enum SN_rsa = "RSA";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_rsa); }))) {
            mixin(enumMixinStr_SN_rsa);
        }
    }




    static if(!is(typeof(LN_rsa))) {
        private enum enumMixinStr_LN_rsa = `enum LN_rsa = "rsa";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_rsa); }))) {
            mixin(enumMixinStr_LN_rsa);
        }
    }




    static if(!is(typeof(NID_rsa))) {
        private enum enumMixinStr_NID_rsa = `enum NID_rsa = 19;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_rsa); }))) {
            mixin(enumMixinStr_NID_rsa);
        }
    }




    static if(!is(typeof(OBJ_rsa))) {
        private enum enumMixinStr_OBJ_rsa = `enum OBJ_rsa = 2L , 5L , 8L , 1L , 1L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_rsa); }))) {
            mixin(enumMixinStr_OBJ_rsa);
        }
    }




    static if(!is(typeof(SN_mdc2WithRSA))) {
        private enum enumMixinStr_SN_mdc2WithRSA = `enum SN_mdc2WithRSA = "RSA-MDC2";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_mdc2WithRSA); }))) {
            mixin(enumMixinStr_SN_mdc2WithRSA);
        }
    }




    static if(!is(typeof(LN_mdc2WithRSA))) {
        private enum enumMixinStr_LN_mdc2WithRSA = `enum LN_mdc2WithRSA = "mdc2WithRSA";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_mdc2WithRSA); }))) {
            mixin(enumMixinStr_LN_mdc2WithRSA);
        }
    }




    static if(!is(typeof(NID_mdc2WithRSA))) {
        private enum enumMixinStr_NID_mdc2WithRSA = `enum NID_mdc2WithRSA = 96;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_mdc2WithRSA); }))) {
            mixin(enumMixinStr_NID_mdc2WithRSA);
        }
    }




    static if(!is(typeof(OBJ_mdc2WithRSA))) {
        private enum enumMixinStr_OBJ_mdc2WithRSA = `enum OBJ_mdc2WithRSA = 2L , 5L , 8L , 3L , 100L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_mdc2WithRSA); }))) {
            mixin(enumMixinStr_OBJ_mdc2WithRSA);
        }
    }




    static if(!is(typeof(SN_mdc2))) {
        private enum enumMixinStr_SN_mdc2 = `enum SN_mdc2 = "MDC2";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_mdc2); }))) {
            mixin(enumMixinStr_SN_mdc2);
        }
    }




    static if(!is(typeof(LN_mdc2))) {
        private enum enumMixinStr_LN_mdc2 = `enum LN_mdc2 = "mdc2";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_mdc2); }))) {
            mixin(enumMixinStr_LN_mdc2);
        }
    }




    static if(!is(typeof(NID_mdc2))) {
        private enum enumMixinStr_NID_mdc2 = `enum NID_mdc2 = 95;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_mdc2); }))) {
            mixin(enumMixinStr_NID_mdc2);
        }
    }




    static if(!is(typeof(OBJ_mdc2))) {
        private enum enumMixinStr_OBJ_mdc2 = `enum OBJ_mdc2 = 2L , 5L , 8L , 3L , 101L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_mdc2); }))) {
            mixin(enumMixinStr_OBJ_mdc2);
        }
    }




    static if(!is(typeof(SN_id_ce))) {
        private enum enumMixinStr_SN_id_ce = `enum SN_id_ce = "id-ce";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_ce); }))) {
            mixin(enumMixinStr_SN_id_ce);
        }
    }




    static if(!is(typeof(NID_id_ce))) {
        private enum enumMixinStr_NID_id_ce = `enum NID_id_ce = 81;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_ce); }))) {
            mixin(enumMixinStr_NID_id_ce);
        }
    }




    static if(!is(typeof(OBJ_id_ce))) {
        private enum enumMixinStr_OBJ_id_ce = `enum OBJ_id_ce = 2L , 5L , 29L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_ce); }))) {
            mixin(enumMixinStr_OBJ_id_ce);
        }
    }




    static if(!is(typeof(SN_subject_directory_attributes))) {
        private enum enumMixinStr_SN_subject_directory_attributes = `enum SN_subject_directory_attributes = "subjectDirectoryAttributes";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_subject_directory_attributes); }))) {
            mixin(enumMixinStr_SN_subject_directory_attributes);
        }
    }




    static if(!is(typeof(LN_subject_directory_attributes))) {
        private enum enumMixinStr_LN_subject_directory_attributes = `enum LN_subject_directory_attributes = "X509v3 Subject Directory Attributes";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_subject_directory_attributes); }))) {
            mixin(enumMixinStr_LN_subject_directory_attributes);
        }
    }




    static if(!is(typeof(NID_subject_directory_attributes))) {
        private enum enumMixinStr_NID_subject_directory_attributes = `enum NID_subject_directory_attributes = 769;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_subject_directory_attributes); }))) {
            mixin(enumMixinStr_NID_subject_directory_attributes);
        }
    }




    static if(!is(typeof(OBJ_subject_directory_attributes))) {
        private enum enumMixinStr_OBJ_subject_directory_attributes = `enum OBJ_subject_directory_attributes = 2L , 5L , 29L , 9L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_subject_directory_attributes); }))) {
            mixin(enumMixinStr_OBJ_subject_directory_attributes);
        }
    }




    static if(!is(typeof(SN_subject_key_identifier))) {
        private enum enumMixinStr_SN_subject_key_identifier = `enum SN_subject_key_identifier = "subjectKeyIdentifier";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_subject_key_identifier); }))) {
            mixin(enumMixinStr_SN_subject_key_identifier);
        }
    }




    static if(!is(typeof(LN_subject_key_identifier))) {
        private enum enumMixinStr_LN_subject_key_identifier = `enum LN_subject_key_identifier = "X509v3 Subject Key Identifier";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_subject_key_identifier); }))) {
            mixin(enumMixinStr_LN_subject_key_identifier);
        }
    }




    static if(!is(typeof(NID_subject_key_identifier))) {
        private enum enumMixinStr_NID_subject_key_identifier = `enum NID_subject_key_identifier = 82;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_subject_key_identifier); }))) {
            mixin(enumMixinStr_NID_subject_key_identifier);
        }
    }




    static if(!is(typeof(OBJ_subject_key_identifier))) {
        private enum enumMixinStr_OBJ_subject_key_identifier = `enum OBJ_subject_key_identifier = 2L , 5L , 29L , 14L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_subject_key_identifier); }))) {
            mixin(enumMixinStr_OBJ_subject_key_identifier);
        }
    }




    static if(!is(typeof(SN_key_usage))) {
        private enum enumMixinStr_SN_key_usage = `enum SN_key_usage = "keyUsage";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_key_usage); }))) {
            mixin(enumMixinStr_SN_key_usage);
        }
    }




    static if(!is(typeof(LN_key_usage))) {
        private enum enumMixinStr_LN_key_usage = `enum LN_key_usage = "X509v3 Key Usage";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_key_usage); }))) {
            mixin(enumMixinStr_LN_key_usage);
        }
    }




    static if(!is(typeof(NID_key_usage))) {
        private enum enumMixinStr_NID_key_usage = `enum NID_key_usage = 83;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_key_usage); }))) {
            mixin(enumMixinStr_NID_key_usage);
        }
    }




    static if(!is(typeof(OBJ_key_usage))) {
        private enum enumMixinStr_OBJ_key_usage = `enum OBJ_key_usage = 2L , 5L , 29L , 15L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_key_usage); }))) {
            mixin(enumMixinStr_OBJ_key_usage);
        }
    }




    static if(!is(typeof(SN_private_key_usage_period))) {
        private enum enumMixinStr_SN_private_key_usage_period = `enum SN_private_key_usage_period = "privateKeyUsagePeriod";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_private_key_usage_period); }))) {
            mixin(enumMixinStr_SN_private_key_usage_period);
        }
    }




    static if(!is(typeof(LN_private_key_usage_period))) {
        private enum enumMixinStr_LN_private_key_usage_period = `enum LN_private_key_usage_period = "X509v3 Private Key Usage Period";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_private_key_usage_period); }))) {
            mixin(enumMixinStr_LN_private_key_usage_period);
        }
    }




    static if(!is(typeof(NID_private_key_usage_period))) {
        private enum enumMixinStr_NID_private_key_usage_period = `enum NID_private_key_usage_period = 84;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_private_key_usage_period); }))) {
            mixin(enumMixinStr_NID_private_key_usage_period);
        }
    }




    static if(!is(typeof(OBJ_private_key_usage_period))) {
        private enum enumMixinStr_OBJ_private_key_usage_period = `enum OBJ_private_key_usage_period = 2L , 5L , 29L , 16L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_private_key_usage_period); }))) {
            mixin(enumMixinStr_OBJ_private_key_usage_period);
        }
    }




    static if(!is(typeof(SN_subject_alt_name))) {
        private enum enumMixinStr_SN_subject_alt_name = `enum SN_subject_alt_name = "subjectAltName";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_subject_alt_name); }))) {
            mixin(enumMixinStr_SN_subject_alt_name);
        }
    }




    static if(!is(typeof(LN_subject_alt_name))) {
        private enum enumMixinStr_LN_subject_alt_name = `enum LN_subject_alt_name = "X509v3 Subject Alternative Name";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_subject_alt_name); }))) {
            mixin(enumMixinStr_LN_subject_alt_name);
        }
    }




    static if(!is(typeof(NID_subject_alt_name))) {
        private enum enumMixinStr_NID_subject_alt_name = `enum NID_subject_alt_name = 85;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_subject_alt_name); }))) {
            mixin(enumMixinStr_NID_subject_alt_name);
        }
    }




    static if(!is(typeof(OBJ_subject_alt_name))) {
        private enum enumMixinStr_OBJ_subject_alt_name = `enum OBJ_subject_alt_name = 2L , 5L , 29L , 17L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_subject_alt_name); }))) {
            mixin(enumMixinStr_OBJ_subject_alt_name);
        }
    }




    static if(!is(typeof(SN_issuer_alt_name))) {
        private enum enumMixinStr_SN_issuer_alt_name = `enum SN_issuer_alt_name = "issuerAltName";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_issuer_alt_name); }))) {
            mixin(enumMixinStr_SN_issuer_alt_name);
        }
    }




    static if(!is(typeof(LN_issuer_alt_name))) {
        private enum enumMixinStr_LN_issuer_alt_name = `enum LN_issuer_alt_name = "X509v3 Issuer Alternative Name";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_issuer_alt_name); }))) {
            mixin(enumMixinStr_LN_issuer_alt_name);
        }
    }




    static if(!is(typeof(NID_issuer_alt_name))) {
        private enum enumMixinStr_NID_issuer_alt_name = `enum NID_issuer_alt_name = 86;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_issuer_alt_name); }))) {
            mixin(enumMixinStr_NID_issuer_alt_name);
        }
    }




    static if(!is(typeof(OBJ_issuer_alt_name))) {
        private enum enumMixinStr_OBJ_issuer_alt_name = `enum OBJ_issuer_alt_name = 2L , 5L , 29L , 18L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_issuer_alt_name); }))) {
            mixin(enumMixinStr_OBJ_issuer_alt_name);
        }
    }




    static if(!is(typeof(SN_basic_constraints))) {
        private enum enumMixinStr_SN_basic_constraints = `enum SN_basic_constraints = "basicConstraints";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_basic_constraints); }))) {
            mixin(enumMixinStr_SN_basic_constraints);
        }
    }




    static if(!is(typeof(LN_basic_constraints))) {
        private enum enumMixinStr_LN_basic_constraints = `enum LN_basic_constraints = "X509v3 Basic Constraints";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_basic_constraints); }))) {
            mixin(enumMixinStr_LN_basic_constraints);
        }
    }




    static if(!is(typeof(NID_basic_constraints))) {
        private enum enumMixinStr_NID_basic_constraints = `enum NID_basic_constraints = 87;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_basic_constraints); }))) {
            mixin(enumMixinStr_NID_basic_constraints);
        }
    }




    static if(!is(typeof(OBJ_basic_constraints))) {
        private enum enumMixinStr_OBJ_basic_constraints = `enum OBJ_basic_constraints = 2L , 5L , 29L , 19L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_basic_constraints); }))) {
            mixin(enumMixinStr_OBJ_basic_constraints);
        }
    }




    static if(!is(typeof(SN_crl_number))) {
        private enum enumMixinStr_SN_crl_number = `enum SN_crl_number = "crlNumber";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_crl_number); }))) {
            mixin(enumMixinStr_SN_crl_number);
        }
    }




    static if(!is(typeof(LN_crl_number))) {
        private enum enumMixinStr_LN_crl_number = `enum LN_crl_number = "X509v3 CRL Number";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_crl_number); }))) {
            mixin(enumMixinStr_LN_crl_number);
        }
    }




    static if(!is(typeof(NID_crl_number))) {
        private enum enumMixinStr_NID_crl_number = `enum NID_crl_number = 88;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_crl_number); }))) {
            mixin(enumMixinStr_NID_crl_number);
        }
    }




    static if(!is(typeof(OBJ_crl_number))) {
        private enum enumMixinStr_OBJ_crl_number = `enum OBJ_crl_number = 2L , 5L , 29L , 20L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_crl_number); }))) {
            mixin(enumMixinStr_OBJ_crl_number);
        }
    }




    static if(!is(typeof(SN_crl_reason))) {
        private enum enumMixinStr_SN_crl_reason = `enum SN_crl_reason = "CRLReason";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_crl_reason); }))) {
            mixin(enumMixinStr_SN_crl_reason);
        }
    }




    static if(!is(typeof(LN_crl_reason))) {
        private enum enumMixinStr_LN_crl_reason = `enum LN_crl_reason = "X509v3 CRL Reason Code";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_crl_reason); }))) {
            mixin(enumMixinStr_LN_crl_reason);
        }
    }




    static if(!is(typeof(NID_crl_reason))) {
        private enum enumMixinStr_NID_crl_reason = `enum NID_crl_reason = 141;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_crl_reason); }))) {
            mixin(enumMixinStr_NID_crl_reason);
        }
    }




    static if(!is(typeof(OBJ_crl_reason))) {
        private enum enumMixinStr_OBJ_crl_reason = `enum OBJ_crl_reason = 2L , 5L , 29L , 21L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_crl_reason); }))) {
            mixin(enumMixinStr_OBJ_crl_reason);
        }
    }




    static if(!is(typeof(SN_invalidity_date))) {
        private enum enumMixinStr_SN_invalidity_date = `enum SN_invalidity_date = "invalidityDate";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_invalidity_date); }))) {
            mixin(enumMixinStr_SN_invalidity_date);
        }
    }




    static if(!is(typeof(LN_invalidity_date))) {
        private enum enumMixinStr_LN_invalidity_date = `enum LN_invalidity_date = "Invalidity Date";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_invalidity_date); }))) {
            mixin(enumMixinStr_LN_invalidity_date);
        }
    }




    static if(!is(typeof(NID_invalidity_date))) {
        private enum enumMixinStr_NID_invalidity_date = `enum NID_invalidity_date = 142;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_invalidity_date); }))) {
            mixin(enumMixinStr_NID_invalidity_date);
        }
    }




    static if(!is(typeof(OBJ_invalidity_date))) {
        private enum enumMixinStr_OBJ_invalidity_date = `enum OBJ_invalidity_date = 2L , 5L , 29L , 24L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_invalidity_date); }))) {
            mixin(enumMixinStr_OBJ_invalidity_date);
        }
    }




    static if(!is(typeof(SN_delta_crl))) {
        private enum enumMixinStr_SN_delta_crl = `enum SN_delta_crl = "deltaCRL";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_delta_crl); }))) {
            mixin(enumMixinStr_SN_delta_crl);
        }
    }




    static if(!is(typeof(LN_delta_crl))) {
        private enum enumMixinStr_LN_delta_crl = `enum LN_delta_crl = "X509v3 Delta CRL Indicator";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_delta_crl); }))) {
            mixin(enumMixinStr_LN_delta_crl);
        }
    }




    static if(!is(typeof(NID_delta_crl))) {
        private enum enumMixinStr_NID_delta_crl = `enum NID_delta_crl = 140;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_delta_crl); }))) {
            mixin(enumMixinStr_NID_delta_crl);
        }
    }




    static if(!is(typeof(OBJ_delta_crl))) {
        private enum enumMixinStr_OBJ_delta_crl = `enum OBJ_delta_crl = 2L , 5L , 29L , 27L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_delta_crl); }))) {
            mixin(enumMixinStr_OBJ_delta_crl);
        }
    }




    static if(!is(typeof(SN_issuing_distribution_point))) {
        private enum enumMixinStr_SN_issuing_distribution_point = `enum SN_issuing_distribution_point = "issuingDistributionPoint";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_issuing_distribution_point); }))) {
            mixin(enumMixinStr_SN_issuing_distribution_point);
        }
    }




    static if(!is(typeof(LN_issuing_distribution_point))) {
        private enum enumMixinStr_LN_issuing_distribution_point = `enum LN_issuing_distribution_point = "X509v3 Issuing Distribution Point";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_issuing_distribution_point); }))) {
            mixin(enumMixinStr_LN_issuing_distribution_point);
        }
    }




    static if(!is(typeof(NID_issuing_distribution_point))) {
        private enum enumMixinStr_NID_issuing_distribution_point = `enum NID_issuing_distribution_point = 770;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_issuing_distribution_point); }))) {
            mixin(enumMixinStr_NID_issuing_distribution_point);
        }
    }




    static if(!is(typeof(OBJ_issuing_distribution_point))) {
        private enum enumMixinStr_OBJ_issuing_distribution_point = `enum OBJ_issuing_distribution_point = 2L , 5L , 29L , 28L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_issuing_distribution_point); }))) {
            mixin(enumMixinStr_OBJ_issuing_distribution_point);
        }
    }




    static if(!is(typeof(SN_certificate_issuer))) {
        private enum enumMixinStr_SN_certificate_issuer = `enum SN_certificate_issuer = "certificateIssuer";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_certificate_issuer); }))) {
            mixin(enumMixinStr_SN_certificate_issuer);
        }
    }




    static if(!is(typeof(LN_certificate_issuer))) {
        private enum enumMixinStr_LN_certificate_issuer = `enum LN_certificate_issuer = "X509v3 Certificate Issuer";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_certificate_issuer); }))) {
            mixin(enumMixinStr_LN_certificate_issuer);
        }
    }




    static if(!is(typeof(NID_certificate_issuer))) {
        private enum enumMixinStr_NID_certificate_issuer = `enum NID_certificate_issuer = 771;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_certificate_issuer); }))) {
            mixin(enumMixinStr_NID_certificate_issuer);
        }
    }




    static if(!is(typeof(OBJ_certificate_issuer))) {
        private enum enumMixinStr_OBJ_certificate_issuer = `enum OBJ_certificate_issuer = 2L , 5L , 29L , 29L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_certificate_issuer); }))) {
            mixin(enumMixinStr_OBJ_certificate_issuer);
        }
    }




    static if(!is(typeof(SN_name_constraints))) {
        private enum enumMixinStr_SN_name_constraints = `enum SN_name_constraints = "nameConstraints";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_name_constraints); }))) {
            mixin(enumMixinStr_SN_name_constraints);
        }
    }




    static if(!is(typeof(LN_name_constraints))) {
        private enum enumMixinStr_LN_name_constraints = `enum LN_name_constraints = "X509v3 Name Constraints";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_name_constraints); }))) {
            mixin(enumMixinStr_LN_name_constraints);
        }
    }




    static if(!is(typeof(NID_name_constraints))) {
        private enum enumMixinStr_NID_name_constraints = `enum NID_name_constraints = 666;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_name_constraints); }))) {
            mixin(enumMixinStr_NID_name_constraints);
        }
    }




    static if(!is(typeof(OBJ_name_constraints))) {
        private enum enumMixinStr_OBJ_name_constraints = `enum OBJ_name_constraints = 2L , 5L , 29L , 30L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_name_constraints); }))) {
            mixin(enumMixinStr_OBJ_name_constraints);
        }
    }




    static if(!is(typeof(SN_crl_distribution_points))) {
        private enum enumMixinStr_SN_crl_distribution_points = `enum SN_crl_distribution_points = "crlDistributionPoints";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_crl_distribution_points); }))) {
            mixin(enumMixinStr_SN_crl_distribution_points);
        }
    }




    static if(!is(typeof(LN_crl_distribution_points))) {
        private enum enumMixinStr_LN_crl_distribution_points = `enum LN_crl_distribution_points = "X509v3 CRL Distribution Points";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_crl_distribution_points); }))) {
            mixin(enumMixinStr_LN_crl_distribution_points);
        }
    }




    static if(!is(typeof(NID_crl_distribution_points))) {
        private enum enumMixinStr_NID_crl_distribution_points = `enum NID_crl_distribution_points = 103;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_crl_distribution_points); }))) {
            mixin(enumMixinStr_NID_crl_distribution_points);
        }
    }




    static if(!is(typeof(OBJ_crl_distribution_points))) {
        private enum enumMixinStr_OBJ_crl_distribution_points = `enum OBJ_crl_distribution_points = 2L , 5L , 29L , 31L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_crl_distribution_points); }))) {
            mixin(enumMixinStr_OBJ_crl_distribution_points);
        }
    }




    static if(!is(typeof(SN_certificate_policies))) {
        private enum enumMixinStr_SN_certificate_policies = `enum SN_certificate_policies = "certificatePolicies";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_certificate_policies); }))) {
            mixin(enumMixinStr_SN_certificate_policies);
        }
    }




    static if(!is(typeof(LN_certificate_policies))) {
        private enum enumMixinStr_LN_certificate_policies = `enum LN_certificate_policies = "X509v3 Certificate Policies";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_certificate_policies); }))) {
            mixin(enumMixinStr_LN_certificate_policies);
        }
    }




    static if(!is(typeof(NID_certificate_policies))) {
        private enum enumMixinStr_NID_certificate_policies = `enum NID_certificate_policies = 89;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_certificate_policies); }))) {
            mixin(enumMixinStr_NID_certificate_policies);
        }
    }




    static if(!is(typeof(OBJ_certificate_policies))) {
        private enum enumMixinStr_OBJ_certificate_policies = `enum OBJ_certificate_policies = 2L , 5L , 29L , 32L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_certificate_policies); }))) {
            mixin(enumMixinStr_OBJ_certificate_policies);
        }
    }




    static if(!is(typeof(SN_any_policy))) {
        private enum enumMixinStr_SN_any_policy = `enum SN_any_policy = "anyPolicy";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_any_policy); }))) {
            mixin(enumMixinStr_SN_any_policy);
        }
    }




    static if(!is(typeof(LN_any_policy))) {
        private enum enumMixinStr_LN_any_policy = `enum LN_any_policy = "X509v3 Any Policy";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_any_policy); }))) {
            mixin(enumMixinStr_LN_any_policy);
        }
    }




    static if(!is(typeof(NID_any_policy))) {
        private enum enumMixinStr_NID_any_policy = `enum NID_any_policy = 746;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_any_policy); }))) {
            mixin(enumMixinStr_NID_any_policy);
        }
    }




    static if(!is(typeof(OBJ_any_policy))) {
        private enum enumMixinStr_OBJ_any_policy = `enum OBJ_any_policy = 2L , 5L , 29L , 32L , 0L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_any_policy); }))) {
            mixin(enumMixinStr_OBJ_any_policy);
        }
    }




    static if(!is(typeof(SN_policy_mappings))) {
        private enum enumMixinStr_SN_policy_mappings = `enum SN_policy_mappings = "policyMappings";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_policy_mappings); }))) {
            mixin(enumMixinStr_SN_policy_mappings);
        }
    }




    static if(!is(typeof(LN_policy_mappings))) {
        private enum enumMixinStr_LN_policy_mappings = `enum LN_policy_mappings = "X509v3 Policy Mappings";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_policy_mappings); }))) {
            mixin(enumMixinStr_LN_policy_mappings);
        }
    }




    static if(!is(typeof(NID_policy_mappings))) {
        private enum enumMixinStr_NID_policy_mappings = `enum NID_policy_mappings = 747;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_policy_mappings); }))) {
            mixin(enumMixinStr_NID_policy_mappings);
        }
    }




    static if(!is(typeof(OBJ_policy_mappings))) {
        private enum enumMixinStr_OBJ_policy_mappings = `enum OBJ_policy_mappings = 2L , 5L , 29L , 33L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_policy_mappings); }))) {
            mixin(enumMixinStr_OBJ_policy_mappings);
        }
    }




    static if(!is(typeof(SN_authority_key_identifier))) {
        private enum enumMixinStr_SN_authority_key_identifier = `enum SN_authority_key_identifier = "authorityKeyIdentifier";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_authority_key_identifier); }))) {
            mixin(enumMixinStr_SN_authority_key_identifier);
        }
    }




    static if(!is(typeof(LN_authority_key_identifier))) {
        private enum enumMixinStr_LN_authority_key_identifier = `enum LN_authority_key_identifier = "X509v3 Authority Key Identifier";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_authority_key_identifier); }))) {
            mixin(enumMixinStr_LN_authority_key_identifier);
        }
    }




    static if(!is(typeof(NID_authority_key_identifier))) {
        private enum enumMixinStr_NID_authority_key_identifier = `enum NID_authority_key_identifier = 90;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_authority_key_identifier); }))) {
            mixin(enumMixinStr_NID_authority_key_identifier);
        }
    }




    static if(!is(typeof(OBJ_authority_key_identifier))) {
        private enum enumMixinStr_OBJ_authority_key_identifier = `enum OBJ_authority_key_identifier = 2L , 5L , 29L , 35L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_authority_key_identifier); }))) {
            mixin(enumMixinStr_OBJ_authority_key_identifier);
        }
    }




    static if(!is(typeof(SN_policy_constraints))) {
        private enum enumMixinStr_SN_policy_constraints = `enum SN_policy_constraints = "policyConstraints";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_policy_constraints); }))) {
            mixin(enumMixinStr_SN_policy_constraints);
        }
    }




    static if(!is(typeof(LN_policy_constraints))) {
        private enum enumMixinStr_LN_policy_constraints = `enum LN_policy_constraints = "X509v3 Policy Constraints";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_policy_constraints); }))) {
            mixin(enumMixinStr_LN_policy_constraints);
        }
    }




    static if(!is(typeof(NID_policy_constraints))) {
        private enum enumMixinStr_NID_policy_constraints = `enum NID_policy_constraints = 401;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_policy_constraints); }))) {
            mixin(enumMixinStr_NID_policy_constraints);
        }
    }




    static if(!is(typeof(OBJ_policy_constraints))) {
        private enum enumMixinStr_OBJ_policy_constraints = `enum OBJ_policy_constraints = 2L , 5L , 29L , 36L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_policy_constraints); }))) {
            mixin(enumMixinStr_OBJ_policy_constraints);
        }
    }




    static if(!is(typeof(SN_ext_key_usage))) {
        private enum enumMixinStr_SN_ext_key_usage = `enum SN_ext_key_usage = "extendedKeyUsage";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_ext_key_usage); }))) {
            mixin(enumMixinStr_SN_ext_key_usage);
        }
    }




    static if(!is(typeof(LN_ext_key_usage))) {
        private enum enumMixinStr_LN_ext_key_usage = `enum LN_ext_key_usage = "X509v3 Extended Key Usage";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_ext_key_usage); }))) {
            mixin(enumMixinStr_LN_ext_key_usage);
        }
    }




    static if(!is(typeof(NID_ext_key_usage))) {
        private enum enumMixinStr_NID_ext_key_usage = `enum NID_ext_key_usage = 126;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_ext_key_usage); }))) {
            mixin(enumMixinStr_NID_ext_key_usage);
        }
    }




    static if(!is(typeof(OBJ_ext_key_usage))) {
        private enum enumMixinStr_OBJ_ext_key_usage = `enum OBJ_ext_key_usage = 2L , 5L , 29L , 37L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_ext_key_usage); }))) {
            mixin(enumMixinStr_OBJ_ext_key_usage);
        }
    }




    static if(!is(typeof(SN_freshest_crl))) {
        private enum enumMixinStr_SN_freshest_crl = `enum SN_freshest_crl = "freshestCRL";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_freshest_crl); }))) {
            mixin(enumMixinStr_SN_freshest_crl);
        }
    }




    static if(!is(typeof(LN_freshest_crl))) {
        private enum enumMixinStr_LN_freshest_crl = `enum LN_freshest_crl = "X509v3 Freshest CRL";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_freshest_crl); }))) {
            mixin(enumMixinStr_LN_freshest_crl);
        }
    }




    static if(!is(typeof(NID_freshest_crl))) {
        private enum enumMixinStr_NID_freshest_crl = `enum NID_freshest_crl = 857;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_freshest_crl); }))) {
            mixin(enumMixinStr_NID_freshest_crl);
        }
    }




    static if(!is(typeof(OBJ_freshest_crl))) {
        private enum enumMixinStr_OBJ_freshest_crl = `enum OBJ_freshest_crl = 2L , 5L , 29L , 46L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_freshest_crl); }))) {
            mixin(enumMixinStr_OBJ_freshest_crl);
        }
    }




    static if(!is(typeof(SN_inhibit_any_policy))) {
        private enum enumMixinStr_SN_inhibit_any_policy = `enum SN_inhibit_any_policy = "inhibitAnyPolicy";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_inhibit_any_policy); }))) {
            mixin(enumMixinStr_SN_inhibit_any_policy);
        }
    }




    static if(!is(typeof(LN_inhibit_any_policy))) {
        private enum enumMixinStr_LN_inhibit_any_policy = `enum LN_inhibit_any_policy = "X509v3 Inhibit Any Policy";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_inhibit_any_policy); }))) {
            mixin(enumMixinStr_LN_inhibit_any_policy);
        }
    }




    static if(!is(typeof(NID_inhibit_any_policy))) {
        private enum enumMixinStr_NID_inhibit_any_policy = `enum NID_inhibit_any_policy = 748;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_inhibit_any_policy); }))) {
            mixin(enumMixinStr_NID_inhibit_any_policy);
        }
    }




    static if(!is(typeof(OBJ_inhibit_any_policy))) {
        private enum enumMixinStr_OBJ_inhibit_any_policy = `enum OBJ_inhibit_any_policy = 2L , 5L , 29L , 54L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_inhibit_any_policy); }))) {
            mixin(enumMixinStr_OBJ_inhibit_any_policy);
        }
    }




    static if(!is(typeof(SN_target_information))) {
        private enum enumMixinStr_SN_target_information = `enum SN_target_information = "targetInformation";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_target_information); }))) {
            mixin(enumMixinStr_SN_target_information);
        }
    }




    static if(!is(typeof(LN_target_information))) {
        private enum enumMixinStr_LN_target_information = `enum LN_target_information = "X509v3 AC Targeting";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_target_information); }))) {
            mixin(enumMixinStr_LN_target_information);
        }
    }




    static if(!is(typeof(NID_target_information))) {
        private enum enumMixinStr_NID_target_information = `enum NID_target_information = 402;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_target_information); }))) {
            mixin(enumMixinStr_NID_target_information);
        }
    }




    static if(!is(typeof(OBJ_target_information))) {
        private enum enumMixinStr_OBJ_target_information = `enum OBJ_target_information = 2L , 5L , 29L , 55L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_target_information); }))) {
            mixin(enumMixinStr_OBJ_target_information);
        }
    }




    static if(!is(typeof(SN_no_rev_avail))) {
        private enum enumMixinStr_SN_no_rev_avail = `enum SN_no_rev_avail = "noRevAvail";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_no_rev_avail); }))) {
            mixin(enumMixinStr_SN_no_rev_avail);
        }
    }




    static if(!is(typeof(LN_no_rev_avail))) {
        private enum enumMixinStr_LN_no_rev_avail = `enum LN_no_rev_avail = "X509v3 No Revocation Available";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_no_rev_avail); }))) {
            mixin(enumMixinStr_LN_no_rev_avail);
        }
    }




    static if(!is(typeof(NID_no_rev_avail))) {
        private enum enumMixinStr_NID_no_rev_avail = `enum NID_no_rev_avail = 403;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_no_rev_avail); }))) {
            mixin(enumMixinStr_NID_no_rev_avail);
        }
    }




    static if(!is(typeof(OBJ_no_rev_avail))) {
        private enum enumMixinStr_OBJ_no_rev_avail = `enum OBJ_no_rev_avail = 2L , 5L , 29L , 56L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_no_rev_avail); }))) {
            mixin(enumMixinStr_OBJ_no_rev_avail);
        }
    }




    static if(!is(typeof(SN_anyExtendedKeyUsage))) {
        private enum enumMixinStr_SN_anyExtendedKeyUsage = `enum SN_anyExtendedKeyUsage = "anyExtendedKeyUsage";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_anyExtendedKeyUsage); }))) {
            mixin(enumMixinStr_SN_anyExtendedKeyUsage);
        }
    }




    static if(!is(typeof(LN_anyExtendedKeyUsage))) {
        private enum enumMixinStr_LN_anyExtendedKeyUsage = `enum LN_anyExtendedKeyUsage = "Any Extended Key Usage";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_anyExtendedKeyUsage); }))) {
            mixin(enumMixinStr_LN_anyExtendedKeyUsage);
        }
    }




    static if(!is(typeof(NID_anyExtendedKeyUsage))) {
        private enum enumMixinStr_NID_anyExtendedKeyUsage = `enum NID_anyExtendedKeyUsage = 910;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_anyExtendedKeyUsage); }))) {
            mixin(enumMixinStr_NID_anyExtendedKeyUsage);
        }
    }




    static if(!is(typeof(OBJ_anyExtendedKeyUsage))) {
        private enum enumMixinStr_OBJ_anyExtendedKeyUsage = `enum OBJ_anyExtendedKeyUsage = 2L , 5L , 29L , 37L , 0L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_anyExtendedKeyUsage); }))) {
            mixin(enumMixinStr_OBJ_anyExtendedKeyUsage);
        }
    }




    static if(!is(typeof(SN_netscape))) {
        private enum enumMixinStr_SN_netscape = `enum SN_netscape = "Netscape";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_netscape); }))) {
            mixin(enumMixinStr_SN_netscape);
        }
    }




    static if(!is(typeof(LN_netscape))) {
        private enum enumMixinStr_LN_netscape = `enum LN_netscape = "Netscape Communications Corp.";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_netscape); }))) {
            mixin(enumMixinStr_LN_netscape);
        }
    }




    static if(!is(typeof(NID_netscape))) {
        private enum enumMixinStr_NID_netscape = `enum NID_netscape = 57;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_netscape); }))) {
            mixin(enumMixinStr_NID_netscape);
        }
    }




    static if(!is(typeof(OBJ_netscape))) {
        private enum enumMixinStr_OBJ_netscape = `enum OBJ_netscape = 2L , 16L , 840L , 1L , 113730L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_netscape); }))) {
            mixin(enumMixinStr_OBJ_netscape);
        }
    }




    static if(!is(typeof(SN_netscape_cert_extension))) {
        private enum enumMixinStr_SN_netscape_cert_extension = `enum SN_netscape_cert_extension = "nsCertExt";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_netscape_cert_extension); }))) {
            mixin(enumMixinStr_SN_netscape_cert_extension);
        }
    }




    static if(!is(typeof(LN_netscape_cert_extension))) {
        private enum enumMixinStr_LN_netscape_cert_extension = `enum LN_netscape_cert_extension = "Netscape Certificate Extension";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_netscape_cert_extension); }))) {
            mixin(enumMixinStr_LN_netscape_cert_extension);
        }
    }




    static if(!is(typeof(NID_netscape_cert_extension))) {
        private enum enumMixinStr_NID_netscape_cert_extension = `enum NID_netscape_cert_extension = 58;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_netscape_cert_extension); }))) {
            mixin(enumMixinStr_NID_netscape_cert_extension);
        }
    }




    static if(!is(typeof(OBJ_netscape_cert_extension))) {
        private enum enumMixinStr_OBJ_netscape_cert_extension = `enum OBJ_netscape_cert_extension = 2L , 16L , 840L , 1L , 113730L , 1L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_netscape_cert_extension); }))) {
            mixin(enumMixinStr_OBJ_netscape_cert_extension);
        }
    }




    static if(!is(typeof(SN_netscape_data_type))) {
        private enum enumMixinStr_SN_netscape_data_type = `enum SN_netscape_data_type = "nsDataType";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_netscape_data_type); }))) {
            mixin(enumMixinStr_SN_netscape_data_type);
        }
    }




    static if(!is(typeof(LN_netscape_data_type))) {
        private enum enumMixinStr_LN_netscape_data_type = `enum LN_netscape_data_type = "Netscape Data Type";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_netscape_data_type); }))) {
            mixin(enumMixinStr_LN_netscape_data_type);
        }
    }




    static if(!is(typeof(NID_netscape_data_type))) {
        private enum enumMixinStr_NID_netscape_data_type = `enum NID_netscape_data_type = 59;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_netscape_data_type); }))) {
            mixin(enumMixinStr_NID_netscape_data_type);
        }
    }




    static if(!is(typeof(OBJ_netscape_data_type))) {
        private enum enumMixinStr_OBJ_netscape_data_type = `enum OBJ_netscape_data_type = 2L , 16L , 840L , 1L , 113730L , 2L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_netscape_data_type); }))) {
            mixin(enumMixinStr_OBJ_netscape_data_type);
        }
    }




    static if(!is(typeof(SN_netscape_cert_type))) {
        private enum enumMixinStr_SN_netscape_cert_type = `enum SN_netscape_cert_type = "nsCertType";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_netscape_cert_type); }))) {
            mixin(enumMixinStr_SN_netscape_cert_type);
        }
    }




    static if(!is(typeof(LN_netscape_cert_type))) {
        private enum enumMixinStr_LN_netscape_cert_type = `enum LN_netscape_cert_type = "Netscape Cert Type";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_netscape_cert_type); }))) {
            mixin(enumMixinStr_LN_netscape_cert_type);
        }
    }




    static if(!is(typeof(NID_netscape_cert_type))) {
        private enum enumMixinStr_NID_netscape_cert_type = `enum NID_netscape_cert_type = 71;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_netscape_cert_type); }))) {
            mixin(enumMixinStr_NID_netscape_cert_type);
        }
    }




    static if(!is(typeof(OBJ_netscape_cert_type))) {
        private enum enumMixinStr_OBJ_netscape_cert_type = `enum OBJ_netscape_cert_type = 2L , 16L , 840L , 1L , 113730L , 1L , 1L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_netscape_cert_type); }))) {
            mixin(enumMixinStr_OBJ_netscape_cert_type);
        }
    }




    static if(!is(typeof(SN_netscape_base_url))) {
        private enum enumMixinStr_SN_netscape_base_url = `enum SN_netscape_base_url = "nsBaseUrl";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_netscape_base_url); }))) {
            mixin(enumMixinStr_SN_netscape_base_url);
        }
    }




    static if(!is(typeof(LN_netscape_base_url))) {
        private enum enumMixinStr_LN_netscape_base_url = `enum LN_netscape_base_url = "Netscape Base Url";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_netscape_base_url); }))) {
            mixin(enumMixinStr_LN_netscape_base_url);
        }
    }




    static if(!is(typeof(NID_netscape_base_url))) {
        private enum enumMixinStr_NID_netscape_base_url = `enum NID_netscape_base_url = 72;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_netscape_base_url); }))) {
            mixin(enumMixinStr_NID_netscape_base_url);
        }
    }




    static if(!is(typeof(OBJ_netscape_base_url))) {
        private enum enumMixinStr_OBJ_netscape_base_url = `enum OBJ_netscape_base_url = 2L , 16L , 840L , 1L , 113730L , 1L , 2L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_netscape_base_url); }))) {
            mixin(enumMixinStr_OBJ_netscape_base_url);
        }
    }




    static if(!is(typeof(SN_netscape_revocation_url))) {
        private enum enumMixinStr_SN_netscape_revocation_url = `enum SN_netscape_revocation_url = "nsRevocationUrl";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_netscape_revocation_url); }))) {
            mixin(enumMixinStr_SN_netscape_revocation_url);
        }
    }




    static if(!is(typeof(LN_netscape_revocation_url))) {
        private enum enumMixinStr_LN_netscape_revocation_url = `enum LN_netscape_revocation_url = "Netscape Revocation Url";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_netscape_revocation_url); }))) {
            mixin(enumMixinStr_LN_netscape_revocation_url);
        }
    }




    static if(!is(typeof(NID_netscape_revocation_url))) {
        private enum enumMixinStr_NID_netscape_revocation_url = `enum NID_netscape_revocation_url = 73;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_netscape_revocation_url); }))) {
            mixin(enumMixinStr_NID_netscape_revocation_url);
        }
    }




    static if(!is(typeof(OBJ_netscape_revocation_url))) {
        private enum enumMixinStr_OBJ_netscape_revocation_url = `enum OBJ_netscape_revocation_url = 2L , 16L , 840L , 1L , 113730L , 1L , 3L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_netscape_revocation_url); }))) {
            mixin(enumMixinStr_OBJ_netscape_revocation_url);
        }
    }




    static if(!is(typeof(SN_netscape_ca_revocation_url))) {
        private enum enumMixinStr_SN_netscape_ca_revocation_url = `enum SN_netscape_ca_revocation_url = "nsCaRevocationUrl";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_netscape_ca_revocation_url); }))) {
            mixin(enumMixinStr_SN_netscape_ca_revocation_url);
        }
    }




    static if(!is(typeof(LN_netscape_ca_revocation_url))) {
        private enum enumMixinStr_LN_netscape_ca_revocation_url = `enum LN_netscape_ca_revocation_url = "Netscape CA Revocation Url";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_netscape_ca_revocation_url); }))) {
            mixin(enumMixinStr_LN_netscape_ca_revocation_url);
        }
    }




    static if(!is(typeof(NID_netscape_ca_revocation_url))) {
        private enum enumMixinStr_NID_netscape_ca_revocation_url = `enum NID_netscape_ca_revocation_url = 74;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_netscape_ca_revocation_url); }))) {
            mixin(enumMixinStr_NID_netscape_ca_revocation_url);
        }
    }




    static if(!is(typeof(OBJ_netscape_ca_revocation_url))) {
        private enum enumMixinStr_OBJ_netscape_ca_revocation_url = `enum OBJ_netscape_ca_revocation_url = 2L , 16L , 840L , 1L , 113730L , 1L , 4L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_netscape_ca_revocation_url); }))) {
            mixin(enumMixinStr_OBJ_netscape_ca_revocation_url);
        }
    }




    static if(!is(typeof(SN_netscape_renewal_url))) {
        private enum enumMixinStr_SN_netscape_renewal_url = `enum SN_netscape_renewal_url = "nsRenewalUrl";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_netscape_renewal_url); }))) {
            mixin(enumMixinStr_SN_netscape_renewal_url);
        }
    }




    static if(!is(typeof(LN_netscape_renewal_url))) {
        private enum enumMixinStr_LN_netscape_renewal_url = `enum LN_netscape_renewal_url = "Netscape Renewal Url";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_netscape_renewal_url); }))) {
            mixin(enumMixinStr_LN_netscape_renewal_url);
        }
    }




    static if(!is(typeof(NID_netscape_renewal_url))) {
        private enum enumMixinStr_NID_netscape_renewal_url = `enum NID_netscape_renewal_url = 75;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_netscape_renewal_url); }))) {
            mixin(enumMixinStr_NID_netscape_renewal_url);
        }
    }




    static if(!is(typeof(OBJ_netscape_renewal_url))) {
        private enum enumMixinStr_OBJ_netscape_renewal_url = `enum OBJ_netscape_renewal_url = 2L , 16L , 840L , 1L , 113730L , 1L , 7L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_netscape_renewal_url); }))) {
            mixin(enumMixinStr_OBJ_netscape_renewal_url);
        }
    }




    static if(!is(typeof(SN_netscape_ca_policy_url))) {
        private enum enumMixinStr_SN_netscape_ca_policy_url = `enum SN_netscape_ca_policy_url = "nsCaPolicyUrl";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_netscape_ca_policy_url); }))) {
            mixin(enumMixinStr_SN_netscape_ca_policy_url);
        }
    }




    static if(!is(typeof(LN_netscape_ca_policy_url))) {
        private enum enumMixinStr_LN_netscape_ca_policy_url = `enum LN_netscape_ca_policy_url = "Netscape CA Policy Url";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_netscape_ca_policy_url); }))) {
            mixin(enumMixinStr_LN_netscape_ca_policy_url);
        }
    }




    static if(!is(typeof(NID_netscape_ca_policy_url))) {
        private enum enumMixinStr_NID_netscape_ca_policy_url = `enum NID_netscape_ca_policy_url = 76;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_netscape_ca_policy_url); }))) {
            mixin(enumMixinStr_NID_netscape_ca_policy_url);
        }
    }




    static if(!is(typeof(OBJ_netscape_ca_policy_url))) {
        private enum enumMixinStr_OBJ_netscape_ca_policy_url = `enum OBJ_netscape_ca_policy_url = 2L , 16L , 840L , 1L , 113730L , 1L , 8L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_netscape_ca_policy_url); }))) {
            mixin(enumMixinStr_OBJ_netscape_ca_policy_url);
        }
    }




    static if(!is(typeof(SN_netscape_ssl_server_name))) {
        private enum enumMixinStr_SN_netscape_ssl_server_name = `enum SN_netscape_ssl_server_name = "nsSslServerName";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_netscape_ssl_server_name); }))) {
            mixin(enumMixinStr_SN_netscape_ssl_server_name);
        }
    }




    static if(!is(typeof(LN_netscape_ssl_server_name))) {
        private enum enumMixinStr_LN_netscape_ssl_server_name = `enum LN_netscape_ssl_server_name = "Netscape SSL Server Name";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_netscape_ssl_server_name); }))) {
            mixin(enumMixinStr_LN_netscape_ssl_server_name);
        }
    }




    static if(!is(typeof(NID_netscape_ssl_server_name))) {
        private enum enumMixinStr_NID_netscape_ssl_server_name = `enum NID_netscape_ssl_server_name = 77;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_netscape_ssl_server_name); }))) {
            mixin(enumMixinStr_NID_netscape_ssl_server_name);
        }
    }




    static if(!is(typeof(OBJ_netscape_ssl_server_name))) {
        private enum enumMixinStr_OBJ_netscape_ssl_server_name = `enum OBJ_netscape_ssl_server_name = 2L , 16L , 840L , 1L , 113730L , 1L , 12L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_netscape_ssl_server_name); }))) {
            mixin(enumMixinStr_OBJ_netscape_ssl_server_name);
        }
    }




    static if(!is(typeof(SN_netscape_comment))) {
        private enum enumMixinStr_SN_netscape_comment = `enum SN_netscape_comment = "nsComment";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_netscape_comment); }))) {
            mixin(enumMixinStr_SN_netscape_comment);
        }
    }




    static if(!is(typeof(LN_netscape_comment))) {
        private enum enumMixinStr_LN_netscape_comment = `enum LN_netscape_comment = "Netscape Comment";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_netscape_comment); }))) {
            mixin(enumMixinStr_LN_netscape_comment);
        }
    }




    static if(!is(typeof(NID_netscape_comment))) {
        private enum enumMixinStr_NID_netscape_comment = `enum NID_netscape_comment = 78;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_netscape_comment); }))) {
            mixin(enumMixinStr_NID_netscape_comment);
        }
    }




    static if(!is(typeof(OBJ_netscape_comment))) {
        private enum enumMixinStr_OBJ_netscape_comment = `enum OBJ_netscape_comment = 2L , 16L , 840L , 1L , 113730L , 1L , 13L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_netscape_comment); }))) {
            mixin(enumMixinStr_OBJ_netscape_comment);
        }
    }




    static if(!is(typeof(SN_netscape_cert_sequence))) {
        private enum enumMixinStr_SN_netscape_cert_sequence = `enum SN_netscape_cert_sequence = "nsCertSequence";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_netscape_cert_sequence); }))) {
            mixin(enumMixinStr_SN_netscape_cert_sequence);
        }
    }




    static if(!is(typeof(LN_netscape_cert_sequence))) {
        private enum enumMixinStr_LN_netscape_cert_sequence = `enum LN_netscape_cert_sequence = "Netscape Certificate Sequence";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_netscape_cert_sequence); }))) {
            mixin(enumMixinStr_LN_netscape_cert_sequence);
        }
    }




    static if(!is(typeof(NID_netscape_cert_sequence))) {
        private enum enumMixinStr_NID_netscape_cert_sequence = `enum NID_netscape_cert_sequence = 79;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_netscape_cert_sequence); }))) {
            mixin(enumMixinStr_NID_netscape_cert_sequence);
        }
    }




    static if(!is(typeof(OBJ_netscape_cert_sequence))) {
        private enum enumMixinStr_OBJ_netscape_cert_sequence = `enum OBJ_netscape_cert_sequence = 2L , 16L , 840L , 1L , 113730L , 2L , 5L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_netscape_cert_sequence); }))) {
            mixin(enumMixinStr_OBJ_netscape_cert_sequence);
        }
    }




    static if(!is(typeof(SN_ns_sgc))) {
        private enum enumMixinStr_SN_ns_sgc = `enum SN_ns_sgc = "nsSGC";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_ns_sgc); }))) {
            mixin(enumMixinStr_SN_ns_sgc);
        }
    }




    static if(!is(typeof(LN_ns_sgc))) {
        private enum enumMixinStr_LN_ns_sgc = `enum LN_ns_sgc = "Netscape Server Gated Crypto";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_ns_sgc); }))) {
            mixin(enumMixinStr_LN_ns_sgc);
        }
    }




    static if(!is(typeof(NID_ns_sgc))) {
        private enum enumMixinStr_NID_ns_sgc = `enum NID_ns_sgc = 139;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_ns_sgc); }))) {
            mixin(enumMixinStr_NID_ns_sgc);
        }
    }




    static if(!is(typeof(OBJ_ns_sgc))) {
        private enum enumMixinStr_OBJ_ns_sgc = `enum OBJ_ns_sgc = 2L , 16L , 840L , 1L , 113730L , 4L , 1L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_ns_sgc); }))) {
            mixin(enumMixinStr_OBJ_ns_sgc);
        }
    }




    static if(!is(typeof(SN_org))) {
        private enum enumMixinStr_SN_org = `enum SN_org = "ORG";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_org); }))) {
            mixin(enumMixinStr_SN_org);
        }
    }




    static if(!is(typeof(LN_org))) {
        private enum enumMixinStr_LN_org = `enum LN_org = "org";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_org); }))) {
            mixin(enumMixinStr_LN_org);
        }
    }




    static if(!is(typeof(NID_org))) {
        private enum enumMixinStr_NID_org = `enum NID_org = 379;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_org); }))) {
            mixin(enumMixinStr_NID_org);
        }
    }




    static if(!is(typeof(OBJ_org))) {
        private enum enumMixinStr_OBJ_org = `enum OBJ_org = 1L , 3L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_org); }))) {
            mixin(enumMixinStr_OBJ_org);
        }
    }




    static if(!is(typeof(SN_dod))) {
        private enum enumMixinStr_SN_dod = `enum SN_dod = "DOD";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_dod); }))) {
            mixin(enumMixinStr_SN_dod);
        }
    }




    static if(!is(typeof(LN_dod))) {
        private enum enumMixinStr_LN_dod = `enum LN_dod = "dod";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_dod); }))) {
            mixin(enumMixinStr_LN_dod);
        }
    }




    static if(!is(typeof(NID_dod))) {
        private enum enumMixinStr_NID_dod = `enum NID_dod = 380;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_dod); }))) {
            mixin(enumMixinStr_NID_dod);
        }
    }




    static if(!is(typeof(OBJ_dod))) {
        private enum enumMixinStr_OBJ_dod = `enum OBJ_dod = 1L , 3L , 6L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_dod); }))) {
            mixin(enumMixinStr_OBJ_dod);
        }
    }




    static if(!is(typeof(SN_iana))) {
        private enum enumMixinStr_SN_iana = `enum SN_iana = "IANA";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_iana); }))) {
            mixin(enumMixinStr_SN_iana);
        }
    }




    static if(!is(typeof(LN_iana))) {
        private enum enumMixinStr_LN_iana = `enum LN_iana = "iana";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_iana); }))) {
            mixin(enumMixinStr_LN_iana);
        }
    }




    static if(!is(typeof(NID_iana))) {
        private enum enumMixinStr_NID_iana = `enum NID_iana = 381;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_iana); }))) {
            mixin(enumMixinStr_NID_iana);
        }
    }




    static if(!is(typeof(OBJ_iana))) {
        private enum enumMixinStr_OBJ_iana = `enum OBJ_iana = 1L , 3L , 6L , 1L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_iana); }))) {
            mixin(enumMixinStr_OBJ_iana);
        }
    }




    static if(!is(typeof(OBJ_internet))) {
        private enum enumMixinStr_OBJ_internet = `enum OBJ_internet = 1L , 3L , 6L , 1L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_internet); }))) {
            mixin(enumMixinStr_OBJ_internet);
        }
    }




    static if(!is(typeof(SN_Directory))) {
        private enum enumMixinStr_SN_Directory = `enum SN_Directory = "directory";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_Directory); }))) {
            mixin(enumMixinStr_SN_Directory);
        }
    }




    static if(!is(typeof(LN_Directory))) {
        private enum enumMixinStr_LN_Directory = `enum LN_Directory = "Directory";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_Directory); }))) {
            mixin(enumMixinStr_LN_Directory);
        }
    }




    static if(!is(typeof(NID_Directory))) {
        private enum enumMixinStr_NID_Directory = `enum NID_Directory = 382;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_Directory); }))) {
            mixin(enumMixinStr_NID_Directory);
        }
    }




    static if(!is(typeof(OBJ_Directory))) {
        private enum enumMixinStr_OBJ_Directory = `enum OBJ_Directory = 1L , 3L , 6L , 1L , 1L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_Directory); }))) {
            mixin(enumMixinStr_OBJ_Directory);
        }
    }




    static if(!is(typeof(SN_Management))) {
        private enum enumMixinStr_SN_Management = `enum SN_Management = "mgmt";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_Management); }))) {
            mixin(enumMixinStr_SN_Management);
        }
    }




    static if(!is(typeof(LN_Management))) {
        private enum enumMixinStr_LN_Management = `enum LN_Management = "Management";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_Management); }))) {
            mixin(enumMixinStr_LN_Management);
        }
    }




    static if(!is(typeof(NID_Management))) {
        private enum enumMixinStr_NID_Management = `enum NID_Management = 383;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_Management); }))) {
            mixin(enumMixinStr_NID_Management);
        }
    }




    static if(!is(typeof(OBJ_Management))) {
        private enum enumMixinStr_OBJ_Management = `enum OBJ_Management = 1L , 3L , 6L , 1L , 2L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_Management); }))) {
            mixin(enumMixinStr_OBJ_Management);
        }
    }




    static if(!is(typeof(SN_Experimental))) {
        private enum enumMixinStr_SN_Experimental = `enum SN_Experimental = "experimental";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_Experimental); }))) {
            mixin(enumMixinStr_SN_Experimental);
        }
    }




    static if(!is(typeof(LN_Experimental))) {
        private enum enumMixinStr_LN_Experimental = `enum LN_Experimental = "Experimental";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_Experimental); }))) {
            mixin(enumMixinStr_LN_Experimental);
        }
    }




    static if(!is(typeof(NID_Experimental))) {
        private enum enumMixinStr_NID_Experimental = `enum NID_Experimental = 384;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_Experimental); }))) {
            mixin(enumMixinStr_NID_Experimental);
        }
    }




    static if(!is(typeof(OBJ_Experimental))) {
        private enum enumMixinStr_OBJ_Experimental = `enum OBJ_Experimental = 1L , 3L , 6L , 1L , 3L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_Experimental); }))) {
            mixin(enumMixinStr_OBJ_Experimental);
        }
    }




    static if(!is(typeof(SN_Private))) {
        private enum enumMixinStr_SN_Private = `enum SN_Private = "private";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_Private); }))) {
            mixin(enumMixinStr_SN_Private);
        }
    }




    static if(!is(typeof(LN_Private))) {
        private enum enumMixinStr_LN_Private = `enum LN_Private = "Private";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_Private); }))) {
            mixin(enumMixinStr_LN_Private);
        }
    }




    static if(!is(typeof(NID_Private))) {
        private enum enumMixinStr_NID_Private = `enum NID_Private = 385;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_Private); }))) {
            mixin(enumMixinStr_NID_Private);
        }
    }




    static if(!is(typeof(OBJ_Private))) {
        private enum enumMixinStr_OBJ_Private = `enum OBJ_Private = 1L , 3L , 6L , 1L , 4L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_Private); }))) {
            mixin(enumMixinStr_OBJ_Private);
        }
    }




    static if(!is(typeof(SN_Security))) {
        private enum enumMixinStr_SN_Security = `enum SN_Security = "security";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_Security); }))) {
            mixin(enumMixinStr_SN_Security);
        }
    }




    static if(!is(typeof(LN_Security))) {
        private enum enumMixinStr_LN_Security = `enum LN_Security = "Security";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_Security); }))) {
            mixin(enumMixinStr_LN_Security);
        }
    }




    static if(!is(typeof(NID_Security))) {
        private enum enumMixinStr_NID_Security = `enum NID_Security = 386;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_Security); }))) {
            mixin(enumMixinStr_NID_Security);
        }
    }




    static if(!is(typeof(OBJ_Security))) {
        private enum enumMixinStr_OBJ_Security = `enum OBJ_Security = 1L , 3L , 6L , 1L , 5L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_Security); }))) {
            mixin(enumMixinStr_OBJ_Security);
        }
    }




    static if(!is(typeof(SN_SNMPv2))) {
        private enum enumMixinStr_SN_SNMPv2 = `enum SN_SNMPv2 = "snmpv2";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_SNMPv2); }))) {
            mixin(enumMixinStr_SN_SNMPv2);
        }
    }




    static if(!is(typeof(LN_SNMPv2))) {
        private enum enumMixinStr_LN_SNMPv2 = `enum LN_SNMPv2 = "SNMPv2";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_SNMPv2); }))) {
            mixin(enumMixinStr_LN_SNMPv2);
        }
    }




    static if(!is(typeof(NID_SNMPv2))) {
        private enum enumMixinStr_NID_SNMPv2 = `enum NID_SNMPv2 = 387;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_SNMPv2); }))) {
            mixin(enumMixinStr_NID_SNMPv2);
        }
    }




    static if(!is(typeof(OBJ_SNMPv2))) {
        private enum enumMixinStr_OBJ_SNMPv2 = `enum OBJ_SNMPv2 = 1L , 3L , 6L , 1L , 6L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_SNMPv2); }))) {
            mixin(enumMixinStr_OBJ_SNMPv2);
        }
    }




    static if(!is(typeof(LN_Mail))) {
        private enum enumMixinStr_LN_Mail = `enum LN_Mail = "Mail";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_Mail); }))) {
            mixin(enumMixinStr_LN_Mail);
        }
    }




    static if(!is(typeof(NID_Mail))) {
        private enum enumMixinStr_NID_Mail = `enum NID_Mail = 388;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_Mail); }))) {
            mixin(enumMixinStr_NID_Mail);
        }
    }




    static if(!is(typeof(OBJ_Mail))) {
        private enum enumMixinStr_OBJ_Mail = `enum OBJ_Mail = 1L , 3L , 6L , 1L , 7L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_Mail); }))) {
            mixin(enumMixinStr_OBJ_Mail);
        }
    }




    static if(!is(typeof(SN_Enterprises))) {
        private enum enumMixinStr_SN_Enterprises = `enum SN_Enterprises = "enterprises";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_Enterprises); }))) {
            mixin(enumMixinStr_SN_Enterprises);
        }
    }




    static if(!is(typeof(LN_Enterprises))) {
        private enum enumMixinStr_LN_Enterprises = `enum LN_Enterprises = "Enterprises";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_Enterprises); }))) {
            mixin(enumMixinStr_LN_Enterprises);
        }
    }




    static if(!is(typeof(NID_Enterprises))) {
        private enum enumMixinStr_NID_Enterprises = `enum NID_Enterprises = 389;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_Enterprises); }))) {
            mixin(enumMixinStr_NID_Enterprises);
        }
    }




    static if(!is(typeof(OBJ_Enterprises))) {
        private enum enumMixinStr_OBJ_Enterprises = `enum OBJ_Enterprises = 1L , 3L , 6L , 1L , 4L , 1L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_Enterprises); }))) {
            mixin(enumMixinStr_OBJ_Enterprises);
        }
    }




    static if(!is(typeof(SN_dcObject))) {
        private enum enumMixinStr_SN_dcObject = `enum SN_dcObject = "dcobject";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_dcObject); }))) {
            mixin(enumMixinStr_SN_dcObject);
        }
    }




    static if(!is(typeof(LN_dcObject))) {
        private enum enumMixinStr_LN_dcObject = `enum LN_dcObject = "dcObject";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_dcObject); }))) {
            mixin(enumMixinStr_LN_dcObject);
        }
    }




    static if(!is(typeof(NID_dcObject))) {
        private enum enumMixinStr_NID_dcObject = `enum NID_dcObject = 390;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_dcObject); }))) {
            mixin(enumMixinStr_NID_dcObject);
        }
    }




    static if(!is(typeof(OBJ_dcObject))) {
        private enum enumMixinStr_OBJ_dcObject = `enum OBJ_dcObject = 1L , 3L , 6L , 1L , 4L , 1L , 1466L , 344L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_dcObject); }))) {
            mixin(enumMixinStr_OBJ_dcObject);
        }
    }




    static if(!is(typeof(SN_mime_mhs))) {
        private enum enumMixinStr_SN_mime_mhs = `enum SN_mime_mhs = "mime-mhs";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_mime_mhs); }))) {
            mixin(enumMixinStr_SN_mime_mhs);
        }
    }




    static if(!is(typeof(LN_mime_mhs))) {
        private enum enumMixinStr_LN_mime_mhs = `enum LN_mime_mhs = "MIME MHS";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_mime_mhs); }))) {
            mixin(enumMixinStr_LN_mime_mhs);
        }
    }




    static if(!is(typeof(NID_mime_mhs))) {
        private enum enumMixinStr_NID_mime_mhs = `enum NID_mime_mhs = 504;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_mime_mhs); }))) {
            mixin(enumMixinStr_NID_mime_mhs);
        }
    }




    static if(!is(typeof(OBJ_mime_mhs))) {
        private enum enumMixinStr_OBJ_mime_mhs = `enum OBJ_mime_mhs = 1L , 3L , 6L , 1L , 7L , 1L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_mime_mhs); }))) {
            mixin(enumMixinStr_OBJ_mime_mhs);
        }
    }




    static if(!is(typeof(SN_mime_mhs_headings))) {
        private enum enumMixinStr_SN_mime_mhs_headings = `enum SN_mime_mhs_headings = "mime-mhs-headings";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_mime_mhs_headings); }))) {
            mixin(enumMixinStr_SN_mime_mhs_headings);
        }
    }




    static if(!is(typeof(LN_mime_mhs_headings))) {
        private enum enumMixinStr_LN_mime_mhs_headings = `enum LN_mime_mhs_headings = "mime-mhs-headings";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_mime_mhs_headings); }))) {
            mixin(enumMixinStr_LN_mime_mhs_headings);
        }
    }




    static if(!is(typeof(NID_mime_mhs_headings))) {
        private enum enumMixinStr_NID_mime_mhs_headings = `enum NID_mime_mhs_headings = 505;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_mime_mhs_headings); }))) {
            mixin(enumMixinStr_NID_mime_mhs_headings);
        }
    }




    static if(!is(typeof(OBJ_mime_mhs_headings))) {
        private enum enumMixinStr_OBJ_mime_mhs_headings = `enum OBJ_mime_mhs_headings = 1L , 3L , 6L , 1L , 7L , 1L , 1L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_mime_mhs_headings); }))) {
            mixin(enumMixinStr_OBJ_mime_mhs_headings);
        }
    }




    static if(!is(typeof(SN_mime_mhs_bodies))) {
        private enum enumMixinStr_SN_mime_mhs_bodies = `enum SN_mime_mhs_bodies = "mime-mhs-bodies";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_mime_mhs_bodies); }))) {
            mixin(enumMixinStr_SN_mime_mhs_bodies);
        }
    }




    static if(!is(typeof(LN_mime_mhs_bodies))) {
        private enum enumMixinStr_LN_mime_mhs_bodies = `enum LN_mime_mhs_bodies = "mime-mhs-bodies";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_mime_mhs_bodies); }))) {
            mixin(enumMixinStr_LN_mime_mhs_bodies);
        }
    }




    static if(!is(typeof(NID_mime_mhs_bodies))) {
        private enum enumMixinStr_NID_mime_mhs_bodies = `enum NID_mime_mhs_bodies = 506;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_mime_mhs_bodies); }))) {
            mixin(enumMixinStr_NID_mime_mhs_bodies);
        }
    }




    static if(!is(typeof(OBJ_mime_mhs_bodies))) {
        private enum enumMixinStr_OBJ_mime_mhs_bodies = `enum OBJ_mime_mhs_bodies = 1L , 3L , 6L , 1L , 7L , 1L , 2L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_mime_mhs_bodies); }))) {
            mixin(enumMixinStr_OBJ_mime_mhs_bodies);
        }
    }




    static if(!is(typeof(SN_id_hex_partial_message))) {
        private enum enumMixinStr_SN_id_hex_partial_message = `enum SN_id_hex_partial_message = "id-hex-partial-message";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_hex_partial_message); }))) {
            mixin(enumMixinStr_SN_id_hex_partial_message);
        }
    }




    static if(!is(typeof(LN_id_hex_partial_message))) {
        private enum enumMixinStr_LN_id_hex_partial_message = `enum LN_id_hex_partial_message = "id-hex-partial-message";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_id_hex_partial_message); }))) {
            mixin(enumMixinStr_LN_id_hex_partial_message);
        }
    }




    static if(!is(typeof(NID_id_hex_partial_message))) {
        private enum enumMixinStr_NID_id_hex_partial_message = `enum NID_id_hex_partial_message = 507;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_hex_partial_message); }))) {
            mixin(enumMixinStr_NID_id_hex_partial_message);
        }
    }




    static if(!is(typeof(OBJ_id_hex_partial_message))) {
        private enum enumMixinStr_OBJ_id_hex_partial_message = `enum OBJ_id_hex_partial_message = 1L , 3L , 6L , 1L , 7L , 1L , 1L , 1L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_hex_partial_message); }))) {
            mixin(enumMixinStr_OBJ_id_hex_partial_message);
        }
    }




    static if(!is(typeof(SN_id_hex_multipart_message))) {
        private enum enumMixinStr_SN_id_hex_multipart_message = `enum SN_id_hex_multipart_message = "id-hex-multipart-message";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_hex_multipart_message); }))) {
            mixin(enumMixinStr_SN_id_hex_multipart_message);
        }
    }




    static if(!is(typeof(LN_id_hex_multipart_message))) {
        private enum enumMixinStr_LN_id_hex_multipart_message = `enum LN_id_hex_multipart_message = "id-hex-multipart-message";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_id_hex_multipart_message); }))) {
            mixin(enumMixinStr_LN_id_hex_multipart_message);
        }
    }




    static if(!is(typeof(NID_id_hex_multipart_message))) {
        private enum enumMixinStr_NID_id_hex_multipart_message = `enum NID_id_hex_multipart_message = 508;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_hex_multipart_message); }))) {
            mixin(enumMixinStr_NID_id_hex_multipart_message);
        }
    }




    static if(!is(typeof(OBJ_id_hex_multipart_message))) {
        private enum enumMixinStr_OBJ_id_hex_multipart_message = `enum OBJ_id_hex_multipart_message = 1L , 3L , 6L , 1L , 7L , 1L , 1L , 2L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_hex_multipart_message); }))) {
            mixin(enumMixinStr_OBJ_id_hex_multipart_message);
        }
    }




    static if(!is(typeof(SN_zlib_compression))) {
        private enum enumMixinStr_SN_zlib_compression = `enum SN_zlib_compression = "ZLIB";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_zlib_compression); }))) {
            mixin(enumMixinStr_SN_zlib_compression);
        }
    }




    static if(!is(typeof(LN_zlib_compression))) {
        private enum enumMixinStr_LN_zlib_compression = `enum LN_zlib_compression = "zlib compression";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_zlib_compression); }))) {
            mixin(enumMixinStr_LN_zlib_compression);
        }
    }




    static if(!is(typeof(NID_zlib_compression))) {
        private enum enumMixinStr_NID_zlib_compression = `enum NID_zlib_compression = 125;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_zlib_compression); }))) {
            mixin(enumMixinStr_NID_zlib_compression);
        }
    }




    static if(!is(typeof(OBJ_zlib_compression))) {
        private enum enumMixinStr_OBJ_zlib_compression = `enum OBJ_zlib_compression = 1L , 2L , 840L , 113549L , 1L , 9L , 16L , 3L , 8L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_zlib_compression); }))) {
            mixin(enumMixinStr_OBJ_zlib_compression);
        }
    }




    static if(!is(typeof(OBJ_csor))) {
        private enum enumMixinStr_OBJ_csor = `enum OBJ_csor = 2L , 16L , 840L , 1L , 101L , 3L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_csor); }))) {
            mixin(enumMixinStr_OBJ_csor);
        }
    }




    static if(!is(typeof(OBJ_nistAlgorithms))) {
        private enum enumMixinStr_OBJ_nistAlgorithms = `enum OBJ_nistAlgorithms = 2L , 16L , 840L , 1L , 101L , 3L , 4L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_nistAlgorithms); }))) {
            mixin(enumMixinStr_OBJ_nistAlgorithms);
        }
    }




    static if(!is(typeof(OBJ_aes))) {
        private enum enumMixinStr_OBJ_aes = `enum OBJ_aes = 2L , 16L , 840L , 1L , 101L , 3L , 4L , 1L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_aes); }))) {
            mixin(enumMixinStr_OBJ_aes);
        }
    }




    static if(!is(typeof(SN_aes_128_ecb))) {
        private enum enumMixinStr_SN_aes_128_ecb = `enum SN_aes_128_ecb = "AES-128-ECB";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_aes_128_ecb); }))) {
            mixin(enumMixinStr_SN_aes_128_ecb);
        }
    }




    static if(!is(typeof(LN_aes_128_ecb))) {
        private enum enumMixinStr_LN_aes_128_ecb = `enum LN_aes_128_ecb = "aes-128-ecb";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_aes_128_ecb); }))) {
            mixin(enumMixinStr_LN_aes_128_ecb);
        }
    }




    static if(!is(typeof(NID_aes_128_ecb))) {
        private enum enumMixinStr_NID_aes_128_ecb = `enum NID_aes_128_ecb = 418;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_aes_128_ecb); }))) {
            mixin(enumMixinStr_NID_aes_128_ecb);
        }
    }




    static if(!is(typeof(OBJ_aes_128_ecb))) {
        private enum enumMixinStr_OBJ_aes_128_ecb = `enum OBJ_aes_128_ecb = 2L , 16L , 840L , 1L , 101L , 3L , 4L , 1L , 1L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_aes_128_ecb); }))) {
            mixin(enumMixinStr_OBJ_aes_128_ecb);
        }
    }




    static if(!is(typeof(SN_aes_128_cbc))) {
        private enum enumMixinStr_SN_aes_128_cbc = `enum SN_aes_128_cbc = "AES-128-CBC";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_aes_128_cbc); }))) {
            mixin(enumMixinStr_SN_aes_128_cbc);
        }
    }




    static if(!is(typeof(LN_aes_128_cbc))) {
        private enum enumMixinStr_LN_aes_128_cbc = `enum LN_aes_128_cbc = "aes-128-cbc";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_aes_128_cbc); }))) {
            mixin(enumMixinStr_LN_aes_128_cbc);
        }
    }




    static if(!is(typeof(NID_aes_128_cbc))) {
        private enum enumMixinStr_NID_aes_128_cbc = `enum NID_aes_128_cbc = 419;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_aes_128_cbc); }))) {
            mixin(enumMixinStr_NID_aes_128_cbc);
        }
    }




    static if(!is(typeof(OBJ_aes_128_cbc))) {
        private enum enumMixinStr_OBJ_aes_128_cbc = `enum OBJ_aes_128_cbc = 2L , 16L , 840L , 1L , 101L , 3L , 4L , 1L , 2L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_aes_128_cbc); }))) {
            mixin(enumMixinStr_OBJ_aes_128_cbc);
        }
    }




    static if(!is(typeof(SN_aes_128_ofb128))) {
        private enum enumMixinStr_SN_aes_128_ofb128 = `enum SN_aes_128_ofb128 = "AES-128-OFB";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_aes_128_ofb128); }))) {
            mixin(enumMixinStr_SN_aes_128_ofb128);
        }
    }




    static if(!is(typeof(LN_aes_128_ofb128))) {
        private enum enumMixinStr_LN_aes_128_ofb128 = `enum LN_aes_128_ofb128 = "aes-128-ofb";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_aes_128_ofb128); }))) {
            mixin(enumMixinStr_LN_aes_128_ofb128);
        }
    }




    static if(!is(typeof(NID_aes_128_ofb128))) {
        private enum enumMixinStr_NID_aes_128_ofb128 = `enum NID_aes_128_ofb128 = 420;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_aes_128_ofb128); }))) {
            mixin(enumMixinStr_NID_aes_128_ofb128);
        }
    }




    static if(!is(typeof(OBJ_aes_128_ofb128))) {
        private enum enumMixinStr_OBJ_aes_128_ofb128 = `enum OBJ_aes_128_ofb128 = 2L , 16L , 840L , 1L , 101L , 3L , 4L , 1L , 3L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_aes_128_ofb128); }))) {
            mixin(enumMixinStr_OBJ_aes_128_ofb128);
        }
    }




    static if(!is(typeof(SN_aes_128_cfb128))) {
        private enum enumMixinStr_SN_aes_128_cfb128 = `enum SN_aes_128_cfb128 = "AES-128-CFB";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_aes_128_cfb128); }))) {
            mixin(enumMixinStr_SN_aes_128_cfb128);
        }
    }




    static if(!is(typeof(LN_aes_128_cfb128))) {
        private enum enumMixinStr_LN_aes_128_cfb128 = `enum LN_aes_128_cfb128 = "aes-128-cfb";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_aes_128_cfb128); }))) {
            mixin(enumMixinStr_LN_aes_128_cfb128);
        }
    }




    static if(!is(typeof(NID_aes_128_cfb128))) {
        private enum enumMixinStr_NID_aes_128_cfb128 = `enum NID_aes_128_cfb128 = 421;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_aes_128_cfb128); }))) {
            mixin(enumMixinStr_NID_aes_128_cfb128);
        }
    }




    static if(!is(typeof(OBJ_aes_128_cfb128))) {
        private enum enumMixinStr_OBJ_aes_128_cfb128 = `enum OBJ_aes_128_cfb128 = 2L , 16L , 840L , 1L , 101L , 3L , 4L , 1L , 4L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_aes_128_cfb128); }))) {
            mixin(enumMixinStr_OBJ_aes_128_cfb128);
        }
    }




    static if(!is(typeof(SN_id_aes128_wrap))) {
        private enum enumMixinStr_SN_id_aes128_wrap = `enum SN_id_aes128_wrap = "id-aes128-wrap";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_aes128_wrap); }))) {
            mixin(enumMixinStr_SN_id_aes128_wrap);
        }
    }




    static if(!is(typeof(NID_id_aes128_wrap))) {
        private enum enumMixinStr_NID_id_aes128_wrap = `enum NID_id_aes128_wrap = 788;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_aes128_wrap); }))) {
            mixin(enumMixinStr_NID_id_aes128_wrap);
        }
    }




    static if(!is(typeof(OBJ_id_aes128_wrap))) {
        private enum enumMixinStr_OBJ_id_aes128_wrap = `enum OBJ_id_aes128_wrap = 2L , 16L , 840L , 1L , 101L , 3L , 4L , 1L , 5L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_aes128_wrap); }))) {
            mixin(enumMixinStr_OBJ_id_aes128_wrap);
        }
    }




    static if(!is(typeof(SN_aes_128_gcm))) {
        private enum enumMixinStr_SN_aes_128_gcm = `enum SN_aes_128_gcm = "id-aes128-GCM";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_aes_128_gcm); }))) {
            mixin(enumMixinStr_SN_aes_128_gcm);
        }
    }




    static if(!is(typeof(LN_aes_128_gcm))) {
        private enum enumMixinStr_LN_aes_128_gcm = `enum LN_aes_128_gcm = "aes-128-gcm";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_aes_128_gcm); }))) {
            mixin(enumMixinStr_LN_aes_128_gcm);
        }
    }




    static if(!is(typeof(NID_aes_128_gcm))) {
        private enum enumMixinStr_NID_aes_128_gcm = `enum NID_aes_128_gcm = 895;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_aes_128_gcm); }))) {
            mixin(enumMixinStr_NID_aes_128_gcm);
        }
    }




    static if(!is(typeof(OBJ_aes_128_gcm))) {
        private enum enumMixinStr_OBJ_aes_128_gcm = `enum OBJ_aes_128_gcm = 2L , 16L , 840L , 1L , 101L , 3L , 4L , 1L , 6L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_aes_128_gcm); }))) {
            mixin(enumMixinStr_OBJ_aes_128_gcm);
        }
    }




    static if(!is(typeof(SN_aes_128_ccm))) {
        private enum enumMixinStr_SN_aes_128_ccm = `enum SN_aes_128_ccm = "id-aes128-CCM";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_aes_128_ccm); }))) {
            mixin(enumMixinStr_SN_aes_128_ccm);
        }
    }




    static if(!is(typeof(LN_aes_128_ccm))) {
        private enum enumMixinStr_LN_aes_128_ccm = `enum LN_aes_128_ccm = "aes-128-ccm";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_aes_128_ccm); }))) {
            mixin(enumMixinStr_LN_aes_128_ccm);
        }
    }




    static if(!is(typeof(NID_aes_128_ccm))) {
        private enum enumMixinStr_NID_aes_128_ccm = `enum NID_aes_128_ccm = 896;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_aes_128_ccm); }))) {
            mixin(enumMixinStr_NID_aes_128_ccm);
        }
    }




    static if(!is(typeof(OBJ_aes_128_ccm))) {
        private enum enumMixinStr_OBJ_aes_128_ccm = `enum OBJ_aes_128_ccm = 2L , 16L , 840L , 1L , 101L , 3L , 4L , 1L , 7L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_aes_128_ccm); }))) {
            mixin(enumMixinStr_OBJ_aes_128_ccm);
        }
    }




    static if(!is(typeof(SN_id_aes128_wrap_pad))) {
        private enum enumMixinStr_SN_id_aes128_wrap_pad = `enum SN_id_aes128_wrap_pad = "id-aes128-wrap-pad";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_aes128_wrap_pad); }))) {
            mixin(enumMixinStr_SN_id_aes128_wrap_pad);
        }
    }




    static if(!is(typeof(NID_id_aes128_wrap_pad))) {
        private enum enumMixinStr_NID_id_aes128_wrap_pad = `enum NID_id_aes128_wrap_pad = 897;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_aes128_wrap_pad); }))) {
            mixin(enumMixinStr_NID_id_aes128_wrap_pad);
        }
    }




    static if(!is(typeof(OBJ_id_aes128_wrap_pad))) {
        private enum enumMixinStr_OBJ_id_aes128_wrap_pad = `enum OBJ_id_aes128_wrap_pad = 2L , 16L , 840L , 1L , 101L , 3L , 4L , 1L , 8L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_aes128_wrap_pad); }))) {
            mixin(enumMixinStr_OBJ_id_aes128_wrap_pad);
        }
    }




    static if(!is(typeof(SN_aes_192_ecb))) {
        private enum enumMixinStr_SN_aes_192_ecb = `enum SN_aes_192_ecb = "AES-192-ECB";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_aes_192_ecb); }))) {
            mixin(enumMixinStr_SN_aes_192_ecb);
        }
    }




    static if(!is(typeof(LN_aes_192_ecb))) {
        private enum enumMixinStr_LN_aes_192_ecb = `enum LN_aes_192_ecb = "aes-192-ecb";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_aes_192_ecb); }))) {
            mixin(enumMixinStr_LN_aes_192_ecb);
        }
    }




    static if(!is(typeof(NID_aes_192_ecb))) {
        private enum enumMixinStr_NID_aes_192_ecb = `enum NID_aes_192_ecb = 422;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_aes_192_ecb); }))) {
            mixin(enumMixinStr_NID_aes_192_ecb);
        }
    }




    static if(!is(typeof(OBJ_aes_192_ecb))) {
        private enum enumMixinStr_OBJ_aes_192_ecb = `enum OBJ_aes_192_ecb = 2L , 16L , 840L , 1L , 101L , 3L , 4L , 1L , 21L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_aes_192_ecb); }))) {
            mixin(enumMixinStr_OBJ_aes_192_ecb);
        }
    }




    static if(!is(typeof(SN_aes_192_cbc))) {
        private enum enumMixinStr_SN_aes_192_cbc = `enum SN_aes_192_cbc = "AES-192-CBC";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_aes_192_cbc); }))) {
            mixin(enumMixinStr_SN_aes_192_cbc);
        }
    }




    static if(!is(typeof(LN_aes_192_cbc))) {
        private enum enumMixinStr_LN_aes_192_cbc = `enum LN_aes_192_cbc = "aes-192-cbc";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_aes_192_cbc); }))) {
            mixin(enumMixinStr_LN_aes_192_cbc);
        }
    }




    static if(!is(typeof(NID_aes_192_cbc))) {
        private enum enumMixinStr_NID_aes_192_cbc = `enum NID_aes_192_cbc = 423;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_aes_192_cbc); }))) {
            mixin(enumMixinStr_NID_aes_192_cbc);
        }
    }




    static if(!is(typeof(OBJ_aes_192_cbc))) {
        private enum enumMixinStr_OBJ_aes_192_cbc = `enum OBJ_aes_192_cbc = 2L , 16L , 840L , 1L , 101L , 3L , 4L , 1L , 22L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_aes_192_cbc); }))) {
            mixin(enumMixinStr_OBJ_aes_192_cbc);
        }
    }




    static if(!is(typeof(SN_aes_192_ofb128))) {
        private enum enumMixinStr_SN_aes_192_ofb128 = `enum SN_aes_192_ofb128 = "AES-192-OFB";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_aes_192_ofb128); }))) {
            mixin(enumMixinStr_SN_aes_192_ofb128);
        }
    }




    static if(!is(typeof(LN_aes_192_ofb128))) {
        private enum enumMixinStr_LN_aes_192_ofb128 = `enum LN_aes_192_ofb128 = "aes-192-ofb";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_aes_192_ofb128); }))) {
            mixin(enumMixinStr_LN_aes_192_ofb128);
        }
    }




    static if(!is(typeof(NID_aes_192_ofb128))) {
        private enum enumMixinStr_NID_aes_192_ofb128 = `enum NID_aes_192_ofb128 = 424;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_aes_192_ofb128); }))) {
            mixin(enumMixinStr_NID_aes_192_ofb128);
        }
    }




    static if(!is(typeof(OBJ_aes_192_ofb128))) {
        private enum enumMixinStr_OBJ_aes_192_ofb128 = `enum OBJ_aes_192_ofb128 = 2L , 16L , 840L , 1L , 101L , 3L , 4L , 1L , 23L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_aes_192_ofb128); }))) {
            mixin(enumMixinStr_OBJ_aes_192_ofb128);
        }
    }




    static if(!is(typeof(SN_aes_192_cfb128))) {
        private enum enumMixinStr_SN_aes_192_cfb128 = `enum SN_aes_192_cfb128 = "AES-192-CFB";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_aes_192_cfb128); }))) {
            mixin(enumMixinStr_SN_aes_192_cfb128);
        }
    }




    static if(!is(typeof(LN_aes_192_cfb128))) {
        private enum enumMixinStr_LN_aes_192_cfb128 = `enum LN_aes_192_cfb128 = "aes-192-cfb";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_aes_192_cfb128); }))) {
            mixin(enumMixinStr_LN_aes_192_cfb128);
        }
    }




    static if(!is(typeof(NID_aes_192_cfb128))) {
        private enum enumMixinStr_NID_aes_192_cfb128 = `enum NID_aes_192_cfb128 = 425;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_aes_192_cfb128); }))) {
            mixin(enumMixinStr_NID_aes_192_cfb128);
        }
    }




    static if(!is(typeof(OBJ_aes_192_cfb128))) {
        private enum enumMixinStr_OBJ_aes_192_cfb128 = `enum OBJ_aes_192_cfb128 = 2L , 16L , 840L , 1L , 101L , 3L , 4L , 1L , 24L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_aes_192_cfb128); }))) {
            mixin(enumMixinStr_OBJ_aes_192_cfb128);
        }
    }




    static if(!is(typeof(SN_id_aes192_wrap))) {
        private enum enumMixinStr_SN_id_aes192_wrap = `enum SN_id_aes192_wrap = "id-aes192-wrap";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_aes192_wrap); }))) {
            mixin(enumMixinStr_SN_id_aes192_wrap);
        }
    }




    static if(!is(typeof(NID_id_aes192_wrap))) {
        private enum enumMixinStr_NID_id_aes192_wrap = `enum NID_id_aes192_wrap = 789;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_aes192_wrap); }))) {
            mixin(enumMixinStr_NID_id_aes192_wrap);
        }
    }




    static if(!is(typeof(OBJ_id_aes192_wrap))) {
        private enum enumMixinStr_OBJ_id_aes192_wrap = `enum OBJ_id_aes192_wrap = 2L , 16L , 840L , 1L , 101L , 3L , 4L , 1L , 25L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_aes192_wrap); }))) {
            mixin(enumMixinStr_OBJ_id_aes192_wrap);
        }
    }




    static if(!is(typeof(SN_aes_192_gcm))) {
        private enum enumMixinStr_SN_aes_192_gcm = `enum SN_aes_192_gcm = "id-aes192-GCM";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_aes_192_gcm); }))) {
            mixin(enumMixinStr_SN_aes_192_gcm);
        }
    }




    static if(!is(typeof(LN_aes_192_gcm))) {
        private enum enumMixinStr_LN_aes_192_gcm = `enum LN_aes_192_gcm = "aes-192-gcm";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_aes_192_gcm); }))) {
            mixin(enumMixinStr_LN_aes_192_gcm);
        }
    }




    static if(!is(typeof(NID_aes_192_gcm))) {
        private enum enumMixinStr_NID_aes_192_gcm = `enum NID_aes_192_gcm = 898;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_aes_192_gcm); }))) {
            mixin(enumMixinStr_NID_aes_192_gcm);
        }
    }




    static if(!is(typeof(OBJ_aes_192_gcm))) {
        private enum enumMixinStr_OBJ_aes_192_gcm = `enum OBJ_aes_192_gcm = 2L , 16L , 840L , 1L , 101L , 3L , 4L , 1L , 26L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_aes_192_gcm); }))) {
            mixin(enumMixinStr_OBJ_aes_192_gcm);
        }
    }




    static if(!is(typeof(SN_aes_192_ccm))) {
        private enum enumMixinStr_SN_aes_192_ccm = `enum SN_aes_192_ccm = "id-aes192-CCM";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_aes_192_ccm); }))) {
            mixin(enumMixinStr_SN_aes_192_ccm);
        }
    }




    static if(!is(typeof(LN_aes_192_ccm))) {
        private enum enumMixinStr_LN_aes_192_ccm = `enum LN_aes_192_ccm = "aes-192-ccm";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_aes_192_ccm); }))) {
            mixin(enumMixinStr_LN_aes_192_ccm);
        }
    }




    static if(!is(typeof(NID_aes_192_ccm))) {
        private enum enumMixinStr_NID_aes_192_ccm = `enum NID_aes_192_ccm = 899;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_aes_192_ccm); }))) {
            mixin(enumMixinStr_NID_aes_192_ccm);
        }
    }




    static if(!is(typeof(OBJ_aes_192_ccm))) {
        private enum enumMixinStr_OBJ_aes_192_ccm = `enum OBJ_aes_192_ccm = 2L , 16L , 840L , 1L , 101L , 3L , 4L , 1L , 27L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_aes_192_ccm); }))) {
            mixin(enumMixinStr_OBJ_aes_192_ccm);
        }
    }




    static if(!is(typeof(SN_id_aes192_wrap_pad))) {
        private enum enumMixinStr_SN_id_aes192_wrap_pad = `enum SN_id_aes192_wrap_pad = "id-aes192-wrap-pad";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_aes192_wrap_pad); }))) {
            mixin(enumMixinStr_SN_id_aes192_wrap_pad);
        }
    }




    static if(!is(typeof(NID_id_aes192_wrap_pad))) {
        private enum enumMixinStr_NID_id_aes192_wrap_pad = `enum NID_id_aes192_wrap_pad = 900;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_aes192_wrap_pad); }))) {
            mixin(enumMixinStr_NID_id_aes192_wrap_pad);
        }
    }




    static if(!is(typeof(OBJ_id_aes192_wrap_pad))) {
        private enum enumMixinStr_OBJ_id_aes192_wrap_pad = `enum OBJ_id_aes192_wrap_pad = 2L , 16L , 840L , 1L , 101L , 3L , 4L , 1L , 28L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_aes192_wrap_pad); }))) {
            mixin(enumMixinStr_OBJ_id_aes192_wrap_pad);
        }
    }




    static if(!is(typeof(SN_aes_256_ecb))) {
        private enum enumMixinStr_SN_aes_256_ecb = `enum SN_aes_256_ecb = "AES-256-ECB";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_aes_256_ecb); }))) {
            mixin(enumMixinStr_SN_aes_256_ecb);
        }
    }




    static if(!is(typeof(LN_aes_256_ecb))) {
        private enum enumMixinStr_LN_aes_256_ecb = `enum LN_aes_256_ecb = "aes-256-ecb";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_aes_256_ecb); }))) {
            mixin(enumMixinStr_LN_aes_256_ecb);
        }
    }




    static if(!is(typeof(NID_aes_256_ecb))) {
        private enum enumMixinStr_NID_aes_256_ecb = `enum NID_aes_256_ecb = 426;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_aes_256_ecb); }))) {
            mixin(enumMixinStr_NID_aes_256_ecb);
        }
    }




    static if(!is(typeof(OBJ_aes_256_ecb))) {
        private enum enumMixinStr_OBJ_aes_256_ecb = `enum OBJ_aes_256_ecb = 2L , 16L , 840L , 1L , 101L , 3L , 4L , 1L , 41L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_aes_256_ecb); }))) {
            mixin(enumMixinStr_OBJ_aes_256_ecb);
        }
    }




    static if(!is(typeof(SN_aes_256_cbc))) {
        private enum enumMixinStr_SN_aes_256_cbc = `enum SN_aes_256_cbc = "AES-256-CBC";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_aes_256_cbc); }))) {
            mixin(enumMixinStr_SN_aes_256_cbc);
        }
    }




    static if(!is(typeof(LN_aes_256_cbc))) {
        private enum enumMixinStr_LN_aes_256_cbc = `enum LN_aes_256_cbc = "aes-256-cbc";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_aes_256_cbc); }))) {
            mixin(enumMixinStr_LN_aes_256_cbc);
        }
    }




    static if(!is(typeof(NID_aes_256_cbc))) {
        private enum enumMixinStr_NID_aes_256_cbc = `enum NID_aes_256_cbc = 427;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_aes_256_cbc); }))) {
            mixin(enumMixinStr_NID_aes_256_cbc);
        }
    }




    static if(!is(typeof(OBJ_aes_256_cbc))) {
        private enum enumMixinStr_OBJ_aes_256_cbc = `enum OBJ_aes_256_cbc = 2L , 16L , 840L , 1L , 101L , 3L , 4L , 1L , 42L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_aes_256_cbc); }))) {
            mixin(enumMixinStr_OBJ_aes_256_cbc);
        }
    }




    static if(!is(typeof(SN_aes_256_ofb128))) {
        private enum enumMixinStr_SN_aes_256_ofb128 = `enum SN_aes_256_ofb128 = "AES-256-OFB";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_aes_256_ofb128); }))) {
            mixin(enumMixinStr_SN_aes_256_ofb128);
        }
    }




    static if(!is(typeof(LN_aes_256_ofb128))) {
        private enum enumMixinStr_LN_aes_256_ofb128 = `enum LN_aes_256_ofb128 = "aes-256-ofb";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_aes_256_ofb128); }))) {
            mixin(enumMixinStr_LN_aes_256_ofb128);
        }
    }




    static if(!is(typeof(NID_aes_256_ofb128))) {
        private enum enumMixinStr_NID_aes_256_ofb128 = `enum NID_aes_256_ofb128 = 428;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_aes_256_ofb128); }))) {
            mixin(enumMixinStr_NID_aes_256_ofb128);
        }
    }




    static if(!is(typeof(OBJ_aes_256_ofb128))) {
        private enum enumMixinStr_OBJ_aes_256_ofb128 = `enum OBJ_aes_256_ofb128 = 2L , 16L , 840L , 1L , 101L , 3L , 4L , 1L , 43L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_aes_256_ofb128); }))) {
            mixin(enumMixinStr_OBJ_aes_256_ofb128);
        }
    }




    static if(!is(typeof(SN_aes_256_cfb128))) {
        private enum enumMixinStr_SN_aes_256_cfb128 = `enum SN_aes_256_cfb128 = "AES-256-CFB";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_aes_256_cfb128); }))) {
            mixin(enumMixinStr_SN_aes_256_cfb128);
        }
    }




    static if(!is(typeof(LN_aes_256_cfb128))) {
        private enum enumMixinStr_LN_aes_256_cfb128 = `enum LN_aes_256_cfb128 = "aes-256-cfb";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_aes_256_cfb128); }))) {
            mixin(enumMixinStr_LN_aes_256_cfb128);
        }
    }




    static if(!is(typeof(NID_aes_256_cfb128))) {
        private enum enumMixinStr_NID_aes_256_cfb128 = `enum NID_aes_256_cfb128 = 429;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_aes_256_cfb128); }))) {
            mixin(enumMixinStr_NID_aes_256_cfb128);
        }
    }




    static if(!is(typeof(OBJ_aes_256_cfb128))) {
        private enum enumMixinStr_OBJ_aes_256_cfb128 = `enum OBJ_aes_256_cfb128 = 2L , 16L , 840L , 1L , 101L , 3L , 4L , 1L , 44L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_aes_256_cfb128); }))) {
            mixin(enumMixinStr_OBJ_aes_256_cfb128);
        }
    }




    static if(!is(typeof(SN_id_aes256_wrap))) {
        private enum enumMixinStr_SN_id_aes256_wrap = `enum SN_id_aes256_wrap = "id-aes256-wrap";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_aes256_wrap); }))) {
            mixin(enumMixinStr_SN_id_aes256_wrap);
        }
    }




    static if(!is(typeof(NID_id_aes256_wrap))) {
        private enum enumMixinStr_NID_id_aes256_wrap = `enum NID_id_aes256_wrap = 790;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_aes256_wrap); }))) {
            mixin(enumMixinStr_NID_id_aes256_wrap);
        }
    }




    static if(!is(typeof(OBJ_id_aes256_wrap))) {
        private enum enumMixinStr_OBJ_id_aes256_wrap = `enum OBJ_id_aes256_wrap = 2L , 16L , 840L , 1L , 101L , 3L , 4L , 1L , 45L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_aes256_wrap); }))) {
            mixin(enumMixinStr_OBJ_id_aes256_wrap);
        }
    }




    static if(!is(typeof(SN_aes_256_gcm))) {
        private enum enumMixinStr_SN_aes_256_gcm = `enum SN_aes_256_gcm = "id-aes256-GCM";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_aes_256_gcm); }))) {
            mixin(enumMixinStr_SN_aes_256_gcm);
        }
    }




    static if(!is(typeof(LN_aes_256_gcm))) {
        private enum enumMixinStr_LN_aes_256_gcm = `enum LN_aes_256_gcm = "aes-256-gcm";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_aes_256_gcm); }))) {
            mixin(enumMixinStr_LN_aes_256_gcm);
        }
    }




    static if(!is(typeof(NID_aes_256_gcm))) {
        private enum enumMixinStr_NID_aes_256_gcm = `enum NID_aes_256_gcm = 901;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_aes_256_gcm); }))) {
            mixin(enumMixinStr_NID_aes_256_gcm);
        }
    }




    static if(!is(typeof(OBJ_aes_256_gcm))) {
        private enum enumMixinStr_OBJ_aes_256_gcm = `enum OBJ_aes_256_gcm = 2L , 16L , 840L , 1L , 101L , 3L , 4L , 1L , 46L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_aes_256_gcm); }))) {
            mixin(enumMixinStr_OBJ_aes_256_gcm);
        }
    }




    static if(!is(typeof(SN_aes_256_ccm))) {
        private enum enumMixinStr_SN_aes_256_ccm = `enum SN_aes_256_ccm = "id-aes256-CCM";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_aes_256_ccm); }))) {
            mixin(enumMixinStr_SN_aes_256_ccm);
        }
    }




    static if(!is(typeof(LN_aes_256_ccm))) {
        private enum enumMixinStr_LN_aes_256_ccm = `enum LN_aes_256_ccm = "aes-256-ccm";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_aes_256_ccm); }))) {
            mixin(enumMixinStr_LN_aes_256_ccm);
        }
    }




    static if(!is(typeof(NID_aes_256_ccm))) {
        private enum enumMixinStr_NID_aes_256_ccm = `enum NID_aes_256_ccm = 902;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_aes_256_ccm); }))) {
            mixin(enumMixinStr_NID_aes_256_ccm);
        }
    }




    static if(!is(typeof(OBJ_aes_256_ccm))) {
        private enum enumMixinStr_OBJ_aes_256_ccm = `enum OBJ_aes_256_ccm = 2L , 16L , 840L , 1L , 101L , 3L , 4L , 1L , 47L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_aes_256_ccm); }))) {
            mixin(enumMixinStr_OBJ_aes_256_ccm);
        }
    }




    static if(!is(typeof(SN_id_aes256_wrap_pad))) {
        private enum enumMixinStr_SN_id_aes256_wrap_pad = `enum SN_id_aes256_wrap_pad = "id-aes256-wrap-pad";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_aes256_wrap_pad); }))) {
            mixin(enumMixinStr_SN_id_aes256_wrap_pad);
        }
    }




    static if(!is(typeof(NID_id_aes256_wrap_pad))) {
        private enum enumMixinStr_NID_id_aes256_wrap_pad = `enum NID_id_aes256_wrap_pad = 903;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_aes256_wrap_pad); }))) {
            mixin(enumMixinStr_NID_id_aes256_wrap_pad);
        }
    }




    static if(!is(typeof(OBJ_id_aes256_wrap_pad))) {
        private enum enumMixinStr_OBJ_id_aes256_wrap_pad = `enum OBJ_id_aes256_wrap_pad = 2L , 16L , 840L , 1L , 101L , 3L , 4L , 1L , 48L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_aes256_wrap_pad); }))) {
            mixin(enumMixinStr_OBJ_id_aes256_wrap_pad);
        }
    }




    static if(!is(typeof(SN_aes_128_xts))) {
        private enum enumMixinStr_SN_aes_128_xts = `enum SN_aes_128_xts = "AES-128-XTS";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_aes_128_xts); }))) {
            mixin(enumMixinStr_SN_aes_128_xts);
        }
    }




    static if(!is(typeof(LN_aes_128_xts))) {
        private enum enumMixinStr_LN_aes_128_xts = `enum LN_aes_128_xts = "aes-128-xts";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_aes_128_xts); }))) {
            mixin(enumMixinStr_LN_aes_128_xts);
        }
    }




    static if(!is(typeof(NID_aes_128_xts))) {
        private enum enumMixinStr_NID_aes_128_xts = `enum NID_aes_128_xts = 913;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_aes_128_xts); }))) {
            mixin(enumMixinStr_NID_aes_128_xts);
        }
    }




    static if(!is(typeof(OBJ_aes_128_xts))) {
        private enum enumMixinStr_OBJ_aes_128_xts = `enum OBJ_aes_128_xts = 1L , 3L , 111L , 2L , 1619L , 0L , 1L , 1L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_aes_128_xts); }))) {
            mixin(enumMixinStr_OBJ_aes_128_xts);
        }
    }




    static if(!is(typeof(SN_aes_256_xts))) {
        private enum enumMixinStr_SN_aes_256_xts = `enum SN_aes_256_xts = "AES-256-XTS";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_aes_256_xts); }))) {
            mixin(enumMixinStr_SN_aes_256_xts);
        }
    }




    static if(!is(typeof(LN_aes_256_xts))) {
        private enum enumMixinStr_LN_aes_256_xts = `enum LN_aes_256_xts = "aes-256-xts";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_aes_256_xts); }))) {
            mixin(enumMixinStr_LN_aes_256_xts);
        }
    }




    static if(!is(typeof(NID_aes_256_xts))) {
        private enum enumMixinStr_NID_aes_256_xts = `enum NID_aes_256_xts = 914;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_aes_256_xts); }))) {
            mixin(enumMixinStr_NID_aes_256_xts);
        }
    }




    static if(!is(typeof(OBJ_aes_256_xts))) {
        private enum enumMixinStr_OBJ_aes_256_xts = `enum OBJ_aes_256_xts = 1L , 3L , 111L , 2L , 1619L , 0L , 1L , 2L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_aes_256_xts); }))) {
            mixin(enumMixinStr_OBJ_aes_256_xts);
        }
    }




    static if(!is(typeof(SN_aes_128_cfb1))) {
        private enum enumMixinStr_SN_aes_128_cfb1 = `enum SN_aes_128_cfb1 = "AES-128-CFB1";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_aes_128_cfb1); }))) {
            mixin(enumMixinStr_SN_aes_128_cfb1);
        }
    }




    static if(!is(typeof(LN_aes_128_cfb1))) {
        private enum enumMixinStr_LN_aes_128_cfb1 = `enum LN_aes_128_cfb1 = "aes-128-cfb1";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_aes_128_cfb1); }))) {
            mixin(enumMixinStr_LN_aes_128_cfb1);
        }
    }




    static if(!is(typeof(NID_aes_128_cfb1))) {
        private enum enumMixinStr_NID_aes_128_cfb1 = `enum NID_aes_128_cfb1 = 650;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_aes_128_cfb1); }))) {
            mixin(enumMixinStr_NID_aes_128_cfb1);
        }
    }




    static if(!is(typeof(SN_aes_192_cfb1))) {
        private enum enumMixinStr_SN_aes_192_cfb1 = `enum SN_aes_192_cfb1 = "AES-192-CFB1";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_aes_192_cfb1); }))) {
            mixin(enumMixinStr_SN_aes_192_cfb1);
        }
    }




    static if(!is(typeof(LN_aes_192_cfb1))) {
        private enum enumMixinStr_LN_aes_192_cfb1 = `enum LN_aes_192_cfb1 = "aes-192-cfb1";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_aes_192_cfb1); }))) {
            mixin(enumMixinStr_LN_aes_192_cfb1);
        }
    }




    static if(!is(typeof(NID_aes_192_cfb1))) {
        private enum enumMixinStr_NID_aes_192_cfb1 = `enum NID_aes_192_cfb1 = 651;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_aes_192_cfb1); }))) {
            mixin(enumMixinStr_NID_aes_192_cfb1);
        }
    }




    static if(!is(typeof(SN_aes_256_cfb1))) {
        private enum enumMixinStr_SN_aes_256_cfb1 = `enum SN_aes_256_cfb1 = "AES-256-CFB1";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_aes_256_cfb1); }))) {
            mixin(enumMixinStr_SN_aes_256_cfb1);
        }
    }




    static if(!is(typeof(LN_aes_256_cfb1))) {
        private enum enumMixinStr_LN_aes_256_cfb1 = `enum LN_aes_256_cfb1 = "aes-256-cfb1";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_aes_256_cfb1); }))) {
            mixin(enumMixinStr_LN_aes_256_cfb1);
        }
    }




    static if(!is(typeof(NID_aes_256_cfb1))) {
        private enum enumMixinStr_NID_aes_256_cfb1 = `enum NID_aes_256_cfb1 = 652;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_aes_256_cfb1); }))) {
            mixin(enumMixinStr_NID_aes_256_cfb1);
        }
    }




    static if(!is(typeof(SN_aes_128_cfb8))) {
        private enum enumMixinStr_SN_aes_128_cfb8 = `enum SN_aes_128_cfb8 = "AES-128-CFB8";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_aes_128_cfb8); }))) {
            mixin(enumMixinStr_SN_aes_128_cfb8);
        }
    }




    static if(!is(typeof(LN_aes_128_cfb8))) {
        private enum enumMixinStr_LN_aes_128_cfb8 = `enum LN_aes_128_cfb8 = "aes-128-cfb8";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_aes_128_cfb8); }))) {
            mixin(enumMixinStr_LN_aes_128_cfb8);
        }
    }




    static if(!is(typeof(NID_aes_128_cfb8))) {
        private enum enumMixinStr_NID_aes_128_cfb8 = `enum NID_aes_128_cfb8 = 653;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_aes_128_cfb8); }))) {
            mixin(enumMixinStr_NID_aes_128_cfb8);
        }
    }




    static if(!is(typeof(SN_aes_192_cfb8))) {
        private enum enumMixinStr_SN_aes_192_cfb8 = `enum SN_aes_192_cfb8 = "AES-192-CFB8";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_aes_192_cfb8); }))) {
            mixin(enumMixinStr_SN_aes_192_cfb8);
        }
    }




    static if(!is(typeof(LN_aes_192_cfb8))) {
        private enum enumMixinStr_LN_aes_192_cfb8 = `enum LN_aes_192_cfb8 = "aes-192-cfb8";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_aes_192_cfb8); }))) {
            mixin(enumMixinStr_LN_aes_192_cfb8);
        }
    }




    static if(!is(typeof(NID_aes_192_cfb8))) {
        private enum enumMixinStr_NID_aes_192_cfb8 = `enum NID_aes_192_cfb8 = 654;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_aes_192_cfb8); }))) {
            mixin(enumMixinStr_NID_aes_192_cfb8);
        }
    }




    static if(!is(typeof(SN_aes_256_cfb8))) {
        private enum enumMixinStr_SN_aes_256_cfb8 = `enum SN_aes_256_cfb8 = "AES-256-CFB8";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_aes_256_cfb8); }))) {
            mixin(enumMixinStr_SN_aes_256_cfb8);
        }
    }




    static if(!is(typeof(LN_aes_256_cfb8))) {
        private enum enumMixinStr_LN_aes_256_cfb8 = `enum LN_aes_256_cfb8 = "aes-256-cfb8";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_aes_256_cfb8); }))) {
            mixin(enumMixinStr_LN_aes_256_cfb8);
        }
    }




    static if(!is(typeof(NID_aes_256_cfb8))) {
        private enum enumMixinStr_NID_aes_256_cfb8 = `enum NID_aes_256_cfb8 = 655;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_aes_256_cfb8); }))) {
            mixin(enumMixinStr_NID_aes_256_cfb8);
        }
    }




    static if(!is(typeof(SN_aes_128_ctr))) {
        private enum enumMixinStr_SN_aes_128_ctr = `enum SN_aes_128_ctr = "AES-128-CTR";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_aes_128_ctr); }))) {
            mixin(enumMixinStr_SN_aes_128_ctr);
        }
    }




    static if(!is(typeof(LN_aes_128_ctr))) {
        private enum enumMixinStr_LN_aes_128_ctr = `enum LN_aes_128_ctr = "aes-128-ctr";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_aes_128_ctr); }))) {
            mixin(enumMixinStr_LN_aes_128_ctr);
        }
    }




    static if(!is(typeof(NID_aes_128_ctr))) {
        private enum enumMixinStr_NID_aes_128_ctr = `enum NID_aes_128_ctr = 904;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_aes_128_ctr); }))) {
            mixin(enumMixinStr_NID_aes_128_ctr);
        }
    }




    static if(!is(typeof(SN_aes_192_ctr))) {
        private enum enumMixinStr_SN_aes_192_ctr = `enum SN_aes_192_ctr = "AES-192-CTR";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_aes_192_ctr); }))) {
            mixin(enumMixinStr_SN_aes_192_ctr);
        }
    }




    static if(!is(typeof(LN_aes_192_ctr))) {
        private enum enumMixinStr_LN_aes_192_ctr = `enum LN_aes_192_ctr = "aes-192-ctr";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_aes_192_ctr); }))) {
            mixin(enumMixinStr_LN_aes_192_ctr);
        }
    }




    static if(!is(typeof(NID_aes_192_ctr))) {
        private enum enumMixinStr_NID_aes_192_ctr = `enum NID_aes_192_ctr = 905;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_aes_192_ctr); }))) {
            mixin(enumMixinStr_NID_aes_192_ctr);
        }
    }




    static if(!is(typeof(SN_aes_256_ctr))) {
        private enum enumMixinStr_SN_aes_256_ctr = `enum SN_aes_256_ctr = "AES-256-CTR";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_aes_256_ctr); }))) {
            mixin(enumMixinStr_SN_aes_256_ctr);
        }
    }




    static if(!is(typeof(LN_aes_256_ctr))) {
        private enum enumMixinStr_LN_aes_256_ctr = `enum LN_aes_256_ctr = "aes-256-ctr";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_aes_256_ctr); }))) {
            mixin(enumMixinStr_LN_aes_256_ctr);
        }
    }




    static if(!is(typeof(NID_aes_256_ctr))) {
        private enum enumMixinStr_NID_aes_256_ctr = `enum NID_aes_256_ctr = 906;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_aes_256_ctr); }))) {
            mixin(enumMixinStr_NID_aes_256_ctr);
        }
    }




    static if(!is(typeof(SN_aes_128_ocb))) {
        private enum enumMixinStr_SN_aes_128_ocb = `enum SN_aes_128_ocb = "AES-128-OCB";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_aes_128_ocb); }))) {
            mixin(enumMixinStr_SN_aes_128_ocb);
        }
    }




    static if(!is(typeof(LN_aes_128_ocb))) {
        private enum enumMixinStr_LN_aes_128_ocb = `enum LN_aes_128_ocb = "aes-128-ocb";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_aes_128_ocb); }))) {
            mixin(enumMixinStr_LN_aes_128_ocb);
        }
    }




    static if(!is(typeof(NID_aes_128_ocb))) {
        private enum enumMixinStr_NID_aes_128_ocb = `enum NID_aes_128_ocb = 958;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_aes_128_ocb); }))) {
            mixin(enumMixinStr_NID_aes_128_ocb);
        }
    }




    static if(!is(typeof(SN_aes_192_ocb))) {
        private enum enumMixinStr_SN_aes_192_ocb = `enum SN_aes_192_ocb = "AES-192-OCB";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_aes_192_ocb); }))) {
            mixin(enumMixinStr_SN_aes_192_ocb);
        }
    }




    static if(!is(typeof(LN_aes_192_ocb))) {
        private enum enumMixinStr_LN_aes_192_ocb = `enum LN_aes_192_ocb = "aes-192-ocb";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_aes_192_ocb); }))) {
            mixin(enumMixinStr_LN_aes_192_ocb);
        }
    }




    static if(!is(typeof(NID_aes_192_ocb))) {
        private enum enumMixinStr_NID_aes_192_ocb = `enum NID_aes_192_ocb = 959;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_aes_192_ocb); }))) {
            mixin(enumMixinStr_NID_aes_192_ocb);
        }
    }




    static if(!is(typeof(SN_aes_256_ocb))) {
        private enum enumMixinStr_SN_aes_256_ocb = `enum SN_aes_256_ocb = "AES-256-OCB";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_aes_256_ocb); }))) {
            mixin(enumMixinStr_SN_aes_256_ocb);
        }
    }




    static if(!is(typeof(LN_aes_256_ocb))) {
        private enum enumMixinStr_LN_aes_256_ocb = `enum LN_aes_256_ocb = "aes-256-ocb";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_aes_256_ocb); }))) {
            mixin(enumMixinStr_LN_aes_256_ocb);
        }
    }




    static if(!is(typeof(NID_aes_256_ocb))) {
        private enum enumMixinStr_NID_aes_256_ocb = `enum NID_aes_256_ocb = 960;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_aes_256_ocb); }))) {
            mixin(enumMixinStr_NID_aes_256_ocb);
        }
    }




    static if(!is(typeof(SN_des_cfb1))) {
        private enum enumMixinStr_SN_des_cfb1 = `enum SN_des_cfb1 = "DES-CFB1";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_des_cfb1); }))) {
            mixin(enumMixinStr_SN_des_cfb1);
        }
    }




    static if(!is(typeof(LN_des_cfb1))) {
        private enum enumMixinStr_LN_des_cfb1 = `enum LN_des_cfb1 = "des-cfb1";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_des_cfb1); }))) {
            mixin(enumMixinStr_LN_des_cfb1);
        }
    }




    static if(!is(typeof(NID_des_cfb1))) {
        private enum enumMixinStr_NID_des_cfb1 = `enum NID_des_cfb1 = 656;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_des_cfb1); }))) {
            mixin(enumMixinStr_NID_des_cfb1);
        }
    }




    static if(!is(typeof(SN_des_cfb8))) {
        private enum enumMixinStr_SN_des_cfb8 = `enum SN_des_cfb8 = "DES-CFB8";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_des_cfb8); }))) {
            mixin(enumMixinStr_SN_des_cfb8);
        }
    }




    static if(!is(typeof(LN_des_cfb8))) {
        private enum enumMixinStr_LN_des_cfb8 = `enum LN_des_cfb8 = "des-cfb8";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_des_cfb8); }))) {
            mixin(enumMixinStr_LN_des_cfb8);
        }
    }




    static if(!is(typeof(NID_des_cfb8))) {
        private enum enumMixinStr_NID_des_cfb8 = `enum NID_des_cfb8 = 657;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_des_cfb8); }))) {
            mixin(enumMixinStr_NID_des_cfb8);
        }
    }




    static if(!is(typeof(SN_des_ede3_cfb1))) {
        private enum enumMixinStr_SN_des_ede3_cfb1 = `enum SN_des_ede3_cfb1 = "DES-EDE3-CFB1";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_des_ede3_cfb1); }))) {
            mixin(enumMixinStr_SN_des_ede3_cfb1);
        }
    }




    static if(!is(typeof(LN_des_ede3_cfb1))) {
        private enum enumMixinStr_LN_des_ede3_cfb1 = `enum LN_des_ede3_cfb1 = "des-ede3-cfb1";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_des_ede3_cfb1); }))) {
            mixin(enumMixinStr_LN_des_ede3_cfb1);
        }
    }




    static if(!is(typeof(NID_des_ede3_cfb1))) {
        private enum enumMixinStr_NID_des_ede3_cfb1 = `enum NID_des_ede3_cfb1 = 658;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_des_ede3_cfb1); }))) {
            mixin(enumMixinStr_NID_des_ede3_cfb1);
        }
    }




    static if(!is(typeof(SN_des_ede3_cfb8))) {
        private enum enumMixinStr_SN_des_ede3_cfb8 = `enum SN_des_ede3_cfb8 = "DES-EDE3-CFB8";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_des_ede3_cfb8); }))) {
            mixin(enumMixinStr_SN_des_ede3_cfb8);
        }
    }




    static if(!is(typeof(LN_des_ede3_cfb8))) {
        private enum enumMixinStr_LN_des_ede3_cfb8 = `enum LN_des_ede3_cfb8 = "des-ede3-cfb8";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_des_ede3_cfb8); }))) {
            mixin(enumMixinStr_LN_des_ede3_cfb8);
        }
    }




    static if(!is(typeof(NID_des_ede3_cfb8))) {
        private enum enumMixinStr_NID_des_ede3_cfb8 = `enum NID_des_ede3_cfb8 = 659;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_des_ede3_cfb8); }))) {
            mixin(enumMixinStr_NID_des_ede3_cfb8);
        }
    }




    static if(!is(typeof(OBJ_nist_hashalgs))) {
        private enum enumMixinStr_OBJ_nist_hashalgs = `enum OBJ_nist_hashalgs = 2L , 16L , 840L , 1L , 101L , 3L , 4L , 2L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_nist_hashalgs); }))) {
            mixin(enumMixinStr_OBJ_nist_hashalgs);
        }
    }




    static if(!is(typeof(SN_sha256))) {
        private enum enumMixinStr_SN_sha256 = `enum SN_sha256 = "SHA256";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_sha256); }))) {
            mixin(enumMixinStr_SN_sha256);
        }
    }




    static if(!is(typeof(LN_sha256))) {
        private enum enumMixinStr_LN_sha256 = `enum LN_sha256 = "sha256";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_sha256); }))) {
            mixin(enumMixinStr_LN_sha256);
        }
    }




    static if(!is(typeof(NID_sha256))) {
        private enum enumMixinStr_NID_sha256 = `enum NID_sha256 = 672;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_sha256); }))) {
            mixin(enumMixinStr_NID_sha256);
        }
    }




    static if(!is(typeof(OBJ_sha256))) {
        private enum enumMixinStr_OBJ_sha256 = `enum OBJ_sha256 = 2L , 16L , 840L , 1L , 101L , 3L , 4L , 2L , 1L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_sha256); }))) {
            mixin(enumMixinStr_OBJ_sha256);
        }
    }




    static if(!is(typeof(SN_sha384))) {
        private enum enumMixinStr_SN_sha384 = `enum SN_sha384 = "SHA384";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_sha384); }))) {
            mixin(enumMixinStr_SN_sha384);
        }
    }




    static if(!is(typeof(LN_sha384))) {
        private enum enumMixinStr_LN_sha384 = `enum LN_sha384 = "sha384";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_sha384); }))) {
            mixin(enumMixinStr_LN_sha384);
        }
    }




    static if(!is(typeof(NID_sha384))) {
        private enum enumMixinStr_NID_sha384 = `enum NID_sha384 = 673;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_sha384); }))) {
            mixin(enumMixinStr_NID_sha384);
        }
    }




    static if(!is(typeof(OBJ_sha384))) {
        private enum enumMixinStr_OBJ_sha384 = `enum OBJ_sha384 = 2L , 16L , 840L , 1L , 101L , 3L , 4L , 2L , 2L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_sha384); }))) {
            mixin(enumMixinStr_OBJ_sha384);
        }
    }




    static if(!is(typeof(SN_sha512))) {
        private enum enumMixinStr_SN_sha512 = `enum SN_sha512 = "SHA512";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_sha512); }))) {
            mixin(enumMixinStr_SN_sha512);
        }
    }




    static if(!is(typeof(LN_sha512))) {
        private enum enumMixinStr_LN_sha512 = `enum LN_sha512 = "sha512";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_sha512); }))) {
            mixin(enumMixinStr_LN_sha512);
        }
    }




    static if(!is(typeof(NID_sha512))) {
        private enum enumMixinStr_NID_sha512 = `enum NID_sha512 = 674;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_sha512); }))) {
            mixin(enumMixinStr_NID_sha512);
        }
    }




    static if(!is(typeof(OBJ_sha512))) {
        private enum enumMixinStr_OBJ_sha512 = `enum OBJ_sha512 = 2L , 16L , 840L , 1L , 101L , 3L , 4L , 2L , 3L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_sha512); }))) {
            mixin(enumMixinStr_OBJ_sha512);
        }
    }




    static if(!is(typeof(SN_sha224))) {
        private enum enumMixinStr_SN_sha224 = `enum SN_sha224 = "SHA224";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_sha224); }))) {
            mixin(enumMixinStr_SN_sha224);
        }
    }




    static if(!is(typeof(LN_sha224))) {
        private enum enumMixinStr_LN_sha224 = `enum LN_sha224 = "sha224";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_sha224); }))) {
            mixin(enumMixinStr_LN_sha224);
        }
    }




    static if(!is(typeof(NID_sha224))) {
        private enum enumMixinStr_NID_sha224 = `enum NID_sha224 = 675;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_sha224); }))) {
            mixin(enumMixinStr_NID_sha224);
        }
    }




    static if(!is(typeof(OBJ_sha224))) {
        private enum enumMixinStr_OBJ_sha224 = `enum OBJ_sha224 = 2L , 16L , 840L , 1L , 101L , 3L , 4L , 2L , 4L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_sha224); }))) {
            mixin(enumMixinStr_OBJ_sha224);
        }
    }




    static if(!is(typeof(SN_sha512_224))) {
        private enum enumMixinStr_SN_sha512_224 = `enum SN_sha512_224 = "SHA512-224";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_sha512_224); }))) {
            mixin(enumMixinStr_SN_sha512_224);
        }
    }




    static if(!is(typeof(LN_sha512_224))) {
        private enum enumMixinStr_LN_sha512_224 = `enum LN_sha512_224 = "sha512-224";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_sha512_224); }))) {
            mixin(enumMixinStr_LN_sha512_224);
        }
    }




    static if(!is(typeof(NID_sha512_224))) {
        private enum enumMixinStr_NID_sha512_224 = `enum NID_sha512_224 = 1094;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_sha512_224); }))) {
            mixin(enumMixinStr_NID_sha512_224);
        }
    }




    static if(!is(typeof(OBJ_sha512_224))) {
        private enum enumMixinStr_OBJ_sha512_224 = `enum OBJ_sha512_224 = 2L , 16L , 840L , 1L , 101L , 3L , 4L , 2L , 5L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_sha512_224); }))) {
            mixin(enumMixinStr_OBJ_sha512_224);
        }
    }




    static if(!is(typeof(SN_sha512_256))) {
        private enum enumMixinStr_SN_sha512_256 = `enum SN_sha512_256 = "SHA512-256";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_sha512_256); }))) {
            mixin(enumMixinStr_SN_sha512_256);
        }
    }




    static if(!is(typeof(LN_sha512_256))) {
        private enum enumMixinStr_LN_sha512_256 = `enum LN_sha512_256 = "sha512-256";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_sha512_256); }))) {
            mixin(enumMixinStr_LN_sha512_256);
        }
    }




    static if(!is(typeof(NID_sha512_256))) {
        private enum enumMixinStr_NID_sha512_256 = `enum NID_sha512_256 = 1095;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_sha512_256); }))) {
            mixin(enumMixinStr_NID_sha512_256);
        }
    }




    static if(!is(typeof(OBJ_sha512_256))) {
        private enum enumMixinStr_OBJ_sha512_256 = `enum OBJ_sha512_256 = 2L , 16L , 840L , 1L , 101L , 3L , 4L , 2L , 6L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_sha512_256); }))) {
            mixin(enumMixinStr_OBJ_sha512_256);
        }
    }




    static if(!is(typeof(SN_sha3_224))) {
        private enum enumMixinStr_SN_sha3_224 = `enum SN_sha3_224 = "SHA3-224";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_sha3_224); }))) {
            mixin(enumMixinStr_SN_sha3_224);
        }
    }




    static if(!is(typeof(LN_sha3_224))) {
        private enum enumMixinStr_LN_sha3_224 = `enum LN_sha3_224 = "sha3-224";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_sha3_224); }))) {
            mixin(enumMixinStr_LN_sha3_224);
        }
    }




    static if(!is(typeof(NID_sha3_224))) {
        private enum enumMixinStr_NID_sha3_224 = `enum NID_sha3_224 = 1096;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_sha3_224); }))) {
            mixin(enumMixinStr_NID_sha3_224);
        }
    }




    static if(!is(typeof(OBJ_sha3_224))) {
        private enum enumMixinStr_OBJ_sha3_224 = `enum OBJ_sha3_224 = 2L , 16L , 840L , 1L , 101L , 3L , 4L , 2L , 7L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_sha3_224); }))) {
            mixin(enumMixinStr_OBJ_sha3_224);
        }
    }




    static if(!is(typeof(SN_sha3_256))) {
        private enum enumMixinStr_SN_sha3_256 = `enum SN_sha3_256 = "SHA3-256";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_sha3_256); }))) {
            mixin(enumMixinStr_SN_sha3_256);
        }
    }




    static if(!is(typeof(LN_sha3_256))) {
        private enum enumMixinStr_LN_sha3_256 = `enum LN_sha3_256 = "sha3-256";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_sha3_256); }))) {
            mixin(enumMixinStr_LN_sha3_256);
        }
    }




    static if(!is(typeof(NID_sha3_256))) {
        private enum enumMixinStr_NID_sha3_256 = `enum NID_sha3_256 = 1097;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_sha3_256); }))) {
            mixin(enumMixinStr_NID_sha3_256);
        }
    }




    static if(!is(typeof(OBJ_sha3_256))) {
        private enum enumMixinStr_OBJ_sha3_256 = `enum OBJ_sha3_256 = 2L , 16L , 840L , 1L , 101L , 3L , 4L , 2L , 8L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_sha3_256); }))) {
            mixin(enumMixinStr_OBJ_sha3_256);
        }
    }




    static if(!is(typeof(SN_sha3_384))) {
        private enum enumMixinStr_SN_sha3_384 = `enum SN_sha3_384 = "SHA3-384";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_sha3_384); }))) {
            mixin(enumMixinStr_SN_sha3_384);
        }
    }




    static if(!is(typeof(LN_sha3_384))) {
        private enum enumMixinStr_LN_sha3_384 = `enum LN_sha3_384 = "sha3-384";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_sha3_384); }))) {
            mixin(enumMixinStr_LN_sha3_384);
        }
    }




    static if(!is(typeof(NID_sha3_384))) {
        private enum enumMixinStr_NID_sha3_384 = `enum NID_sha3_384 = 1098;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_sha3_384); }))) {
            mixin(enumMixinStr_NID_sha3_384);
        }
    }




    static if(!is(typeof(OBJ_sha3_384))) {
        private enum enumMixinStr_OBJ_sha3_384 = `enum OBJ_sha3_384 = 2L , 16L , 840L , 1L , 101L , 3L , 4L , 2L , 9L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_sha3_384); }))) {
            mixin(enumMixinStr_OBJ_sha3_384);
        }
    }




    static if(!is(typeof(SN_sha3_512))) {
        private enum enumMixinStr_SN_sha3_512 = `enum SN_sha3_512 = "SHA3-512";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_sha3_512); }))) {
            mixin(enumMixinStr_SN_sha3_512);
        }
    }




    static if(!is(typeof(LN_sha3_512))) {
        private enum enumMixinStr_LN_sha3_512 = `enum LN_sha3_512 = "sha3-512";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_sha3_512); }))) {
            mixin(enumMixinStr_LN_sha3_512);
        }
    }




    static if(!is(typeof(NID_sha3_512))) {
        private enum enumMixinStr_NID_sha3_512 = `enum NID_sha3_512 = 1099;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_sha3_512); }))) {
            mixin(enumMixinStr_NID_sha3_512);
        }
    }




    static if(!is(typeof(OBJ_sha3_512))) {
        private enum enumMixinStr_OBJ_sha3_512 = `enum OBJ_sha3_512 = 2L , 16L , 840L , 1L , 101L , 3L , 4L , 2L , 10L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_sha3_512); }))) {
            mixin(enumMixinStr_OBJ_sha3_512);
        }
    }




    static if(!is(typeof(SN_shake128))) {
        private enum enumMixinStr_SN_shake128 = `enum SN_shake128 = "SHAKE128";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_shake128); }))) {
            mixin(enumMixinStr_SN_shake128);
        }
    }




    static if(!is(typeof(LN_shake128))) {
        private enum enumMixinStr_LN_shake128 = `enum LN_shake128 = "shake128";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_shake128); }))) {
            mixin(enumMixinStr_LN_shake128);
        }
    }




    static if(!is(typeof(NID_shake128))) {
        private enum enumMixinStr_NID_shake128 = `enum NID_shake128 = 1100;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_shake128); }))) {
            mixin(enumMixinStr_NID_shake128);
        }
    }




    static if(!is(typeof(OBJ_shake128))) {
        private enum enumMixinStr_OBJ_shake128 = `enum OBJ_shake128 = 2L , 16L , 840L , 1L , 101L , 3L , 4L , 2L , 11L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_shake128); }))) {
            mixin(enumMixinStr_OBJ_shake128);
        }
    }




    static if(!is(typeof(SN_shake256))) {
        private enum enumMixinStr_SN_shake256 = `enum SN_shake256 = "SHAKE256";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_shake256); }))) {
            mixin(enumMixinStr_SN_shake256);
        }
    }




    static if(!is(typeof(LN_shake256))) {
        private enum enumMixinStr_LN_shake256 = `enum LN_shake256 = "shake256";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_shake256); }))) {
            mixin(enumMixinStr_LN_shake256);
        }
    }




    static if(!is(typeof(NID_shake256))) {
        private enum enumMixinStr_NID_shake256 = `enum NID_shake256 = 1101;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_shake256); }))) {
            mixin(enumMixinStr_NID_shake256);
        }
    }




    static if(!is(typeof(OBJ_shake256))) {
        private enum enumMixinStr_OBJ_shake256 = `enum OBJ_shake256 = 2L , 16L , 840L , 1L , 101L , 3L , 4L , 2L , 12L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_shake256); }))) {
            mixin(enumMixinStr_OBJ_shake256);
        }
    }




    static if(!is(typeof(SN_hmac_sha3_224))) {
        private enum enumMixinStr_SN_hmac_sha3_224 = `enum SN_hmac_sha3_224 = "id-hmacWithSHA3-224";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_hmac_sha3_224); }))) {
            mixin(enumMixinStr_SN_hmac_sha3_224);
        }
    }




    static if(!is(typeof(LN_hmac_sha3_224))) {
        private enum enumMixinStr_LN_hmac_sha3_224 = `enum LN_hmac_sha3_224 = "hmac-sha3-224";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_hmac_sha3_224); }))) {
            mixin(enumMixinStr_LN_hmac_sha3_224);
        }
    }




    static if(!is(typeof(NID_hmac_sha3_224))) {
        private enum enumMixinStr_NID_hmac_sha3_224 = `enum NID_hmac_sha3_224 = 1102;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_hmac_sha3_224); }))) {
            mixin(enumMixinStr_NID_hmac_sha3_224);
        }
    }




    static if(!is(typeof(OBJ_hmac_sha3_224))) {
        private enum enumMixinStr_OBJ_hmac_sha3_224 = `enum OBJ_hmac_sha3_224 = 2L , 16L , 840L , 1L , 101L , 3L , 4L , 2L , 13L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_hmac_sha3_224); }))) {
            mixin(enumMixinStr_OBJ_hmac_sha3_224);
        }
    }




    static if(!is(typeof(SN_hmac_sha3_256))) {
        private enum enumMixinStr_SN_hmac_sha3_256 = `enum SN_hmac_sha3_256 = "id-hmacWithSHA3-256";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_hmac_sha3_256); }))) {
            mixin(enumMixinStr_SN_hmac_sha3_256);
        }
    }




    static if(!is(typeof(LN_hmac_sha3_256))) {
        private enum enumMixinStr_LN_hmac_sha3_256 = `enum LN_hmac_sha3_256 = "hmac-sha3-256";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_hmac_sha3_256); }))) {
            mixin(enumMixinStr_LN_hmac_sha3_256);
        }
    }




    static if(!is(typeof(NID_hmac_sha3_256))) {
        private enum enumMixinStr_NID_hmac_sha3_256 = `enum NID_hmac_sha3_256 = 1103;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_hmac_sha3_256); }))) {
            mixin(enumMixinStr_NID_hmac_sha3_256);
        }
    }




    static if(!is(typeof(OBJ_hmac_sha3_256))) {
        private enum enumMixinStr_OBJ_hmac_sha3_256 = `enum OBJ_hmac_sha3_256 = 2L , 16L , 840L , 1L , 101L , 3L , 4L , 2L , 14L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_hmac_sha3_256); }))) {
            mixin(enumMixinStr_OBJ_hmac_sha3_256);
        }
    }




    static if(!is(typeof(SN_hmac_sha3_384))) {
        private enum enumMixinStr_SN_hmac_sha3_384 = `enum SN_hmac_sha3_384 = "id-hmacWithSHA3-384";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_hmac_sha3_384); }))) {
            mixin(enumMixinStr_SN_hmac_sha3_384);
        }
    }




    static if(!is(typeof(LN_hmac_sha3_384))) {
        private enum enumMixinStr_LN_hmac_sha3_384 = `enum LN_hmac_sha3_384 = "hmac-sha3-384";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_hmac_sha3_384); }))) {
            mixin(enumMixinStr_LN_hmac_sha3_384);
        }
    }




    static if(!is(typeof(NID_hmac_sha3_384))) {
        private enum enumMixinStr_NID_hmac_sha3_384 = `enum NID_hmac_sha3_384 = 1104;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_hmac_sha3_384); }))) {
            mixin(enumMixinStr_NID_hmac_sha3_384);
        }
    }




    static if(!is(typeof(OBJ_hmac_sha3_384))) {
        private enum enumMixinStr_OBJ_hmac_sha3_384 = `enum OBJ_hmac_sha3_384 = 2L , 16L , 840L , 1L , 101L , 3L , 4L , 2L , 15L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_hmac_sha3_384); }))) {
            mixin(enumMixinStr_OBJ_hmac_sha3_384);
        }
    }




    static if(!is(typeof(SN_hmac_sha3_512))) {
        private enum enumMixinStr_SN_hmac_sha3_512 = `enum SN_hmac_sha3_512 = "id-hmacWithSHA3-512";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_hmac_sha3_512); }))) {
            mixin(enumMixinStr_SN_hmac_sha3_512);
        }
    }




    static if(!is(typeof(LN_hmac_sha3_512))) {
        private enum enumMixinStr_LN_hmac_sha3_512 = `enum LN_hmac_sha3_512 = "hmac-sha3-512";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_hmac_sha3_512); }))) {
            mixin(enumMixinStr_LN_hmac_sha3_512);
        }
    }




    static if(!is(typeof(NID_hmac_sha3_512))) {
        private enum enumMixinStr_NID_hmac_sha3_512 = `enum NID_hmac_sha3_512 = 1105;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_hmac_sha3_512); }))) {
            mixin(enumMixinStr_NID_hmac_sha3_512);
        }
    }




    static if(!is(typeof(OBJ_hmac_sha3_512))) {
        private enum enumMixinStr_OBJ_hmac_sha3_512 = `enum OBJ_hmac_sha3_512 = 2L , 16L , 840L , 1L , 101L , 3L , 4L , 2L , 16L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_hmac_sha3_512); }))) {
            mixin(enumMixinStr_OBJ_hmac_sha3_512);
        }
    }




    static if(!is(typeof(OBJ_dsa_with_sha2))) {
        private enum enumMixinStr_OBJ_dsa_with_sha2 = `enum OBJ_dsa_with_sha2 = 2L , 16L , 840L , 1L , 101L , 3L , 4L , 3L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_dsa_with_sha2); }))) {
            mixin(enumMixinStr_OBJ_dsa_with_sha2);
        }
    }




    static if(!is(typeof(SN_dsa_with_SHA224))) {
        private enum enumMixinStr_SN_dsa_with_SHA224 = `enum SN_dsa_with_SHA224 = "dsa_with_SHA224";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_dsa_with_SHA224); }))) {
            mixin(enumMixinStr_SN_dsa_with_SHA224);
        }
    }




    static if(!is(typeof(NID_dsa_with_SHA224))) {
        private enum enumMixinStr_NID_dsa_with_SHA224 = `enum NID_dsa_with_SHA224 = 802;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_dsa_with_SHA224); }))) {
            mixin(enumMixinStr_NID_dsa_with_SHA224);
        }
    }




    static if(!is(typeof(OBJ_dsa_with_SHA224))) {
        private enum enumMixinStr_OBJ_dsa_with_SHA224 = `enum OBJ_dsa_with_SHA224 = 2L , 16L , 840L , 1L , 101L , 3L , 4L , 3L , 1L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_dsa_with_SHA224); }))) {
            mixin(enumMixinStr_OBJ_dsa_with_SHA224);
        }
    }




    static if(!is(typeof(SN_dsa_with_SHA256))) {
        private enum enumMixinStr_SN_dsa_with_SHA256 = `enum SN_dsa_with_SHA256 = "dsa_with_SHA256";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_dsa_with_SHA256); }))) {
            mixin(enumMixinStr_SN_dsa_with_SHA256);
        }
    }




    static if(!is(typeof(NID_dsa_with_SHA256))) {
        private enum enumMixinStr_NID_dsa_with_SHA256 = `enum NID_dsa_with_SHA256 = 803;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_dsa_with_SHA256); }))) {
            mixin(enumMixinStr_NID_dsa_with_SHA256);
        }
    }




    static if(!is(typeof(OBJ_dsa_with_SHA256))) {
        private enum enumMixinStr_OBJ_dsa_with_SHA256 = `enum OBJ_dsa_with_SHA256 = 2L , 16L , 840L , 1L , 101L , 3L , 4L , 3L , 2L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_dsa_with_SHA256); }))) {
            mixin(enumMixinStr_OBJ_dsa_with_SHA256);
        }
    }




    static if(!is(typeof(OBJ_sigAlgs))) {
        private enum enumMixinStr_OBJ_sigAlgs = `enum OBJ_sigAlgs = 2L , 16L , 840L , 1L , 101L , 3L , 4L , 3L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_sigAlgs); }))) {
            mixin(enumMixinStr_OBJ_sigAlgs);
        }
    }




    static if(!is(typeof(SN_dsa_with_SHA384))) {
        private enum enumMixinStr_SN_dsa_with_SHA384 = `enum SN_dsa_with_SHA384 = "id-dsa-with-sha384";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_dsa_with_SHA384); }))) {
            mixin(enumMixinStr_SN_dsa_with_SHA384);
        }
    }




    static if(!is(typeof(LN_dsa_with_SHA384))) {
        private enum enumMixinStr_LN_dsa_with_SHA384 = `enum LN_dsa_with_SHA384 = "dsa_with_SHA384";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_dsa_with_SHA384); }))) {
            mixin(enumMixinStr_LN_dsa_with_SHA384);
        }
    }




    static if(!is(typeof(NID_dsa_with_SHA384))) {
        private enum enumMixinStr_NID_dsa_with_SHA384 = `enum NID_dsa_with_SHA384 = 1106;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_dsa_with_SHA384); }))) {
            mixin(enumMixinStr_NID_dsa_with_SHA384);
        }
    }




    static if(!is(typeof(OBJ_dsa_with_SHA384))) {
        private enum enumMixinStr_OBJ_dsa_with_SHA384 = `enum OBJ_dsa_with_SHA384 = 2L , 16L , 840L , 1L , 101L , 3L , 4L , 3L , 3L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_dsa_with_SHA384); }))) {
            mixin(enumMixinStr_OBJ_dsa_with_SHA384);
        }
    }




    static if(!is(typeof(SN_dsa_with_SHA512))) {
        private enum enumMixinStr_SN_dsa_with_SHA512 = `enum SN_dsa_with_SHA512 = "id-dsa-with-sha512";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_dsa_with_SHA512); }))) {
            mixin(enumMixinStr_SN_dsa_with_SHA512);
        }
    }




    static if(!is(typeof(LN_dsa_with_SHA512))) {
        private enum enumMixinStr_LN_dsa_with_SHA512 = `enum LN_dsa_with_SHA512 = "dsa_with_SHA512";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_dsa_with_SHA512); }))) {
            mixin(enumMixinStr_LN_dsa_with_SHA512);
        }
    }




    static if(!is(typeof(NID_dsa_with_SHA512))) {
        private enum enumMixinStr_NID_dsa_with_SHA512 = `enum NID_dsa_with_SHA512 = 1107;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_dsa_with_SHA512); }))) {
            mixin(enumMixinStr_NID_dsa_with_SHA512);
        }
    }




    static if(!is(typeof(OBJ_dsa_with_SHA512))) {
        private enum enumMixinStr_OBJ_dsa_with_SHA512 = `enum OBJ_dsa_with_SHA512 = 2L , 16L , 840L , 1L , 101L , 3L , 4L , 3L , 4L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_dsa_with_SHA512); }))) {
            mixin(enumMixinStr_OBJ_dsa_with_SHA512);
        }
    }




    static if(!is(typeof(SN_dsa_with_SHA3_224))) {
        private enum enumMixinStr_SN_dsa_with_SHA3_224 = `enum SN_dsa_with_SHA3_224 = "id-dsa-with-sha3-224";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_dsa_with_SHA3_224); }))) {
            mixin(enumMixinStr_SN_dsa_with_SHA3_224);
        }
    }




    static if(!is(typeof(LN_dsa_with_SHA3_224))) {
        private enum enumMixinStr_LN_dsa_with_SHA3_224 = `enum LN_dsa_with_SHA3_224 = "dsa_with_SHA3-224";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_dsa_with_SHA3_224); }))) {
            mixin(enumMixinStr_LN_dsa_with_SHA3_224);
        }
    }




    static if(!is(typeof(NID_dsa_with_SHA3_224))) {
        private enum enumMixinStr_NID_dsa_with_SHA3_224 = `enum NID_dsa_with_SHA3_224 = 1108;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_dsa_with_SHA3_224); }))) {
            mixin(enumMixinStr_NID_dsa_with_SHA3_224);
        }
    }




    static if(!is(typeof(OBJ_dsa_with_SHA3_224))) {
        private enum enumMixinStr_OBJ_dsa_with_SHA3_224 = `enum OBJ_dsa_with_SHA3_224 = 2L , 16L , 840L , 1L , 101L , 3L , 4L , 3L , 5L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_dsa_with_SHA3_224); }))) {
            mixin(enumMixinStr_OBJ_dsa_with_SHA3_224);
        }
    }




    static if(!is(typeof(SN_dsa_with_SHA3_256))) {
        private enum enumMixinStr_SN_dsa_with_SHA3_256 = `enum SN_dsa_with_SHA3_256 = "id-dsa-with-sha3-256";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_dsa_with_SHA3_256); }))) {
            mixin(enumMixinStr_SN_dsa_with_SHA3_256);
        }
    }




    static if(!is(typeof(LN_dsa_with_SHA3_256))) {
        private enum enumMixinStr_LN_dsa_with_SHA3_256 = `enum LN_dsa_with_SHA3_256 = "dsa_with_SHA3-256";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_dsa_with_SHA3_256); }))) {
            mixin(enumMixinStr_LN_dsa_with_SHA3_256);
        }
    }




    static if(!is(typeof(NID_dsa_with_SHA3_256))) {
        private enum enumMixinStr_NID_dsa_with_SHA3_256 = `enum NID_dsa_with_SHA3_256 = 1109;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_dsa_with_SHA3_256); }))) {
            mixin(enumMixinStr_NID_dsa_with_SHA3_256);
        }
    }




    static if(!is(typeof(OBJ_dsa_with_SHA3_256))) {
        private enum enumMixinStr_OBJ_dsa_with_SHA3_256 = `enum OBJ_dsa_with_SHA3_256 = 2L , 16L , 840L , 1L , 101L , 3L , 4L , 3L , 6L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_dsa_with_SHA3_256); }))) {
            mixin(enumMixinStr_OBJ_dsa_with_SHA3_256);
        }
    }




    static if(!is(typeof(SN_dsa_with_SHA3_384))) {
        private enum enumMixinStr_SN_dsa_with_SHA3_384 = `enum SN_dsa_with_SHA3_384 = "id-dsa-with-sha3-384";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_dsa_with_SHA3_384); }))) {
            mixin(enumMixinStr_SN_dsa_with_SHA3_384);
        }
    }




    static if(!is(typeof(LN_dsa_with_SHA3_384))) {
        private enum enumMixinStr_LN_dsa_with_SHA3_384 = `enum LN_dsa_with_SHA3_384 = "dsa_with_SHA3-384";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_dsa_with_SHA3_384); }))) {
            mixin(enumMixinStr_LN_dsa_with_SHA3_384);
        }
    }




    static if(!is(typeof(NID_dsa_with_SHA3_384))) {
        private enum enumMixinStr_NID_dsa_with_SHA3_384 = `enum NID_dsa_with_SHA3_384 = 1110;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_dsa_with_SHA3_384); }))) {
            mixin(enumMixinStr_NID_dsa_with_SHA3_384);
        }
    }




    static if(!is(typeof(OBJ_dsa_with_SHA3_384))) {
        private enum enumMixinStr_OBJ_dsa_with_SHA3_384 = `enum OBJ_dsa_with_SHA3_384 = 2L , 16L , 840L , 1L , 101L , 3L , 4L , 3L , 7L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_dsa_with_SHA3_384); }))) {
            mixin(enumMixinStr_OBJ_dsa_with_SHA3_384);
        }
    }




    static if(!is(typeof(SN_dsa_with_SHA3_512))) {
        private enum enumMixinStr_SN_dsa_with_SHA3_512 = `enum SN_dsa_with_SHA3_512 = "id-dsa-with-sha3-512";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_dsa_with_SHA3_512); }))) {
            mixin(enumMixinStr_SN_dsa_with_SHA3_512);
        }
    }




    static if(!is(typeof(LN_dsa_with_SHA3_512))) {
        private enum enumMixinStr_LN_dsa_with_SHA3_512 = `enum LN_dsa_with_SHA3_512 = "dsa_with_SHA3-512";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_dsa_with_SHA3_512); }))) {
            mixin(enumMixinStr_LN_dsa_with_SHA3_512);
        }
    }




    static if(!is(typeof(NID_dsa_with_SHA3_512))) {
        private enum enumMixinStr_NID_dsa_with_SHA3_512 = `enum NID_dsa_with_SHA3_512 = 1111;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_dsa_with_SHA3_512); }))) {
            mixin(enumMixinStr_NID_dsa_with_SHA3_512);
        }
    }




    static if(!is(typeof(OBJ_dsa_with_SHA3_512))) {
        private enum enumMixinStr_OBJ_dsa_with_SHA3_512 = `enum OBJ_dsa_with_SHA3_512 = 2L , 16L , 840L , 1L , 101L , 3L , 4L , 3L , 8L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_dsa_with_SHA3_512); }))) {
            mixin(enumMixinStr_OBJ_dsa_with_SHA3_512);
        }
    }




    static if(!is(typeof(SN_ecdsa_with_SHA3_224))) {
        private enum enumMixinStr_SN_ecdsa_with_SHA3_224 = `enum SN_ecdsa_with_SHA3_224 = "id-ecdsa-with-sha3-224";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_ecdsa_with_SHA3_224); }))) {
            mixin(enumMixinStr_SN_ecdsa_with_SHA3_224);
        }
    }




    static if(!is(typeof(LN_ecdsa_with_SHA3_224))) {
        private enum enumMixinStr_LN_ecdsa_with_SHA3_224 = `enum LN_ecdsa_with_SHA3_224 = "ecdsa_with_SHA3-224";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_ecdsa_with_SHA3_224); }))) {
            mixin(enumMixinStr_LN_ecdsa_with_SHA3_224);
        }
    }




    static if(!is(typeof(NID_ecdsa_with_SHA3_224))) {
        private enum enumMixinStr_NID_ecdsa_with_SHA3_224 = `enum NID_ecdsa_with_SHA3_224 = 1112;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_ecdsa_with_SHA3_224); }))) {
            mixin(enumMixinStr_NID_ecdsa_with_SHA3_224);
        }
    }




    static if(!is(typeof(OBJ_ecdsa_with_SHA3_224))) {
        private enum enumMixinStr_OBJ_ecdsa_with_SHA3_224 = `enum OBJ_ecdsa_with_SHA3_224 = 2L , 16L , 840L , 1L , 101L , 3L , 4L , 3L , 9L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_ecdsa_with_SHA3_224); }))) {
            mixin(enumMixinStr_OBJ_ecdsa_with_SHA3_224);
        }
    }




    static if(!is(typeof(SN_ecdsa_with_SHA3_256))) {
        private enum enumMixinStr_SN_ecdsa_with_SHA3_256 = `enum SN_ecdsa_with_SHA3_256 = "id-ecdsa-with-sha3-256";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_ecdsa_with_SHA3_256); }))) {
            mixin(enumMixinStr_SN_ecdsa_with_SHA3_256);
        }
    }




    static if(!is(typeof(LN_ecdsa_with_SHA3_256))) {
        private enum enumMixinStr_LN_ecdsa_with_SHA3_256 = `enum LN_ecdsa_with_SHA3_256 = "ecdsa_with_SHA3-256";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_ecdsa_with_SHA3_256); }))) {
            mixin(enumMixinStr_LN_ecdsa_with_SHA3_256);
        }
    }




    static if(!is(typeof(NID_ecdsa_with_SHA3_256))) {
        private enum enumMixinStr_NID_ecdsa_with_SHA3_256 = `enum NID_ecdsa_with_SHA3_256 = 1113;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_ecdsa_with_SHA3_256); }))) {
            mixin(enumMixinStr_NID_ecdsa_with_SHA3_256);
        }
    }




    static if(!is(typeof(OBJ_ecdsa_with_SHA3_256))) {
        private enum enumMixinStr_OBJ_ecdsa_with_SHA3_256 = `enum OBJ_ecdsa_with_SHA3_256 = 2L , 16L , 840L , 1L , 101L , 3L , 4L , 3L , 10L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_ecdsa_with_SHA3_256); }))) {
            mixin(enumMixinStr_OBJ_ecdsa_with_SHA3_256);
        }
    }




    static if(!is(typeof(SN_ecdsa_with_SHA3_384))) {
        private enum enumMixinStr_SN_ecdsa_with_SHA3_384 = `enum SN_ecdsa_with_SHA3_384 = "id-ecdsa-with-sha3-384";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_ecdsa_with_SHA3_384); }))) {
            mixin(enumMixinStr_SN_ecdsa_with_SHA3_384);
        }
    }




    static if(!is(typeof(LN_ecdsa_with_SHA3_384))) {
        private enum enumMixinStr_LN_ecdsa_with_SHA3_384 = `enum LN_ecdsa_with_SHA3_384 = "ecdsa_with_SHA3-384";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_ecdsa_with_SHA3_384); }))) {
            mixin(enumMixinStr_LN_ecdsa_with_SHA3_384);
        }
    }




    static if(!is(typeof(NID_ecdsa_with_SHA3_384))) {
        private enum enumMixinStr_NID_ecdsa_with_SHA3_384 = `enum NID_ecdsa_with_SHA3_384 = 1114;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_ecdsa_with_SHA3_384); }))) {
            mixin(enumMixinStr_NID_ecdsa_with_SHA3_384);
        }
    }




    static if(!is(typeof(OBJ_ecdsa_with_SHA3_384))) {
        private enum enumMixinStr_OBJ_ecdsa_with_SHA3_384 = `enum OBJ_ecdsa_with_SHA3_384 = 2L , 16L , 840L , 1L , 101L , 3L , 4L , 3L , 11L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_ecdsa_with_SHA3_384); }))) {
            mixin(enumMixinStr_OBJ_ecdsa_with_SHA3_384);
        }
    }




    static if(!is(typeof(SN_ecdsa_with_SHA3_512))) {
        private enum enumMixinStr_SN_ecdsa_with_SHA3_512 = `enum SN_ecdsa_with_SHA3_512 = "id-ecdsa-with-sha3-512";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_ecdsa_with_SHA3_512); }))) {
            mixin(enumMixinStr_SN_ecdsa_with_SHA3_512);
        }
    }




    static if(!is(typeof(LN_ecdsa_with_SHA3_512))) {
        private enum enumMixinStr_LN_ecdsa_with_SHA3_512 = `enum LN_ecdsa_with_SHA3_512 = "ecdsa_with_SHA3-512";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_ecdsa_with_SHA3_512); }))) {
            mixin(enumMixinStr_LN_ecdsa_with_SHA3_512);
        }
    }




    static if(!is(typeof(NID_ecdsa_with_SHA3_512))) {
        private enum enumMixinStr_NID_ecdsa_with_SHA3_512 = `enum NID_ecdsa_with_SHA3_512 = 1115;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_ecdsa_with_SHA3_512); }))) {
            mixin(enumMixinStr_NID_ecdsa_with_SHA3_512);
        }
    }




    static if(!is(typeof(OBJ_ecdsa_with_SHA3_512))) {
        private enum enumMixinStr_OBJ_ecdsa_with_SHA3_512 = `enum OBJ_ecdsa_with_SHA3_512 = 2L , 16L , 840L , 1L , 101L , 3L , 4L , 3L , 12L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_ecdsa_with_SHA3_512); }))) {
            mixin(enumMixinStr_OBJ_ecdsa_with_SHA3_512);
        }
    }




    static if(!is(typeof(SN_RSA_SHA3_224))) {
        private enum enumMixinStr_SN_RSA_SHA3_224 = `enum SN_RSA_SHA3_224 = "id-rsassa-pkcs1-v1_5-with-sha3-224";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_RSA_SHA3_224); }))) {
            mixin(enumMixinStr_SN_RSA_SHA3_224);
        }
    }




    static if(!is(typeof(LN_RSA_SHA3_224))) {
        private enum enumMixinStr_LN_RSA_SHA3_224 = `enum LN_RSA_SHA3_224 = "RSA-SHA3-224";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_RSA_SHA3_224); }))) {
            mixin(enumMixinStr_LN_RSA_SHA3_224);
        }
    }




    static if(!is(typeof(NID_RSA_SHA3_224))) {
        private enum enumMixinStr_NID_RSA_SHA3_224 = `enum NID_RSA_SHA3_224 = 1116;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_RSA_SHA3_224); }))) {
            mixin(enumMixinStr_NID_RSA_SHA3_224);
        }
    }




    static if(!is(typeof(OBJ_RSA_SHA3_224))) {
        private enum enumMixinStr_OBJ_RSA_SHA3_224 = `enum OBJ_RSA_SHA3_224 = 2L , 16L , 840L , 1L , 101L , 3L , 4L , 3L , 13L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_RSA_SHA3_224); }))) {
            mixin(enumMixinStr_OBJ_RSA_SHA3_224);
        }
    }




    static if(!is(typeof(SN_RSA_SHA3_256))) {
        private enum enumMixinStr_SN_RSA_SHA3_256 = `enum SN_RSA_SHA3_256 = "id-rsassa-pkcs1-v1_5-with-sha3-256";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_RSA_SHA3_256); }))) {
            mixin(enumMixinStr_SN_RSA_SHA3_256);
        }
    }




    static if(!is(typeof(LN_RSA_SHA3_256))) {
        private enum enumMixinStr_LN_RSA_SHA3_256 = `enum LN_RSA_SHA3_256 = "RSA-SHA3-256";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_RSA_SHA3_256); }))) {
            mixin(enumMixinStr_LN_RSA_SHA3_256);
        }
    }




    static if(!is(typeof(NID_RSA_SHA3_256))) {
        private enum enumMixinStr_NID_RSA_SHA3_256 = `enum NID_RSA_SHA3_256 = 1117;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_RSA_SHA3_256); }))) {
            mixin(enumMixinStr_NID_RSA_SHA3_256);
        }
    }




    static if(!is(typeof(OBJ_RSA_SHA3_256))) {
        private enum enumMixinStr_OBJ_RSA_SHA3_256 = `enum OBJ_RSA_SHA3_256 = 2L , 16L , 840L , 1L , 101L , 3L , 4L , 3L , 14L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_RSA_SHA3_256); }))) {
            mixin(enumMixinStr_OBJ_RSA_SHA3_256);
        }
    }




    static if(!is(typeof(SN_RSA_SHA3_384))) {
        private enum enumMixinStr_SN_RSA_SHA3_384 = `enum SN_RSA_SHA3_384 = "id-rsassa-pkcs1-v1_5-with-sha3-384";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_RSA_SHA3_384); }))) {
            mixin(enumMixinStr_SN_RSA_SHA3_384);
        }
    }




    static if(!is(typeof(LN_RSA_SHA3_384))) {
        private enum enumMixinStr_LN_RSA_SHA3_384 = `enum LN_RSA_SHA3_384 = "RSA-SHA3-384";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_RSA_SHA3_384); }))) {
            mixin(enumMixinStr_LN_RSA_SHA3_384);
        }
    }




    static if(!is(typeof(NID_RSA_SHA3_384))) {
        private enum enumMixinStr_NID_RSA_SHA3_384 = `enum NID_RSA_SHA3_384 = 1118;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_RSA_SHA3_384); }))) {
            mixin(enumMixinStr_NID_RSA_SHA3_384);
        }
    }




    static if(!is(typeof(OBJ_RSA_SHA3_384))) {
        private enum enumMixinStr_OBJ_RSA_SHA3_384 = `enum OBJ_RSA_SHA3_384 = 2L , 16L , 840L , 1L , 101L , 3L , 4L , 3L , 15L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_RSA_SHA3_384); }))) {
            mixin(enumMixinStr_OBJ_RSA_SHA3_384);
        }
    }




    static if(!is(typeof(SN_RSA_SHA3_512))) {
        private enum enumMixinStr_SN_RSA_SHA3_512 = `enum SN_RSA_SHA3_512 = "id-rsassa-pkcs1-v1_5-with-sha3-512";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_RSA_SHA3_512); }))) {
            mixin(enumMixinStr_SN_RSA_SHA3_512);
        }
    }




    static if(!is(typeof(LN_RSA_SHA3_512))) {
        private enum enumMixinStr_LN_RSA_SHA3_512 = `enum LN_RSA_SHA3_512 = "RSA-SHA3-512";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_RSA_SHA3_512); }))) {
            mixin(enumMixinStr_LN_RSA_SHA3_512);
        }
    }




    static if(!is(typeof(NID_RSA_SHA3_512))) {
        private enum enumMixinStr_NID_RSA_SHA3_512 = `enum NID_RSA_SHA3_512 = 1119;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_RSA_SHA3_512); }))) {
            mixin(enumMixinStr_NID_RSA_SHA3_512);
        }
    }




    static if(!is(typeof(OBJ_RSA_SHA3_512))) {
        private enum enumMixinStr_OBJ_RSA_SHA3_512 = `enum OBJ_RSA_SHA3_512 = 2L , 16L , 840L , 1L , 101L , 3L , 4L , 3L , 16L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_RSA_SHA3_512); }))) {
            mixin(enumMixinStr_OBJ_RSA_SHA3_512);
        }
    }




    static if(!is(typeof(SN_hold_instruction_code))) {
        private enum enumMixinStr_SN_hold_instruction_code = `enum SN_hold_instruction_code = "holdInstructionCode";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_hold_instruction_code); }))) {
            mixin(enumMixinStr_SN_hold_instruction_code);
        }
    }




    static if(!is(typeof(LN_hold_instruction_code))) {
        private enum enumMixinStr_LN_hold_instruction_code = `enum LN_hold_instruction_code = "Hold Instruction Code";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_hold_instruction_code); }))) {
            mixin(enumMixinStr_LN_hold_instruction_code);
        }
    }




    static if(!is(typeof(NID_hold_instruction_code))) {
        private enum enumMixinStr_NID_hold_instruction_code = `enum NID_hold_instruction_code = 430;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_hold_instruction_code); }))) {
            mixin(enumMixinStr_NID_hold_instruction_code);
        }
    }




    static if(!is(typeof(OBJ_hold_instruction_code))) {
        private enum enumMixinStr_OBJ_hold_instruction_code = `enum OBJ_hold_instruction_code = 2L , 5L , 29L , 23L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_hold_instruction_code); }))) {
            mixin(enumMixinStr_OBJ_hold_instruction_code);
        }
    }




    static if(!is(typeof(OBJ_holdInstruction))) {
        private enum enumMixinStr_OBJ_holdInstruction = `enum OBJ_holdInstruction = 1L , 2L , 840L , 10040L , 2L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_holdInstruction); }))) {
            mixin(enumMixinStr_OBJ_holdInstruction);
        }
    }




    static if(!is(typeof(SN_hold_instruction_none))) {
        private enum enumMixinStr_SN_hold_instruction_none = `enum SN_hold_instruction_none = "holdInstructionNone";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_hold_instruction_none); }))) {
            mixin(enumMixinStr_SN_hold_instruction_none);
        }
    }




    static if(!is(typeof(LN_hold_instruction_none))) {
        private enum enumMixinStr_LN_hold_instruction_none = `enum LN_hold_instruction_none = "Hold Instruction None";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_hold_instruction_none); }))) {
            mixin(enumMixinStr_LN_hold_instruction_none);
        }
    }




    static if(!is(typeof(NID_hold_instruction_none))) {
        private enum enumMixinStr_NID_hold_instruction_none = `enum NID_hold_instruction_none = 431;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_hold_instruction_none); }))) {
            mixin(enumMixinStr_NID_hold_instruction_none);
        }
    }




    static if(!is(typeof(OBJ_hold_instruction_none))) {
        private enum enumMixinStr_OBJ_hold_instruction_none = `enum OBJ_hold_instruction_none = 1L , 2L , 840L , 10040L , 2L , 1L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_hold_instruction_none); }))) {
            mixin(enumMixinStr_OBJ_hold_instruction_none);
        }
    }




    static if(!is(typeof(SN_hold_instruction_call_issuer))) {
        private enum enumMixinStr_SN_hold_instruction_call_issuer = `enum SN_hold_instruction_call_issuer = "holdInstructionCallIssuer";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_hold_instruction_call_issuer); }))) {
            mixin(enumMixinStr_SN_hold_instruction_call_issuer);
        }
    }




    static if(!is(typeof(LN_hold_instruction_call_issuer))) {
        private enum enumMixinStr_LN_hold_instruction_call_issuer = `enum LN_hold_instruction_call_issuer = "Hold Instruction Call Issuer";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_hold_instruction_call_issuer); }))) {
            mixin(enumMixinStr_LN_hold_instruction_call_issuer);
        }
    }




    static if(!is(typeof(NID_hold_instruction_call_issuer))) {
        private enum enumMixinStr_NID_hold_instruction_call_issuer = `enum NID_hold_instruction_call_issuer = 432;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_hold_instruction_call_issuer); }))) {
            mixin(enumMixinStr_NID_hold_instruction_call_issuer);
        }
    }




    static if(!is(typeof(OBJ_hold_instruction_call_issuer))) {
        private enum enumMixinStr_OBJ_hold_instruction_call_issuer = `enum OBJ_hold_instruction_call_issuer = 1L , 2L , 840L , 10040L , 2L , 2L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_hold_instruction_call_issuer); }))) {
            mixin(enumMixinStr_OBJ_hold_instruction_call_issuer);
        }
    }




    static if(!is(typeof(SN_hold_instruction_reject))) {
        private enum enumMixinStr_SN_hold_instruction_reject = `enum SN_hold_instruction_reject = "holdInstructionReject";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_hold_instruction_reject); }))) {
            mixin(enumMixinStr_SN_hold_instruction_reject);
        }
    }




    static if(!is(typeof(LN_hold_instruction_reject))) {
        private enum enumMixinStr_LN_hold_instruction_reject = `enum LN_hold_instruction_reject = "Hold Instruction Reject";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_hold_instruction_reject); }))) {
            mixin(enumMixinStr_LN_hold_instruction_reject);
        }
    }




    static if(!is(typeof(NID_hold_instruction_reject))) {
        private enum enumMixinStr_NID_hold_instruction_reject = `enum NID_hold_instruction_reject = 433;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_hold_instruction_reject); }))) {
            mixin(enumMixinStr_NID_hold_instruction_reject);
        }
    }




    static if(!is(typeof(OBJ_hold_instruction_reject))) {
        private enum enumMixinStr_OBJ_hold_instruction_reject = `enum OBJ_hold_instruction_reject = 1L , 2L , 840L , 10040L , 2L , 3L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_hold_instruction_reject); }))) {
            mixin(enumMixinStr_OBJ_hold_instruction_reject);
        }
    }




    static if(!is(typeof(SN_data))) {
        private enum enumMixinStr_SN_data = `enum SN_data = "data";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_data); }))) {
            mixin(enumMixinStr_SN_data);
        }
    }




    static if(!is(typeof(NID_data))) {
        private enum enumMixinStr_NID_data = `enum NID_data = 434;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_data); }))) {
            mixin(enumMixinStr_NID_data);
        }
    }




    static if(!is(typeof(OBJ_data))) {
        private enum enumMixinStr_OBJ_data = `enum OBJ_data = 0L , 9L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_data); }))) {
            mixin(enumMixinStr_OBJ_data);
        }
    }




    static if(!is(typeof(SN_pss))) {
        private enum enumMixinStr_SN_pss = `enum SN_pss = "pss";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_pss); }))) {
            mixin(enumMixinStr_SN_pss);
        }
    }




    static if(!is(typeof(NID_pss))) {
        private enum enumMixinStr_NID_pss = `enum NID_pss = 435;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_pss); }))) {
            mixin(enumMixinStr_NID_pss);
        }
    }




    static if(!is(typeof(OBJ_pss))) {
        private enum enumMixinStr_OBJ_pss = `enum OBJ_pss = 0L , 9L , 2342L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_pss); }))) {
            mixin(enumMixinStr_OBJ_pss);
        }
    }




    static if(!is(typeof(SN_ucl))) {
        private enum enumMixinStr_SN_ucl = `enum SN_ucl = "ucl";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_ucl); }))) {
            mixin(enumMixinStr_SN_ucl);
        }
    }




    static if(!is(typeof(NID_ucl))) {
        private enum enumMixinStr_NID_ucl = `enum NID_ucl = 436;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_ucl); }))) {
            mixin(enumMixinStr_NID_ucl);
        }
    }




    static if(!is(typeof(OBJ_ucl))) {
        private enum enumMixinStr_OBJ_ucl = `enum OBJ_ucl = 0L , 9L , 2342L , 19200300L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_ucl); }))) {
            mixin(enumMixinStr_OBJ_ucl);
        }
    }




    static if(!is(typeof(SN_pilot))) {
        private enum enumMixinStr_SN_pilot = `enum SN_pilot = "pilot";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_pilot); }))) {
            mixin(enumMixinStr_SN_pilot);
        }
    }




    static if(!is(typeof(NID_pilot))) {
        private enum enumMixinStr_NID_pilot = `enum NID_pilot = 437;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_pilot); }))) {
            mixin(enumMixinStr_NID_pilot);
        }
    }




    static if(!is(typeof(OBJ_pilot))) {
        private enum enumMixinStr_OBJ_pilot = `enum OBJ_pilot = 0L , 9L , 2342L , 19200300L , 100L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_pilot); }))) {
            mixin(enumMixinStr_OBJ_pilot);
        }
    }




    static if(!is(typeof(LN_pilotAttributeType))) {
        private enum enumMixinStr_LN_pilotAttributeType = `enum LN_pilotAttributeType = "pilotAttributeType";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_pilotAttributeType); }))) {
            mixin(enumMixinStr_LN_pilotAttributeType);
        }
    }




    static if(!is(typeof(NID_pilotAttributeType))) {
        private enum enumMixinStr_NID_pilotAttributeType = `enum NID_pilotAttributeType = 438;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_pilotAttributeType); }))) {
            mixin(enumMixinStr_NID_pilotAttributeType);
        }
    }




    static if(!is(typeof(OBJ_pilotAttributeType))) {
        private enum enumMixinStr_OBJ_pilotAttributeType = `enum OBJ_pilotAttributeType = 0L , 9L , 2342L , 19200300L , 100L , 1L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_pilotAttributeType); }))) {
            mixin(enumMixinStr_OBJ_pilotAttributeType);
        }
    }




    static if(!is(typeof(LN_pilotAttributeSyntax))) {
        private enum enumMixinStr_LN_pilotAttributeSyntax = `enum LN_pilotAttributeSyntax = "pilotAttributeSyntax";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_pilotAttributeSyntax); }))) {
            mixin(enumMixinStr_LN_pilotAttributeSyntax);
        }
    }




    static if(!is(typeof(NID_pilotAttributeSyntax))) {
        private enum enumMixinStr_NID_pilotAttributeSyntax = `enum NID_pilotAttributeSyntax = 439;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_pilotAttributeSyntax); }))) {
            mixin(enumMixinStr_NID_pilotAttributeSyntax);
        }
    }




    static if(!is(typeof(OBJ_pilotAttributeSyntax))) {
        private enum enumMixinStr_OBJ_pilotAttributeSyntax = `enum OBJ_pilotAttributeSyntax = 0L , 9L , 2342L , 19200300L , 100L , 3L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_pilotAttributeSyntax); }))) {
            mixin(enumMixinStr_OBJ_pilotAttributeSyntax);
        }
    }




    static if(!is(typeof(LN_pilotObjectClass))) {
        private enum enumMixinStr_LN_pilotObjectClass = `enum LN_pilotObjectClass = "pilotObjectClass";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_pilotObjectClass); }))) {
            mixin(enumMixinStr_LN_pilotObjectClass);
        }
    }




    static if(!is(typeof(NID_pilotObjectClass))) {
        private enum enumMixinStr_NID_pilotObjectClass = `enum NID_pilotObjectClass = 440;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_pilotObjectClass); }))) {
            mixin(enumMixinStr_NID_pilotObjectClass);
        }
    }




    static if(!is(typeof(OBJ_pilotObjectClass))) {
        private enum enumMixinStr_OBJ_pilotObjectClass = `enum OBJ_pilotObjectClass = 0L , 9L , 2342L , 19200300L , 100L , 4L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_pilotObjectClass); }))) {
            mixin(enumMixinStr_OBJ_pilotObjectClass);
        }
    }




    static if(!is(typeof(LN_pilotGroups))) {
        private enum enumMixinStr_LN_pilotGroups = `enum LN_pilotGroups = "pilotGroups";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_pilotGroups); }))) {
            mixin(enumMixinStr_LN_pilotGroups);
        }
    }




    static if(!is(typeof(NID_pilotGroups))) {
        private enum enumMixinStr_NID_pilotGroups = `enum NID_pilotGroups = 441;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_pilotGroups); }))) {
            mixin(enumMixinStr_NID_pilotGroups);
        }
    }




    static if(!is(typeof(OBJ_pilotGroups))) {
        private enum enumMixinStr_OBJ_pilotGroups = `enum OBJ_pilotGroups = 0L , 9L , 2342L , 19200300L , 100L , 10L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_pilotGroups); }))) {
            mixin(enumMixinStr_OBJ_pilotGroups);
        }
    }




    static if(!is(typeof(LN_iA5StringSyntax))) {
        private enum enumMixinStr_LN_iA5StringSyntax = `enum LN_iA5StringSyntax = "iA5StringSyntax";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_iA5StringSyntax); }))) {
            mixin(enumMixinStr_LN_iA5StringSyntax);
        }
    }




    static if(!is(typeof(NID_iA5StringSyntax))) {
        private enum enumMixinStr_NID_iA5StringSyntax = `enum NID_iA5StringSyntax = 442;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_iA5StringSyntax); }))) {
            mixin(enumMixinStr_NID_iA5StringSyntax);
        }
    }




    static if(!is(typeof(OBJ_iA5StringSyntax))) {
        private enum enumMixinStr_OBJ_iA5StringSyntax = `enum OBJ_iA5StringSyntax = 0L , 9L , 2342L , 19200300L , 100L , 3L , 4L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_iA5StringSyntax); }))) {
            mixin(enumMixinStr_OBJ_iA5StringSyntax);
        }
    }




    static if(!is(typeof(LN_caseIgnoreIA5StringSyntax))) {
        private enum enumMixinStr_LN_caseIgnoreIA5StringSyntax = `enum LN_caseIgnoreIA5StringSyntax = "caseIgnoreIA5StringSyntax";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_caseIgnoreIA5StringSyntax); }))) {
            mixin(enumMixinStr_LN_caseIgnoreIA5StringSyntax);
        }
    }




    static if(!is(typeof(NID_caseIgnoreIA5StringSyntax))) {
        private enum enumMixinStr_NID_caseIgnoreIA5StringSyntax = `enum NID_caseIgnoreIA5StringSyntax = 443;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_caseIgnoreIA5StringSyntax); }))) {
            mixin(enumMixinStr_NID_caseIgnoreIA5StringSyntax);
        }
    }




    static if(!is(typeof(OBJ_caseIgnoreIA5StringSyntax))) {
        private enum enumMixinStr_OBJ_caseIgnoreIA5StringSyntax = `enum OBJ_caseIgnoreIA5StringSyntax = 0L , 9L , 2342L , 19200300L , 100L , 3L , 5L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_caseIgnoreIA5StringSyntax); }))) {
            mixin(enumMixinStr_OBJ_caseIgnoreIA5StringSyntax);
        }
    }




    static if(!is(typeof(LN_pilotObject))) {
        private enum enumMixinStr_LN_pilotObject = `enum LN_pilotObject = "pilotObject";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_pilotObject); }))) {
            mixin(enumMixinStr_LN_pilotObject);
        }
    }




    static if(!is(typeof(NID_pilotObject))) {
        private enum enumMixinStr_NID_pilotObject = `enum NID_pilotObject = 444;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_pilotObject); }))) {
            mixin(enumMixinStr_NID_pilotObject);
        }
    }




    static if(!is(typeof(OBJ_pilotObject))) {
        private enum enumMixinStr_OBJ_pilotObject = `enum OBJ_pilotObject = 0L , 9L , 2342L , 19200300L , 100L , 4L , 3L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_pilotObject); }))) {
            mixin(enumMixinStr_OBJ_pilotObject);
        }
    }




    static if(!is(typeof(LN_pilotPerson))) {
        private enum enumMixinStr_LN_pilotPerson = `enum LN_pilotPerson = "pilotPerson";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_pilotPerson); }))) {
            mixin(enumMixinStr_LN_pilotPerson);
        }
    }




    static if(!is(typeof(NID_pilotPerson))) {
        private enum enumMixinStr_NID_pilotPerson = `enum NID_pilotPerson = 445;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_pilotPerson); }))) {
            mixin(enumMixinStr_NID_pilotPerson);
        }
    }




    static if(!is(typeof(OBJ_pilotPerson))) {
        private enum enumMixinStr_OBJ_pilotPerson = `enum OBJ_pilotPerson = 0L , 9L , 2342L , 19200300L , 100L , 4L , 4L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_pilotPerson); }))) {
            mixin(enumMixinStr_OBJ_pilotPerson);
        }
    }




    static if(!is(typeof(SN_account))) {
        private enum enumMixinStr_SN_account = `enum SN_account = "account";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_account); }))) {
            mixin(enumMixinStr_SN_account);
        }
    }




    static if(!is(typeof(NID_account))) {
        private enum enumMixinStr_NID_account = `enum NID_account = 446;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_account); }))) {
            mixin(enumMixinStr_NID_account);
        }
    }




    static if(!is(typeof(OBJ_account))) {
        private enum enumMixinStr_OBJ_account = `enum OBJ_account = 0L , 9L , 2342L , 19200300L , 100L , 4L , 5L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_account); }))) {
            mixin(enumMixinStr_OBJ_account);
        }
    }




    static if(!is(typeof(SN_document))) {
        private enum enumMixinStr_SN_document = `enum SN_document = "document";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_document); }))) {
            mixin(enumMixinStr_SN_document);
        }
    }




    static if(!is(typeof(NID_document))) {
        private enum enumMixinStr_NID_document = `enum NID_document = 447;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_document); }))) {
            mixin(enumMixinStr_NID_document);
        }
    }




    static if(!is(typeof(OBJ_document))) {
        private enum enumMixinStr_OBJ_document = `enum OBJ_document = 0L , 9L , 2342L , 19200300L , 100L , 4L , 6L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_document); }))) {
            mixin(enumMixinStr_OBJ_document);
        }
    }




    static if(!is(typeof(SN_room))) {
        private enum enumMixinStr_SN_room = `enum SN_room = "room";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_room); }))) {
            mixin(enumMixinStr_SN_room);
        }
    }




    static if(!is(typeof(NID_room))) {
        private enum enumMixinStr_NID_room = `enum NID_room = 448;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_room); }))) {
            mixin(enumMixinStr_NID_room);
        }
    }




    static if(!is(typeof(OBJ_room))) {
        private enum enumMixinStr_OBJ_room = `enum OBJ_room = 0L , 9L , 2342L , 19200300L , 100L , 4L , 7L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_room); }))) {
            mixin(enumMixinStr_OBJ_room);
        }
    }




    static if(!is(typeof(LN_documentSeries))) {
        private enum enumMixinStr_LN_documentSeries = `enum LN_documentSeries = "documentSeries";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_documentSeries); }))) {
            mixin(enumMixinStr_LN_documentSeries);
        }
    }




    static if(!is(typeof(NID_documentSeries))) {
        private enum enumMixinStr_NID_documentSeries = `enum NID_documentSeries = 449;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_documentSeries); }))) {
            mixin(enumMixinStr_NID_documentSeries);
        }
    }




    static if(!is(typeof(OBJ_documentSeries))) {
        private enum enumMixinStr_OBJ_documentSeries = `enum OBJ_documentSeries = 0L , 9L , 2342L , 19200300L , 100L , 4L , 9L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_documentSeries); }))) {
            mixin(enumMixinStr_OBJ_documentSeries);
        }
    }




    static if(!is(typeof(SN_Domain))) {
        private enum enumMixinStr_SN_Domain = `enum SN_Domain = "domain";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_Domain); }))) {
            mixin(enumMixinStr_SN_Domain);
        }
    }




    static if(!is(typeof(LN_Domain))) {
        private enum enumMixinStr_LN_Domain = `enum LN_Domain = "Domain";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_Domain); }))) {
            mixin(enumMixinStr_LN_Domain);
        }
    }




    static if(!is(typeof(NID_Domain))) {
        private enum enumMixinStr_NID_Domain = `enum NID_Domain = 392;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_Domain); }))) {
            mixin(enumMixinStr_NID_Domain);
        }
    }




    static if(!is(typeof(OBJ_Domain))) {
        private enum enumMixinStr_OBJ_Domain = `enum OBJ_Domain = 0L , 9L , 2342L , 19200300L , 100L , 4L , 13L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_Domain); }))) {
            mixin(enumMixinStr_OBJ_Domain);
        }
    }




    static if(!is(typeof(LN_rFC822localPart))) {
        private enum enumMixinStr_LN_rFC822localPart = `enum LN_rFC822localPart = "rFC822localPart";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_rFC822localPart); }))) {
            mixin(enumMixinStr_LN_rFC822localPart);
        }
    }




    static if(!is(typeof(NID_rFC822localPart))) {
        private enum enumMixinStr_NID_rFC822localPart = `enum NID_rFC822localPart = 450;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_rFC822localPart); }))) {
            mixin(enumMixinStr_NID_rFC822localPart);
        }
    }




    static if(!is(typeof(OBJ_rFC822localPart))) {
        private enum enumMixinStr_OBJ_rFC822localPart = `enum OBJ_rFC822localPart = 0L , 9L , 2342L , 19200300L , 100L , 4L , 14L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_rFC822localPart); }))) {
            mixin(enumMixinStr_OBJ_rFC822localPart);
        }
    }




    static if(!is(typeof(LN_dNSDomain))) {
        private enum enumMixinStr_LN_dNSDomain = `enum LN_dNSDomain = "dNSDomain";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_dNSDomain); }))) {
            mixin(enumMixinStr_LN_dNSDomain);
        }
    }




    static if(!is(typeof(NID_dNSDomain))) {
        private enum enumMixinStr_NID_dNSDomain = `enum NID_dNSDomain = 451;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_dNSDomain); }))) {
            mixin(enumMixinStr_NID_dNSDomain);
        }
    }




    static if(!is(typeof(OBJ_dNSDomain))) {
        private enum enumMixinStr_OBJ_dNSDomain = `enum OBJ_dNSDomain = 0L , 9L , 2342L , 19200300L , 100L , 4L , 15L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_dNSDomain); }))) {
            mixin(enumMixinStr_OBJ_dNSDomain);
        }
    }




    static if(!is(typeof(LN_domainRelatedObject))) {
        private enum enumMixinStr_LN_domainRelatedObject = `enum LN_domainRelatedObject = "domainRelatedObject";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_domainRelatedObject); }))) {
            mixin(enumMixinStr_LN_domainRelatedObject);
        }
    }




    static if(!is(typeof(NID_domainRelatedObject))) {
        private enum enumMixinStr_NID_domainRelatedObject = `enum NID_domainRelatedObject = 452;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_domainRelatedObject); }))) {
            mixin(enumMixinStr_NID_domainRelatedObject);
        }
    }




    static if(!is(typeof(OBJ_domainRelatedObject))) {
        private enum enumMixinStr_OBJ_domainRelatedObject = `enum OBJ_domainRelatedObject = 0L , 9L , 2342L , 19200300L , 100L , 4L , 17L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_domainRelatedObject); }))) {
            mixin(enumMixinStr_OBJ_domainRelatedObject);
        }
    }




    static if(!is(typeof(LN_friendlyCountry))) {
        private enum enumMixinStr_LN_friendlyCountry = `enum LN_friendlyCountry = "friendlyCountry";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_friendlyCountry); }))) {
            mixin(enumMixinStr_LN_friendlyCountry);
        }
    }




    static if(!is(typeof(NID_friendlyCountry))) {
        private enum enumMixinStr_NID_friendlyCountry = `enum NID_friendlyCountry = 453;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_friendlyCountry); }))) {
            mixin(enumMixinStr_NID_friendlyCountry);
        }
    }




    static if(!is(typeof(OBJ_friendlyCountry))) {
        private enum enumMixinStr_OBJ_friendlyCountry = `enum OBJ_friendlyCountry = 0L , 9L , 2342L , 19200300L , 100L , 4L , 18L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_friendlyCountry); }))) {
            mixin(enumMixinStr_OBJ_friendlyCountry);
        }
    }




    static if(!is(typeof(LN_simpleSecurityObject))) {
        private enum enumMixinStr_LN_simpleSecurityObject = `enum LN_simpleSecurityObject = "simpleSecurityObject";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_simpleSecurityObject); }))) {
            mixin(enumMixinStr_LN_simpleSecurityObject);
        }
    }




    static if(!is(typeof(NID_simpleSecurityObject))) {
        private enum enumMixinStr_NID_simpleSecurityObject = `enum NID_simpleSecurityObject = 454;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_simpleSecurityObject); }))) {
            mixin(enumMixinStr_NID_simpleSecurityObject);
        }
    }




    static if(!is(typeof(OBJ_simpleSecurityObject))) {
        private enum enumMixinStr_OBJ_simpleSecurityObject = `enum OBJ_simpleSecurityObject = 0L , 9L , 2342L , 19200300L , 100L , 4L , 19L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_simpleSecurityObject); }))) {
            mixin(enumMixinStr_OBJ_simpleSecurityObject);
        }
    }




    static if(!is(typeof(LN_pilotOrganization))) {
        private enum enumMixinStr_LN_pilotOrganization = `enum LN_pilotOrganization = "pilotOrganization";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_pilotOrganization); }))) {
            mixin(enumMixinStr_LN_pilotOrganization);
        }
    }




    static if(!is(typeof(NID_pilotOrganization))) {
        private enum enumMixinStr_NID_pilotOrganization = `enum NID_pilotOrganization = 455;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_pilotOrganization); }))) {
            mixin(enumMixinStr_NID_pilotOrganization);
        }
    }




    static if(!is(typeof(OBJ_pilotOrganization))) {
        private enum enumMixinStr_OBJ_pilotOrganization = `enum OBJ_pilotOrganization = 0L , 9L , 2342L , 19200300L , 100L , 4L , 20L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_pilotOrganization); }))) {
            mixin(enumMixinStr_OBJ_pilotOrganization);
        }
    }




    static if(!is(typeof(LN_pilotDSA))) {
        private enum enumMixinStr_LN_pilotDSA = `enum LN_pilotDSA = "pilotDSA";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_pilotDSA); }))) {
            mixin(enumMixinStr_LN_pilotDSA);
        }
    }




    static if(!is(typeof(NID_pilotDSA))) {
        private enum enumMixinStr_NID_pilotDSA = `enum NID_pilotDSA = 456;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_pilotDSA); }))) {
            mixin(enumMixinStr_NID_pilotDSA);
        }
    }




    static if(!is(typeof(OBJ_pilotDSA))) {
        private enum enumMixinStr_OBJ_pilotDSA = `enum OBJ_pilotDSA = 0L , 9L , 2342L , 19200300L , 100L , 4L , 21L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_pilotDSA); }))) {
            mixin(enumMixinStr_OBJ_pilotDSA);
        }
    }




    static if(!is(typeof(LN_qualityLabelledData))) {
        private enum enumMixinStr_LN_qualityLabelledData = `enum LN_qualityLabelledData = "qualityLabelledData";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_qualityLabelledData); }))) {
            mixin(enumMixinStr_LN_qualityLabelledData);
        }
    }




    static if(!is(typeof(NID_qualityLabelledData))) {
        private enum enumMixinStr_NID_qualityLabelledData = `enum NID_qualityLabelledData = 457;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_qualityLabelledData); }))) {
            mixin(enumMixinStr_NID_qualityLabelledData);
        }
    }




    static if(!is(typeof(OBJ_qualityLabelledData))) {
        private enum enumMixinStr_OBJ_qualityLabelledData = `enum OBJ_qualityLabelledData = 0L , 9L , 2342L , 19200300L , 100L , 4L , 22L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_qualityLabelledData); }))) {
            mixin(enumMixinStr_OBJ_qualityLabelledData);
        }
    }




    static if(!is(typeof(SN_userId))) {
        private enum enumMixinStr_SN_userId = `enum SN_userId = "UID";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_userId); }))) {
            mixin(enumMixinStr_SN_userId);
        }
    }




    static if(!is(typeof(LN_userId))) {
        private enum enumMixinStr_LN_userId = `enum LN_userId = "userId";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_userId); }))) {
            mixin(enumMixinStr_LN_userId);
        }
    }




    static if(!is(typeof(NID_userId))) {
        private enum enumMixinStr_NID_userId = `enum NID_userId = 458;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_userId); }))) {
            mixin(enumMixinStr_NID_userId);
        }
    }




    static if(!is(typeof(OBJ_userId))) {
        private enum enumMixinStr_OBJ_userId = `enum OBJ_userId = 0L , 9L , 2342L , 19200300L , 100L , 1L , 1L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_userId); }))) {
            mixin(enumMixinStr_OBJ_userId);
        }
    }




    static if(!is(typeof(LN_textEncodedORAddress))) {
        private enum enumMixinStr_LN_textEncodedORAddress = `enum LN_textEncodedORAddress = "textEncodedORAddress";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_textEncodedORAddress); }))) {
            mixin(enumMixinStr_LN_textEncodedORAddress);
        }
    }




    static if(!is(typeof(NID_textEncodedORAddress))) {
        private enum enumMixinStr_NID_textEncodedORAddress = `enum NID_textEncodedORAddress = 459;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_textEncodedORAddress); }))) {
            mixin(enumMixinStr_NID_textEncodedORAddress);
        }
    }




    static if(!is(typeof(OBJ_textEncodedORAddress))) {
        private enum enumMixinStr_OBJ_textEncodedORAddress = `enum OBJ_textEncodedORAddress = 0L , 9L , 2342L , 19200300L , 100L , 1L , 2L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_textEncodedORAddress); }))) {
            mixin(enumMixinStr_OBJ_textEncodedORAddress);
        }
    }




    static if(!is(typeof(SN_rfc822Mailbox))) {
        private enum enumMixinStr_SN_rfc822Mailbox = `enum SN_rfc822Mailbox = "mail";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_rfc822Mailbox); }))) {
            mixin(enumMixinStr_SN_rfc822Mailbox);
        }
    }




    static if(!is(typeof(LN_rfc822Mailbox))) {
        private enum enumMixinStr_LN_rfc822Mailbox = `enum LN_rfc822Mailbox = "rfc822Mailbox";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_rfc822Mailbox); }))) {
            mixin(enumMixinStr_LN_rfc822Mailbox);
        }
    }




    static if(!is(typeof(NID_rfc822Mailbox))) {
        private enum enumMixinStr_NID_rfc822Mailbox = `enum NID_rfc822Mailbox = 460;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_rfc822Mailbox); }))) {
            mixin(enumMixinStr_NID_rfc822Mailbox);
        }
    }




    static if(!is(typeof(OBJ_rfc822Mailbox))) {
        private enum enumMixinStr_OBJ_rfc822Mailbox = `enum OBJ_rfc822Mailbox = 0L , 9L , 2342L , 19200300L , 100L , 1L , 3L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_rfc822Mailbox); }))) {
            mixin(enumMixinStr_OBJ_rfc822Mailbox);
        }
    }




    static if(!is(typeof(SN_info))) {
        private enum enumMixinStr_SN_info = `enum SN_info = "info";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_info); }))) {
            mixin(enumMixinStr_SN_info);
        }
    }




    static if(!is(typeof(NID_info))) {
        private enum enumMixinStr_NID_info = `enum NID_info = 461;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_info); }))) {
            mixin(enumMixinStr_NID_info);
        }
    }




    static if(!is(typeof(OBJ_info))) {
        private enum enumMixinStr_OBJ_info = `enum OBJ_info = 0L , 9L , 2342L , 19200300L , 100L , 1L , 4L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_info); }))) {
            mixin(enumMixinStr_OBJ_info);
        }
    }




    static if(!is(typeof(LN_favouriteDrink))) {
        private enum enumMixinStr_LN_favouriteDrink = `enum LN_favouriteDrink = "favouriteDrink";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_favouriteDrink); }))) {
            mixin(enumMixinStr_LN_favouriteDrink);
        }
    }




    static if(!is(typeof(NID_favouriteDrink))) {
        private enum enumMixinStr_NID_favouriteDrink = `enum NID_favouriteDrink = 462;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_favouriteDrink); }))) {
            mixin(enumMixinStr_NID_favouriteDrink);
        }
    }




    static if(!is(typeof(OBJ_favouriteDrink))) {
        private enum enumMixinStr_OBJ_favouriteDrink = `enum OBJ_favouriteDrink = 0L , 9L , 2342L , 19200300L , 100L , 1L , 5L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_favouriteDrink); }))) {
            mixin(enumMixinStr_OBJ_favouriteDrink);
        }
    }




    static if(!is(typeof(LN_roomNumber))) {
        private enum enumMixinStr_LN_roomNumber = `enum LN_roomNumber = "roomNumber";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_roomNumber); }))) {
            mixin(enumMixinStr_LN_roomNumber);
        }
    }




    static if(!is(typeof(NID_roomNumber))) {
        private enum enumMixinStr_NID_roomNumber = `enum NID_roomNumber = 463;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_roomNumber); }))) {
            mixin(enumMixinStr_NID_roomNumber);
        }
    }




    static if(!is(typeof(OBJ_roomNumber))) {
        private enum enumMixinStr_OBJ_roomNumber = `enum OBJ_roomNumber = 0L , 9L , 2342L , 19200300L , 100L , 1L , 6L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_roomNumber); }))) {
            mixin(enumMixinStr_OBJ_roomNumber);
        }
    }




    static if(!is(typeof(SN_photo))) {
        private enum enumMixinStr_SN_photo = `enum SN_photo = "photo";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_photo); }))) {
            mixin(enumMixinStr_SN_photo);
        }
    }




    static if(!is(typeof(NID_photo))) {
        private enum enumMixinStr_NID_photo = `enum NID_photo = 464;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_photo); }))) {
            mixin(enumMixinStr_NID_photo);
        }
    }




    static if(!is(typeof(OBJ_photo))) {
        private enum enumMixinStr_OBJ_photo = `enum OBJ_photo = 0L , 9L , 2342L , 19200300L , 100L , 1L , 7L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_photo); }))) {
            mixin(enumMixinStr_OBJ_photo);
        }
    }




    static if(!is(typeof(LN_userClass))) {
        private enum enumMixinStr_LN_userClass = `enum LN_userClass = "userClass";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_userClass); }))) {
            mixin(enumMixinStr_LN_userClass);
        }
    }




    static if(!is(typeof(NID_userClass))) {
        private enum enumMixinStr_NID_userClass = `enum NID_userClass = 465;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_userClass); }))) {
            mixin(enumMixinStr_NID_userClass);
        }
    }




    static if(!is(typeof(OBJ_userClass))) {
        private enum enumMixinStr_OBJ_userClass = `enum OBJ_userClass = 0L , 9L , 2342L , 19200300L , 100L , 1L , 8L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_userClass); }))) {
            mixin(enumMixinStr_OBJ_userClass);
        }
    }




    static if(!is(typeof(SN_host))) {
        private enum enumMixinStr_SN_host = `enum SN_host = "host";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_host); }))) {
            mixin(enumMixinStr_SN_host);
        }
    }




    static if(!is(typeof(NID_host))) {
        private enum enumMixinStr_NID_host = `enum NID_host = 466;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_host); }))) {
            mixin(enumMixinStr_NID_host);
        }
    }




    static if(!is(typeof(OBJ_host))) {
        private enum enumMixinStr_OBJ_host = `enum OBJ_host = 0L , 9L , 2342L , 19200300L , 100L , 1L , 9L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_host); }))) {
            mixin(enumMixinStr_OBJ_host);
        }
    }




    static if(!is(typeof(SN_manager))) {
        private enum enumMixinStr_SN_manager = `enum SN_manager = "manager";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_manager); }))) {
            mixin(enumMixinStr_SN_manager);
        }
    }




    static if(!is(typeof(NID_manager))) {
        private enum enumMixinStr_NID_manager = `enum NID_manager = 467;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_manager); }))) {
            mixin(enumMixinStr_NID_manager);
        }
    }




    static if(!is(typeof(OBJ_manager))) {
        private enum enumMixinStr_OBJ_manager = `enum OBJ_manager = 0L , 9L , 2342L , 19200300L , 100L , 1L , 10L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_manager); }))) {
            mixin(enumMixinStr_OBJ_manager);
        }
    }




    static if(!is(typeof(LN_documentIdentifier))) {
        private enum enumMixinStr_LN_documentIdentifier = `enum LN_documentIdentifier = "documentIdentifier";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_documentIdentifier); }))) {
            mixin(enumMixinStr_LN_documentIdentifier);
        }
    }




    static if(!is(typeof(NID_documentIdentifier))) {
        private enum enumMixinStr_NID_documentIdentifier = `enum NID_documentIdentifier = 468;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_documentIdentifier); }))) {
            mixin(enumMixinStr_NID_documentIdentifier);
        }
    }




    static if(!is(typeof(OBJ_documentIdentifier))) {
        private enum enumMixinStr_OBJ_documentIdentifier = `enum OBJ_documentIdentifier = 0L , 9L , 2342L , 19200300L , 100L , 1L , 11L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_documentIdentifier); }))) {
            mixin(enumMixinStr_OBJ_documentIdentifier);
        }
    }




    static if(!is(typeof(LN_documentTitle))) {
        private enum enumMixinStr_LN_documentTitle = `enum LN_documentTitle = "documentTitle";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_documentTitle); }))) {
            mixin(enumMixinStr_LN_documentTitle);
        }
    }




    static if(!is(typeof(NID_documentTitle))) {
        private enum enumMixinStr_NID_documentTitle = `enum NID_documentTitle = 469;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_documentTitle); }))) {
            mixin(enumMixinStr_NID_documentTitle);
        }
    }




    static if(!is(typeof(OBJ_documentTitle))) {
        private enum enumMixinStr_OBJ_documentTitle = `enum OBJ_documentTitle = 0L , 9L , 2342L , 19200300L , 100L , 1L , 12L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_documentTitle); }))) {
            mixin(enumMixinStr_OBJ_documentTitle);
        }
    }




    static if(!is(typeof(LN_documentVersion))) {
        private enum enumMixinStr_LN_documentVersion = `enum LN_documentVersion = "documentVersion";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_documentVersion); }))) {
            mixin(enumMixinStr_LN_documentVersion);
        }
    }




    static if(!is(typeof(NID_documentVersion))) {
        private enum enumMixinStr_NID_documentVersion = `enum NID_documentVersion = 470;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_documentVersion); }))) {
            mixin(enumMixinStr_NID_documentVersion);
        }
    }




    static if(!is(typeof(OBJ_documentVersion))) {
        private enum enumMixinStr_OBJ_documentVersion = `enum OBJ_documentVersion = 0L , 9L , 2342L , 19200300L , 100L , 1L , 13L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_documentVersion); }))) {
            mixin(enumMixinStr_OBJ_documentVersion);
        }
    }




    static if(!is(typeof(LN_documentAuthor))) {
        private enum enumMixinStr_LN_documentAuthor = `enum LN_documentAuthor = "documentAuthor";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_documentAuthor); }))) {
            mixin(enumMixinStr_LN_documentAuthor);
        }
    }




    static if(!is(typeof(NID_documentAuthor))) {
        private enum enumMixinStr_NID_documentAuthor = `enum NID_documentAuthor = 471;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_documentAuthor); }))) {
            mixin(enumMixinStr_NID_documentAuthor);
        }
    }




    static if(!is(typeof(OBJ_documentAuthor))) {
        private enum enumMixinStr_OBJ_documentAuthor = `enum OBJ_documentAuthor = 0L , 9L , 2342L , 19200300L , 100L , 1L , 14L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_documentAuthor); }))) {
            mixin(enumMixinStr_OBJ_documentAuthor);
        }
    }




    static if(!is(typeof(LN_documentLocation))) {
        private enum enumMixinStr_LN_documentLocation = `enum LN_documentLocation = "documentLocation";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_documentLocation); }))) {
            mixin(enumMixinStr_LN_documentLocation);
        }
    }




    static if(!is(typeof(NID_documentLocation))) {
        private enum enumMixinStr_NID_documentLocation = `enum NID_documentLocation = 472;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_documentLocation); }))) {
            mixin(enumMixinStr_NID_documentLocation);
        }
    }




    static if(!is(typeof(OBJ_documentLocation))) {
        private enum enumMixinStr_OBJ_documentLocation = `enum OBJ_documentLocation = 0L , 9L , 2342L , 19200300L , 100L , 1L , 15L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_documentLocation); }))) {
            mixin(enumMixinStr_OBJ_documentLocation);
        }
    }




    static if(!is(typeof(LN_homeTelephoneNumber))) {
        private enum enumMixinStr_LN_homeTelephoneNumber = `enum LN_homeTelephoneNumber = "homeTelephoneNumber";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_homeTelephoneNumber); }))) {
            mixin(enumMixinStr_LN_homeTelephoneNumber);
        }
    }




    static if(!is(typeof(NID_homeTelephoneNumber))) {
        private enum enumMixinStr_NID_homeTelephoneNumber = `enum NID_homeTelephoneNumber = 473;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_homeTelephoneNumber); }))) {
            mixin(enumMixinStr_NID_homeTelephoneNumber);
        }
    }




    static if(!is(typeof(OBJ_homeTelephoneNumber))) {
        private enum enumMixinStr_OBJ_homeTelephoneNumber = `enum OBJ_homeTelephoneNumber = 0L , 9L , 2342L , 19200300L , 100L , 1L , 20L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_homeTelephoneNumber); }))) {
            mixin(enumMixinStr_OBJ_homeTelephoneNumber);
        }
    }




    static if(!is(typeof(SN_secretary))) {
        private enum enumMixinStr_SN_secretary = `enum SN_secretary = "secretary";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_secretary); }))) {
            mixin(enumMixinStr_SN_secretary);
        }
    }




    static if(!is(typeof(NID_secretary))) {
        private enum enumMixinStr_NID_secretary = `enum NID_secretary = 474;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_secretary); }))) {
            mixin(enumMixinStr_NID_secretary);
        }
    }




    static if(!is(typeof(OBJ_secretary))) {
        private enum enumMixinStr_OBJ_secretary = `enum OBJ_secretary = 0L , 9L , 2342L , 19200300L , 100L , 1L , 21L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_secretary); }))) {
            mixin(enumMixinStr_OBJ_secretary);
        }
    }




    static if(!is(typeof(LN_otherMailbox))) {
        private enum enumMixinStr_LN_otherMailbox = `enum LN_otherMailbox = "otherMailbox";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_otherMailbox); }))) {
            mixin(enumMixinStr_LN_otherMailbox);
        }
    }




    static if(!is(typeof(NID_otherMailbox))) {
        private enum enumMixinStr_NID_otherMailbox = `enum NID_otherMailbox = 475;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_otherMailbox); }))) {
            mixin(enumMixinStr_NID_otherMailbox);
        }
    }




    static if(!is(typeof(OBJ_otherMailbox))) {
        private enum enumMixinStr_OBJ_otherMailbox = `enum OBJ_otherMailbox = 0L , 9L , 2342L , 19200300L , 100L , 1L , 22L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_otherMailbox); }))) {
            mixin(enumMixinStr_OBJ_otherMailbox);
        }
    }




    static if(!is(typeof(LN_lastModifiedTime))) {
        private enum enumMixinStr_LN_lastModifiedTime = `enum LN_lastModifiedTime = "lastModifiedTime";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_lastModifiedTime); }))) {
            mixin(enumMixinStr_LN_lastModifiedTime);
        }
    }




    static if(!is(typeof(NID_lastModifiedTime))) {
        private enum enumMixinStr_NID_lastModifiedTime = `enum NID_lastModifiedTime = 476;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_lastModifiedTime); }))) {
            mixin(enumMixinStr_NID_lastModifiedTime);
        }
    }




    static if(!is(typeof(OBJ_lastModifiedTime))) {
        private enum enumMixinStr_OBJ_lastModifiedTime = `enum OBJ_lastModifiedTime = 0L , 9L , 2342L , 19200300L , 100L , 1L , 23L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_lastModifiedTime); }))) {
            mixin(enumMixinStr_OBJ_lastModifiedTime);
        }
    }




    static if(!is(typeof(LN_lastModifiedBy))) {
        private enum enumMixinStr_LN_lastModifiedBy = `enum LN_lastModifiedBy = "lastModifiedBy";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_lastModifiedBy); }))) {
            mixin(enumMixinStr_LN_lastModifiedBy);
        }
    }




    static if(!is(typeof(NID_lastModifiedBy))) {
        private enum enumMixinStr_NID_lastModifiedBy = `enum NID_lastModifiedBy = 477;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_lastModifiedBy); }))) {
            mixin(enumMixinStr_NID_lastModifiedBy);
        }
    }




    static if(!is(typeof(OBJ_lastModifiedBy))) {
        private enum enumMixinStr_OBJ_lastModifiedBy = `enum OBJ_lastModifiedBy = 0L , 9L , 2342L , 19200300L , 100L , 1L , 24L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_lastModifiedBy); }))) {
            mixin(enumMixinStr_OBJ_lastModifiedBy);
        }
    }




    static if(!is(typeof(SN_domainComponent))) {
        private enum enumMixinStr_SN_domainComponent = `enum SN_domainComponent = "DC";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_domainComponent); }))) {
            mixin(enumMixinStr_SN_domainComponent);
        }
    }




    static if(!is(typeof(LN_domainComponent))) {
        private enum enumMixinStr_LN_domainComponent = `enum LN_domainComponent = "domainComponent";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_domainComponent); }))) {
            mixin(enumMixinStr_LN_domainComponent);
        }
    }




    static if(!is(typeof(NID_domainComponent))) {
        private enum enumMixinStr_NID_domainComponent = `enum NID_domainComponent = 391;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_domainComponent); }))) {
            mixin(enumMixinStr_NID_domainComponent);
        }
    }




    static if(!is(typeof(OBJ_domainComponent))) {
        private enum enumMixinStr_OBJ_domainComponent = `enum OBJ_domainComponent = 0L , 9L , 2342L , 19200300L , 100L , 1L , 25L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_domainComponent); }))) {
            mixin(enumMixinStr_OBJ_domainComponent);
        }
    }




    static if(!is(typeof(LN_aRecord))) {
        private enum enumMixinStr_LN_aRecord = `enum LN_aRecord = "aRecord";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_aRecord); }))) {
            mixin(enumMixinStr_LN_aRecord);
        }
    }




    static if(!is(typeof(NID_aRecord))) {
        private enum enumMixinStr_NID_aRecord = `enum NID_aRecord = 478;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_aRecord); }))) {
            mixin(enumMixinStr_NID_aRecord);
        }
    }




    static if(!is(typeof(OBJ_aRecord))) {
        private enum enumMixinStr_OBJ_aRecord = `enum OBJ_aRecord = 0L , 9L , 2342L , 19200300L , 100L , 1L , 26L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_aRecord); }))) {
            mixin(enumMixinStr_OBJ_aRecord);
        }
    }




    static if(!is(typeof(LN_pilotAttributeType27))) {
        private enum enumMixinStr_LN_pilotAttributeType27 = `enum LN_pilotAttributeType27 = "pilotAttributeType27";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_pilotAttributeType27); }))) {
            mixin(enumMixinStr_LN_pilotAttributeType27);
        }
    }




    static if(!is(typeof(NID_pilotAttributeType27))) {
        private enum enumMixinStr_NID_pilotAttributeType27 = `enum NID_pilotAttributeType27 = 479;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_pilotAttributeType27); }))) {
            mixin(enumMixinStr_NID_pilotAttributeType27);
        }
    }




    static if(!is(typeof(OBJ_pilotAttributeType27))) {
        private enum enumMixinStr_OBJ_pilotAttributeType27 = `enum OBJ_pilotAttributeType27 = 0L , 9L , 2342L , 19200300L , 100L , 1L , 27L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_pilotAttributeType27); }))) {
            mixin(enumMixinStr_OBJ_pilotAttributeType27);
        }
    }




    static if(!is(typeof(LN_mXRecord))) {
        private enum enumMixinStr_LN_mXRecord = `enum LN_mXRecord = "mXRecord";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_mXRecord); }))) {
            mixin(enumMixinStr_LN_mXRecord);
        }
    }




    static if(!is(typeof(NID_mXRecord))) {
        private enum enumMixinStr_NID_mXRecord = `enum NID_mXRecord = 480;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_mXRecord); }))) {
            mixin(enumMixinStr_NID_mXRecord);
        }
    }




    static if(!is(typeof(OBJ_mXRecord))) {
        private enum enumMixinStr_OBJ_mXRecord = `enum OBJ_mXRecord = 0L , 9L , 2342L , 19200300L , 100L , 1L , 28L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_mXRecord); }))) {
            mixin(enumMixinStr_OBJ_mXRecord);
        }
    }




    static if(!is(typeof(LN_nSRecord))) {
        private enum enumMixinStr_LN_nSRecord = `enum LN_nSRecord = "nSRecord";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_nSRecord); }))) {
            mixin(enumMixinStr_LN_nSRecord);
        }
    }




    static if(!is(typeof(NID_nSRecord))) {
        private enum enumMixinStr_NID_nSRecord = `enum NID_nSRecord = 481;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_nSRecord); }))) {
            mixin(enumMixinStr_NID_nSRecord);
        }
    }




    static if(!is(typeof(OBJ_nSRecord))) {
        private enum enumMixinStr_OBJ_nSRecord = `enum OBJ_nSRecord = 0L , 9L , 2342L , 19200300L , 100L , 1L , 29L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_nSRecord); }))) {
            mixin(enumMixinStr_OBJ_nSRecord);
        }
    }




    static if(!is(typeof(LN_sOARecord))) {
        private enum enumMixinStr_LN_sOARecord = `enum LN_sOARecord = "sOARecord";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_sOARecord); }))) {
            mixin(enumMixinStr_LN_sOARecord);
        }
    }




    static if(!is(typeof(NID_sOARecord))) {
        private enum enumMixinStr_NID_sOARecord = `enum NID_sOARecord = 482;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_sOARecord); }))) {
            mixin(enumMixinStr_NID_sOARecord);
        }
    }




    static if(!is(typeof(OBJ_sOARecord))) {
        private enum enumMixinStr_OBJ_sOARecord = `enum OBJ_sOARecord = 0L , 9L , 2342L , 19200300L , 100L , 1L , 30L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_sOARecord); }))) {
            mixin(enumMixinStr_OBJ_sOARecord);
        }
    }




    static if(!is(typeof(LN_cNAMERecord))) {
        private enum enumMixinStr_LN_cNAMERecord = `enum LN_cNAMERecord = "cNAMERecord";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_cNAMERecord); }))) {
            mixin(enumMixinStr_LN_cNAMERecord);
        }
    }




    static if(!is(typeof(NID_cNAMERecord))) {
        private enum enumMixinStr_NID_cNAMERecord = `enum NID_cNAMERecord = 483;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_cNAMERecord); }))) {
            mixin(enumMixinStr_NID_cNAMERecord);
        }
    }




    static if(!is(typeof(OBJ_cNAMERecord))) {
        private enum enumMixinStr_OBJ_cNAMERecord = `enum OBJ_cNAMERecord = 0L , 9L , 2342L , 19200300L , 100L , 1L , 31L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_cNAMERecord); }))) {
            mixin(enumMixinStr_OBJ_cNAMERecord);
        }
    }




    static if(!is(typeof(LN_associatedDomain))) {
        private enum enumMixinStr_LN_associatedDomain = `enum LN_associatedDomain = "associatedDomain";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_associatedDomain); }))) {
            mixin(enumMixinStr_LN_associatedDomain);
        }
    }




    static if(!is(typeof(NID_associatedDomain))) {
        private enum enumMixinStr_NID_associatedDomain = `enum NID_associatedDomain = 484;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_associatedDomain); }))) {
            mixin(enumMixinStr_NID_associatedDomain);
        }
    }




    static if(!is(typeof(OBJ_associatedDomain))) {
        private enum enumMixinStr_OBJ_associatedDomain = `enum OBJ_associatedDomain = 0L , 9L , 2342L , 19200300L , 100L , 1L , 37L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_associatedDomain); }))) {
            mixin(enumMixinStr_OBJ_associatedDomain);
        }
    }




    static if(!is(typeof(LN_associatedName))) {
        private enum enumMixinStr_LN_associatedName = `enum LN_associatedName = "associatedName";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_associatedName); }))) {
            mixin(enumMixinStr_LN_associatedName);
        }
    }




    static if(!is(typeof(NID_associatedName))) {
        private enum enumMixinStr_NID_associatedName = `enum NID_associatedName = 485;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_associatedName); }))) {
            mixin(enumMixinStr_NID_associatedName);
        }
    }




    static if(!is(typeof(OBJ_associatedName))) {
        private enum enumMixinStr_OBJ_associatedName = `enum OBJ_associatedName = 0L , 9L , 2342L , 19200300L , 100L , 1L , 38L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_associatedName); }))) {
            mixin(enumMixinStr_OBJ_associatedName);
        }
    }




    static if(!is(typeof(LN_homePostalAddress))) {
        private enum enumMixinStr_LN_homePostalAddress = `enum LN_homePostalAddress = "homePostalAddress";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_homePostalAddress); }))) {
            mixin(enumMixinStr_LN_homePostalAddress);
        }
    }




    static if(!is(typeof(NID_homePostalAddress))) {
        private enum enumMixinStr_NID_homePostalAddress = `enum NID_homePostalAddress = 486;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_homePostalAddress); }))) {
            mixin(enumMixinStr_NID_homePostalAddress);
        }
    }




    static if(!is(typeof(OBJ_homePostalAddress))) {
        private enum enumMixinStr_OBJ_homePostalAddress = `enum OBJ_homePostalAddress = 0L , 9L , 2342L , 19200300L , 100L , 1L , 39L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_homePostalAddress); }))) {
            mixin(enumMixinStr_OBJ_homePostalAddress);
        }
    }




    static if(!is(typeof(LN_personalTitle))) {
        private enum enumMixinStr_LN_personalTitle = `enum LN_personalTitle = "personalTitle";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_personalTitle); }))) {
            mixin(enumMixinStr_LN_personalTitle);
        }
    }




    static if(!is(typeof(NID_personalTitle))) {
        private enum enumMixinStr_NID_personalTitle = `enum NID_personalTitle = 487;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_personalTitle); }))) {
            mixin(enumMixinStr_NID_personalTitle);
        }
    }




    static if(!is(typeof(OBJ_personalTitle))) {
        private enum enumMixinStr_OBJ_personalTitle = `enum OBJ_personalTitle = 0L , 9L , 2342L , 19200300L , 100L , 1L , 40L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_personalTitle); }))) {
            mixin(enumMixinStr_OBJ_personalTitle);
        }
    }




    static if(!is(typeof(LN_mobileTelephoneNumber))) {
        private enum enumMixinStr_LN_mobileTelephoneNumber = `enum LN_mobileTelephoneNumber = "mobileTelephoneNumber";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_mobileTelephoneNumber); }))) {
            mixin(enumMixinStr_LN_mobileTelephoneNumber);
        }
    }




    static if(!is(typeof(NID_mobileTelephoneNumber))) {
        private enum enumMixinStr_NID_mobileTelephoneNumber = `enum NID_mobileTelephoneNumber = 488;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_mobileTelephoneNumber); }))) {
            mixin(enumMixinStr_NID_mobileTelephoneNumber);
        }
    }




    static if(!is(typeof(OBJ_mobileTelephoneNumber))) {
        private enum enumMixinStr_OBJ_mobileTelephoneNumber = `enum OBJ_mobileTelephoneNumber = 0L , 9L , 2342L , 19200300L , 100L , 1L , 41L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_mobileTelephoneNumber); }))) {
            mixin(enumMixinStr_OBJ_mobileTelephoneNumber);
        }
    }




    static if(!is(typeof(LN_pagerTelephoneNumber))) {
        private enum enumMixinStr_LN_pagerTelephoneNumber = `enum LN_pagerTelephoneNumber = "pagerTelephoneNumber";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_pagerTelephoneNumber); }))) {
            mixin(enumMixinStr_LN_pagerTelephoneNumber);
        }
    }




    static if(!is(typeof(NID_pagerTelephoneNumber))) {
        private enum enumMixinStr_NID_pagerTelephoneNumber = `enum NID_pagerTelephoneNumber = 489;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_pagerTelephoneNumber); }))) {
            mixin(enumMixinStr_NID_pagerTelephoneNumber);
        }
    }




    static if(!is(typeof(OBJ_pagerTelephoneNumber))) {
        private enum enumMixinStr_OBJ_pagerTelephoneNumber = `enum OBJ_pagerTelephoneNumber = 0L , 9L , 2342L , 19200300L , 100L , 1L , 42L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_pagerTelephoneNumber); }))) {
            mixin(enumMixinStr_OBJ_pagerTelephoneNumber);
        }
    }




    static if(!is(typeof(LN_friendlyCountryName))) {
        private enum enumMixinStr_LN_friendlyCountryName = `enum LN_friendlyCountryName = "friendlyCountryName";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_friendlyCountryName); }))) {
            mixin(enumMixinStr_LN_friendlyCountryName);
        }
    }




    static if(!is(typeof(NID_friendlyCountryName))) {
        private enum enumMixinStr_NID_friendlyCountryName = `enum NID_friendlyCountryName = 490;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_friendlyCountryName); }))) {
            mixin(enumMixinStr_NID_friendlyCountryName);
        }
    }




    static if(!is(typeof(OBJ_friendlyCountryName))) {
        private enum enumMixinStr_OBJ_friendlyCountryName = `enum OBJ_friendlyCountryName = 0L , 9L , 2342L , 19200300L , 100L , 1L , 43L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_friendlyCountryName); }))) {
            mixin(enumMixinStr_OBJ_friendlyCountryName);
        }
    }




    static if(!is(typeof(SN_uniqueIdentifier))) {
        private enum enumMixinStr_SN_uniqueIdentifier = `enum SN_uniqueIdentifier = "uid";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_uniqueIdentifier); }))) {
            mixin(enumMixinStr_SN_uniqueIdentifier);
        }
    }




    static if(!is(typeof(LN_uniqueIdentifier))) {
        private enum enumMixinStr_LN_uniqueIdentifier = `enum LN_uniqueIdentifier = "uniqueIdentifier";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_uniqueIdentifier); }))) {
            mixin(enumMixinStr_LN_uniqueIdentifier);
        }
    }




    static if(!is(typeof(NID_uniqueIdentifier))) {
        private enum enumMixinStr_NID_uniqueIdentifier = `enum NID_uniqueIdentifier = 102;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_uniqueIdentifier); }))) {
            mixin(enumMixinStr_NID_uniqueIdentifier);
        }
    }




    static if(!is(typeof(OBJ_uniqueIdentifier))) {
        private enum enumMixinStr_OBJ_uniqueIdentifier = `enum OBJ_uniqueIdentifier = 0L , 9L , 2342L , 19200300L , 100L , 1L , 44L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_uniqueIdentifier); }))) {
            mixin(enumMixinStr_OBJ_uniqueIdentifier);
        }
    }




    static if(!is(typeof(LN_organizationalStatus))) {
        private enum enumMixinStr_LN_organizationalStatus = `enum LN_organizationalStatus = "organizationalStatus";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_organizationalStatus); }))) {
            mixin(enumMixinStr_LN_organizationalStatus);
        }
    }




    static if(!is(typeof(NID_organizationalStatus))) {
        private enum enumMixinStr_NID_organizationalStatus = `enum NID_organizationalStatus = 491;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_organizationalStatus); }))) {
            mixin(enumMixinStr_NID_organizationalStatus);
        }
    }




    static if(!is(typeof(OBJ_organizationalStatus))) {
        private enum enumMixinStr_OBJ_organizationalStatus = `enum OBJ_organizationalStatus = 0L , 9L , 2342L , 19200300L , 100L , 1L , 45L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_organizationalStatus); }))) {
            mixin(enumMixinStr_OBJ_organizationalStatus);
        }
    }




    static if(!is(typeof(LN_janetMailbox))) {
        private enum enumMixinStr_LN_janetMailbox = `enum LN_janetMailbox = "janetMailbox";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_janetMailbox); }))) {
            mixin(enumMixinStr_LN_janetMailbox);
        }
    }




    static if(!is(typeof(NID_janetMailbox))) {
        private enum enumMixinStr_NID_janetMailbox = `enum NID_janetMailbox = 492;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_janetMailbox); }))) {
            mixin(enumMixinStr_NID_janetMailbox);
        }
    }




    static if(!is(typeof(OBJ_janetMailbox))) {
        private enum enumMixinStr_OBJ_janetMailbox = `enum OBJ_janetMailbox = 0L , 9L , 2342L , 19200300L , 100L , 1L , 46L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_janetMailbox); }))) {
            mixin(enumMixinStr_OBJ_janetMailbox);
        }
    }




    static if(!is(typeof(LN_mailPreferenceOption))) {
        private enum enumMixinStr_LN_mailPreferenceOption = `enum LN_mailPreferenceOption = "mailPreferenceOption";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_mailPreferenceOption); }))) {
            mixin(enumMixinStr_LN_mailPreferenceOption);
        }
    }




    static if(!is(typeof(NID_mailPreferenceOption))) {
        private enum enumMixinStr_NID_mailPreferenceOption = `enum NID_mailPreferenceOption = 493;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_mailPreferenceOption); }))) {
            mixin(enumMixinStr_NID_mailPreferenceOption);
        }
    }




    static if(!is(typeof(OBJ_mailPreferenceOption))) {
        private enum enumMixinStr_OBJ_mailPreferenceOption = `enum OBJ_mailPreferenceOption = 0L , 9L , 2342L , 19200300L , 100L , 1L , 47L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_mailPreferenceOption); }))) {
            mixin(enumMixinStr_OBJ_mailPreferenceOption);
        }
    }




    static if(!is(typeof(LN_buildingName))) {
        private enum enumMixinStr_LN_buildingName = `enum LN_buildingName = "buildingName";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_buildingName); }))) {
            mixin(enumMixinStr_LN_buildingName);
        }
    }




    static if(!is(typeof(NID_buildingName))) {
        private enum enumMixinStr_NID_buildingName = `enum NID_buildingName = 494;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_buildingName); }))) {
            mixin(enumMixinStr_NID_buildingName);
        }
    }




    static if(!is(typeof(OBJ_buildingName))) {
        private enum enumMixinStr_OBJ_buildingName = `enum OBJ_buildingName = 0L , 9L , 2342L , 19200300L , 100L , 1L , 48L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_buildingName); }))) {
            mixin(enumMixinStr_OBJ_buildingName);
        }
    }




    static if(!is(typeof(LN_dSAQuality))) {
        private enum enumMixinStr_LN_dSAQuality = `enum LN_dSAQuality = "dSAQuality";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_dSAQuality); }))) {
            mixin(enumMixinStr_LN_dSAQuality);
        }
    }




    static if(!is(typeof(NID_dSAQuality))) {
        private enum enumMixinStr_NID_dSAQuality = `enum NID_dSAQuality = 495;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_dSAQuality); }))) {
            mixin(enumMixinStr_NID_dSAQuality);
        }
    }




    static if(!is(typeof(OBJ_dSAQuality))) {
        private enum enumMixinStr_OBJ_dSAQuality = `enum OBJ_dSAQuality = 0L , 9L , 2342L , 19200300L , 100L , 1L , 49L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_dSAQuality); }))) {
            mixin(enumMixinStr_OBJ_dSAQuality);
        }
    }




    static if(!is(typeof(LN_singleLevelQuality))) {
        private enum enumMixinStr_LN_singleLevelQuality = `enum LN_singleLevelQuality = "singleLevelQuality";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_singleLevelQuality); }))) {
            mixin(enumMixinStr_LN_singleLevelQuality);
        }
    }




    static if(!is(typeof(NID_singleLevelQuality))) {
        private enum enumMixinStr_NID_singleLevelQuality = `enum NID_singleLevelQuality = 496;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_singleLevelQuality); }))) {
            mixin(enumMixinStr_NID_singleLevelQuality);
        }
    }




    static if(!is(typeof(OBJ_singleLevelQuality))) {
        private enum enumMixinStr_OBJ_singleLevelQuality = `enum OBJ_singleLevelQuality = 0L , 9L , 2342L , 19200300L , 100L , 1L , 50L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_singleLevelQuality); }))) {
            mixin(enumMixinStr_OBJ_singleLevelQuality);
        }
    }




    static if(!is(typeof(LN_subtreeMinimumQuality))) {
        private enum enumMixinStr_LN_subtreeMinimumQuality = `enum LN_subtreeMinimumQuality = "subtreeMinimumQuality";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_subtreeMinimumQuality); }))) {
            mixin(enumMixinStr_LN_subtreeMinimumQuality);
        }
    }




    static if(!is(typeof(NID_subtreeMinimumQuality))) {
        private enum enumMixinStr_NID_subtreeMinimumQuality = `enum NID_subtreeMinimumQuality = 497;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_subtreeMinimumQuality); }))) {
            mixin(enumMixinStr_NID_subtreeMinimumQuality);
        }
    }




    static if(!is(typeof(OBJ_subtreeMinimumQuality))) {
        private enum enumMixinStr_OBJ_subtreeMinimumQuality = `enum OBJ_subtreeMinimumQuality = 0L , 9L , 2342L , 19200300L , 100L , 1L , 51L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_subtreeMinimumQuality); }))) {
            mixin(enumMixinStr_OBJ_subtreeMinimumQuality);
        }
    }




    static if(!is(typeof(LN_subtreeMaximumQuality))) {
        private enum enumMixinStr_LN_subtreeMaximumQuality = `enum LN_subtreeMaximumQuality = "subtreeMaximumQuality";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_subtreeMaximumQuality); }))) {
            mixin(enumMixinStr_LN_subtreeMaximumQuality);
        }
    }




    static if(!is(typeof(NID_subtreeMaximumQuality))) {
        private enum enumMixinStr_NID_subtreeMaximumQuality = `enum NID_subtreeMaximumQuality = 498;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_subtreeMaximumQuality); }))) {
            mixin(enumMixinStr_NID_subtreeMaximumQuality);
        }
    }




    static if(!is(typeof(OBJ_subtreeMaximumQuality))) {
        private enum enumMixinStr_OBJ_subtreeMaximumQuality = `enum OBJ_subtreeMaximumQuality = 0L , 9L , 2342L , 19200300L , 100L , 1L , 52L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_subtreeMaximumQuality); }))) {
            mixin(enumMixinStr_OBJ_subtreeMaximumQuality);
        }
    }




    static if(!is(typeof(LN_personalSignature))) {
        private enum enumMixinStr_LN_personalSignature = `enum LN_personalSignature = "personalSignature";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_personalSignature); }))) {
            mixin(enumMixinStr_LN_personalSignature);
        }
    }




    static if(!is(typeof(NID_personalSignature))) {
        private enum enumMixinStr_NID_personalSignature = `enum NID_personalSignature = 499;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_personalSignature); }))) {
            mixin(enumMixinStr_NID_personalSignature);
        }
    }




    static if(!is(typeof(OBJ_personalSignature))) {
        private enum enumMixinStr_OBJ_personalSignature = `enum OBJ_personalSignature = 0L , 9L , 2342L , 19200300L , 100L , 1L , 53L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_personalSignature); }))) {
            mixin(enumMixinStr_OBJ_personalSignature);
        }
    }




    static if(!is(typeof(LN_dITRedirect))) {
        private enum enumMixinStr_LN_dITRedirect = `enum LN_dITRedirect = "dITRedirect";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_dITRedirect); }))) {
            mixin(enumMixinStr_LN_dITRedirect);
        }
    }




    static if(!is(typeof(NID_dITRedirect))) {
        private enum enumMixinStr_NID_dITRedirect = `enum NID_dITRedirect = 500;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_dITRedirect); }))) {
            mixin(enumMixinStr_NID_dITRedirect);
        }
    }




    static if(!is(typeof(OBJ_dITRedirect))) {
        private enum enumMixinStr_OBJ_dITRedirect = `enum OBJ_dITRedirect = 0L , 9L , 2342L , 19200300L , 100L , 1L , 54L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_dITRedirect); }))) {
            mixin(enumMixinStr_OBJ_dITRedirect);
        }
    }




    static if(!is(typeof(SN_audio))) {
        private enum enumMixinStr_SN_audio = `enum SN_audio = "audio";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_audio); }))) {
            mixin(enumMixinStr_SN_audio);
        }
    }




    static if(!is(typeof(NID_audio))) {
        private enum enumMixinStr_NID_audio = `enum NID_audio = 501;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_audio); }))) {
            mixin(enumMixinStr_NID_audio);
        }
    }




    static if(!is(typeof(OBJ_audio))) {
        private enum enumMixinStr_OBJ_audio = `enum OBJ_audio = 0L , 9L , 2342L , 19200300L , 100L , 1L , 55L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_audio); }))) {
            mixin(enumMixinStr_OBJ_audio);
        }
    }




    static if(!is(typeof(LN_documentPublisher))) {
        private enum enumMixinStr_LN_documentPublisher = `enum LN_documentPublisher = "documentPublisher";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_documentPublisher); }))) {
            mixin(enumMixinStr_LN_documentPublisher);
        }
    }




    static if(!is(typeof(NID_documentPublisher))) {
        private enum enumMixinStr_NID_documentPublisher = `enum NID_documentPublisher = 502;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_documentPublisher); }))) {
            mixin(enumMixinStr_NID_documentPublisher);
        }
    }




    static if(!is(typeof(OBJ_documentPublisher))) {
        private enum enumMixinStr_OBJ_documentPublisher = `enum OBJ_documentPublisher = 0L , 9L , 2342L , 19200300L , 100L , 1L , 56L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_documentPublisher); }))) {
            mixin(enumMixinStr_OBJ_documentPublisher);
        }
    }




    static if(!is(typeof(SN_id_set))) {
        private enum enumMixinStr_SN_id_set = `enum SN_id_set = "id-set";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_set); }))) {
            mixin(enumMixinStr_SN_id_set);
        }
    }




    static if(!is(typeof(LN_id_set))) {
        private enum enumMixinStr_LN_id_set = `enum LN_id_set = "Secure Electronic Transactions";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_id_set); }))) {
            mixin(enumMixinStr_LN_id_set);
        }
    }




    static if(!is(typeof(NID_id_set))) {
        private enum enumMixinStr_NID_id_set = `enum NID_id_set = 512;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_set); }))) {
            mixin(enumMixinStr_NID_id_set);
        }
    }




    static if(!is(typeof(OBJ_id_set))) {
        private enum enumMixinStr_OBJ_id_set = `enum OBJ_id_set = 2L , 23L , 42L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_set); }))) {
            mixin(enumMixinStr_OBJ_id_set);
        }
    }




    static if(!is(typeof(SN_set_ctype))) {
        private enum enumMixinStr_SN_set_ctype = `enum SN_set_ctype = "set-ctype";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_set_ctype); }))) {
            mixin(enumMixinStr_SN_set_ctype);
        }
    }




    static if(!is(typeof(LN_set_ctype))) {
        private enum enumMixinStr_LN_set_ctype = `enum LN_set_ctype = "content types";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_set_ctype); }))) {
            mixin(enumMixinStr_LN_set_ctype);
        }
    }




    static if(!is(typeof(NID_set_ctype))) {
        private enum enumMixinStr_NID_set_ctype = `enum NID_set_ctype = 513;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_set_ctype); }))) {
            mixin(enumMixinStr_NID_set_ctype);
        }
    }




    static if(!is(typeof(OBJ_set_ctype))) {
        private enum enumMixinStr_OBJ_set_ctype = `enum OBJ_set_ctype = 2L , 23L , 42L , 0L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_set_ctype); }))) {
            mixin(enumMixinStr_OBJ_set_ctype);
        }
    }




    static if(!is(typeof(SN_set_msgExt))) {
        private enum enumMixinStr_SN_set_msgExt = `enum SN_set_msgExt = "set-msgExt";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_set_msgExt); }))) {
            mixin(enumMixinStr_SN_set_msgExt);
        }
    }




    static if(!is(typeof(LN_set_msgExt))) {
        private enum enumMixinStr_LN_set_msgExt = `enum LN_set_msgExt = "message extensions";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_set_msgExt); }))) {
            mixin(enumMixinStr_LN_set_msgExt);
        }
    }




    static if(!is(typeof(NID_set_msgExt))) {
        private enum enumMixinStr_NID_set_msgExt = `enum NID_set_msgExt = 514;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_set_msgExt); }))) {
            mixin(enumMixinStr_NID_set_msgExt);
        }
    }




    static if(!is(typeof(OBJ_set_msgExt))) {
        private enum enumMixinStr_OBJ_set_msgExt = `enum OBJ_set_msgExt = 2L , 23L , 42L , 1L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_set_msgExt); }))) {
            mixin(enumMixinStr_OBJ_set_msgExt);
        }
    }




    static if(!is(typeof(SN_set_attr))) {
        private enum enumMixinStr_SN_set_attr = `enum SN_set_attr = "set-attr";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_set_attr); }))) {
            mixin(enumMixinStr_SN_set_attr);
        }
    }




    static if(!is(typeof(NID_set_attr))) {
        private enum enumMixinStr_NID_set_attr = `enum NID_set_attr = 515;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_set_attr); }))) {
            mixin(enumMixinStr_NID_set_attr);
        }
    }




    static if(!is(typeof(OBJ_set_attr))) {
        private enum enumMixinStr_OBJ_set_attr = `enum OBJ_set_attr = 2L , 23L , 42L , 3L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_set_attr); }))) {
            mixin(enumMixinStr_OBJ_set_attr);
        }
    }




    static if(!is(typeof(SN_set_policy))) {
        private enum enumMixinStr_SN_set_policy = `enum SN_set_policy = "set-policy";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_set_policy); }))) {
            mixin(enumMixinStr_SN_set_policy);
        }
    }




    static if(!is(typeof(NID_set_policy))) {
        private enum enumMixinStr_NID_set_policy = `enum NID_set_policy = 516;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_set_policy); }))) {
            mixin(enumMixinStr_NID_set_policy);
        }
    }




    static if(!is(typeof(OBJ_set_policy))) {
        private enum enumMixinStr_OBJ_set_policy = `enum OBJ_set_policy = 2L , 23L , 42L , 5L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_set_policy); }))) {
            mixin(enumMixinStr_OBJ_set_policy);
        }
    }




    static if(!is(typeof(SN_set_certExt))) {
        private enum enumMixinStr_SN_set_certExt = `enum SN_set_certExt = "set-certExt";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_set_certExt); }))) {
            mixin(enumMixinStr_SN_set_certExt);
        }
    }




    static if(!is(typeof(LN_set_certExt))) {
        private enum enumMixinStr_LN_set_certExt = `enum LN_set_certExt = "certificate extensions";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_set_certExt); }))) {
            mixin(enumMixinStr_LN_set_certExt);
        }
    }




    static if(!is(typeof(NID_set_certExt))) {
        private enum enumMixinStr_NID_set_certExt = `enum NID_set_certExt = 517;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_set_certExt); }))) {
            mixin(enumMixinStr_NID_set_certExt);
        }
    }




    static if(!is(typeof(OBJ_set_certExt))) {
        private enum enumMixinStr_OBJ_set_certExt = `enum OBJ_set_certExt = 2L , 23L , 42L , 7L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_set_certExt); }))) {
            mixin(enumMixinStr_OBJ_set_certExt);
        }
    }




    static if(!is(typeof(SN_set_brand))) {
        private enum enumMixinStr_SN_set_brand = `enum SN_set_brand = "set-brand";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_set_brand); }))) {
            mixin(enumMixinStr_SN_set_brand);
        }
    }




    static if(!is(typeof(NID_set_brand))) {
        private enum enumMixinStr_NID_set_brand = `enum NID_set_brand = 518;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_set_brand); }))) {
            mixin(enumMixinStr_NID_set_brand);
        }
    }




    static if(!is(typeof(OBJ_set_brand))) {
        private enum enumMixinStr_OBJ_set_brand = `enum OBJ_set_brand = 2L , 23L , 42L , 8L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_set_brand); }))) {
            mixin(enumMixinStr_OBJ_set_brand);
        }
    }




    static if(!is(typeof(SN_setct_PANData))) {
        private enum enumMixinStr_SN_setct_PANData = `enum SN_setct_PANData = "setct-PANData";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_setct_PANData); }))) {
            mixin(enumMixinStr_SN_setct_PANData);
        }
    }




    static if(!is(typeof(NID_setct_PANData))) {
        private enum enumMixinStr_NID_setct_PANData = `enum NID_setct_PANData = 519;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_setct_PANData); }))) {
            mixin(enumMixinStr_NID_setct_PANData);
        }
    }




    static if(!is(typeof(OBJ_setct_PANData))) {
        private enum enumMixinStr_OBJ_setct_PANData = `enum OBJ_setct_PANData = 2L , 23L , 42L , 0L , 0L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_setct_PANData); }))) {
            mixin(enumMixinStr_OBJ_setct_PANData);
        }
    }




    static if(!is(typeof(SN_setct_PANToken))) {
        private enum enumMixinStr_SN_setct_PANToken = `enum SN_setct_PANToken = "setct-PANToken";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_setct_PANToken); }))) {
            mixin(enumMixinStr_SN_setct_PANToken);
        }
    }




    static if(!is(typeof(NID_setct_PANToken))) {
        private enum enumMixinStr_NID_setct_PANToken = `enum NID_setct_PANToken = 520;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_setct_PANToken); }))) {
            mixin(enumMixinStr_NID_setct_PANToken);
        }
    }




    static if(!is(typeof(OBJ_setct_PANToken))) {
        private enum enumMixinStr_OBJ_setct_PANToken = `enum OBJ_setct_PANToken = 2L , 23L , 42L , 0L , 1L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_setct_PANToken); }))) {
            mixin(enumMixinStr_OBJ_setct_PANToken);
        }
    }




    static if(!is(typeof(SN_setct_PANOnly))) {
        private enum enumMixinStr_SN_setct_PANOnly = `enum SN_setct_PANOnly = "setct-PANOnly";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_setct_PANOnly); }))) {
            mixin(enumMixinStr_SN_setct_PANOnly);
        }
    }




    static if(!is(typeof(NID_setct_PANOnly))) {
        private enum enumMixinStr_NID_setct_PANOnly = `enum NID_setct_PANOnly = 521;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_setct_PANOnly); }))) {
            mixin(enumMixinStr_NID_setct_PANOnly);
        }
    }




    static if(!is(typeof(OBJ_setct_PANOnly))) {
        private enum enumMixinStr_OBJ_setct_PANOnly = `enum OBJ_setct_PANOnly = 2L , 23L , 42L , 0L , 2L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_setct_PANOnly); }))) {
            mixin(enumMixinStr_OBJ_setct_PANOnly);
        }
    }




    static if(!is(typeof(SN_setct_OIData))) {
        private enum enumMixinStr_SN_setct_OIData = `enum SN_setct_OIData = "setct-OIData";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_setct_OIData); }))) {
            mixin(enumMixinStr_SN_setct_OIData);
        }
    }




    static if(!is(typeof(NID_setct_OIData))) {
        private enum enumMixinStr_NID_setct_OIData = `enum NID_setct_OIData = 522;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_setct_OIData); }))) {
            mixin(enumMixinStr_NID_setct_OIData);
        }
    }




    static if(!is(typeof(OBJ_setct_OIData))) {
        private enum enumMixinStr_OBJ_setct_OIData = `enum OBJ_setct_OIData = 2L , 23L , 42L , 0L , 3L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_setct_OIData); }))) {
            mixin(enumMixinStr_OBJ_setct_OIData);
        }
    }




    static if(!is(typeof(SN_setct_PI))) {
        private enum enumMixinStr_SN_setct_PI = `enum SN_setct_PI = "setct-PI";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_setct_PI); }))) {
            mixin(enumMixinStr_SN_setct_PI);
        }
    }




    static if(!is(typeof(NID_setct_PI))) {
        private enum enumMixinStr_NID_setct_PI = `enum NID_setct_PI = 523;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_setct_PI); }))) {
            mixin(enumMixinStr_NID_setct_PI);
        }
    }




    static if(!is(typeof(OBJ_setct_PI))) {
        private enum enumMixinStr_OBJ_setct_PI = `enum OBJ_setct_PI = 2L , 23L , 42L , 0L , 4L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_setct_PI); }))) {
            mixin(enumMixinStr_OBJ_setct_PI);
        }
    }




    static if(!is(typeof(SN_setct_PIData))) {
        private enum enumMixinStr_SN_setct_PIData = `enum SN_setct_PIData = "setct-PIData";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_setct_PIData); }))) {
            mixin(enumMixinStr_SN_setct_PIData);
        }
    }




    static if(!is(typeof(NID_setct_PIData))) {
        private enum enumMixinStr_NID_setct_PIData = `enum NID_setct_PIData = 524;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_setct_PIData); }))) {
            mixin(enumMixinStr_NID_setct_PIData);
        }
    }




    static if(!is(typeof(OBJ_setct_PIData))) {
        private enum enumMixinStr_OBJ_setct_PIData = `enum OBJ_setct_PIData = 2L , 23L , 42L , 0L , 5L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_setct_PIData); }))) {
            mixin(enumMixinStr_OBJ_setct_PIData);
        }
    }




    static if(!is(typeof(SN_setct_PIDataUnsigned))) {
        private enum enumMixinStr_SN_setct_PIDataUnsigned = `enum SN_setct_PIDataUnsigned = "setct-PIDataUnsigned";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_setct_PIDataUnsigned); }))) {
            mixin(enumMixinStr_SN_setct_PIDataUnsigned);
        }
    }




    static if(!is(typeof(NID_setct_PIDataUnsigned))) {
        private enum enumMixinStr_NID_setct_PIDataUnsigned = `enum NID_setct_PIDataUnsigned = 525;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_setct_PIDataUnsigned); }))) {
            mixin(enumMixinStr_NID_setct_PIDataUnsigned);
        }
    }




    static if(!is(typeof(OBJ_setct_PIDataUnsigned))) {
        private enum enumMixinStr_OBJ_setct_PIDataUnsigned = `enum OBJ_setct_PIDataUnsigned = 2L , 23L , 42L , 0L , 6L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_setct_PIDataUnsigned); }))) {
            mixin(enumMixinStr_OBJ_setct_PIDataUnsigned);
        }
    }




    static if(!is(typeof(SN_setct_HODInput))) {
        private enum enumMixinStr_SN_setct_HODInput = `enum SN_setct_HODInput = "setct-HODInput";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_setct_HODInput); }))) {
            mixin(enumMixinStr_SN_setct_HODInput);
        }
    }




    static if(!is(typeof(NID_setct_HODInput))) {
        private enum enumMixinStr_NID_setct_HODInput = `enum NID_setct_HODInput = 526;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_setct_HODInput); }))) {
            mixin(enumMixinStr_NID_setct_HODInput);
        }
    }




    static if(!is(typeof(OBJ_setct_HODInput))) {
        private enum enumMixinStr_OBJ_setct_HODInput = `enum OBJ_setct_HODInput = 2L , 23L , 42L , 0L , 7L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_setct_HODInput); }))) {
            mixin(enumMixinStr_OBJ_setct_HODInput);
        }
    }




    static if(!is(typeof(SN_setct_AuthResBaggage))) {
        private enum enumMixinStr_SN_setct_AuthResBaggage = `enum SN_setct_AuthResBaggage = "setct-AuthResBaggage";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_setct_AuthResBaggage); }))) {
            mixin(enumMixinStr_SN_setct_AuthResBaggage);
        }
    }




    static if(!is(typeof(NID_setct_AuthResBaggage))) {
        private enum enumMixinStr_NID_setct_AuthResBaggage = `enum NID_setct_AuthResBaggage = 527;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_setct_AuthResBaggage); }))) {
            mixin(enumMixinStr_NID_setct_AuthResBaggage);
        }
    }




    static if(!is(typeof(OBJ_setct_AuthResBaggage))) {
        private enum enumMixinStr_OBJ_setct_AuthResBaggage = `enum OBJ_setct_AuthResBaggage = 2L , 23L , 42L , 0L , 8L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_setct_AuthResBaggage); }))) {
            mixin(enumMixinStr_OBJ_setct_AuthResBaggage);
        }
    }




    static if(!is(typeof(SN_setct_AuthRevReqBaggage))) {
        private enum enumMixinStr_SN_setct_AuthRevReqBaggage = `enum SN_setct_AuthRevReqBaggage = "setct-AuthRevReqBaggage";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_setct_AuthRevReqBaggage); }))) {
            mixin(enumMixinStr_SN_setct_AuthRevReqBaggage);
        }
    }




    static if(!is(typeof(NID_setct_AuthRevReqBaggage))) {
        private enum enumMixinStr_NID_setct_AuthRevReqBaggage = `enum NID_setct_AuthRevReqBaggage = 528;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_setct_AuthRevReqBaggage); }))) {
            mixin(enumMixinStr_NID_setct_AuthRevReqBaggage);
        }
    }




    static if(!is(typeof(OBJ_setct_AuthRevReqBaggage))) {
        private enum enumMixinStr_OBJ_setct_AuthRevReqBaggage = `enum OBJ_setct_AuthRevReqBaggage = 2L , 23L , 42L , 0L , 9L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_setct_AuthRevReqBaggage); }))) {
            mixin(enumMixinStr_OBJ_setct_AuthRevReqBaggage);
        }
    }




    static if(!is(typeof(SN_setct_AuthRevResBaggage))) {
        private enum enumMixinStr_SN_setct_AuthRevResBaggage = `enum SN_setct_AuthRevResBaggage = "setct-AuthRevResBaggage";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_setct_AuthRevResBaggage); }))) {
            mixin(enumMixinStr_SN_setct_AuthRevResBaggage);
        }
    }




    static if(!is(typeof(NID_setct_AuthRevResBaggage))) {
        private enum enumMixinStr_NID_setct_AuthRevResBaggage = `enum NID_setct_AuthRevResBaggage = 529;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_setct_AuthRevResBaggage); }))) {
            mixin(enumMixinStr_NID_setct_AuthRevResBaggage);
        }
    }




    static if(!is(typeof(OBJ_setct_AuthRevResBaggage))) {
        private enum enumMixinStr_OBJ_setct_AuthRevResBaggage = `enum OBJ_setct_AuthRevResBaggage = 2L , 23L , 42L , 0L , 10L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_setct_AuthRevResBaggage); }))) {
            mixin(enumMixinStr_OBJ_setct_AuthRevResBaggage);
        }
    }




    static if(!is(typeof(SN_setct_CapTokenSeq))) {
        private enum enumMixinStr_SN_setct_CapTokenSeq = `enum SN_setct_CapTokenSeq = "setct-CapTokenSeq";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_setct_CapTokenSeq); }))) {
            mixin(enumMixinStr_SN_setct_CapTokenSeq);
        }
    }




    static if(!is(typeof(NID_setct_CapTokenSeq))) {
        private enum enumMixinStr_NID_setct_CapTokenSeq = `enum NID_setct_CapTokenSeq = 530;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_setct_CapTokenSeq); }))) {
            mixin(enumMixinStr_NID_setct_CapTokenSeq);
        }
    }




    static if(!is(typeof(OBJ_setct_CapTokenSeq))) {
        private enum enumMixinStr_OBJ_setct_CapTokenSeq = `enum OBJ_setct_CapTokenSeq = 2L , 23L , 42L , 0L , 11L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_setct_CapTokenSeq); }))) {
            mixin(enumMixinStr_OBJ_setct_CapTokenSeq);
        }
    }




    static if(!is(typeof(SN_setct_PInitResData))) {
        private enum enumMixinStr_SN_setct_PInitResData = `enum SN_setct_PInitResData = "setct-PInitResData";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_setct_PInitResData); }))) {
            mixin(enumMixinStr_SN_setct_PInitResData);
        }
    }




    static if(!is(typeof(NID_setct_PInitResData))) {
        private enum enumMixinStr_NID_setct_PInitResData = `enum NID_setct_PInitResData = 531;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_setct_PInitResData); }))) {
            mixin(enumMixinStr_NID_setct_PInitResData);
        }
    }




    static if(!is(typeof(OBJ_setct_PInitResData))) {
        private enum enumMixinStr_OBJ_setct_PInitResData = `enum OBJ_setct_PInitResData = 2L , 23L , 42L , 0L , 12L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_setct_PInitResData); }))) {
            mixin(enumMixinStr_OBJ_setct_PInitResData);
        }
    }




    static if(!is(typeof(SN_setct_PI_TBS))) {
        private enum enumMixinStr_SN_setct_PI_TBS = `enum SN_setct_PI_TBS = "setct-PI-TBS";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_setct_PI_TBS); }))) {
            mixin(enumMixinStr_SN_setct_PI_TBS);
        }
    }




    static if(!is(typeof(NID_setct_PI_TBS))) {
        private enum enumMixinStr_NID_setct_PI_TBS = `enum NID_setct_PI_TBS = 532;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_setct_PI_TBS); }))) {
            mixin(enumMixinStr_NID_setct_PI_TBS);
        }
    }




    static if(!is(typeof(OBJ_setct_PI_TBS))) {
        private enum enumMixinStr_OBJ_setct_PI_TBS = `enum OBJ_setct_PI_TBS = 2L , 23L , 42L , 0L , 13L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_setct_PI_TBS); }))) {
            mixin(enumMixinStr_OBJ_setct_PI_TBS);
        }
    }




    static if(!is(typeof(SN_setct_PResData))) {
        private enum enumMixinStr_SN_setct_PResData = `enum SN_setct_PResData = "setct-PResData";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_setct_PResData); }))) {
            mixin(enumMixinStr_SN_setct_PResData);
        }
    }




    static if(!is(typeof(NID_setct_PResData))) {
        private enum enumMixinStr_NID_setct_PResData = `enum NID_setct_PResData = 533;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_setct_PResData); }))) {
            mixin(enumMixinStr_NID_setct_PResData);
        }
    }




    static if(!is(typeof(OBJ_setct_PResData))) {
        private enum enumMixinStr_OBJ_setct_PResData = `enum OBJ_setct_PResData = 2L , 23L , 42L , 0L , 14L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_setct_PResData); }))) {
            mixin(enumMixinStr_OBJ_setct_PResData);
        }
    }




    static if(!is(typeof(SN_setct_AuthReqTBS))) {
        private enum enumMixinStr_SN_setct_AuthReqTBS = `enum SN_setct_AuthReqTBS = "setct-AuthReqTBS";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_setct_AuthReqTBS); }))) {
            mixin(enumMixinStr_SN_setct_AuthReqTBS);
        }
    }




    static if(!is(typeof(NID_setct_AuthReqTBS))) {
        private enum enumMixinStr_NID_setct_AuthReqTBS = `enum NID_setct_AuthReqTBS = 534;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_setct_AuthReqTBS); }))) {
            mixin(enumMixinStr_NID_setct_AuthReqTBS);
        }
    }




    static if(!is(typeof(OBJ_setct_AuthReqTBS))) {
        private enum enumMixinStr_OBJ_setct_AuthReqTBS = `enum OBJ_setct_AuthReqTBS = 2L , 23L , 42L , 0L , 16L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_setct_AuthReqTBS); }))) {
            mixin(enumMixinStr_OBJ_setct_AuthReqTBS);
        }
    }




    static if(!is(typeof(SN_setct_AuthResTBS))) {
        private enum enumMixinStr_SN_setct_AuthResTBS = `enum SN_setct_AuthResTBS = "setct-AuthResTBS";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_setct_AuthResTBS); }))) {
            mixin(enumMixinStr_SN_setct_AuthResTBS);
        }
    }




    static if(!is(typeof(NID_setct_AuthResTBS))) {
        private enum enumMixinStr_NID_setct_AuthResTBS = `enum NID_setct_AuthResTBS = 535;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_setct_AuthResTBS); }))) {
            mixin(enumMixinStr_NID_setct_AuthResTBS);
        }
    }




    static if(!is(typeof(OBJ_setct_AuthResTBS))) {
        private enum enumMixinStr_OBJ_setct_AuthResTBS = `enum OBJ_setct_AuthResTBS = 2L , 23L , 42L , 0L , 17L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_setct_AuthResTBS); }))) {
            mixin(enumMixinStr_OBJ_setct_AuthResTBS);
        }
    }




    static if(!is(typeof(SN_setct_AuthResTBSX))) {
        private enum enumMixinStr_SN_setct_AuthResTBSX = `enum SN_setct_AuthResTBSX = "setct-AuthResTBSX";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_setct_AuthResTBSX); }))) {
            mixin(enumMixinStr_SN_setct_AuthResTBSX);
        }
    }




    static if(!is(typeof(NID_setct_AuthResTBSX))) {
        private enum enumMixinStr_NID_setct_AuthResTBSX = `enum NID_setct_AuthResTBSX = 536;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_setct_AuthResTBSX); }))) {
            mixin(enumMixinStr_NID_setct_AuthResTBSX);
        }
    }




    static if(!is(typeof(OBJ_setct_AuthResTBSX))) {
        private enum enumMixinStr_OBJ_setct_AuthResTBSX = `enum OBJ_setct_AuthResTBSX = 2L , 23L , 42L , 0L , 18L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_setct_AuthResTBSX); }))) {
            mixin(enumMixinStr_OBJ_setct_AuthResTBSX);
        }
    }




    static if(!is(typeof(SN_setct_AuthTokenTBS))) {
        private enum enumMixinStr_SN_setct_AuthTokenTBS = `enum SN_setct_AuthTokenTBS = "setct-AuthTokenTBS";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_setct_AuthTokenTBS); }))) {
            mixin(enumMixinStr_SN_setct_AuthTokenTBS);
        }
    }




    static if(!is(typeof(NID_setct_AuthTokenTBS))) {
        private enum enumMixinStr_NID_setct_AuthTokenTBS = `enum NID_setct_AuthTokenTBS = 537;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_setct_AuthTokenTBS); }))) {
            mixin(enumMixinStr_NID_setct_AuthTokenTBS);
        }
    }




    static if(!is(typeof(OBJ_setct_AuthTokenTBS))) {
        private enum enumMixinStr_OBJ_setct_AuthTokenTBS = `enum OBJ_setct_AuthTokenTBS = 2L , 23L , 42L , 0L , 19L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_setct_AuthTokenTBS); }))) {
            mixin(enumMixinStr_OBJ_setct_AuthTokenTBS);
        }
    }




    static if(!is(typeof(SN_setct_CapTokenData))) {
        private enum enumMixinStr_SN_setct_CapTokenData = `enum SN_setct_CapTokenData = "setct-CapTokenData";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_setct_CapTokenData); }))) {
            mixin(enumMixinStr_SN_setct_CapTokenData);
        }
    }




    static if(!is(typeof(NID_setct_CapTokenData))) {
        private enum enumMixinStr_NID_setct_CapTokenData = `enum NID_setct_CapTokenData = 538;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_setct_CapTokenData); }))) {
            mixin(enumMixinStr_NID_setct_CapTokenData);
        }
    }




    static if(!is(typeof(OBJ_setct_CapTokenData))) {
        private enum enumMixinStr_OBJ_setct_CapTokenData = `enum OBJ_setct_CapTokenData = 2L , 23L , 42L , 0L , 20L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_setct_CapTokenData); }))) {
            mixin(enumMixinStr_OBJ_setct_CapTokenData);
        }
    }




    static if(!is(typeof(SN_setct_CapTokenTBS))) {
        private enum enumMixinStr_SN_setct_CapTokenTBS = `enum SN_setct_CapTokenTBS = "setct-CapTokenTBS";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_setct_CapTokenTBS); }))) {
            mixin(enumMixinStr_SN_setct_CapTokenTBS);
        }
    }




    static if(!is(typeof(NID_setct_CapTokenTBS))) {
        private enum enumMixinStr_NID_setct_CapTokenTBS = `enum NID_setct_CapTokenTBS = 539;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_setct_CapTokenTBS); }))) {
            mixin(enumMixinStr_NID_setct_CapTokenTBS);
        }
    }




    static if(!is(typeof(OBJ_setct_CapTokenTBS))) {
        private enum enumMixinStr_OBJ_setct_CapTokenTBS = `enum OBJ_setct_CapTokenTBS = 2L , 23L , 42L , 0L , 21L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_setct_CapTokenTBS); }))) {
            mixin(enumMixinStr_OBJ_setct_CapTokenTBS);
        }
    }




    static if(!is(typeof(SN_setct_AcqCardCodeMsg))) {
        private enum enumMixinStr_SN_setct_AcqCardCodeMsg = `enum SN_setct_AcqCardCodeMsg = "setct-AcqCardCodeMsg";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_setct_AcqCardCodeMsg); }))) {
            mixin(enumMixinStr_SN_setct_AcqCardCodeMsg);
        }
    }




    static if(!is(typeof(NID_setct_AcqCardCodeMsg))) {
        private enum enumMixinStr_NID_setct_AcqCardCodeMsg = `enum NID_setct_AcqCardCodeMsg = 540;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_setct_AcqCardCodeMsg); }))) {
            mixin(enumMixinStr_NID_setct_AcqCardCodeMsg);
        }
    }




    static if(!is(typeof(OBJ_setct_AcqCardCodeMsg))) {
        private enum enumMixinStr_OBJ_setct_AcqCardCodeMsg = `enum OBJ_setct_AcqCardCodeMsg = 2L , 23L , 42L , 0L , 22L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_setct_AcqCardCodeMsg); }))) {
            mixin(enumMixinStr_OBJ_setct_AcqCardCodeMsg);
        }
    }




    static if(!is(typeof(SN_setct_AuthRevReqTBS))) {
        private enum enumMixinStr_SN_setct_AuthRevReqTBS = `enum SN_setct_AuthRevReqTBS = "setct-AuthRevReqTBS";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_setct_AuthRevReqTBS); }))) {
            mixin(enumMixinStr_SN_setct_AuthRevReqTBS);
        }
    }




    static if(!is(typeof(NID_setct_AuthRevReqTBS))) {
        private enum enumMixinStr_NID_setct_AuthRevReqTBS = `enum NID_setct_AuthRevReqTBS = 541;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_setct_AuthRevReqTBS); }))) {
            mixin(enumMixinStr_NID_setct_AuthRevReqTBS);
        }
    }




    static if(!is(typeof(OBJ_setct_AuthRevReqTBS))) {
        private enum enumMixinStr_OBJ_setct_AuthRevReqTBS = `enum OBJ_setct_AuthRevReqTBS = 2L , 23L , 42L , 0L , 23L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_setct_AuthRevReqTBS); }))) {
            mixin(enumMixinStr_OBJ_setct_AuthRevReqTBS);
        }
    }




    static if(!is(typeof(SN_setct_AuthRevResData))) {
        private enum enumMixinStr_SN_setct_AuthRevResData = `enum SN_setct_AuthRevResData = "setct-AuthRevResData";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_setct_AuthRevResData); }))) {
            mixin(enumMixinStr_SN_setct_AuthRevResData);
        }
    }




    static if(!is(typeof(NID_setct_AuthRevResData))) {
        private enum enumMixinStr_NID_setct_AuthRevResData = `enum NID_setct_AuthRevResData = 542;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_setct_AuthRevResData); }))) {
            mixin(enumMixinStr_NID_setct_AuthRevResData);
        }
    }




    static if(!is(typeof(OBJ_setct_AuthRevResData))) {
        private enum enumMixinStr_OBJ_setct_AuthRevResData = `enum OBJ_setct_AuthRevResData = 2L , 23L , 42L , 0L , 24L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_setct_AuthRevResData); }))) {
            mixin(enumMixinStr_OBJ_setct_AuthRevResData);
        }
    }




    static if(!is(typeof(SN_setct_AuthRevResTBS))) {
        private enum enumMixinStr_SN_setct_AuthRevResTBS = `enum SN_setct_AuthRevResTBS = "setct-AuthRevResTBS";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_setct_AuthRevResTBS); }))) {
            mixin(enumMixinStr_SN_setct_AuthRevResTBS);
        }
    }




    static if(!is(typeof(NID_setct_AuthRevResTBS))) {
        private enum enumMixinStr_NID_setct_AuthRevResTBS = `enum NID_setct_AuthRevResTBS = 543;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_setct_AuthRevResTBS); }))) {
            mixin(enumMixinStr_NID_setct_AuthRevResTBS);
        }
    }




    static if(!is(typeof(OBJ_setct_AuthRevResTBS))) {
        private enum enumMixinStr_OBJ_setct_AuthRevResTBS = `enum OBJ_setct_AuthRevResTBS = 2L , 23L , 42L , 0L , 25L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_setct_AuthRevResTBS); }))) {
            mixin(enumMixinStr_OBJ_setct_AuthRevResTBS);
        }
    }




    static if(!is(typeof(SN_setct_CapReqTBS))) {
        private enum enumMixinStr_SN_setct_CapReqTBS = `enum SN_setct_CapReqTBS = "setct-CapReqTBS";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_setct_CapReqTBS); }))) {
            mixin(enumMixinStr_SN_setct_CapReqTBS);
        }
    }




    static if(!is(typeof(NID_setct_CapReqTBS))) {
        private enum enumMixinStr_NID_setct_CapReqTBS = `enum NID_setct_CapReqTBS = 544;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_setct_CapReqTBS); }))) {
            mixin(enumMixinStr_NID_setct_CapReqTBS);
        }
    }




    static if(!is(typeof(OBJ_setct_CapReqTBS))) {
        private enum enumMixinStr_OBJ_setct_CapReqTBS = `enum OBJ_setct_CapReqTBS = 2L , 23L , 42L , 0L , 26L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_setct_CapReqTBS); }))) {
            mixin(enumMixinStr_OBJ_setct_CapReqTBS);
        }
    }




    static if(!is(typeof(SN_setct_CapReqTBSX))) {
        private enum enumMixinStr_SN_setct_CapReqTBSX = `enum SN_setct_CapReqTBSX = "setct-CapReqTBSX";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_setct_CapReqTBSX); }))) {
            mixin(enumMixinStr_SN_setct_CapReqTBSX);
        }
    }




    static if(!is(typeof(NID_setct_CapReqTBSX))) {
        private enum enumMixinStr_NID_setct_CapReqTBSX = `enum NID_setct_CapReqTBSX = 545;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_setct_CapReqTBSX); }))) {
            mixin(enumMixinStr_NID_setct_CapReqTBSX);
        }
    }




    static if(!is(typeof(OBJ_setct_CapReqTBSX))) {
        private enum enumMixinStr_OBJ_setct_CapReqTBSX = `enum OBJ_setct_CapReqTBSX = 2L , 23L , 42L , 0L , 27L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_setct_CapReqTBSX); }))) {
            mixin(enumMixinStr_OBJ_setct_CapReqTBSX);
        }
    }




    static if(!is(typeof(SN_setct_CapResData))) {
        private enum enumMixinStr_SN_setct_CapResData = `enum SN_setct_CapResData = "setct-CapResData";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_setct_CapResData); }))) {
            mixin(enumMixinStr_SN_setct_CapResData);
        }
    }




    static if(!is(typeof(NID_setct_CapResData))) {
        private enum enumMixinStr_NID_setct_CapResData = `enum NID_setct_CapResData = 546;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_setct_CapResData); }))) {
            mixin(enumMixinStr_NID_setct_CapResData);
        }
    }




    static if(!is(typeof(OBJ_setct_CapResData))) {
        private enum enumMixinStr_OBJ_setct_CapResData = `enum OBJ_setct_CapResData = 2L , 23L , 42L , 0L , 28L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_setct_CapResData); }))) {
            mixin(enumMixinStr_OBJ_setct_CapResData);
        }
    }




    static if(!is(typeof(SN_setct_CapRevReqTBS))) {
        private enum enumMixinStr_SN_setct_CapRevReqTBS = `enum SN_setct_CapRevReqTBS = "setct-CapRevReqTBS";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_setct_CapRevReqTBS); }))) {
            mixin(enumMixinStr_SN_setct_CapRevReqTBS);
        }
    }




    static if(!is(typeof(NID_setct_CapRevReqTBS))) {
        private enum enumMixinStr_NID_setct_CapRevReqTBS = `enum NID_setct_CapRevReqTBS = 547;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_setct_CapRevReqTBS); }))) {
            mixin(enumMixinStr_NID_setct_CapRevReqTBS);
        }
    }




    static if(!is(typeof(OBJ_setct_CapRevReqTBS))) {
        private enum enumMixinStr_OBJ_setct_CapRevReqTBS = `enum OBJ_setct_CapRevReqTBS = 2L , 23L , 42L , 0L , 29L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_setct_CapRevReqTBS); }))) {
            mixin(enumMixinStr_OBJ_setct_CapRevReqTBS);
        }
    }




    static if(!is(typeof(SN_setct_CapRevReqTBSX))) {
        private enum enumMixinStr_SN_setct_CapRevReqTBSX = `enum SN_setct_CapRevReqTBSX = "setct-CapRevReqTBSX";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_setct_CapRevReqTBSX); }))) {
            mixin(enumMixinStr_SN_setct_CapRevReqTBSX);
        }
    }




    static if(!is(typeof(NID_setct_CapRevReqTBSX))) {
        private enum enumMixinStr_NID_setct_CapRevReqTBSX = `enum NID_setct_CapRevReqTBSX = 548;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_setct_CapRevReqTBSX); }))) {
            mixin(enumMixinStr_NID_setct_CapRevReqTBSX);
        }
    }




    static if(!is(typeof(OBJ_setct_CapRevReqTBSX))) {
        private enum enumMixinStr_OBJ_setct_CapRevReqTBSX = `enum OBJ_setct_CapRevReqTBSX = 2L , 23L , 42L , 0L , 30L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_setct_CapRevReqTBSX); }))) {
            mixin(enumMixinStr_OBJ_setct_CapRevReqTBSX);
        }
    }




    static if(!is(typeof(SN_setct_CapRevResData))) {
        private enum enumMixinStr_SN_setct_CapRevResData = `enum SN_setct_CapRevResData = "setct-CapRevResData";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_setct_CapRevResData); }))) {
            mixin(enumMixinStr_SN_setct_CapRevResData);
        }
    }




    static if(!is(typeof(NID_setct_CapRevResData))) {
        private enum enumMixinStr_NID_setct_CapRevResData = `enum NID_setct_CapRevResData = 549;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_setct_CapRevResData); }))) {
            mixin(enumMixinStr_NID_setct_CapRevResData);
        }
    }




    static if(!is(typeof(OBJ_setct_CapRevResData))) {
        private enum enumMixinStr_OBJ_setct_CapRevResData = `enum OBJ_setct_CapRevResData = 2L , 23L , 42L , 0L , 31L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_setct_CapRevResData); }))) {
            mixin(enumMixinStr_OBJ_setct_CapRevResData);
        }
    }




    static if(!is(typeof(SN_setct_CredReqTBS))) {
        private enum enumMixinStr_SN_setct_CredReqTBS = `enum SN_setct_CredReqTBS = "setct-CredReqTBS";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_setct_CredReqTBS); }))) {
            mixin(enumMixinStr_SN_setct_CredReqTBS);
        }
    }




    static if(!is(typeof(NID_setct_CredReqTBS))) {
        private enum enumMixinStr_NID_setct_CredReqTBS = `enum NID_setct_CredReqTBS = 550;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_setct_CredReqTBS); }))) {
            mixin(enumMixinStr_NID_setct_CredReqTBS);
        }
    }




    static if(!is(typeof(OBJ_setct_CredReqTBS))) {
        private enum enumMixinStr_OBJ_setct_CredReqTBS = `enum OBJ_setct_CredReqTBS = 2L , 23L , 42L , 0L , 32L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_setct_CredReqTBS); }))) {
            mixin(enumMixinStr_OBJ_setct_CredReqTBS);
        }
    }




    static if(!is(typeof(SN_setct_CredReqTBSX))) {
        private enum enumMixinStr_SN_setct_CredReqTBSX = `enum SN_setct_CredReqTBSX = "setct-CredReqTBSX";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_setct_CredReqTBSX); }))) {
            mixin(enumMixinStr_SN_setct_CredReqTBSX);
        }
    }




    static if(!is(typeof(NID_setct_CredReqTBSX))) {
        private enum enumMixinStr_NID_setct_CredReqTBSX = `enum NID_setct_CredReqTBSX = 551;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_setct_CredReqTBSX); }))) {
            mixin(enumMixinStr_NID_setct_CredReqTBSX);
        }
    }




    static if(!is(typeof(OBJ_setct_CredReqTBSX))) {
        private enum enumMixinStr_OBJ_setct_CredReqTBSX = `enum OBJ_setct_CredReqTBSX = 2L , 23L , 42L , 0L , 33L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_setct_CredReqTBSX); }))) {
            mixin(enumMixinStr_OBJ_setct_CredReqTBSX);
        }
    }




    static if(!is(typeof(SN_setct_CredResData))) {
        private enum enumMixinStr_SN_setct_CredResData = `enum SN_setct_CredResData = "setct-CredResData";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_setct_CredResData); }))) {
            mixin(enumMixinStr_SN_setct_CredResData);
        }
    }




    static if(!is(typeof(NID_setct_CredResData))) {
        private enum enumMixinStr_NID_setct_CredResData = `enum NID_setct_CredResData = 552;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_setct_CredResData); }))) {
            mixin(enumMixinStr_NID_setct_CredResData);
        }
    }




    static if(!is(typeof(OBJ_setct_CredResData))) {
        private enum enumMixinStr_OBJ_setct_CredResData = `enum OBJ_setct_CredResData = 2L , 23L , 42L , 0L , 34L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_setct_CredResData); }))) {
            mixin(enumMixinStr_OBJ_setct_CredResData);
        }
    }




    static if(!is(typeof(SN_setct_CredRevReqTBS))) {
        private enum enumMixinStr_SN_setct_CredRevReqTBS = `enum SN_setct_CredRevReqTBS = "setct-CredRevReqTBS";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_setct_CredRevReqTBS); }))) {
            mixin(enumMixinStr_SN_setct_CredRevReqTBS);
        }
    }




    static if(!is(typeof(NID_setct_CredRevReqTBS))) {
        private enum enumMixinStr_NID_setct_CredRevReqTBS = `enum NID_setct_CredRevReqTBS = 553;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_setct_CredRevReqTBS); }))) {
            mixin(enumMixinStr_NID_setct_CredRevReqTBS);
        }
    }




    static if(!is(typeof(OBJ_setct_CredRevReqTBS))) {
        private enum enumMixinStr_OBJ_setct_CredRevReqTBS = `enum OBJ_setct_CredRevReqTBS = 2L , 23L , 42L , 0L , 35L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_setct_CredRevReqTBS); }))) {
            mixin(enumMixinStr_OBJ_setct_CredRevReqTBS);
        }
    }




    static if(!is(typeof(SN_setct_CredRevReqTBSX))) {
        private enum enumMixinStr_SN_setct_CredRevReqTBSX = `enum SN_setct_CredRevReqTBSX = "setct-CredRevReqTBSX";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_setct_CredRevReqTBSX); }))) {
            mixin(enumMixinStr_SN_setct_CredRevReqTBSX);
        }
    }




    static if(!is(typeof(NID_setct_CredRevReqTBSX))) {
        private enum enumMixinStr_NID_setct_CredRevReqTBSX = `enum NID_setct_CredRevReqTBSX = 554;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_setct_CredRevReqTBSX); }))) {
            mixin(enumMixinStr_NID_setct_CredRevReqTBSX);
        }
    }




    static if(!is(typeof(OBJ_setct_CredRevReqTBSX))) {
        private enum enumMixinStr_OBJ_setct_CredRevReqTBSX = `enum OBJ_setct_CredRevReqTBSX = 2L , 23L , 42L , 0L , 36L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_setct_CredRevReqTBSX); }))) {
            mixin(enumMixinStr_OBJ_setct_CredRevReqTBSX);
        }
    }




    static if(!is(typeof(SN_setct_CredRevResData))) {
        private enum enumMixinStr_SN_setct_CredRevResData = `enum SN_setct_CredRevResData = "setct-CredRevResData";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_setct_CredRevResData); }))) {
            mixin(enumMixinStr_SN_setct_CredRevResData);
        }
    }




    static if(!is(typeof(NID_setct_CredRevResData))) {
        private enum enumMixinStr_NID_setct_CredRevResData = `enum NID_setct_CredRevResData = 555;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_setct_CredRevResData); }))) {
            mixin(enumMixinStr_NID_setct_CredRevResData);
        }
    }




    static if(!is(typeof(OBJ_setct_CredRevResData))) {
        private enum enumMixinStr_OBJ_setct_CredRevResData = `enum OBJ_setct_CredRevResData = 2L , 23L , 42L , 0L , 37L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_setct_CredRevResData); }))) {
            mixin(enumMixinStr_OBJ_setct_CredRevResData);
        }
    }




    static if(!is(typeof(SN_setct_PCertReqData))) {
        private enum enumMixinStr_SN_setct_PCertReqData = `enum SN_setct_PCertReqData = "setct-PCertReqData";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_setct_PCertReqData); }))) {
            mixin(enumMixinStr_SN_setct_PCertReqData);
        }
    }




    static if(!is(typeof(NID_setct_PCertReqData))) {
        private enum enumMixinStr_NID_setct_PCertReqData = `enum NID_setct_PCertReqData = 556;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_setct_PCertReqData); }))) {
            mixin(enumMixinStr_NID_setct_PCertReqData);
        }
    }




    static if(!is(typeof(OBJ_setct_PCertReqData))) {
        private enum enumMixinStr_OBJ_setct_PCertReqData = `enum OBJ_setct_PCertReqData = 2L , 23L , 42L , 0L , 38L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_setct_PCertReqData); }))) {
            mixin(enumMixinStr_OBJ_setct_PCertReqData);
        }
    }




    static if(!is(typeof(SN_setct_PCertResTBS))) {
        private enum enumMixinStr_SN_setct_PCertResTBS = `enum SN_setct_PCertResTBS = "setct-PCertResTBS";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_setct_PCertResTBS); }))) {
            mixin(enumMixinStr_SN_setct_PCertResTBS);
        }
    }




    static if(!is(typeof(NID_setct_PCertResTBS))) {
        private enum enumMixinStr_NID_setct_PCertResTBS = `enum NID_setct_PCertResTBS = 557;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_setct_PCertResTBS); }))) {
            mixin(enumMixinStr_NID_setct_PCertResTBS);
        }
    }




    static if(!is(typeof(OBJ_setct_PCertResTBS))) {
        private enum enumMixinStr_OBJ_setct_PCertResTBS = `enum OBJ_setct_PCertResTBS = 2L , 23L , 42L , 0L , 39L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_setct_PCertResTBS); }))) {
            mixin(enumMixinStr_OBJ_setct_PCertResTBS);
        }
    }




    static if(!is(typeof(SN_setct_BatchAdminReqData))) {
        private enum enumMixinStr_SN_setct_BatchAdminReqData = `enum SN_setct_BatchAdminReqData = "setct-BatchAdminReqData";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_setct_BatchAdminReqData); }))) {
            mixin(enumMixinStr_SN_setct_BatchAdminReqData);
        }
    }




    static if(!is(typeof(NID_setct_BatchAdminReqData))) {
        private enum enumMixinStr_NID_setct_BatchAdminReqData = `enum NID_setct_BatchAdminReqData = 558;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_setct_BatchAdminReqData); }))) {
            mixin(enumMixinStr_NID_setct_BatchAdminReqData);
        }
    }




    static if(!is(typeof(OBJ_setct_BatchAdminReqData))) {
        private enum enumMixinStr_OBJ_setct_BatchAdminReqData = `enum OBJ_setct_BatchAdminReqData = 2L , 23L , 42L , 0L , 40L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_setct_BatchAdminReqData); }))) {
            mixin(enumMixinStr_OBJ_setct_BatchAdminReqData);
        }
    }




    static if(!is(typeof(SN_setct_BatchAdminResData))) {
        private enum enumMixinStr_SN_setct_BatchAdminResData = `enum SN_setct_BatchAdminResData = "setct-BatchAdminResData";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_setct_BatchAdminResData); }))) {
            mixin(enumMixinStr_SN_setct_BatchAdminResData);
        }
    }




    static if(!is(typeof(NID_setct_BatchAdminResData))) {
        private enum enumMixinStr_NID_setct_BatchAdminResData = `enum NID_setct_BatchAdminResData = 559;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_setct_BatchAdminResData); }))) {
            mixin(enumMixinStr_NID_setct_BatchAdminResData);
        }
    }




    static if(!is(typeof(OBJ_setct_BatchAdminResData))) {
        private enum enumMixinStr_OBJ_setct_BatchAdminResData = `enum OBJ_setct_BatchAdminResData = 2L , 23L , 42L , 0L , 41L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_setct_BatchAdminResData); }))) {
            mixin(enumMixinStr_OBJ_setct_BatchAdminResData);
        }
    }




    static if(!is(typeof(SN_setct_CardCInitResTBS))) {
        private enum enumMixinStr_SN_setct_CardCInitResTBS = `enum SN_setct_CardCInitResTBS = "setct-CardCInitResTBS";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_setct_CardCInitResTBS); }))) {
            mixin(enumMixinStr_SN_setct_CardCInitResTBS);
        }
    }




    static if(!is(typeof(NID_setct_CardCInitResTBS))) {
        private enum enumMixinStr_NID_setct_CardCInitResTBS = `enum NID_setct_CardCInitResTBS = 560;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_setct_CardCInitResTBS); }))) {
            mixin(enumMixinStr_NID_setct_CardCInitResTBS);
        }
    }




    static if(!is(typeof(OBJ_setct_CardCInitResTBS))) {
        private enum enumMixinStr_OBJ_setct_CardCInitResTBS = `enum OBJ_setct_CardCInitResTBS = 2L , 23L , 42L , 0L , 42L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_setct_CardCInitResTBS); }))) {
            mixin(enumMixinStr_OBJ_setct_CardCInitResTBS);
        }
    }




    static if(!is(typeof(SN_setct_MeAqCInitResTBS))) {
        private enum enumMixinStr_SN_setct_MeAqCInitResTBS = `enum SN_setct_MeAqCInitResTBS = "setct-MeAqCInitResTBS";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_setct_MeAqCInitResTBS); }))) {
            mixin(enumMixinStr_SN_setct_MeAqCInitResTBS);
        }
    }




    static if(!is(typeof(NID_setct_MeAqCInitResTBS))) {
        private enum enumMixinStr_NID_setct_MeAqCInitResTBS = `enum NID_setct_MeAqCInitResTBS = 561;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_setct_MeAqCInitResTBS); }))) {
            mixin(enumMixinStr_NID_setct_MeAqCInitResTBS);
        }
    }




    static if(!is(typeof(OBJ_setct_MeAqCInitResTBS))) {
        private enum enumMixinStr_OBJ_setct_MeAqCInitResTBS = `enum OBJ_setct_MeAqCInitResTBS = 2L , 23L , 42L , 0L , 43L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_setct_MeAqCInitResTBS); }))) {
            mixin(enumMixinStr_OBJ_setct_MeAqCInitResTBS);
        }
    }




    static if(!is(typeof(SN_setct_RegFormResTBS))) {
        private enum enumMixinStr_SN_setct_RegFormResTBS = `enum SN_setct_RegFormResTBS = "setct-RegFormResTBS";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_setct_RegFormResTBS); }))) {
            mixin(enumMixinStr_SN_setct_RegFormResTBS);
        }
    }




    static if(!is(typeof(NID_setct_RegFormResTBS))) {
        private enum enumMixinStr_NID_setct_RegFormResTBS = `enum NID_setct_RegFormResTBS = 562;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_setct_RegFormResTBS); }))) {
            mixin(enumMixinStr_NID_setct_RegFormResTBS);
        }
    }




    static if(!is(typeof(OBJ_setct_RegFormResTBS))) {
        private enum enumMixinStr_OBJ_setct_RegFormResTBS = `enum OBJ_setct_RegFormResTBS = 2L , 23L , 42L , 0L , 44L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_setct_RegFormResTBS); }))) {
            mixin(enumMixinStr_OBJ_setct_RegFormResTBS);
        }
    }




    static if(!is(typeof(SN_setct_CertReqData))) {
        private enum enumMixinStr_SN_setct_CertReqData = `enum SN_setct_CertReqData = "setct-CertReqData";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_setct_CertReqData); }))) {
            mixin(enumMixinStr_SN_setct_CertReqData);
        }
    }




    static if(!is(typeof(NID_setct_CertReqData))) {
        private enum enumMixinStr_NID_setct_CertReqData = `enum NID_setct_CertReqData = 563;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_setct_CertReqData); }))) {
            mixin(enumMixinStr_NID_setct_CertReqData);
        }
    }




    static if(!is(typeof(OBJ_setct_CertReqData))) {
        private enum enumMixinStr_OBJ_setct_CertReqData = `enum OBJ_setct_CertReqData = 2L , 23L , 42L , 0L , 45L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_setct_CertReqData); }))) {
            mixin(enumMixinStr_OBJ_setct_CertReqData);
        }
    }




    static if(!is(typeof(SN_setct_CertReqTBS))) {
        private enum enumMixinStr_SN_setct_CertReqTBS = `enum SN_setct_CertReqTBS = "setct-CertReqTBS";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_setct_CertReqTBS); }))) {
            mixin(enumMixinStr_SN_setct_CertReqTBS);
        }
    }




    static if(!is(typeof(NID_setct_CertReqTBS))) {
        private enum enumMixinStr_NID_setct_CertReqTBS = `enum NID_setct_CertReqTBS = 564;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_setct_CertReqTBS); }))) {
            mixin(enumMixinStr_NID_setct_CertReqTBS);
        }
    }




    static if(!is(typeof(OBJ_setct_CertReqTBS))) {
        private enum enumMixinStr_OBJ_setct_CertReqTBS = `enum OBJ_setct_CertReqTBS = 2L , 23L , 42L , 0L , 46L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_setct_CertReqTBS); }))) {
            mixin(enumMixinStr_OBJ_setct_CertReqTBS);
        }
    }




    static if(!is(typeof(SN_setct_CertResData))) {
        private enum enumMixinStr_SN_setct_CertResData = `enum SN_setct_CertResData = "setct-CertResData";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_setct_CertResData); }))) {
            mixin(enumMixinStr_SN_setct_CertResData);
        }
    }




    static if(!is(typeof(NID_setct_CertResData))) {
        private enum enumMixinStr_NID_setct_CertResData = `enum NID_setct_CertResData = 565;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_setct_CertResData); }))) {
            mixin(enumMixinStr_NID_setct_CertResData);
        }
    }




    static if(!is(typeof(OBJ_setct_CertResData))) {
        private enum enumMixinStr_OBJ_setct_CertResData = `enum OBJ_setct_CertResData = 2L , 23L , 42L , 0L , 47L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_setct_CertResData); }))) {
            mixin(enumMixinStr_OBJ_setct_CertResData);
        }
    }




    static if(!is(typeof(SN_setct_CertInqReqTBS))) {
        private enum enumMixinStr_SN_setct_CertInqReqTBS = `enum SN_setct_CertInqReqTBS = "setct-CertInqReqTBS";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_setct_CertInqReqTBS); }))) {
            mixin(enumMixinStr_SN_setct_CertInqReqTBS);
        }
    }




    static if(!is(typeof(NID_setct_CertInqReqTBS))) {
        private enum enumMixinStr_NID_setct_CertInqReqTBS = `enum NID_setct_CertInqReqTBS = 566;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_setct_CertInqReqTBS); }))) {
            mixin(enumMixinStr_NID_setct_CertInqReqTBS);
        }
    }




    static if(!is(typeof(OBJ_setct_CertInqReqTBS))) {
        private enum enumMixinStr_OBJ_setct_CertInqReqTBS = `enum OBJ_setct_CertInqReqTBS = 2L , 23L , 42L , 0L , 48L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_setct_CertInqReqTBS); }))) {
            mixin(enumMixinStr_OBJ_setct_CertInqReqTBS);
        }
    }




    static if(!is(typeof(SN_setct_ErrorTBS))) {
        private enum enumMixinStr_SN_setct_ErrorTBS = `enum SN_setct_ErrorTBS = "setct-ErrorTBS";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_setct_ErrorTBS); }))) {
            mixin(enumMixinStr_SN_setct_ErrorTBS);
        }
    }




    static if(!is(typeof(NID_setct_ErrorTBS))) {
        private enum enumMixinStr_NID_setct_ErrorTBS = `enum NID_setct_ErrorTBS = 567;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_setct_ErrorTBS); }))) {
            mixin(enumMixinStr_NID_setct_ErrorTBS);
        }
    }




    static if(!is(typeof(OBJ_setct_ErrorTBS))) {
        private enum enumMixinStr_OBJ_setct_ErrorTBS = `enum OBJ_setct_ErrorTBS = 2L , 23L , 42L , 0L , 49L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_setct_ErrorTBS); }))) {
            mixin(enumMixinStr_OBJ_setct_ErrorTBS);
        }
    }




    static if(!is(typeof(SN_setct_PIDualSignedTBE))) {
        private enum enumMixinStr_SN_setct_PIDualSignedTBE = `enum SN_setct_PIDualSignedTBE = "setct-PIDualSignedTBE";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_setct_PIDualSignedTBE); }))) {
            mixin(enumMixinStr_SN_setct_PIDualSignedTBE);
        }
    }




    static if(!is(typeof(NID_setct_PIDualSignedTBE))) {
        private enum enumMixinStr_NID_setct_PIDualSignedTBE = `enum NID_setct_PIDualSignedTBE = 568;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_setct_PIDualSignedTBE); }))) {
            mixin(enumMixinStr_NID_setct_PIDualSignedTBE);
        }
    }




    static if(!is(typeof(OBJ_setct_PIDualSignedTBE))) {
        private enum enumMixinStr_OBJ_setct_PIDualSignedTBE = `enum OBJ_setct_PIDualSignedTBE = 2L , 23L , 42L , 0L , 50L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_setct_PIDualSignedTBE); }))) {
            mixin(enumMixinStr_OBJ_setct_PIDualSignedTBE);
        }
    }




    static if(!is(typeof(SN_setct_PIUnsignedTBE))) {
        private enum enumMixinStr_SN_setct_PIUnsignedTBE = `enum SN_setct_PIUnsignedTBE = "setct-PIUnsignedTBE";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_setct_PIUnsignedTBE); }))) {
            mixin(enumMixinStr_SN_setct_PIUnsignedTBE);
        }
    }




    static if(!is(typeof(NID_setct_PIUnsignedTBE))) {
        private enum enumMixinStr_NID_setct_PIUnsignedTBE = `enum NID_setct_PIUnsignedTBE = 569;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_setct_PIUnsignedTBE); }))) {
            mixin(enumMixinStr_NID_setct_PIUnsignedTBE);
        }
    }




    static if(!is(typeof(OBJ_setct_PIUnsignedTBE))) {
        private enum enumMixinStr_OBJ_setct_PIUnsignedTBE = `enum OBJ_setct_PIUnsignedTBE = 2L , 23L , 42L , 0L , 51L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_setct_PIUnsignedTBE); }))) {
            mixin(enumMixinStr_OBJ_setct_PIUnsignedTBE);
        }
    }




    static if(!is(typeof(SN_setct_AuthReqTBE))) {
        private enum enumMixinStr_SN_setct_AuthReqTBE = `enum SN_setct_AuthReqTBE = "setct-AuthReqTBE";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_setct_AuthReqTBE); }))) {
            mixin(enumMixinStr_SN_setct_AuthReqTBE);
        }
    }




    static if(!is(typeof(NID_setct_AuthReqTBE))) {
        private enum enumMixinStr_NID_setct_AuthReqTBE = `enum NID_setct_AuthReqTBE = 570;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_setct_AuthReqTBE); }))) {
            mixin(enumMixinStr_NID_setct_AuthReqTBE);
        }
    }




    static if(!is(typeof(OBJ_setct_AuthReqTBE))) {
        private enum enumMixinStr_OBJ_setct_AuthReqTBE = `enum OBJ_setct_AuthReqTBE = 2L , 23L , 42L , 0L , 52L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_setct_AuthReqTBE); }))) {
            mixin(enumMixinStr_OBJ_setct_AuthReqTBE);
        }
    }




    static if(!is(typeof(SN_setct_AuthResTBE))) {
        private enum enumMixinStr_SN_setct_AuthResTBE = `enum SN_setct_AuthResTBE = "setct-AuthResTBE";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_setct_AuthResTBE); }))) {
            mixin(enumMixinStr_SN_setct_AuthResTBE);
        }
    }




    static if(!is(typeof(NID_setct_AuthResTBE))) {
        private enum enumMixinStr_NID_setct_AuthResTBE = `enum NID_setct_AuthResTBE = 571;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_setct_AuthResTBE); }))) {
            mixin(enumMixinStr_NID_setct_AuthResTBE);
        }
    }




    static if(!is(typeof(OBJ_setct_AuthResTBE))) {
        private enum enumMixinStr_OBJ_setct_AuthResTBE = `enum OBJ_setct_AuthResTBE = 2L , 23L , 42L , 0L , 53L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_setct_AuthResTBE); }))) {
            mixin(enumMixinStr_OBJ_setct_AuthResTBE);
        }
    }




    static if(!is(typeof(SN_setct_AuthResTBEX))) {
        private enum enumMixinStr_SN_setct_AuthResTBEX = `enum SN_setct_AuthResTBEX = "setct-AuthResTBEX";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_setct_AuthResTBEX); }))) {
            mixin(enumMixinStr_SN_setct_AuthResTBEX);
        }
    }




    static if(!is(typeof(NID_setct_AuthResTBEX))) {
        private enum enumMixinStr_NID_setct_AuthResTBEX = `enum NID_setct_AuthResTBEX = 572;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_setct_AuthResTBEX); }))) {
            mixin(enumMixinStr_NID_setct_AuthResTBEX);
        }
    }




    static if(!is(typeof(OBJ_setct_AuthResTBEX))) {
        private enum enumMixinStr_OBJ_setct_AuthResTBEX = `enum OBJ_setct_AuthResTBEX = 2L , 23L , 42L , 0L , 54L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_setct_AuthResTBEX); }))) {
            mixin(enumMixinStr_OBJ_setct_AuthResTBEX);
        }
    }




    static if(!is(typeof(SN_setct_AuthTokenTBE))) {
        private enum enumMixinStr_SN_setct_AuthTokenTBE = `enum SN_setct_AuthTokenTBE = "setct-AuthTokenTBE";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_setct_AuthTokenTBE); }))) {
            mixin(enumMixinStr_SN_setct_AuthTokenTBE);
        }
    }




    static if(!is(typeof(NID_setct_AuthTokenTBE))) {
        private enum enumMixinStr_NID_setct_AuthTokenTBE = `enum NID_setct_AuthTokenTBE = 573;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_setct_AuthTokenTBE); }))) {
            mixin(enumMixinStr_NID_setct_AuthTokenTBE);
        }
    }




    static if(!is(typeof(OBJ_setct_AuthTokenTBE))) {
        private enum enumMixinStr_OBJ_setct_AuthTokenTBE = `enum OBJ_setct_AuthTokenTBE = 2L , 23L , 42L , 0L , 55L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_setct_AuthTokenTBE); }))) {
            mixin(enumMixinStr_OBJ_setct_AuthTokenTBE);
        }
    }




    static if(!is(typeof(SN_setct_CapTokenTBE))) {
        private enum enumMixinStr_SN_setct_CapTokenTBE = `enum SN_setct_CapTokenTBE = "setct-CapTokenTBE";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_setct_CapTokenTBE); }))) {
            mixin(enumMixinStr_SN_setct_CapTokenTBE);
        }
    }




    static if(!is(typeof(NID_setct_CapTokenTBE))) {
        private enum enumMixinStr_NID_setct_CapTokenTBE = `enum NID_setct_CapTokenTBE = 574;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_setct_CapTokenTBE); }))) {
            mixin(enumMixinStr_NID_setct_CapTokenTBE);
        }
    }




    static if(!is(typeof(OBJ_setct_CapTokenTBE))) {
        private enum enumMixinStr_OBJ_setct_CapTokenTBE = `enum OBJ_setct_CapTokenTBE = 2L , 23L , 42L , 0L , 56L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_setct_CapTokenTBE); }))) {
            mixin(enumMixinStr_OBJ_setct_CapTokenTBE);
        }
    }




    static if(!is(typeof(SN_setct_CapTokenTBEX))) {
        private enum enumMixinStr_SN_setct_CapTokenTBEX = `enum SN_setct_CapTokenTBEX = "setct-CapTokenTBEX";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_setct_CapTokenTBEX); }))) {
            mixin(enumMixinStr_SN_setct_CapTokenTBEX);
        }
    }




    static if(!is(typeof(NID_setct_CapTokenTBEX))) {
        private enum enumMixinStr_NID_setct_CapTokenTBEX = `enum NID_setct_CapTokenTBEX = 575;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_setct_CapTokenTBEX); }))) {
            mixin(enumMixinStr_NID_setct_CapTokenTBEX);
        }
    }




    static if(!is(typeof(OBJ_setct_CapTokenTBEX))) {
        private enum enumMixinStr_OBJ_setct_CapTokenTBEX = `enum OBJ_setct_CapTokenTBEX = 2L , 23L , 42L , 0L , 57L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_setct_CapTokenTBEX); }))) {
            mixin(enumMixinStr_OBJ_setct_CapTokenTBEX);
        }
    }




    static if(!is(typeof(SN_setct_AcqCardCodeMsgTBE))) {
        private enum enumMixinStr_SN_setct_AcqCardCodeMsgTBE = `enum SN_setct_AcqCardCodeMsgTBE = "setct-AcqCardCodeMsgTBE";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_setct_AcqCardCodeMsgTBE); }))) {
            mixin(enumMixinStr_SN_setct_AcqCardCodeMsgTBE);
        }
    }




    static if(!is(typeof(NID_setct_AcqCardCodeMsgTBE))) {
        private enum enumMixinStr_NID_setct_AcqCardCodeMsgTBE = `enum NID_setct_AcqCardCodeMsgTBE = 576;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_setct_AcqCardCodeMsgTBE); }))) {
            mixin(enumMixinStr_NID_setct_AcqCardCodeMsgTBE);
        }
    }




    static if(!is(typeof(OBJ_setct_AcqCardCodeMsgTBE))) {
        private enum enumMixinStr_OBJ_setct_AcqCardCodeMsgTBE = `enum OBJ_setct_AcqCardCodeMsgTBE = 2L , 23L , 42L , 0L , 58L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_setct_AcqCardCodeMsgTBE); }))) {
            mixin(enumMixinStr_OBJ_setct_AcqCardCodeMsgTBE);
        }
    }




    static if(!is(typeof(SN_setct_AuthRevReqTBE))) {
        private enum enumMixinStr_SN_setct_AuthRevReqTBE = `enum SN_setct_AuthRevReqTBE = "setct-AuthRevReqTBE";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_setct_AuthRevReqTBE); }))) {
            mixin(enumMixinStr_SN_setct_AuthRevReqTBE);
        }
    }




    static if(!is(typeof(NID_setct_AuthRevReqTBE))) {
        private enum enumMixinStr_NID_setct_AuthRevReqTBE = `enum NID_setct_AuthRevReqTBE = 577;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_setct_AuthRevReqTBE); }))) {
            mixin(enumMixinStr_NID_setct_AuthRevReqTBE);
        }
    }




    static if(!is(typeof(OBJ_setct_AuthRevReqTBE))) {
        private enum enumMixinStr_OBJ_setct_AuthRevReqTBE = `enum OBJ_setct_AuthRevReqTBE = 2L , 23L , 42L , 0L , 59L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_setct_AuthRevReqTBE); }))) {
            mixin(enumMixinStr_OBJ_setct_AuthRevReqTBE);
        }
    }




    static if(!is(typeof(SN_setct_AuthRevResTBE))) {
        private enum enumMixinStr_SN_setct_AuthRevResTBE = `enum SN_setct_AuthRevResTBE = "setct-AuthRevResTBE";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_setct_AuthRevResTBE); }))) {
            mixin(enumMixinStr_SN_setct_AuthRevResTBE);
        }
    }




    static if(!is(typeof(NID_setct_AuthRevResTBE))) {
        private enum enumMixinStr_NID_setct_AuthRevResTBE = `enum NID_setct_AuthRevResTBE = 578;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_setct_AuthRevResTBE); }))) {
            mixin(enumMixinStr_NID_setct_AuthRevResTBE);
        }
    }




    static if(!is(typeof(OBJ_setct_AuthRevResTBE))) {
        private enum enumMixinStr_OBJ_setct_AuthRevResTBE = `enum OBJ_setct_AuthRevResTBE = 2L , 23L , 42L , 0L , 60L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_setct_AuthRevResTBE); }))) {
            mixin(enumMixinStr_OBJ_setct_AuthRevResTBE);
        }
    }




    static if(!is(typeof(SN_setct_AuthRevResTBEB))) {
        private enum enumMixinStr_SN_setct_AuthRevResTBEB = `enum SN_setct_AuthRevResTBEB = "setct-AuthRevResTBEB";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_setct_AuthRevResTBEB); }))) {
            mixin(enumMixinStr_SN_setct_AuthRevResTBEB);
        }
    }




    static if(!is(typeof(NID_setct_AuthRevResTBEB))) {
        private enum enumMixinStr_NID_setct_AuthRevResTBEB = `enum NID_setct_AuthRevResTBEB = 579;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_setct_AuthRevResTBEB); }))) {
            mixin(enumMixinStr_NID_setct_AuthRevResTBEB);
        }
    }




    static if(!is(typeof(OBJ_setct_AuthRevResTBEB))) {
        private enum enumMixinStr_OBJ_setct_AuthRevResTBEB = `enum OBJ_setct_AuthRevResTBEB = 2L , 23L , 42L , 0L , 61L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_setct_AuthRevResTBEB); }))) {
            mixin(enumMixinStr_OBJ_setct_AuthRevResTBEB);
        }
    }




    static if(!is(typeof(SN_setct_CapReqTBE))) {
        private enum enumMixinStr_SN_setct_CapReqTBE = `enum SN_setct_CapReqTBE = "setct-CapReqTBE";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_setct_CapReqTBE); }))) {
            mixin(enumMixinStr_SN_setct_CapReqTBE);
        }
    }




    static if(!is(typeof(NID_setct_CapReqTBE))) {
        private enum enumMixinStr_NID_setct_CapReqTBE = `enum NID_setct_CapReqTBE = 580;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_setct_CapReqTBE); }))) {
            mixin(enumMixinStr_NID_setct_CapReqTBE);
        }
    }




    static if(!is(typeof(OBJ_setct_CapReqTBE))) {
        private enum enumMixinStr_OBJ_setct_CapReqTBE = `enum OBJ_setct_CapReqTBE = 2L , 23L , 42L , 0L , 62L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_setct_CapReqTBE); }))) {
            mixin(enumMixinStr_OBJ_setct_CapReqTBE);
        }
    }




    static if(!is(typeof(SN_setct_CapReqTBEX))) {
        private enum enumMixinStr_SN_setct_CapReqTBEX = `enum SN_setct_CapReqTBEX = "setct-CapReqTBEX";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_setct_CapReqTBEX); }))) {
            mixin(enumMixinStr_SN_setct_CapReqTBEX);
        }
    }




    static if(!is(typeof(NID_setct_CapReqTBEX))) {
        private enum enumMixinStr_NID_setct_CapReqTBEX = `enum NID_setct_CapReqTBEX = 581;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_setct_CapReqTBEX); }))) {
            mixin(enumMixinStr_NID_setct_CapReqTBEX);
        }
    }




    static if(!is(typeof(OBJ_setct_CapReqTBEX))) {
        private enum enumMixinStr_OBJ_setct_CapReqTBEX = `enum OBJ_setct_CapReqTBEX = 2L , 23L , 42L , 0L , 63L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_setct_CapReqTBEX); }))) {
            mixin(enumMixinStr_OBJ_setct_CapReqTBEX);
        }
    }




    static if(!is(typeof(SN_setct_CapResTBE))) {
        private enum enumMixinStr_SN_setct_CapResTBE = `enum SN_setct_CapResTBE = "setct-CapResTBE";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_setct_CapResTBE); }))) {
            mixin(enumMixinStr_SN_setct_CapResTBE);
        }
    }




    static if(!is(typeof(NID_setct_CapResTBE))) {
        private enum enumMixinStr_NID_setct_CapResTBE = `enum NID_setct_CapResTBE = 582;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_setct_CapResTBE); }))) {
            mixin(enumMixinStr_NID_setct_CapResTBE);
        }
    }




    static if(!is(typeof(OBJ_setct_CapResTBE))) {
        private enum enumMixinStr_OBJ_setct_CapResTBE = `enum OBJ_setct_CapResTBE = 2L , 23L , 42L , 0L , 64L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_setct_CapResTBE); }))) {
            mixin(enumMixinStr_OBJ_setct_CapResTBE);
        }
    }




    static if(!is(typeof(SN_setct_CapRevReqTBE))) {
        private enum enumMixinStr_SN_setct_CapRevReqTBE = `enum SN_setct_CapRevReqTBE = "setct-CapRevReqTBE";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_setct_CapRevReqTBE); }))) {
            mixin(enumMixinStr_SN_setct_CapRevReqTBE);
        }
    }




    static if(!is(typeof(NID_setct_CapRevReqTBE))) {
        private enum enumMixinStr_NID_setct_CapRevReqTBE = `enum NID_setct_CapRevReqTBE = 583;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_setct_CapRevReqTBE); }))) {
            mixin(enumMixinStr_NID_setct_CapRevReqTBE);
        }
    }




    static if(!is(typeof(OBJ_setct_CapRevReqTBE))) {
        private enum enumMixinStr_OBJ_setct_CapRevReqTBE = `enum OBJ_setct_CapRevReqTBE = 2L , 23L , 42L , 0L , 65L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_setct_CapRevReqTBE); }))) {
            mixin(enumMixinStr_OBJ_setct_CapRevReqTBE);
        }
    }




    static if(!is(typeof(SN_setct_CapRevReqTBEX))) {
        private enum enumMixinStr_SN_setct_CapRevReqTBEX = `enum SN_setct_CapRevReqTBEX = "setct-CapRevReqTBEX";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_setct_CapRevReqTBEX); }))) {
            mixin(enumMixinStr_SN_setct_CapRevReqTBEX);
        }
    }




    static if(!is(typeof(NID_setct_CapRevReqTBEX))) {
        private enum enumMixinStr_NID_setct_CapRevReqTBEX = `enum NID_setct_CapRevReqTBEX = 584;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_setct_CapRevReqTBEX); }))) {
            mixin(enumMixinStr_NID_setct_CapRevReqTBEX);
        }
    }




    static if(!is(typeof(OBJ_setct_CapRevReqTBEX))) {
        private enum enumMixinStr_OBJ_setct_CapRevReqTBEX = `enum OBJ_setct_CapRevReqTBEX = 2L , 23L , 42L , 0L , 66L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_setct_CapRevReqTBEX); }))) {
            mixin(enumMixinStr_OBJ_setct_CapRevReqTBEX);
        }
    }




    static if(!is(typeof(SN_setct_CapRevResTBE))) {
        private enum enumMixinStr_SN_setct_CapRevResTBE = `enum SN_setct_CapRevResTBE = "setct-CapRevResTBE";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_setct_CapRevResTBE); }))) {
            mixin(enumMixinStr_SN_setct_CapRevResTBE);
        }
    }




    static if(!is(typeof(NID_setct_CapRevResTBE))) {
        private enum enumMixinStr_NID_setct_CapRevResTBE = `enum NID_setct_CapRevResTBE = 585;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_setct_CapRevResTBE); }))) {
            mixin(enumMixinStr_NID_setct_CapRevResTBE);
        }
    }




    static if(!is(typeof(OBJ_setct_CapRevResTBE))) {
        private enum enumMixinStr_OBJ_setct_CapRevResTBE = `enum OBJ_setct_CapRevResTBE = 2L , 23L , 42L , 0L , 67L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_setct_CapRevResTBE); }))) {
            mixin(enumMixinStr_OBJ_setct_CapRevResTBE);
        }
    }




    static if(!is(typeof(SN_setct_CredReqTBE))) {
        private enum enumMixinStr_SN_setct_CredReqTBE = `enum SN_setct_CredReqTBE = "setct-CredReqTBE";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_setct_CredReqTBE); }))) {
            mixin(enumMixinStr_SN_setct_CredReqTBE);
        }
    }




    static if(!is(typeof(NID_setct_CredReqTBE))) {
        private enum enumMixinStr_NID_setct_CredReqTBE = `enum NID_setct_CredReqTBE = 586;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_setct_CredReqTBE); }))) {
            mixin(enumMixinStr_NID_setct_CredReqTBE);
        }
    }




    static if(!is(typeof(OBJ_setct_CredReqTBE))) {
        private enum enumMixinStr_OBJ_setct_CredReqTBE = `enum OBJ_setct_CredReqTBE = 2L , 23L , 42L , 0L , 68L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_setct_CredReqTBE); }))) {
            mixin(enumMixinStr_OBJ_setct_CredReqTBE);
        }
    }




    static if(!is(typeof(SN_setct_CredReqTBEX))) {
        private enum enumMixinStr_SN_setct_CredReqTBEX = `enum SN_setct_CredReqTBEX = "setct-CredReqTBEX";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_setct_CredReqTBEX); }))) {
            mixin(enumMixinStr_SN_setct_CredReqTBEX);
        }
    }




    static if(!is(typeof(NID_setct_CredReqTBEX))) {
        private enum enumMixinStr_NID_setct_CredReqTBEX = `enum NID_setct_CredReqTBEX = 587;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_setct_CredReqTBEX); }))) {
            mixin(enumMixinStr_NID_setct_CredReqTBEX);
        }
    }




    static if(!is(typeof(OBJ_setct_CredReqTBEX))) {
        private enum enumMixinStr_OBJ_setct_CredReqTBEX = `enum OBJ_setct_CredReqTBEX = 2L , 23L , 42L , 0L , 69L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_setct_CredReqTBEX); }))) {
            mixin(enumMixinStr_OBJ_setct_CredReqTBEX);
        }
    }




    static if(!is(typeof(SN_setct_CredResTBE))) {
        private enum enumMixinStr_SN_setct_CredResTBE = `enum SN_setct_CredResTBE = "setct-CredResTBE";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_setct_CredResTBE); }))) {
            mixin(enumMixinStr_SN_setct_CredResTBE);
        }
    }




    static if(!is(typeof(NID_setct_CredResTBE))) {
        private enum enumMixinStr_NID_setct_CredResTBE = `enum NID_setct_CredResTBE = 588;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_setct_CredResTBE); }))) {
            mixin(enumMixinStr_NID_setct_CredResTBE);
        }
    }




    static if(!is(typeof(OBJ_setct_CredResTBE))) {
        private enum enumMixinStr_OBJ_setct_CredResTBE = `enum OBJ_setct_CredResTBE = 2L , 23L , 42L , 0L , 70L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_setct_CredResTBE); }))) {
            mixin(enumMixinStr_OBJ_setct_CredResTBE);
        }
    }




    static if(!is(typeof(SN_setct_CredRevReqTBE))) {
        private enum enumMixinStr_SN_setct_CredRevReqTBE = `enum SN_setct_CredRevReqTBE = "setct-CredRevReqTBE";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_setct_CredRevReqTBE); }))) {
            mixin(enumMixinStr_SN_setct_CredRevReqTBE);
        }
    }




    static if(!is(typeof(NID_setct_CredRevReqTBE))) {
        private enum enumMixinStr_NID_setct_CredRevReqTBE = `enum NID_setct_CredRevReqTBE = 589;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_setct_CredRevReqTBE); }))) {
            mixin(enumMixinStr_NID_setct_CredRevReqTBE);
        }
    }




    static if(!is(typeof(OBJ_setct_CredRevReqTBE))) {
        private enum enumMixinStr_OBJ_setct_CredRevReqTBE = `enum OBJ_setct_CredRevReqTBE = 2L , 23L , 42L , 0L , 71L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_setct_CredRevReqTBE); }))) {
            mixin(enumMixinStr_OBJ_setct_CredRevReqTBE);
        }
    }




    static if(!is(typeof(SN_setct_CredRevReqTBEX))) {
        private enum enumMixinStr_SN_setct_CredRevReqTBEX = `enum SN_setct_CredRevReqTBEX = "setct-CredRevReqTBEX";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_setct_CredRevReqTBEX); }))) {
            mixin(enumMixinStr_SN_setct_CredRevReqTBEX);
        }
    }




    static if(!is(typeof(NID_setct_CredRevReqTBEX))) {
        private enum enumMixinStr_NID_setct_CredRevReqTBEX = `enum NID_setct_CredRevReqTBEX = 590;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_setct_CredRevReqTBEX); }))) {
            mixin(enumMixinStr_NID_setct_CredRevReqTBEX);
        }
    }




    static if(!is(typeof(OBJ_setct_CredRevReqTBEX))) {
        private enum enumMixinStr_OBJ_setct_CredRevReqTBEX = `enum OBJ_setct_CredRevReqTBEX = 2L , 23L , 42L , 0L , 72L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_setct_CredRevReqTBEX); }))) {
            mixin(enumMixinStr_OBJ_setct_CredRevReqTBEX);
        }
    }




    static if(!is(typeof(SN_setct_CredRevResTBE))) {
        private enum enumMixinStr_SN_setct_CredRevResTBE = `enum SN_setct_CredRevResTBE = "setct-CredRevResTBE";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_setct_CredRevResTBE); }))) {
            mixin(enumMixinStr_SN_setct_CredRevResTBE);
        }
    }




    static if(!is(typeof(NID_setct_CredRevResTBE))) {
        private enum enumMixinStr_NID_setct_CredRevResTBE = `enum NID_setct_CredRevResTBE = 591;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_setct_CredRevResTBE); }))) {
            mixin(enumMixinStr_NID_setct_CredRevResTBE);
        }
    }




    static if(!is(typeof(OBJ_setct_CredRevResTBE))) {
        private enum enumMixinStr_OBJ_setct_CredRevResTBE = `enum OBJ_setct_CredRevResTBE = 2L , 23L , 42L , 0L , 73L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_setct_CredRevResTBE); }))) {
            mixin(enumMixinStr_OBJ_setct_CredRevResTBE);
        }
    }




    static if(!is(typeof(SN_setct_BatchAdminReqTBE))) {
        private enum enumMixinStr_SN_setct_BatchAdminReqTBE = `enum SN_setct_BatchAdminReqTBE = "setct-BatchAdminReqTBE";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_setct_BatchAdminReqTBE); }))) {
            mixin(enumMixinStr_SN_setct_BatchAdminReqTBE);
        }
    }




    static if(!is(typeof(NID_setct_BatchAdminReqTBE))) {
        private enum enumMixinStr_NID_setct_BatchAdminReqTBE = `enum NID_setct_BatchAdminReqTBE = 592;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_setct_BatchAdminReqTBE); }))) {
            mixin(enumMixinStr_NID_setct_BatchAdminReqTBE);
        }
    }




    static if(!is(typeof(OBJ_setct_BatchAdminReqTBE))) {
        private enum enumMixinStr_OBJ_setct_BatchAdminReqTBE = `enum OBJ_setct_BatchAdminReqTBE = 2L , 23L , 42L , 0L , 74L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_setct_BatchAdminReqTBE); }))) {
            mixin(enumMixinStr_OBJ_setct_BatchAdminReqTBE);
        }
    }




    static if(!is(typeof(SN_setct_BatchAdminResTBE))) {
        private enum enumMixinStr_SN_setct_BatchAdminResTBE = `enum SN_setct_BatchAdminResTBE = "setct-BatchAdminResTBE";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_setct_BatchAdminResTBE); }))) {
            mixin(enumMixinStr_SN_setct_BatchAdminResTBE);
        }
    }




    static if(!is(typeof(NID_setct_BatchAdminResTBE))) {
        private enum enumMixinStr_NID_setct_BatchAdminResTBE = `enum NID_setct_BatchAdminResTBE = 593;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_setct_BatchAdminResTBE); }))) {
            mixin(enumMixinStr_NID_setct_BatchAdminResTBE);
        }
    }




    static if(!is(typeof(OBJ_setct_BatchAdminResTBE))) {
        private enum enumMixinStr_OBJ_setct_BatchAdminResTBE = `enum OBJ_setct_BatchAdminResTBE = 2L , 23L , 42L , 0L , 75L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_setct_BatchAdminResTBE); }))) {
            mixin(enumMixinStr_OBJ_setct_BatchAdminResTBE);
        }
    }




    static if(!is(typeof(SN_setct_RegFormReqTBE))) {
        private enum enumMixinStr_SN_setct_RegFormReqTBE = `enum SN_setct_RegFormReqTBE = "setct-RegFormReqTBE";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_setct_RegFormReqTBE); }))) {
            mixin(enumMixinStr_SN_setct_RegFormReqTBE);
        }
    }




    static if(!is(typeof(NID_setct_RegFormReqTBE))) {
        private enum enumMixinStr_NID_setct_RegFormReqTBE = `enum NID_setct_RegFormReqTBE = 594;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_setct_RegFormReqTBE); }))) {
            mixin(enumMixinStr_NID_setct_RegFormReqTBE);
        }
    }




    static if(!is(typeof(OBJ_setct_RegFormReqTBE))) {
        private enum enumMixinStr_OBJ_setct_RegFormReqTBE = `enum OBJ_setct_RegFormReqTBE = 2L , 23L , 42L , 0L , 76L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_setct_RegFormReqTBE); }))) {
            mixin(enumMixinStr_OBJ_setct_RegFormReqTBE);
        }
    }




    static if(!is(typeof(SN_setct_CertReqTBE))) {
        private enum enumMixinStr_SN_setct_CertReqTBE = `enum SN_setct_CertReqTBE = "setct-CertReqTBE";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_setct_CertReqTBE); }))) {
            mixin(enumMixinStr_SN_setct_CertReqTBE);
        }
    }




    static if(!is(typeof(NID_setct_CertReqTBE))) {
        private enum enumMixinStr_NID_setct_CertReqTBE = `enum NID_setct_CertReqTBE = 595;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_setct_CertReqTBE); }))) {
            mixin(enumMixinStr_NID_setct_CertReqTBE);
        }
    }




    static if(!is(typeof(OBJ_setct_CertReqTBE))) {
        private enum enumMixinStr_OBJ_setct_CertReqTBE = `enum OBJ_setct_CertReqTBE = 2L , 23L , 42L , 0L , 77L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_setct_CertReqTBE); }))) {
            mixin(enumMixinStr_OBJ_setct_CertReqTBE);
        }
    }




    static if(!is(typeof(SN_setct_CertReqTBEX))) {
        private enum enumMixinStr_SN_setct_CertReqTBEX = `enum SN_setct_CertReqTBEX = "setct-CertReqTBEX";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_setct_CertReqTBEX); }))) {
            mixin(enumMixinStr_SN_setct_CertReqTBEX);
        }
    }




    static if(!is(typeof(NID_setct_CertReqTBEX))) {
        private enum enumMixinStr_NID_setct_CertReqTBEX = `enum NID_setct_CertReqTBEX = 596;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_setct_CertReqTBEX); }))) {
            mixin(enumMixinStr_NID_setct_CertReqTBEX);
        }
    }




    static if(!is(typeof(OBJ_setct_CertReqTBEX))) {
        private enum enumMixinStr_OBJ_setct_CertReqTBEX = `enum OBJ_setct_CertReqTBEX = 2L , 23L , 42L , 0L , 78L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_setct_CertReqTBEX); }))) {
            mixin(enumMixinStr_OBJ_setct_CertReqTBEX);
        }
    }




    static if(!is(typeof(SN_setct_CertResTBE))) {
        private enum enumMixinStr_SN_setct_CertResTBE = `enum SN_setct_CertResTBE = "setct-CertResTBE";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_setct_CertResTBE); }))) {
            mixin(enumMixinStr_SN_setct_CertResTBE);
        }
    }




    static if(!is(typeof(NID_setct_CertResTBE))) {
        private enum enumMixinStr_NID_setct_CertResTBE = `enum NID_setct_CertResTBE = 597;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_setct_CertResTBE); }))) {
            mixin(enumMixinStr_NID_setct_CertResTBE);
        }
    }




    static if(!is(typeof(OBJ_setct_CertResTBE))) {
        private enum enumMixinStr_OBJ_setct_CertResTBE = `enum OBJ_setct_CertResTBE = 2L , 23L , 42L , 0L , 79L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_setct_CertResTBE); }))) {
            mixin(enumMixinStr_OBJ_setct_CertResTBE);
        }
    }




    static if(!is(typeof(SN_setct_CRLNotificationTBS))) {
        private enum enumMixinStr_SN_setct_CRLNotificationTBS = `enum SN_setct_CRLNotificationTBS = "setct-CRLNotificationTBS";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_setct_CRLNotificationTBS); }))) {
            mixin(enumMixinStr_SN_setct_CRLNotificationTBS);
        }
    }




    static if(!is(typeof(NID_setct_CRLNotificationTBS))) {
        private enum enumMixinStr_NID_setct_CRLNotificationTBS = `enum NID_setct_CRLNotificationTBS = 598;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_setct_CRLNotificationTBS); }))) {
            mixin(enumMixinStr_NID_setct_CRLNotificationTBS);
        }
    }




    static if(!is(typeof(OBJ_setct_CRLNotificationTBS))) {
        private enum enumMixinStr_OBJ_setct_CRLNotificationTBS = `enum OBJ_setct_CRLNotificationTBS = 2L , 23L , 42L , 0L , 80L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_setct_CRLNotificationTBS); }))) {
            mixin(enumMixinStr_OBJ_setct_CRLNotificationTBS);
        }
    }




    static if(!is(typeof(SN_setct_CRLNotificationResTBS))) {
        private enum enumMixinStr_SN_setct_CRLNotificationResTBS = `enum SN_setct_CRLNotificationResTBS = "setct-CRLNotificationResTBS";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_setct_CRLNotificationResTBS); }))) {
            mixin(enumMixinStr_SN_setct_CRLNotificationResTBS);
        }
    }




    static if(!is(typeof(NID_setct_CRLNotificationResTBS))) {
        private enum enumMixinStr_NID_setct_CRLNotificationResTBS = `enum NID_setct_CRLNotificationResTBS = 599;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_setct_CRLNotificationResTBS); }))) {
            mixin(enumMixinStr_NID_setct_CRLNotificationResTBS);
        }
    }




    static if(!is(typeof(OBJ_setct_CRLNotificationResTBS))) {
        private enum enumMixinStr_OBJ_setct_CRLNotificationResTBS = `enum OBJ_setct_CRLNotificationResTBS = 2L , 23L , 42L , 0L , 81L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_setct_CRLNotificationResTBS); }))) {
            mixin(enumMixinStr_OBJ_setct_CRLNotificationResTBS);
        }
    }




    static if(!is(typeof(SN_setct_BCIDistributionTBS))) {
        private enum enumMixinStr_SN_setct_BCIDistributionTBS = `enum SN_setct_BCIDistributionTBS = "setct-BCIDistributionTBS";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_setct_BCIDistributionTBS); }))) {
            mixin(enumMixinStr_SN_setct_BCIDistributionTBS);
        }
    }




    static if(!is(typeof(NID_setct_BCIDistributionTBS))) {
        private enum enumMixinStr_NID_setct_BCIDistributionTBS = `enum NID_setct_BCIDistributionTBS = 600;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_setct_BCIDistributionTBS); }))) {
            mixin(enumMixinStr_NID_setct_BCIDistributionTBS);
        }
    }




    static if(!is(typeof(OBJ_setct_BCIDistributionTBS))) {
        private enum enumMixinStr_OBJ_setct_BCIDistributionTBS = `enum OBJ_setct_BCIDistributionTBS = 2L , 23L , 42L , 0L , 82L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_setct_BCIDistributionTBS); }))) {
            mixin(enumMixinStr_OBJ_setct_BCIDistributionTBS);
        }
    }




    static if(!is(typeof(SN_setext_genCrypt))) {
        private enum enumMixinStr_SN_setext_genCrypt = `enum SN_setext_genCrypt = "setext-genCrypt";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_setext_genCrypt); }))) {
            mixin(enumMixinStr_SN_setext_genCrypt);
        }
    }




    static if(!is(typeof(LN_setext_genCrypt))) {
        private enum enumMixinStr_LN_setext_genCrypt = `enum LN_setext_genCrypt = "generic cryptogram";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_setext_genCrypt); }))) {
            mixin(enumMixinStr_LN_setext_genCrypt);
        }
    }




    static if(!is(typeof(NID_setext_genCrypt))) {
        private enum enumMixinStr_NID_setext_genCrypt = `enum NID_setext_genCrypt = 601;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_setext_genCrypt); }))) {
            mixin(enumMixinStr_NID_setext_genCrypt);
        }
    }




    static if(!is(typeof(OBJ_setext_genCrypt))) {
        private enum enumMixinStr_OBJ_setext_genCrypt = `enum OBJ_setext_genCrypt = 2L , 23L , 42L , 1L , 1L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_setext_genCrypt); }))) {
            mixin(enumMixinStr_OBJ_setext_genCrypt);
        }
    }




    static if(!is(typeof(SN_setext_miAuth))) {
        private enum enumMixinStr_SN_setext_miAuth = `enum SN_setext_miAuth = "setext-miAuth";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_setext_miAuth); }))) {
            mixin(enumMixinStr_SN_setext_miAuth);
        }
    }




    static if(!is(typeof(LN_setext_miAuth))) {
        private enum enumMixinStr_LN_setext_miAuth = `enum LN_setext_miAuth = "merchant initiated auth";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_setext_miAuth); }))) {
            mixin(enumMixinStr_LN_setext_miAuth);
        }
    }




    static if(!is(typeof(NID_setext_miAuth))) {
        private enum enumMixinStr_NID_setext_miAuth = `enum NID_setext_miAuth = 602;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_setext_miAuth); }))) {
            mixin(enumMixinStr_NID_setext_miAuth);
        }
    }




    static if(!is(typeof(OBJ_setext_miAuth))) {
        private enum enumMixinStr_OBJ_setext_miAuth = `enum OBJ_setext_miAuth = 2L , 23L , 42L , 1L , 3L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_setext_miAuth); }))) {
            mixin(enumMixinStr_OBJ_setext_miAuth);
        }
    }




    static if(!is(typeof(SN_setext_pinSecure))) {
        private enum enumMixinStr_SN_setext_pinSecure = `enum SN_setext_pinSecure = "setext-pinSecure";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_setext_pinSecure); }))) {
            mixin(enumMixinStr_SN_setext_pinSecure);
        }
    }




    static if(!is(typeof(NID_setext_pinSecure))) {
        private enum enumMixinStr_NID_setext_pinSecure = `enum NID_setext_pinSecure = 603;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_setext_pinSecure); }))) {
            mixin(enumMixinStr_NID_setext_pinSecure);
        }
    }




    static if(!is(typeof(OBJ_setext_pinSecure))) {
        private enum enumMixinStr_OBJ_setext_pinSecure = `enum OBJ_setext_pinSecure = 2L , 23L , 42L , 1L , 4L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_setext_pinSecure); }))) {
            mixin(enumMixinStr_OBJ_setext_pinSecure);
        }
    }




    static if(!is(typeof(SN_setext_pinAny))) {
        private enum enumMixinStr_SN_setext_pinAny = `enum SN_setext_pinAny = "setext-pinAny";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_setext_pinAny); }))) {
            mixin(enumMixinStr_SN_setext_pinAny);
        }
    }




    static if(!is(typeof(NID_setext_pinAny))) {
        private enum enumMixinStr_NID_setext_pinAny = `enum NID_setext_pinAny = 604;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_setext_pinAny); }))) {
            mixin(enumMixinStr_NID_setext_pinAny);
        }
    }




    static if(!is(typeof(OBJ_setext_pinAny))) {
        private enum enumMixinStr_OBJ_setext_pinAny = `enum OBJ_setext_pinAny = 2L , 23L , 42L , 1L , 5L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_setext_pinAny); }))) {
            mixin(enumMixinStr_OBJ_setext_pinAny);
        }
    }




    static if(!is(typeof(SN_setext_track2))) {
        private enum enumMixinStr_SN_setext_track2 = `enum SN_setext_track2 = "setext-track2";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_setext_track2); }))) {
            mixin(enumMixinStr_SN_setext_track2);
        }
    }




    static if(!is(typeof(NID_setext_track2))) {
        private enum enumMixinStr_NID_setext_track2 = `enum NID_setext_track2 = 605;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_setext_track2); }))) {
            mixin(enumMixinStr_NID_setext_track2);
        }
    }




    static if(!is(typeof(OBJ_setext_track2))) {
        private enum enumMixinStr_OBJ_setext_track2 = `enum OBJ_setext_track2 = 2L , 23L , 42L , 1L , 7L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_setext_track2); }))) {
            mixin(enumMixinStr_OBJ_setext_track2);
        }
    }




    static if(!is(typeof(SN_setext_cv))) {
        private enum enumMixinStr_SN_setext_cv = `enum SN_setext_cv = "setext-cv";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_setext_cv); }))) {
            mixin(enumMixinStr_SN_setext_cv);
        }
    }




    static if(!is(typeof(LN_setext_cv))) {
        private enum enumMixinStr_LN_setext_cv = `enum LN_setext_cv = "additional verification";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_setext_cv); }))) {
            mixin(enumMixinStr_LN_setext_cv);
        }
    }




    static if(!is(typeof(NID_setext_cv))) {
        private enum enumMixinStr_NID_setext_cv = `enum NID_setext_cv = 606;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_setext_cv); }))) {
            mixin(enumMixinStr_NID_setext_cv);
        }
    }




    static if(!is(typeof(OBJ_setext_cv))) {
        private enum enumMixinStr_OBJ_setext_cv = `enum OBJ_setext_cv = 2L , 23L , 42L , 1L , 8L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_setext_cv); }))) {
            mixin(enumMixinStr_OBJ_setext_cv);
        }
    }




    static if(!is(typeof(SN_set_policy_root))) {
        private enum enumMixinStr_SN_set_policy_root = `enum SN_set_policy_root = "set-policy-root";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_set_policy_root); }))) {
            mixin(enumMixinStr_SN_set_policy_root);
        }
    }




    static if(!is(typeof(NID_set_policy_root))) {
        private enum enumMixinStr_NID_set_policy_root = `enum NID_set_policy_root = 607;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_set_policy_root); }))) {
            mixin(enumMixinStr_NID_set_policy_root);
        }
    }




    static if(!is(typeof(OBJ_set_policy_root))) {
        private enum enumMixinStr_OBJ_set_policy_root = `enum OBJ_set_policy_root = 2L , 23L , 42L , 5L , 0L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_set_policy_root); }))) {
            mixin(enumMixinStr_OBJ_set_policy_root);
        }
    }




    static if(!is(typeof(SN_setCext_hashedRoot))) {
        private enum enumMixinStr_SN_setCext_hashedRoot = `enum SN_setCext_hashedRoot = "setCext-hashedRoot";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_setCext_hashedRoot); }))) {
            mixin(enumMixinStr_SN_setCext_hashedRoot);
        }
    }




    static if(!is(typeof(NID_setCext_hashedRoot))) {
        private enum enumMixinStr_NID_setCext_hashedRoot = `enum NID_setCext_hashedRoot = 608;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_setCext_hashedRoot); }))) {
            mixin(enumMixinStr_NID_setCext_hashedRoot);
        }
    }




    static if(!is(typeof(OBJ_setCext_hashedRoot))) {
        private enum enumMixinStr_OBJ_setCext_hashedRoot = `enum OBJ_setCext_hashedRoot = 2L , 23L , 42L , 7L , 0L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_setCext_hashedRoot); }))) {
            mixin(enumMixinStr_OBJ_setCext_hashedRoot);
        }
    }




    static if(!is(typeof(SN_setCext_certType))) {
        private enum enumMixinStr_SN_setCext_certType = `enum SN_setCext_certType = "setCext-certType";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_setCext_certType); }))) {
            mixin(enumMixinStr_SN_setCext_certType);
        }
    }




    static if(!is(typeof(NID_setCext_certType))) {
        private enum enumMixinStr_NID_setCext_certType = `enum NID_setCext_certType = 609;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_setCext_certType); }))) {
            mixin(enumMixinStr_NID_setCext_certType);
        }
    }




    static if(!is(typeof(OBJ_setCext_certType))) {
        private enum enumMixinStr_OBJ_setCext_certType = `enum OBJ_setCext_certType = 2L , 23L , 42L , 7L , 1L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_setCext_certType); }))) {
            mixin(enumMixinStr_OBJ_setCext_certType);
        }
    }




    static if(!is(typeof(SN_setCext_merchData))) {
        private enum enumMixinStr_SN_setCext_merchData = `enum SN_setCext_merchData = "setCext-merchData";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_setCext_merchData); }))) {
            mixin(enumMixinStr_SN_setCext_merchData);
        }
    }




    static if(!is(typeof(NID_setCext_merchData))) {
        private enum enumMixinStr_NID_setCext_merchData = `enum NID_setCext_merchData = 610;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_setCext_merchData); }))) {
            mixin(enumMixinStr_NID_setCext_merchData);
        }
    }




    static if(!is(typeof(OBJ_setCext_merchData))) {
        private enum enumMixinStr_OBJ_setCext_merchData = `enum OBJ_setCext_merchData = 2L , 23L , 42L , 7L , 2L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_setCext_merchData); }))) {
            mixin(enumMixinStr_OBJ_setCext_merchData);
        }
    }




    static if(!is(typeof(SN_setCext_cCertRequired))) {
        private enum enumMixinStr_SN_setCext_cCertRequired = `enum SN_setCext_cCertRequired = "setCext-cCertRequired";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_setCext_cCertRequired); }))) {
            mixin(enumMixinStr_SN_setCext_cCertRequired);
        }
    }




    static if(!is(typeof(NID_setCext_cCertRequired))) {
        private enum enumMixinStr_NID_setCext_cCertRequired = `enum NID_setCext_cCertRequired = 611;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_setCext_cCertRequired); }))) {
            mixin(enumMixinStr_NID_setCext_cCertRequired);
        }
    }




    static if(!is(typeof(OBJ_setCext_cCertRequired))) {
        private enum enumMixinStr_OBJ_setCext_cCertRequired = `enum OBJ_setCext_cCertRequired = 2L , 23L , 42L , 7L , 3L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_setCext_cCertRequired); }))) {
            mixin(enumMixinStr_OBJ_setCext_cCertRequired);
        }
    }




    static if(!is(typeof(SN_setCext_tunneling))) {
        private enum enumMixinStr_SN_setCext_tunneling = `enum SN_setCext_tunneling = "setCext-tunneling";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_setCext_tunneling); }))) {
            mixin(enumMixinStr_SN_setCext_tunneling);
        }
    }




    static if(!is(typeof(NID_setCext_tunneling))) {
        private enum enumMixinStr_NID_setCext_tunneling = `enum NID_setCext_tunneling = 612;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_setCext_tunneling); }))) {
            mixin(enumMixinStr_NID_setCext_tunneling);
        }
    }




    static if(!is(typeof(OBJ_setCext_tunneling))) {
        private enum enumMixinStr_OBJ_setCext_tunneling = `enum OBJ_setCext_tunneling = 2L , 23L , 42L , 7L , 4L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_setCext_tunneling); }))) {
            mixin(enumMixinStr_OBJ_setCext_tunneling);
        }
    }




    static if(!is(typeof(SN_setCext_setExt))) {
        private enum enumMixinStr_SN_setCext_setExt = `enum SN_setCext_setExt = "setCext-setExt";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_setCext_setExt); }))) {
            mixin(enumMixinStr_SN_setCext_setExt);
        }
    }




    static if(!is(typeof(NID_setCext_setExt))) {
        private enum enumMixinStr_NID_setCext_setExt = `enum NID_setCext_setExt = 613;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_setCext_setExt); }))) {
            mixin(enumMixinStr_NID_setCext_setExt);
        }
    }




    static if(!is(typeof(OBJ_setCext_setExt))) {
        private enum enumMixinStr_OBJ_setCext_setExt = `enum OBJ_setCext_setExt = 2L , 23L , 42L , 7L , 5L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_setCext_setExt); }))) {
            mixin(enumMixinStr_OBJ_setCext_setExt);
        }
    }




    static if(!is(typeof(SN_setCext_setQualf))) {
        private enum enumMixinStr_SN_setCext_setQualf = `enum SN_setCext_setQualf = "setCext-setQualf";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_setCext_setQualf); }))) {
            mixin(enumMixinStr_SN_setCext_setQualf);
        }
    }




    static if(!is(typeof(NID_setCext_setQualf))) {
        private enum enumMixinStr_NID_setCext_setQualf = `enum NID_setCext_setQualf = 614;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_setCext_setQualf); }))) {
            mixin(enumMixinStr_NID_setCext_setQualf);
        }
    }




    static if(!is(typeof(OBJ_setCext_setQualf))) {
        private enum enumMixinStr_OBJ_setCext_setQualf = `enum OBJ_setCext_setQualf = 2L , 23L , 42L , 7L , 6L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_setCext_setQualf); }))) {
            mixin(enumMixinStr_OBJ_setCext_setQualf);
        }
    }




    static if(!is(typeof(SN_setCext_PGWYcapabilities))) {
        private enum enumMixinStr_SN_setCext_PGWYcapabilities = `enum SN_setCext_PGWYcapabilities = "setCext-PGWYcapabilities";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_setCext_PGWYcapabilities); }))) {
            mixin(enumMixinStr_SN_setCext_PGWYcapabilities);
        }
    }




    static if(!is(typeof(NID_setCext_PGWYcapabilities))) {
        private enum enumMixinStr_NID_setCext_PGWYcapabilities = `enum NID_setCext_PGWYcapabilities = 615;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_setCext_PGWYcapabilities); }))) {
            mixin(enumMixinStr_NID_setCext_PGWYcapabilities);
        }
    }




    static if(!is(typeof(OBJ_setCext_PGWYcapabilities))) {
        private enum enumMixinStr_OBJ_setCext_PGWYcapabilities = `enum OBJ_setCext_PGWYcapabilities = 2L , 23L , 42L , 7L , 7L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_setCext_PGWYcapabilities); }))) {
            mixin(enumMixinStr_OBJ_setCext_PGWYcapabilities);
        }
    }




    static if(!is(typeof(SN_setCext_TokenIdentifier))) {
        private enum enumMixinStr_SN_setCext_TokenIdentifier = `enum SN_setCext_TokenIdentifier = "setCext-TokenIdentifier";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_setCext_TokenIdentifier); }))) {
            mixin(enumMixinStr_SN_setCext_TokenIdentifier);
        }
    }




    static if(!is(typeof(NID_setCext_TokenIdentifier))) {
        private enum enumMixinStr_NID_setCext_TokenIdentifier = `enum NID_setCext_TokenIdentifier = 616;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_setCext_TokenIdentifier); }))) {
            mixin(enumMixinStr_NID_setCext_TokenIdentifier);
        }
    }




    static if(!is(typeof(OBJ_setCext_TokenIdentifier))) {
        private enum enumMixinStr_OBJ_setCext_TokenIdentifier = `enum OBJ_setCext_TokenIdentifier = 2L , 23L , 42L , 7L , 8L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_setCext_TokenIdentifier); }))) {
            mixin(enumMixinStr_OBJ_setCext_TokenIdentifier);
        }
    }




    static if(!is(typeof(SN_setCext_Track2Data))) {
        private enum enumMixinStr_SN_setCext_Track2Data = `enum SN_setCext_Track2Data = "setCext-Track2Data";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_setCext_Track2Data); }))) {
            mixin(enumMixinStr_SN_setCext_Track2Data);
        }
    }




    static if(!is(typeof(NID_setCext_Track2Data))) {
        private enum enumMixinStr_NID_setCext_Track2Data = `enum NID_setCext_Track2Data = 617;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_setCext_Track2Data); }))) {
            mixin(enumMixinStr_NID_setCext_Track2Data);
        }
    }




    static if(!is(typeof(OBJ_setCext_Track2Data))) {
        private enum enumMixinStr_OBJ_setCext_Track2Data = `enum OBJ_setCext_Track2Data = 2L , 23L , 42L , 7L , 9L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_setCext_Track2Data); }))) {
            mixin(enumMixinStr_OBJ_setCext_Track2Data);
        }
    }




    static if(!is(typeof(SN_setCext_TokenType))) {
        private enum enumMixinStr_SN_setCext_TokenType = `enum SN_setCext_TokenType = "setCext-TokenType";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_setCext_TokenType); }))) {
            mixin(enumMixinStr_SN_setCext_TokenType);
        }
    }




    static if(!is(typeof(NID_setCext_TokenType))) {
        private enum enumMixinStr_NID_setCext_TokenType = `enum NID_setCext_TokenType = 618;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_setCext_TokenType); }))) {
            mixin(enumMixinStr_NID_setCext_TokenType);
        }
    }




    static if(!is(typeof(OBJ_setCext_TokenType))) {
        private enum enumMixinStr_OBJ_setCext_TokenType = `enum OBJ_setCext_TokenType = 2L , 23L , 42L , 7L , 10L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_setCext_TokenType); }))) {
            mixin(enumMixinStr_OBJ_setCext_TokenType);
        }
    }




    static if(!is(typeof(SN_setCext_IssuerCapabilities))) {
        private enum enumMixinStr_SN_setCext_IssuerCapabilities = `enum SN_setCext_IssuerCapabilities = "setCext-IssuerCapabilities";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_setCext_IssuerCapabilities); }))) {
            mixin(enumMixinStr_SN_setCext_IssuerCapabilities);
        }
    }




    static if(!is(typeof(NID_setCext_IssuerCapabilities))) {
        private enum enumMixinStr_NID_setCext_IssuerCapabilities = `enum NID_setCext_IssuerCapabilities = 619;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_setCext_IssuerCapabilities); }))) {
            mixin(enumMixinStr_NID_setCext_IssuerCapabilities);
        }
    }




    static if(!is(typeof(OBJ_setCext_IssuerCapabilities))) {
        private enum enumMixinStr_OBJ_setCext_IssuerCapabilities = `enum OBJ_setCext_IssuerCapabilities = 2L , 23L , 42L , 7L , 11L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_setCext_IssuerCapabilities); }))) {
            mixin(enumMixinStr_OBJ_setCext_IssuerCapabilities);
        }
    }




    static if(!is(typeof(SN_setAttr_Cert))) {
        private enum enumMixinStr_SN_setAttr_Cert = `enum SN_setAttr_Cert = "setAttr-Cert";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_setAttr_Cert); }))) {
            mixin(enumMixinStr_SN_setAttr_Cert);
        }
    }




    static if(!is(typeof(NID_setAttr_Cert))) {
        private enum enumMixinStr_NID_setAttr_Cert = `enum NID_setAttr_Cert = 620;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_setAttr_Cert); }))) {
            mixin(enumMixinStr_NID_setAttr_Cert);
        }
    }




    static if(!is(typeof(OBJ_setAttr_Cert))) {
        private enum enumMixinStr_OBJ_setAttr_Cert = `enum OBJ_setAttr_Cert = 2L , 23L , 42L , 3L , 0L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_setAttr_Cert); }))) {
            mixin(enumMixinStr_OBJ_setAttr_Cert);
        }
    }




    static if(!is(typeof(SN_setAttr_PGWYcap))) {
        private enum enumMixinStr_SN_setAttr_PGWYcap = `enum SN_setAttr_PGWYcap = "setAttr-PGWYcap";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_setAttr_PGWYcap); }))) {
            mixin(enumMixinStr_SN_setAttr_PGWYcap);
        }
    }




    static if(!is(typeof(LN_setAttr_PGWYcap))) {
        private enum enumMixinStr_LN_setAttr_PGWYcap = `enum LN_setAttr_PGWYcap = "payment gateway capabilities";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_setAttr_PGWYcap); }))) {
            mixin(enumMixinStr_LN_setAttr_PGWYcap);
        }
    }




    static if(!is(typeof(NID_setAttr_PGWYcap))) {
        private enum enumMixinStr_NID_setAttr_PGWYcap = `enum NID_setAttr_PGWYcap = 621;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_setAttr_PGWYcap); }))) {
            mixin(enumMixinStr_NID_setAttr_PGWYcap);
        }
    }




    static if(!is(typeof(OBJ_setAttr_PGWYcap))) {
        private enum enumMixinStr_OBJ_setAttr_PGWYcap = `enum OBJ_setAttr_PGWYcap = 2L , 23L , 42L , 3L , 1L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_setAttr_PGWYcap); }))) {
            mixin(enumMixinStr_OBJ_setAttr_PGWYcap);
        }
    }




    static if(!is(typeof(SN_setAttr_TokenType))) {
        private enum enumMixinStr_SN_setAttr_TokenType = `enum SN_setAttr_TokenType = "setAttr-TokenType";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_setAttr_TokenType); }))) {
            mixin(enumMixinStr_SN_setAttr_TokenType);
        }
    }




    static if(!is(typeof(NID_setAttr_TokenType))) {
        private enum enumMixinStr_NID_setAttr_TokenType = `enum NID_setAttr_TokenType = 622;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_setAttr_TokenType); }))) {
            mixin(enumMixinStr_NID_setAttr_TokenType);
        }
    }




    static if(!is(typeof(OBJ_setAttr_TokenType))) {
        private enum enumMixinStr_OBJ_setAttr_TokenType = `enum OBJ_setAttr_TokenType = 2L , 23L , 42L , 3L , 2L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_setAttr_TokenType); }))) {
            mixin(enumMixinStr_OBJ_setAttr_TokenType);
        }
    }




    static if(!is(typeof(SN_setAttr_IssCap))) {
        private enum enumMixinStr_SN_setAttr_IssCap = `enum SN_setAttr_IssCap = "setAttr-IssCap";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_setAttr_IssCap); }))) {
            mixin(enumMixinStr_SN_setAttr_IssCap);
        }
    }




    static if(!is(typeof(LN_setAttr_IssCap))) {
        private enum enumMixinStr_LN_setAttr_IssCap = `enum LN_setAttr_IssCap = "issuer capabilities";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_setAttr_IssCap); }))) {
            mixin(enumMixinStr_LN_setAttr_IssCap);
        }
    }




    static if(!is(typeof(NID_setAttr_IssCap))) {
        private enum enumMixinStr_NID_setAttr_IssCap = `enum NID_setAttr_IssCap = 623;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_setAttr_IssCap); }))) {
            mixin(enumMixinStr_NID_setAttr_IssCap);
        }
    }




    static if(!is(typeof(OBJ_setAttr_IssCap))) {
        private enum enumMixinStr_OBJ_setAttr_IssCap = `enum OBJ_setAttr_IssCap = 2L , 23L , 42L , 3L , 3L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_setAttr_IssCap); }))) {
            mixin(enumMixinStr_OBJ_setAttr_IssCap);
        }
    }




    static if(!is(typeof(SN_set_rootKeyThumb))) {
        private enum enumMixinStr_SN_set_rootKeyThumb = `enum SN_set_rootKeyThumb = "set-rootKeyThumb";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_set_rootKeyThumb); }))) {
            mixin(enumMixinStr_SN_set_rootKeyThumb);
        }
    }




    static if(!is(typeof(NID_set_rootKeyThumb))) {
        private enum enumMixinStr_NID_set_rootKeyThumb = `enum NID_set_rootKeyThumb = 624;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_set_rootKeyThumb); }))) {
            mixin(enumMixinStr_NID_set_rootKeyThumb);
        }
    }




    static if(!is(typeof(OBJ_set_rootKeyThumb))) {
        private enum enumMixinStr_OBJ_set_rootKeyThumb = `enum OBJ_set_rootKeyThumb = 2L , 23L , 42L , 3L , 0L , 0L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_set_rootKeyThumb); }))) {
            mixin(enumMixinStr_OBJ_set_rootKeyThumb);
        }
    }




    static if(!is(typeof(SN_set_addPolicy))) {
        private enum enumMixinStr_SN_set_addPolicy = `enum SN_set_addPolicy = "set-addPolicy";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_set_addPolicy); }))) {
            mixin(enumMixinStr_SN_set_addPolicy);
        }
    }




    static if(!is(typeof(NID_set_addPolicy))) {
        private enum enumMixinStr_NID_set_addPolicy = `enum NID_set_addPolicy = 625;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_set_addPolicy); }))) {
            mixin(enumMixinStr_NID_set_addPolicy);
        }
    }




    static if(!is(typeof(OBJ_set_addPolicy))) {
        private enum enumMixinStr_OBJ_set_addPolicy = `enum OBJ_set_addPolicy = 2L , 23L , 42L , 3L , 0L , 1L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_set_addPolicy); }))) {
            mixin(enumMixinStr_OBJ_set_addPolicy);
        }
    }




    static if(!is(typeof(SN_setAttr_Token_EMV))) {
        private enum enumMixinStr_SN_setAttr_Token_EMV = `enum SN_setAttr_Token_EMV = "setAttr-Token-EMV";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_setAttr_Token_EMV); }))) {
            mixin(enumMixinStr_SN_setAttr_Token_EMV);
        }
    }




    static if(!is(typeof(NID_setAttr_Token_EMV))) {
        private enum enumMixinStr_NID_setAttr_Token_EMV = `enum NID_setAttr_Token_EMV = 626;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_setAttr_Token_EMV); }))) {
            mixin(enumMixinStr_NID_setAttr_Token_EMV);
        }
    }




    static if(!is(typeof(OBJ_setAttr_Token_EMV))) {
        private enum enumMixinStr_OBJ_setAttr_Token_EMV = `enum OBJ_setAttr_Token_EMV = 2L , 23L , 42L , 3L , 2L , 1L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_setAttr_Token_EMV); }))) {
            mixin(enumMixinStr_OBJ_setAttr_Token_EMV);
        }
    }




    static if(!is(typeof(SN_setAttr_Token_B0Prime))) {
        private enum enumMixinStr_SN_setAttr_Token_B0Prime = `enum SN_setAttr_Token_B0Prime = "setAttr-Token-B0Prime";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_setAttr_Token_B0Prime); }))) {
            mixin(enumMixinStr_SN_setAttr_Token_B0Prime);
        }
    }




    static if(!is(typeof(NID_setAttr_Token_B0Prime))) {
        private enum enumMixinStr_NID_setAttr_Token_B0Prime = `enum NID_setAttr_Token_B0Prime = 627;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_setAttr_Token_B0Prime); }))) {
            mixin(enumMixinStr_NID_setAttr_Token_B0Prime);
        }
    }




    static if(!is(typeof(OBJ_setAttr_Token_B0Prime))) {
        private enum enumMixinStr_OBJ_setAttr_Token_B0Prime = `enum OBJ_setAttr_Token_B0Prime = 2L , 23L , 42L , 3L , 2L , 2L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_setAttr_Token_B0Prime); }))) {
            mixin(enumMixinStr_OBJ_setAttr_Token_B0Prime);
        }
    }




    static if(!is(typeof(SN_setAttr_IssCap_CVM))) {
        private enum enumMixinStr_SN_setAttr_IssCap_CVM = `enum SN_setAttr_IssCap_CVM = "setAttr-IssCap-CVM";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_setAttr_IssCap_CVM); }))) {
            mixin(enumMixinStr_SN_setAttr_IssCap_CVM);
        }
    }




    static if(!is(typeof(NID_setAttr_IssCap_CVM))) {
        private enum enumMixinStr_NID_setAttr_IssCap_CVM = `enum NID_setAttr_IssCap_CVM = 628;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_setAttr_IssCap_CVM); }))) {
            mixin(enumMixinStr_NID_setAttr_IssCap_CVM);
        }
    }




    static if(!is(typeof(OBJ_setAttr_IssCap_CVM))) {
        private enum enumMixinStr_OBJ_setAttr_IssCap_CVM = `enum OBJ_setAttr_IssCap_CVM = 2L , 23L , 42L , 3L , 3L , 3L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_setAttr_IssCap_CVM); }))) {
            mixin(enumMixinStr_OBJ_setAttr_IssCap_CVM);
        }
    }




    static if(!is(typeof(SN_setAttr_IssCap_T2))) {
        private enum enumMixinStr_SN_setAttr_IssCap_T2 = `enum SN_setAttr_IssCap_T2 = "setAttr-IssCap-T2";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_setAttr_IssCap_T2); }))) {
            mixin(enumMixinStr_SN_setAttr_IssCap_T2);
        }
    }




    static if(!is(typeof(NID_setAttr_IssCap_T2))) {
        private enum enumMixinStr_NID_setAttr_IssCap_T2 = `enum NID_setAttr_IssCap_T2 = 629;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_setAttr_IssCap_T2); }))) {
            mixin(enumMixinStr_NID_setAttr_IssCap_T2);
        }
    }




    static if(!is(typeof(OBJ_setAttr_IssCap_T2))) {
        private enum enumMixinStr_OBJ_setAttr_IssCap_T2 = `enum OBJ_setAttr_IssCap_T2 = 2L , 23L , 42L , 3L , 3L , 4L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_setAttr_IssCap_T2); }))) {
            mixin(enumMixinStr_OBJ_setAttr_IssCap_T2);
        }
    }




    static if(!is(typeof(SN_setAttr_IssCap_Sig))) {
        private enum enumMixinStr_SN_setAttr_IssCap_Sig = `enum SN_setAttr_IssCap_Sig = "setAttr-IssCap-Sig";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_setAttr_IssCap_Sig); }))) {
            mixin(enumMixinStr_SN_setAttr_IssCap_Sig);
        }
    }




    static if(!is(typeof(NID_setAttr_IssCap_Sig))) {
        private enum enumMixinStr_NID_setAttr_IssCap_Sig = `enum NID_setAttr_IssCap_Sig = 630;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_setAttr_IssCap_Sig); }))) {
            mixin(enumMixinStr_NID_setAttr_IssCap_Sig);
        }
    }




    static if(!is(typeof(OBJ_setAttr_IssCap_Sig))) {
        private enum enumMixinStr_OBJ_setAttr_IssCap_Sig = `enum OBJ_setAttr_IssCap_Sig = 2L , 23L , 42L , 3L , 3L , 5L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_setAttr_IssCap_Sig); }))) {
            mixin(enumMixinStr_OBJ_setAttr_IssCap_Sig);
        }
    }




    static if(!is(typeof(SN_setAttr_GenCryptgrm))) {
        private enum enumMixinStr_SN_setAttr_GenCryptgrm = `enum SN_setAttr_GenCryptgrm = "setAttr-GenCryptgrm";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_setAttr_GenCryptgrm); }))) {
            mixin(enumMixinStr_SN_setAttr_GenCryptgrm);
        }
    }




    static if(!is(typeof(LN_setAttr_GenCryptgrm))) {
        private enum enumMixinStr_LN_setAttr_GenCryptgrm = `enum LN_setAttr_GenCryptgrm = "generate cryptogram";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_setAttr_GenCryptgrm); }))) {
            mixin(enumMixinStr_LN_setAttr_GenCryptgrm);
        }
    }




    static if(!is(typeof(NID_setAttr_GenCryptgrm))) {
        private enum enumMixinStr_NID_setAttr_GenCryptgrm = `enum NID_setAttr_GenCryptgrm = 631;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_setAttr_GenCryptgrm); }))) {
            mixin(enumMixinStr_NID_setAttr_GenCryptgrm);
        }
    }




    static if(!is(typeof(OBJ_setAttr_GenCryptgrm))) {
        private enum enumMixinStr_OBJ_setAttr_GenCryptgrm = `enum OBJ_setAttr_GenCryptgrm = 2L , 23L , 42L , 3L , 3L , 3L , 1L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_setAttr_GenCryptgrm); }))) {
            mixin(enumMixinStr_OBJ_setAttr_GenCryptgrm);
        }
    }




    static if(!is(typeof(SN_setAttr_T2Enc))) {
        private enum enumMixinStr_SN_setAttr_T2Enc = `enum SN_setAttr_T2Enc = "setAttr-T2Enc";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_setAttr_T2Enc); }))) {
            mixin(enumMixinStr_SN_setAttr_T2Enc);
        }
    }




    static if(!is(typeof(LN_setAttr_T2Enc))) {
        private enum enumMixinStr_LN_setAttr_T2Enc = `enum LN_setAttr_T2Enc = "encrypted track 2";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_setAttr_T2Enc); }))) {
            mixin(enumMixinStr_LN_setAttr_T2Enc);
        }
    }




    static if(!is(typeof(NID_setAttr_T2Enc))) {
        private enum enumMixinStr_NID_setAttr_T2Enc = `enum NID_setAttr_T2Enc = 632;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_setAttr_T2Enc); }))) {
            mixin(enumMixinStr_NID_setAttr_T2Enc);
        }
    }




    static if(!is(typeof(OBJ_setAttr_T2Enc))) {
        private enum enumMixinStr_OBJ_setAttr_T2Enc = `enum OBJ_setAttr_T2Enc = 2L , 23L , 42L , 3L , 3L , 4L , 1L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_setAttr_T2Enc); }))) {
            mixin(enumMixinStr_OBJ_setAttr_T2Enc);
        }
    }




    static if(!is(typeof(SN_setAttr_T2cleartxt))) {
        private enum enumMixinStr_SN_setAttr_T2cleartxt = `enum SN_setAttr_T2cleartxt = "setAttr-T2cleartxt";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_setAttr_T2cleartxt); }))) {
            mixin(enumMixinStr_SN_setAttr_T2cleartxt);
        }
    }




    static if(!is(typeof(LN_setAttr_T2cleartxt))) {
        private enum enumMixinStr_LN_setAttr_T2cleartxt = `enum LN_setAttr_T2cleartxt = "cleartext track 2";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_setAttr_T2cleartxt); }))) {
            mixin(enumMixinStr_LN_setAttr_T2cleartxt);
        }
    }




    static if(!is(typeof(NID_setAttr_T2cleartxt))) {
        private enum enumMixinStr_NID_setAttr_T2cleartxt = `enum NID_setAttr_T2cleartxt = 633;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_setAttr_T2cleartxt); }))) {
            mixin(enumMixinStr_NID_setAttr_T2cleartxt);
        }
    }




    static if(!is(typeof(OBJ_setAttr_T2cleartxt))) {
        private enum enumMixinStr_OBJ_setAttr_T2cleartxt = `enum OBJ_setAttr_T2cleartxt = 2L , 23L , 42L , 3L , 3L , 4L , 2L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_setAttr_T2cleartxt); }))) {
            mixin(enumMixinStr_OBJ_setAttr_T2cleartxt);
        }
    }




    static if(!is(typeof(SN_setAttr_TokICCsig))) {
        private enum enumMixinStr_SN_setAttr_TokICCsig = `enum SN_setAttr_TokICCsig = "setAttr-TokICCsig";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_setAttr_TokICCsig); }))) {
            mixin(enumMixinStr_SN_setAttr_TokICCsig);
        }
    }




    static if(!is(typeof(LN_setAttr_TokICCsig))) {
        private enum enumMixinStr_LN_setAttr_TokICCsig = `enum LN_setAttr_TokICCsig = "ICC or token signature";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_setAttr_TokICCsig); }))) {
            mixin(enumMixinStr_LN_setAttr_TokICCsig);
        }
    }




    static if(!is(typeof(NID_setAttr_TokICCsig))) {
        private enum enumMixinStr_NID_setAttr_TokICCsig = `enum NID_setAttr_TokICCsig = 634;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_setAttr_TokICCsig); }))) {
            mixin(enumMixinStr_NID_setAttr_TokICCsig);
        }
    }




    static if(!is(typeof(OBJ_setAttr_TokICCsig))) {
        private enum enumMixinStr_OBJ_setAttr_TokICCsig = `enum OBJ_setAttr_TokICCsig = 2L , 23L , 42L , 3L , 3L , 5L , 1L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_setAttr_TokICCsig); }))) {
            mixin(enumMixinStr_OBJ_setAttr_TokICCsig);
        }
    }




    static if(!is(typeof(SN_setAttr_SecDevSig))) {
        private enum enumMixinStr_SN_setAttr_SecDevSig = `enum SN_setAttr_SecDevSig = "setAttr-SecDevSig";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_setAttr_SecDevSig); }))) {
            mixin(enumMixinStr_SN_setAttr_SecDevSig);
        }
    }




    static if(!is(typeof(LN_setAttr_SecDevSig))) {
        private enum enumMixinStr_LN_setAttr_SecDevSig = `enum LN_setAttr_SecDevSig = "secure device signature";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_setAttr_SecDevSig); }))) {
            mixin(enumMixinStr_LN_setAttr_SecDevSig);
        }
    }




    static if(!is(typeof(NID_setAttr_SecDevSig))) {
        private enum enumMixinStr_NID_setAttr_SecDevSig = `enum NID_setAttr_SecDevSig = 635;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_setAttr_SecDevSig); }))) {
            mixin(enumMixinStr_NID_setAttr_SecDevSig);
        }
    }




    static if(!is(typeof(OBJ_setAttr_SecDevSig))) {
        private enum enumMixinStr_OBJ_setAttr_SecDevSig = `enum OBJ_setAttr_SecDevSig = 2L , 23L , 42L , 3L , 3L , 5L , 2L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_setAttr_SecDevSig); }))) {
            mixin(enumMixinStr_OBJ_setAttr_SecDevSig);
        }
    }




    static if(!is(typeof(SN_set_brand_IATA_ATA))) {
        private enum enumMixinStr_SN_set_brand_IATA_ATA = `enum SN_set_brand_IATA_ATA = "set-brand-IATA-ATA";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_set_brand_IATA_ATA); }))) {
            mixin(enumMixinStr_SN_set_brand_IATA_ATA);
        }
    }




    static if(!is(typeof(NID_set_brand_IATA_ATA))) {
        private enum enumMixinStr_NID_set_brand_IATA_ATA = `enum NID_set_brand_IATA_ATA = 636;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_set_brand_IATA_ATA); }))) {
            mixin(enumMixinStr_NID_set_brand_IATA_ATA);
        }
    }




    static if(!is(typeof(OBJ_set_brand_IATA_ATA))) {
        private enum enumMixinStr_OBJ_set_brand_IATA_ATA = `enum OBJ_set_brand_IATA_ATA = 2L , 23L , 42L , 8L , 1L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_set_brand_IATA_ATA); }))) {
            mixin(enumMixinStr_OBJ_set_brand_IATA_ATA);
        }
    }




    static if(!is(typeof(SN_set_brand_Diners))) {
        private enum enumMixinStr_SN_set_brand_Diners = `enum SN_set_brand_Diners = "set-brand-Diners";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_set_brand_Diners); }))) {
            mixin(enumMixinStr_SN_set_brand_Diners);
        }
    }




    static if(!is(typeof(NID_set_brand_Diners))) {
        private enum enumMixinStr_NID_set_brand_Diners = `enum NID_set_brand_Diners = 637;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_set_brand_Diners); }))) {
            mixin(enumMixinStr_NID_set_brand_Diners);
        }
    }




    static if(!is(typeof(OBJ_set_brand_Diners))) {
        private enum enumMixinStr_OBJ_set_brand_Diners = `enum OBJ_set_brand_Diners = 2L , 23L , 42L , 8L , 30L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_set_brand_Diners); }))) {
            mixin(enumMixinStr_OBJ_set_brand_Diners);
        }
    }




    static if(!is(typeof(SN_set_brand_AmericanExpress))) {
        private enum enumMixinStr_SN_set_brand_AmericanExpress = `enum SN_set_brand_AmericanExpress = "set-brand-AmericanExpress";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_set_brand_AmericanExpress); }))) {
            mixin(enumMixinStr_SN_set_brand_AmericanExpress);
        }
    }




    static if(!is(typeof(NID_set_brand_AmericanExpress))) {
        private enum enumMixinStr_NID_set_brand_AmericanExpress = `enum NID_set_brand_AmericanExpress = 638;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_set_brand_AmericanExpress); }))) {
            mixin(enumMixinStr_NID_set_brand_AmericanExpress);
        }
    }




    static if(!is(typeof(OBJ_set_brand_AmericanExpress))) {
        private enum enumMixinStr_OBJ_set_brand_AmericanExpress = `enum OBJ_set_brand_AmericanExpress = 2L , 23L , 42L , 8L , 34L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_set_brand_AmericanExpress); }))) {
            mixin(enumMixinStr_OBJ_set_brand_AmericanExpress);
        }
    }




    static if(!is(typeof(SN_set_brand_JCB))) {
        private enum enumMixinStr_SN_set_brand_JCB = `enum SN_set_brand_JCB = "set-brand-JCB";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_set_brand_JCB); }))) {
            mixin(enumMixinStr_SN_set_brand_JCB);
        }
    }




    static if(!is(typeof(NID_set_brand_JCB))) {
        private enum enumMixinStr_NID_set_brand_JCB = `enum NID_set_brand_JCB = 639;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_set_brand_JCB); }))) {
            mixin(enumMixinStr_NID_set_brand_JCB);
        }
    }




    static if(!is(typeof(OBJ_set_brand_JCB))) {
        private enum enumMixinStr_OBJ_set_brand_JCB = `enum OBJ_set_brand_JCB = 2L , 23L , 42L , 8L , 35L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_set_brand_JCB); }))) {
            mixin(enumMixinStr_OBJ_set_brand_JCB);
        }
    }




    static if(!is(typeof(SN_set_brand_Visa))) {
        private enum enumMixinStr_SN_set_brand_Visa = `enum SN_set_brand_Visa = "set-brand-Visa";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_set_brand_Visa); }))) {
            mixin(enumMixinStr_SN_set_brand_Visa);
        }
    }




    static if(!is(typeof(NID_set_brand_Visa))) {
        private enum enumMixinStr_NID_set_brand_Visa = `enum NID_set_brand_Visa = 640;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_set_brand_Visa); }))) {
            mixin(enumMixinStr_NID_set_brand_Visa);
        }
    }




    static if(!is(typeof(OBJ_set_brand_Visa))) {
        private enum enumMixinStr_OBJ_set_brand_Visa = `enum OBJ_set_brand_Visa = 2L , 23L , 42L , 8L , 4L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_set_brand_Visa); }))) {
            mixin(enumMixinStr_OBJ_set_brand_Visa);
        }
    }




    static if(!is(typeof(SN_set_brand_MasterCard))) {
        private enum enumMixinStr_SN_set_brand_MasterCard = `enum SN_set_brand_MasterCard = "set-brand-MasterCard";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_set_brand_MasterCard); }))) {
            mixin(enumMixinStr_SN_set_brand_MasterCard);
        }
    }




    static if(!is(typeof(NID_set_brand_MasterCard))) {
        private enum enumMixinStr_NID_set_brand_MasterCard = `enum NID_set_brand_MasterCard = 641;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_set_brand_MasterCard); }))) {
            mixin(enumMixinStr_NID_set_brand_MasterCard);
        }
    }




    static if(!is(typeof(OBJ_set_brand_MasterCard))) {
        private enum enumMixinStr_OBJ_set_brand_MasterCard = `enum OBJ_set_brand_MasterCard = 2L , 23L , 42L , 8L , 5L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_set_brand_MasterCard); }))) {
            mixin(enumMixinStr_OBJ_set_brand_MasterCard);
        }
    }




    static if(!is(typeof(SN_set_brand_Novus))) {
        private enum enumMixinStr_SN_set_brand_Novus = `enum SN_set_brand_Novus = "set-brand-Novus";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_set_brand_Novus); }))) {
            mixin(enumMixinStr_SN_set_brand_Novus);
        }
    }




    static if(!is(typeof(NID_set_brand_Novus))) {
        private enum enumMixinStr_NID_set_brand_Novus = `enum NID_set_brand_Novus = 642;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_set_brand_Novus); }))) {
            mixin(enumMixinStr_NID_set_brand_Novus);
        }
    }




    static if(!is(typeof(OBJ_set_brand_Novus))) {
        private enum enumMixinStr_OBJ_set_brand_Novus = `enum OBJ_set_brand_Novus = 2L , 23L , 42L , 8L , 6011L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_set_brand_Novus); }))) {
            mixin(enumMixinStr_OBJ_set_brand_Novus);
        }
    }




    static if(!is(typeof(SN_des_cdmf))) {
        private enum enumMixinStr_SN_des_cdmf = `enum SN_des_cdmf = "DES-CDMF";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_des_cdmf); }))) {
            mixin(enumMixinStr_SN_des_cdmf);
        }
    }




    static if(!is(typeof(LN_des_cdmf))) {
        private enum enumMixinStr_LN_des_cdmf = `enum LN_des_cdmf = "des-cdmf";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_des_cdmf); }))) {
            mixin(enumMixinStr_LN_des_cdmf);
        }
    }




    static if(!is(typeof(NID_des_cdmf))) {
        private enum enumMixinStr_NID_des_cdmf = `enum NID_des_cdmf = 643;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_des_cdmf); }))) {
            mixin(enumMixinStr_NID_des_cdmf);
        }
    }




    static if(!is(typeof(OBJ_des_cdmf))) {
        private enum enumMixinStr_OBJ_des_cdmf = `enum OBJ_des_cdmf = 1L , 2L , 840L , 113549L , 3L , 10L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_des_cdmf); }))) {
            mixin(enumMixinStr_OBJ_des_cdmf);
        }
    }




    static if(!is(typeof(SN_rsaOAEPEncryptionSET))) {
        private enum enumMixinStr_SN_rsaOAEPEncryptionSET = `enum SN_rsaOAEPEncryptionSET = "rsaOAEPEncryptionSET";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_rsaOAEPEncryptionSET); }))) {
            mixin(enumMixinStr_SN_rsaOAEPEncryptionSET);
        }
    }




    static if(!is(typeof(NID_rsaOAEPEncryptionSET))) {
        private enum enumMixinStr_NID_rsaOAEPEncryptionSET = `enum NID_rsaOAEPEncryptionSET = 644;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_rsaOAEPEncryptionSET); }))) {
            mixin(enumMixinStr_NID_rsaOAEPEncryptionSET);
        }
    }




    static if(!is(typeof(OBJ_rsaOAEPEncryptionSET))) {
        private enum enumMixinStr_OBJ_rsaOAEPEncryptionSET = `enum OBJ_rsaOAEPEncryptionSET = 1L , 2L , 840L , 113549L , 1L , 1L , 6L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_rsaOAEPEncryptionSET); }))) {
            mixin(enumMixinStr_OBJ_rsaOAEPEncryptionSET);
        }
    }




    static if(!is(typeof(SN_ipsec3))) {
        private enum enumMixinStr_SN_ipsec3 = `enum SN_ipsec3 = "Oakley-EC2N-3";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_ipsec3); }))) {
            mixin(enumMixinStr_SN_ipsec3);
        }
    }




    static if(!is(typeof(LN_ipsec3))) {
        private enum enumMixinStr_LN_ipsec3 = `enum LN_ipsec3 = "ipsec3";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_ipsec3); }))) {
            mixin(enumMixinStr_LN_ipsec3);
        }
    }




    static if(!is(typeof(NID_ipsec3))) {
        private enum enumMixinStr_NID_ipsec3 = `enum NID_ipsec3 = 749;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_ipsec3); }))) {
            mixin(enumMixinStr_NID_ipsec3);
        }
    }




    static if(!is(typeof(SN_ipsec4))) {
        private enum enumMixinStr_SN_ipsec4 = `enum SN_ipsec4 = "Oakley-EC2N-4";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_ipsec4); }))) {
            mixin(enumMixinStr_SN_ipsec4);
        }
    }




    static if(!is(typeof(LN_ipsec4))) {
        private enum enumMixinStr_LN_ipsec4 = `enum LN_ipsec4 = "ipsec4";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_ipsec4); }))) {
            mixin(enumMixinStr_LN_ipsec4);
        }
    }




    static if(!is(typeof(NID_ipsec4))) {
        private enum enumMixinStr_NID_ipsec4 = `enum NID_ipsec4 = 750;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_ipsec4); }))) {
            mixin(enumMixinStr_NID_ipsec4);
        }
    }




    static if(!is(typeof(SN_whirlpool))) {
        private enum enumMixinStr_SN_whirlpool = `enum SN_whirlpool = "whirlpool";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_whirlpool); }))) {
            mixin(enumMixinStr_SN_whirlpool);
        }
    }




    static if(!is(typeof(NID_whirlpool))) {
        private enum enumMixinStr_NID_whirlpool = `enum NID_whirlpool = 804;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_whirlpool); }))) {
            mixin(enumMixinStr_NID_whirlpool);
        }
    }




    static if(!is(typeof(OBJ_whirlpool))) {
        private enum enumMixinStr_OBJ_whirlpool = `enum OBJ_whirlpool = 1L , 0L , 10118L , 3L , 0L , 55L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_whirlpool); }))) {
            mixin(enumMixinStr_OBJ_whirlpool);
        }
    }




    static if(!is(typeof(SN_cryptopro))) {
        private enum enumMixinStr_SN_cryptopro = `enum SN_cryptopro = "cryptopro";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_cryptopro); }))) {
            mixin(enumMixinStr_SN_cryptopro);
        }
    }




    static if(!is(typeof(NID_cryptopro))) {
        private enum enumMixinStr_NID_cryptopro = `enum NID_cryptopro = 805;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_cryptopro); }))) {
            mixin(enumMixinStr_NID_cryptopro);
        }
    }




    static if(!is(typeof(OBJ_cryptopro))) {
        private enum enumMixinStr_OBJ_cryptopro = `enum OBJ_cryptopro = 1L , 2L , 643L , 2L , 2L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_cryptopro); }))) {
            mixin(enumMixinStr_OBJ_cryptopro);
        }
    }




    static if(!is(typeof(SN_cryptocom))) {
        private enum enumMixinStr_SN_cryptocom = `enum SN_cryptocom = "cryptocom";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_cryptocom); }))) {
            mixin(enumMixinStr_SN_cryptocom);
        }
    }




    static if(!is(typeof(NID_cryptocom))) {
        private enum enumMixinStr_NID_cryptocom = `enum NID_cryptocom = 806;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_cryptocom); }))) {
            mixin(enumMixinStr_NID_cryptocom);
        }
    }




    static if(!is(typeof(OBJ_cryptocom))) {
        private enum enumMixinStr_OBJ_cryptocom = `enum OBJ_cryptocom = 1L , 2L , 643L , 2L , 9L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_cryptocom); }))) {
            mixin(enumMixinStr_OBJ_cryptocom);
        }
    }




    static if(!is(typeof(SN_id_tc26))) {
        private enum enumMixinStr_SN_id_tc26 = `enum SN_id_tc26 = "id-tc26";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_tc26); }))) {
            mixin(enumMixinStr_SN_id_tc26);
        }
    }




    static if(!is(typeof(NID_id_tc26))) {
        private enum enumMixinStr_NID_id_tc26 = `enum NID_id_tc26 = 974;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_tc26); }))) {
            mixin(enumMixinStr_NID_id_tc26);
        }
    }




    static if(!is(typeof(OBJ_id_tc26))) {
        private enum enumMixinStr_OBJ_id_tc26 = `enum OBJ_id_tc26 = 1L , 2L , 643L , 7L , 1L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_tc26); }))) {
            mixin(enumMixinStr_OBJ_id_tc26);
        }
    }




    static if(!is(typeof(SN_id_GostR3411_94_with_GostR3410_2001))) {
        private enum enumMixinStr_SN_id_GostR3411_94_with_GostR3410_2001 = `enum SN_id_GostR3411_94_with_GostR3410_2001 = "id-GostR3411-94-with-GostR3410-2001";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_GostR3411_94_with_GostR3410_2001); }))) {
            mixin(enumMixinStr_SN_id_GostR3411_94_with_GostR3410_2001);
        }
    }




    static if(!is(typeof(LN_id_GostR3411_94_with_GostR3410_2001))) {
        private enum enumMixinStr_LN_id_GostR3411_94_with_GostR3410_2001 = `enum LN_id_GostR3411_94_with_GostR3410_2001 = "GOST R 34.11-94 with GOST R 34.10-2001";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_id_GostR3411_94_with_GostR3410_2001); }))) {
            mixin(enumMixinStr_LN_id_GostR3411_94_with_GostR3410_2001);
        }
    }




    static if(!is(typeof(NID_id_GostR3411_94_with_GostR3410_2001))) {
        private enum enumMixinStr_NID_id_GostR3411_94_with_GostR3410_2001 = `enum NID_id_GostR3411_94_with_GostR3410_2001 = 807;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_GostR3411_94_with_GostR3410_2001); }))) {
            mixin(enumMixinStr_NID_id_GostR3411_94_with_GostR3410_2001);
        }
    }




    static if(!is(typeof(OBJ_id_GostR3411_94_with_GostR3410_2001))) {
        private enum enumMixinStr_OBJ_id_GostR3411_94_with_GostR3410_2001 = `enum OBJ_id_GostR3411_94_with_GostR3410_2001 = 1L , 2L , 643L , 2L , 2L , 3L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_GostR3411_94_with_GostR3410_2001); }))) {
            mixin(enumMixinStr_OBJ_id_GostR3411_94_with_GostR3410_2001);
        }
    }




    static if(!is(typeof(SN_id_GostR3411_94_with_GostR3410_94))) {
        private enum enumMixinStr_SN_id_GostR3411_94_with_GostR3410_94 = `enum SN_id_GostR3411_94_with_GostR3410_94 = "id-GostR3411-94-with-GostR3410-94";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_GostR3411_94_with_GostR3410_94); }))) {
            mixin(enumMixinStr_SN_id_GostR3411_94_with_GostR3410_94);
        }
    }




    static if(!is(typeof(LN_id_GostR3411_94_with_GostR3410_94))) {
        private enum enumMixinStr_LN_id_GostR3411_94_with_GostR3410_94 = `enum LN_id_GostR3411_94_with_GostR3410_94 = "GOST R 34.11-94 with GOST R 34.10-94";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_id_GostR3411_94_with_GostR3410_94); }))) {
            mixin(enumMixinStr_LN_id_GostR3411_94_with_GostR3410_94);
        }
    }




    static if(!is(typeof(NID_id_GostR3411_94_with_GostR3410_94))) {
        private enum enumMixinStr_NID_id_GostR3411_94_with_GostR3410_94 = `enum NID_id_GostR3411_94_with_GostR3410_94 = 808;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_GostR3411_94_with_GostR3410_94); }))) {
            mixin(enumMixinStr_NID_id_GostR3411_94_with_GostR3410_94);
        }
    }




    static if(!is(typeof(OBJ_id_GostR3411_94_with_GostR3410_94))) {
        private enum enumMixinStr_OBJ_id_GostR3411_94_with_GostR3410_94 = `enum OBJ_id_GostR3411_94_with_GostR3410_94 = 1L , 2L , 643L , 2L , 2L , 4L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_GostR3411_94_with_GostR3410_94); }))) {
            mixin(enumMixinStr_OBJ_id_GostR3411_94_with_GostR3410_94);
        }
    }




    static if(!is(typeof(SN_id_GostR3411_94))) {
        private enum enumMixinStr_SN_id_GostR3411_94 = `enum SN_id_GostR3411_94 = "md_gost94";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_GostR3411_94); }))) {
            mixin(enumMixinStr_SN_id_GostR3411_94);
        }
    }




    static if(!is(typeof(LN_id_GostR3411_94))) {
        private enum enumMixinStr_LN_id_GostR3411_94 = `enum LN_id_GostR3411_94 = "GOST R 34.11-94";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_id_GostR3411_94); }))) {
            mixin(enumMixinStr_LN_id_GostR3411_94);
        }
    }




    static if(!is(typeof(NID_id_GostR3411_94))) {
        private enum enumMixinStr_NID_id_GostR3411_94 = `enum NID_id_GostR3411_94 = 809;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_GostR3411_94); }))) {
            mixin(enumMixinStr_NID_id_GostR3411_94);
        }
    }




    static if(!is(typeof(OBJ_id_GostR3411_94))) {
        private enum enumMixinStr_OBJ_id_GostR3411_94 = `enum OBJ_id_GostR3411_94 = 1L , 2L , 643L , 2L , 2L , 9L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_GostR3411_94); }))) {
            mixin(enumMixinStr_OBJ_id_GostR3411_94);
        }
    }




    static if(!is(typeof(SN_id_HMACGostR3411_94))) {
        private enum enumMixinStr_SN_id_HMACGostR3411_94 = `enum SN_id_HMACGostR3411_94 = "id-HMACGostR3411-94";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_HMACGostR3411_94); }))) {
            mixin(enumMixinStr_SN_id_HMACGostR3411_94);
        }
    }




    static if(!is(typeof(LN_id_HMACGostR3411_94))) {
        private enum enumMixinStr_LN_id_HMACGostR3411_94 = `enum LN_id_HMACGostR3411_94 = "HMAC GOST 34.11-94";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_id_HMACGostR3411_94); }))) {
            mixin(enumMixinStr_LN_id_HMACGostR3411_94);
        }
    }




    static if(!is(typeof(NID_id_HMACGostR3411_94))) {
        private enum enumMixinStr_NID_id_HMACGostR3411_94 = `enum NID_id_HMACGostR3411_94 = 810;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_HMACGostR3411_94); }))) {
            mixin(enumMixinStr_NID_id_HMACGostR3411_94);
        }
    }




    static if(!is(typeof(OBJ_id_HMACGostR3411_94))) {
        private enum enumMixinStr_OBJ_id_HMACGostR3411_94 = `enum OBJ_id_HMACGostR3411_94 = 1L , 2L , 643L , 2L , 2L , 10L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_HMACGostR3411_94); }))) {
            mixin(enumMixinStr_OBJ_id_HMACGostR3411_94);
        }
    }




    static if(!is(typeof(SN_id_GostR3410_2001))) {
        private enum enumMixinStr_SN_id_GostR3410_2001 = `enum SN_id_GostR3410_2001 = "gost2001";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_GostR3410_2001); }))) {
            mixin(enumMixinStr_SN_id_GostR3410_2001);
        }
    }




    static if(!is(typeof(LN_id_GostR3410_2001))) {
        private enum enumMixinStr_LN_id_GostR3410_2001 = `enum LN_id_GostR3410_2001 = "GOST R 34.10-2001";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_id_GostR3410_2001); }))) {
            mixin(enumMixinStr_LN_id_GostR3410_2001);
        }
    }




    static if(!is(typeof(NID_id_GostR3410_2001))) {
        private enum enumMixinStr_NID_id_GostR3410_2001 = `enum NID_id_GostR3410_2001 = 811;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_GostR3410_2001); }))) {
            mixin(enumMixinStr_NID_id_GostR3410_2001);
        }
    }




    static if(!is(typeof(OBJ_id_GostR3410_2001))) {
        private enum enumMixinStr_OBJ_id_GostR3410_2001 = `enum OBJ_id_GostR3410_2001 = 1L , 2L , 643L , 2L , 2L , 19L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_GostR3410_2001); }))) {
            mixin(enumMixinStr_OBJ_id_GostR3410_2001);
        }
    }




    static if(!is(typeof(SN_id_GostR3410_94))) {
        private enum enumMixinStr_SN_id_GostR3410_94 = `enum SN_id_GostR3410_94 = "gost94";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_GostR3410_94); }))) {
            mixin(enumMixinStr_SN_id_GostR3410_94);
        }
    }




    static if(!is(typeof(LN_id_GostR3410_94))) {
        private enum enumMixinStr_LN_id_GostR3410_94 = `enum LN_id_GostR3410_94 = "GOST R 34.10-94";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_id_GostR3410_94); }))) {
            mixin(enumMixinStr_LN_id_GostR3410_94);
        }
    }




    static if(!is(typeof(NID_id_GostR3410_94))) {
        private enum enumMixinStr_NID_id_GostR3410_94 = `enum NID_id_GostR3410_94 = 812;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_GostR3410_94); }))) {
            mixin(enumMixinStr_NID_id_GostR3410_94);
        }
    }




    static if(!is(typeof(OBJ_id_GostR3410_94))) {
        private enum enumMixinStr_OBJ_id_GostR3410_94 = `enum OBJ_id_GostR3410_94 = 1L , 2L , 643L , 2L , 2L , 20L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_GostR3410_94); }))) {
            mixin(enumMixinStr_OBJ_id_GostR3410_94);
        }
    }




    static if(!is(typeof(SN_id_Gost28147_89))) {
        private enum enumMixinStr_SN_id_Gost28147_89 = `enum SN_id_Gost28147_89 = "gost89";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_Gost28147_89); }))) {
            mixin(enumMixinStr_SN_id_Gost28147_89);
        }
    }




    static if(!is(typeof(LN_id_Gost28147_89))) {
        private enum enumMixinStr_LN_id_Gost28147_89 = `enum LN_id_Gost28147_89 = "GOST 28147-89";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_id_Gost28147_89); }))) {
            mixin(enumMixinStr_LN_id_Gost28147_89);
        }
    }




    static if(!is(typeof(NID_id_Gost28147_89))) {
        private enum enumMixinStr_NID_id_Gost28147_89 = `enum NID_id_Gost28147_89 = 813;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_Gost28147_89); }))) {
            mixin(enumMixinStr_NID_id_Gost28147_89);
        }
    }




    static if(!is(typeof(OBJ_id_Gost28147_89))) {
        private enum enumMixinStr_OBJ_id_Gost28147_89 = `enum OBJ_id_Gost28147_89 = 1L , 2L , 643L , 2L , 2L , 21L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_Gost28147_89); }))) {
            mixin(enumMixinStr_OBJ_id_Gost28147_89);
        }
    }




    static if(!is(typeof(SN_gost89_cnt))) {
        private enum enumMixinStr_SN_gost89_cnt = `enum SN_gost89_cnt = "gost89-cnt";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_gost89_cnt); }))) {
            mixin(enumMixinStr_SN_gost89_cnt);
        }
    }




    static if(!is(typeof(NID_gost89_cnt))) {
        private enum enumMixinStr_NID_gost89_cnt = `enum NID_gost89_cnt = 814;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_gost89_cnt); }))) {
            mixin(enumMixinStr_NID_gost89_cnt);
        }
    }




    static if(!is(typeof(SN_gost89_cnt_12))) {
        private enum enumMixinStr_SN_gost89_cnt_12 = `enum SN_gost89_cnt_12 = "gost89-cnt-12";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_gost89_cnt_12); }))) {
            mixin(enumMixinStr_SN_gost89_cnt_12);
        }
    }




    static if(!is(typeof(NID_gost89_cnt_12))) {
        private enum enumMixinStr_NID_gost89_cnt_12 = `enum NID_gost89_cnt_12 = 975;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_gost89_cnt_12); }))) {
            mixin(enumMixinStr_NID_gost89_cnt_12);
        }
    }




    static if(!is(typeof(SN_gost89_cbc))) {
        private enum enumMixinStr_SN_gost89_cbc = `enum SN_gost89_cbc = "gost89-cbc";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_gost89_cbc); }))) {
            mixin(enumMixinStr_SN_gost89_cbc);
        }
    }




    static if(!is(typeof(NID_gost89_cbc))) {
        private enum enumMixinStr_NID_gost89_cbc = `enum NID_gost89_cbc = 1009;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_gost89_cbc); }))) {
            mixin(enumMixinStr_NID_gost89_cbc);
        }
    }




    static if(!is(typeof(SN_gost89_ecb))) {
        private enum enumMixinStr_SN_gost89_ecb = `enum SN_gost89_ecb = "gost89-ecb";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_gost89_ecb); }))) {
            mixin(enumMixinStr_SN_gost89_ecb);
        }
    }




    static if(!is(typeof(NID_gost89_ecb))) {
        private enum enumMixinStr_NID_gost89_ecb = `enum NID_gost89_ecb = 1010;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_gost89_ecb); }))) {
            mixin(enumMixinStr_NID_gost89_ecb);
        }
    }




    static if(!is(typeof(SN_gost89_ctr))) {
        private enum enumMixinStr_SN_gost89_ctr = `enum SN_gost89_ctr = "gost89-ctr";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_gost89_ctr); }))) {
            mixin(enumMixinStr_SN_gost89_ctr);
        }
    }




    static if(!is(typeof(NID_gost89_ctr))) {
        private enum enumMixinStr_NID_gost89_ctr = `enum NID_gost89_ctr = 1011;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_gost89_ctr); }))) {
            mixin(enumMixinStr_NID_gost89_ctr);
        }
    }




    static if(!is(typeof(SN_id_Gost28147_89_MAC))) {
        private enum enumMixinStr_SN_id_Gost28147_89_MAC = `enum SN_id_Gost28147_89_MAC = "gost-mac";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_Gost28147_89_MAC); }))) {
            mixin(enumMixinStr_SN_id_Gost28147_89_MAC);
        }
    }




    static if(!is(typeof(LN_id_Gost28147_89_MAC))) {
        private enum enumMixinStr_LN_id_Gost28147_89_MAC = `enum LN_id_Gost28147_89_MAC = "GOST 28147-89 MAC";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_id_Gost28147_89_MAC); }))) {
            mixin(enumMixinStr_LN_id_Gost28147_89_MAC);
        }
    }




    static if(!is(typeof(NID_id_Gost28147_89_MAC))) {
        private enum enumMixinStr_NID_id_Gost28147_89_MAC = `enum NID_id_Gost28147_89_MAC = 815;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_Gost28147_89_MAC); }))) {
            mixin(enumMixinStr_NID_id_Gost28147_89_MAC);
        }
    }




    static if(!is(typeof(OBJ_id_Gost28147_89_MAC))) {
        private enum enumMixinStr_OBJ_id_Gost28147_89_MAC = `enum OBJ_id_Gost28147_89_MAC = 1L , 2L , 643L , 2L , 2L , 22L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_Gost28147_89_MAC); }))) {
            mixin(enumMixinStr_OBJ_id_Gost28147_89_MAC);
        }
    }




    static if(!is(typeof(SN_gost_mac_12))) {
        private enum enumMixinStr_SN_gost_mac_12 = `enum SN_gost_mac_12 = "gost-mac-12";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_gost_mac_12); }))) {
            mixin(enumMixinStr_SN_gost_mac_12);
        }
    }




    static if(!is(typeof(NID_gost_mac_12))) {
        private enum enumMixinStr_NID_gost_mac_12 = `enum NID_gost_mac_12 = 976;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_gost_mac_12); }))) {
            mixin(enumMixinStr_NID_gost_mac_12);
        }
    }




    static if(!is(typeof(SN_id_GostR3411_94_prf))) {
        private enum enumMixinStr_SN_id_GostR3411_94_prf = `enum SN_id_GostR3411_94_prf = "prf-gostr3411-94";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_GostR3411_94_prf); }))) {
            mixin(enumMixinStr_SN_id_GostR3411_94_prf);
        }
    }




    static if(!is(typeof(LN_id_GostR3411_94_prf))) {
        private enum enumMixinStr_LN_id_GostR3411_94_prf = `enum LN_id_GostR3411_94_prf = "GOST R 34.11-94 PRF";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_id_GostR3411_94_prf); }))) {
            mixin(enumMixinStr_LN_id_GostR3411_94_prf);
        }
    }




    static if(!is(typeof(NID_id_GostR3411_94_prf))) {
        private enum enumMixinStr_NID_id_GostR3411_94_prf = `enum NID_id_GostR3411_94_prf = 816;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_GostR3411_94_prf); }))) {
            mixin(enumMixinStr_NID_id_GostR3411_94_prf);
        }
    }




    static if(!is(typeof(OBJ_id_GostR3411_94_prf))) {
        private enum enumMixinStr_OBJ_id_GostR3411_94_prf = `enum OBJ_id_GostR3411_94_prf = 1L , 2L , 643L , 2L , 2L , 23L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_GostR3411_94_prf); }))) {
            mixin(enumMixinStr_OBJ_id_GostR3411_94_prf);
        }
    }




    static if(!is(typeof(SN_id_GostR3410_2001DH))) {
        private enum enumMixinStr_SN_id_GostR3410_2001DH = `enum SN_id_GostR3410_2001DH = "id-GostR3410-2001DH";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_GostR3410_2001DH); }))) {
            mixin(enumMixinStr_SN_id_GostR3410_2001DH);
        }
    }




    static if(!is(typeof(LN_id_GostR3410_2001DH))) {
        private enum enumMixinStr_LN_id_GostR3410_2001DH = `enum LN_id_GostR3410_2001DH = "GOST R 34.10-2001 DH";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_id_GostR3410_2001DH); }))) {
            mixin(enumMixinStr_LN_id_GostR3410_2001DH);
        }
    }




    static if(!is(typeof(NID_id_GostR3410_2001DH))) {
        private enum enumMixinStr_NID_id_GostR3410_2001DH = `enum NID_id_GostR3410_2001DH = 817;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_GostR3410_2001DH); }))) {
            mixin(enumMixinStr_NID_id_GostR3410_2001DH);
        }
    }




    static if(!is(typeof(OBJ_id_GostR3410_2001DH))) {
        private enum enumMixinStr_OBJ_id_GostR3410_2001DH = `enum OBJ_id_GostR3410_2001DH = 1L , 2L , 643L , 2L , 2L , 98L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_GostR3410_2001DH); }))) {
            mixin(enumMixinStr_OBJ_id_GostR3410_2001DH);
        }
    }




    static if(!is(typeof(SN_id_GostR3410_94DH))) {
        private enum enumMixinStr_SN_id_GostR3410_94DH = `enum SN_id_GostR3410_94DH = "id-GostR3410-94DH";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_GostR3410_94DH); }))) {
            mixin(enumMixinStr_SN_id_GostR3410_94DH);
        }
    }




    static if(!is(typeof(LN_id_GostR3410_94DH))) {
        private enum enumMixinStr_LN_id_GostR3410_94DH = `enum LN_id_GostR3410_94DH = "GOST R 34.10-94 DH";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_id_GostR3410_94DH); }))) {
            mixin(enumMixinStr_LN_id_GostR3410_94DH);
        }
    }




    static if(!is(typeof(NID_id_GostR3410_94DH))) {
        private enum enumMixinStr_NID_id_GostR3410_94DH = `enum NID_id_GostR3410_94DH = 818;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_GostR3410_94DH); }))) {
            mixin(enumMixinStr_NID_id_GostR3410_94DH);
        }
    }




    static if(!is(typeof(OBJ_id_GostR3410_94DH))) {
        private enum enumMixinStr_OBJ_id_GostR3410_94DH = `enum OBJ_id_GostR3410_94DH = 1L , 2L , 643L , 2L , 2L , 99L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_GostR3410_94DH); }))) {
            mixin(enumMixinStr_OBJ_id_GostR3410_94DH);
        }
    }




    static if(!is(typeof(SN_id_Gost28147_89_CryptoPro_KeyMeshing))) {
        private enum enumMixinStr_SN_id_Gost28147_89_CryptoPro_KeyMeshing = `enum SN_id_Gost28147_89_CryptoPro_KeyMeshing = "id-Gost28147-89-CryptoPro-KeyMeshing";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_Gost28147_89_CryptoPro_KeyMeshing); }))) {
            mixin(enumMixinStr_SN_id_Gost28147_89_CryptoPro_KeyMeshing);
        }
    }




    static if(!is(typeof(NID_id_Gost28147_89_CryptoPro_KeyMeshing))) {
        private enum enumMixinStr_NID_id_Gost28147_89_CryptoPro_KeyMeshing = `enum NID_id_Gost28147_89_CryptoPro_KeyMeshing = 819;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_Gost28147_89_CryptoPro_KeyMeshing); }))) {
            mixin(enumMixinStr_NID_id_Gost28147_89_CryptoPro_KeyMeshing);
        }
    }




    static if(!is(typeof(OBJ_id_Gost28147_89_CryptoPro_KeyMeshing))) {
        private enum enumMixinStr_OBJ_id_Gost28147_89_CryptoPro_KeyMeshing = `enum OBJ_id_Gost28147_89_CryptoPro_KeyMeshing = 1L , 2L , 643L , 2L , 2L , 14L , 1L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_Gost28147_89_CryptoPro_KeyMeshing); }))) {
            mixin(enumMixinStr_OBJ_id_Gost28147_89_CryptoPro_KeyMeshing);
        }
    }




    static if(!is(typeof(SN_id_Gost28147_89_None_KeyMeshing))) {
        private enum enumMixinStr_SN_id_Gost28147_89_None_KeyMeshing = `enum SN_id_Gost28147_89_None_KeyMeshing = "id-Gost28147-89-None-KeyMeshing";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_Gost28147_89_None_KeyMeshing); }))) {
            mixin(enumMixinStr_SN_id_Gost28147_89_None_KeyMeshing);
        }
    }




    static if(!is(typeof(NID_id_Gost28147_89_None_KeyMeshing))) {
        private enum enumMixinStr_NID_id_Gost28147_89_None_KeyMeshing = `enum NID_id_Gost28147_89_None_KeyMeshing = 820;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_Gost28147_89_None_KeyMeshing); }))) {
            mixin(enumMixinStr_NID_id_Gost28147_89_None_KeyMeshing);
        }
    }




    static if(!is(typeof(OBJ_id_Gost28147_89_None_KeyMeshing))) {
        private enum enumMixinStr_OBJ_id_Gost28147_89_None_KeyMeshing = `enum OBJ_id_Gost28147_89_None_KeyMeshing = 1L , 2L , 643L , 2L , 2L , 14L , 0L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_Gost28147_89_None_KeyMeshing); }))) {
            mixin(enumMixinStr_OBJ_id_Gost28147_89_None_KeyMeshing);
        }
    }




    static if(!is(typeof(SN_id_GostR3411_94_TestParamSet))) {
        private enum enumMixinStr_SN_id_GostR3411_94_TestParamSet = `enum SN_id_GostR3411_94_TestParamSet = "id-GostR3411-94-TestParamSet";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_GostR3411_94_TestParamSet); }))) {
            mixin(enumMixinStr_SN_id_GostR3411_94_TestParamSet);
        }
    }




    static if(!is(typeof(NID_id_GostR3411_94_TestParamSet))) {
        private enum enumMixinStr_NID_id_GostR3411_94_TestParamSet = `enum NID_id_GostR3411_94_TestParamSet = 821;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_GostR3411_94_TestParamSet); }))) {
            mixin(enumMixinStr_NID_id_GostR3411_94_TestParamSet);
        }
    }




    static if(!is(typeof(OBJ_id_GostR3411_94_TestParamSet))) {
        private enum enumMixinStr_OBJ_id_GostR3411_94_TestParamSet = `enum OBJ_id_GostR3411_94_TestParamSet = 1L , 2L , 643L , 2L , 2L , 30L , 0L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_GostR3411_94_TestParamSet); }))) {
            mixin(enumMixinStr_OBJ_id_GostR3411_94_TestParamSet);
        }
    }




    static if(!is(typeof(SN_id_GostR3411_94_CryptoProParamSet))) {
        private enum enumMixinStr_SN_id_GostR3411_94_CryptoProParamSet = `enum SN_id_GostR3411_94_CryptoProParamSet = "id-GostR3411-94-CryptoProParamSet";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_GostR3411_94_CryptoProParamSet); }))) {
            mixin(enumMixinStr_SN_id_GostR3411_94_CryptoProParamSet);
        }
    }




    static if(!is(typeof(NID_id_GostR3411_94_CryptoProParamSet))) {
        private enum enumMixinStr_NID_id_GostR3411_94_CryptoProParamSet = `enum NID_id_GostR3411_94_CryptoProParamSet = 822;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_GostR3411_94_CryptoProParamSet); }))) {
            mixin(enumMixinStr_NID_id_GostR3411_94_CryptoProParamSet);
        }
    }




    static if(!is(typeof(OBJ_id_GostR3411_94_CryptoProParamSet))) {
        private enum enumMixinStr_OBJ_id_GostR3411_94_CryptoProParamSet = `enum OBJ_id_GostR3411_94_CryptoProParamSet = 1L , 2L , 643L , 2L , 2L , 30L , 1L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_GostR3411_94_CryptoProParamSet); }))) {
            mixin(enumMixinStr_OBJ_id_GostR3411_94_CryptoProParamSet);
        }
    }




    static if(!is(typeof(SN_id_Gost28147_89_TestParamSet))) {
        private enum enumMixinStr_SN_id_Gost28147_89_TestParamSet = `enum SN_id_Gost28147_89_TestParamSet = "id-Gost28147-89-TestParamSet";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_Gost28147_89_TestParamSet); }))) {
            mixin(enumMixinStr_SN_id_Gost28147_89_TestParamSet);
        }
    }




    static if(!is(typeof(NID_id_Gost28147_89_TestParamSet))) {
        private enum enumMixinStr_NID_id_Gost28147_89_TestParamSet = `enum NID_id_Gost28147_89_TestParamSet = 823;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_Gost28147_89_TestParamSet); }))) {
            mixin(enumMixinStr_NID_id_Gost28147_89_TestParamSet);
        }
    }




    static if(!is(typeof(OBJ_id_Gost28147_89_TestParamSet))) {
        private enum enumMixinStr_OBJ_id_Gost28147_89_TestParamSet = `enum OBJ_id_Gost28147_89_TestParamSet = 1L , 2L , 643L , 2L , 2L , 31L , 0L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_Gost28147_89_TestParamSet); }))) {
            mixin(enumMixinStr_OBJ_id_Gost28147_89_TestParamSet);
        }
    }




    static if(!is(typeof(SN_id_Gost28147_89_CryptoPro_A_ParamSet))) {
        private enum enumMixinStr_SN_id_Gost28147_89_CryptoPro_A_ParamSet = `enum SN_id_Gost28147_89_CryptoPro_A_ParamSet = "id-Gost28147-89-CryptoPro-A-ParamSet";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_Gost28147_89_CryptoPro_A_ParamSet); }))) {
            mixin(enumMixinStr_SN_id_Gost28147_89_CryptoPro_A_ParamSet);
        }
    }




    static if(!is(typeof(NID_id_Gost28147_89_CryptoPro_A_ParamSet))) {
        private enum enumMixinStr_NID_id_Gost28147_89_CryptoPro_A_ParamSet = `enum NID_id_Gost28147_89_CryptoPro_A_ParamSet = 824;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_Gost28147_89_CryptoPro_A_ParamSet); }))) {
            mixin(enumMixinStr_NID_id_Gost28147_89_CryptoPro_A_ParamSet);
        }
    }




    static if(!is(typeof(OBJ_id_Gost28147_89_CryptoPro_A_ParamSet))) {
        private enum enumMixinStr_OBJ_id_Gost28147_89_CryptoPro_A_ParamSet = `enum OBJ_id_Gost28147_89_CryptoPro_A_ParamSet = 1L , 2L , 643L , 2L , 2L , 31L , 1L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_Gost28147_89_CryptoPro_A_ParamSet); }))) {
            mixin(enumMixinStr_OBJ_id_Gost28147_89_CryptoPro_A_ParamSet);
        }
    }




    static if(!is(typeof(SN_id_Gost28147_89_CryptoPro_B_ParamSet))) {
        private enum enumMixinStr_SN_id_Gost28147_89_CryptoPro_B_ParamSet = `enum SN_id_Gost28147_89_CryptoPro_B_ParamSet = "id-Gost28147-89-CryptoPro-B-ParamSet";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_Gost28147_89_CryptoPro_B_ParamSet); }))) {
            mixin(enumMixinStr_SN_id_Gost28147_89_CryptoPro_B_ParamSet);
        }
    }




    static if(!is(typeof(NID_id_Gost28147_89_CryptoPro_B_ParamSet))) {
        private enum enumMixinStr_NID_id_Gost28147_89_CryptoPro_B_ParamSet = `enum NID_id_Gost28147_89_CryptoPro_B_ParamSet = 825;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_Gost28147_89_CryptoPro_B_ParamSet); }))) {
            mixin(enumMixinStr_NID_id_Gost28147_89_CryptoPro_B_ParamSet);
        }
    }




    static if(!is(typeof(OBJ_id_Gost28147_89_CryptoPro_B_ParamSet))) {
        private enum enumMixinStr_OBJ_id_Gost28147_89_CryptoPro_B_ParamSet = `enum OBJ_id_Gost28147_89_CryptoPro_B_ParamSet = 1L , 2L , 643L , 2L , 2L , 31L , 2L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_Gost28147_89_CryptoPro_B_ParamSet); }))) {
            mixin(enumMixinStr_OBJ_id_Gost28147_89_CryptoPro_B_ParamSet);
        }
    }




    static if(!is(typeof(SN_id_Gost28147_89_CryptoPro_C_ParamSet))) {
        private enum enumMixinStr_SN_id_Gost28147_89_CryptoPro_C_ParamSet = `enum SN_id_Gost28147_89_CryptoPro_C_ParamSet = "id-Gost28147-89-CryptoPro-C-ParamSet";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_Gost28147_89_CryptoPro_C_ParamSet); }))) {
            mixin(enumMixinStr_SN_id_Gost28147_89_CryptoPro_C_ParamSet);
        }
    }




    static if(!is(typeof(NID_id_Gost28147_89_CryptoPro_C_ParamSet))) {
        private enum enumMixinStr_NID_id_Gost28147_89_CryptoPro_C_ParamSet = `enum NID_id_Gost28147_89_CryptoPro_C_ParamSet = 826;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_Gost28147_89_CryptoPro_C_ParamSet); }))) {
            mixin(enumMixinStr_NID_id_Gost28147_89_CryptoPro_C_ParamSet);
        }
    }




    static if(!is(typeof(OBJ_id_Gost28147_89_CryptoPro_C_ParamSet))) {
        private enum enumMixinStr_OBJ_id_Gost28147_89_CryptoPro_C_ParamSet = `enum OBJ_id_Gost28147_89_CryptoPro_C_ParamSet = 1L , 2L , 643L , 2L , 2L , 31L , 3L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_Gost28147_89_CryptoPro_C_ParamSet); }))) {
            mixin(enumMixinStr_OBJ_id_Gost28147_89_CryptoPro_C_ParamSet);
        }
    }




    static if(!is(typeof(SN_id_Gost28147_89_CryptoPro_D_ParamSet))) {
        private enum enumMixinStr_SN_id_Gost28147_89_CryptoPro_D_ParamSet = `enum SN_id_Gost28147_89_CryptoPro_D_ParamSet = "id-Gost28147-89-CryptoPro-D-ParamSet";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_Gost28147_89_CryptoPro_D_ParamSet); }))) {
            mixin(enumMixinStr_SN_id_Gost28147_89_CryptoPro_D_ParamSet);
        }
    }




    static if(!is(typeof(NID_id_Gost28147_89_CryptoPro_D_ParamSet))) {
        private enum enumMixinStr_NID_id_Gost28147_89_CryptoPro_D_ParamSet = `enum NID_id_Gost28147_89_CryptoPro_D_ParamSet = 827;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_Gost28147_89_CryptoPro_D_ParamSet); }))) {
            mixin(enumMixinStr_NID_id_Gost28147_89_CryptoPro_D_ParamSet);
        }
    }




    static if(!is(typeof(OBJ_id_Gost28147_89_CryptoPro_D_ParamSet))) {
        private enum enumMixinStr_OBJ_id_Gost28147_89_CryptoPro_D_ParamSet = `enum OBJ_id_Gost28147_89_CryptoPro_D_ParamSet = 1L , 2L , 643L , 2L , 2L , 31L , 4L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_Gost28147_89_CryptoPro_D_ParamSet); }))) {
            mixin(enumMixinStr_OBJ_id_Gost28147_89_CryptoPro_D_ParamSet);
        }
    }




    static if(!is(typeof(SN_id_Gost28147_89_CryptoPro_Oscar_1_1_ParamSet))) {
        private enum enumMixinStr_SN_id_Gost28147_89_CryptoPro_Oscar_1_1_ParamSet = `enum SN_id_Gost28147_89_CryptoPro_Oscar_1_1_ParamSet = "id-Gost28147-89-CryptoPro-Oscar-1-1-ParamSet";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_Gost28147_89_CryptoPro_Oscar_1_1_ParamSet); }))) {
            mixin(enumMixinStr_SN_id_Gost28147_89_CryptoPro_Oscar_1_1_ParamSet);
        }
    }




    static if(!is(typeof(NID_id_Gost28147_89_CryptoPro_Oscar_1_1_ParamSet))) {
        private enum enumMixinStr_NID_id_Gost28147_89_CryptoPro_Oscar_1_1_ParamSet = `enum NID_id_Gost28147_89_CryptoPro_Oscar_1_1_ParamSet = 828;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_Gost28147_89_CryptoPro_Oscar_1_1_ParamSet); }))) {
            mixin(enumMixinStr_NID_id_Gost28147_89_CryptoPro_Oscar_1_1_ParamSet);
        }
    }




    static if(!is(typeof(OBJ_id_Gost28147_89_CryptoPro_Oscar_1_1_ParamSet))) {
        private enum enumMixinStr_OBJ_id_Gost28147_89_CryptoPro_Oscar_1_1_ParamSet = `enum OBJ_id_Gost28147_89_CryptoPro_Oscar_1_1_ParamSet = 1L , 2L , 643L , 2L , 2L , 31L , 5L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_Gost28147_89_CryptoPro_Oscar_1_1_ParamSet); }))) {
            mixin(enumMixinStr_OBJ_id_Gost28147_89_CryptoPro_Oscar_1_1_ParamSet);
        }
    }




    static if(!is(typeof(SN_id_Gost28147_89_CryptoPro_Oscar_1_0_ParamSet))) {
        private enum enumMixinStr_SN_id_Gost28147_89_CryptoPro_Oscar_1_0_ParamSet = `enum SN_id_Gost28147_89_CryptoPro_Oscar_1_0_ParamSet = "id-Gost28147-89-CryptoPro-Oscar-1-0-ParamSet";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_Gost28147_89_CryptoPro_Oscar_1_0_ParamSet); }))) {
            mixin(enumMixinStr_SN_id_Gost28147_89_CryptoPro_Oscar_1_0_ParamSet);
        }
    }




    static if(!is(typeof(NID_id_Gost28147_89_CryptoPro_Oscar_1_0_ParamSet))) {
        private enum enumMixinStr_NID_id_Gost28147_89_CryptoPro_Oscar_1_0_ParamSet = `enum NID_id_Gost28147_89_CryptoPro_Oscar_1_0_ParamSet = 829;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_Gost28147_89_CryptoPro_Oscar_1_0_ParamSet); }))) {
            mixin(enumMixinStr_NID_id_Gost28147_89_CryptoPro_Oscar_1_0_ParamSet);
        }
    }




    static if(!is(typeof(OBJ_id_Gost28147_89_CryptoPro_Oscar_1_0_ParamSet))) {
        private enum enumMixinStr_OBJ_id_Gost28147_89_CryptoPro_Oscar_1_0_ParamSet = `enum OBJ_id_Gost28147_89_CryptoPro_Oscar_1_0_ParamSet = 1L , 2L , 643L , 2L , 2L , 31L , 6L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_Gost28147_89_CryptoPro_Oscar_1_0_ParamSet); }))) {
            mixin(enumMixinStr_OBJ_id_Gost28147_89_CryptoPro_Oscar_1_0_ParamSet);
        }
    }




    static if(!is(typeof(SN_id_Gost28147_89_CryptoPro_RIC_1_ParamSet))) {
        private enum enumMixinStr_SN_id_Gost28147_89_CryptoPro_RIC_1_ParamSet = `enum SN_id_Gost28147_89_CryptoPro_RIC_1_ParamSet = "id-Gost28147-89-CryptoPro-RIC-1-ParamSet";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_Gost28147_89_CryptoPro_RIC_1_ParamSet); }))) {
            mixin(enumMixinStr_SN_id_Gost28147_89_CryptoPro_RIC_1_ParamSet);
        }
    }




    static if(!is(typeof(NID_id_Gost28147_89_CryptoPro_RIC_1_ParamSet))) {
        private enum enumMixinStr_NID_id_Gost28147_89_CryptoPro_RIC_1_ParamSet = `enum NID_id_Gost28147_89_CryptoPro_RIC_1_ParamSet = 830;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_Gost28147_89_CryptoPro_RIC_1_ParamSet); }))) {
            mixin(enumMixinStr_NID_id_Gost28147_89_CryptoPro_RIC_1_ParamSet);
        }
    }




    static if(!is(typeof(OBJ_id_Gost28147_89_CryptoPro_RIC_1_ParamSet))) {
        private enum enumMixinStr_OBJ_id_Gost28147_89_CryptoPro_RIC_1_ParamSet = `enum OBJ_id_Gost28147_89_CryptoPro_RIC_1_ParamSet = 1L , 2L , 643L , 2L , 2L , 31L , 7L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_Gost28147_89_CryptoPro_RIC_1_ParamSet); }))) {
            mixin(enumMixinStr_OBJ_id_Gost28147_89_CryptoPro_RIC_1_ParamSet);
        }
    }




    static if(!is(typeof(SN_id_GostR3410_94_TestParamSet))) {
        private enum enumMixinStr_SN_id_GostR3410_94_TestParamSet = `enum SN_id_GostR3410_94_TestParamSet = "id-GostR3410-94-TestParamSet";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_GostR3410_94_TestParamSet); }))) {
            mixin(enumMixinStr_SN_id_GostR3410_94_TestParamSet);
        }
    }




    static if(!is(typeof(NID_id_GostR3410_94_TestParamSet))) {
        private enum enumMixinStr_NID_id_GostR3410_94_TestParamSet = `enum NID_id_GostR3410_94_TestParamSet = 831;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_GostR3410_94_TestParamSet); }))) {
            mixin(enumMixinStr_NID_id_GostR3410_94_TestParamSet);
        }
    }




    static if(!is(typeof(OBJ_id_GostR3410_94_TestParamSet))) {
        private enum enumMixinStr_OBJ_id_GostR3410_94_TestParamSet = `enum OBJ_id_GostR3410_94_TestParamSet = 1L , 2L , 643L , 2L , 2L , 32L , 0L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_GostR3410_94_TestParamSet); }))) {
            mixin(enumMixinStr_OBJ_id_GostR3410_94_TestParamSet);
        }
    }




    static if(!is(typeof(SN_id_GostR3410_94_CryptoPro_A_ParamSet))) {
        private enum enumMixinStr_SN_id_GostR3410_94_CryptoPro_A_ParamSet = `enum SN_id_GostR3410_94_CryptoPro_A_ParamSet = "id-GostR3410-94-CryptoPro-A-ParamSet";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_GostR3410_94_CryptoPro_A_ParamSet); }))) {
            mixin(enumMixinStr_SN_id_GostR3410_94_CryptoPro_A_ParamSet);
        }
    }




    static if(!is(typeof(NID_id_GostR3410_94_CryptoPro_A_ParamSet))) {
        private enum enumMixinStr_NID_id_GostR3410_94_CryptoPro_A_ParamSet = `enum NID_id_GostR3410_94_CryptoPro_A_ParamSet = 832;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_GostR3410_94_CryptoPro_A_ParamSet); }))) {
            mixin(enumMixinStr_NID_id_GostR3410_94_CryptoPro_A_ParamSet);
        }
    }




    static if(!is(typeof(OBJ_id_GostR3410_94_CryptoPro_A_ParamSet))) {
        private enum enumMixinStr_OBJ_id_GostR3410_94_CryptoPro_A_ParamSet = `enum OBJ_id_GostR3410_94_CryptoPro_A_ParamSet = 1L , 2L , 643L , 2L , 2L , 32L , 2L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_GostR3410_94_CryptoPro_A_ParamSet); }))) {
            mixin(enumMixinStr_OBJ_id_GostR3410_94_CryptoPro_A_ParamSet);
        }
    }




    static if(!is(typeof(SN_id_GostR3410_94_CryptoPro_B_ParamSet))) {
        private enum enumMixinStr_SN_id_GostR3410_94_CryptoPro_B_ParamSet = `enum SN_id_GostR3410_94_CryptoPro_B_ParamSet = "id-GostR3410-94-CryptoPro-B-ParamSet";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_GostR3410_94_CryptoPro_B_ParamSet); }))) {
            mixin(enumMixinStr_SN_id_GostR3410_94_CryptoPro_B_ParamSet);
        }
    }




    static if(!is(typeof(NID_id_GostR3410_94_CryptoPro_B_ParamSet))) {
        private enum enumMixinStr_NID_id_GostR3410_94_CryptoPro_B_ParamSet = `enum NID_id_GostR3410_94_CryptoPro_B_ParamSet = 833;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_GostR3410_94_CryptoPro_B_ParamSet); }))) {
            mixin(enumMixinStr_NID_id_GostR3410_94_CryptoPro_B_ParamSet);
        }
    }




    static if(!is(typeof(OBJ_id_GostR3410_94_CryptoPro_B_ParamSet))) {
        private enum enumMixinStr_OBJ_id_GostR3410_94_CryptoPro_B_ParamSet = `enum OBJ_id_GostR3410_94_CryptoPro_B_ParamSet = 1L , 2L , 643L , 2L , 2L , 32L , 3L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_GostR3410_94_CryptoPro_B_ParamSet); }))) {
            mixin(enumMixinStr_OBJ_id_GostR3410_94_CryptoPro_B_ParamSet);
        }
    }




    static if(!is(typeof(SN_id_GostR3410_94_CryptoPro_C_ParamSet))) {
        private enum enumMixinStr_SN_id_GostR3410_94_CryptoPro_C_ParamSet = `enum SN_id_GostR3410_94_CryptoPro_C_ParamSet = "id-GostR3410-94-CryptoPro-C-ParamSet";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_GostR3410_94_CryptoPro_C_ParamSet); }))) {
            mixin(enumMixinStr_SN_id_GostR3410_94_CryptoPro_C_ParamSet);
        }
    }




    static if(!is(typeof(NID_id_GostR3410_94_CryptoPro_C_ParamSet))) {
        private enum enumMixinStr_NID_id_GostR3410_94_CryptoPro_C_ParamSet = `enum NID_id_GostR3410_94_CryptoPro_C_ParamSet = 834;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_GostR3410_94_CryptoPro_C_ParamSet); }))) {
            mixin(enumMixinStr_NID_id_GostR3410_94_CryptoPro_C_ParamSet);
        }
    }




    static if(!is(typeof(OBJ_id_GostR3410_94_CryptoPro_C_ParamSet))) {
        private enum enumMixinStr_OBJ_id_GostR3410_94_CryptoPro_C_ParamSet = `enum OBJ_id_GostR3410_94_CryptoPro_C_ParamSet = 1L , 2L , 643L , 2L , 2L , 32L , 4L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_GostR3410_94_CryptoPro_C_ParamSet); }))) {
            mixin(enumMixinStr_OBJ_id_GostR3410_94_CryptoPro_C_ParamSet);
        }
    }




    static if(!is(typeof(SN_id_GostR3410_94_CryptoPro_D_ParamSet))) {
        private enum enumMixinStr_SN_id_GostR3410_94_CryptoPro_D_ParamSet = `enum SN_id_GostR3410_94_CryptoPro_D_ParamSet = "id-GostR3410-94-CryptoPro-D-ParamSet";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_GostR3410_94_CryptoPro_D_ParamSet); }))) {
            mixin(enumMixinStr_SN_id_GostR3410_94_CryptoPro_D_ParamSet);
        }
    }




    static if(!is(typeof(NID_id_GostR3410_94_CryptoPro_D_ParamSet))) {
        private enum enumMixinStr_NID_id_GostR3410_94_CryptoPro_D_ParamSet = `enum NID_id_GostR3410_94_CryptoPro_D_ParamSet = 835;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_GostR3410_94_CryptoPro_D_ParamSet); }))) {
            mixin(enumMixinStr_NID_id_GostR3410_94_CryptoPro_D_ParamSet);
        }
    }




    static if(!is(typeof(OBJ_id_GostR3410_94_CryptoPro_D_ParamSet))) {
        private enum enumMixinStr_OBJ_id_GostR3410_94_CryptoPro_D_ParamSet = `enum OBJ_id_GostR3410_94_CryptoPro_D_ParamSet = 1L , 2L , 643L , 2L , 2L , 32L , 5L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_GostR3410_94_CryptoPro_D_ParamSet); }))) {
            mixin(enumMixinStr_OBJ_id_GostR3410_94_CryptoPro_D_ParamSet);
        }
    }




    static if(!is(typeof(SN_id_GostR3410_94_CryptoPro_XchA_ParamSet))) {
        private enum enumMixinStr_SN_id_GostR3410_94_CryptoPro_XchA_ParamSet = `enum SN_id_GostR3410_94_CryptoPro_XchA_ParamSet = "id-GostR3410-94-CryptoPro-XchA-ParamSet";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_GostR3410_94_CryptoPro_XchA_ParamSet); }))) {
            mixin(enumMixinStr_SN_id_GostR3410_94_CryptoPro_XchA_ParamSet);
        }
    }




    static if(!is(typeof(NID_id_GostR3410_94_CryptoPro_XchA_ParamSet))) {
        private enum enumMixinStr_NID_id_GostR3410_94_CryptoPro_XchA_ParamSet = `enum NID_id_GostR3410_94_CryptoPro_XchA_ParamSet = 836;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_GostR3410_94_CryptoPro_XchA_ParamSet); }))) {
            mixin(enumMixinStr_NID_id_GostR3410_94_CryptoPro_XchA_ParamSet);
        }
    }




    static if(!is(typeof(OBJ_id_GostR3410_94_CryptoPro_XchA_ParamSet))) {
        private enum enumMixinStr_OBJ_id_GostR3410_94_CryptoPro_XchA_ParamSet = `enum OBJ_id_GostR3410_94_CryptoPro_XchA_ParamSet = 1L , 2L , 643L , 2L , 2L , 33L , 1L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_GostR3410_94_CryptoPro_XchA_ParamSet); }))) {
            mixin(enumMixinStr_OBJ_id_GostR3410_94_CryptoPro_XchA_ParamSet);
        }
    }




    static if(!is(typeof(SN_id_GostR3410_94_CryptoPro_XchB_ParamSet))) {
        private enum enumMixinStr_SN_id_GostR3410_94_CryptoPro_XchB_ParamSet = `enum SN_id_GostR3410_94_CryptoPro_XchB_ParamSet = "id-GostR3410-94-CryptoPro-XchB-ParamSet";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_GostR3410_94_CryptoPro_XchB_ParamSet); }))) {
            mixin(enumMixinStr_SN_id_GostR3410_94_CryptoPro_XchB_ParamSet);
        }
    }




    static if(!is(typeof(NID_id_GostR3410_94_CryptoPro_XchB_ParamSet))) {
        private enum enumMixinStr_NID_id_GostR3410_94_CryptoPro_XchB_ParamSet = `enum NID_id_GostR3410_94_CryptoPro_XchB_ParamSet = 837;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_GostR3410_94_CryptoPro_XchB_ParamSet); }))) {
            mixin(enumMixinStr_NID_id_GostR3410_94_CryptoPro_XchB_ParamSet);
        }
    }




    static if(!is(typeof(OBJ_id_GostR3410_94_CryptoPro_XchB_ParamSet))) {
        private enum enumMixinStr_OBJ_id_GostR3410_94_CryptoPro_XchB_ParamSet = `enum OBJ_id_GostR3410_94_CryptoPro_XchB_ParamSet = 1L , 2L , 643L , 2L , 2L , 33L , 2L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_GostR3410_94_CryptoPro_XchB_ParamSet); }))) {
            mixin(enumMixinStr_OBJ_id_GostR3410_94_CryptoPro_XchB_ParamSet);
        }
    }




    static if(!is(typeof(SN_id_GostR3410_94_CryptoPro_XchC_ParamSet))) {
        private enum enumMixinStr_SN_id_GostR3410_94_CryptoPro_XchC_ParamSet = `enum SN_id_GostR3410_94_CryptoPro_XchC_ParamSet = "id-GostR3410-94-CryptoPro-XchC-ParamSet";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_GostR3410_94_CryptoPro_XchC_ParamSet); }))) {
            mixin(enumMixinStr_SN_id_GostR3410_94_CryptoPro_XchC_ParamSet);
        }
    }




    static if(!is(typeof(NID_id_GostR3410_94_CryptoPro_XchC_ParamSet))) {
        private enum enumMixinStr_NID_id_GostR3410_94_CryptoPro_XchC_ParamSet = `enum NID_id_GostR3410_94_CryptoPro_XchC_ParamSet = 838;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_GostR3410_94_CryptoPro_XchC_ParamSet); }))) {
            mixin(enumMixinStr_NID_id_GostR3410_94_CryptoPro_XchC_ParamSet);
        }
    }




    static if(!is(typeof(OBJ_id_GostR3410_94_CryptoPro_XchC_ParamSet))) {
        private enum enumMixinStr_OBJ_id_GostR3410_94_CryptoPro_XchC_ParamSet = `enum OBJ_id_GostR3410_94_CryptoPro_XchC_ParamSet = 1L , 2L , 643L , 2L , 2L , 33L , 3L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_GostR3410_94_CryptoPro_XchC_ParamSet); }))) {
            mixin(enumMixinStr_OBJ_id_GostR3410_94_CryptoPro_XchC_ParamSet);
        }
    }




    static if(!is(typeof(SN_id_GostR3410_2001_TestParamSet))) {
        private enum enumMixinStr_SN_id_GostR3410_2001_TestParamSet = `enum SN_id_GostR3410_2001_TestParamSet = "id-GostR3410-2001-TestParamSet";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_GostR3410_2001_TestParamSet); }))) {
            mixin(enumMixinStr_SN_id_GostR3410_2001_TestParamSet);
        }
    }




    static if(!is(typeof(NID_id_GostR3410_2001_TestParamSet))) {
        private enum enumMixinStr_NID_id_GostR3410_2001_TestParamSet = `enum NID_id_GostR3410_2001_TestParamSet = 839;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_GostR3410_2001_TestParamSet); }))) {
            mixin(enumMixinStr_NID_id_GostR3410_2001_TestParamSet);
        }
    }




    static if(!is(typeof(OBJ_id_GostR3410_2001_TestParamSet))) {
        private enum enumMixinStr_OBJ_id_GostR3410_2001_TestParamSet = `enum OBJ_id_GostR3410_2001_TestParamSet = 1L , 2L , 643L , 2L , 2L , 35L , 0L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_GostR3410_2001_TestParamSet); }))) {
            mixin(enumMixinStr_OBJ_id_GostR3410_2001_TestParamSet);
        }
    }




    static if(!is(typeof(SN_id_GostR3410_2001_CryptoPro_A_ParamSet))) {
        private enum enumMixinStr_SN_id_GostR3410_2001_CryptoPro_A_ParamSet = `enum SN_id_GostR3410_2001_CryptoPro_A_ParamSet = "id-GostR3410-2001-CryptoPro-A-ParamSet";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_GostR3410_2001_CryptoPro_A_ParamSet); }))) {
            mixin(enumMixinStr_SN_id_GostR3410_2001_CryptoPro_A_ParamSet);
        }
    }




    static if(!is(typeof(NID_id_GostR3410_2001_CryptoPro_A_ParamSet))) {
        private enum enumMixinStr_NID_id_GostR3410_2001_CryptoPro_A_ParamSet = `enum NID_id_GostR3410_2001_CryptoPro_A_ParamSet = 840;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_GostR3410_2001_CryptoPro_A_ParamSet); }))) {
            mixin(enumMixinStr_NID_id_GostR3410_2001_CryptoPro_A_ParamSet);
        }
    }




    static if(!is(typeof(OBJ_id_GostR3410_2001_CryptoPro_A_ParamSet))) {
        private enum enumMixinStr_OBJ_id_GostR3410_2001_CryptoPro_A_ParamSet = `enum OBJ_id_GostR3410_2001_CryptoPro_A_ParamSet = 1L , 2L , 643L , 2L , 2L , 35L , 1L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_GostR3410_2001_CryptoPro_A_ParamSet); }))) {
            mixin(enumMixinStr_OBJ_id_GostR3410_2001_CryptoPro_A_ParamSet);
        }
    }




    static if(!is(typeof(SN_id_GostR3410_2001_CryptoPro_B_ParamSet))) {
        private enum enumMixinStr_SN_id_GostR3410_2001_CryptoPro_B_ParamSet = `enum SN_id_GostR3410_2001_CryptoPro_B_ParamSet = "id-GostR3410-2001-CryptoPro-B-ParamSet";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_GostR3410_2001_CryptoPro_B_ParamSet); }))) {
            mixin(enumMixinStr_SN_id_GostR3410_2001_CryptoPro_B_ParamSet);
        }
    }




    static if(!is(typeof(NID_id_GostR3410_2001_CryptoPro_B_ParamSet))) {
        private enum enumMixinStr_NID_id_GostR3410_2001_CryptoPro_B_ParamSet = `enum NID_id_GostR3410_2001_CryptoPro_B_ParamSet = 841;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_GostR3410_2001_CryptoPro_B_ParamSet); }))) {
            mixin(enumMixinStr_NID_id_GostR3410_2001_CryptoPro_B_ParamSet);
        }
    }




    static if(!is(typeof(OBJ_id_GostR3410_2001_CryptoPro_B_ParamSet))) {
        private enum enumMixinStr_OBJ_id_GostR3410_2001_CryptoPro_B_ParamSet = `enum OBJ_id_GostR3410_2001_CryptoPro_B_ParamSet = 1L , 2L , 643L , 2L , 2L , 35L , 2L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_GostR3410_2001_CryptoPro_B_ParamSet); }))) {
            mixin(enumMixinStr_OBJ_id_GostR3410_2001_CryptoPro_B_ParamSet);
        }
    }




    static if(!is(typeof(SN_id_GostR3410_2001_CryptoPro_C_ParamSet))) {
        private enum enumMixinStr_SN_id_GostR3410_2001_CryptoPro_C_ParamSet = `enum SN_id_GostR3410_2001_CryptoPro_C_ParamSet = "id-GostR3410-2001-CryptoPro-C-ParamSet";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_GostR3410_2001_CryptoPro_C_ParamSet); }))) {
            mixin(enumMixinStr_SN_id_GostR3410_2001_CryptoPro_C_ParamSet);
        }
    }




    static if(!is(typeof(NID_id_GostR3410_2001_CryptoPro_C_ParamSet))) {
        private enum enumMixinStr_NID_id_GostR3410_2001_CryptoPro_C_ParamSet = `enum NID_id_GostR3410_2001_CryptoPro_C_ParamSet = 842;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_GostR3410_2001_CryptoPro_C_ParamSet); }))) {
            mixin(enumMixinStr_NID_id_GostR3410_2001_CryptoPro_C_ParamSet);
        }
    }




    static if(!is(typeof(OBJ_id_GostR3410_2001_CryptoPro_C_ParamSet))) {
        private enum enumMixinStr_OBJ_id_GostR3410_2001_CryptoPro_C_ParamSet = `enum OBJ_id_GostR3410_2001_CryptoPro_C_ParamSet = 1L , 2L , 643L , 2L , 2L , 35L , 3L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_GostR3410_2001_CryptoPro_C_ParamSet); }))) {
            mixin(enumMixinStr_OBJ_id_GostR3410_2001_CryptoPro_C_ParamSet);
        }
    }




    static if(!is(typeof(SN_id_GostR3410_2001_CryptoPro_XchA_ParamSet))) {
        private enum enumMixinStr_SN_id_GostR3410_2001_CryptoPro_XchA_ParamSet = `enum SN_id_GostR3410_2001_CryptoPro_XchA_ParamSet = "id-GostR3410-2001-CryptoPro-XchA-ParamSet";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_GostR3410_2001_CryptoPro_XchA_ParamSet); }))) {
            mixin(enumMixinStr_SN_id_GostR3410_2001_CryptoPro_XchA_ParamSet);
        }
    }




    static if(!is(typeof(NID_id_GostR3410_2001_CryptoPro_XchA_ParamSet))) {
        private enum enumMixinStr_NID_id_GostR3410_2001_CryptoPro_XchA_ParamSet = `enum NID_id_GostR3410_2001_CryptoPro_XchA_ParamSet = 843;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_GostR3410_2001_CryptoPro_XchA_ParamSet); }))) {
            mixin(enumMixinStr_NID_id_GostR3410_2001_CryptoPro_XchA_ParamSet);
        }
    }




    static if(!is(typeof(OBJ_id_GostR3410_2001_CryptoPro_XchA_ParamSet))) {
        private enum enumMixinStr_OBJ_id_GostR3410_2001_CryptoPro_XchA_ParamSet = `enum OBJ_id_GostR3410_2001_CryptoPro_XchA_ParamSet = 1L , 2L , 643L , 2L , 2L , 36L , 0L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_GostR3410_2001_CryptoPro_XchA_ParamSet); }))) {
            mixin(enumMixinStr_OBJ_id_GostR3410_2001_CryptoPro_XchA_ParamSet);
        }
    }




    static if(!is(typeof(SN_id_GostR3410_2001_CryptoPro_XchB_ParamSet))) {
        private enum enumMixinStr_SN_id_GostR3410_2001_CryptoPro_XchB_ParamSet = `enum SN_id_GostR3410_2001_CryptoPro_XchB_ParamSet = "id-GostR3410-2001-CryptoPro-XchB-ParamSet";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_GostR3410_2001_CryptoPro_XchB_ParamSet); }))) {
            mixin(enumMixinStr_SN_id_GostR3410_2001_CryptoPro_XchB_ParamSet);
        }
    }




    static if(!is(typeof(NID_id_GostR3410_2001_CryptoPro_XchB_ParamSet))) {
        private enum enumMixinStr_NID_id_GostR3410_2001_CryptoPro_XchB_ParamSet = `enum NID_id_GostR3410_2001_CryptoPro_XchB_ParamSet = 844;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_GostR3410_2001_CryptoPro_XchB_ParamSet); }))) {
            mixin(enumMixinStr_NID_id_GostR3410_2001_CryptoPro_XchB_ParamSet);
        }
    }




    static if(!is(typeof(OBJ_id_GostR3410_2001_CryptoPro_XchB_ParamSet))) {
        private enum enumMixinStr_OBJ_id_GostR3410_2001_CryptoPro_XchB_ParamSet = `enum OBJ_id_GostR3410_2001_CryptoPro_XchB_ParamSet = 1L , 2L , 643L , 2L , 2L , 36L , 1L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_GostR3410_2001_CryptoPro_XchB_ParamSet); }))) {
            mixin(enumMixinStr_OBJ_id_GostR3410_2001_CryptoPro_XchB_ParamSet);
        }
    }




    static if(!is(typeof(SN_id_GostR3410_94_a))) {
        private enum enumMixinStr_SN_id_GostR3410_94_a = `enum SN_id_GostR3410_94_a = "id-GostR3410-94-a";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_GostR3410_94_a); }))) {
            mixin(enumMixinStr_SN_id_GostR3410_94_a);
        }
    }




    static if(!is(typeof(NID_id_GostR3410_94_a))) {
        private enum enumMixinStr_NID_id_GostR3410_94_a = `enum NID_id_GostR3410_94_a = 845;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_GostR3410_94_a); }))) {
            mixin(enumMixinStr_NID_id_GostR3410_94_a);
        }
    }




    static if(!is(typeof(OBJ_id_GostR3410_94_a))) {
        private enum enumMixinStr_OBJ_id_GostR3410_94_a = `enum OBJ_id_GostR3410_94_a = 1L , 2L , 643L , 2L , 2L , 20L , 1L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_GostR3410_94_a); }))) {
            mixin(enumMixinStr_OBJ_id_GostR3410_94_a);
        }
    }




    static if(!is(typeof(SN_id_GostR3410_94_aBis))) {
        private enum enumMixinStr_SN_id_GostR3410_94_aBis = `enum SN_id_GostR3410_94_aBis = "id-GostR3410-94-aBis";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_GostR3410_94_aBis); }))) {
            mixin(enumMixinStr_SN_id_GostR3410_94_aBis);
        }
    }




    static if(!is(typeof(NID_id_GostR3410_94_aBis))) {
        private enum enumMixinStr_NID_id_GostR3410_94_aBis = `enum NID_id_GostR3410_94_aBis = 846;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_GostR3410_94_aBis); }))) {
            mixin(enumMixinStr_NID_id_GostR3410_94_aBis);
        }
    }




    static if(!is(typeof(OBJ_id_GostR3410_94_aBis))) {
        private enum enumMixinStr_OBJ_id_GostR3410_94_aBis = `enum OBJ_id_GostR3410_94_aBis = 1L , 2L , 643L , 2L , 2L , 20L , 2L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_GostR3410_94_aBis); }))) {
            mixin(enumMixinStr_OBJ_id_GostR3410_94_aBis);
        }
    }




    static if(!is(typeof(SN_id_GostR3410_94_b))) {
        private enum enumMixinStr_SN_id_GostR3410_94_b = `enum SN_id_GostR3410_94_b = "id-GostR3410-94-b";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_GostR3410_94_b); }))) {
            mixin(enumMixinStr_SN_id_GostR3410_94_b);
        }
    }




    static if(!is(typeof(NID_id_GostR3410_94_b))) {
        private enum enumMixinStr_NID_id_GostR3410_94_b = `enum NID_id_GostR3410_94_b = 847;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_GostR3410_94_b); }))) {
            mixin(enumMixinStr_NID_id_GostR3410_94_b);
        }
    }




    static if(!is(typeof(OBJ_id_GostR3410_94_b))) {
        private enum enumMixinStr_OBJ_id_GostR3410_94_b = `enum OBJ_id_GostR3410_94_b = 1L , 2L , 643L , 2L , 2L , 20L , 3L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_GostR3410_94_b); }))) {
            mixin(enumMixinStr_OBJ_id_GostR3410_94_b);
        }
    }




    static if(!is(typeof(SN_id_GostR3410_94_bBis))) {
        private enum enumMixinStr_SN_id_GostR3410_94_bBis = `enum SN_id_GostR3410_94_bBis = "id-GostR3410-94-bBis";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_GostR3410_94_bBis); }))) {
            mixin(enumMixinStr_SN_id_GostR3410_94_bBis);
        }
    }




    static if(!is(typeof(NID_id_GostR3410_94_bBis))) {
        private enum enumMixinStr_NID_id_GostR3410_94_bBis = `enum NID_id_GostR3410_94_bBis = 848;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_GostR3410_94_bBis); }))) {
            mixin(enumMixinStr_NID_id_GostR3410_94_bBis);
        }
    }




    static if(!is(typeof(OBJ_id_GostR3410_94_bBis))) {
        private enum enumMixinStr_OBJ_id_GostR3410_94_bBis = `enum OBJ_id_GostR3410_94_bBis = 1L , 2L , 643L , 2L , 2L , 20L , 4L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_GostR3410_94_bBis); }))) {
            mixin(enumMixinStr_OBJ_id_GostR3410_94_bBis);
        }
    }




    static if(!is(typeof(SN_id_Gost28147_89_cc))) {
        private enum enumMixinStr_SN_id_Gost28147_89_cc = `enum SN_id_Gost28147_89_cc = "id-Gost28147-89-cc";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_Gost28147_89_cc); }))) {
            mixin(enumMixinStr_SN_id_Gost28147_89_cc);
        }
    }




    static if(!is(typeof(LN_id_Gost28147_89_cc))) {
        private enum enumMixinStr_LN_id_Gost28147_89_cc = `enum LN_id_Gost28147_89_cc = "GOST 28147-89 Cryptocom ParamSet";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_id_Gost28147_89_cc); }))) {
            mixin(enumMixinStr_LN_id_Gost28147_89_cc);
        }
    }




    static if(!is(typeof(NID_id_Gost28147_89_cc))) {
        private enum enumMixinStr_NID_id_Gost28147_89_cc = `enum NID_id_Gost28147_89_cc = 849;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_Gost28147_89_cc); }))) {
            mixin(enumMixinStr_NID_id_Gost28147_89_cc);
        }
    }




    static if(!is(typeof(OBJ_id_Gost28147_89_cc))) {
        private enum enumMixinStr_OBJ_id_Gost28147_89_cc = `enum OBJ_id_Gost28147_89_cc = 1L , 2L , 643L , 2L , 9L , 1L , 6L , 1L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_Gost28147_89_cc); }))) {
            mixin(enumMixinStr_OBJ_id_Gost28147_89_cc);
        }
    }




    static if(!is(typeof(SN_id_GostR3410_94_cc))) {
        private enum enumMixinStr_SN_id_GostR3410_94_cc = `enum SN_id_GostR3410_94_cc = "gost94cc";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_GostR3410_94_cc); }))) {
            mixin(enumMixinStr_SN_id_GostR3410_94_cc);
        }
    }




    static if(!is(typeof(LN_id_GostR3410_94_cc))) {
        private enum enumMixinStr_LN_id_GostR3410_94_cc = `enum LN_id_GostR3410_94_cc = "GOST 34.10-94 Cryptocom";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_id_GostR3410_94_cc); }))) {
            mixin(enumMixinStr_LN_id_GostR3410_94_cc);
        }
    }




    static if(!is(typeof(NID_id_GostR3410_94_cc))) {
        private enum enumMixinStr_NID_id_GostR3410_94_cc = `enum NID_id_GostR3410_94_cc = 850;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_GostR3410_94_cc); }))) {
            mixin(enumMixinStr_NID_id_GostR3410_94_cc);
        }
    }




    static if(!is(typeof(OBJ_id_GostR3410_94_cc))) {
        private enum enumMixinStr_OBJ_id_GostR3410_94_cc = `enum OBJ_id_GostR3410_94_cc = 1L , 2L , 643L , 2L , 9L , 1L , 5L , 3L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_GostR3410_94_cc); }))) {
            mixin(enumMixinStr_OBJ_id_GostR3410_94_cc);
        }
    }




    static if(!is(typeof(SN_id_GostR3410_2001_cc))) {
        private enum enumMixinStr_SN_id_GostR3410_2001_cc = `enum SN_id_GostR3410_2001_cc = "gost2001cc";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_GostR3410_2001_cc); }))) {
            mixin(enumMixinStr_SN_id_GostR3410_2001_cc);
        }
    }




    static if(!is(typeof(LN_id_GostR3410_2001_cc))) {
        private enum enumMixinStr_LN_id_GostR3410_2001_cc = `enum LN_id_GostR3410_2001_cc = "GOST 34.10-2001 Cryptocom";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_id_GostR3410_2001_cc); }))) {
            mixin(enumMixinStr_LN_id_GostR3410_2001_cc);
        }
    }




    static if(!is(typeof(NID_id_GostR3410_2001_cc))) {
        private enum enumMixinStr_NID_id_GostR3410_2001_cc = `enum NID_id_GostR3410_2001_cc = 851;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_GostR3410_2001_cc); }))) {
            mixin(enumMixinStr_NID_id_GostR3410_2001_cc);
        }
    }




    static if(!is(typeof(OBJ_id_GostR3410_2001_cc))) {
        private enum enumMixinStr_OBJ_id_GostR3410_2001_cc = `enum OBJ_id_GostR3410_2001_cc = 1L , 2L , 643L , 2L , 9L , 1L , 5L , 4L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_GostR3410_2001_cc); }))) {
            mixin(enumMixinStr_OBJ_id_GostR3410_2001_cc);
        }
    }




    static if(!is(typeof(SN_id_GostR3411_94_with_GostR3410_94_cc))) {
        private enum enumMixinStr_SN_id_GostR3411_94_with_GostR3410_94_cc = `enum SN_id_GostR3411_94_with_GostR3410_94_cc = "id-GostR3411-94-with-GostR3410-94-cc";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_GostR3411_94_with_GostR3410_94_cc); }))) {
            mixin(enumMixinStr_SN_id_GostR3411_94_with_GostR3410_94_cc);
        }
    }




    static if(!is(typeof(LN_id_GostR3411_94_with_GostR3410_94_cc))) {
        private enum enumMixinStr_LN_id_GostR3411_94_with_GostR3410_94_cc = `enum LN_id_GostR3411_94_with_GostR3410_94_cc = "GOST R 34.11-94 with GOST R 34.10-94 Cryptocom";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_id_GostR3411_94_with_GostR3410_94_cc); }))) {
            mixin(enumMixinStr_LN_id_GostR3411_94_with_GostR3410_94_cc);
        }
    }




    static if(!is(typeof(NID_id_GostR3411_94_with_GostR3410_94_cc))) {
        private enum enumMixinStr_NID_id_GostR3411_94_with_GostR3410_94_cc = `enum NID_id_GostR3411_94_with_GostR3410_94_cc = 852;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_GostR3411_94_with_GostR3410_94_cc); }))) {
            mixin(enumMixinStr_NID_id_GostR3411_94_with_GostR3410_94_cc);
        }
    }




    static if(!is(typeof(OBJ_id_GostR3411_94_with_GostR3410_94_cc))) {
        private enum enumMixinStr_OBJ_id_GostR3411_94_with_GostR3410_94_cc = `enum OBJ_id_GostR3411_94_with_GostR3410_94_cc = 1L , 2L , 643L , 2L , 9L , 1L , 3L , 3L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_GostR3411_94_with_GostR3410_94_cc); }))) {
            mixin(enumMixinStr_OBJ_id_GostR3411_94_with_GostR3410_94_cc);
        }
    }




    static if(!is(typeof(SN_id_GostR3411_94_with_GostR3410_2001_cc))) {
        private enum enumMixinStr_SN_id_GostR3411_94_with_GostR3410_2001_cc = `enum SN_id_GostR3411_94_with_GostR3410_2001_cc = "id-GostR3411-94-with-GostR3410-2001-cc";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_GostR3411_94_with_GostR3410_2001_cc); }))) {
            mixin(enumMixinStr_SN_id_GostR3411_94_with_GostR3410_2001_cc);
        }
    }




    static if(!is(typeof(LN_id_GostR3411_94_with_GostR3410_2001_cc))) {
        private enum enumMixinStr_LN_id_GostR3411_94_with_GostR3410_2001_cc = `enum LN_id_GostR3411_94_with_GostR3410_2001_cc = "GOST R 34.11-94 with GOST R 34.10-2001 Cryptocom";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_id_GostR3411_94_with_GostR3410_2001_cc); }))) {
            mixin(enumMixinStr_LN_id_GostR3411_94_with_GostR3410_2001_cc);
        }
    }




    static if(!is(typeof(NID_id_GostR3411_94_with_GostR3410_2001_cc))) {
        private enum enumMixinStr_NID_id_GostR3411_94_with_GostR3410_2001_cc = `enum NID_id_GostR3411_94_with_GostR3410_2001_cc = 853;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_GostR3411_94_with_GostR3410_2001_cc); }))) {
            mixin(enumMixinStr_NID_id_GostR3411_94_with_GostR3410_2001_cc);
        }
    }




    static if(!is(typeof(OBJ_id_GostR3411_94_with_GostR3410_2001_cc))) {
        private enum enumMixinStr_OBJ_id_GostR3411_94_with_GostR3410_2001_cc = `enum OBJ_id_GostR3411_94_with_GostR3410_2001_cc = 1L , 2L , 643L , 2L , 9L , 1L , 3L , 4L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_GostR3411_94_with_GostR3410_2001_cc); }))) {
            mixin(enumMixinStr_OBJ_id_GostR3411_94_with_GostR3410_2001_cc);
        }
    }




    static if(!is(typeof(SN_id_GostR3410_2001_ParamSet_cc))) {
        private enum enumMixinStr_SN_id_GostR3410_2001_ParamSet_cc = `enum SN_id_GostR3410_2001_ParamSet_cc = "id-GostR3410-2001-ParamSet-cc";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_GostR3410_2001_ParamSet_cc); }))) {
            mixin(enumMixinStr_SN_id_GostR3410_2001_ParamSet_cc);
        }
    }




    static if(!is(typeof(LN_id_GostR3410_2001_ParamSet_cc))) {
        private enum enumMixinStr_LN_id_GostR3410_2001_ParamSet_cc = `enum LN_id_GostR3410_2001_ParamSet_cc = "GOST R 3410-2001 Parameter Set Cryptocom";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_id_GostR3410_2001_ParamSet_cc); }))) {
            mixin(enumMixinStr_LN_id_GostR3410_2001_ParamSet_cc);
        }
    }




    static if(!is(typeof(NID_id_GostR3410_2001_ParamSet_cc))) {
        private enum enumMixinStr_NID_id_GostR3410_2001_ParamSet_cc = `enum NID_id_GostR3410_2001_ParamSet_cc = 854;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_GostR3410_2001_ParamSet_cc); }))) {
            mixin(enumMixinStr_NID_id_GostR3410_2001_ParamSet_cc);
        }
    }




    static if(!is(typeof(OBJ_id_GostR3410_2001_ParamSet_cc))) {
        private enum enumMixinStr_OBJ_id_GostR3410_2001_ParamSet_cc = `enum OBJ_id_GostR3410_2001_ParamSet_cc = 1L , 2L , 643L , 2L , 9L , 1L , 8L , 1L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_GostR3410_2001_ParamSet_cc); }))) {
            mixin(enumMixinStr_OBJ_id_GostR3410_2001_ParamSet_cc);
        }
    }




    static if(!is(typeof(SN_id_tc26_algorithms))) {
        private enum enumMixinStr_SN_id_tc26_algorithms = `enum SN_id_tc26_algorithms = "id-tc26-algorithms";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_tc26_algorithms); }))) {
            mixin(enumMixinStr_SN_id_tc26_algorithms);
        }
    }




    static if(!is(typeof(NID_id_tc26_algorithms))) {
        private enum enumMixinStr_NID_id_tc26_algorithms = `enum NID_id_tc26_algorithms = 977;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_tc26_algorithms); }))) {
            mixin(enumMixinStr_NID_id_tc26_algorithms);
        }
    }




    static if(!is(typeof(OBJ_id_tc26_algorithms))) {
        private enum enumMixinStr_OBJ_id_tc26_algorithms = `enum OBJ_id_tc26_algorithms = 1L , 2L , 643L , 7L , 1L , 1L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_tc26_algorithms); }))) {
            mixin(enumMixinStr_OBJ_id_tc26_algorithms);
        }
    }




    static if(!is(typeof(SN_id_tc26_sign))) {
        private enum enumMixinStr_SN_id_tc26_sign = `enum SN_id_tc26_sign = "id-tc26-sign";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_tc26_sign); }))) {
            mixin(enumMixinStr_SN_id_tc26_sign);
        }
    }




    static if(!is(typeof(NID_id_tc26_sign))) {
        private enum enumMixinStr_NID_id_tc26_sign = `enum NID_id_tc26_sign = 978;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_tc26_sign); }))) {
            mixin(enumMixinStr_NID_id_tc26_sign);
        }
    }




    static if(!is(typeof(OBJ_id_tc26_sign))) {
        private enum enumMixinStr_OBJ_id_tc26_sign = `enum OBJ_id_tc26_sign = 1L , 2L , 643L , 7L , 1L , 1L , 1L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_tc26_sign); }))) {
            mixin(enumMixinStr_OBJ_id_tc26_sign);
        }
    }




    static if(!is(typeof(SN_id_GostR3410_2012_256))) {
        private enum enumMixinStr_SN_id_GostR3410_2012_256 = `enum SN_id_GostR3410_2012_256 = "gost2012_256";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_GostR3410_2012_256); }))) {
            mixin(enumMixinStr_SN_id_GostR3410_2012_256);
        }
    }




    static if(!is(typeof(LN_id_GostR3410_2012_256))) {
        private enum enumMixinStr_LN_id_GostR3410_2012_256 = `enum LN_id_GostR3410_2012_256 = "GOST R 34.10-2012 with 256 bit modulus";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_id_GostR3410_2012_256); }))) {
            mixin(enumMixinStr_LN_id_GostR3410_2012_256);
        }
    }




    static if(!is(typeof(NID_id_GostR3410_2012_256))) {
        private enum enumMixinStr_NID_id_GostR3410_2012_256 = `enum NID_id_GostR3410_2012_256 = 979;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_GostR3410_2012_256); }))) {
            mixin(enumMixinStr_NID_id_GostR3410_2012_256);
        }
    }




    static if(!is(typeof(OBJ_id_GostR3410_2012_256))) {
        private enum enumMixinStr_OBJ_id_GostR3410_2012_256 = `enum OBJ_id_GostR3410_2012_256 = 1L , 2L , 643L , 7L , 1L , 1L , 1L , 1L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_GostR3410_2012_256); }))) {
            mixin(enumMixinStr_OBJ_id_GostR3410_2012_256);
        }
    }




    static if(!is(typeof(SN_id_GostR3410_2012_512))) {
        private enum enumMixinStr_SN_id_GostR3410_2012_512 = `enum SN_id_GostR3410_2012_512 = "gost2012_512";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_GostR3410_2012_512); }))) {
            mixin(enumMixinStr_SN_id_GostR3410_2012_512);
        }
    }




    static if(!is(typeof(LN_id_GostR3410_2012_512))) {
        private enum enumMixinStr_LN_id_GostR3410_2012_512 = `enum LN_id_GostR3410_2012_512 = "GOST R 34.10-2012 with 512 bit modulus";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_id_GostR3410_2012_512); }))) {
            mixin(enumMixinStr_LN_id_GostR3410_2012_512);
        }
    }




    static if(!is(typeof(NID_id_GostR3410_2012_512))) {
        private enum enumMixinStr_NID_id_GostR3410_2012_512 = `enum NID_id_GostR3410_2012_512 = 980;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_GostR3410_2012_512); }))) {
            mixin(enumMixinStr_NID_id_GostR3410_2012_512);
        }
    }




    static if(!is(typeof(OBJ_id_GostR3410_2012_512))) {
        private enum enumMixinStr_OBJ_id_GostR3410_2012_512 = `enum OBJ_id_GostR3410_2012_512 = 1L , 2L , 643L , 7L , 1L , 1L , 1L , 2L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_GostR3410_2012_512); }))) {
            mixin(enumMixinStr_OBJ_id_GostR3410_2012_512);
        }
    }




    static if(!is(typeof(SN_id_tc26_digest))) {
        private enum enumMixinStr_SN_id_tc26_digest = `enum SN_id_tc26_digest = "id-tc26-digest";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_tc26_digest); }))) {
            mixin(enumMixinStr_SN_id_tc26_digest);
        }
    }




    static if(!is(typeof(NID_id_tc26_digest))) {
        private enum enumMixinStr_NID_id_tc26_digest = `enum NID_id_tc26_digest = 981;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_tc26_digest); }))) {
            mixin(enumMixinStr_NID_id_tc26_digest);
        }
    }




    static if(!is(typeof(OBJ_id_tc26_digest))) {
        private enum enumMixinStr_OBJ_id_tc26_digest = `enum OBJ_id_tc26_digest = 1L , 2L , 643L , 7L , 1L , 1L , 2L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_tc26_digest); }))) {
            mixin(enumMixinStr_OBJ_id_tc26_digest);
        }
    }




    static if(!is(typeof(SN_id_GostR3411_2012_256))) {
        private enum enumMixinStr_SN_id_GostR3411_2012_256 = `enum SN_id_GostR3411_2012_256 = "md_gost12_256";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_GostR3411_2012_256); }))) {
            mixin(enumMixinStr_SN_id_GostR3411_2012_256);
        }
    }




    static if(!is(typeof(LN_id_GostR3411_2012_256))) {
        private enum enumMixinStr_LN_id_GostR3411_2012_256 = `enum LN_id_GostR3411_2012_256 = "GOST R 34.11-2012 with 256 bit hash";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_id_GostR3411_2012_256); }))) {
            mixin(enumMixinStr_LN_id_GostR3411_2012_256);
        }
    }




    static if(!is(typeof(NID_id_GostR3411_2012_256))) {
        private enum enumMixinStr_NID_id_GostR3411_2012_256 = `enum NID_id_GostR3411_2012_256 = 982;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_GostR3411_2012_256); }))) {
            mixin(enumMixinStr_NID_id_GostR3411_2012_256);
        }
    }




    static if(!is(typeof(OBJ_id_GostR3411_2012_256))) {
        private enum enumMixinStr_OBJ_id_GostR3411_2012_256 = `enum OBJ_id_GostR3411_2012_256 = 1L , 2L , 643L , 7L , 1L , 1L , 2L , 2L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_GostR3411_2012_256); }))) {
            mixin(enumMixinStr_OBJ_id_GostR3411_2012_256);
        }
    }




    static if(!is(typeof(SN_id_GostR3411_2012_512))) {
        private enum enumMixinStr_SN_id_GostR3411_2012_512 = `enum SN_id_GostR3411_2012_512 = "md_gost12_512";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_GostR3411_2012_512); }))) {
            mixin(enumMixinStr_SN_id_GostR3411_2012_512);
        }
    }




    static if(!is(typeof(LN_id_GostR3411_2012_512))) {
        private enum enumMixinStr_LN_id_GostR3411_2012_512 = `enum LN_id_GostR3411_2012_512 = "GOST R 34.11-2012 with 512 bit hash";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_id_GostR3411_2012_512); }))) {
            mixin(enumMixinStr_LN_id_GostR3411_2012_512);
        }
    }




    static if(!is(typeof(NID_id_GostR3411_2012_512))) {
        private enum enumMixinStr_NID_id_GostR3411_2012_512 = `enum NID_id_GostR3411_2012_512 = 983;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_GostR3411_2012_512); }))) {
            mixin(enumMixinStr_NID_id_GostR3411_2012_512);
        }
    }




    static if(!is(typeof(OBJ_id_GostR3411_2012_512))) {
        private enum enumMixinStr_OBJ_id_GostR3411_2012_512 = `enum OBJ_id_GostR3411_2012_512 = 1L , 2L , 643L , 7L , 1L , 1L , 2L , 3L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_GostR3411_2012_512); }))) {
            mixin(enumMixinStr_OBJ_id_GostR3411_2012_512);
        }
    }




    static if(!is(typeof(SN_id_tc26_signwithdigest))) {
        private enum enumMixinStr_SN_id_tc26_signwithdigest = `enum SN_id_tc26_signwithdigest = "id-tc26-signwithdigest";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_tc26_signwithdigest); }))) {
            mixin(enumMixinStr_SN_id_tc26_signwithdigest);
        }
    }




    static if(!is(typeof(NID_id_tc26_signwithdigest))) {
        private enum enumMixinStr_NID_id_tc26_signwithdigest = `enum NID_id_tc26_signwithdigest = 984;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_tc26_signwithdigest); }))) {
            mixin(enumMixinStr_NID_id_tc26_signwithdigest);
        }
    }




    static if(!is(typeof(OBJ_id_tc26_signwithdigest))) {
        private enum enumMixinStr_OBJ_id_tc26_signwithdigest = `enum OBJ_id_tc26_signwithdigest = 1L , 2L , 643L , 7L , 1L , 1L , 3L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_tc26_signwithdigest); }))) {
            mixin(enumMixinStr_OBJ_id_tc26_signwithdigest);
        }
    }




    static if(!is(typeof(SN_id_tc26_signwithdigest_gost3410_2012_256))) {
        private enum enumMixinStr_SN_id_tc26_signwithdigest_gost3410_2012_256 = `enum SN_id_tc26_signwithdigest_gost3410_2012_256 = "id-tc26-signwithdigest-gost3410-2012-256";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_tc26_signwithdigest_gost3410_2012_256); }))) {
            mixin(enumMixinStr_SN_id_tc26_signwithdigest_gost3410_2012_256);
        }
    }




    static if(!is(typeof(LN_id_tc26_signwithdigest_gost3410_2012_256))) {
        private enum enumMixinStr_LN_id_tc26_signwithdigest_gost3410_2012_256 = `enum LN_id_tc26_signwithdigest_gost3410_2012_256 = "GOST R 34.10-2012 with GOST R 34.11-2012 (256 bit)";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_id_tc26_signwithdigest_gost3410_2012_256); }))) {
            mixin(enumMixinStr_LN_id_tc26_signwithdigest_gost3410_2012_256);
        }
    }




    static if(!is(typeof(NID_id_tc26_signwithdigest_gost3410_2012_256))) {
        private enum enumMixinStr_NID_id_tc26_signwithdigest_gost3410_2012_256 = `enum NID_id_tc26_signwithdigest_gost3410_2012_256 = 985;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_tc26_signwithdigest_gost3410_2012_256); }))) {
            mixin(enumMixinStr_NID_id_tc26_signwithdigest_gost3410_2012_256);
        }
    }




    static if(!is(typeof(OBJ_id_tc26_signwithdigest_gost3410_2012_256))) {
        private enum enumMixinStr_OBJ_id_tc26_signwithdigest_gost3410_2012_256 = `enum OBJ_id_tc26_signwithdigest_gost3410_2012_256 = 1L , 2L , 643L , 7L , 1L , 1L , 3L , 2L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_tc26_signwithdigest_gost3410_2012_256); }))) {
            mixin(enumMixinStr_OBJ_id_tc26_signwithdigest_gost3410_2012_256);
        }
    }




    static if(!is(typeof(SN_id_tc26_signwithdigest_gost3410_2012_512))) {
        private enum enumMixinStr_SN_id_tc26_signwithdigest_gost3410_2012_512 = `enum SN_id_tc26_signwithdigest_gost3410_2012_512 = "id-tc26-signwithdigest-gost3410-2012-512";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_tc26_signwithdigest_gost3410_2012_512); }))) {
            mixin(enumMixinStr_SN_id_tc26_signwithdigest_gost3410_2012_512);
        }
    }




    static if(!is(typeof(LN_id_tc26_signwithdigest_gost3410_2012_512))) {
        private enum enumMixinStr_LN_id_tc26_signwithdigest_gost3410_2012_512 = `enum LN_id_tc26_signwithdigest_gost3410_2012_512 = "GOST R 34.10-2012 with GOST R 34.11-2012 (512 bit)";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_id_tc26_signwithdigest_gost3410_2012_512); }))) {
            mixin(enumMixinStr_LN_id_tc26_signwithdigest_gost3410_2012_512);
        }
    }




    static if(!is(typeof(NID_id_tc26_signwithdigest_gost3410_2012_512))) {
        private enum enumMixinStr_NID_id_tc26_signwithdigest_gost3410_2012_512 = `enum NID_id_tc26_signwithdigest_gost3410_2012_512 = 986;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_tc26_signwithdigest_gost3410_2012_512); }))) {
            mixin(enumMixinStr_NID_id_tc26_signwithdigest_gost3410_2012_512);
        }
    }




    static if(!is(typeof(OBJ_id_tc26_signwithdigest_gost3410_2012_512))) {
        private enum enumMixinStr_OBJ_id_tc26_signwithdigest_gost3410_2012_512 = `enum OBJ_id_tc26_signwithdigest_gost3410_2012_512 = 1L , 2L , 643L , 7L , 1L , 1L , 3L , 3L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_tc26_signwithdigest_gost3410_2012_512); }))) {
            mixin(enumMixinStr_OBJ_id_tc26_signwithdigest_gost3410_2012_512);
        }
    }




    static if(!is(typeof(SN_id_tc26_mac))) {
        private enum enumMixinStr_SN_id_tc26_mac = `enum SN_id_tc26_mac = "id-tc26-mac";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_tc26_mac); }))) {
            mixin(enumMixinStr_SN_id_tc26_mac);
        }
    }




    static if(!is(typeof(NID_id_tc26_mac))) {
        private enum enumMixinStr_NID_id_tc26_mac = `enum NID_id_tc26_mac = 987;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_tc26_mac); }))) {
            mixin(enumMixinStr_NID_id_tc26_mac);
        }
    }




    static if(!is(typeof(OBJ_id_tc26_mac))) {
        private enum enumMixinStr_OBJ_id_tc26_mac = `enum OBJ_id_tc26_mac = 1L , 2L , 643L , 7L , 1L , 1L , 4L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_tc26_mac); }))) {
            mixin(enumMixinStr_OBJ_id_tc26_mac);
        }
    }




    static if(!is(typeof(SN_id_tc26_hmac_gost_3411_2012_256))) {
        private enum enumMixinStr_SN_id_tc26_hmac_gost_3411_2012_256 = `enum SN_id_tc26_hmac_gost_3411_2012_256 = "id-tc26-hmac-gost-3411-2012-256";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_tc26_hmac_gost_3411_2012_256); }))) {
            mixin(enumMixinStr_SN_id_tc26_hmac_gost_3411_2012_256);
        }
    }




    static if(!is(typeof(LN_id_tc26_hmac_gost_3411_2012_256))) {
        private enum enumMixinStr_LN_id_tc26_hmac_gost_3411_2012_256 = `enum LN_id_tc26_hmac_gost_3411_2012_256 = "HMAC GOST 34.11-2012 256 bit";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_id_tc26_hmac_gost_3411_2012_256); }))) {
            mixin(enumMixinStr_LN_id_tc26_hmac_gost_3411_2012_256);
        }
    }




    static if(!is(typeof(NID_id_tc26_hmac_gost_3411_2012_256))) {
        private enum enumMixinStr_NID_id_tc26_hmac_gost_3411_2012_256 = `enum NID_id_tc26_hmac_gost_3411_2012_256 = 988;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_tc26_hmac_gost_3411_2012_256); }))) {
            mixin(enumMixinStr_NID_id_tc26_hmac_gost_3411_2012_256);
        }
    }




    static if(!is(typeof(OBJ_id_tc26_hmac_gost_3411_2012_256))) {
        private enum enumMixinStr_OBJ_id_tc26_hmac_gost_3411_2012_256 = `enum OBJ_id_tc26_hmac_gost_3411_2012_256 = 1L , 2L , 643L , 7L , 1L , 1L , 4L , 1L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_tc26_hmac_gost_3411_2012_256); }))) {
            mixin(enumMixinStr_OBJ_id_tc26_hmac_gost_3411_2012_256);
        }
    }




    static if(!is(typeof(SN_id_tc26_hmac_gost_3411_2012_512))) {
        private enum enumMixinStr_SN_id_tc26_hmac_gost_3411_2012_512 = `enum SN_id_tc26_hmac_gost_3411_2012_512 = "id-tc26-hmac-gost-3411-2012-512";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_tc26_hmac_gost_3411_2012_512); }))) {
            mixin(enumMixinStr_SN_id_tc26_hmac_gost_3411_2012_512);
        }
    }




    static if(!is(typeof(LN_id_tc26_hmac_gost_3411_2012_512))) {
        private enum enumMixinStr_LN_id_tc26_hmac_gost_3411_2012_512 = `enum LN_id_tc26_hmac_gost_3411_2012_512 = "HMAC GOST 34.11-2012 512 bit";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_id_tc26_hmac_gost_3411_2012_512); }))) {
            mixin(enumMixinStr_LN_id_tc26_hmac_gost_3411_2012_512);
        }
    }




    static if(!is(typeof(NID_id_tc26_hmac_gost_3411_2012_512))) {
        private enum enumMixinStr_NID_id_tc26_hmac_gost_3411_2012_512 = `enum NID_id_tc26_hmac_gost_3411_2012_512 = 989;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_tc26_hmac_gost_3411_2012_512); }))) {
            mixin(enumMixinStr_NID_id_tc26_hmac_gost_3411_2012_512);
        }
    }




    static if(!is(typeof(OBJ_id_tc26_hmac_gost_3411_2012_512))) {
        private enum enumMixinStr_OBJ_id_tc26_hmac_gost_3411_2012_512 = `enum OBJ_id_tc26_hmac_gost_3411_2012_512 = 1L , 2L , 643L , 7L , 1L , 1L , 4L , 2L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_tc26_hmac_gost_3411_2012_512); }))) {
            mixin(enumMixinStr_OBJ_id_tc26_hmac_gost_3411_2012_512);
        }
    }




    static if(!is(typeof(SN_id_tc26_cipher))) {
        private enum enumMixinStr_SN_id_tc26_cipher = `enum SN_id_tc26_cipher = "id-tc26-cipher";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_tc26_cipher); }))) {
            mixin(enumMixinStr_SN_id_tc26_cipher);
        }
    }




    static if(!is(typeof(NID_id_tc26_cipher))) {
        private enum enumMixinStr_NID_id_tc26_cipher = `enum NID_id_tc26_cipher = 990;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_tc26_cipher); }))) {
            mixin(enumMixinStr_NID_id_tc26_cipher);
        }
    }




    static if(!is(typeof(OBJ_id_tc26_cipher))) {
        private enum enumMixinStr_OBJ_id_tc26_cipher = `enum OBJ_id_tc26_cipher = 1L , 2L , 643L , 7L , 1L , 1L , 5L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_tc26_cipher); }))) {
            mixin(enumMixinStr_OBJ_id_tc26_cipher);
        }
    }




    static if(!is(typeof(SN_id_tc26_cipher_gostr3412_2015_magma))) {
        private enum enumMixinStr_SN_id_tc26_cipher_gostr3412_2015_magma = `enum SN_id_tc26_cipher_gostr3412_2015_magma = "id-tc26-cipher-gostr3412-2015-magma";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_tc26_cipher_gostr3412_2015_magma); }))) {
            mixin(enumMixinStr_SN_id_tc26_cipher_gostr3412_2015_magma);
        }
    }




    static if(!is(typeof(NID_id_tc26_cipher_gostr3412_2015_magma))) {
        private enum enumMixinStr_NID_id_tc26_cipher_gostr3412_2015_magma = `enum NID_id_tc26_cipher_gostr3412_2015_magma = 1173;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_tc26_cipher_gostr3412_2015_magma); }))) {
            mixin(enumMixinStr_NID_id_tc26_cipher_gostr3412_2015_magma);
        }
    }




    static if(!is(typeof(OBJ_id_tc26_cipher_gostr3412_2015_magma))) {
        private enum enumMixinStr_OBJ_id_tc26_cipher_gostr3412_2015_magma = `enum OBJ_id_tc26_cipher_gostr3412_2015_magma = 1L , 2L , 643L , 7L , 1L , 1L , 5L , 1L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_tc26_cipher_gostr3412_2015_magma); }))) {
            mixin(enumMixinStr_OBJ_id_tc26_cipher_gostr3412_2015_magma);
        }
    }




    static if(!is(typeof(SN_id_tc26_cipher_gostr3412_2015_magma_ctracpkm))) {
        private enum enumMixinStr_SN_id_tc26_cipher_gostr3412_2015_magma_ctracpkm = `enum SN_id_tc26_cipher_gostr3412_2015_magma_ctracpkm = "id-tc26-cipher-gostr3412-2015-magma-ctracpkm";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_tc26_cipher_gostr3412_2015_magma_ctracpkm); }))) {
            mixin(enumMixinStr_SN_id_tc26_cipher_gostr3412_2015_magma_ctracpkm);
        }
    }




    static if(!is(typeof(NID_id_tc26_cipher_gostr3412_2015_magma_ctracpkm))) {
        private enum enumMixinStr_NID_id_tc26_cipher_gostr3412_2015_magma_ctracpkm = `enum NID_id_tc26_cipher_gostr3412_2015_magma_ctracpkm = 1174;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_tc26_cipher_gostr3412_2015_magma_ctracpkm); }))) {
            mixin(enumMixinStr_NID_id_tc26_cipher_gostr3412_2015_magma_ctracpkm);
        }
    }




    static if(!is(typeof(OBJ_id_tc26_cipher_gostr3412_2015_magma_ctracpkm))) {
        private enum enumMixinStr_OBJ_id_tc26_cipher_gostr3412_2015_magma_ctracpkm = `enum OBJ_id_tc26_cipher_gostr3412_2015_magma_ctracpkm = 1L , 2L , 643L , 7L , 1L , 1L , 5L , 1L , 1L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_tc26_cipher_gostr3412_2015_magma_ctracpkm); }))) {
            mixin(enumMixinStr_OBJ_id_tc26_cipher_gostr3412_2015_magma_ctracpkm);
        }
    }




    static if(!is(typeof(SN_id_tc26_cipher_gostr3412_2015_magma_ctracpkm_omac))) {
        private enum enumMixinStr_SN_id_tc26_cipher_gostr3412_2015_magma_ctracpkm_omac = `enum SN_id_tc26_cipher_gostr3412_2015_magma_ctracpkm_omac = "id-tc26-cipher-gostr3412-2015-magma-ctracpkm-omac";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_tc26_cipher_gostr3412_2015_magma_ctracpkm_omac); }))) {
            mixin(enumMixinStr_SN_id_tc26_cipher_gostr3412_2015_magma_ctracpkm_omac);
        }
    }




    static if(!is(typeof(NID_id_tc26_cipher_gostr3412_2015_magma_ctracpkm_omac))) {
        private enum enumMixinStr_NID_id_tc26_cipher_gostr3412_2015_magma_ctracpkm_omac = `enum NID_id_tc26_cipher_gostr3412_2015_magma_ctracpkm_omac = 1175;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_tc26_cipher_gostr3412_2015_magma_ctracpkm_omac); }))) {
            mixin(enumMixinStr_NID_id_tc26_cipher_gostr3412_2015_magma_ctracpkm_omac);
        }
    }




    static if(!is(typeof(OBJ_id_tc26_cipher_gostr3412_2015_magma_ctracpkm_omac))) {
        private enum enumMixinStr_OBJ_id_tc26_cipher_gostr3412_2015_magma_ctracpkm_omac = `enum OBJ_id_tc26_cipher_gostr3412_2015_magma_ctracpkm_omac = 1L , 2L , 643L , 7L , 1L , 1L , 5L , 1L , 2L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_tc26_cipher_gostr3412_2015_magma_ctracpkm_omac); }))) {
            mixin(enumMixinStr_OBJ_id_tc26_cipher_gostr3412_2015_magma_ctracpkm_omac);
        }
    }




    static if(!is(typeof(SN_id_tc26_cipher_gostr3412_2015_kuznyechik))) {
        private enum enumMixinStr_SN_id_tc26_cipher_gostr3412_2015_kuznyechik = `enum SN_id_tc26_cipher_gostr3412_2015_kuznyechik = "id-tc26-cipher-gostr3412-2015-kuznyechik";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_tc26_cipher_gostr3412_2015_kuznyechik); }))) {
            mixin(enumMixinStr_SN_id_tc26_cipher_gostr3412_2015_kuznyechik);
        }
    }




    static if(!is(typeof(NID_id_tc26_cipher_gostr3412_2015_kuznyechik))) {
        private enum enumMixinStr_NID_id_tc26_cipher_gostr3412_2015_kuznyechik = `enum NID_id_tc26_cipher_gostr3412_2015_kuznyechik = 1176;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_tc26_cipher_gostr3412_2015_kuznyechik); }))) {
            mixin(enumMixinStr_NID_id_tc26_cipher_gostr3412_2015_kuznyechik);
        }
    }




    static if(!is(typeof(OBJ_id_tc26_cipher_gostr3412_2015_kuznyechik))) {
        private enum enumMixinStr_OBJ_id_tc26_cipher_gostr3412_2015_kuznyechik = `enum OBJ_id_tc26_cipher_gostr3412_2015_kuznyechik = 1L , 2L , 643L , 7L , 1L , 1L , 5L , 2L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_tc26_cipher_gostr3412_2015_kuznyechik); }))) {
            mixin(enumMixinStr_OBJ_id_tc26_cipher_gostr3412_2015_kuznyechik);
        }
    }




    static if(!is(typeof(SN_id_tc26_cipher_gostr3412_2015_kuznyechik_ctracpkm))) {
        private enum enumMixinStr_SN_id_tc26_cipher_gostr3412_2015_kuznyechik_ctracpkm = `enum SN_id_tc26_cipher_gostr3412_2015_kuznyechik_ctracpkm = "id-tc26-cipher-gostr3412-2015-kuznyechik-ctracpkm";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_tc26_cipher_gostr3412_2015_kuznyechik_ctracpkm); }))) {
            mixin(enumMixinStr_SN_id_tc26_cipher_gostr3412_2015_kuznyechik_ctracpkm);
        }
    }




    static if(!is(typeof(NID_id_tc26_cipher_gostr3412_2015_kuznyechik_ctracpkm))) {
        private enum enumMixinStr_NID_id_tc26_cipher_gostr3412_2015_kuznyechik_ctracpkm = `enum NID_id_tc26_cipher_gostr3412_2015_kuznyechik_ctracpkm = 1177;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_tc26_cipher_gostr3412_2015_kuznyechik_ctracpkm); }))) {
            mixin(enumMixinStr_NID_id_tc26_cipher_gostr3412_2015_kuznyechik_ctracpkm);
        }
    }




    static if(!is(typeof(OBJ_id_tc26_cipher_gostr3412_2015_kuznyechik_ctracpkm))) {
        private enum enumMixinStr_OBJ_id_tc26_cipher_gostr3412_2015_kuznyechik_ctracpkm = `enum OBJ_id_tc26_cipher_gostr3412_2015_kuznyechik_ctracpkm = 1L , 2L , 643L , 7L , 1L , 1L , 5L , 2L , 1L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_tc26_cipher_gostr3412_2015_kuznyechik_ctracpkm); }))) {
            mixin(enumMixinStr_OBJ_id_tc26_cipher_gostr3412_2015_kuznyechik_ctracpkm);
        }
    }




    static if(!is(typeof(SN_id_tc26_cipher_gostr3412_2015_kuznyechik_ctracpkm_omac))) {
        private enum enumMixinStr_SN_id_tc26_cipher_gostr3412_2015_kuznyechik_ctracpkm_omac = `enum SN_id_tc26_cipher_gostr3412_2015_kuznyechik_ctracpkm_omac = "id-tc26-cipher-gostr3412-2015-kuznyechik-ctracpkm-omac";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_tc26_cipher_gostr3412_2015_kuznyechik_ctracpkm_omac); }))) {
            mixin(enumMixinStr_SN_id_tc26_cipher_gostr3412_2015_kuznyechik_ctracpkm_omac);
        }
    }




    static if(!is(typeof(NID_id_tc26_cipher_gostr3412_2015_kuznyechik_ctracpkm_omac))) {
        private enum enumMixinStr_NID_id_tc26_cipher_gostr3412_2015_kuznyechik_ctracpkm_omac = `enum NID_id_tc26_cipher_gostr3412_2015_kuznyechik_ctracpkm_omac = 1178;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_tc26_cipher_gostr3412_2015_kuznyechik_ctracpkm_omac); }))) {
            mixin(enumMixinStr_NID_id_tc26_cipher_gostr3412_2015_kuznyechik_ctracpkm_omac);
        }
    }




    static if(!is(typeof(OBJ_id_tc26_cipher_gostr3412_2015_kuznyechik_ctracpkm_omac))) {
        private enum enumMixinStr_OBJ_id_tc26_cipher_gostr3412_2015_kuznyechik_ctracpkm_omac = `enum OBJ_id_tc26_cipher_gostr3412_2015_kuznyechik_ctracpkm_omac = 1L , 2L , 643L , 7L , 1L , 1L , 5L , 2L , 2L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_tc26_cipher_gostr3412_2015_kuznyechik_ctracpkm_omac); }))) {
            mixin(enumMixinStr_OBJ_id_tc26_cipher_gostr3412_2015_kuznyechik_ctracpkm_omac);
        }
    }




    static if(!is(typeof(SN_id_tc26_agreement))) {
        private enum enumMixinStr_SN_id_tc26_agreement = `enum SN_id_tc26_agreement = "id-tc26-agreement";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_tc26_agreement); }))) {
            mixin(enumMixinStr_SN_id_tc26_agreement);
        }
    }




    static if(!is(typeof(NID_id_tc26_agreement))) {
        private enum enumMixinStr_NID_id_tc26_agreement = `enum NID_id_tc26_agreement = 991;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_tc26_agreement); }))) {
            mixin(enumMixinStr_NID_id_tc26_agreement);
        }
    }




    static if(!is(typeof(OBJ_id_tc26_agreement))) {
        private enum enumMixinStr_OBJ_id_tc26_agreement = `enum OBJ_id_tc26_agreement = 1L , 2L , 643L , 7L , 1L , 1L , 6L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_tc26_agreement); }))) {
            mixin(enumMixinStr_OBJ_id_tc26_agreement);
        }
    }




    static if(!is(typeof(SN_id_tc26_agreement_gost_3410_2012_256))) {
        private enum enumMixinStr_SN_id_tc26_agreement_gost_3410_2012_256 = `enum SN_id_tc26_agreement_gost_3410_2012_256 = "id-tc26-agreement-gost-3410-2012-256";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_tc26_agreement_gost_3410_2012_256); }))) {
            mixin(enumMixinStr_SN_id_tc26_agreement_gost_3410_2012_256);
        }
    }




    static if(!is(typeof(NID_id_tc26_agreement_gost_3410_2012_256))) {
        private enum enumMixinStr_NID_id_tc26_agreement_gost_3410_2012_256 = `enum NID_id_tc26_agreement_gost_3410_2012_256 = 992;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_tc26_agreement_gost_3410_2012_256); }))) {
            mixin(enumMixinStr_NID_id_tc26_agreement_gost_3410_2012_256);
        }
    }




    static if(!is(typeof(OBJ_id_tc26_agreement_gost_3410_2012_256))) {
        private enum enumMixinStr_OBJ_id_tc26_agreement_gost_3410_2012_256 = `enum OBJ_id_tc26_agreement_gost_3410_2012_256 = 1L , 2L , 643L , 7L , 1L , 1L , 6L , 1L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_tc26_agreement_gost_3410_2012_256); }))) {
            mixin(enumMixinStr_OBJ_id_tc26_agreement_gost_3410_2012_256);
        }
    }




    static if(!is(typeof(SN_id_tc26_agreement_gost_3410_2012_512))) {
        private enum enumMixinStr_SN_id_tc26_agreement_gost_3410_2012_512 = `enum SN_id_tc26_agreement_gost_3410_2012_512 = "id-tc26-agreement-gost-3410-2012-512";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_tc26_agreement_gost_3410_2012_512); }))) {
            mixin(enumMixinStr_SN_id_tc26_agreement_gost_3410_2012_512);
        }
    }




    static if(!is(typeof(NID_id_tc26_agreement_gost_3410_2012_512))) {
        private enum enumMixinStr_NID_id_tc26_agreement_gost_3410_2012_512 = `enum NID_id_tc26_agreement_gost_3410_2012_512 = 993;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_tc26_agreement_gost_3410_2012_512); }))) {
            mixin(enumMixinStr_NID_id_tc26_agreement_gost_3410_2012_512);
        }
    }




    static if(!is(typeof(OBJ_id_tc26_agreement_gost_3410_2012_512))) {
        private enum enumMixinStr_OBJ_id_tc26_agreement_gost_3410_2012_512 = `enum OBJ_id_tc26_agreement_gost_3410_2012_512 = 1L , 2L , 643L , 7L , 1L , 1L , 6L , 2L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_tc26_agreement_gost_3410_2012_512); }))) {
            mixin(enumMixinStr_OBJ_id_tc26_agreement_gost_3410_2012_512);
        }
    }




    static if(!is(typeof(SN_id_tc26_wrap))) {
        private enum enumMixinStr_SN_id_tc26_wrap = `enum SN_id_tc26_wrap = "id-tc26-wrap";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_tc26_wrap); }))) {
            mixin(enumMixinStr_SN_id_tc26_wrap);
        }
    }




    static if(!is(typeof(NID_id_tc26_wrap))) {
        private enum enumMixinStr_NID_id_tc26_wrap = `enum NID_id_tc26_wrap = 1179;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_tc26_wrap); }))) {
            mixin(enumMixinStr_NID_id_tc26_wrap);
        }
    }




    static if(!is(typeof(OBJ_id_tc26_wrap))) {
        private enum enumMixinStr_OBJ_id_tc26_wrap = `enum OBJ_id_tc26_wrap = 1L , 2L , 643L , 7L , 1L , 1L , 7L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_tc26_wrap); }))) {
            mixin(enumMixinStr_OBJ_id_tc26_wrap);
        }
    }




    static if(!is(typeof(SN_id_tc26_wrap_gostr3412_2015_magma))) {
        private enum enumMixinStr_SN_id_tc26_wrap_gostr3412_2015_magma = `enum SN_id_tc26_wrap_gostr3412_2015_magma = "id-tc26-wrap-gostr3412-2015-magma";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_tc26_wrap_gostr3412_2015_magma); }))) {
            mixin(enumMixinStr_SN_id_tc26_wrap_gostr3412_2015_magma);
        }
    }




    static if(!is(typeof(NID_id_tc26_wrap_gostr3412_2015_magma))) {
        private enum enumMixinStr_NID_id_tc26_wrap_gostr3412_2015_magma = `enum NID_id_tc26_wrap_gostr3412_2015_magma = 1180;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_tc26_wrap_gostr3412_2015_magma); }))) {
            mixin(enumMixinStr_NID_id_tc26_wrap_gostr3412_2015_magma);
        }
    }




    static if(!is(typeof(OBJ_id_tc26_wrap_gostr3412_2015_magma))) {
        private enum enumMixinStr_OBJ_id_tc26_wrap_gostr3412_2015_magma = `enum OBJ_id_tc26_wrap_gostr3412_2015_magma = 1L , 2L , 643L , 7L , 1L , 1L , 7L , 1L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_tc26_wrap_gostr3412_2015_magma); }))) {
            mixin(enumMixinStr_OBJ_id_tc26_wrap_gostr3412_2015_magma);
        }
    }




    static if(!is(typeof(SN_id_tc26_wrap_gostr3412_2015_magma_kexp15))) {
        private enum enumMixinStr_SN_id_tc26_wrap_gostr3412_2015_magma_kexp15 = `enum SN_id_tc26_wrap_gostr3412_2015_magma_kexp15 = "id-tc26-wrap-gostr3412-2015-magma-kexp15";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_tc26_wrap_gostr3412_2015_magma_kexp15); }))) {
            mixin(enumMixinStr_SN_id_tc26_wrap_gostr3412_2015_magma_kexp15);
        }
    }




    static if(!is(typeof(NID_id_tc26_wrap_gostr3412_2015_magma_kexp15))) {
        private enum enumMixinStr_NID_id_tc26_wrap_gostr3412_2015_magma_kexp15 = `enum NID_id_tc26_wrap_gostr3412_2015_magma_kexp15 = 1181;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_tc26_wrap_gostr3412_2015_magma_kexp15); }))) {
            mixin(enumMixinStr_NID_id_tc26_wrap_gostr3412_2015_magma_kexp15);
        }
    }




    static if(!is(typeof(OBJ_id_tc26_wrap_gostr3412_2015_magma_kexp15))) {
        private enum enumMixinStr_OBJ_id_tc26_wrap_gostr3412_2015_magma_kexp15 = `enum OBJ_id_tc26_wrap_gostr3412_2015_magma_kexp15 = 1L , 2L , 643L , 7L , 1L , 1L , 7L , 1L , 1L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_tc26_wrap_gostr3412_2015_magma_kexp15); }))) {
            mixin(enumMixinStr_OBJ_id_tc26_wrap_gostr3412_2015_magma_kexp15);
        }
    }




    static if(!is(typeof(SN_id_tc26_wrap_gostr3412_2015_kuznyechik))) {
        private enum enumMixinStr_SN_id_tc26_wrap_gostr3412_2015_kuznyechik = `enum SN_id_tc26_wrap_gostr3412_2015_kuznyechik = "id-tc26-wrap-gostr3412-2015-kuznyechik";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_tc26_wrap_gostr3412_2015_kuznyechik); }))) {
            mixin(enumMixinStr_SN_id_tc26_wrap_gostr3412_2015_kuznyechik);
        }
    }




    static if(!is(typeof(NID_id_tc26_wrap_gostr3412_2015_kuznyechik))) {
        private enum enumMixinStr_NID_id_tc26_wrap_gostr3412_2015_kuznyechik = `enum NID_id_tc26_wrap_gostr3412_2015_kuznyechik = 1182;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_tc26_wrap_gostr3412_2015_kuznyechik); }))) {
            mixin(enumMixinStr_NID_id_tc26_wrap_gostr3412_2015_kuznyechik);
        }
    }




    static if(!is(typeof(OBJ_id_tc26_wrap_gostr3412_2015_kuznyechik))) {
        private enum enumMixinStr_OBJ_id_tc26_wrap_gostr3412_2015_kuznyechik = `enum OBJ_id_tc26_wrap_gostr3412_2015_kuznyechik = 1L , 2L , 643L , 7L , 1L , 1L , 7L , 2L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_tc26_wrap_gostr3412_2015_kuznyechik); }))) {
            mixin(enumMixinStr_OBJ_id_tc26_wrap_gostr3412_2015_kuznyechik);
        }
    }




    static if(!is(typeof(SN_id_tc26_wrap_gostr3412_2015_kuznyechik_kexp15))) {
        private enum enumMixinStr_SN_id_tc26_wrap_gostr3412_2015_kuznyechik_kexp15 = `enum SN_id_tc26_wrap_gostr3412_2015_kuznyechik_kexp15 = "id-tc26-wrap-gostr3412-2015-kuznyechik-kexp15";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_tc26_wrap_gostr3412_2015_kuznyechik_kexp15); }))) {
            mixin(enumMixinStr_SN_id_tc26_wrap_gostr3412_2015_kuznyechik_kexp15);
        }
    }




    static if(!is(typeof(NID_id_tc26_wrap_gostr3412_2015_kuznyechik_kexp15))) {
        private enum enumMixinStr_NID_id_tc26_wrap_gostr3412_2015_kuznyechik_kexp15 = `enum NID_id_tc26_wrap_gostr3412_2015_kuznyechik_kexp15 = 1183;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_tc26_wrap_gostr3412_2015_kuznyechik_kexp15); }))) {
            mixin(enumMixinStr_NID_id_tc26_wrap_gostr3412_2015_kuznyechik_kexp15);
        }
    }




    static if(!is(typeof(OBJ_id_tc26_wrap_gostr3412_2015_kuznyechik_kexp15))) {
        private enum enumMixinStr_OBJ_id_tc26_wrap_gostr3412_2015_kuznyechik_kexp15 = `enum OBJ_id_tc26_wrap_gostr3412_2015_kuznyechik_kexp15 = 1L , 2L , 643L , 7L , 1L , 1L , 7L , 2L , 1L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_tc26_wrap_gostr3412_2015_kuznyechik_kexp15); }))) {
            mixin(enumMixinStr_OBJ_id_tc26_wrap_gostr3412_2015_kuznyechik_kexp15);
        }
    }




    static if(!is(typeof(SN_id_tc26_constants))) {
        private enum enumMixinStr_SN_id_tc26_constants = `enum SN_id_tc26_constants = "id-tc26-constants";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_tc26_constants); }))) {
            mixin(enumMixinStr_SN_id_tc26_constants);
        }
    }




    static if(!is(typeof(NID_id_tc26_constants))) {
        private enum enumMixinStr_NID_id_tc26_constants = `enum NID_id_tc26_constants = 994;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_tc26_constants); }))) {
            mixin(enumMixinStr_NID_id_tc26_constants);
        }
    }




    static if(!is(typeof(OBJ_id_tc26_constants))) {
        private enum enumMixinStr_OBJ_id_tc26_constants = `enum OBJ_id_tc26_constants = 1L , 2L , 643L , 7L , 1L , 2L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_tc26_constants); }))) {
            mixin(enumMixinStr_OBJ_id_tc26_constants);
        }
    }




    static if(!is(typeof(SN_id_tc26_sign_constants))) {
        private enum enumMixinStr_SN_id_tc26_sign_constants = `enum SN_id_tc26_sign_constants = "id-tc26-sign-constants";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_tc26_sign_constants); }))) {
            mixin(enumMixinStr_SN_id_tc26_sign_constants);
        }
    }




    static if(!is(typeof(NID_id_tc26_sign_constants))) {
        private enum enumMixinStr_NID_id_tc26_sign_constants = `enum NID_id_tc26_sign_constants = 995;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_tc26_sign_constants); }))) {
            mixin(enumMixinStr_NID_id_tc26_sign_constants);
        }
    }




    static if(!is(typeof(OBJ_id_tc26_sign_constants))) {
        private enum enumMixinStr_OBJ_id_tc26_sign_constants = `enum OBJ_id_tc26_sign_constants = 1L , 2L , 643L , 7L , 1L , 2L , 1L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_tc26_sign_constants); }))) {
            mixin(enumMixinStr_OBJ_id_tc26_sign_constants);
        }
    }




    static if(!is(typeof(SN_id_tc26_gost_3410_2012_256_constants))) {
        private enum enumMixinStr_SN_id_tc26_gost_3410_2012_256_constants = `enum SN_id_tc26_gost_3410_2012_256_constants = "id-tc26-gost-3410-2012-256-constants";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_tc26_gost_3410_2012_256_constants); }))) {
            mixin(enumMixinStr_SN_id_tc26_gost_3410_2012_256_constants);
        }
    }




    static if(!is(typeof(NID_id_tc26_gost_3410_2012_256_constants))) {
        private enum enumMixinStr_NID_id_tc26_gost_3410_2012_256_constants = `enum NID_id_tc26_gost_3410_2012_256_constants = 1147;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_tc26_gost_3410_2012_256_constants); }))) {
            mixin(enumMixinStr_NID_id_tc26_gost_3410_2012_256_constants);
        }
    }




    static if(!is(typeof(OBJ_id_tc26_gost_3410_2012_256_constants))) {
        private enum enumMixinStr_OBJ_id_tc26_gost_3410_2012_256_constants = `enum OBJ_id_tc26_gost_3410_2012_256_constants = 1L , 2L , 643L , 7L , 1L , 2L , 1L , 1L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_tc26_gost_3410_2012_256_constants); }))) {
            mixin(enumMixinStr_OBJ_id_tc26_gost_3410_2012_256_constants);
        }
    }




    static if(!is(typeof(SN_id_tc26_gost_3410_2012_256_paramSetA))) {
        private enum enumMixinStr_SN_id_tc26_gost_3410_2012_256_paramSetA = `enum SN_id_tc26_gost_3410_2012_256_paramSetA = "id-tc26-gost-3410-2012-256-paramSetA";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_tc26_gost_3410_2012_256_paramSetA); }))) {
            mixin(enumMixinStr_SN_id_tc26_gost_3410_2012_256_paramSetA);
        }
    }




    static if(!is(typeof(LN_id_tc26_gost_3410_2012_256_paramSetA))) {
        private enum enumMixinStr_LN_id_tc26_gost_3410_2012_256_paramSetA = `enum LN_id_tc26_gost_3410_2012_256_paramSetA = "GOST R 34.10-2012 (256 bit) ParamSet A";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_id_tc26_gost_3410_2012_256_paramSetA); }))) {
            mixin(enumMixinStr_LN_id_tc26_gost_3410_2012_256_paramSetA);
        }
    }




    static if(!is(typeof(NID_id_tc26_gost_3410_2012_256_paramSetA))) {
        private enum enumMixinStr_NID_id_tc26_gost_3410_2012_256_paramSetA = `enum NID_id_tc26_gost_3410_2012_256_paramSetA = 1148;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_tc26_gost_3410_2012_256_paramSetA); }))) {
            mixin(enumMixinStr_NID_id_tc26_gost_3410_2012_256_paramSetA);
        }
    }




    static if(!is(typeof(OBJ_id_tc26_gost_3410_2012_256_paramSetA))) {
        private enum enumMixinStr_OBJ_id_tc26_gost_3410_2012_256_paramSetA = `enum OBJ_id_tc26_gost_3410_2012_256_paramSetA = 1L , 2L , 643L , 7L , 1L , 2L , 1L , 1L , 1L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_tc26_gost_3410_2012_256_paramSetA); }))) {
            mixin(enumMixinStr_OBJ_id_tc26_gost_3410_2012_256_paramSetA);
        }
    }




    static if(!is(typeof(SN_id_tc26_gost_3410_2012_256_paramSetB))) {
        private enum enumMixinStr_SN_id_tc26_gost_3410_2012_256_paramSetB = `enum SN_id_tc26_gost_3410_2012_256_paramSetB = "id-tc26-gost-3410-2012-256-paramSetB";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_tc26_gost_3410_2012_256_paramSetB); }))) {
            mixin(enumMixinStr_SN_id_tc26_gost_3410_2012_256_paramSetB);
        }
    }




    static if(!is(typeof(LN_id_tc26_gost_3410_2012_256_paramSetB))) {
        private enum enumMixinStr_LN_id_tc26_gost_3410_2012_256_paramSetB = `enum LN_id_tc26_gost_3410_2012_256_paramSetB = "GOST R 34.10-2012 (256 bit) ParamSet B";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_id_tc26_gost_3410_2012_256_paramSetB); }))) {
            mixin(enumMixinStr_LN_id_tc26_gost_3410_2012_256_paramSetB);
        }
    }




    static if(!is(typeof(NID_id_tc26_gost_3410_2012_256_paramSetB))) {
        private enum enumMixinStr_NID_id_tc26_gost_3410_2012_256_paramSetB = `enum NID_id_tc26_gost_3410_2012_256_paramSetB = 1184;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_tc26_gost_3410_2012_256_paramSetB); }))) {
            mixin(enumMixinStr_NID_id_tc26_gost_3410_2012_256_paramSetB);
        }
    }




    static if(!is(typeof(OBJ_id_tc26_gost_3410_2012_256_paramSetB))) {
        private enum enumMixinStr_OBJ_id_tc26_gost_3410_2012_256_paramSetB = `enum OBJ_id_tc26_gost_3410_2012_256_paramSetB = 1L , 2L , 643L , 7L , 1L , 2L , 1L , 1L , 2L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_tc26_gost_3410_2012_256_paramSetB); }))) {
            mixin(enumMixinStr_OBJ_id_tc26_gost_3410_2012_256_paramSetB);
        }
    }




    static if(!is(typeof(SN_id_tc26_gost_3410_2012_256_paramSetC))) {
        private enum enumMixinStr_SN_id_tc26_gost_3410_2012_256_paramSetC = `enum SN_id_tc26_gost_3410_2012_256_paramSetC = "id-tc26-gost-3410-2012-256-paramSetC";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_tc26_gost_3410_2012_256_paramSetC); }))) {
            mixin(enumMixinStr_SN_id_tc26_gost_3410_2012_256_paramSetC);
        }
    }




    static if(!is(typeof(LN_id_tc26_gost_3410_2012_256_paramSetC))) {
        private enum enumMixinStr_LN_id_tc26_gost_3410_2012_256_paramSetC = `enum LN_id_tc26_gost_3410_2012_256_paramSetC = "GOST R 34.10-2012 (256 bit) ParamSet C";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_id_tc26_gost_3410_2012_256_paramSetC); }))) {
            mixin(enumMixinStr_LN_id_tc26_gost_3410_2012_256_paramSetC);
        }
    }




    static if(!is(typeof(NID_id_tc26_gost_3410_2012_256_paramSetC))) {
        private enum enumMixinStr_NID_id_tc26_gost_3410_2012_256_paramSetC = `enum NID_id_tc26_gost_3410_2012_256_paramSetC = 1185;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_tc26_gost_3410_2012_256_paramSetC); }))) {
            mixin(enumMixinStr_NID_id_tc26_gost_3410_2012_256_paramSetC);
        }
    }




    static if(!is(typeof(OBJ_id_tc26_gost_3410_2012_256_paramSetC))) {
        private enum enumMixinStr_OBJ_id_tc26_gost_3410_2012_256_paramSetC = `enum OBJ_id_tc26_gost_3410_2012_256_paramSetC = 1L , 2L , 643L , 7L , 1L , 2L , 1L , 1L , 3L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_tc26_gost_3410_2012_256_paramSetC); }))) {
            mixin(enumMixinStr_OBJ_id_tc26_gost_3410_2012_256_paramSetC);
        }
    }




    static if(!is(typeof(SN_id_tc26_gost_3410_2012_256_paramSetD))) {
        private enum enumMixinStr_SN_id_tc26_gost_3410_2012_256_paramSetD = `enum SN_id_tc26_gost_3410_2012_256_paramSetD = "id-tc26-gost-3410-2012-256-paramSetD";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_tc26_gost_3410_2012_256_paramSetD); }))) {
            mixin(enumMixinStr_SN_id_tc26_gost_3410_2012_256_paramSetD);
        }
    }




    static if(!is(typeof(LN_id_tc26_gost_3410_2012_256_paramSetD))) {
        private enum enumMixinStr_LN_id_tc26_gost_3410_2012_256_paramSetD = `enum LN_id_tc26_gost_3410_2012_256_paramSetD = "GOST R 34.10-2012 (256 bit) ParamSet D";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_id_tc26_gost_3410_2012_256_paramSetD); }))) {
            mixin(enumMixinStr_LN_id_tc26_gost_3410_2012_256_paramSetD);
        }
    }




    static if(!is(typeof(NID_id_tc26_gost_3410_2012_256_paramSetD))) {
        private enum enumMixinStr_NID_id_tc26_gost_3410_2012_256_paramSetD = `enum NID_id_tc26_gost_3410_2012_256_paramSetD = 1186;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_tc26_gost_3410_2012_256_paramSetD); }))) {
            mixin(enumMixinStr_NID_id_tc26_gost_3410_2012_256_paramSetD);
        }
    }




    static if(!is(typeof(OBJ_id_tc26_gost_3410_2012_256_paramSetD))) {
        private enum enumMixinStr_OBJ_id_tc26_gost_3410_2012_256_paramSetD = `enum OBJ_id_tc26_gost_3410_2012_256_paramSetD = 1L , 2L , 643L , 7L , 1L , 2L , 1L , 1L , 4L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_tc26_gost_3410_2012_256_paramSetD); }))) {
            mixin(enumMixinStr_OBJ_id_tc26_gost_3410_2012_256_paramSetD);
        }
    }




    static if(!is(typeof(SN_id_tc26_gost_3410_2012_512_constants))) {
        private enum enumMixinStr_SN_id_tc26_gost_3410_2012_512_constants = `enum SN_id_tc26_gost_3410_2012_512_constants = "id-tc26-gost-3410-2012-512-constants";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_tc26_gost_3410_2012_512_constants); }))) {
            mixin(enumMixinStr_SN_id_tc26_gost_3410_2012_512_constants);
        }
    }




    static if(!is(typeof(NID_id_tc26_gost_3410_2012_512_constants))) {
        private enum enumMixinStr_NID_id_tc26_gost_3410_2012_512_constants = `enum NID_id_tc26_gost_3410_2012_512_constants = 996;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_tc26_gost_3410_2012_512_constants); }))) {
            mixin(enumMixinStr_NID_id_tc26_gost_3410_2012_512_constants);
        }
    }




    static if(!is(typeof(OBJ_id_tc26_gost_3410_2012_512_constants))) {
        private enum enumMixinStr_OBJ_id_tc26_gost_3410_2012_512_constants = `enum OBJ_id_tc26_gost_3410_2012_512_constants = 1L , 2L , 643L , 7L , 1L , 2L , 1L , 2L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_tc26_gost_3410_2012_512_constants); }))) {
            mixin(enumMixinStr_OBJ_id_tc26_gost_3410_2012_512_constants);
        }
    }




    static if(!is(typeof(SN_id_tc26_gost_3410_2012_512_paramSetTest))) {
        private enum enumMixinStr_SN_id_tc26_gost_3410_2012_512_paramSetTest = `enum SN_id_tc26_gost_3410_2012_512_paramSetTest = "id-tc26-gost-3410-2012-512-paramSetTest";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_tc26_gost_3410_2012_512_paramSetTest); }))) {
            mixin(enumMixinStr_SN_id_tc26_gost_3410_2012_512_paramSetTest);
        }
    }




    static if(!is(typeof(LN_id_tc26_gost_3410_2012_512_paramSetTest))) {
        private enum enumMixinStr_LN_id_tc26_gost_3410_2012_512_paramSetTest = `enum LN_id_tc26_gost_3410_2012_512_paramSetTest = "GOST R 34.10-2012 (512 bit) testing parameter set";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_id_tc26_gost_3410_2012_512_paramSetTest); }))) {
            mixin(enumMixinStr_LN_id_tc26_gost_3410_2012_512_paramSetTest);
        }
    }




    static if(!is(typeof(NID_id_tc26_gost_3410_2012_512_paramSetTest))) {
        private enum enumMixinStr_NID_id_tc26_gost_3410_2012_512_paramSetTest = `enum NID_id_tc26_gost_3410_2012_512_paramSetTest = 997;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_tc26_gost_3410_2012_512_paramSetTest); }))) {
            mixin(enumMixinStr_NID_id_tc26_gost_3410_2012_512_paramSetTest);
        }
    }




    static if(!is(typeof(OBJ_id_tc26_gost_3410_2012_512_paramSetTest))) {
        private enum enumMixinStr_OBJ_id_tc26_gost_3410_2012_512_paramSetTest = `enum OBJ_id_tc26_gost_3410_2012_512_paramSetTest = 1L , 2L , 643L , 7L , 1L , 2L , 1L , 2L , 0L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_tc26_gost_3410_2012_512_paramSetTest); }))) {
            mixin(enumMixinStr_OBJ_id_tc26_gost_3410_2012_512_paramSetTest);
        }
    }




    static if(!is(typeof(SN_id_tc26_gost_3410_2012_512_paramSetA))) {
        private enum enumMixinStr_SN_id_tc26_gost_3410_2012_512_paramSetA = `enum SN_id_tc26_gost_3410_2012_512_paramSetA = "id-tc26-gost-3410-2012-512-paramSetA";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_tc26_gost_3410_2012_512_paramSetA); }))) {
            mixin(enumMixinStr_SN_id_tc26_gost_3410_2012_512_paramSetA);
        }
    }




    static if(!is(typeof(LN_id_tc26_gost_3410_2012_512_paramSetA))) {
        private enum enumMixinStr_LN_id_tc26_gost_3410_2012_512_paramSetA = `enum LN_id_tc26_gost_3410_2012_512_paramSetA = "GOST R 34.10-2012 (512 bit) ParamSet A";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_id_tc26_gost_3410_2012_512_paramSetA); }))) {
            mixin(enumMixinStr_LN_id_tc26_gost_3410_2012_512_paramSetA);
        }
    }




    static if(!is(typeof(NID_id_tc26_gost_3410_2012_512_paramSetA))) {
        private enum enumMixinStr_NID_id_tc26_gost_3410_2012_512_paramSetA = `enum NID_id_tc26_gost_3410_2012_512_paramSetA = 998;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_tc26_gost_3410_2012_512_paramSetA); }))) {
            mixin(enumMixinStr_NID_id_tc26_gost_3410_2012_512_paramSetA);
        }
    }




    static if(!is(typeof(OBJ_id_tc26_gost_3410_2012_512_paramSetA))) {
        private enum enumMixinStr_OBJ_id_tc26_gost_3410_2012_512_paramSetA = `enum OBJ_id_tc26_gost_3410_2012_512_paramSetA = 1L , 2L , 643L , 7L , 1L , 2L , 1L , 2L , 1L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_tc26_gost_3410_2012_512_paramSetA); }))) {
            mixin(enumMixinStr_OBJ_id_tc26_gost_3410_2012_512_paramSetA);
        }
    }




    static if(!is(typeof(SN_id_tc26_gost_3410_2012_512_paramSetB))) {
        private enum enumMixinStr_SN_id_tc26_gost_3410_2012_512_paramSetB = `enum SN_id_tc26_gost_3410_2012_512_paramSetB = "id-tc26-gost-3410-2012-512-paramSetB";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_tc26_gost_3410_2012_512_paramSetB); }))) {
            mixin(enumMixinStr_SN_id_tc26_gost_3410_2012_512_paramSetB);
        }
    }




    static if(!is(typeof(LN_id_tc26_gost_3410_2012_512_paramSetB))) {
        private enum enumMixinStr_LN_id_tc26_gost_3410_2012_512_paramSetB = `enum LN_id_tc26_gost_3410_2012_512_paramSetB = "GOST R 34.10-2012 (512 bit) ParamSet B";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_id_tc26_gost_3410_2012_512_paramSetB); }))) {
            mixin(enumMixinStr_LN_id_tc26_gost_3410_2012_512_paramSetB);
        }
    }




    static if(!is(typeof(NID_id_tc26_gost_3410_2012_512_paramSetB))) {
        private enum enumMixinStr_NID_id_tc26_gost_3410_2012_512_paramSetB = `enum NID_id_tc26_gost_3410_2012_512_paramSetB = 999;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_tc26_gost_3410_2012_512_paramSetB); }))) {
            mixin(enumMixinStr_NID_id_tc26_gost_3410_2012_512_paramSetB);
        }
    }




    static if(!is(typeof(OBJ_id_tc26_gost_3410_2012_512_paramSetB))) {
        private enum enumMixinStr_OBJ_id_tc26_gost_3410_2012_512_paramSetB = `enum OBJ_id_tc26_gost_3410_2012_512_paramSetB = 1L , 2L , 643L , 7L , 1L , 2L , 1L , 2L , 2L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_tc26_gost_3410_2012_512_paramSetB); }))) {
            mixin(enumMixinStr_OBJ_id_tc26_gost_3410_2012_512_paramSetB);
        }
    }




    static if(!is(typeof(SN_id_tc26_gost_3410_2012_512_paramSetC))) {
        private enum enumMixinStr_SN_id_tc26_gost_3410_2012_512_paramSetC = `enum SN_id_tc26_gost_3410_2012_512_paramSetC = "id-tc26-gost-3410-2012-512-paramSetC";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_tc26_gost_3410_2012_512_paramSetC); }))) {
            mixin(enumMixinStr_SN_id_tc26_gost_3410_2012_512_paramSetC);
        }
    }




    static if(!is(typeof(LN_id_tc26_gost_3410_2012_512_paramSetC))) {
        private enum enumMixinStr_LN_id_tc26_gost_3410_2012_512_paramSetC = `enum LN_id_tc26_gost_3410_2012_512_paramSetC = "GOST R 34.10-2012 (512 bit) ParamSet C";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_id_tc26_gost_3410_2012_512_paramSetC); }))) {
            mixin(enumMixinStr_LN_id_tc26_gost_3410_2012_512_paramSetC);
        }
    }




    static if(!is(typeof(NID_id_tc26_gost_3410_2012_512_paramSetC))) {
        private enum enumMixinStr_NID_id_tc26_gost_3410_2012_512_paramSetC = `enum NID_id_tc26_gost_3410_2012_512_paramSetC = 1149;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_tc26_gost_3410_2012_512_paramSetC); }))) {
            mixin(enumMixinStr_NID_id_tc26_gost_3410_2012_512_paramSetC);
        }
    }




    static if(!is(typeof(OBJ_id_tc26_gost_3410_2012_512_paramSetC))) {
        private enum enumMixinStr_OBJ_id_tc26_gost_3410_2012_512_paramSetC = `enum OBJ_id_tc26_gost_3410_2012_512_paramSetC = 1L , 2L , 643L , 7L , 1L , 2L , 1L , 2L , 3L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_tc26_gost_3410_2012_512_paramSetC); }))) {
            mixin(enumMixinStr_OBJ_id_tc26_gost_3410_2012_512_paramSetC);
        }
    }




    static if(!is(typeof(SN_id_tc26_digest_constants))) {
        private enum enumMixinStr_SN_id_tc26_digest_constants = `enum SN_id_tc26_digest_constants = "id-tc26-digest-constants";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_tc26_digest_constants); }))) {
            mixin(enumMixinStr_SN_id_tc26_digest_constants);
        }
    }




    static if(!is(typeof(NID_id_tc26_digest_constants))) {
        private enum enumMixinStr_NID_id_tc26_digest_constants = `enum NID_id_tc26_digest_constants = 1000;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_tc26_digest_constants); }))) {
            mixin(enumMixinStr_NID_id_tc26_digest_constants);
        }
    }




    static if(!is(typeof(OBJ_id_tc26_digest_constants))) {
        private enum enumMixinStr_OBJ_id_tc26_digest_constants = `enum OBJ_id_tc26_digest_constants = 1L , 2L , 643L , 7L , 1L , 2L , 2L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_tc26_digest_constants); }))) {
            mixin(enumMixinStr_OBJ_id_tc26_digest_constants);
        }
    }




    static if(!is(typeof(SN_id_tc26_cipher_constants))) {
        private enum enumMixinStr_SN_id_tc26_cipher_constants = `enum SN_id_tc26_cipher_constants = "id-tc26-cipher-constants";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_tc26_cipher_constants); }))) {
            mixin(enumMixinStr_SN_id_tc26_cipher_constants);
        }
    }




    static if(!is(typeof(NID_id_tc26_cipher_constants))) {
        private enum enumMixinStr_NID_id_tc26_cipher_constants = `enum NID_id_tc26_cipher_constants = 1001;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_tc26_cipher_constants); }))) {
            mixin(enumMixinStr_NID_id_tc26_cipher_constants);
        }
    }




    static if(!is(typeof(OBJ_id_tc26_cipher_constants))) {
        private enum enumMixinStr_OBJ_id_tc26_cipher_constants = `enum OBJ_id_tc26_cipher_constants = 1L , 2L , 643L , 7L , 1L , 2L , 5L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_tc26_cipher_constants); }))) {
            mixin(enumMixinStr_OBJ_id_tc26_cipher_constants);
        }
    }




    static if(!is(typeof(SN_id_tc26_gost_28147_constants))) {
        private enum enumMixinStr_SN_id_tc26_gost_28147_constants = `enum SN_id_tc26_gost_28147_constants = "id-tc26-gost-28147-constants";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_tc26_gost_28147_constants); }))) {
            mixin(enumMixinStr_SN_id_tc26_gost_28147_constants);
        }
    }




    static if(!is(typeof(NID_id_tc26_gost_28147_constants))) {
        private enum enumMixinStr_NID_id_tc26_gost_28147_constants = `enum NID_id_tc26_gost_28147_constants = 1002;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_tc26_gost_28147_constants); }))) {
            mixin(enumMixinStr_NID_id_tc26_gost_28147_constants);
        }
    }




    static if(!is(typeof(OBJ_id_tc26_gost_28147_constants))) {
        private enum enumMixinStr_OBJ_id_tc26_gost_28147_constants = `enum OBJ_id_tc26_gost_28147_constants = 1L , 2L , 643L , 7L , 1L , 2L , 5L , 1L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_tc26_gost_28147_constants); }))) {
            mixin(enumMixinStr_OBJ_id_tc26_gost_28147_constants);
        }
    }




    static if(!is(typeof(SN_id_tc26_gost_28147_param_Z))) {
        private enum enumMixinStr_SN_id_tc26_gost_28147_param_Z = `enum SN_id_tc26_gost_28147_param_Z = "id-tc26-gost-28147-param-Z";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_tc26_gost_28147_param_Z); }))) {
            mixin(enumMixinStr_SN_id_tc26_gost_28147_param_Z);
        }
    }




    static if(!is(typeof(LN_id_tc26_gost_28147_param_Z))) {
        private enum enumMixinStr_LN_id_tc26_gost_28147_param_Z = `enum LN_id_tc26_gost_28147_param_Z = "GOST 28147-89 TC26 parameter set";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_id_tc26_gost_28147_param_Z); }))) {
            mixin(enumMixinStr_LN_id_tc26_gost_28147_param_Z);
        }
    }




    static if(!is(typeof(NID_id_tc26_gost_28147_param_Z))) {
        private enum enumMixinStr_NID_id_tc26_gost_28147_param_Z = `enum NID_id_tc26_gost_28147_param_Z = 1003;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_tc26_gost_28147_param_Z); }))) {
            mixin(enumMixinStr_NID_id_tc26_gost_28147_param_Z);
        }
    }




    static if(!is(typeof(OBJ_id_tc26_gost_28147_param_Z))) {
        private enum enumMixinStr_OBJ_id_tc26_gost_28147_param_Z = `enum OBJ_id_tc26_gost_28147_param_Z = 1L , 2L , 643L , 7L , 1L , 2L , 5L , 1L , 1L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_tc26_gost_28147_param_Z); }))) {
            mixin(enumMixinStr_OBJ_id_tc26_gost_28147_param_Z);
        }
    }




    static if(!is(typeof(SN_INN))) {
        private enum enumMixinStr_SN_INN = `enum SN_INN = "INN";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_INN); }))) {
            mixin(enumMixinStr_SN_INN);
        }
    }




    static if(!is(typeof(LN_INN))) {
        private enum enumMixinStr_LN_INN = `enum LN_INN = "INN";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_INN); }))) {
            mixin(enumMixinStr_LN_INN);
        }
    }




    static if(!is(typeof(NID_INN))) {
        private enum enumMixinStr_NID_INN = `enum NID_INN = 1004;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_INN); }))) {
            mixin(enumMixinStr_NID_INN);
        }
    }




    static if(!is(typeof(OBJ_INN))) {
        private enum enumMixinStr_OBJ_INN = `enum OBJ_INN = 1L , 2L , 643L , 3L , 131L , 1L , 1L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_INN); }))) {
            mixin(enumMixinStr_OBJ_INN);
        }
    }




    static if(!is(typeof(SN_OGRN))) {
        private enum enumMixinStr_SN_OGRN = `enum SN_OGRN = "OGRN";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_OGRN); }))) {
            mixin(enumMixinStr_SN_OGRN);
        }
    }




    static if(!is(typeof(LN_OGRN))) {
        private enum enumMixinStr_LN_OGRN = `enum LN_OGRN = "OGRN";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_OGRN); }))) {
            mixin(enumMixinStr_LN_OGRN);
        }
    }




    static if(!is(typeof(NID_OGRN))) {
        private enum enumMixinStr_NID_OGRN = `enum NID_OGRN = 1005;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_OGRN); }))) {
            mixin(enumMixinStr_NID_OGRN);
        }
    }




    static if(!is(typeof(OBJ_OGRN))) {
        private enum enumMixinStr_OBJ_OGRN = `enum OBJ_OGRN = 1L , 2L , 643L , 100L , 1L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_OGRN); }))) {
            mixin(enumMixinStr_OBJ_OGRN);
        }
    }




    static if(!is(typeof(SN_SNILS))) {
        private enum enumMixinStr_SN_SNILS = `enum SN_SNILS = "SNILS";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_SNILS); }))) {
            mixin(enumMixinStr_SN_SNILS);
        }
    }




    static if(!is(typeof(LN_SNILS))) {
        private enum enumMixinStr_LN_SNILS = `enum LN_SNILS = "SNILS";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_SNILS); }))) {
            mixin(enumMixinStr_LN_SNILS);
        }
    }




    static if(!is(typeof(NID_SNILS))) {
        private enum enumMixinStr_NID_SNILS = `enum NID_SNILS = 1006;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_SNILS); }))) {
            mixin(enumMixinStr_NID_SNILS);
        }
    }




    static if(!is(typeof(OBJ_SNILS))) {
        private enum enumMixinStr_OBJ_SNILS = `enum OBJ_SNILS = 1L , 2L , 643L , 100L , 3L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_SNILS); }))) {
            mixin(enumMixinStr_OBJ_SNILS);
        }
    }




    static if(!is(typeof(SN_subjectSignTool))) {
        private enum enumMixinStr_SN_subjectSignTool = `enum SN_subjectSignTool = "subjectSignTool";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_subjectSignTool); }))) {
            mixin(enumMixinStr_SN_subjectSignTool);
        }
    }




    static if(!is(typeof(LN_subjectSignTool))) {
        private enum enumMixinStr_LN_subjectSignTool = `enum LN_subjectSignTool = "Signing Tool of Subject";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_subjectSignTool); }))) {
            mixin(enumMixinStr_LN_subjectSignTool);
        }
    }




    static if(!is(typeof(NID_subjectSignTool))) {
        private enum enumMixinStr_NID_subjectSignTool = `enum NID_subjectSignTool = 1007;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_subjectSignTool); }))) {
            mixin(enumMixinStr_NID_subjectSignTool);
        }
    }




    static if(!is(typeof(OBJ_subjectSignTool))) {
        private enum enumMixinStr_OBJ_subjectSignTool = `enum OBJ_subjectSignTool = 1L , 2L , 643L , 100L , 111L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_subjectSignTool); }))) {
            mixin(enumMixinStr_OBJ_subjectSignTool);
        }
    }




    static if(!is(typeof(SN_issuerSignTool))) {
        private enum enumMixinStr_SN_issuerSignTool = `enum SN_issuerSignTool = "issuerSignTool";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_issuerSignTool); }))) {
            mixin(enumMixinStr_SN_issuerSignTool);
        }
    }




    static if(!is(typeof(LN_issuerSignTool))) {
        private enum enumMixinStr_LN_issuerSignTool = `enum LN_issuerSignTool = "Signing Tool of Issuer";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_issuerSignTool); }))) {
            mixin(enumMixinStr_LN_issuerSignTool);
        }
    }




    static if(!is(typeof(NID_issuerSignTool))) {
        private enum enumMixinStr_NID_issuerSignTool = `enum NID_issuerSignTool = 1008;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_issuerSignTool); }))) {
            mixin(enumMixinStr_NID_issuerSignTool);
        }
    }




    static if(!is(typeof(OBJ_issuerSignTool))) {
        private enum enumMixinStr_OBJ_issuerSignTool = `enum OBJ_issuerSignTool = 1L , 2L , 643L , 100L , 112L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_issuerSignTool); }))) {
            mixin(enumMixinStr_OBJ_issuerSignTool);
        }
    }




    static if(!is(typeof(SN_grasshopper_ecb))) {
        private enum enumMixinStr_SN_grasshopper_ecb = `enum SN_grasshopper_ecb = "grasshopper-ecb";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_grasshopper_ecb); }))) {
            mixin(enumMixinStr_SN_grasshopper_ecb);
        }
    }




    static if(!is(typeof(NID_grasshopper_ecb))) {
        private enum enumMixinStr_NID_grasshopper_ecb = `enum NID_grasshopper_ecb = 1012;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_grasshopper_ecb); }))) {
            mixin(enumMixinStr_NID_grasshopper_ecb);
        }
    }




    static if(!is(typeof(SN_grasshopper_ctr))) {
        private enum enumMixinStr_SN_grasshopper_ctr = `enum SN_grasshopper_ctr = "grasshopper-ctr";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_grasshopper_ctr); }))) {
            mixin(enumMixinStr_SN_grasshopper_ctr);
        }
    }




    static if(!is(typeof(NID_grasshopper_ctr))) {
        private enum enumMixinStr_NID_grasshopper_ctr = `enum NID_grasshopper_ctr = 1013;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_grasshopper_ctr); }))) {
            mixin(enumMixinStr_NID_grasshopper_ctr);
        }
    }




    static if(!is(typeof(SN_grasshopper_ofb))) {
        private enum enumMixinStr_SN_grasshopper_ofb = `enum SN_grasshopper_ofb = "grasshopper-ofb";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_grasshopper_ofb); }))) {
            mixin(enumMixinStr_SN_grasshopper_ofb);
        }
    }




    static if(!is(typeof(NID_grasshopper_ofb))) {
        private enum enumMixinStr_NID_grasshopper_ofb = `enum NID_grasshopper_ofb = 1014;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_grasshopper_ofb); }))) {
            mixin(enumMixinStr_NID_grasshopper_ofb);
        }
    }




    static if(!is(typeof(SN_grasshopper_cbc))) {
        private enum enumMixinStr_SN_grasshopper_cbc = `enum SN_grasshopper_cbc = "grasshopper-cbc";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_grasshopper_cbc); }))) {
            mixin(enumMixinStr_SN_grasshopper_cbc);
        }
    }




    static if(!is(typeof(NID_grasshopper_cbc))) {
        private enum enumMixinStr_NID_grasshopper_cbc = `enum NID_grasshopper_cbc = 1015;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_grasshopper_cbc); }))) {
            mixin(enumMixinStr_NID_grasshopper_cbc);
        }
    }




    static if(!is(typeof(SN_grasshopper_cfb))) {
        private enum enumMixinStr_SN_grasshopper_cfb = `enum SN_grasshopper_cfb = "grasshopper-cfb";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_grasshopper_cfb); }))) {
            mixin(enumMixinStr_SN_grasshopper_cfb);
        }
    }




    static if(!is(typeof(NID_grasshopper_cfb))) {
        private enum enumMixinStr_NID_grasshopper_cfb = `enum NID_grasshopper_cfb = 1016;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_grasshopper_cfb); }))) {
            mixin(enumMixinStr_NID_grasshopper_cfb);
        }
    }




    static if(!is(typeof(SN_grasshopper_mac))) {
        private enum enumMixinStr_SN_grasshopper_mac = `enum SN_grasshopper_mac = "grasshopper-mac";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_grasshopper_mac); }))) {
            mixin(enumMixinStr_SN_grasshopper_mac);
        }
    }




    static if(!is(typeof(NID_grasshopper_mac))) {
        private enum enumMixinStr_NID_grasshopper_mac = `enum NID_grasshopper_mac = 1017;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_grasshopper_mac); }))) {
            mixin(enumMixinStr_NID_grasshopper_mac);
        }
    }




    static if(!is(typeof(SN_magma_ecb))) {
        private enum enumMixinStr_SN_magma_ecb = `enum SN_magma_ecb = "magma-ecb";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_magma_ecb); }))) {
            mixin(enumMixinStr_SN_magma_ecb);
        }
    }




    static if(!is(typeof(NID_magma_ecb))) {
        private enum enumMixinStr_NID_magma_ecb = `enum NID_magma_ecb = 1187;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_magma_ecb); }))) {
            mixin(enumMixinStr_NID_magma_ecb);
        }
    }




    static if(!is(typeof(SN_magma_ctr))) {
        private enum enumMixinStr_SN_magma_ctr = `enum SN_magma_ctr = "magma-ctr";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_magma_ctr); }))) {
            mixin(enumMixinStr_SN_magma_ctr);
        }
    }




    static if(!is(typeof(NID_magma_ctr))) {
        private enum enumMixinStr_NID_magma_ctr = `enum NID_magma_ctr = 1188;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_magma_ctr); }))) {
            mixin(enumMixinStr_NID_magma_ctr);
        }
    }




    static if(!is(typeof(SN_magma_ofb))) {
        private enum enumMixinStr_SN_magma_ofb = `enum SN_magma_ofb = "magma-ofb";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_magma_ofb); }))) {
            mixin(enumMixinStr_SN_magma_ofb);
        }
    }




    static if(!is(typeof(NID_magma_ofb))) {
        private enum enumMixinStr_NID_magma_ofb = `enum NID_magma_ofb = 1189;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_magma_ofb); }))) {
            mixin(enumMixinStr_NID_magma_ofb);
        }
    }




    static if(!is(typeof(SN_magma_cbc))) {
        private enum enumMixinStr_SN_magma_cbc = `enum SN_magma_cbc = "magma-cbc";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_magma_cbc); }))) {
            mixin(enumMixinStr_SN_magma_cbc);
        }
    }




    static if(!is(typeof(NID_magma_cbc))) {
        private enum enumMixinStr_NID_magma_cbc = `enum NID_magma_cbc = 1190;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_magma_cbc); }))) {
            mixin(enumMixinStr_NID_magma_cbc);
        }
    }




    static if(!is(typeof(SN_magma_cfb))) {
        private enum enumMixinStr_SN_magma_cfb = `enum SN_magma_cfb = "magma-cfb";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_magma_cfb); }))) {
            mixin(enumMixinStr_SN_magma_cfb);
        }
    }




    static if(!is(typeof(NID_magma_cfb))) {
        private enum enumMixinStr_NID_magma_cfb = `enum NID_magma_cfb = 1191;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_magma_cfb); }))) {
            mixin(enumMixinStr_NID_magma_cfb);
        }
    }




    static if(!is(typeof(SN_magma_mac))) {
        private enum enumMixinStr_SN_magma_mac = `enum SN_magma_mac = "magma-mac";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_magma_mac); }))) {
            mixin(enumMixinStr_SN_magma_mac);
        }
    }




    static if(!is(typeof(NID_magma_mac))) {
        private enum enumMixinStr_NID_magma_mac = `enum NID_magma_mac = 1192;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_magma_mac); }))) {
            mixin(enumMixinStr_NID_magma_mac);
        }
    }




    static if(!is(typeof(SN_camellia_128_cbc))) {
        private enum enumMixinStr_SN_camellia_128_cbc = `enum SN_camellia_128_cbc = "CAMELLIA-128-CBC";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_camellia_128_cbc); }))) {
            mixin(enumMixinStr_SN_camellia_128_cbc);
        }
    }




    static if(!is(typeof(LN_camellia_128_cbc))) {
        private enum enumMixinStr_LN_camellia_128_cbc = `enum LN_camellia_128_cbc = "camellia-128-cbc";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_camellia_128_cbc); }))) {
            mixin(enumMixinStr_LN_camellia_128_cbc);
        }
    }




    static if(!is(typeof(NID_camellia_128_cbc))) {
        private enum enumMixinStr_NID_camellia_128_cbc = `enum NID_camellia_128_cbc = 751;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_camellia_128_cbc); }))) {
            mixin(enumMixinStr_NID_camellia_128_cbc);
        }
    }




    static if(!is(typeof(OBJ_camellia_128_cbc))) {
        private enum enumMixinStr_OBJ_camellia_128_cbc = `enum OBJ_camellia_128_cbc = 1L , 2L , 392L , 200011L , 61L , 1L , 1L , 1L , 2L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_camellia_128_cbc); }))) {
            mixin(enumMixinStr_OBJ_camellia_128_cbc);
        }
    }




    static if(!is(typeof(SN_camellia_192_cbc))) {
        private enum enumMixinStr_SN_camellia_192_cbc = `enum SN_camellia_192_cbc = "CAMELLIA-192-CBC";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_camellia_192_cbc); }))) {
            mixin(enumMixinStr_SN_camellia_192_cbc);
        }
    }




    static if(!is(typeof(LN_camellia_192_cbc))) {
        private enum enumMixinStr_LN_camellia_192_cbc = `enum LN_camellia_192_cbc = "camellia-192-cbc";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_camellia_192_cbc); }))) {
            mixin(enumMixinStr_LN_camellia_192_cbc);
        }
    }




    static if(!is(typeof(NID_camellia_192_cbc))) {
        private enum enumMixinStr_NID_camellia_192_cbc = `enum NID_camellia_192_cbc = 752;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_camellia_192_cbc); }))) {
            mixin(enumMixinStr_NID_camellia_192_cbc);
        }
    }




    static if(!is(typeof(OBJ_camellia_192_cbc))) {
        private enum enumMixinStr_OBJ_camellia_192_cbc = `enum OBJ_camellia_192_cbc = 1L , 2L , 392L , 200011L , 61L , 1L , 1L , 1L , 3L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_camellia_192_cbc); }))) {
            mixin(enumMixinStr_OBJ_camellia_192_cbc);
        }
    }




    static if(!is(typeof(SN_camellia_256_cbc))) {
        private enum enumMixinStr_SN_camellia_256_cbc = `enum SN_camellia_256_cbc = "CAMELLIA-256-CBC";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_camellia_256_cbc); }))) {
            mixin(enumMixinStr_SN_camellia_256_cbc);
        }
    }




    static if(!is(typeof(LN_camellia_256_cbc))) {
        private enum enumMixinStr_LN_camellia_256_cbc = `enum LN_camellia_256_cbc = "camellia-256-cbc";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_camellia_256_cbc); }))) {
            mixin(enumMixinStr_LN_camellia_256_cbc);
        }
    }




    static if(!is(typeof(NID_camellia_256_cbc))) {
        private enum enumMixinStr_NID_camellia_256_cbc = `enum NID_camellia_256_cbc = 753;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_camellia_256_cbc); }))) {
            mixin(enumMixinStr_NID_camellia_256_cbc);
        }
    }




    static if(!is(typeof(OBJ_camellia_256_cbc))) {
        private enum enumMixinStr_OBJ_camellia_256_cbc = `enum OBJ_camellia_256_cbc = 1L , 2L , 392L , 200011L , 61L , 1L , 1L , 1L , 4L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_camellia_256_cbc); }))) {
            mixin(enumMixinStr_OBJ_camellia_256_cbc);
        }
    }




    static if(!is(typeof(SN_id_camellia128_wrap))) {
        private enum enumMixinStr_SN_id_camellia128_wrap = `enum SN_id_camellia128_wrap = "id-camellia128-wrap";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_camellia128_wrap); }))) {
            mixin(enumMixinStr_SN_id_camellia128_wrap);
        }
    }




    static if(!is(typeof(NID_id_camellia128_wrap))) {
        private enum enumMixinStr_NID_id_camellia128_wrap = `enum NID_id_camellia128_wrap = 907;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_camellia128_wrap); }))) {
            mixin(enumMixinStr_NID_id_camellia128_wrap);
        }
    }




    static if(!is(typeof(OBJ_id_camellia128_wrap))) {
        private enum enumMixinStr_OBJ_id_camellia128_wrap = `enum OBJ_id_camellia128_wrap = 1L , 2L , 392L , 200011L , 61L , 1L , 1L , 3L , 2L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_camellia128_wrap); }))) {
            mixin(enumMixinStr_OBJ_id_camellia128_wrap);
        }
    }




    static if(!is(typeof(SN_id_camellia192_wrap))) {
        private enum enumMixinStr_SN_id_camellia192_wrap = `enum SN_id_camellia192_wrap = "id-camellia192-wrap";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_camellia192_wrap); }))) {
            mixin(enumMixinStr_SN_id_camellia192_wrap);
        }
    }




    static if(!is(typeof(NID_id_camellia192_wrap))) {
        private enum enumMixinStr_NID_id_camellia192_wrap = `enum NID_id_camellia192_wrap = 908;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_camellia192_wrap); }))) {
            mixin(enumMixinStr_NID_id_camellia192_wrap);
        }
    }




    static if(!is(typeof(OBJ_id_camellia192_wrap))) {
        private enum enumMixinStr_OBJ_id_camellia192_wrap = `enum OBJ_id_camellia192_wrap = 1L , 2L , 392L , 200011L , 61L , 1L , 1L , 3L , 3L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_camellia192_wrap); }))) {
            mixin(enumMixinStr_OBJ_id_camellia192_wrap);
        }
    }




    static if(!is(typeof(SN_id_camellia256_wrap))) {
        private enum enumMixinStr_SN_id_camellia256_wrap = `enum SN_id_camellia256_wrap = "id-camellia256-wrap";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_camellia256_wrap); }))) {
            mixin(enumMixinStr_SN_id_camellia256_wrap);
        }
    }




    static if(!is(typeof(NID_id_camellia256_wrap))) {
        private enum enumMixinStr_NID_id_camellia256_wrap = `enum NID_id_camellia256_wrap = 909;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_camellia256_wrap); }))) {
            mixin(enumMixinStr_NID_id_camellia256_wrap);
        }
    }




    static if(!is(typeof(OBJ_id_camellia256_wrap))) {
        private enum enumMixinStr_OBJ_id_camellia256_wrap = `enum OBJ_id_camellia256_wrap = 1L , 2L , 392L , 200011L , 61L , 1L , 1L , 3L , 4L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_camellia256_wrap); }))) {
            mixin(enumMixinStr_OBJ_id_camellia256_wrap);
        }
    }




    static if(!is(typeof(OBJ_ntt_ds))) {
        private enum enumMixinStr_OBJ_ntt_ds = `enum OBJ_ntt_ds = 0L , 3L , 4401L , 5L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_ntt_ds); }))) {
            mixin(enumMixinStr_OBJ_ntt_ds);
        }
    }




    static if(!is(typeof(OBJ_camellia))) {
        private enum enumMixinStr_OBJ_camellia = `enum OBJ_camellia = 0L , 3L , 4401L , 5L , 3L , 1L , 9L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_camellia); }))) {
            mixin(enumMixinStr_OBJ_camellia);
        }
    }




    static if(!is(typeof(SN_camellia_128_ecb))) {
        private enum enumMixinStr_SN_camellia_128_ecb = `enum SN_camellia_128_ecb = "CAMELLIA-128-ECB";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_camellia_128_ecb); }))) {
            mixin(enumMixinStr_SN_camellia_128_ecb);
        }
    }




    static if(!is(typeof(LN_camellia_128_ecb))) {
        private enum enumMixinStr_LN_camellia_128_ecb = `enum LN_camellia_128_ecb = "camellia-128-ecb";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_camellia_128_ecb); }))) {
            mixin(enumMixinStr_LN_camellia_128_ecb);
        }
    }




    static if(!is(typeof(NID_camellia_128_ecb))) {
        private enum enumMixinStr_NID_camellia_128_ecb = `enum NID_camellia_128_ecb = 754;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_camellia_128_ecb); }))) {
            mixin(enumMixinStr_NID_camellia_128_ecb);
        }
    }




    static if(!is(typeof(OBJ_camellia_128_ecb))) {
        private enum enumMixinStr_OBJ_camellia_128_ecb = `enum OBJ_camellia_128_ecb = 0L , 3L , 4401L , 5L , 3L , 1L , 9L , 1L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_camellia_128_ecb); }))) {
            mixin(enumMixinStr_OBJ_camellia_128_ecb);
        }
    }




    static if(!is(typeof(SN_camellia_128_ofb128))) {
        private enum enumMixinStr_SN_camellia_128_ofb128 = `enum SN_camellia_128_ofb128 = "CAMELLIA-128-OFB";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_camellia_128_ofb128); }))) {
            mixin(enumMixinStr_SN_camellia_128_ofb128);
        }
    }




    static if(!is(typeof(LN_camellia_128_ofb128))) {
        private enum enumMixinStr_LN_camellia_128_ofb128 = `enum LN_camellia_128_ofb128 = "camellia-128-ofb";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_camellia_128_ofb128); }))) {
            mixin(enumMixinStr_LN_camellia_128_ofb128);
        }
    }




    static if(!is(typeof(NID_camellia_128_ofb128))) {
        private enum enumMixinStr_NID_camellia_128_ofb128 = `enum NID_camellia_128_ofb128 = 766;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_camellia_128_ofb128); }))) {
            mixin(enumMixinStr_NID_camellia_128_ofb128);
        }
    }




    static if(!is(typeof(OBJ_camellia_128_ofb128))) {
        private enum enumMixinStr_OBJ_camellia_128_ofb128 = `enum OBJ_camellia_128_ofb128 = 0L , 3L , 4401L , 5L , 3L , 1L , 9L , 3L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_camellia_128_ofb128); }))) {
            mixin(enumMixinStr_OBJ_camellia_128_ofb128);
        }
    }




    static if(!is(typeof(SN_camellia_128_cfb128))) {
        private enum enumMixinStr_SN_camellia_128_cfb128 = `enum SN_camellia_128_cfb128 = "CAMELLIA-128-CFB";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_camellia_128_cfb128); }))) {
            mixin(enumMixinStr_SN_camellia_128_cfb128);
        }
    }




    static if(!is(typeof(LN_camellia_128_cfb128))) {
        private enum enumMixinStr_LN_camellia_128_cfb128 = `enum LN_camellia_128_cfb128 = "camellia-128-cfb";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_camellia_128_cfb128); }))) {
            mixin(enumMixinStr_LN_camellia_128_cfb128);
        }
    }




    static if(!is(typeof(NID_camellia_128_cfb128))) {
        private enum enumMixinStr_NID_camellia_128_cfb128 = `enum NID_camellia_128_cfb128 = 757;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_camellia_128_cfb128); }))) {
            mixin(enumMixinStr_NID_camellia_128_cfb128);
        }
    }




    static if(!is(typeof(OBJ_camellia_128_cfb128))) {
        private enum enumMixinStr_OBJ_camellia_128_cfb128 = `enum OBJ_camellia_128_cfb128 = 0L , 3L , 4401L , 5L , 3L , 1L , 9L , 4L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_camellia_128_cfb128); }))) {
            mixin(enumMixinStr_OBJ_camellia_128_cfb128);
        }
    }




    static if(!is(typeof(SN_camellia_128_gcm))) {
        private enum enumMixinStr_SN_camellia_128_gcm = `enum SN_camellia_128_gcm = "CAMELLIA-128-GCM";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_camellia_128_gcm); }))) {
            mixin(enumMixinStr_SN_camellia_128_gcm);
        }
    }




    static if(!is(typeof(LN_camellia_128_gcm))) {
        private enum enumMixinStr_LN_camellia_128_gcm = `enum LN_camellia_128_gcm = "camellia-128-gcm";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_camellia_128_gcm); }))) {
            mixin(enumMixinStr_LN_camellia_128_gcm);
        }
    }




    static if(!is(typeof(NID_camellia_128_gcm))) {
        private enum enumMixinStr_NID_camellia_128_gcm = `enum NID_camellia_128_gcm = 961;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_camellia_128_gcm); }))) {
            mixin(enumMixinStr_NID_camellia_128_gcm);
        }
    }




    static if(!is(typeof(OBJ_camellia_128_gcm))) {
        private enum enumMixinStr_OBJ_camellia_128_gcm = `enum OBJ_camellia_128_gcm = 0L , 3L , 4401L , 5L , 3L , 1L , 9L , 6L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_camellia_128_gcm); }))) {
            mixin(enumMixinStr_OBJ_camellia_128_gcm);
        }
    }




    static if(!is(typeof(SN_camellia_128_ccm))) {
        private enum enumMixinStr_SN_camellia_128_ccm = `enum SN_camellia_128_ccm = "CAMELLIA-128-CCM";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_camellia_128_ccm); }))) {
            mixin(enumMixinStr_SN_camellia_128_ccm);
        }
    }




    static if(!is(typeof(LN_camellia_128_ccm))) {
        private enum enumMixinStr_LN_camellia_128_ccm = `enum LN_camellia_128_ccm = "camellia-128-ccm";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_camellia_128_ccm); }))) {
            mixin(enumMixinStr_LN_camellia_128_ccm);
        }
    }




    static if(!is(typeof(NID_camellia_128_ccm))) {
        private enum enumMixinStr_NID_camellia_128_ccm = `enum NID_camellia_128_ccm = 962;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_camellia_128_ccm); }))) {
            mixin(enumMixinStr_NID_camellia_128_ccm);
        }
    }




    static if(!is(typeof(OBJ_camellia_128_ccm))) {
        private enum enumMixinStr_OBJ_camellia_128_ccm = `enum OBJ_camellia_128_ccm = 0L , 3L , 4401L , 5L , 3L , 1L , 9L , 7L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_camellia_128_ccm); }))) {
            mixin(enumMixinStr_OBJ_camellia_128_ccm);
        }
    }




    static if(!is(typeof(SN_camellia_128_ctr))) {
        private enum enumMixinStr_SN_camellia_128_ctr = `enum SN_camellia_128_ctr = "CAMELLIA-128-CTR";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_camellia_128_ctr); }))) {
            mixin(enumMixinStr_SN_camellia_128_ctr);
        }
    }




    static if(!is(typeof(LN_camellia_128_ctr))) {
        private enum enumMixinStr_LN_camellia_128_ctr = `enum LN_camellia_128_ctr = "camellia-128-ctr";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_camellia_128_ctr); }))) {
            mixin(enumMixinStr_LN_camellia_128_ctr);
        }
    }




    static if(!is(typeof(NID_camellia_128_ctr))) {
        private enum enumMixinStr_NID_camellia_128_ctr = `enum NID_camellia_128_ctr = 963;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_camellia_128_ctr); }))) {
            mixin(enumMixinStr_NID_camellia_128_ctr);
        }
    }




    static if(!is(typeof(OBJ_camellia_128_ctr))) {
        private enum enumMixinStr_OBJ_camellia_128_ctr = `enum OBJ_camellia_128_ctr = 0L , 3L , 4401L , 5L , 3L , 1L , 9L , 9L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_camellia_128_ctr); }))) {
            mixin(enumMixinStr_OBJ_camellia_128_ctr);
        }
    }




    static if(!is(typeof(SN_camellia_128_cmac))) {
        private enum enumMixinStr_SN_camellia_128_cmac = `enum SN_camellia_128_cmac = "CAMELLIA-128-CMAC";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_camellia_128_cmac); }))) {
            mixin(enumMixinStr_SN_camellia_128_cmac);
        }
    }




    static if(!is(typeof(LN_camellia_128_cmac))) {
        private enum enumMixinStr_LN_camellia_128_cmac = `enum LN_camellia_128_cmac = "camellia-128-cmac";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_camellia_128_cmac); }))) {
            mixin(enumMixinStr_LN_camellia_128_cmac);
        }
    }




    static if(!is(typeof(NID_camellia_128_cmac))) {
        private enum enumMixinStr_NID_camellia_128_cmac = `enum NID_camellia_128_cmac = 964;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_camellia_128_cmac); }))) {
            mixin(enumMixinStr_NID_camellia_128_cmac);
        }
    }




    static if(!is(typeof(OBJ_camellia_128_cmac))) {
        private enum enumMixinStr_OBJ_camellia_128_cmac = `enum OBJ_camellia_128_cmac = 0L , 3L , 4401L , 5L , 3L , 1L , 9L , 10L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_camellia_128_cmac); }))) {
            mixin(enumMixinStr_OBJ_camellia_128_cmac);
        }
    }




    static if(!is(typeof(SN_camellia_192_ecb))) {
        private enum enumMixinStr_SN_camellia_192_ecb = `enum SN_camellia_192_ecb = "CAMELLIA-192-ECB";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_camellia_192_ecb); }))) {
            mixin(enumMixinStr_SN_camellia_192_ecb);
        }
    }




    static if(!is(typeof(LN_camellia_192_ecb))) {
        private enum enumMixinStr_LN_camellia_192_ecb = `enum LN_camellia_192_ecb = "camellia-192-ecb";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_camellia_192_ecb); }))) {
            mixin(enumMixinStr_LN_camellia_192_ecb);
        }
    }




    static if(!is(typeof(NID_camellia_192_ecb))) {
        private enum enumMixinStr_NID_camellia_192_ecb = `enum NID_camellia_192_ecb = 755;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_camellia_192_ecb); }))) {
            mixin(enumMixinStr_NID_camellia_192_ecb);
        }
    }




    static if(!is(typeof(OBJ_camellia_192_ecb))) {
        private enum enumMixinStr_OBJ_camellia_192_ecb = `enum OBJ_camellia_192_ecb = 0L , 3L , 4401L , 5L , 3L , 1L , 9L , 21L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_camellia_192_ecb); }))) {
            mixin(enumMixinStr_OBJ_camellia_192_ecb);
        }
    }




    static if(!is(typeof(SN_camellia_192_ofb128))) {
        private enum enumMixinStr_SN_camellia_192_ofb128 = `enum SN_camellia_192_ofb128 = "CAMELLIA-192-OFB";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_camellia_192_ofb128); }))) {
            mixin(enumMixinStr_SN_camellia_192_ofb128);
        }
    }




    static if(!is(typeof(LN_camellia_192_ofb128))) {
        private enum enumMixinStr_LN_camellia_192_ofb128 = `enum LN_camellia_192_ofb128 = "camellia-192-ofb";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_camellia_192_ofb128); }))) {
            mixin(enumMixinStr_LN_camellia_192_ofb128);
        }
    }




    static if(!is(typeof(NID_camellia_192_ofb128))) {
        private enum enumMixinStr_NID_camellia_192_ofb128 = `enum NID_camellia_192_ofb128 = 767;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_camellia_192_ofb128); }))) {
            mixin(enumMixinStr_NID_camellia_192_ofb128);
        }
    }




    static if(!is(typeof(OBJ_camellia_192_ofb128))) {
        private enum enumMixinStr_OBJ_camellia_192_ofb128 = `enum OBJ_camellia_192_ofb128 = 0L , 3L , 4401L , 5L , 3L , 1L , 9L , 23L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_camellia_192_ofb128); }))) {
            mixin(enumMixinStr_OBJ_camellia_192_ofb128);
        }
    }




    static if(!is(typeof(SN_camellia_192_cfb128))) {
        private enum enumMixinStr_SN_camellia_192_cfb128 = `enum SN_camellia_192_cfb128 = "CAMELLIA-192-CFB";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_camellia_192_cfb128); }))) {
            mixin(enumMixinStr_SN_camellia_192_cfb128);
        }
    }




    static if(!is(typeof(LN_camellia_192_cfb128))) {
        private enum enumMixinStr_LN_camellia_192_cfb128 = `enum LN_camellia_192_cfb128 = "camellia-192-cfb";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_camellia_192_cfb128); }))) {
            mixin(enumMixinStr_LN_camellia_192_cfb128);
        }
    }




    static if(!is(typeof(NID_camellia_192_cfb128))) {
        private enum enumMixinStr_NID_camellia_192_cfb128 = `enum NID_camellia_192_cfb128 = 758;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_camellia_192_cfb128); }))) {
            mixin(enumMixinStr_NID_camellia_192_cfb128);
        }
    }




    static if(!is(typeof(OBJ_camellia_192_cfb128))) {
        private enum enumMixinStr_OBJ_camellia_192_cfb128 = `enum OBJ_camellia_192_cfb128 = 0L , 3L , 4401L , 5L , 3L , 1L , 9L , 24L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_camellia_192_cfb128); }))) {
            mixin(enumMixinStr_OBJ_camellia_192_cfb128);
        }
    }




    static if(!is(typeof(SN_camellia_192_gcm))) {
        private enum enumMixinStr_SN_camellia_192_gcm = `enum SN_camellia_192_gcm = "CAMELLIA-192-GCM";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_camellia_192_gcm); }))) {
            mixin(enumMixinStr_SN_camellia_192_gcm);
        }
    }




    static if(!is(typeof(LN_camellia_192_gcm))) {
        private enum enumMixinStr_LN_camellia_192_gcm = `enum LN_camellia_192_gcm = "camellia-192-gcm";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_camellia_192_gcm); }))) {
            mixin(enumMixinStr_LN_camellia_192_gcm);
        }
    }




    static if(!is(typeof(NID_camellia_192_gcm))) {
        private enum enumMixinStr_NID_camellia_192_gcm = `enum NID_camellia_192_gcm = 965;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_camellia_192_gcm); }))) {
            mixin(enumMixinStr_NID_camellia_192_gcm);
        }
    }




    static if(!is(typeof(OBJ_camellia_192_gcm))) {
        private enum enumMixinStr_OBJ_camellia_192_gcm = `enum OBJ_camellia_192_gcm = 0L , 3L , 4401L , 5L , 3L , 1L , 9L , 26L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_camellia_192_gcm); }))) {
            mixin(enumMixinStr_OBJ_camellia_192_gcm);
        }
    }




    static if(!is(typeof(SN_camellia_192_ccm))) {
        private enum enumMixinStr_SN_camellia_192_ccm = `enum SN_camellia_192_ccm = "CAMELLIA-192-CCM";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_camellia_192_ccm); }))) {
            mixin(enumMixinStr_SN_camellia_192_ccm);
        }
    }




    static if(!is(typeof(LN_camellia_192_ccm))) {
        private enum enumMixinStr_LN_camellia_192_ccm = `enum LN_camellia_192_ccm = "camellia-192-ccm";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_camellia_192_ccm); }))) {
            mixin(enumMixinStr_LN_camellia_192_ccm);
        }
    }




    static if(!is(typeof(NID_camellia_192_ccm))) {
        private enum enumMixinStr_NID_camellia_192_ccm = `enum NID_camellia_192_ccm = 966;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_camellia_192_ccm); }))) {
            mixin(enumMixinStr_NID_camellia_192_ccm);
        }
    }




    static if(!is(typeof(OBJ_camellia_192_ccm))) {
        private enum enumMixinStr_OBJ_camellia_192_ccm = `enum OBJ_camellia_192_ccm = 0L , 3L , 4401L , 5L , 3L , 1L , 9L , 27L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_camellia_192_ccm); }))) {
            mixin(enumMixinStr_OBJ_camellia_192_ccm);
        }
    }




    static if(!is(typeof(SN_camellia_192_ctr))) {
        private enum enumMixinStr_SN_camellia_192_ctr = `enum SN_camellia_192_ctr = "CAMELLIA-192-CTR";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_camellia_192_ctr); }))) {
            mixin(enumMixinStr_SN_camellia_192_ctr);
        }
    }




    static if(!is(typeof(LN_camellia_192_ctr))) {
        private enum enumMixinStr_LN_camellia_192_ctr = `enum LN_camellia_192_ctr = "camellia-192-ctr";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_camellia_192_ctr); }))) {
            mixin(enumMixinStr_LN_camellia_192_ctr);
        }
    }




    static if(!is(typeof(NID_camellia_192_ctr))) {
        private enum enumMixinStr_NID_camellia_192_ctr = `enum NID_camellia_192_ctr = 967;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_camellia_192_ctr); }))) {
            mixin(enumMixinStr_NID_camellia_192_ctr);
        }
    }




    static if(!is(typeof(OBJ_camellia_192_ctr))) {
        private enum enumMixinStr_OBJ_camellia_192_ctr = `enum OBJ_camellia_192_ctr = 0L , 3L , 4401L , 5L , 3L , 1L , 9L , 29L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_camellia_192_ctr); }))) {
            mixin(enumMixinStr_OBJ_camellia_192_ctr);
        }
    }




    static if(!is(typeof(SN_camellia_192_cmac))) {
        private enum enumMixinStr_SN_camellia_192_cmac = `enum SN_camellia_192_cmac = "CAMELLIA-192-CMAC";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_camellia_192_cmac); }))) {
            mixin(enumMixinStr_SN_camellia_192_cmac);
        }
    }




    static if(!is(typeof(LN_camellia_192_cmac))) {
        private enum enumMixinStr_LN_camellia_192_cmac = `enum LN_camellia_192_cmac = "camellia-192-cmac";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_camellia_192_cmac); }))) {
            mixin(enumMixinStr_LN_camellia_192_cmac);
        }
    }




    static if(!is(typeof(NID_camellia_192_cmac))) {
        private enum enumMixinStr_NID_camellia_192_cmac = `enum NID_camellia_192_cmac = 968;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_camellia_192_cmac); }))) {
            mixin(enumMixinStr_NID_camellia_192_cmac);
        }
    }




    static if(!is(typeof(OBJ_camellia_192_cmac))) {
        private enum enumMixinStr_OBJ_camellia_192_cmac = `enum OBJ_camellia_192_cmac = 0L , 3L , 4401L , 5L , 3L , 1L , 9L , 30L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_camellia_192_cmac); }))) {
            mixin(enumMixinStr_OBJ_camellia_192_cmac);
        }
    }




    static if(!is(typeof(SN_camellia_256_ecb))) {
        private enum enumMixinStr_SN_camellia_256_ecb = `enum SN_camellia_256_ecb = "CAMELLIA-256-ECB";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_camellia_256_ecb); }))) {
            mixin(enumMixinStr_SN_camellia_256_ecb);
        }
    }




    static if(!is(typeof(LN_camellia_256_ecb))) {
        private enum enumMixinStr_LN_camellia_256_ecb = `enum LN_camellia_256_ecb = "camellia-256-ecb";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_camellia_256_ecb); }))) {
            mixin(enumMixinStr_LN_camellia_256_ecb);
        }
    }




    static if(!is(typeof(NID_camellia_256_ecb))) {
        private enum enumMixinStr_NID_camellia_256_ecb = `enum NID_camellia_256_ecb = 756;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_camellia_256_ecb); }))) {
            mixin(enumMixinStr_NID_camellia_256_ecb);
        }
    }




    static if(!is(typeof(OBJ_camellia_256_ecb))) {
        private enum enumMixinStr_OBJ_camellia_256_ecb = `enum OBJ_camellia_256_ecb = 0L , 3L , 4401L , 5L , 3L , 1L , 9L , 41L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_camellia_256_ecb); }))) {
            mixin(enumMixinStr_OBJ_camellia_256_ecb);
        }
    }




    static if(!is(typeof(SN_camellia_256_ofb128))) {
        private enum enumMixinStr_SN_camellia_256_ofb128 = `enum SN_camellia_256_ofb128 = "CAMELLIA-256-OFB";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_camellia_256_ofb128); }))) {
            mixin(enumMixinStr_SN_camellia_256_ofb128);
        }
    }




    static if(!is(typeof(LN_camellia_256_ofb128))) {
        private enum enumMixinStr_LN_camellia_256_ofb128 = `enum LN_camellia_256_ofb128 = "camellia-256-ofb";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_camellia_256_ofb128); }))) {
            mixin(enumMixinStr_LN_camellia_256_ofb128);
        }
    }




    static if(!is(typeof(NID_camellia_256_ofb128))) {
        private enum enumMixinStr_NID_camellia_256_ofb128 = `enum NID_camellia_256_ofb128 = 768;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_camellia_256_ofb128); }))) {
            mixin(enumMixinStr_NID_camellia_256_ofb128);
        }
    }




    static if(!is(typeof(OBJ_camellia_256_ofb128))) {
        private enum enumMixinStr_OBJ_camellia_256_ofb128 = `enum OBJ_camellia_256_ofb128 = 0L , 3L , 4401L , 5L , 3L , 1L , 9L , 43L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_camellia_256_ofb128); }))) {
            mixin(enumMixinStr_OBJ_camellia_256_ofb128);
        }
    }




    static if(!is(typeof(SN_camellia_256_cfb128))) {
        private enum enumMixinStr_SN_camellia_256_cfb128 = `enum SN_camellia_256_cfb128 = "CAMELLIA-256-CFB";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_camellia_256_cfb128); }))) {
            mixin(enumMixinStr_SN_camellia_256_cfb128);
        }
    }




    static if(!is(typeof(LN_camellia_256_cfb128))) {
        private enum enumMixinStr_LN_camellia_256_cfb128 = `enum LN_camellia_256_cfb128 = "camellia-256-cfb";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_camellia_256_cfb128); }))) {
            mixin(enumMixinStr_LN_camellia_256_cfb128);
        }
    }




    static if(!is(typeof(NID_camellia_256_cfb128))) {
        private enum enumMixinStr_NID_camellia_256_cfb128 = `enum NID_camellia_256_cfb128 = 759;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_camellia_256_cfb128); }))) {
            mixin(enumMixinStr_NID_camellia_256_cfb128);
        }
    }




    static if(!is(typeof(OBJ_camellia_256_cfb128))) {
        private enum enumMixinStr_OBJ_camellia_256_cfb128 = `enum OBJ_camellia_256_cfb128 = 0L , 3L , 4401L , 5L , 3L , 1L , 9L , 44L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_camellia_256_cfb128); }))) {
            mixin(enumMixinStr_OBJ_camellia_256_cfb128);
        }
    }




    static if(!is(typeof(SN_camellia_256_gcm))) {
        private enum enumMixinStr_SN_camellia_256_gcm = `enum SN_camellia_256_gcm = "CAMELLIA-256-GCM";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_camellia_256_gcm); }))) {
            mixin(enumMixinStr_SN_camellia_256_gcm);
        }
    }




    static if(!is(typeof(LN_camellia_256_gcm))) {
        private enum enumMixinStr_LN_camellia_256_gcm = `enum LN_camellia_256_gcm = "camellia-256-gcm";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_camellia_256_gcm); }))) {
            mixin(enumMixinStr_LN_camellia_256_gcm);
        }
    }




    static if(!is(typeof(NID_camellia_256_gcm))) {
        private enum enumMixinStr_NID_camellia_256_gcm = `enum NID_camellia_256_gcm = 969;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_camellia_256_gcm); }))) {
            mixin(enumMixinStr_NID_camellia_256_gcm);
        }
    }




    static if(!is(typeof(OBJ_camellia_256_gcm))) {
        private enum enumMixinStr_OBJ_camellia_256_gcm = `enum OBJ_camellia_256_gcm = 0L , 3L , 4401L , 5L , 3L , 1L , 9L , 46L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_camellia_256_gcm); }))) {
            mixin(enumMixinStr_OBJ_camellia_256_gcm);
        }
    }




    static if(!is(typeof(SN_camellia_256_ccm))) {
        private enum enumMixinStr_SN_camellia_256_ccm = `enum SN_camellia_256_ccm = "CAMELLIA-256-CCM";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_camellia_256_ccm); }))) {
            mixin(enumMixinStr_SN_camellia_256_ccm);
        }
    }




    static if(!is(typeof(LN_camellia_256_ccm))) {
        private enum enumMixinStr_LN_camellia_256_ccm = `enum LN_camellia_256_ccm = "camellia-256-ccm";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_camellia_256_ccm); }))) {
            mixin(enumMixinStr_LN_camellia_256_ccm);
        }
    }




    static if(!is(typeof(NID_camellia_256_ccm))) {
        private enum enumMixinStr_NID_camellia_256_ccm = `enum NID_camellia_256_ccm = 970;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_camellia_256_ccm); }))) {
            mixin(enumMixinStr_NID_camellia_256_ccm);
        }
    }




    static if(!is(typeof(OBJ_camellia_256_ccm))) {
        private enum enumMixinStr_OBJ_camellia_256_ccm = `enum OBJ_camellia_256_ccm = 0L , 3L , 4401L , 5L , 3L , 1L , 9L , 47L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_camellia_256_ccm); }))) {
            mixin(enumMixinStr_OBJ_camellia_256_ccm);
        }
    }




    static if(!is(typeof(SN_camellia_256_ctr))) {
        private enum enumMixinStr_SN_camellia_256_ctr = `enum SN_camellia_256_ctr = "CAMELLIA-256-CTR";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_camellia_256_ctr); }))) {
            mixin(enumMixinStr_SN_camellia_256_ctr);
        }
    }




    static if(!is(typeof(LN_camellia_256_ctr))) {
        private enum enumMixinStr_LN_camellia_256_ctr = `enum LN_camellia_256_ctr = "camellia-256-ctr";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_camellia_256_ctr); }))) {
            mixin(enumMixinStr_LN_camellia_256_ctr);
        }
    }




    static if(!is(typeof(NID_camellia_256_ctr))) {
        private enum enumMixinStr_NID_camellia_256_ctr = `enum NID_camellia_256_ctr = 971;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_camellia_256_ctr); }))) {
            mixin(enumMixinStr_NID_camellia_256_ctr);
        }
    }




    static if(!is(typeof(OBJ_camellia_256_ctr))) {
        private enum enumMixinStr_OBJ_camellia_256_ctr = `enum OBJ_camellia_256_ctr = 0L , 3L , 4401L , 5L , 3L , 1L , 9L , 49L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_camellia_256_ctr); }))) {
            mixin(enumMixinStr_OBJ_camellia_256_ctr);
        }
    }




    static if(!is(typeof(SN_camellia_256_cmac))) {
        private enum enumMixinStr_SN_camellia_256_cmac = `enum SN_camellia_256_cmac = "CAMELLIA-256-CMAC";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_camellia_256_cmac); }))) {
            mixin(enumMixinStr_SN_camellia_256_cmac);
        }
    }




    static if(!is(typeof(LN_camellia_256_cmac))) {
        private enum enumMixinStr_LN_camellia_256_cmac = `enum LN_camellia_256_cmac = "camellia-256-cmac";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_camellia_256_cmac); }))) {
            mixin(enumMixinStr_LN_camellia_256_cmac);
        }
    }




    static if(!is(typeof(NID_camellia_256_cmac))) {
        private enum enumMixinStr_NID_camellia_256_cmac = `enum NID_camellia_256_cmac = 972;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_camellia_256_cmac); }))) {
            mixin(enumMixinStr_NID_camellia_256_cmac);
        }
    }




    static if(!is(typeof(OBJ_camellia_256_cmac))) {
        private enum enumMixinStr_OBJ_camellia_256_cmac = `enum OBJ_camellia_256_cmac = 0L , 3L , 4401L , 5L , 3L , 1L , 9L , 50L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_camellia_256_cmac); }))) {
            mixin(enumMixinStr_OBJ_camellia_256_cmac);
        }
    }




    static if(!is(typeof(SN_camellia_128_cfb1))) {
        private enum enumMixinStr_SN_camellia_128_cfb1 = `enum SN_camellia_128_cfb1 = "CAMELLIA-128-CFB1";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_camellia_128_cfb1); }))) {
            mixin(enumMixinStr_SN_camellia_128_cfb1);
        }
    }




    static if(!is(typeof(LN_camellia_128_cfb1))) {
        private enum enumMixinStr_LN_camellia_128_cfb1 = `enum LN_camellia_128_cfb1 = "camellia-128-cfb1";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_camellia_128_cfb1); }))) {
            mixin(enumMixinStr_LN_camellia_128_cfb1);
        }
    }




    static if(!is(typeof(NID_camellia_128_cfb1))) {
        private enum enumMixinStr_NID_camellia_128_cfb1 = `enum NID_camellia_128_cfb1 = 760;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_camellia_128_cfb1); }))) {
            mixin(enumMixinStr_NID_camellia_128_cfb1);
        }
    }




    static if(!is(typeof(SN_camellia_192_cfb1))) {
        private enum enumMixinStr_SN_camellia_192_cfb1 = `enum SN_camellia_192_cfb1 = "CAMELLIA-192-CFB1";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_camellia_192_cfb1); }))) {
            mixin(enumMixinStr_SN_camellia_192_cfb1);
        }
    }




    static if(!is(typeof(LN_camellia_192_cfb1))) {
        private enum enumMixinStr_LN_camellia_192_cfb1 = `enum LN_camellia_192_cfb1 = "camellia-192-cfb1";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_camellia_192_cfb1); }))) {
            mixin(enumMixinStr_LN_camellia_192_cfb1);
        }
    }




    static if(!is(typeof(NID_camellia_192_cfb1))) {
        private enum enumMixinStr_NID_camellia_192_cfb1 = `enum NID_camellia_192_cfb1 = 761;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_camellia_192_cfb1); }))) {
            mixin(enumMixinStr_NID_camellia_192_cfb1);
        }
    }




    static if(!is(typeof(SN_camellia_256_cfb1))) {
        private enum enumMixinStr_SN_camellia_256_cfb1 = `enum SN_camellia_256_cfb1 = "CAMELLIA-256-CFB1";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_camellia_256_cfb1); }))) {
            mixin(enumMixinStr_SN_camellia_256_cfb1);
        }
    }




    static if(!is(typeof(LN_camellia_256_cfb1))) {
        private enum enumMixinStr_LN_camellia_256_cfb1 = `enum LN_camellia_256_cfb1 = "camellia-256-cfb1";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_camellia_256_cfb1); }))) {
            mixin(enumMixinStr_LN_camellia_256_cfb1);
        }
    }




    static if(!is(typeof(NID_camellia_256_cfb1))) {
        private enum enumMixinStr_NID_camellia_256_cfb1 = `enum NID_camellia_256_cfb1 = 762;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_camellia_256_cfb1); }))) {
            mixin(enumMixinStr_NID_camellia_256_cfb1);
        }
    }




    static if(!is(typeof(SN_camellia_128_cfb8))) {
        private enum enumMixinStr_SN_camellia_128_cfb8 = `enum SN_camellia_128_cfb8 = "CAMELLIA-128-CFB8";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_camellia_128_cfb8); }))) {
            mixin(enumMixinStr_SN_camellia_128_cfb8);
        }
    }




    static if(!is(typeof(LN_camellia_128_cfb8))) {
        private enum enumMixinStr_LN_camellia_128_cfb8 = `enum LN_camellia_128_cfb8 = "camellia-128-cfb8";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_camellia_128_cfb8); }))) {
            mixin(enumMixinStr_LN_camellia_128_cfb8);
        }
    }




    static if(!is(typeof(NID_camellia_128_cfb8))) {
        private enum enumMixinStr_NID_camellia_128_cfb8 = `enum NID_camellia_128_cfb8 = 763;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_camellia_128_cfb8); }))) {
            mixin(enumMixinStr_NID_camellia_128_cfb8);
        }
    }




    static if(!is(typeof(SN_camellia_192_cfb8))) {
        private enum enumMixinStr_SN_camellia_192_cfb8 = `enum SN_camellia_192_cfb8 = "CAMELLIA-192-CFB8";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_camellia_192_cfb8); }))) {
            mixin(enumMixinStr_SN_camellia_192_cfb8);
        }
    }




    static if(!is(typeof(LN_camellia_192_cfb8))) {
        private enum enumMixinStr_LN_camellia_192_cfb8 = `enum LN_camellia_192_cfb8 = "camellia-192-cfb8";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_camellia_192_cfb8); }))) {
            mixin(enumMixinStr_LN_camellia_192_cfb8);
        }
    }




    static if(!is(typeof(NID_camellia_192_cfb8))) {
        private enum enumMixinStr_NID_camellia_192_cfb8 = `enum NID_camellia_192_cfb8 = 764;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_camellia_192_cfb8); }))) {
            mixin(enumMixinStr_NID_camellia_192_cfb8);
        }
    }




    static if(!is(typeof(SN_camellia_256_cfb8))) {
        private enum enumMixinStr_SN_camellia_256_cfb8 = `enum SN_camellia_256_cfb8 = "CAMELLIA-256-CFB8";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_camellia_256_cfb8); }))) {
            mixin(enumMixinStr_SN_camellia_256_cfb8);
        }
    }




    static if(!is(typeof(LN_camellia_256_cfb8))) {
        private enum enumMixinStr_LN_camellia_256_cfb8 = `enum LN_camellia_256_cfb8 = "camellia-256-cfb8";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_camellia_256_cfb8); }))) {
            mixin(enumMixinStr_LN_camellia_256_cfb8);
        }
    }




    static if(!is(typeof(NID_camellia_256_cfb8))) {
        private enum enumMixinStr_NID_camellia_256_cfb8 = `enum NID_camellia_256_cfb8 = 765;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_camellia_256_cfb8); }))) {
            mixin(enumMixinStr_NID_camellia_256_cfb8);
        }
    }




    static if(!is(typeof(OBJ_aria))) {
        private enum enumMixinStr_OBJ_aria = `enum OBJ_aria = 1L , 2L , 410L , 200046L , 1L , 1L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_aria); }))) {
            mixin(enumMixinStr_OBJ_aria);
        }
    }




    static if(!is(typeof(SN_aria_128_ecb))) {
        private enum enumMixinStr_SN_aria_128_ecb = `enum SN_aria_128_ecb = "ARIA-128-ECB";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_aria_128_ecb); }))) {
            mixin(enumMixinStr_SN_aria_128_ecb);
        }
    }




    static if(!is(typeof(LN_aria_128_ecb))) {
        private enum enumMixinStr_LN_aria_128_ecb = `enum LN_aria_128_ecb = "aria-128-ecb";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_aria_128_ecb); }))) {
            mixin(enumMixinStr_LN_aria_128_ecb);
        }
    }




    static if(!is(typeof(NID_aria_128_ecb))) {
        private enum enumMixinStr_NID_aria_128_ecb = `enum NID_aria_128_ecb = 1065;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_aria_128_ecb); }))) {
            mixin(enumMixinStr_NID_aria_128_ecb);
        }
    }




    static if(!is(typeof(OBJ_aria_128_ecb))) {
        private enum enumMixinStr_OBJ_aria_128_ecb = `enum OBJ_aria_128_ecb = 1L , 2L , 410L , 200046L , 1L , 1L , 1L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_aria_128_ecb); }))) {
            mixin(enumMixinStr_OBJ_aria_128_ecb);
        }
    }




    static if(!is(typeof(SN_aria_128_cbc))) {
        private enum enumMixinStr_SN_aria_128_cbc = `enum SN_aria_128_cbc = "ARIA-128-CBC";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_aria_128_cbc); }))) {
            mixin(enumMixinStr_SN_aria_128_cbc);
        }
    }




    static if(!is(typeof(LN_aria_128_cbc))) {
        private enum enumMixinStr_LN_aria_128_cbc = `enum LN_aria_128_cbc = "aria-128-cbc";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_aria_128_cbc); }))) {
            mixin(enumMixinStr_LN_aria_128_cbc);
        }
    }




    static if(!is(typeof(NID_aria_128_cbc))) {
        private enum enumMixinStr_NID_aria_128_cbc = `enum NID_aria_128_cbc = 1066;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_aria_128_cbc); }))) {
            mixin(enumMixinStr_NID_aria_128_cbc);
        }
    }




    static if(!is(typeof(OBJ_aria_128_cbc))) {
        private enum enumMixinStr_OBJ_aria_128_cbc = `enum OBJ_aria_128_cbc = 1L , 2L , 410L , 200046L , 1L , 1L , 2L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_aria_128_cbc); }))) {
            mixin(enumMixinStr_OBJ_aria_128_cbc);
        }
    }




    static if(!is(typeof(SN_aria_128_cfb128))) {
        private enum enumMixinStr_SN_aria_128_cfb128 = `enum SN_aria_128_cfb128 = "ARIA-128-CFB";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_aria_128_cfb128); }))) {
            mixin(enumMixinStr_SN_aria_128_cfb128);
        }
    }




    static if(!is(typeof(LN_aria_128_cfb128))) {
        private enum enumMixinStr_LN_aria_128_cfb128 = `enum LN_aria_128_cfb128 = "aria-128-cfb";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_aria_128_cfb128); }))) {
            mixin(enumMixinStr_LN_aria_128_cfb128);
        }
    }




    static if(!is(typeof(NID_aria_128_cfb128))) {
        private enum enumMixinStr_NID_aria_128_cfb128 = `enum NID_aria_128_cfb128 = 1067;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_aria_128_cfb128); }))) {
            mixin(enumMixinStr_NID_aria_128_cfb128);
        }
    }




    static if(!is(typeof(OBJ_aria_128_cfb128))) {
        private enum enumMixinStr_OBJ_aria_128_cfb128 = `enum OBJ_aria_128_cfb128 = 1L , 2L , 410L , 200046L , 1L , 1L , 3L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_aria_128_cfb128); }))) {
            mixin(enumMixinStr_OBJ_aria_128_cfb128);
        }
    }




    static if(!is(typeof(SN_aria_128_ofb128))) {
        private enum enumMixinStr_SN_aria_128_ofb128 = `enum SN_aria_128_ofb128 = "ARIA-128-OFB";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_aria_128_ofb128); }))) {
            mixin(enumMixinStr_SN_aria_128_ofb128);
        }
    }




    static if(!is(typeof(LN_aria_128_ofb128))) {
        private enum enumMixinStr_LN_aria_128_ofb128 = `enum LN_aria_128_ofb128 = "aria-128-ofb";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_aria_128_ofb128); }))) {
            mixin(enumMixinStr_LN_aria_128_ofb128);
        }
    }




    static if(!is(typeof(NID_aria_128_ofb128))) {
        private enum enumMixinStr_NID_aria_128_ofb128 = `enum NID_aria_128_ofb128 = 1068;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_aria_128_ofb128); }))) {
            mixin(enumMixinStr_NID_aria_128_ofb128);
        }
    }




    static if(!is(typeof(OBJ_aria_128_ofb128))) {
        private enum enumMixinStr_OBJ_aria_128_ofb128 = `enum OBJ_aria_128_ofb128 = 1L , 2L , 410L , 200046L , 1L , 1L , 4L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_aria_128_ofb128); }))) {
            mixin(enumMixinStr_OBJ_aria_128_ofb128);
        }
    }




    static if(!is(typeof(SN_aria_128_ctr))) {
        private enum enumMixinStr_SN_aria_128_ctr = `enum SN_aria_128_ctr = "ARIA-128-CTR";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_aria_128_ctr); }))) {
            mixin(enumMixinStr_SN_aria_128_ctr);
        }
    }




    static if(!is(typeof(LN_aria_128_ctr))) {
        private enum enumMixinStr_LN_aria_128_ctr = `enum LN_aria_128_ctr = "aria-128-ctr";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_aria_128_ctr); }))) {
            mixin(enumMixinStr_LN_aria_128_ctr);
        }
    }




    static if(!is(typeof(NID_aria_128_ctr))) {
        private enum enumMixinStr_NID_aria_128_ctr = `enum NID_aria_128_ctr = 1069;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_aria_128_ctr); }))) {
            mixin(enumMixinStr_NID_aria_128_ctr);
        }
    }




    static if(!is(typeof(OBJ_aria_128_ctr))) {
        private enum enumMixinStr_OBJ_aria_128_ctr = `enum OBJ_aria_128_ctr = 1L , 2L , 410L , 200046L , 1L , 1L , 5L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_aria_128_ctr); }))) {
            mixin(enumMixinStr_OBJ_aria_128_ctr);
        }
    }




    static if(!is(typeof(SN_aria_192_ecb))) {
        private enum enumMixinStr_SN_aria_192_ecb = `enum SN_aria_192_ecb = "ARIA-192-ECB";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_aria_192_ecb); }))) {
            mixin(enumMixinStr_SN_aria_192_ecb);
        }
    }




    static if(!is(typeof(LN_aria_192_ecb))) {
        private enum enumMixinStr_LN_aria_192_ecb = `enum LN_aria_192_ecb = "aria-192-ecb";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_aria_192_ecb); }))) {
            mixin(enumMixinStr_LN_aria_192_ecb);
        }
    }




    static if(!is(typeof(NID_aria_192_ecb))) {
        private enum enumMixinStr_NID_aria_192_ecb = `enum NID_aria_192_ecb = 1070;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_aria_192_ecb); }))) {
            mixin(enumMixinStr_NID_aria_192_ecb);
        }
    }




    static if(!is(typeof(OBJ_aria_192_ecb))) {
        private enum enumMixinStr_OBJ_aria_192_ecb = `enum OBJ_aria_192_ecb = 1L , 2L , 410L , 200046L , 1L , 1L , 6L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_aria_192_ecb); }))) {
            mixin(enumMixinStr_OBJ_aria_192_ecb);
        }
    }




    static if(!is(typeof(SN_aria_192_cbc))) {
        private enum enumMixinStr_SN_aria_192_cbc = `enum SN_aria_192_cbc = "ARIA-192-CBC";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_aria_192_cbc); }))) {
            mixin(enumMixinStr_SN_aria_192_cbc);
        }
    }




    static if(!is(typeof(LN_aria_192_cbc))) {
        private enum enumMixinStr_LN_aria_192_cbc = `enum LN_aria_192_cbc = "aria-192-cbc";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_aria_192_cbc); }))) {
            mixin(enumMixinStr_LN_aria_192_cbc);
        }
    }




    static if(!is(typeof(NID_aria_192_cbc))) {
        private enum enumMixinStr_NID_aria_192_cbc = `enum NID_aria_192_cbc = 1071;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_aria_192_cbc); }))) {
            mixin(enumMixinStr_NID_aria_192_cbc);
        }
    }




    static if(!is(typeof(OBJ_aria_192_cbc))) {
        private enum enumMixinStr_OBJ_aria_192_cbc = `enum OBJ_aria_192_cbc = 1L , 2L , 410L , 200046L , 1L , 1L , 7L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_aria_192_cbc); }))) {
            mixin(enumMixinStr_OBJ_aria_192_cbc);
        }
    }




    static if(!is(typeof(SN_aria_192_cfb128))) {
        private enum enumMixinStr_SN_aria_192_cfb128 = `enum SN_aria_192_cfb128 = "ARIA-192-CFB";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_aria_192_cfb128); }))) {
            mixin(enumMixinStr_SN_aria_192_cfb128);
        }
    }




    static if(!is(typeof(LN_aria_192_cfb128))) {
        private enum enumMixinStr_LN_aria_192_cfb128 = `enum LN_aria_192_cfb128 = "aria-192-cfb";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_aria_192_cfb128); }))) {
            mixin(enumMixinStr_LN_aria_192_cfb128);
        }
    }




    static if(!is(typeof(NID_aria_192_cfb128))) {
        private enum enumMixinStr_NID_aria_192_cfb128 = `enum NID_aria_192_cfb128 = 1072;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_aria_192_cfb128); }))) {
            mixin(enumMixinStr_NID_aria_192_cfb128);
        }
    }




    static if(!is(typeof(OBJ_aria_192_cfb128))) {
        private enum enumMixinStr_OBJ_aria_192_cfb128 = `enum OBJ_aria_192_cfb128 = 1L , 2L , 410L , 200046L , 1L , 1L , 8L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_aria_192_cfb128); }))) {
            mixin(enumMixinStr_OBJ_aria_192_cfb128);
        }
    }




    static if(!is(typeof(SN_aria_192_ofb128))) {
        private enum enumMixinStr_SN_aria_192_ofb128 = `enum SN_aria_192_ofb128 = "ARIA-192-OFB";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_aria_192_ofb128); }))) {
            mixin(enumMixinStr_SN_aria_192_ofb128);
        }
    }




    static if(!is(typeof(LN_aria_192_ofb128))) {
        private enum enumMixinStr_LN_aria_192_ofb128 = `enum LN_aria_192_ofb128 = "aria-192-ofb";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_aria_192_ofb128); }))) {
            mixin(enumMixinStr_LN_aria_192_ofb128);
        }
    }




    static if(!is(typeof(NID_aria_192_ofb128))) {
        private enum enumMixinStr_NID_aria_192_ofb128 = `enum NID_aria_192_ofb128 = 1073;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_aria_192_ofb128); }))) {
            mixin(enumMixinStr_NID_aria_192_ofb128);
        }
    }




    static if(!is(typeof(OBJ_aria_192_ofb128))) {
        private enum enumMixinStr_OBJ_aria_192_ofb128 = `enum OBJ_aria_192_ofb128 = 1L , 2L , 410L , 200046L , 1L , 1L , 9L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_aria_192_ofb128); }))) {
            mixin(enumMixinStr_OBJ_aria_192_ofb128);
        }
    }




    static if(!is(typeof(SN_aria_192_ctr))) {
        private enum enumMixinStr_SN_aria_192_ctr = `enum SN_aria_192_ctr = "ARIA-192-CTR";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_aria_192_ctr); }))) {
            mixin(enumMixinStr_SN_aria_192_ctr);
        }
    }




    static if(!is(typeof(LN_aria_192_ctr))) {
        private enum enumMixinStr_LN_aria_192_ctr = `enum LN_aria_192_ctr = "aria-192-ctr";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_aria_192_ctr); }))) {
            mixin(enumMixinStr_LN_aria_192_ctr);
        }
    }




    static if(!is(typeof(NID_aria_192_ctr))) {
        private enum enumMixinStr_NID_aria_192_ctr = `enum NID_aria_192_ctr = 1074;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_aria_192_ctr); }))) {
            mixin(enumMixinStr_NID_aria_192_ctr);
        }
    }




    static if(!is(typeof(OBJ_aria_192_ctr))) {
        private enum enumMixinStr_OBJ_aria_192_ctr = `enum OBJ_aria_192_ctr = 1L , 2L , 410L , 200046L , 1L , 1L , 10L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_aria_192_ctr); }))) {
            mixin(enumMixinStr_OBJ_aria_192_ctr);
        }
    }




    static if(!is(typeof(SN_aria_256_ecb))) {
        private enum enumMixinStr_SN_aria_256_ecb = `enum SN_aria_256_ecb = "ARIA-256-ECB";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_aria_256_ecb); }))) {
            mixin(enumMixinStr_SN_aria_256_ecb);
        }
    }




    static if(!is(typeof(LN_aria_256_ecb))) {
        private enum enumMixinStr_LN_aria_256_ecb = `enum LN_aria_256_ecb = "aria-256-ecb";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_aria_256_ecb); }))) {
            mixin(enumMixinStr_LN_aria_256_ecb);
        }
    }




    static if(!is(typeof(NID_aria_256_ecb))) {
        private enum enumMixinStr_NID_aria_256_ecb = `enum NID_aria_256_ecb = 1075;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_aria_256_ecb); }))) {
            mixin(enumMixinStr_NID_aria_256_ecb);
        }
    }




    static if(!is(typeof(OBJ_aria_256_ecb))) {
        private enum enumMixinStr_OBJ_aria_256_ecb = `enum OBJ_aria_256_ecb = 1L , 2L , 410L , 200046L , 1L , 1L , 11L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_aria_256_ecb); }))) {
            mixin(enumMixinStr_OBJ_aria_256_ecb);
        }
    }




    static if(!is(typeof(SN_aria_256_cbc))) {
        private enum enumMixinStr_SN_aria_256_cbc = `enum SN_aria_256_cbc = "ARIA-256-CBC";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_aria_256_cbc); }))) {
            mixin(enumMixinStr_SN_aria_256_cbc);
        }
    }




    static if(!is(typeof(LN_aria_256_cbc))) {
        private enum enumMixinStr_LN_aria_256_cbc = `enum LN_aria_256_cbc = "aria-256-cbc";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_aria_256_cbc); }))) {
            mixin(enumMixinStr_LN_aria_256_cbc);
        }
    }




    static if(!is(typeof(NID_aria_256_cbc))) {
        private enum enumMixinStr_NID_aria_256_cbc = `enum NID_aria_256_cbc = 1076;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_aria_256_cbc); }))) {
            mixin(enumMixinStr_NID_aria_256_cbc);
        }
    }




    static if(!is(typeof(OBJ_aria_256_cbc))) {
        private enum enumMixinStr_OBJ_aria_256_cbc = `enum OBJ_aria_256_cbc = 1L , 2L , 410L , 200046L , 1L , 1L , 12L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_aria_256_cbc); }))) {
            mixin(enumMixinStr_OBJ_aria_256_cbc);
        }
    }




    static if(!is(typeof(SN_aria_256_cfb128))) {
        private enum enumMixinStr_SN_aria_256_cfb128 = `enum SN_aria_256_cfb128 = "ARIA-256-CFB";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_aria_256_cfb128); }))) {
            mixin(enumMixinStr_SN_aria_256_cfb128);
        }
    }




    static if(!is(typeof(LN_aria_256_cfb128))) {
        private enum enumMixinStr_LN_aria_256_cfb128 = `enum LN_aria_256_cfb128 = "aria-256-cfb";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_aria_256_cfb128); }))) {
            mixin(enumMixinStr_LN_aria_256_cfb128);
        }
    }




    static if(!is(typeof(NID_aria_256_cfb128))) {
        private enum enumMixinStr_NID_aria_256_cfb128 = `enum NID_aria_256_cfb128 = 1077;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_aria_256_cfb128); }))) {
            mixin(enumMixinStr_NID_aria_256_cfb128);
        }
    }




    static if(!is(typeof(OBJ_aria_256_cfb128))) {
        private enum enumMixinStr_OBJ_aria_256_cfb128 = `enum OBJ_aria_256_cfb128 = 1L , 2L , 410L , 200046L , 1L , 1L , 13L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_aria_256_cfb128); }))) {
            mixin(enumMixinStr_OBJ_aria_256_cfb128);
        }
    }




    static if(!is(typeof(SN_aria_256_ofb128))) {
        private enum enumMixinStr_SN_aria_256_ofb128 = `enum SN_aria_256_ofb128 = "ARIA-256-OFB";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_aria_256_ofb128); }))) {
            mixin(enumMixinStr_SN_aria_256_ofb128);
        }
    }




    static if(!is(typeof(LN_aria_256_ofb128))) {
        private enum enumMixinStr_LN_aria_256_ofb128 = `enum LN_aria_256_ofb128 = "aria-256-ofb";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_aria_256_ofb128); }))) {
            mixin(enumMixinStr_LN_aria_256_ofb128);
        }
    }




    static if(!is(typeof(NID_aria_256_ofb128))) {
        private enum enumMixinStr_NID_aria_256_ofb128 = `enum NID_aria_256_ofb128 = 1078;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_aria_256_ofb128); }))) {
            mixin(enumMixinStr_NID_aria_256_ofb128);
        }
    }




    static if(!is(typeof(OBJ_aria_256_ofb128))) {
        private enum enumMixinStr_OBJ_aria_256_ofb128 = `enum OBJ_aria_256_ofb128 = 1L , 2L , 410L , 200046L , 1L , 1L , 14L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_aria_256_ofb128); }))) {
            mixin(enumMixinStr_OBJ_aria_256_ofb128);
        }
    }




    static if(!is(typeof(SN_aria_256_ctr))) {
        private enum enumMixinStr_SN_aria_256_ctr = `enum SN_aria_256_ctr = "ARIA-256-CTR";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_aria_256_ctr); }))) {
            mixin(enumMixinStr_SN_aria_256_ctr);
        }
    }




    static if(!is(typeof(LN_aria_256_ctr))) {
        private enum enumMixinStr_LN_aria_256_ctr = `enum LN_aria_256_ctr = "aria-256-ctr";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_aria_256_ctr); }))) {
            mixin(enumMixinStr_LN_aria_256_ctr);
        }
    }




    static if(!is(typeof(NID_aria_256_ctr))) {
        private enum enumMixinStr_NID_aria_256_ctr = `enum NID_aria_256_ctr = 1079;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_aria_256_ctr); }))) {
            mixin(enumMixinStr_NID_aria_256_ctr);
        }
    }




    static if(!is(typeof(OBJ_aria_256_ctr))) {
        private enum enumMixinStr_OBJ_aria_256_ctr = `enum OBJ_aria_256_ctr = 1L , 2L , 410L , 200046L , 1L , 1L , 15L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_aria_256_ctr); }))) {
            mixin(enumMixinStr_OBJ_aria_256_ctr);
        }
    }




    static if(!is(typeof(SN_aria_128_cfb1))) {
        private enum enumMixinStr_SN_aria_128_cfb1 = `enum SN_aria_128_cfb1 = "ARIA-128-CFB1";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_aria_128_cfb1); }))) {
            mixin(enumMixinStr_SN_aria_128_cfb1);
        }
    }




    static if(!is(typeof(LN_aria_128_cfb1))) {
        private enum enumMixinStr_LN_aria_128_cfb1 = `enum LN_aria_128_cfb1 = "aria-128-cfb1";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_aria_128_cfb1); }))) {
            mixin(enumMixinStr_LN_aria_128_cfb1);
        }
    }




    static if(!is(typeof(NID_aria_128_cfb1))) {
        private enum enumMixinStr_NID_aria_128_cfb1 = `enum NID_aria_128_cfb1 = 1080;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_aria_128_cfb1); }))) {
            mixin(enumMixinStr_NID_aria_128_cfb1);
        }
    }




    static if(!is(typeof(SN_aria_192_cfb1))) {
        private enum enumMixinStr_SN_aria_192_cfb1 = `enum SN_aria_192_cfb1 = "ARIA-192-CFB1";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_aria_192_cfb1); }))) {
            mixin(enumMixinStr_SN_aria_192_cfb1);
        }
    }




    static if(!is(typeof(LN_aria_192_cfb1))) {
        private enum enumMixinStr_LN_aria_192_cfb1 = `enum LN_aria_192_cfb1 = "aria-192-cfb1";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_aria_192_cfb1); }))) {
            mixin(enumMixinStr_LN_aria_192_cfb1);
        }
    }




    static if(!is(typeof(NID_aria_192_cfb1))) {
        private enum enumMixinStr_NID_aria_192_cfb1 = `enum NID_aria_192_cfb1 = 1081;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_aria_192_cfb1); }))) {
            mixin(enumMixinStr_NID_aria_192_cfb1);
        }
    }




    static if(!is(typeof(SN_aria_256_cfb1))) {
        private enum enumMixinStr_SN_aria_256_cfb1 = `enum SN_aria_256_cfb1 = "ARIA-256-CFB1";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_aria_256_cfb1); }))) {
            mixin(enumMixinStr_SN_aria_256_cfb1);
        }
    }




    static if(!is(typeof(LN_aria_256_cfb1))) {
        private enum enumMixinStr_LN_aria_256_cfb1 = `enum LN_aria_256_cfb1 = "aria-256-cfb1";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_aria_256_cfb1); }))) {
            mixin(enumMixinStr_LN_aria_256_cfb1);
        }
    }




    static if(!is(typeof(NID_aria_256_cfb1))) {
        private enum enumMixinStr_NID_aria_256_cfb1 = `enum NID_aria_256_cfb1 = 1082;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_aria_256_cfb1); }))) {
            mixin(enumMixinStr_NID_aria_256_cfb1);
        }
    }




    static if(!is(typeof(SN_aria_128_cfb8))) {
        private enum enumMixinStr_SN_aria_128_cfb8 = `enum SN_aria_128_cfb8 = "ARIA-128-CFB8";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_aria_128_cfb8); }))) {
            mixin(enumMixinStr_SN_aria_128_cfb8);
        }
    }




    static if(!is(typeof(LN_aria_128_cfb8))) {
        private enum enumMixinStr_LN_aria_128_cfb8 = `enum LN_aria_128_cfb8 = "aria-128-cfb8";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_aria_128_cfb8); }))) {
            mixin(enumMixinStr_LN_aria_128_cfb8);
        }
    }




    static if(!is(typeof(NID_aria_128_cfb8))) {
        private enum enumMixinStr_NID_aria_128_cfb8 = `enum NID_aria_128_cfb8 = 1083;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_aria_128_cfb8); }))) {
            mixin(enumMixinStr_NID_aria_128_cfb8);
        }
    }




    static if(!is(typeof(SN_aria_192_cfb8))) {
        private enum enumMixinStr_SN_aria_192_cfb8 = `enum SN_aria_192_cfb8 = "ARIA-192-CFB8";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_aria_192_cfb8); }))) {
            mixin(enumMixinStr_SN_aria_192_cfb8);
        }
    }




    static if(!is(typeof(LN_aria_192_cfb8))) {
        private enum enumMixinStr_LN_aria_192_cfb8 = `enum LN_aria_192_cfb8 = "aria-192-cfb8";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_aria_192_cfb8); }))) {
            mixin(enumMixinStr_LN_aria_192_cfb8);
        }
    }




    static if(!is(typeof(NID_aria_192_cfb8))) {
        private enum enumMixinStr_NID_aria_192_cfb8 = `enum NID_aria_192_cfb8 = 1084;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_aria_192_cfb8); }))) {
            mixin(enumMixinStr_NID_aria_192_cfb8);
        }
    }




    static if(!is(typeof(SN_aria_256_cfb8))) {
        private enum enumMixinStr_SN_aria_256_cfb8 = `enum SN_aria_256_cfb8 = "ARIA-256-CFB8";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_aria_256_cfb8); }))) {
            mixin(enumMixinStr_SN_aria_256_cfb8);
        }
    }




    static if(!is(typeof(LN_aria_256_cfb8))) {
        private enum enumMixinStr_LN_aria_256_cfb8 = `enum LN_aria_256_cfb8 = "aria-256-cfb8";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_aria_256_cfb8); }))) {
            mixin(enumMixinStr_LN_aria_256_cfb8);
        }
    }




    static if(!is(typeof(NID_aria_256_cfb8))) {
        private enum enumMixinStr_NID_aria_256_cfb8 = `enum NID_aria_256_cfb8 = 1085;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_aria_256_cfb8); }))) {
            mixin(enumMixinStr_NID_aria_256_cfb8);
        }
    }




    static if(!is(typeof(SN_aria_128_ccm))) {
        private enum enumMixinStr_SN_aria_128_ccm = `enum SN_aria_128_ccm = "ARIA-128-CCM";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_aria_128_ccm); }))) {
            mixin(enumMixinStr_SN_aria_128_ccm);
        }
    }




    static if(!is(typeof(LN_aria_128_ccm))) {
        private enum enumMixinStr_LN_aria_128_ccm = `enum LN_aria_128_ccm = "aria-128-ccm";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_aria_128_ccm); }))) {
            mixin(enumMixinStr_LN_aria_128_ccm);
        }
    }




    static if(!is(typeof(NID_aria_128_ccm))) {
        private enum enumMixinStr_NID_aria_128_ccm = `enum NID_aria_128_ccm = 1120;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_aria_128_ccm); }))) {
            mixin(enumMixinStr_NID_aria_128_ccm);
        }
    }




    static if(!is(typeof(OBJ_aria_128_ccm))) {
        private enum enumMixinStr_OBJ_aria_128_ccm = `enum OBJ_aria_128_ccm = 1L , 2L , 410L , 200046L , 1L , 1L , 37L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_aria_128_ccm); }))) {
            mixin(enumMixinStr_OBJ_aria_128_ccm);
        }
    }




    static if(!is(typeof(SN_aria_192_ccm))) {
        private enum enumMixinStr_SN_aria_192_ccm = `enum SN_aria_192_ccm = "ARIA-192-CCM";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_aria_192_ccm); }))) {
            mixin(enumMixinStr_SN_aria_192_ccm);
        }
    }




    static if(!is(typeof(LN_aria_192_ccm))) {
        private enum enumMixinStr_LN_aria_192_ccm = `enum LN_aria_192_ccm = "aria-192-ccm";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_aria_192_ccm); }))) {
            mixin(enumMixinStr_LN_aria_192_ccm);
        }
    }




    static if(!is(typeof(NID_aria_192_ccm))) {
        private enum enumMixinStr_NID_aria_192_ccm = `enum NID_aria_192_ccm = 1121;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_aria_192_ccm); }))) {
            mixin(enumMixinStr_NID_aria_192_ccm);
        }
    }




    static if(!is(typeof(OBJ_aria_192_ccm))) {
        private enum enumMixinStr_OBJ_aria_192_ccm = `enum OBJ_aria_192_ccm = 1L , 2L , 410L , 200046L , 1L , 1L , 38L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_aria_192_ccm); }))) {
            mixin(enumMixinStr_OBJ_aria_192_ccm);
        }
    }




    static if(!is(typeof(SN_aria_256_ccm))) {
        private enum enumMixinStr_SN_aria_256_ccm = `enum SN_aria_256_ccm = "ARIA-256-CCM";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_aria_256_ccm); }))) {
            mixin(enumMixinStr_SN_aria_256_ccm);
        }
    }




    static if(!is(typeof(LN_aria_256_ccm))) {
        private enum enumMixinStr_LN_aria_256_ccm = `enum LN_aria_256_ccm = "aria-256-ccm";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_aria_256_ccm); }))) {
            mixin(enumMixinStr_LN_aria_256_ccm);
        }
    }




    static if(!is(typeof(NID_aria_256_ccm))) {
        private enum enumMixinStr_NID_aria_256_ccm = `enum NID_aria_256_ccm = 1122;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_aria_256_ccm); }))) {
            mixin(enumMixinStr_NID_aria_256_ccm);
        }
    }




    static if(!is(typeof(OBJ_aria_256_ccm))) {
        private enum enumMixinStr_OBJ_aria_256_ccm = `enum OBJ_aria_256_ccm = 1L , 2L , 410L , 200046L , 1L , 1L , 39L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_aria_256_ccm); }))) {
            mixin(enumMixinStr_OBJ_aria_256_ccm);
        }
    }




    static if(!is(typeof(SN_aria_128_gcm))) {
        private enum enumMixinStr_SN_aria_128_gcm = `enum SN_aria_128_gcm = "ARIA-128-GCM";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_aria_128_gcm); }))) {
            mixin(enumMixinStr_SN_aria_128_gcm);
        }
    }




    static if(!is(typeof(LN_aria_128_gcm))) {
        private enum enumMixinStr_LN_aria_128_gcm = `enum LN_aria_128_gcm = "aria-128-gcm";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_aria_128_gcm); }))) {
            mixin(enumMixinStr_LN_aria_128_gcm);
        }
    }




    static if(!is(typeof(NID_aria_128_gcm))) {
        private enum enumMixinStr_NID_aria_128_gcm = `enum NID_aria_128_gcm = 1123;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_aria_128_gcm); }))) {
            mixin(enumMixinStr_NID_aria_128_gcm);
        }
    }




    static if(!is(typeof(OBJ_aria_128_gcm))) {
        private enum enumMixinStr_OBJ_aria_128_gcm = `enum OBJ_aria_128_gcm = 1L , 2L , 410L , 200046L , 1L , 1L , 34L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_aria_128_gcm); }))) {
            mixin(enumMixinStr_OBJ_aria_128_gcm);
        }
    }




    static if(!is(typeof(SN_aria_192_gcm))) {
        private enum enumMixinStr_SN_aria_192_gcm = `enum SN_aria_192_gcm = "ARIA-192-GCM";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_aria_192_gcm); }))) {
            mixin(enumMixinStr_SN_aria_192_gcm);
        }
    }




    static if(!is(typeof(LN_aria_192_gcm))) {
        private enum enumMixinStr_LN_aria_192_gcm = `enum LN_aria_192_gcm = "aria-192-gcm";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_aria_192_gcm); }))) {
            mixin(enumMixinStr_LN_aria_192_gcm);
        }
    }




    static if(!is(typeof(NID_aria_192_gcm))) {
        private enum enumMixinStr_NID_aria_192_gcm = `enum NID_aria_192_gcm = 1124;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_aria_192_gcm); }))) {
            mixin(enumMixinStr_NID_aria_192_gcm);
        }
    }




    static if(!is(typeof(OBJ_aria_192_gcm))) {
        private enum enumMixinStr_OBJ_aria_192_gcm = `enum OBJ_aria_192_gcm = 1L , 2L , 410L , 200046L , 1L , 1L , 35L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_aria_192_gcm); }))) {
            mixin(enumMixinStr_OBJ_aria_192_gcm);
        }
    }




    static if(!is(typeof(SN_aria_256_gcm))) {
        private enum enumMixinStr_SN_aria_256_gcm = `enum SN_aria_256_gcm = "ARIA-256-GCM";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_aria_256_gcm); }))) {
            mixin(enumMixinStr_SN_aria_256_gcm);
        }
    }




    static if(!is(typeof(LN_aria_256_gcm))) {
        private enum enumMixinStr_LN_aria_256_gcm = `enum LN_aria_256_gcm = "aria-256-gcm";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_aria_256_gcm); }))) {
            mixin(enumMixinStr_LN_aria_256_gcm);
        }
    }




    static if(!is(typeof(NID_aria_256_gcm))) {
        private enum enumMixinStr_NID_aria_256_gcm = `enum NID_aria_256_gcm = 1125;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_aria_256_gcm); }))) {
            mixin(enumMixinStr_NID_aria_256_gcm);
        }
    }




    static if(!is(typeof(OBJ_aria_256_gcm))) {
        private enum enumMixinStr_OBJ_aria_256_gcm = `enum OBJ_aria_256_gcm = 1L , 2L , 410L , 200046L , 1L , 1L , 36L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_aria_256_gcm); }))) {
            mixin(enumMixinStr_OBJ_aria_256_gcm);
        }
    }




    static if(!is(typeof(SN_kisa))) {
        private enum enumMixinStr_SN_kisa = `enum SN_kisa = "KISA";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_kisa); }))) {
            mixin(enumMixinStr_SN_kisa);
        }
    }




    static if(!is(typeof(LN_kisa))) {
        private enum enumMixinStr_LN_kisa = `enum LN_kisa = "kisa";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_kisa); }))) {
            mixin(enumMixinStr_LN_kisa);
        }
    }




    static if(!is(typeof(NID_kisa))) {
        private enum enumMixinStr_NID_kisa = `enum NID_kisa = 773;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_kisa); }))) {
            mixin(enumMixinStr_NID_kisa);
        }
    }




    static if(!is(typeof(OBJ_kisa))) {
        private enum enumMixinStr_OBJ_kisa = `enum OBJ_kisa = 1L , 2L , 410L , 200004L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_kisa); }))) {
            mixin(enumMixinStr_OBJ_kisa);
        }
    }




    static if(!is(typeof(SN_seed_ecb))) {
        private enum enumMixinStr_SN_seed_ecb = `enum SN_seed_ecb = "SEED-ECB";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_seed_ecb); }))) {
            mixin(enumMixinStr_SN_seed_ecb);
        }
    }




    static if(!is(typeof(LN_seed_ecb))) {
        private enum enumMixinStr_LN_seed_ecb = `enum LN_seed_ecb = "seed-ecb";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_seed_ecb); }))) {
            mixin(enumMixinStr_LN_seed_ecb);
        }
    }




    static if(!is(typeof(NID_seed_ecb))) {
        private enum enumMixinStr_NID_seed_ecb = `enum NID_seed_ecb = 776;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_seed_ecb); }))) {
            mixin(enumMixinStr_NID_seed_ecb);
        }
    }




    static if(!is(typeof(OBJ_seed_ecb))) {
        private enum enumMixinStr_OBJ_seed_ecb = `enum OBJ_seed_ecb = 1L , 2L , 410L , 200004L , 1L , 3L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_seed_ecb); }))) {
            mixin(enumMixinStr_OBJ_seed_ecb);
        }
    }




    static if(!is(typeof(SN_seed_cbc))) {
        private enum enumMixinStr_SN_seed_cbc = `enum SN_seed_cbc = "SEED-CBC";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_seed_cbc); }))) {
            mixin(enumMixinStr_SN_seed_cbc);
        }
    }




    static if(!is(typeof(LN_seed_cbc))) {
        private enum enumMixinStr_LN_seed_cbc = `enum LN_seed_cbc = "seed-cbc";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_seed_cbc); }))) {
            mixin(enumMixinStr_LN_seed_cbc);
        }
    }




    static if(!is(typeof(NID_seed_cbc))) {
        private enum enumMixinStr_NID_seed_cbc = `enum NID_seed_cbc = 777;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_seed_cbc); }))) {
            mixin(enumMixinStr_NID_seed_cbc);
        }
    }




    static if(!is(typeof(OBJ_seed_cbc))) {
        private enum enumMixinStr_OBJ_seed_cbc = `enum OBJ_seed_cbc = 1L , 2L , 410L , 200004L , 1L , 4L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_seed_cbc); }))) {
            mixin(enumMixinStr_OBJ_seed_cbc);
        }
    }




    static if(!is(typeof(SN_seed_cfb128))) {
        private enum enumMixinStr_SN_seed_cfb128 = `enum SN_seed_cfb128 = "SEED-CFB";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_seed_cfb128); }))) {
            mixin(enumMixinStr_SN_seed_cfb128);
        }
    }




    static if(!is(typeof(LN_seed_cfb128))) {
        private enum enumMixinStr_LN_seed_cfb128 = `enum LN_seed_cfb128 = "seed-cfb";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_seed_cfb128); }))) {
            mixin(enumMixinStr_LN_seed_cfb128);
        }
    }




    static if(!is(typeof(NID_seed_cfb128))) {
        private enum enumMixinStr_NID_seed_cfb128 = `enum NID_seed_cfb128 = 779;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_seed_cfb128); }))) {
            mixin(enumMixinStr_NID_seed_cfb128);
        }
    }




    static if(!is(typeof(OBJ_seed_cfb128))) {
        private enum enumMixinStr_OBJ_seed_cfb128 = `enum OBJ_seed_cfb128 = 1L , 2L , 410L , 200004L , 1L , 5L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_seed_cfb128); }))) {
            mixin(enumMixinStr_OBJ_seed_cfb128);
        }
    }




    static if(!is(typeof(SN_seed_ofb128))) {
        private enum enumMixinStr_SN_seed_ofb128 = `enum SN_seed_ofb128 = "SEED-OFB";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_seed_ofb128); }))) {
            mixin(enumMixinStr_SN_seed_ofb128);
        }
    }




    static if(!is(typeof(LN_seed_ofb128))) {
        private enum enumMixinStr_LN_seed_ofb128 = `enum LN_seed_ofb128 = "seed-ofb";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_seed_ofb128); }))) {
            mixin(enumMixinStr_LN_seed_ofb128);
        }
    }




    static if(!is(typeof(NID_seed_ofb128))) {
        private enum enumMixinStr_NID_seed_ofb128 = `enum NID_seed_ofb128 = 778;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_seed_ofb128); }))) {
            mixin(enumMixinStr_NID_seed_ofb128);
        }
    }




    static if(!is(typeof(OBJ_seed_ofb128))) {
        private enum enumMixinStr_OBJ_seed_ofb128 = `enum OBJ_seed_ofb128 = 1L , 2L , 410L , 200004L , 1L , 6L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_seed_ofb128); }))) {
            mixin(enumMixinStr_OBJ_seed_ofb128);
        }
    }




    static if(!is(typeof(SN_sm4_ecb))) {
        private enum enumMixinStr_SN_sm4_ecb = `enum SN_sm4_ecb = "SM4-ECB";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_sm4_ecb); }))) {
            mixin(enumMixinStr_SN_sm4_ecb);
        }
    }




    static if(!is(typeof(LN_sm4_ecb))) {
        private enum enumMixinStr_LN_sm4_ecb = `enum LN_sm4_ecb = "sm4-ecb";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_sm4_ecb); }))) {
            mixin(enumMixinStr_LN_sm4_ecb);
        }
    }




    static if(!is(typeof(NID_sm4_ecb))) {
        private enum enumMixinStr_NID_sm4_ecb = `enum NID_sm4_ecb = 1133;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_sm4_ecb); }))) {
            mixin(enumMixinStr_NID_sm4_ecb);
        }
    }




    static if(!is(typeof(OBJ_sm4_ecb))) {
        private enum enumMixinStr_OBJ_sm4_ecb = `enum OBJ_sm4_ecb = 1L , 2L , 156L , 10197L , 1L , 104L , 1L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_sm4_ecb); }))) {
            mixin(enumMixinStr_OBJ_sm4_ecb);
        }
    }




    static if(!is(typeof(SN_sm4_cbc))) {
        private enum enumMixinStr_SN_sm4_cbc = `enum SN_sm4_cbc = "SM4-CBC";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_sm4_cbc); }))) {
            mixin(enumMixinStr_SN_sm4_cbc);
        }
    }




    static if(!is(typeof(LN_sm4_cbc))) {
        private enum enumMixinStr_LN_sm4_cbc = `enum LN_sm4_cbc = "sm4-cbc";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_sm4_cbc); }))) {
            mixin(enumMixinStr_LN_sm4_cbc);
        }
    }




    static if(!is(typeof(NID_sm4_cbc))) {
        private enum enumMixinStr_NID_sm4_cbc = `enum NID_sm4_cbc = 1134;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_sm4_cbc); }))) {
            mixin(enumMixinStr_NID_sm4_cbc);
        }
    }




    static if(!is(typeof(OBJ_sm4_cbc))) {
        private enum enumMixinStr_OBJ_sm4_cbc = `enum OBJ_sm4_cbc = 1L , 2L , 156L , 10197L , 1L , 104L , 2L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_sm4_cbc); }))) {
            mixin(enumMixinStr_OBJ_sm4_cbc);
        }
    }




    static if(!is(typeof(SN_sm4_ofb128))) {
        private enum enumMixinStr_SN_sm4_ofb128 = `enum SN_sm4_ofb128 = "SM4-OFB";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_sm4_ofb128); }))) {
            mixin(enumMixinStr_SN_sm4_ofb128);
        }
    }




    static if(!is(typeof(LN_sm4_ofb128))) {
        private enum enumMixinStr_LN_sm4_ofb128 = `enum LN_sm4_ofb128 = "sm4-ofb";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_sm4_ofb128); }))) {
            mixin(enumMixinStr_LN_sm4_ofb128);
        }
    }




    static if(!is(typeof(NID_sm4_ofb128))) {
        private enum enumMixinStr_NID_sm4_ofb128 = `enum NID_sm4_ofb128 = 1135;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_sm4_ofb128); }))) {
            mixin(enumMixinStr_NID_sm4_ofb128);
        }
    }




    static if(!is(typeof(OBJ_sm4_ofb128))) {
        private enum enumMixinStr_OBJ_sm4_ofb128 = `enum OBJ_sm4_ofb128 = 1L , 2L , 156L , 10197L , 1L , 104L , 3L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_sm4_ofb128); }))) {
            mixin(enumMixinStr_OBJ_sm4_ofb128);
        }
    }




    static if(!is(typeof(SN_sm4_cfb128))) {
        private enum enumMixinStr_SN_sm4_cfb128 = `enum SN_sm4_cfb128 = "SM4-CFB";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_sm4_cfb128); }))) {
            mixin(enumMixinStr_SN_sm4_cfb128);
        }
    }




    static if(!is(typeof(LN_sm4_cfb128))) {
        private enum enumMixinStr_LN_sm4_cfb128 = `enum LN_sm4_cfb128 = "sm4-cfb";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_sm4_cfb128); }))) {
            mixin(enumMixinStr_LN_sm4_cfb128);
        }
    }




    static if(!is(typeof(NID_sm4_cfb128))) {
        private enum enumMixinStr_NID_sm4_cfb128 = `enum NID_sm4_cfb128 = 1137;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_sm4_cfb128); }))) {
            mixin(enumMixinStr_NID_sm4_cfb128);
        }
    }




    static if(!is(typeof(OBJ_sm4_cfb128))) {
        private enum enumMixinStr_OBJ_sm4_cfb128 = `enum OBJ_sm4_cfb128 = 1L , 2L , 156L , 10197L , 1L , 104L , 4L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_sm4_cfb128); }))) {
            mixin(enumMixinStr_OBJ_sm4_cfb128);
        }
    }




    static if(!is(typeof(SN_sm4_cfb1))) {
        private enum enumMixinStr_SN_sm4_cfb1 = `enum SN_sm4_cfb1 = "SM4-CFB1";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_sm4_cfb1); }))) {
            mixin(enumMixinStr_SN_sm4_cfb1);
        }
    }




    static if(!is(typeof(LN_sm4_cfb1))) {
        private enum enumMixinStr_LN_sm4_cfb1 = `enum LN_sm4_cfb1 = "sm4-cfb1";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_sm4_cfb1); }))) {
            mixin(enumMixinStr_LN_sm4_cfb1);
        }
    }




    static if(!is(typeof(NID_sm4_cfb1))) {
        private enum enumMixinStr_NID_sm4_cfb1 = `enum NID_sm4_cfb1 = 1136;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_sm4_cfb1); }))) {
            mixin(enumMixinStr_NID_sm4_cfb1);
        }
    }




    static if(!is(typeof(OBJ_sm4_cfb1))) {
        private enum enumMixinStr_OBJ_sm4_cfb1 = `enum OBJ_sm4_cfb1 = 1L , 2L , 156L , 10197L , 1L , 104L , 5L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_sm4_cfb1); }))) {
            mixin(enumMixinStr_OBJ_sm4_cfb1);
        }
    }




    static if(!is(typeof(SN_sm4_cfb8))) {
        private enum enumMixinStr_SN_sm4_cfb8 = `enum SN_sm4_cfb8 = "SM4-CFB8";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_sm4_cfb8); }))) {
            mixin(enumMixinStr_SN_sm4_cfb8);
        }
    }




    static if(!is(typeof(LN_sm4_cfb8))) {
        private enum enumMixinStr_LN_sm4_cfb8 = `enum LN_sm4_cfb8 = "sm4-cfb8";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_sm4_cfb8); }))) {
            mixin(enumMixinStr_LN_sm4_cfb8);
        }
    }




    static if(!is(typeof(NID_sm4_cfb8))) {
        private enum enumMixinStr_NID_sm4_cfb8 = `enum NID_sm4_cfb8 = 1138;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_sm4_cfb8); }))) {
            mixin(enumMixinStr_NID_sm4_cfb8);
        }
    }




    static if(!is(typeof(OBJ_sm4_cfb8))) {
        private enum enumMixinStr_OBJ_sm4_cfb8 = `enum OBJ_sm4_cfb8 = 1L , 2L , 156L , 10197L , 1L , 104L , 6L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_sm4_cfb8); }))) {
            mixin(enumMixinStr_OBJ_sm4_cfb8);
        }
    }




    static if(!is(typeof(SN_sm4_ctr))) {
        private enum enumMixinStr_SN_sm4_ctr = `enum SN_sm4_ctr = "SM4-CTR";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_sm4_ctr); }))) {
            mixin(enumMixinStr_SN_sm4_ctr);
        }
    }




    static if(!is(typeof(LN_sm4_ctr))) {
        private enum enumMixinStr_LN_sm4_ctr = `enum LN_sm4_ctr = "sm4-ctr";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_sm4_ctr); }))) {
            mixin(enumMixinStr_LN_sm4_ctr);
        }
    }




    static if(!is(typeof(NID_sm4_ctr))) {
        private enum enumMixinStr_NID_sm4_ctr = `enum NID_sm4_ctr = 1139;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_sm4_ctr); }))) {
            mixin(enumMixinStr_NID_sm4_ctr);
        }
    }




    static if(!is(typeof(OBJ_sm4_ctr))) {
        private enum enumMixinStr_OBJ_sm4_ctr = `enum OBJ_sm4_ctr = 1L , 2L , 156L , 10197L , 1L , 104L , 7L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_sm4_ctr); }))) {
            mixin(enumMixinStr_OBJ_sm4_ctr);
        }
    }




    static if(!is(typeof(SN_hmac))) {
        private enum enumMixinStr_SN_hmac = `enum SN_hmac = "HMAC";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_hmac); }))) {
            mixin(enumMixinStr_SN_hmac);
        }
    }




    static if(!is(typeof(LN_hmac))) {
        private enum enumMixinStr_LN_hmac = `enum LN_hmac = "hmac";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_hmac); }))) {
            mixin(enumMixinStr_LN_hmac);
        }
    }




    static if(!is(typeof(NID_hmac))) {
        private enum enumMixinStr_NID_hmac = `enum NID_hmac = 855;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_hmac); }))) {
            mixin(enumMixinStr_NID_hmac);
        }
    }




    static if(!is(typeof(SN_cmac))) {
        private enum enumMixinStr_SN_cmac = `enum SN_cmac = "CMAC";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_cmac); }))) {
            mixin(enumMixinStr_SN_cmac);
        }
    }




    static if(!is(typeof(LN_cmac))) {
        private enum enumMixinStr_LN_cmac = `enum LN_cmac = "cmac";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_cmac); }))) {
            mixin(enumMixinStr_LN_cmac);
        }
    }




    static if(!is(typeof(NID_cmac))) {
        private enum enumMixinStr_NID_cmac = `enum NID_cmac = 894;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_cmac); }))) {
            mixin(enumMixinStr_NID_cmac);
        }
    }




    static if(!is(typeof(SN_rc4_hmac_md5))) {
        private enum enumMixinStr_SN_rc4_hmac_md5 = `enum SN_rc4_hmac_md5 = "RC4-HMAC-MD5";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_rc4_hmac_md5); }))) {
            mixin(enumMixinStr_SN_rc4_hmac_md5);
        }
    }




    static if(!is(typeof(LN_rc4_hmac_md5))) {
        private enum enumMixinStr_LN_rc4_hmac_md5 = `enum LN_rc4_hmac_md5 = "rc4-hmac-md5";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_rc4_hmac_md5); }))) {
            mixin(enumMixinStr_LN_rc4_hmac_md5);
        }
    }




    static if(!is(typeof(NID_rc4_hmac_md5))) {
        private enum enumMixinStr_NID_rc4_hmac_md5 = `enum NID_rc4_hmac_md5 = 915;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_rc4_hmac_md5); }))) {
            mixin(enumMixinStr_NID_rc4_hmac_md5);
        }
    }




    static if(!is(typeof(SN_aes_128_cbc_hmac_sha1))) {
        private enum enumMixinStr_SN_aes_128_cbc_hmac_sha1 = `enum SN_aes_128_cbc_hmac_sha1 = "AES-128-CBC-HMAC-SHA1";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_aes_128_cbc_hmac_sha1); }))) {
            mixin(enumMixinStr_SN_aes_128_cbc_hmac_sha1);
        }
    }




    static if(!is(typeof(LN_aes_128_cbc_hmac_sha1))) {
        private enum enumMixinStr_LN_aes_128_cbc_hmac_sha1 = `enum LN_aes_128_cbc_hmac_sha1 = "aes-128-cbc-hmac-sha1";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_aes_128_cbc_hmac_sha1); }))) {
            mixin(enumMixinStr_LN_aes_128_cbc_hmac_sha1);
        }
    }




    static if(!is(typeof(NID_aes_128_cbc_hmac_sha1))) {
        private enum enumMixinStr_NID_aes_128_cbc_hmac_sha1 = `enum NID_aes_128_cbc_hmac_sha1 = 916;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_aes_128_cbc_hmac_sha1); }))) {
            mixin(enumMixinStr_NID_aes_128_cbc_hmac_sha1);
        }
    }




    static if(!is(typeof(SN_aes_192_cbc_hmac_sha1))) {
        private enum enumMixinStr_SN_aes_192_cbc_hmac_sha1 = `enum SN_aes_192_cbc_hmac_sha1 = "AES-192-CBC-HMAC-SHA1";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_aes_192_cbc_hmac_sha1); }))) {
            mixin(enumMixinStr_SN_aes_192_cbc_hmac_sha1);
        }
    }




    static if(!is(typeof(LN_aes_192_cbc_hmac_sha1))) {
        private enum enumMixinStr_LN_aes_192_cbc_hmac_sha1 = `enum LN_aes_192_cbc_hmac_sha1 = "aes-192-cbc-hmac-sha1";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_aes_192_cbc_hmac_sha1); }))) {
            mixin(enumMixinStr_LN_aes_192_cbc_hmac_sha1);
        }
    }




    static if(!is(typeof(NID_aes_192_cbc_hmac_sha1))) {
        private enum enumMixinStr_NID_aes_192_cbc_hmac_sha1 = `enum NID_aes_192_cbc_hmac_sha1 = 917;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_aes_192_cbc_hmac_sha1); }))) {
            mixin(enumMixinStr_NID_aes_192_cbc_hmac_sha1);
        }
    }




    static if(!is(typeof(SN_aes_256_cbc_hmac_sha1))) {
        private enum enumMixinStr_SN_aes_256_cbc_hmac_sha1 = `enum SN_aes_256_cbc_hmac_sha1 = "AES-256-CBC-HMAC-SHA1";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_aes_256_cbc_hmac_sha1); }))) {
            mixin(enumMixinStr_SN_aes_256_cbc_hmac_sha1);
        }
    }




    static if(!is(typeof(LN_aes_256_cbc_hmac_sha1))) {
        private enum enumMixinStr_LN_aes_256_cbc_hmac_sha1 = `enum LN_aes_256_cbc_hmac_sha1 = "aes-256-cbc-hmac-sha1";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_aes_256_cbc_hmac_sha1); }))) {
            mixin(enumMixinStr_LN_aes_256_cbc_hmac_sha1);
        }
    }




    static if(!is(typeof(NID_aes_256_cbc_hmac_sha1))) {
        private enum enumMixinStr_NID_aes_256_cbc_hmac_sha1 = `enum NID_aes_256_cbc_hmac_sha1 = 918;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_aes_256_cbc_hmac_sha1); }))) {
            mixin(enumMixinStr_NID_aes_256_cbc_hmac_sha1);
        }
    }




    static if(!is(typeof(SN_aes_128_cbc_hmac_sha256))) {
        private enum enumMixinStr_SN_aes_128_cbc_hmac_sha256 = `enum SN_aes_128_cbc_hmac_sha256 = "AES-128-CBC-HMAC-SHA256";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_aes_128_cbc_hmac_sha256); }))) {
            mixin(enumMixinStr_SN_aes_128_cbc_hmac_sha256);
        }
    }




    static if(!is(typeof(LN_aes_128_cbc_hmac_sha256))) {
        private enum enumMixinStr_LN_aes_128_cbc_hmac_sha256 = `enum LN_aes_128_cbc_hmac_sha256 = "aes-128-cbc-hmac-sha256";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_aes_128_cbc_hmac_sha256); }))) {
            mixin(enumMixinStr_LN_aes_128_cbc_hmac_sha256);
        }
    }




    static if(!is(typeof(NID_aes_128_cbc_hmac_sha256))) {
        private enum enumMixinStr_NID_aes_128_cbc_hmac_sha256 = `enum NID_aes_128_cbc_hmac_sha256 = 948;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_aes_128_cbc_hmac_sha256); }))) {
            mixin(enumMixinStr_NID_aes_128_cbc_hmac_sha256);
        }
    }




    static if(!is(typeof(SN_aes_192_cbc_hmac_sha256))) {
        private enum enumMixinStr_SN_aes_192_cbc_hmac_sha256 = `enum SN_aes_192_cbc_hmac_sha256 = "AES-192-CBC-HMAC-SHA256";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_aes_192_cbc_hmac_sha256); }))) {
            mixin(enumMixinStr_SN_aes_192_cbc_hmac_sha256);
        }
    }




    static if(!is(typeof(LN_aes_192_cbc_hmac_sha256))) {
        private enum enumMixinStr_LN_aes_192_cbc_hmac_sha256 = `enum LN_aes_192_cbc_hmac_sha256 = "aes-192-cbc-hmac-sha256";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_aes_192_cbc_hmac_sha256); }))) {
            mixin(enumMixinStr_LN_aes_192_cbc_hmac_sha256);
        }
    }




    static if(!is(typeof(NID_aes_192_cbc_hmac_sha256))) {
        private enum enumMixinStr_NID_aes_192_cbc_hmac_sha256 = `enum NID_aes_192_cbc_hmac_sha256 = 949;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_aes_192_cbc_hmac_sha256); }))) {
            mixin(enumMixinStr_NID_aes_192_cbc_hmac_sha256);
        }
    }




    static if(!is(typeof(SN_aes_256_cbc_hmac_sha256))) {
        private enum enumMixinStr_SN_aes_256_cbc_hmac_sha256 = `enum SN_aes_256_cbc_hmac_sha256 = "AES-256-CBC-HMAC-SHA256";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_aes_256_cbc_hmac_sha256); }))) {
            mixin(enumMixinStr_SN_aes_256_cbc_hmac_sha256);
        }
    }




    static if(!is(typeof(LN_aes_256_cbc_hmac_sha256))) {
        private enum enumMixinStr_LN_aes_256_cbc_hmac_sha256 = `enum LN_aes_256_cbc_hmac_sha256 = "aes-256-cbc-hmac-sha256";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_aes_256_cbc_hmac_sha256); }))) {
            mixin(enumMixinStr_LN_aes_256_cbc_hmac_sha256);
        }
    }




    static if(!is(typeof(NID_aes_256_cbc_hmac_sha256))) {
        private enum enumMixinStr_NID_aes_256_cbc_hmac_sha256 = `enum NID_aes_256_cbc_hmac_sha256 = 950;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_aes_256_cbc_hmac_sha256); }))) {
            mixin(enumMixinStr_NID_aes_256_cbc_hmac_sha256);
        }
    }




    static if(!is(typeof(SN_chacha20_poly1305))) {
        private enum enumMixinStr_SN_chacha20_poly1305 = `enum SN_chacha20_poly1305 = "ChaCha20-Poly1305";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_chacha20_poly1305); }))) {
            mixin(enumMixinStr_SN_chacha20_poly1305);
        }
    }




    static if(!is(typeof(LN_chacha20_poly1305))) {
        private enum enumMixinStr_LN_chacha20_poly1305 = `enum LN_chacha20_poly1305 = "chacha20-poly1305";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_chacha20_poly1305); }))) {
            mixin(enumMixinStr_LN_chacha20_poly1305);
        }
    }




    static if(!is(typeof(NID_chacha20_poly1305))) {
        private enum enumMixinStr_NID_chacha20_poly1305 = `enum NID_chacha20_poly1305 = 1018;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_chacha20_poly1305); }))) {
            mixin(enumMixinStr_NID_chacha20_poly1305);
        }
    }




    static if(!is(typeof(SN_chacha20))) {
        private enum enumMixinStr_SN_chacha20 = `enum SN_chacha20 = "ChaCha20";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_chacha20); }))) {
            mixin(enumMixinStr_SN_chacha20);
        }
    }




    static if(!is(typeof(LN_chacha20))) {
        private enum enumMixinStr_LN_chacha20 = `enum LN_chacha20 = "chacha20";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_chacha20); }))) {
            mixin(enumMixinStr_LN_chacha20);
        }
    }




    static if(!is(typeof(NID_chacha20))) {
        private enum enumMixinStr_NID_chacha20 = `enum NID_chacha20 = 1019;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_chacha20); }))) {
            mixin(enumMixinStr_NID_chacha20);
        }
    }




    static if(!is(typeof(SN_dhpublicnumber))) {
        private enum enumMixinStr_SN_dhpublicnumber = `enum SN_dhpublicnumber = "dhpublicnumber";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_dhpublicnumber); }))) {
            mixin(enumMixinStr_SN_dhpublicnumber);
        }
    }




    static if(!is(typeof(LN_dhpublicnumber))) {
        private enum enumMixinStr_LN_dhpublicnumber = `enum LN_dhpublicnumber = "X9.42 DH";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_dhpublicnumber); }))) {
            mixin(enumMixinStr_LN_dhpublicnumber);
        }
    }




    static if(!is(typeof(NID_dhpublicnumber))) {
        private enum enumMixinStr_NID_dhpublicnumber = `enum NID_dhpublicnumber = 920;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_dhpublicnumber); }))) {
            mixin(enumMixinStr_NID_dhpublicnumber);
        }
    }




    static if(!is(typeof(OBJ_dhpublicnumber))) {
        private enum enumMixinStr_OBJ_dhpublicnumber = `enum OBJ_dhpublicnumber = 1L , 2L , 840L , 10046L , 2L , 1L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_dhpublicnumber); }))) {
            mixin(enumMixinStr_OBJ_dhpublicnumber);
        }
    }




    static if(!is(typeof(SN_brainpoolP160r1))) {
        private enum enumMixinStr_SN_brainpoolP160r1 = `enum SN_brainpoolP160r1 = "brainpoolP160r1";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_brainpoolP160r1); }))) {
            mixin(enumMixinStr_SN_brainpoolP160r1);
        }
    }




    static if(!is(typeof(NID_brainpoolP160r1))) {
        private enum enumMixinStr_NID_brainpoolP160r1 = `enum NID_brainpoolP160r1 = 921;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_brainpoolP160r1); }))) {
            mixin(enumMixinStr_NID_brainpoolP160r1);
        }
    }




    static if(!is(typeof(OBJ_brainpoolP160r1))) {
        private enum enumMixinStr_OBJ_brainpoolP160r1 = `enum OBJ_brainpoolP160r1 = 1L , 3L , 36L , 3L , 3L , 2L , 8L , 1L , 1L , 1L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_brainpoolP160r1); }))) {
            mixin(enumMixinStr_OBJ_brainpoolP160r1);
        }
    }




    static if(!is(typeof(SN_brainpoolP160t1))) {
        private enum enumMixinStr_SN_brainpoolP160t1 = `enum SN_brainpoolP160t1 = "brainpoolP160t1";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_brainpoolP160t1); }))) {
            mixin(enumMixinStr_SN_brainpoolP160t1);
        }
    }




    static if(!is(typeof(NID_brainpoolP160t1))) {
        private enum enumMixinStr_NID_brainpoolP160t1 = `enum NID_brainpoolP160t1 = 922;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_brainpoolP160t1); }))) {
            mixin(enumMixinStr_NID_brainpoolP160t1);
        }
    }




    static if(!is(typeof(OBJ_brainpoolP160t1))) {
        private enum enumMixinStr_OBJ_brainpoolP160t1 = `enum OBJ_brainpoolP160t1 = 1L , 3L , 36L , 3L , 3L , 2L , 8L , 1L , 1L , 2L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_brainpoolP160t1); }))) {
            mixin(enumMixinStr_OBJ_brainpoolP160t1);
        }
    }




    static if(!is(typeof(SN_brainpoolP192r1))) {
        private enum enumMixinStr_SN_brainpoolP192r1 = `enum SN_brainpoolP192r1 = "brainpoolP192r1";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_brainpoolP192r1); }))) {
            mixin(enumMixinStr_SN_brainpoolP192r1);
        }
    }




    static if(!is(typeof(NID_brainpoolP192r1))) {
        private enum enumMixinStr_NID_brainpoolP192r1 = `enum NID_brainpoolP192r1 = 923;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_brainpoolP192r1); }))) {
            mixin(enumMixinStr_NID_brainpoolP192r1);
        }
    }




    static if(!is(typeof(OBJ_brainpoolP192r1))) {
        private enum enumMixinStr_OBJ_brainpoolP192r1 = `enum OBJ_brainpoolP192r1 = 1L , 3L , 36L , 3L , 3L , 2L , 8L , 1L , 1L , 3L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_brainpoolP192r1); }))) {
            mixin(enumMixinStr_OBJ_brainpoolP192r1);
        }
    }




    static if(!is(typeof(SN_brainpoolP192t1))) {
        private enum enumMixinStr_SN_brainpoolP192t1 = `enum SN_brainpoolP192t1 = "brainpoolP192t1";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_brainpoolP192t1); }))) {
            mixin(enumMixinStr_SN_brainpoolP192t1);
        }
    }




    static if(!is(typeof(NID_brainpoolP192t1))) {
        private enum enumMixinStr_NID_brainpoolP192t1 = `enum NID_brainpoolP192t1 = 924;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_brainpoolP192t1); }))) {
            mixin(enumMixinStr_NID_brainpoolP192t1);
        }
    }




    static if(!is(typeof(OBJ_brainpoolP192t1))) {
        private enum enumMixinStr_OBJ_brainpoolP192t1 = `enum OBJ_brainpoolP192t1 = 1L , 3L , 36L , 3L , 3L , 2L , 8L , 1L , 1L , 4L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_brainpoolP192t1); }))) {
            mixin(enumMixinStr_OBJ_brainpoolP192t1);
        }
    }




    static if(!is(typeof(SN_brainpoolP224r1))) {
        private enum enumMixinStr_SN_brainpoolP224r1 = `enum SN_brainpoolP224r1 = "brainpoolP224r1";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_brainpoolP224r1); }))) {
            mixin(enumMixinStr_SN_brainpoolP224r1);
        }
    }




    static if(!is(typeof(NID_brainpoolP224r1))) {
        private enum enumMixinStr_NID_brainpoolP224r1 = `enum NID_brainpoolP224r1 = 925;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_brainpoolP224r1); }))) {
            mixin(enumMixinStr_NID_brainpoolP224r1);
        }
    }




    static if(!is(typeof(OBJ_brainpoolP224r1))) {
        private enum enumMixinStr_OBJ_brainpoolP224r1 = `enum OBJ_brainpoolP224r1 = 1L , 3L , 36L , 3L , 3L , 2L , 8L , 1L , 1L , 5L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_brainpoolP224r1); }))) {
            mixin(enumMixinStr_OBJ_brainpoolP224r1);
        }
    }




    static if(!is(typeof(SN_brainpoolP224t1))) {
        private enum enumMixinStr_SN_brainpoolP224t1 = `enum SN_brainpoolP224t1 = "brainpoolP224t1";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_brainpoolP224t1); }))) {
            mixin(enumMixinStr_SN_brainpoolP224t1);
        }
    }




    static if(!is(typeof(NID_brainpoolP224t1))) {
        private enum enumMixinStr_NID_brainpoolP224t1 = `enum NID_brainpoolP224t1 = 926;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_brainpoolP224t1); }))) {
            mixin(enumMixinStr_NID_brainpoolP224t1);
        }
    }




    static if(!is(typeof(OBJ_brainpoolP224t1))) {
        private enum enumMixinStr_OBJ_brainpoolP224t1 = `enum OBJ_brainpoolP224t1 = 1L , 3L , 36L , 3L , 3L , 2L , 8L , 1L , 1L , 6L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_brainpoolP224t1); }))) {
            mixin(enumMixinStr_OBJ_brainpoolP224t1);
        }
    }




    static if(!is(typeof(SN_brainpoolP256r1))) {
        private enum enumMixinStr_SN_brainpoolP256r1 = `enum SN_brainpoolP256r1 = "brainpoolP256r1";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_brainpoolP256r1); }))) {
            mixin(enumMixinStr_SN_brainpoolP256r1);
        }
    }




    static if(!is(typeof(NID_brainpoolP256r1))) {
        private enum enumMixinStr_NID_brainpoolP256r1 = `enum NID_brainpoolP256r1 = 927;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_brainpoolP256r1); }))) {
            mixin(enumMixinStr_NID_brainpoolP256r1);
        }
    }




    static if(!is(typeof(OBJ_brainpoolP256r1))) {
        private enum enumMixinStr_OBJ_brainpoolP256r1 = `enum OBJ_brainpoolP256r1 = 1L , 3L , 36L , 3L , 3L , 2L , 8L , 1L , 1L , 7L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_brainpoolP256r1); }))) {
            mixin(enumMixinStr_OBJ_brainpoolP256r1);
        }
    }




    static if(!is(typeof(SN_brainpoolP256t1))) {
        private enum enumMixinStr_SN_brainpoolP256t1 = `enum SN_brainpoolP256t1 = "brainpoolP256t1";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_brainpoolP256t1); }))) {
            mixin(enumMixinStr_SN_brainpoolP256t1);
        }
    }




    static if(!is(typeof(NID_brainpoolP256t1))) {
        private enum enumMixinStr_NID_brainpoolP256t1 = `enum NID_brainpoolP256t1 = 928;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_brainpoolP256t1); }))) {
            mixin(enumMixinStr_NID_brainpoolP256t1);
        }
    }




    static if(!is(typeof(OBJ_brainpoolP256t1))) {
        private enum enumMixinStr_OBJ_brainpoolP256t1 = `enum OBJ_brainpoolP256t1 = 1L , 3L , 36L , 3L , 3L , 2L , 8L , 1L , 1L , 8L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_brainpoolP256t1); }))) {
            mixin(enumMixinStr_OBJ_brainpoolP256t1);
        }
    }




    static if(!is(typeof(SN_brainpoolP320r1))) {
        private enum enumMixinStr_SN_brainpoolP320r1 = `enum SN_brainpoolP320r1 = "brainpoolP320r1";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_brainpoolP320r1); }))) {
            mixin(enumMixinStr_SN_brainpoolP320r1);
        }
    }




    static if(!is(typeof(NID_brainpoolP320r1))) {
        private enum enumMixinStr_NID_brainpoolP320r1 = `enum NID_brainpoolP320r1 = 929;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_brainpoolP320r1); }))) {
            mixin(enumMixinStr_NID_brainpoolP320r1);
        }
    }




    static if(!is(typeof(OBJ_brainpoolP320r1))) {
        private enum enumMixinStr_OBJ_brainpoolP320r1 = `enum OBJ_brainpoolP320r1 = 1L , 3L , 36L , 3L , 3L , 2L , 8L , 1L , 1L , 9L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_brainpoolP320r1); }))) {
            mixin(enumMixinStr_OBJ_brainpoolP320r1);
        }
    }




    static if(!is(typeof(SN_brainpoolP320t1))) {
        private enum enumMixinStr_SN_brainpoolP320t1 = `enum SN_brainpoolP320t1 = "brainpoolP320t1";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_brainpoolP320t1); }))) {
            mixin(enumMixinStr_SN_brainpoolP320t1);
        }
    }




    static if(!is(typeof(NID_brainpoolP320t1))) {
        private enum enumMixinStr_NID_brainpoolP320t1 = `enum NID_brainpoolP320t1 = 930;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_brainpoolP320t1); }))) {
            mixin(enumMixinStr_NID_brainpoolP320t1);
        }
    }




    static if(!is(typeof(OBJ_brainpoolP320t1))) {
        private enum enumMixinStr_OBJ_brainpoolP320t1 = `enum OBJ_brainpoolP320t1 = 1L , 3L , 36L , 3L , 3L , 2L , 8L , 1L , 1L , 10L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_brainpoolP320t1); }))) {
            mixin(enumMixinStr_OBJ_brainpoolP320t1);
        }
    }




    static if(!is(typeof(SN_brainpoolP384r1))) {
        private enum enumMixinStr_SN_brainpoolP384r1 = `enum SN_brainpoolP384r1 = "brainpoolP384r1";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_brainpoolP384r1); }))) {
            mixin(enumMixinStr_SN_brainpoolP384r1);
        }
    }




    static if(!is(typeof(NID_brainpoolP384r1))) {
        private enum enumMixinStr_NID_brainpoolP384r1 = `enum NID_brainpoolP384r1 = 931;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_brainpoolP384r1); }))) {
            mixin(enumMixinStr_NID_brainpoolP384r1);
        }
    }




    static if(!is(typeof(OBJ_brainpoolP384r1))) {
        private enum enumMixinStr_OBJ_brainpoolP384r1 = `enum OBJ_brainpoolP384r1 = 1L , 3L , 36L , 3L , 3L , 2L , 8L , 1L , 1L , 11L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_brainpoolP384r1); }))) {
            mixin(enumMixinStr_OBJ_brainpoolP384r1);
        }
    }




    static if(!is(typeof(SN_brainpoolP384t1))) {
        private enum enumMixinStr_SN_brainpoolP384t1 = `enum SN_brainpoolP384t1 = "brainpoolP384t1";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_brainpoolP384t1); }))) {
            mixin(enumMixinStr_SN_brainpoolP384t1);
        }
    }




    static if(!is(typeof(NID_brainpoolP384t1))) {
        private enum enumMixinStr_NID_brainpoolP384t1 = `enum NID_brainpoolP384t1 = 932;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_brainpoolP384t1); }))) {
            mixin(enumMixinStr_NID_brainpoolP384t1);
        }
    }




    static if(!is(typeof(OBJ_brainpoolP384t1))) {
        private enum enumMixinStr_OBJ_brainpoolP384t1 = `enum OBJ_brainpoolP384t1 = 1L , 3L , 36L , 3L , 3L , 2L , 8L , 1L , 1L , 12L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_brainpoolP384t1); }))) {
            mixin(enumMixinStr_OBJ_brainpoolP384t1);
        }
    }




    static if(!is(typeof(SN_brainpoolP512r1))) {
        private enum enumMixinStr_SN_brainpoolP512r1 = `enum SN_brainpoolP512r1 = "brainpoolP512r1";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_brainpoolP512r1); }))) {
            mixin(enumMixinStr_SN_brainpoolP512r1);
        }
    }




    static if(!is(typeof(NID_brainpoolP512r1))) {
        private enum enumMixinStr_NID_brainpoolP512r1 = `enum NID_brainpoolP512r1 = 933;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_brainpoolP512r1); }))) {
            mixin(enumMixinStr_NID_brainpoolP512r1);
        }
    }




    static if(!is(typeof(OBJ_brainpoolP512r1))) {
        private enum enumMixinStr_OBJ_brainpoolP512r1 = `enum OBJ_brainpoolP512r1 = 1L , 3L , 36L , 3L , 3L , 2L , 8L , 1L , 1L , 13L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_brainpoolP512r1); }))) {
            mixin(enumMixinStr_OBJ_brainpoolP512r1);
        }
    }




    static if(!is(typeof(SN_brainpoolP512t1))) {
        private enum enumMixinStr_SN_brainpoolP512t1 = `enum SN_brainpoolP512t1 = "brainpoolP512t1";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_brainpoolP512t1); }))) {
            mixin(enumMixinStr_SN_brainpoolP512t1);
        }
    }




    static if(!is(typeof(NID_brainpoolP512t1))) {
        private enum enumMixinStr_NID_brainpoolP512t1 = `enum NID_brainpoolP512t1 = 934;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_brainpoolP512t1); }))) {
            mixin(enumMixinStr_NID_brainpoolP512t1);
        }
    }




    static if(!is(typeof(OBJ_brainpoolP512t1))) {
        private enum enumMixinStr_OBJ_brainpoolP512t1 = `enum OBJ_brainpoolP512t1 = 1L , 3L , 36L , 3L , 3L , 2L , 8L , 1L , 1L , 14L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_brainpoolP512t1); }))) {
            mixin(enumMixinStr_OBJ_brainpoolP512t1);
        }
    }




    static if(!is(typeof(OBJ_x9_63_scheme))) {
        private enum enumMixinStr_OBJ_x9_63_scheme = `enum OBJ_x9_63_scheme = 1L , 3L , 133L , 16L , 840L , 63L , 0L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_x9_63_scheme); }))) {
            mixin(enumMixinStr_OBJ_x9_63_scheme);
        }
    }




    static if(!is(typeof(OBJ_secg_scheme))) {
        private enum enumMixinStr_OBJ_secg_scheme = `enum OBJ_secg_scheme = 1L , 3L , 132L , 1L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_secg_scheme); }))) {
            mixin(enumMixinStr_OBJ_secg_scheme);
        }
    }




    static if(!is(typeof(SN_dhSinglePass_stdDH_sha1kdf_scheme))) {
        private enum enumMixinStr_SN_dhSinglePass_stdDH_sha1kdf_scheme = `enum SN_dhSinglePass_stdDH_sha1kdf_scheme = "dhSinglePass-stdDH-sha1kdf-scheme";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_dhSinglePass_stdDH_sha1kdf_scheme); }))) {
            mixin(enumMixinStr_SN_dhSinglePass_stdDH_sha1kdf_scheme);
        }
    }




    static if(!is(typeof(NID_dhSinglePass_stdDH_sha1kdf_scheme))) {
        private enum enumMixinStr_NID_dhSinglePass_stdDH_sha1kdf_scheme = `enum NID_dhSinglePass_stdDH_sha1kdf_scheme = 936;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_dhSinglePass_stdDH_sha1kdf_scheme); }))) {
            mixin(enumMixinStr_NID_dhSinglePass_stdDH_sha1kdf_scheme);
        }
    }




    static if(!is(typeof(OBJ_dhSinglePass_stdDH_sha1kdf_scheme))) {
        private enum enumMixinStr_OBJ_dhSinglePass_stdDH_sha1kdf_scheme = `enum OBJ_dhSinglePass_stdDH_sha1kdf_scheme = 1L , 3L , 133L , 16L , 840L , 63L , 0L , 2L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_dhSinglePass_stdDH_sha1kdf_scheme); }))) {
            mixin(enumMixinStr_OBJ_dhSinglePass_stdDH_sha1kdf_scheme);
        }
    }




    static if(!is(typeof(SN_dhSinglePass_stdDH_sha224kdf_scheme))) {
        private enum enumMixinStr_SN_dhSinglePass_stdDH_sha224kdf_scheme = `enum SN_dhSinglePass_stdDH_sha224kdf_scheme = "dhSinglePass-stdDH-sha224kdf-scheme";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_dhSinglePass_stdDH_sha224kdf_scheme); }))) {
            mixin(enumMixinStr_SN_dhSinglePass_stdDH_sha224kdf_scheme);
        }
    }




    static if(!is(typeof(NID_dhSinglePass_stdDH_sha224kdf_scheme))) {
        private enum enumMixinStr_NID_dhSinglePass_stdDH_sha224kdf_scheme = `enum NID_dhSinglePass_stdDH_sha224kdf_scheme = 937;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_dhSinglePass_stdDH_sha224kdf_scheme); }))) {
            mixin(enumMixinStr_NID_dhSinglePass_stdDH_sha224kdf_scheme);
        }
    }




    static if(!is(typeof(OBJ_dhSinglePass_stdDH_sha224kdf_scheme))) {
        private enum enumMixinStr_OBJ_dhSinglePass_stdDH_sha224kdf_scheme = `enum OBJ_dhSinglePass_stdDH_sha224kdf_scheme = 1L , 3L , 132L , 1L , 11L , 0L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_dhSinglePass_stdDH_sha224kdf_scheme); }))) {
            mixin(enumMixinStr_OBJ_dhSinglePass_stdDH_sha224kdf_scheme);
        }
    }




    static if(!is(typeof(SN_dhSinglePass_stdDH_sha256kdf_scheme))) {
        private enum enumMixinStr_SN_dhSinglePass_stdDH_sha256kdf_scheme = `enum SN_dhSinglePass_stdDH_sha256kdf_scheme = "dhSinglePass-stdDH-sha256kdf-scheme";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_dhSinglePass_stdDH_sha256kdf_scheme); }))) {
            mixin(enumMixinStr_SN_dhSinglePass_stdDH_sha256kdf_scheme);
        }
    }




    static if(!is(typeof(NID_dhSinglePass_stdDH_sha256kdf_scheme))) {
        private enum enumMixinStr_NID_dhSinglePass_stdDH_sha256kdf_scheme = `enum NID_dhSinglePass_stdDH_sha256kdf_scheme = 938;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_dhSinglePass_stdDH_sha256kdf_scheme); }))) {
            mixin(enumMixinStr_NID_dhSinglePass_stdDH_sha256kdf_scheme);
        }
    }




    static if(!is(typeof(OBJ_dhSinglePass_stdDH_sha256kdf_scheme))) {
        private enum enumMixinStr_OBJ_dhSinglePass_stdDH_sha256kdf_scheme = `enum OBJ_dhSinglePass_stdDH_sha256kdf_scheme = 1L , 3L , 132L , 1L , 11L , 1L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_dhSinglePass_stdDH_sha256kdf_scheme); }))) {
            mixin(enumMixinStr_OBJ_dhSinglePass_stdDH_sha256kdf_scheme);
        }
    }




    static if(!is(typeof(SN_dhSinglePass_stdDH_sha384kdf_scheme))) {
        private enum enumMixinStr_SN_dhSinglePass_stdDH_sha384kdf_scheme = `enum SN_dhSinglePass_stdDH_sha384kdf_scheme = "dhSinglePass-stdDH-sha384kdf-scheme";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_dhSinglePass_stdDH_sha384kdf_scheme); }))) {
            mixin(enumMixinStr_SN_dhSinglePass_stdDH_sha384kdf_scheme);
        }
    }




    static if(!is(typeof(NID_dhSinglePass_stdDH_sha384kdf_scheme))) {
        private enum enumMixinStr_NID_dhSinglePass_stdDH_sha384kdf_scheme = `enum NID_dhSinglePass_stdDH_sha384kdf_scheme = 939;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_dhSinglePass_stdDH_sha384kdf_scheme); }))) {
            mixin(enumMixinStr_NID_dhSinglePass_stdDH_sha384kdf_scheme);
        }
    }




    static if(!is(typeof(OBJ_dhSinglePass_stdDH_sha384kdf_scheme))) {
        private enum enumMixinStr_OBJ_dhSinglePass_stdDH_sha384kdf_scheme = `enum OBJ_dhSinglePass_stdDH_sha384kdf_scheme = 1L , 3L , 132L , 1L , 11L , 2L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_dhSinglePass_stdDH_sha384kdf_scheme); }))) {
            mixin(enumMixinStr_OBJ_dhSinglePass_stdDH_sha384kdf_scheme);
        }
    }




    static if(!is(typeof(SN_dhSinglePass_stdDH_sha512kdf_scheme))) {
        private enum enumMixinStr_SN_dhSinglePass_stdDH_sha512kdf_scheme = `enum SN_dhSinglePass_stdDH_sha512kdf_scheme = "dhSinglePass-stdDH-sha512kdf-scheme";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_dhSinglePass_stdDH_sha512kdf_scheme); }))) {
            mixin(enumMixinStr_SN_dhSinglePass_stdDH_sha512kdf_scheme);
        }
    }




    static if(!is(typeof(NID_dhSinglePass_stdDH_sha512kdf_scheme))) {
        private enum enumMixinStr_NID_dhSinglePass_stdDH_sha512kdf_scheme = `enum NID_dhSinglePass_stdDH_sha512kdf_scheme = 940;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_dhSinglePass_stdDH_sha512kdf_scheme); }))) {
            mixin(enumMixinStr_NID_dhSinglePass_stdDH_sha512kdf_scheme);
        }
    }




    static if(!is(typeof(OBJ_dhSinglePass_stdDH_sha512kdf_scheme))) {
        private enum enumMixinStr_OBJ_dhSinglePass_stdDH_sha512kdf_scheme = `enum OBJ_dhSinglePass_stdDH_sha512kdf_scheme = 1L , 3L , 132L , 1L , 11L , 3L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_dhSinglePass_stdDH_sha512kdf_scheme); }))) {
            mixin(enumMixinStr_OBJ_dhSinglePass_stdDH_sha512kdf_scheme);
        }
    }




    static if(!is(typeof(SN_dhSinglePass_cofactorDH_sha1kdf_scheme))) {
        private enum enumMixinStr_SN_dhSinglePass_cofactorDH_sha1kdf_scheme = `enum SN_dhSinglePass_cofactorDH_sha1kdf_scheme = "dhSinglePass-cofactorDH-sha1kdf-scheme";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_dhSinglePass_cofactorDH_sha1kdf_scheme); }))) {
            mixin(enumMixinStr_SN_dhSinglePass_cofactorDH_sha1kdf_scheme);
        }
    }




    static if(!is(typeof(NID_dhSinglePass_cofactorDH_sha1kdf_scheme))) {
        private enum enumMixinStr_NID_dhSinglePass_cofactorDH_sha1kdf_scheme = `enum NID_dhSinglePass_cofactorDH_sha1kdf_scheme = 941;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_dhSinglePass_cofactorDH_sha1kdf_scheme); }))) {
            mixin(enumMixinStr_NID_dhSinglePass_cofactorDH_sha1kdf_scheme);
        }
    }




    static if(!is(typeof(OBJ_dhSinglePass_cofactorDH_sha1kdf_scheme))) {
        private enum enumMixinStr_OBJ_dhSinglePass_cofactorDH_sha1kdf_scheme = `enum OBJ_dhSinglePass_cofactorDH_sha1kdf_scheme = 1L , 3L , 133L , 16L , 840L , 63L , 0L , 3L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_dhSinglePass_cofactorDH_sha1kdf_scheme); }))) {
            mixin(enumMixinStr_OBJ_dhSinglePass_cofactorDH_sha1kdf_scheme);
        }
    }




    static if(!is(typeof(SN_dhSinglePass_cofactorDH_sha224kdf_scheme))) {
        private enum enumMixinStr_SN_dhSinglePass_cofactorDH_sha224kdf_scheme = `enum SN_dhSinglePass_cofactorDH_sha224kdf_scheme = "dhSinglePass-cofactorDH-sha224kdf-scheme";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_dhSinglePass_cofactorDH_sha224kdf_scheme); }))) {
            mixin(enumMixinStr_SN_dhSinglePass_cofactorDH_sha224kdf_scheme);
        }
    }




    static if(!is(typeof(NID_dhSinglePass_cofactorDH_sha224kdf_scheme))) {
        private enum enumMixinStr_NID_dhSinglePass_cofactorDH_sha224kdf_scheme = `enum NID_dhSinglePass_cofactorDH_sha224kdf_scheme = 942;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_dhSinglePass_cofactorDH_sha224kdf_scheme); }))) {
            mixin(enumMixinStr_NID_dhSinglePass_cofactorDH_sha224kdf_scheme);
        }
    }




    static if(!is(typeof(OBJ_dhSinglePass_cofactorDH_sha224kdf_scheme))) {
        private enum enumMixinStr_OBJ_dhSinglePass_cofactorDH_sha224kdf_scheme = `enum OBJ_dhSinglePass_cofactorDH_sha224kdf_scheme = 1L , 3L , 132L , 1L , 14L , 0L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_dhSinglePass_cofactorDH_sha224kdf_scheme); }))) {
            mixin(enumMixinStr_OBJ_dhSinglePass_cofactorDH_sha224kdf_scheme);
        }
    }




    static if(!is(typeof(SN_dhSinglePass_cofactorDH_sha256kdf_scheme))) {
        private enum enumMixinStr_SN_dhSinglePass_cofactorDH_sha256kdf_scheme = `enum SN_dhSinglePass_cofactorDH_sha256kdf_scheme = "dhSinglePass-cofactorDH-sha256kdf-scheme";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_dhSinglePass_cofactorDH_sha256kdf_scheme); }))) {
            mixin(enumMixinStr_SN_dhSinglePass_cofactorDH_sha256kdf_scheme);
        }
    }




    static if(!is(typeof(NID_dhSinglePass_cofactorDH_sha256kdf_scheme))) {
        private enum enumMixinStr_NID_dhSinglePass_cofactorDH_sha256kdf_scheme = `enum NID_dhSinglePass_cofactorDH_sha256kdf_scheme = 943;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_dhSinglePass_cofactorDH_sha256kdf_scheme); }))) {
            mixin(enumMixinStr_NID_dhSinglePass_cofactorDH_sha256kdf_scheme);
        }
    }




    static if(!is(typeof(OBJ_dhSinglePass_cofactorDH_sha256kdf_scheme))) {
        private enum enumMixinStr_OBJ_dhSinglePass_cofactorDH_sha256kdf_scheme = `enum OBJ_dhSinglePass_cofactorDH_sha256kdf_scheme = 1L , 3L , 132L , 1L , 14L , 1L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_dhSinglePass_cofactorDH_sha256kdf_scheme); }))) {
            mixin(enumMixinStr_OBJ_dhSinglePass_cofactorDH_sha256kdf_scheme);
        }
    }




    static if(!is(typeof(SN_dhSinglePass_cofactorDH_sha384kdf_scheme))) {
        private enum enumMixinStr_SN_dhSinglePass_cofactorDH_sha384kdf_scheme = `enum SN_dhSinglePass_cofactorDH_sha384kdf_scheme = "dhSinglePass-cofactorDH-sha384kdf-scheme";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_dhSinglePass_cofactorDH_sha384kdf_scheme); }))) {
            mixin(enumMixinStr_SN_dhSinglePass_cofactorDH_sha384kdf_scheme);
        }
    }




    static if(!is(typeof(NID_dhSinglePass_cofactorDH_sha384kdf_scheme))) {
        private enum enumMixinStr_NID_dhSinglePass_cofactorDH_sha384kdf_scheme = `enum NID_dhSinglePass_cofactorDH_sha384kdf_scheme = 944;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_dhSinglePass_cofactorDH_sha384kdf_scheme); }))) {
            mixin(enumMixinStr_NID_dhSinglePass_cofactorDH_sha384kdf_scheme);
        }
    }




    static if(!is(typeof(OBJ_dhSinglePass_cofactorDH_sha384kdf_scheme))) {
        private enum enumMixinStr_OBJ_dhSinglePass_cofactorDH_sha384kdf_scheme = `enum OBJ_dhSinglePass_cofactorDH_sha384kdf_scheme = 1L , 3L , 132L , 1L , 14L , 2L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_dhSinglePass_cofactorDH_sha384kdf_scheme); }))) {
            mixin(enumMixinStr_OBJ_dhSinglePass_cofactorDH_sha384kdf_scheme);
        }
    }




    static if(!is(typeof(SN_dhSinglePass_cofactorDH_sha512kdf_scheme))) {
        private enum enumMixinStr_SN_dhSinglePass_cofactorDH_sha512kdf_scheme = `enum SN_dhSinglePass_cofactorDH_sha512kdf_scheme = "dhSinglePass-cofactorDH-sha512kdf-scheme";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_dhSinglePass_cofactorDH_sha512kdf_scheme); }))) {
            mixin(enumMixinStr_SN_dhSinglePass_cofactorDH_sha512kdf_scheme);
        }
    }




    static if(!is(typeof(NID_dhSinglePass_cofactorDH_sha512kdf_scheme))) {
        private enum enumMixinStr_NID_dhSinglePass_cofactorDH_sha512kdf_scheme = `enum NID_dhSinglePass_cofactorDH_sha512kdf_scheme = 945;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_dhSinglePass_cofactorDH_sha512kdf_scheme); }))) {
            mixin(enumMixinStr_NID_dhSinglePass_cofactorDH_sha512kdf_scheme);
        }
    }




    static if(!is(typeof(OBJ_dhSinglePass_cofactorDH_sha512kdf_scheme))) {
        private enum enumMixinStr_OBJ_dhSinglePass_cofactorDH_sha512kdf_scheme = `enum OBJ_dhSinglePass_cofactorDH_sha512kdf_scheme = 1L , 3L , 132L , 1L , 14L , 3L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_dhSinglePass_cofactorDH_sha512kdf_scheme); }))) {
            mixin(enumMixinStr_OBJ_dhSinglePass_cofactorDH_sha512kdf_scheme);
        }
    }




    static if(!is(typeof(SN_dh_std_kdf))) {
        private enum enumMixinStr_SN_dh_std_kdf = `enum SN_dh_std_kdf = "dh-std-kdf";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_dh_std_kdf); }))) {
            mixin(enumMixinStr_SN_dh_std_kdf);
        }
    }




    static if(!is(typeof(NID_dh_std_kdf))) {
        private enum enumMixinStr_NID_dh_std_kdf = `enum NID_dh_std_kdf = 946;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_dh_std_kdf); }))) {
            mixin(enumMixinStr_NID_dh_std_kdf);
        }
    }




    static if(!is(typeof(SN_dh_cofactor_kdf))) {
        private enum enumMixinStr_SN_dh_cofactor_kdf = `enum SN_dh_cofactor_kdf = "dh-cofactor-kdf";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_dh_cofactor_kdf); }))) {
            mixin(enumMixinStr_SN_dh_cofactor_kdf);
        }
    }




    static if(!is(typeof(NID_dh_cofactor_kdf))) {
        private enum enumMixinStr_NID_dh_cofactor_kdf = `enum NID_dh_cofactor_kdf = 947;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_dh_cofactor_kdf); }))) {
            mixin(enumMixinStr_NID_dh_cofactor_kdf);
        }
    }




    static if(!is(typeof(SN_ct_precert_scts))) {
        private enum enumMixinStr_SN_ct_precert_scts = `enum SN_ct_precert_scts = "ct_precert_scts";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_ct_precert_scts); }))) {
            mixin(enumMixinStr_SN_ct_precert_scts);
        }
    }




    static if(!is(typeof(LN_ct_precert_scts))) {
        private enum enumMixinStr_LN_ct_precert_scts = `enum LN_ct_precert_scts = "CT Precertificate SCTs";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_ct_precert_scts); }))) {
            mixin(enumMixinStr_LN_ct_precert_scts);
        }
    }




    static if(!is(typeof(NID_ct_precert_scts))) {
        private enum enumMixinStr_NID_ct_precert_scts = `enum NID_ct_precert_scts = 951;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_ct_precert_scts); }))) {
            mixin(enumMixinStr_NID_ct_precert_scts);
        }
    }




    static if(!is(typeof(OBJ_ct_precert_scts))) {
        private enum enumMixinStr_OBJ_ct_precert_scts = `enum OBJ_ct_precert_scts = 1L , 3L , 6L , 1L , 4L , 1L , 11129L , 2L , 4L , 2L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_ct_precert_scts); }))) {
            mixin(enumMixinStr_OBJ_ct_precert_scts);
        }
    }




    static if(!is(typeof(SN_ct_precert_poison))) {
        private enum enumMixinStr_SN_ct_precert_poison = `enum SN_ct_precert_poison = "ct_precert_poison";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_ct_precert_poison); }))) {
            mixin(enumMixinStr_SN_ct_precert_poison);
        }
    }




    static if(!is(typeof(LN_ct_precert_poison))) {
        private enum enumMixinStr_LN_ct_precert_poison = `enum LN_ct_precert_poison = "CT Precertificate Poison";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_ct_precert_poison); }))) {
            mixin(enumMixinStr_LN_ct_precert_poison);
        }
    }




    static if(!is(typeof(NID_ct_precert_poison))) {
        private enum enumMixinStr_NID_ct_precert_poison = `enum NID_ct_precert_poison = 952;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_ct_precert_poison); }))) {
            mixin(enumMixinStr_NID_ct_precert_poison);
        }
    }




    static if(!is(typeof(OBJ_ct_precert_poison))) {
        private enum enumMixinStr_OBJ_ct_precert_poison = `enum OBJ_ct_precert_poison = 1L , 3L , 6L , 1L , 4L , 1L , 11129L , 2L , 4L , 3L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_ct_precert_poison); }))) {
            mixin(enumMixinStr_OBJ_ct_precert_poison);
        }
    }




    static if(!is(typeof(SN_ct_precert_signer))) {
        private enum enumMixinStr_SN_ct_precert_signer = `enum SN_ct_precert_signer = "ct_precert_signer";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_ct_precert_signer); }))) {
            mixin(enumMixinStr_SN_ct_precert_signer);
        }
    }




    static if(!is(typeof(LN_ct_precert_signer))) {
        private enum enumMixinStr_LN_ct_precert_signer = `enum LN_ct_precert_signer = "CT Precertificate Signer";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_ct_precert_signer); }))) {
            mixin(enumMixinStr_LN_ct_precert_signer);
        }
    }




    static if(!is(typeof(NID_ct_precert_signer))) {
        private enum enumMixinStr_NID_ct_precert_signer = `enum NID_ct_precert_signer = 953;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_ct_precert_signer); }))) {
            mixin(enumMixinStr_NID_ct_precert_signer);
        }
    }




    static if(!is(typeof(OBJ_ct_precert_signer))) {
        private enum enumMixinStr_OBJ_ct_precert_signer = `enum OBJ_ct_precert_signer = 1L , 3L , 6L , 1L , 4L , 1L , 11129L , 2L , 4L , 4L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_ct_precert_signer); }))) {
            mixin(enumMixinStr_OBJ_ct_precert_signer);
        }
    }




    static if(!is(typeof(SN_ct_cert_scts))) {
        private enum enumMixinStr_SN_ct_cert_scts = `enum SN_ct_cert_scts = "ct_cert_scts";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_ct_cert_scts); }))) {
            mixin(enumMixinStr_SN_ct_cert_scts);
        }
    }




    static if(!is(typeof(LN_ct_cert_scts))) {
        private enum enumMixinStr_LN_ct_cert_scts = `enum LN_ct_cert_scts = "CT Certificate SCTs";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_ct_cert_scts); }))) {
            mixin(enumMixinStr_LN_ct_cert_scts);
        }
    }




    static if(!is(typeof(NID_ct_cert_scts))) {
        private enum enumMixinStr_NID_ct_cert_scts = `enum NID_ct_cert_scts = 954;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_ct_cert_scts); }))) {
            mixin(enumMixinStr_NID_ct_cert_scts);
        }
    }




    static if(!is(typeof(OBJ_ct_cert_scts))) {
        private enum enumMixinStr_OBJ_ct_cert_scts = `enum OBJ_ct_cert_scts = 1L , 3L , 6L , 1L , 4L , 1L , 11129L , 2L , 4L , 5L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_ct_cert_scts); }))) {
            mixin(enumMixinStr_OBJ_ct_cert_scts);
        }
    }




    static if(!is(typeof(SN_jurisdictionLocalityName))) {
        private enum enumMixinStr_SN_jurisdictionLocalityName = `enum SN_jurisdictionLocalityName = "jurisdictionL";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_jurisdictionLocalityName); }))) {
            mixin(enumMixinStr_SN_jurisdictionLocalityName);
        }
    }




    static if(!is(typeof(LN_jurisdictionLocalityName))) {
        private enum enumMixinStr_LN_jurisdictionLocalityName = `enum LN_jurisdictionLocalityName = "jurisdictionLocalityName";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_jurisdictionLocalityName); }))) {
            mixin(enumMixinStr_LN_jurisdictionLocalityName);
        }
    }




    static if(!is(typeof(NID_jurisdictionLocalityName))) {
        private enum enumMixinStr_NID_jurisdictionLocalityName = `enum NID_jurisdictionLocalityName = 955;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_jurisdictionLocalityName); }))) {
            mixin(enumMixinStr_NID_jurisdictionLocalityName);
        }
    }




    static if(!is(typeof(OBJ_jurisdictionLocalityName))) {
        private enum enumMixinStr_OBJ_jurisdictionLocalityName = `enum OBJ_jurisdictionLocalityName = 1L , 3L , 6L , 1L , 4L , 1L , 311L , 60L , 2L , 1L , 1L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_jurisdictionLocalityName); }))) {
            mixin(enumMixinStr_OBJ_jurisdictionLocalityName);
        }
    }




    static if(!is(typeof(SN_jurisdictionStateOrProvinceName))) {
        private enum enumMixinStr_SN_jurisdictionStateOrProvinceName = `enum SN_jurisdictionStateOrProvinceName = "jurisdictionST";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_jurisdictionStateOrProvinceName); }))) {
            mixin(enumMixinStr_SN_jurisdictionStateOrProvinceName);
        }
    }




    static if(!is(typeof(LN_jurisdictionStateOrProvinceName))) {
        private enum enumMixinStr_LN_jurisdictionStateOrProvinceName = `enum LN_jurisdictionStateOrProvinceName = "jurisdictionStateOrProvinceName";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_jurisdictionStateOrProvinceName); }))) {
            mixin(enumMixinStr_LN_jurisdictionStateOrProvinceName);
        }
    }




    static if(!is(typeof(NID_jurisdictionStateOrProvinceName))) {
        private enum enumMixinStr_NID_jurisdictionStateOrProvinceName = `enum NID_jurisdictionStateOrProvinceName = 956;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_jurisdictionStateOrProvinceName); }))) {
            mixin(enumMixinStr_NID_jurisdictionStateOrProvinceName);
        }
    }




    static if(!is(typeof(OBJ_jurisdictionStateOrProvinceName))) {
        private enum enumMixinStr_OBJ_jurisdictionStateOrProvinceName = `enum OBJ_jurisdictionStateOrProvinceName = 1L , 3L , 6L , 1L , 4L , 1L , 311L , 60L , 2L , 1L , 2L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_jurisdictionStateOrProvinceName); }))) {
            mixin(enumMixinStr_OBJ_jurisdictionStateOrProvinceName);
        }
    }




    static if(!is(typeof(SN_jurisdictionCountryName))) {
        private enum enumMixinStr_SN_jurisdictionCountryName = `enum SN_jurisdictionCountryName = "jurisdictionC";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_jurisdictionCountryName); }))) {
            mixin(enumMixinStr_SN_jurisdictionCountryName);
        }
    }




    static if(!is(typeof(LN_jurisdictionCountryName))) {
        private enum enumMixinStr_LN_jurisdictionCountryName = `enum LN_jurisdictionCountryName = "jurisdictionCountryName";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_jurisdictionCountryName); }))) {
            mixin(enumMixinStr_LN_jurisdictionCountryName);
        }
    }




    static if(!is(typeof(NID_jurisdictionCountryName))) {
        private enum enumMixinStr_NID_jurisdictionCountryName = `enum NID_jurisdictionCountryName = 957;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_jurisdictionCountryName); }))) {
            mixin(enumMixinStr_NID_jurisdictionCountryName);
        }
    }




    static if(!is(typeof(OBJ_jurisdictionCountryName))) {
        private enum enumMixinStr_OBJ_jurisdictionCountryName = `enum OBJ_jurisdictionCountryName = 1L , 3L , 6L , 1L , 4L , 1L , 311L , 60L , 2L , 1L , 3L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_jurisdictionCountryName); }))) {
            mixin(enumMixinStr_OBJ_jurisdictionCountryName);
        }
    }




    static if(!is(typeof(SN_id_scrypt))) {
        private enum enumMixinStr_SN_id_scrypt = `enum SN_id_scrypt = "id-scrypt";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_scrypt); }))) {
            mixin(enumMixinStr_SN_id_scrypt);
        }
    }




    static if(!is(typeof(LN_id_scrypt))) {
        private enum enumMixinStr_LN_id_scrypt = `enum LN_id_scrypt = "scrypt";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_id_scrypt); }))) {
            mixin(enumMixinStr_LN_id_scrypt);
        }
    }




    static if(!is(typeof(NID_id_scrypt))) {
        private enum enumMixinStr_NID_id_scrypt = `enum NID_id_scrypt = 973;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_scrypt); }))) {
            mixin(enumMixinStr_NID_id_scrypt);
        }
    }




    static if(!is(typeof(OBJ_id_scrypt))) {
        private enum enumMixinStr_OBJ_id_scrypt = `enum OBJ_id_scrypt = 1L , 3L , 6L , 1L , 4L , 1L , 11591L , 4L , 11L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_scrypt); }))) {
            mixin(enumMixinStr_OBJ_id_scrypt);
        }
    }




    static if(!is(typeof(SN_tls1_prf))) {
        private enum enumMixinStr_SN_tls1_prf = `enum SN_tls1_prf = "TLS1-PRF";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_tls1_prf); }))) {
            mixin(enumMixinStr_SN_tls1_prf);
        }
    }




    static if(!is(typeof(LN_tls1_prf))) {
        private enum enumMixinStr_LN_tls1_prf = `enum LN_tls1_prf = "tls1-prf";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_tls1_prf); }))) {
            mixin(enumMixinStr_LN_tls1_prf);
        }
    }




    static if(!is(typeof(NID_tls1_prf))) {
        private enum enumMixinStr_NID_tls1_prf = `enum NID_tls1_prf = 1021;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_tls1_prf); }))) {
            mixin(enumMixinStr_NID_tls1_prf);
        }
    }




    static if(!is(typeof(SN_hkdf))) {
        private enum enumMixinStr_SN_hkdf = `enum SN_hkdf = "HKDF";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_hkdf); }))) {
            mixin(enumMixinStr_SN_hkdf);
        }
    }




    static if(!is(typeof(LN_hkdf))) {
        private enum enumMixinStr_LN_hkdf = `enum LN_hkdf = "hkdf";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_hkdf); }))) {
            mixin(enumMixinStr_LN_hkdf);
        }
    }




    static if(!is(typeof(NID_hkdf))) {
        private enum enumMixinStr_NID_hkdf = `enum NID_hkdf = 1036;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_hkdf); }))) {
            mixin(enumMixinStr_NID_hkdf);
        }
    }




    static if(!is(typeof(SN_id_pkinit))) {
        private enum enumMixinStr_SN_id_pkinit = `enum SN_id_pkinit = "id-pkinit";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_id_pkinit); }))) {
            mixin(enumMixinStr_SN_id_pkinit);
        }
    }




    static if(!is(typeof(NID_id_pkinit))) {
        private enum enumMixinStr_NID_id_pkinit = `enum NID_id_pkinit = 1031;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_id_pkinit); }))) {
            mixin(enumMixinStr_NID_id_pkinit);
        }
    }




    static if(!is(typeof(OBJ_id_pkinit))) {
        private enum enumMixinStr_OBJ_id_pkinit = `enum OBJ_id_pkinit = 1L , 3L , 6L , 1L , 5L , 2L , 3L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_id_pkinit); }))) {
            mixin(enumMixinStr_OBJ_id_pkinit);
        }
    }




    static if(!is(typeof(SN_pkInitClientAuth))) {
        private enum enumMixinStr_SN_pkInitClientAuth = `enum SN_pkInitClientAuth = "pkInitClientAuth";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_pkInitClientAuth); }))) {
            mixin(enumMixinStr_SN_pkInitClientAuth);
        }
    }




    static if(!is(typeof(LN_pkInitClientAuth))) {
        private enum enumMixinStr_LN_pkInitClientAuth = `enum LN_pkInitClientAuth = "PKINIT Client Auth";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_pkInitClientAuth); }))) {
            mixin(enumMixinStr_LN_pkInitClientAuth);
        }
    }




    static if(!is(typeof(NID_pkInitClientAuth))) {
        private enum enumMixinStr_NID_pkInitClientAuth = `enum NID_pkInitClientAuth = 1032;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_pkInitClientAuth); }))) {
            mixin(enumMixinStr_NID_pkInitClientAuth);
        }
    }




    static if(!is(typeof(OBJ_pkInitClientAuth))) {
        private enum enumMixinStr_OBJ_pkInitClientAuth = `enum OBJ_pkInitClientAuth = 1L , 3L , 6L , 1L , 5L , 2L , 3L , 4L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_pkInitClientAuth); }))) {
            mixin(enumMixinStr_OBJ_pkInitClientAuth);
        }
    }




    static if(!is(typeof(SN_pkInitKDC))) {
        private enum enumMixinStr_SN_pkInitKDC = `enum SN_pkInitKDC = "pkInitKDC";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_pkInitKDC); }))) {
            mixin(enumMixinStr_SN_pkInitKDC);
        }
    }




    static if(!is(typeof(LN_pkInitKDC))) {
        private enum enumMixinStr_LN_pkInitKDC = `enum LN_pkInitKDC = "Signing KDC Response";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_pkInitKDC); }))) {
            mixin(enumMixinStr_LN_pkInitKDC);
        }
    }




    static if(!is(typeof(NID_pkInitKDC))) {
        private enum enumMixinStr_NID_pkInitKDC = `enum NID_pkInitKDC = 1033;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_pkInitKDC); }))) {
            mixin(enumMixinStr_NID_pkInitKDC);
        }
    }




    static if(!is(typeof(OBJ_pkInitKDC))) {
        private enum enumMixinStr_OBJ_pkInitKDC = `enum OBJ_pkInitKDC = 1L , 3L , 6L , 1L , 5L , 2L , 3L , 5L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_pkInitKDC); }))) {
            mixin(enumMixinStr_OBJ_pkInitKDC);
        }
    }




    static if(!is(typeof(SN_X25519))) {
        private enum enumMixinStr_SN_X25519 = `enum SN_X25519 = "X25519";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_X25519); }))) {
            mixin(enumMixinStr_SN_X25519);
        }
    }




    static if(!is(typeof(NID_X25519))) {
        private enum enumMixinStr_NID_X25519 = `enum NID_X25519 = 1034;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_X25519); }))) {
            mixin(enumMixinStr_NID_X25519);
        }
    }




    static if(!is(typeof(OBJ_X25519))) {
        private enum enumMixinStr_OBJ_X25519 = `enum OBJ_X25519 = 1L , 3L , 101L , 110L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_X25519); }))) {
            mixin(enumMixinStr_OBJ_X25519);
        }
    }




    static if(!is(typeof(SN_X448))) {
        private enum enumMixinStr_SN_X448 = `enum SN_X448 = "X448";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_X448); }))) {
            mixin(enumMixinStr_SN_X448);
        }
    }




    static if(!is(typeof(NID_X448))) {
        private enum enumMixinStr_NID_X448 = `enum NID_X448 = 1035;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_X448); }))) {
            mixin(enumMixinStr_NID_X448);
        }
    }




    static if(!is(typeof(OBJ_X448))) {
        private enum enumMixinStr_OBJ_X448 = `enum OBJ_X448 = 1L , 3L , 101L , 111L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_X448); }))) {
            mixin(enumMixinStr_OBJ_X448);
        }
    }




    static if(!is(typeof(SN_ED25519))) {
        private enum enumMixinStr_SN_ED25519 = `enum SN_ED25519 = "ED25519";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_ED25519); }))) {
            mixin(enumMixinStr_SN_ED25519);
        }
    }




    static if(!is(typeof(NID_ED25519))) {
        private enum enumMixinStr_NID_ED25519 = `enum NID_ED25519 = 1087;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_ED25519); }))) {
            mixin(enumMixinStr_NID_ED25519);
        }
    }




    static if(!is(typeof(OBJ_ED25519))) {
        private enum enumMixinStr_OBJ_ED25519 = `enum OBJ_ED25519 = 1L , 3L , 101L , 112L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_ED25519); }))) {
            mixin(enumMixinStr_OBJ_ED25519);
        }
    }




    static if(!is(typeof(SN_ED448))) {
        private enum enumMixinStr_SN_ED448 = `enum SN_ED448 = "ED448";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_ED448); }))) {
            mixin(enumMixinStr_SN_ED448);
        }
    }




    static if(!is(typeof(NID_ED448))) {
        private enum enumMixinStr_NID_ED448 = `enum NID_ED448 = 1088;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_ED448); }))) {
            mixin(enumMixinStr_NID_ED448);
        }
    }




    static if(!is(typeof(OBJ_ED448))) {
        private enum enumMixinStr_OBJ_ED448 = `enum OBJ_ED448 = 1L , 3L , 101L , 113L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_ED448); }))) {
            mixin(enumMixinStr_OBJ_ED448);
        }
    }




    static if(!is(typeof(SN_kx_rsa))) {
        private enum enumMixinStr_SN_kx_rsa = `enum SN_kx_rsa = "KxRSA";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_kx_rsa); }))) {
            mixin(enumMixinStr_SN_kx_rsa);
        }
    }




    static if(!is(typeof(LN_kx_rsa))) {
        private enum enumMixinStr_LN_kx_rsa = `enum LN_kx_rsa = "kx-rsa";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_kx_rsa); }))) {
            mixin(enumMixinStr_LN_kx_rsa);
        }
    }




    static if(!is(typeof(NID_kx_rsa))) {
        private enum enumMixinStr_NID_kx_rsa = `enum NID_kx_rsa = 1037;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_kx_rsa); }))) {
            mixin(enumMixinStr_NID_kx_rsa);
        }
    }




    static if(!is(typeof(SN_kx_ecdhe))) {
        private enum enumMixinStr_SN_kx_ecdhe = `enum SN_kx_ecdhe = "KxECDHE";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_kx_ecdhe); }))) {
            mixin(enumMixinStr_SN_kx_ecdhe);
        }
    }




    static if(!is(typeof(LN_kx_ecdhe))) {
        private enum enumMixinStr_LN_kx_ecdhe = `enum LN_kx_ecdhe = "kx-ecdhe";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_kx_ecdhe); }))) {
            mixin(enumMixinStr_LN_kx_ecdhe);
        }
    }




    static if(!is(typeof(NID_kx_ecdhe))) {
        private enum enumMixinStr_NID_kx_ecdhe = `enum NID_kx_ecdhe = 1038;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_kx_ecdhe); }))) {
            mixin(enumMixinStr_NID_kx_ecdhe);
        }
    }




    static if(!is(typeof(SN_kx_dhe))) {
        private enum enumMixinStr_SN_kx_dhe = `enum SN_kx_dhe = "KxDHE";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_kx_dhe); }))) {
            mixin(enumMixinStr_SN_kx_dhe);
        }
    }




    static if(!is(typeof(LN_kx_dhe))) {
        private enum enumMixinStr_LN_kx_dhe = `enum LN_kx_dhe = "kx-dhe";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_kx_dhe); }))) {
            mixin(enumMixinStr_LN_kx_dhe);
        }
    }




    static if(!is(typeof(NID_kx_dhe))) {
        private enum enumMixinStr_NID_kx_dhe = `enum NID_kx_dhe = 1039;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_kx_dhe); }))) {
            mixin(enumMixinStr_NID_kx_dhe);
        }
    }




    static if(!is(typeof(SN_kx_ecdhe_psk))) {
        private enum enumMixinStr_SN_kx_ecdhe_psk = `enum SN_kx_ecdhe_psk = "KxECDHE-PSK";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_kx_ecdhe_psk); }))) {
            mixin(enumMixinStr_SN_kx_ecdhe_psk);
        }
    }




    static if(!is(typeof(LN_kx_ecdhe_psk))) {
        private enum enumMixinStr_LN_kx_ecdhe_psk = `enum LN_kx_ecdhe_psk = "kx-ecdhe-psk";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_kx_ecdhe_psk); }))) {
            mixin(enumMixinStr_LN_kx_ecdhe_psk);
        }
    }




    static if(!is(typeof(NID_kx_ecdhe_psk))) {
        private enum enumMixinStr_NID_kx_ecdhe_psk = `enum NID_kx_ecdhe_psk = 1040;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_kx_ecdhe_psk); }))) {
            mixin(enumMixinStr_NID_kx_ecdhe_psk);
        }
    }




    static if(!is(typeof(SN_kx_dhe_psk))) {
        private enum enumMixinStr_SN_kx_dhe_psk = `enum SN_kx_dhe_psk = "KxDHE-PSK";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_kx_dhe_psk); }))) {
            mixin(enumMixinStr_SN_kx_dhe_psk);
        }
    }




    static if(!is(typeof(LN_kx_dhe_psk))) {
        private enum enumMixinStr_LN_kx_dhe_psk = `enum LN_kx_dhe_psk = "kx-dhe-psk";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_kx_dhe_psk); }))) {
            mixin(enumMixinStr_LN_kx_dhe_psk);
        }
    }




    static if(!is(typeof(NID_kx_dhe_psk))) {
        private enum enumMixinStr_NID_kx_dhe_psk = `enum NID_kx_dhe_psk = 1041;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_kx_dhe_psk); }))) {
            mixin(enumMixinStr_NID_kx_dhe_psk);
        }
    }




    static if(!is(typeof(SN_kx_rsa_psk))) {
        private enum enumMixinStr_SN_kx_rsa_psk = `enum SN_kx_rsa_psk = "KxRSA_PSK";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_kx_rsa_psk); }))) {
            mixin(enumMixinStr_SN_kx_rsa_psk);
        }
    }




    static if(!is(typeof(LN_kx_rsa_psk))) {
        private enum enumMixinStr_LN_kx_rsa_psk = `enum LN_kx_rsa_psk = "kx-rsa-psk";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_kx_rsa_psk); }))) {
            mixin(enumMixinStr_LN_kx_rsa_psk);
        }
    }




    static if(!is(typeof(NID_kx_rsa_psk))) {
        private enum enumMixinStr_NID_kx_rsa_psk = `enum NID_kx_rsa_psk = 1042;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_kx_rsa_psk); }))) {
            mixin(enumMixinStr_NID_kx_rsa_psk);
        }
    }




    static if(!is(typeof(SN_kx_psk))) {
        private enum enumMixinStr_SN_kx_psk = `enum SN_kx_psk = "KxPSK";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_kx_psk); }))) {
            mixin(enumMixinStr_SN_kx_psk);
        }
    }




    static if(!is(typeof(LN_kx_psk))) {
        private enum enumMixinStr_LN_kx_psk = `enum LN_kx_psk = "kx-psk";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_kx_psk); }))) {
            mixin(enumMixinStr_LN_kx_psk);
        }
    }




    static if(!is(typeof(NID_kx_psk))) {
        private enum enumMixinStr_NID_kx_psk = `enum NID_kx_psk = 1043;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_kx_psk); }))) {
            mixin(enumMixinStr_NID_kx_psk);
        }
    }




    static if(!is(typeof(SN_kx_srp))) {
        private enum enumMixinStr_SN_kx_srp = `enum SN_kx_srp = "KxSRP";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_kx_srp); }))) {
            mixin(enumMixinStr_SN_kx_srp);
        }
    }




    static if(!is(typeof(LN_kx_srp))) {
        private enum enumMixinStr_LN_kx_srp = `enum LN_kx_srp = "kx-srp";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_kx_srp); }))) {
            mixin(enumMixinStr_LN_kx_srp);
        }
    }




    static if(!is(typeof(NID_kx_srp))) {
        private enum enumMixinStr_NID_kx_srp = `enum NID_kx_srp = 1044;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_kx_srp); }))) {
            mixin(enumMixinStr_NID_kx_srp);
        }
    }




    static if(!is(typeof(SN_kx_gost))) {
        private enum enumMixinStr_SN_kx_gost = `enum SN_kx_gost = "KxGOST";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_kx_gost); }))) {
            mixin(enumMixinStr_SN_kx_gost);
        }
    }




    static if(!is(typeof(LN_kx_gost))) {
        private enum enumMixinStr_LN_kx_gost = `enum LN_kx_gost = "kx-gost";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_kx_gost); }))) {
            mixin(enumMixinStr_LN_kx_gost);
        }
    }




    static if(!is(typeof(NID_kx_gost))) {
        private enum enumMixinStr_NID_kx_gost = `enum NID_kx_gost = 1045;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_kx_gost); }))) {
            mixin(enumMixinStr_NID_kx_gost);
        }
    }




    static if(!is(typeof(SN_kx_any))) {
        private enum enumMixinStr_SN_kx_any = `enum SN_kx_any = "KxANY";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_kx_any); }))) {
            mixin(enumMixinStr_SN_kx_any);
        }
    }




    static if(!is(typeof(LN_kx_any))) {
        private enum enumMixinStr_LN_kx_any = `enum LN_kx_any = "kx-any";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_kx_any); }))) {
            mixin(enumMixinStr_LN_kx_any);
        }
    }




    static if(!is(typeof(NID_kx_any))) {
        private enum enumMixinStr_NID_kx_any = `enum NID_kx_any = 1063;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_kx_any); }))) {
            mixin(enumMixinStr_NID_kx_any);
        }
    }




    static if(!is(typeof(SN_auth_rsa))) {
        private enum enumMixinStr_SN_auth_rsa = `enum SN_auth_rsa = "AuthRSA";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_auth_rsa); }))) {
            mixin(enumMixinStr_SN_auth_rsa);
        }
    }




    static if(!is(typeof(LN_auth_rsa))) {
        private enum enumMixinStr_LN_auth_rsa = `enum LN_auth_rsa = "auth-rsa";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_auth_rsa); }))) {
            mixin(enumMixinStr_LN_auth_rsa);
        }
    }




    static if(!is(typeof(NID_auth_rsa))) {
        private enum enumMixinStr_NID_auth_rsa = `enum NID_auth_rsa = 1046;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_auth_rsa); }))) {
            mixin(enumMixinStr_NID_auth_rsa);
        }
    }




    static if(!is(typeof(SN_auth_ecdsa))) {
        private enum enumMixinStr_SN_auth_ecdsa = `enum SN_auth_ecdsa = "AuthECDSA";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_auth_ecdsa); }))) {
            mixin(enumMixinStr_SN_auth_ecdsa);
        }
    }




    static if(!is(typeof(LN_auth_ecdsa))) {
        private enum enumMixinStr_LN_auth_ecdsa = `enum LN_auth_ecdsa = "auth-ecdsa";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_auth_ecdsa); }))) {
            mixin(enumMixinStr_LN_auth_ecdsa);
        }
    }




    static if(!is(typeof(NID_auth_ecdsa))) {
        private enum enumMixinStr_NID_auth_ecdsa = `enum NID_auth_ecdsa = 1047;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_auth_ecdsa); }))) {
            mixin(enumMixinStr_NID_auth_ecdsa);
        }
    }




    static if(!is(typeof(SN_auth_psk))) {
        private enum enumMixinStr_SN_auth_psk = `enum SN_auth_psk = "AuthPSK";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_auth_psk); }))) {
            mixin(enumMixinStr_SN_auth_psk);
        }
    }




    static if(!is(typeof(LN_auth_psk))) {
        private enum enumMixinStr_LN_auth_psk = `enum LN_auth_psk = "auth-psk";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_auth_psk); }))) {
            mixin(enumMixinStr_LN_auth_psk);
        }
    }




    static if(!is(typeof(NID_auth_psk))) {
        private enum enumMixinStr_NID_auth_psk = `enum NID_auth_psk = 1048;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_auth_psk); }))) {
            mixin(enumMixinStr_NID_auth_psk);
        }
    }




    static if(!is(typeof(SN_auth_dss))) {
        private enum enumMixinStr_SN_auth_dss = `enum SN_auth_dss = "AuthDSS";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_auth_dss); }))) {
            mixin(enumMixinStr_SN_auth_dss);
        }
    }




    static if(!is(typeof(LN_auth_dss))) {
        private enum enumMixinStr_LN_auth_dss = `enum LN_auth_dss = "auth-dss";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_auth_dss); }))) {
            mixin(enumMixinStr_LN_auth_dss);
        }
    }




    static if(!is(typeof(NID_auth_dss))) {
        private enum enumMixinStr_NID_auth_dss = `enum NID_auth_dss = 1049;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_auth_dss); }))) {
            mixin(enumMixinStr_NID_auth_dss);
        }
    }




    static if(!is(typeof(SN_auth_gost01))) {
        private enum enumMixinStr_SN_auth_gost01 = `enum SN_auth_gost01 = "AuthGOST01";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_auth_gost01); }))) {
            mixin(enumMixinStr_SN_auth_gost01);
        }
    }




    static if(!is(typeof(LN_auth_gost01))) {
        private enum enumMixinStr_LN_auth_gost01 = `enum LN_auth_gost01 = "auth-gost01";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_auth_gost01); }))) {
            mixin(enumMixinStr_LN_auth_gost01);
        }
    }




    static if(!is(typeof(NID_auth_gost01))) {
        private enum enumMixinStr_NID_auth_gost01 = `enum NID_auth_gost01 = 1050;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_auth_gost01); }))) {
            mixin(enumMixinStr_NID_auth_gost01);
        }
    }




    static if(!is(typeof(SN_auth_gost12))) {
        private enum enumMixinStr_SN_auth_gost12 = `enum SN_auth_gost12 = "AuthGOST12";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_auth_gost12); }))) {
            mixin(enumMixinStr_SN_auth_gost12);
        }
    }




    static if(!is(typeof(LN_auth_gost12))) {
        private enum enumMixinStr_LN_auth_gost12 = `enum LN_auth_gost12 = "auth-gost12";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_auth_gost12); }))) {
            mixin(enumMixinStr_LN_auth_gost12);
        }
    }




    static if(!is(typeof(NID_auth_gost12))) {
        private enum enumMixinStr_NID_auth_gost12 = `enum NID_auth_gost12 = 1051;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_auth_gost12); }))) {
            mixin(enumMixinStr_NID_auth_gost12);
        }
    }




    static if(!is(typeof(SN_auth_srp))) {
        private enum enumMixinStr_SN_auth_srp = `enum SN_auth_srp = "AuthSRP";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_auth_srp); }))) {
            mixin(enumMixinStr_SN_auth_srp);
        }
    }




    static if(!is(typeof(LN_auth_srp))) {
        private enum enumMixinStr_LN_auth_srp = `enum LN_auth_srp = "auth-srp";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_auth_srp); }))) {
            mixin(enumMixinStr_LN_auth_srp);
        }
    }




    static if(!is(typeof(NID_auth_srp))) {
        private enum enumMixinStr_NID_auth_srp = `enum NID_auth_srp = 1052;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_auth_srp); }))) {
            mixin(enumMixinStr_NID_auth_srp);
        }
    }




    static if(!is(typeof(SN_auth_null))) {
        private enum enumMixinStr_SN_auth_null = `enum SN_auth_null = "AuthNULL";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_auth_null); }))) {
            mixin(enumMixinStr_SN_auth_null);
        }
    }




    static if(!is(typeof(LN_auth_null))) {
        private enum enumMixinStr_LN_auth_null = `enum LN_auth_null = "auth-null";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_auth_null); }))) {
            mixin(enumMixinStr_LN_auth_null);
        }
    }




    static if(!is(typeof(NID_auth_null))) {
        private enum enumMixinStr_NID_auth_null = `enum NID_auth_null = 1053;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_auth_null); }))) {
            mixin(enumMixinStr_NID_auth_null);
        }
    }




    static if(!is(typeof(SN_auth_any))) {
        private enum enumMixinStr_SN_auth_any = `enum SN_auth_any = "AuthANY";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_auth_any); }))) {
            mixin(enumMixinStr_SN_auth_any);
        }
    }




    static if(!is(typeof(LN_auth_any))) {
        private enum enumMixinStr_LN_auth_any = `enum LN_auth_any = "auth-any";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_auth_any); }))) {
            mixin(enumMixinStr_LN_auth_any);
        }
    }




    static if(!is(typeof(NID_auth_any))) {
        private enum enumMixinStr_NID_auth_any = `enum NID_auth_any = 1064;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_auth_any); }))) {
            mixin(enumMixinStr_NID_auth_any);
        }
    }




    static if(!is(typeof(SN_poly1305))) {
        private enum enumMixinStr_SN_poly1305 = `enum SN_poly1305 = "Poly1305";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_poly1305); }))) {
            mixin(enumMixinStr_SN_poly1305);
        }
    }




    static if(!is(typeof(LN_poly1305))) {
        private enum enumMixinStr_LN_poly1305 = `enum LN_poly1305 = "poly1305";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_poly1305); }))) {
            mixin(enumMixinStr_LN_poly1305);
        }
    }




    static if(!is(typeof(NID_poly1305))) {
        private enum enumMixinStr_NID_poly1305 = `enum NID_poly1305 = 1061;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_poly1305); }))) {
            mixin(enumMixinStr_NID_poly1305);
        }
    }




    static if(!is(typeof(SN_siphash))) {
        private enum enumMixinStr_SN_siphash = `enum SN_siphash = "SipHash";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_siphash); }))) {
            mixin(enumMixinStr_SN_siphash);
        }
    }




    static if(!is(typeof(LN_siphash))) {
        private enum enumMixinStr_LN_siphash = `enum LN_siphash = "siphash";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_siphash); }))) {
            mixin(enumMixinStr_LN_siphash);
        }
    }




    static if(!is(typeof(NID_siphash))) {
        private enum enumMixinStr_NID_siphash = `enum NID_siphash = 1062;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_siphash); }))) {
            mixin(enumMixinStr_NID_siphash);
        }
    }




    static if(!is(typeof(SN_ffdhe2048))) {
        private enum enumMixinStr_SN_ffdhe2048 = `enum SN_ffdhe2048 = "ffdhe2048";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_ffdhe2048); }))) {
            mixin(enumMixinStr_SN_ffdhe2048);
        }
    }




    static if(!is(typeof(NID_ffdhe2048))) {
        private enum enumMixinStr_NID_ffdhe2048 = `enum NID_ffdhe2048 = 1126;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_ffdhe2048); }))) {
            mixin(enumMixinStr_NID_ffdhe2048);
        }
    }




    static if(!is(typeof(SN_ffdhe3072))) {
        private enum enumMixinStr_SN_ffdhe3072 = `enum SN_ffdhe3072 = "ffdhe3072";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_ffdhe3072); }))) {
            mixin(enumMixinStr_SN_ffdhe3072);
        }
    }




    static if(!is(typeof(NID_ffdhe3072))) {
        private enum enumMixinStr_NID_ffdhe3072 = `enum NID_ffdhe3072 = 1127;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_ffdhe3072); }))) {
            mixin(enumMixinStr_NID_ffdhe3072);
        }
    }




    static if(!is(typeof(SN_ffdhe4096))) {
        private enum enumMixinStr_SN_ffdhe4096 = `enum SN_ffdhe4096 = "ffdhe4096";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_ffdhe4096); }))) {
            mixin(enumMixinStr_SN_ffdhe4096);
        }
    }




    static if(!is(typeof(NID_ffdhe4096))) {
        private enum enumMixinStr_NID_ffdhe4096 = `enum NID_ffdhe4096 = 1128;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_ffdhe4096); }))) {
            mixin(enumMixinStr_NID_ffdhe4096);
        }
    }




    static if(!is(typeof(SN_ffdhe6144))) {
        private enum enumMixinStr_SN_ffdhe6144 = `enum SN_ffdhe6144 = "ffdhe6144";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_ffdhe6144); }))) {
            mixin(enumMixinStr_SN_ffdhe6144);
        }
    }




    static if(!is(typeof(NID_ffdhe6144))) {
        private enum enumMixinStr_NID_ffdhe6144 = `enum NID_ffdhe6144 = 1129;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_ffdhe6144); }))) {
            mixin(enumMixinStr_NID_ffdhe6144);
        }
    }




    static if(!is(typeof(SN_ffdhe8192))) {
        private enum enumMixinStr_SN_ffdhe8192 = `enum SN_ffdhe8192 = "ffdhe8192";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_ffdhe8192); }))) {
            mixin(enumMixinStr_SN_ffdhe8192);
        }
    }




    static if(!is(typeof(NID_ffdhe8192))) {
        private enum enumMixinStr_NID_ffdhe8192 = `enum NID_ffdhe8192 = 1130;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_ffdhe8192); }))) {
            mixin(enumMixinStr_NID_ffdhe8192);
        }
    }




    static if(!is(typeof(SN_ISO_UA))) {
        private enum enumMixinStr_SN_ISO_UA = `enum SN_ISO_UA = "ISO-UA";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_ISO_UA); }))) {
            mixin(enumMixinStr_SN_ISO_UA);
        }
    }




    static if(!is(typeof(NID_ISO_UA))) {
        private enum enumMixinStr_NID_ISO_UA = `enum NID_ISO_UA = 1150;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_ISO_UA); }))) {
            mixin(enumMixinStr_NID_ISO_UA);
        }
    }




    static if(!is(typeof(OBJ_ISO_UA))) {
        private enum enumMixinStr_OBJ_ISO_UA = `enum OBJ_ISO_UA = 1L , 2L , 804L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_ISO_UA); }))) {
            mixin(enumMixinStr_OBJ_ISO_UA);
        }
    }




    static if(!is(typeof(SN_ua_pki))) {
        private enum enumMixinStr_SN_ua_pki = `enum SN_ua_pki = "ua-pki";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_ua_pki); }))) {
            mixin(enumMixinStr_SN_ua_pki);
        }
    }




    static if(!is(typeof(NID_ua_pki))) {
        private enum enumMixinStr_NID_ua_pki = `enum NID_ua_pki = 1151;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_ua_pki); }))) {
            mixin(enumMixinStr_NID_ua_pki);
        }
    }




    static if(!is(typeof(OBJ_ua_pki))) {
        private enum enumMixinStr_OBJ_ua_pki = `enum OBJ_ua_pki = 1L , 2L , 804L , 2L , 1L , 1L , 1L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_ua_pki); }))) {
            mixin(enumMixinStr_OBJ_ua_pki);
        }
    }




    static if(!is(typeof(SN_dstu28147))) {
        private enum enumMixinStr_SN_dstu28147 = `enum SN_dstu28147 = "dstu28147";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_dstu28147); }))) {
            mixin(enumMixinStr_SN_dstu28147);
        }
    }




    static if(!is(typeof(LN_dstu28147))) {
        private enum enumMixinStr_LN_dstu28147 = `enum LN_dstu28147 = "DSTU Gost 28147-2009";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_dstu28147); }))) {
            mixin(enumMixinStr_LN_dstu28147);
        }
    }




    static if(!is(typeof(NID_dstu28147))) {
        private enum enumMixinStr_NID_dstu28147 = `enum NID_dstu28147 = 1152;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_dstu28147); }))) {
            mixin(enumMixinStr_NID_dstu28147);
        }
    }




    static if(!is(typeof(OBJ_dstu28147))) {
        private enum enumMixinStr_OBJ_dstu28147 = `enum OBJ_dstu28147 = 1L , 2L , 804L , 2L , 1L , 1L , 1L , 1L , 1L , 1L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_dstu28147); }))) {
            mixin(enumMixinStr_OBJ_dstu28147);
        }
    }




    static if(!is(typeof(SN_dstu28147_ofb))) {
        private enum enumMixinStr_SN_dstu28147_ofb = `enum SN_dstu28147_ofb = "dstu28147-ofb";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_dstu28147_ofb); }))) {
            mixin(enumMixinStr_SN_dstu28147_ofb);
        }
    }




    static if(!is(typeof(LN_dstu28147_ofb))) {
        private enum enumMixinStr_LN_dstu28147_ofb = `enum LN_dstu28147_ofb = "DSTU Gost 28147-2009 OFB mode";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_dstu28147_ofb); }))) {
            mixin(enumMixinStr_LN_dstu28147_ofb);
        }
    }




    static if(!is(typeof(NID_dstu28147_ofb))) {
        private enum enumMixinStr_NID_dstu28147_ofb = `enum NID_dstu28147_ofb = 1153;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_dstu28147_ofb); }))) {
            mixin(enumMixinStr_NID_dstu28147_ofb);
        }
    }




    static if(!is(typeof(OBJ_dstu28147_ofb))) {
        private enum enumMixinStr_OBJ_dstu28147_ofb = `enum OBJ_dstu28147_ofb = 1L , 2L , 804L , 2L , 1L , 1L , 1L , 1L , 1L , 1L , 2L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_dstu28147_ofb); }))) {
            mixin(enumMixinStr_OBJ_dstu28147_ofb);
        }
    }




    static if(!is(typeof(SN_dstu28147_cfb))) {
        private enum enumMixinStr_SN_dstu28147_cfb = `enum SN_dstu28147_cfb = "dstu28147-cfb";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_dstu28147_cfb); }))) {
            mixin(enumMixinStr_SN_dstu28147_cfb);
        }
    }




    static if(!is(typeof(LN_dstu28147_cfb))) {
        private enum enumMixinStr_LN_dstu28147_cfb = `enum LN_dstu28147_cfb = "DSTU Gost 28147-2009 CFB mode";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_dstu28147_cfb); }))) {
            mixin(enumMixinStr_LN_dstu28147_cfb);
        }
    }




    static if(!is(typeof(NID_dstu28147_cfb))) {
        private enum enumMixinStr_NID_dstu28147_cfb = `enum NID_dstu28147_cfb = 1154;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_dstu28147_cfb); }))) {
            mixin(enumMixinStr_NID_dstu28147_cfb);
        }
    }




    static if(!is(typeof(OBJ_dstu28147_cfb))) {
        private enum enumMixinStr_OBJ_dstu28147_cfb = `enum OBJ_dstu28147_cfb = 1L , 2L , 804L , 2L , 1L , 1L , 1L , 1L , 1L , 1L , 3L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_dstu28147_cfb); }))) {
            mixin(enumMixinStr_OBJ_dstu28147_cfb);
        }
    }




    static if(!is(typeof(SN_dstu28147_wrap))) {
        private enum enumMixinStr_SN_dstu28147_wrap = `enum SN_dstu28147_wrap = "dstu28147-wrap";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_dstu28147_wrap); }))) {
            mixin(enumMixinStr_SN_dstu28147_wrap);
        }
    }




    static if(!is(typeof(LN_dstu28147_wrap))) {
        private enum enumMixinStr_LN_dstu28147_wrap = `enum LN_dstu28147_wrap = "DSTU Gost 28147-2009 key wrap";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_dstu28147_wrap); }))) {
            mixin(enumMixinStr_LN_dstu28147_wrap);
        }
    }




    static if(!is(typeof(NID_dstu28147_wrap))) {
        private enum enumMixinStr_NID_dstu28147_wrap = `enum NID_dstu28147_wrap = 1155;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_dstu28147_wrap); }))) {
            mixin(enumMixinStr_NID_dstu28147_wrap);
        }
    }




    static if(!is(typeof(OBJ_dstu28147_wrap))) {
        private enum enumMixinStr_OBJ_dstu28147_wrap = `enum OBJ_dstu28147_wrap = 1L , 2L , 804L , 2L , 1L , 1L , 1L , 1L , 1L , 1L , 5L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_dstu28147_wrap); }))) {
            mixin(enumMixinStr_OBJ_dstu28147_wrap);
        }
    }




    static if(!is(typeof(SN_hmacWithDstu34311))) {
        private enum enumMixinStr_SN_hmacWithDstu34311 = `enum SN_hmacWithDstu34311 = "hmacWithDstu34311";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_hmacWithDstu34311); }))) {
            mixin(enumMixinStr_SN_hmacWithDstu34311);
        }
    }




    static if(!is(typeof(LN_hmacWithDstu34311))) {
        private enum enumMixinStr_LN_hmacWithDstu34311 = `enum LN_hmacWithDstu34311 = "HMAC DSTU Gost 34311-95";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_hmacWithDstu34311); }))) {
            mixin(enumMixinStr_LN_hmacWithDstu34311);
        }
    }




    static if(!is(typeof(NID_hmacWithDstu34311))) {
        private enum enumMixinStr_NID_hmacWithDstu34311 = `enum NID_hmacWithDstu34311 = 1156;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_hmacWithDstu34311); }))) {
            mixin(enumMixinStr_NID_hmacWithDstu34311);
        }
    }




    static if(!is(typeof(OBJ_hmacWithDstu34311))) {
        private enum enumMixinStr_OBJ_hmacWithDstu34311 = `enum OBJ_hmacWithDstu34311 = 1L , 2L , 804L , 2L , 1L , 1L , 1L , 1L , 1L , 2L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_hmacWithDstu34311); }))) {
            mixin(enumMixinStr_OBJ_hmacWithDstu34311);
        }
    }




    static if(!is(typeof(SN_dstu34311))) {
        private enum enumMixinStr_SN_dstu34311 = `enum SN_dstu34311 = "dstu34311";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_dstu34311); }))) {
            mixin(enumMixinStr_SN_dstu34311);
        }
    }




    static if(!is(typeof(LN_dstu34311))) {
        private enum enumMixinStr_LN_dstu34311 = `enum LN_dstu34311 = "DSTU Gost 34311-95";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_dstu34311); }))) {
            mixin(enumMixinStr_LN_dstu34311);
        }
    }




    static if(!is(typeof(NID_dstu34311))) {
        private enum enumMixinStr_NID_dstu34311 = `enum NID_dstu34311 = 1157;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_dstu34311); }))) {
            mixin(enumMixinStr_NID_dstu34311);
        }
    }




    static if(!is(typeof(OBJ_dstu34311))) {
        private enum enumMixinStr_OBJ_dstu34311 = `enum OBJ_dstu34311 = 1L , 2L , 804L , 2L , 1L , 1L , 1L , 1L , 2L , 1L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_dstu34311); }))) {
            mixin(enumMixinStr_OBJ_dstu34311);
        }
    }




    static if(!is(typeof(SN_dstu4145le))) {
        private enum enumMixinStr_SN_dstu4145le = `enum SN_dstu4145le = "dstu4145le";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_dstu4145le); }))) {
            mixin(enumMixinStr_SN_dstu4145le);
        }
    }




    static if(!is(typeof(LN_dstu4145le))) {
        private enum enumMixinStr_LN_dstu4145le = `enum LN_dstu4145le = "DSTU 4145-2002 little endian";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_dstu4145le); }))) {
            mixin(enumMixinStr_LN_dstu4145le);
        }
    }




    static if(!is(typeof(NID_dstu4145le))) {
        private enum enumMixinStr_NID_dstu4145le = `enum NID_dstu4145le = 1158;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_dstu4145le); }))) {
            mixin(enumMixinStr_NID_dstu4145le);
        }
    }




    static if(!is(typeof(OBJ_dstu4145le))) {
        private enum enumMixinStr_OBJ_dstu4145le = `enum OBJ_dstu4145le = 1L , 2L , 804L , 2L , 1L , 1L , 1L , 1L , 3L , 1L , 1L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_dstu4145le); }))) {
            mixin(enumMixinStr_OBJ_dstu4145le);
        }
    }




    static if(!is(typeof(SN_dstu4145be))) {
        private enum enumMixinStr_SN_dstu4145be = `enum SN_dstu4145be = "dstu4145be";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_dstu4145be); }))) {
            mixin(enumMixinStr_SN_dstu4145be);
        }
    }




    static if(!is(typeof(LN_dstu4145be))) {
        private enum enumMixinStr_LN_dstu4145be = `enum LN_dstu4145be = "DSTU 4145-2002 big endian";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_dstu4145be); }))) {
            mixin(enumMixinStr_LN_dstu4145be);
        }
    }




    static if(!is(typeof(NID_dstu4145be))) {
        private enum enumMixinStr_NID_dstu4145be = `enum NID_dstu4145be = 1159;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_dstu4145be); }))) {
            mixin(enumMixinStr_NID_dstu4145be);
        }
    }




    static if(!is(typeof(OBJ_dstu4145be))) {
        private enum enumMixinStr_OBJ_dstu4145be = `enum OBJ_dstu4145be = 1L , 2L , 804L , 2L , 1L , 1L , 1L , 1L , 3L , 1L , 1L , 1L , 1L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_dstu4145be); }))) {
            mixin(enumMixinStr_OBJ_dstu4145be);
        }
    }




    static if(!is(typeof(SN_uacurve0))) {
        private enum enumMixinStr_SN_uacurve0 = `enum SN_uacurve0 = "uacurve0";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_uacurve0); }))) {
            mixin(enumMixinStr_SN_uacurve0);
        }
    }




    static if(!is(typeof(LN_uacurve0))) {
        private enum enumMixinStr_LN_uacurve0 = `enum LN_uacurve0 = "DSTU curve 0";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_uacurve0); }))) {
            mixin(enumMixinStr_LN_uacurve0);
        }
    }




    static if(!is(typeof(NID_uacurve0))) {
        private enum enumMixinStr_NID_uacurve0 = `enum NID_uacurve0 = 1160;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_uacurve0); }))) {
            mixin(enumMixinStr_NID_uacurve0);
        }
    }




    static if(!is(typeof(OBJ_uacurve0))) {
        private enum enumMixinStr_OBJ_uacurve0 = `enum OBJ_uacurve0 = 1L , 2L , 804L , 2L , 1L , 1L , 1L , 1L , 3L , 1L , 1L , 2L , 0L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_uacurve0); }))) {
            mixin(enumMixinStr_OBJ_uacurve0);
        }
    }




    static if(!is(typeof(SN_uacurve1))) {
        private enum enumMixinStr_SN_uacurve1 = `enum SN_uacurve1 = "uacurve1";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_uacurve1); }))) {
            mixin(enumMixinStr_SN_uacurve1);
        }
    }




    static if(!is(typeof(LN_uacurve1))) {
        private enum enumMixinStr_LN_uacurve1 = `enum LN_uacurve1 = "DSTU curve 1";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_uacurve1); }))) {
            mixin(enumMixinStr_LN_uacurve1);
        }
    }




    static if(!is(typeof(NID_uacurve1))) {
        private enum enumMixinStr_NID_uacurve1 = `enum NID_uacurve1 = 1161;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_uacurve1); }))) {
            mixin(enumMixinStr_NID_uacurve1);
        }
    }




    static if(!is(typeof(OBJ_uacurve1))) {
        private enum enumMixinStr_OBJ_uacurve1 = `enum OBJ_uacurve1 = 1L , 2L , 804L , 2L , 1L , 1L , 1L , 1L , 3L , 1L , 1L , 2L , 1L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_uacurve1); }))) {
            mixin(enumMixinStr_OBJ_uacurve1);
        }
    }




    static if(!is(typeof(SN_uacurve2))) {
        private enum enumMixinStr_SN_uacurve2 = `enum SN_uacurve2 = "uacurve2";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_uacurve2); }))) {
            mixin(enumMixinStr_SN_uacurve2);
        }
    }




    static if(!is(typeof(LN_uacurve2))) {
        private enum enumMixinStr_LN_uacurve2 = `enum LN_uacurve2 = "DSTU curve 2";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_uacurve2); }))) {
            mixin(enumMixinStr_LN_uacurve2);
        }
    }




    static if(!is(typeof(NID_uacurve2))) {
        private enum enumMixinStr_NID_uacurve2 = `enum NID_uacurve2 = 1162;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_uacurve2); }))) {
            mixin(enumMixinStr_NID_uacurve2);
        }
    }




    static if(!is(typeof(OBJ_uacurve2))) {
        private enum enumMixinStr_OBJ_uacurve2 = `enum OBJ_uacurve2 = 1L , 2L , 804L , 2L , 1L , 1L , 1L , 1L , 3L , 1L , 1L , 2L , 2L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_uacurve2); }))) {
            mixin(enumMixinStr_OBJ_uacurve2);
        }
    }




    static if(!is(typeof(SN_uacurve3))) {
        private enum enumMixinStr_SN_uacurve3 = `enum SN_uacurve3 = "uacurve3";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_uacurve3); }))) {
            mixin(enumMixinStr_SN_uacurve3);
        }
    }




    static if(!is(typeof(LN_uacurve3))) {
        private enum enumMixinStr_LN_uacurve3 = `enum LN_uacurve3 = "DSTU curve 3";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_uacurve3); }))) {
            mixin(enumMixinStr_LN_uacurve3);
        }
    }




    static if(!is(typeof(NID_uacurve3))) {
        private enum enumMixinStr_NID_uacurve3 = `enum NID_uacurve3 = 1163;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_uacurve3); }))) {
            mixin(enumMixinStr_NID_uacurve3);
        }
    }




    static if(!is(typeof(OBJ_uacurve3))) {
        private enum enumMixinStr_OBJ_uacurve3 = `enum OBJ_uacurve3 = 1L , 2L , 804L , 2L , 1L , 1L , 1L , 1L , 3L , 1L , 1L , 2L , 3L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_uacurve3); }))) {
            mixin(enumMixinStr_OBJ_uacurve3);
        }
    }




    static if(!is(typeof(SN_uacurve4))) {
        private enum enumMixinStr_SN_uacurve4 = `enum SN_uacurve4 = "uacurve4";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_uacurve4); }))) {
            mixin(enumMixinStr_SN_uacurve4);
        }
    }




    static if(!is(typeof(LN_uacurve4))) {
        private enum enumMixinStr_LN_uacurve4 = `enum LN_uacurve4 = "DSTU curve 4";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_uacurve4); }))) {
            mixin(enumMixinStr_LN_uacurve4);
        }
    }




    static if(!is(typeof(NID_uacurve4))) {
        private enum enumMixinStr_NID_uacurve4 = `enum NID_uacurve4 = 1164;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_uacurve4); }))) {
            mixin(enumMixinStr_NID_uacurve4);
        }
    }




    static if(!is(typeof(OBJ_uacurve4))) {
        private enum enumMixinStr_OBJ_uacurve4 = `enum OBJ_uacurve4 = 1L , 2L , 804L , 2L , 1L , 1L , 1L , 1L , 3L , 1L , 1L , 2L , 4L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_uacurve4); }))) {
            mixin(enumMixinStr_OBJ_uacurve4);
        }
    }




    static if(!is(typeof(SN_uacurve5))) {
        private enum enumMixinStr_SN_uacurve5 = `enum SN_uacurve5 = "uacurve5";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_uacurve5); }))) {
            mixin(enumMixinStr_SN_uacurve5);
        }
    }




    static if(!is(typeof(LN_uacurve5))) {
        private enum enumMixinStr_LN_uacurve5 = `enum LN_uacurve5 = "DSTU curve 5";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_uacurve5); }))) {
            mixin(enumMixinStr_LN_uacurve5);
        }
    }




    static if(!is(typeof(NID_uacurve5))) {
        private enum enumMixinStr_NID_uacurve5 = `enum NID_uacurve5 = 1165;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_uacurve5); }))) {
            mixin(enumMixinStr_NID_uacurve5);
        }
    }




    static if(!is(typeof(OBJ_uacurve5))) {
        private enum enumMixinStr_OBJ_uacurve5 = `enum OBJ_uacurve5 = 1L , 2L , 804L , 2L , 1L , 1L , 1L , 1L , 3L , 1L , 1L , 2L , 5L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_uacurve5); }))) {
            mixin(enumMixinStr_OBJ_uacurve5);
        }
    }




    static if(!is(typeof(SN_uacurve6))) {
        private enum enumMixinStr_SN_uacurve6 = `enum SN_uacurve6 = "uacurve6";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_uacurve6); }))) {
            mixin(enumMixinStr_SN_uacurve6);
        }
    }




    static if(!is(typeof(LN_uacurve6))) {
        private enum enumMixinStr_LN_uacurve6 = `enum LN_uacurve6 = "DSTU curve 6";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_uacurve6); }))) {
            mixin(enumMixinStr_LN_uacurve6);
        }
    }




    static if(!is(typeof(NID_uacurve6))) {
        private enum enumMixinStr_NID_uacurve6 = `enum NID_uacurve6 = 1166;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_uacurve6); }))) {
            mixin(enumMixinStr_NID_uacurve6);
        }
    }




    static if(!is(typeof(OBJ_uacurve6))) {
        private enum enumMixinStr_OBJ_uacurve6 = `enum OBJ_uacurve6 = 1L , 2L , 804L , 2L , 1L , 1L , 1L , 1L , 3L , 1L , 1L , 2L , 6L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_uacurve6); }))) {
            mixin(enumMixinStr_OBJ_uacurve6);
        }
    }




    static if(!is(typeof(SN_uacurve7))) {
        private enum enumMixinStr_SN_uacurve7 = `enum SN_uacurve7 = "uacurve7";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_uacurve7); }))) {
            mixin(enumMixinStr_SN_uacurve7);
        }
    }




    static if(!is(typeof(LN_uacurve7))) {
        private enum enumMixinStr_LN_uacurve7 = `enum LN_uacurve7 = "DSTU curve 7";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_uacurve7); }))) {
            mixin(enumMixinStr_LN_uacurve7);
        }
    }




    static if(!is(typeof(NID_uacurve7))) {
        private enum enumMixinStr_NID_uacurve7 = `enum NID_uacurve7 = 1167;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_uacurve7); }))) {
            mixin(enumMixinStr_NID_uacurve7);
        }
    }




    static if(!is(typeof(OBJ_uacurve7))) {
        private enum enumMixinStr_OBJ_uacurve7 = `enum OBJ_uacurve7 = 1L , 2L , 804L , 2L , 1L , 1L , 1L , 1L , 3L , 1L , 1L , 2L , 7L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_uacurve7); }))) {
            mixin(enumMixinStr_OBJ_uacurve7);
        }
    }




    static if(!is(typeof(SN_uacurve8))) {
        private enum enumMixinStr_SN_uacurve8 = `enum SN_uacurve8 = "uacurve8";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_uacurve8); }))) {
            mixin(enumMixinStr_SN_uacurve8);
        }
    }




    static if(!is(typeof(LN_uacurve8))) {
        private enum enumMixinStr_LN_uacurve8 = `enum LN_uacurve8 = "DSTU curve 8";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_uacurve8); }))) {
            mixin(enumMixinStr_LN_uacurve8);
        }
    }




    static if(!is(typeof(NID_uacurve8))) {
        private enum enumMixinStr_NID_uacurve8 = `enum NID_uacurve8 = 1168;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_uacurve8); }))) {
            mixin(enumMixinStr_NID_uacurve8);
        }
    }




    static if(!is(typeof(OBJ_uacurve8))) {
        private enum enumMixinStr_OBJ_uacurve8 = `enum OBJ_uacurve8 = 1L , 2L , 804L , 2L , 1L , 1L , 1L , 1L , 3L , 1L , 1L , 2L , 8L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_uacurve8); }))) {
            mixin(enumMixinStr_OBJ_uacurve8);
        }
    }




    static if(!is(typeof(SN_uacurve9))) {
        private enum enumMixinStr_SN_uacurve9 = `enum SN_uacurve9 = "uacurve9";`;
        static if(is(typeof({ mixin(enumMixinStr_SN_uacurve9); }))) {
            mixin(enumMixinStr_SN_uacurve9);
        }
    }




    static if(!is(typeof(LN_uacurve9))) {
        private enum enumMixinStr_LN_uacurve9 = `enum LN_uacurve9 = "DSTU curve 9";`;
        static if(is(typeof({ mixin(enumMixinStr_LN_uacurve9); }))) {
            mixin(enumMixinStr_LN_uacurve9);
        }
    }




    static if(!is(typeof(NID_uacurve9))) {
        private enum enumMixinStr_NID_uacurve9 = `enum NID_uacurve9 = 1169;`;
        static if(is(typeof({ mixin(enumMixinStr_NID_uacurve9); }))) {
            mixin(enumMixinStr_NID_uacurve9);
        }
    }




    static if(!is(typeof(OBJ_uacurve9))) {
        private enum enumMixinStr_OBJ_uacurve9 = `enum OBJ_uacurve9 = 1L , 2L , 804L , 2L , 1L , 1L , 1L , 1L , 3L , 1L , 1L , 2L , 9L;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_uacurve9); }))) {
            mixin(enumMixinStr_OBJ_uacurve9);
        }
    }






    static if(!is(typeof(BN_FLG_SECURE))) {
        private enum enumMixinStr_BN_FLG_SECURE = `enum BN_FLG_SECURE = 0x08;`;
        static if(is(typeof({ mixin(enumMixinStr_BN_FLG_SECURE); }))) {
            mixin(enumMixinStr_BN_FLG_SECURE);
        }
    }




    static if(!is(typeof(BN_FLG_CONSTTIME))) {
        private enum enumMixinStr_BN_FLG_CONSTTIME = `enum BN_FLG_CONSTTIME = 0x04;`;
        static if(is(typeof({ mixin(enumMixinStr_BN_FLG_CONSTTIME); }))) {
            mixin(enumMixinStr_BN_FLG_CONSTTIME);
        }
    }




    static if(!is(typeof(BN_FLG_STATIC_DATA))) {
        private enum enumMixinStr_BN_FLG_STATIC_DATA = `enum BN_FLG_STATIC_DATA = 0x02;`;
        static if(is(typeof({ mixin(enumMixinStr_BN_FLG_STATIC_DATA); }))) {
            mixin(enumMixinStr_BN_FLG_STATIC_DATA);
        }
    }




    static if(!is(typeof(BN_FLG_MALLOCED))) {
        private enum enumMixinStr_BN_FLG_MALLOCED = `enum BN_FLG_MALLOCED = 0x01;`;
        static if(is(typeof({ mixin(enumMixinStr_BN_FLG_MALLOCED); }))) {
            mixin(enumMixinStr_BN_FLG_MALLOCED);
        }
    }




    static if(!is(typeof(OBJ_NAME_TYPE_UNDEF))) {
        private enum enumMixinStr_OBJ_NAME_TYPE_UNDEF = `enum OBJ_NAME_TYPE_UNDEF = 0x00;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_NAME_TYPE_UNDEF); }))) {
            mixin(enumMixinStr_OBJ_NAME_TYPE_UNDEF);
        }
    }




    static if(!is(typeof(OBJ_NAME_TYPE_MD_METH))) {
        private enum enumMixinStr_OBJ_NAME_TYPE_MD_METH = `enum OBJ_NAME_TYPE_MD_METH = 0x01;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_NAME_TYPE_MD_METH); }))) {
            mixin(enumMixinStr_OBJ_NAME_TYPE_MD_METH);
        }
    }




    static if(!is(typeof(OBJ_NAME_TYPE_CIPHER_METH))) {
        private enum enumMixinStr_OBJ_NAME_TYPE_CIPHER_METH = `enum OBJ_NAME_TYPE_CIPHER_METH = 0x02;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_NAME_TYPE_CIPHER_METH); }))) {
            mixin(enumMixinStr_OBJ_NAME_TYPE_CIPHER_METH);
        }
    }




    static if(!is(typeof(OBJ_NAME_TYPE_PKEY_METH))) {
        private enum enumMixinStr_OBJ_NAME_TYPE_PKEY_METH = `enum OBJ_NAME_TYPE_PKEY_METH = 0x03;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_NAME_TYPE_PKEY_METH); }))) {
            mixin(enumMixinStr_OBJ_NAME_TYPE_PKEY_METH);
        }
    }




    static if(!is(typeof(OBJ_NAME_TYPE_COMP_METH))) {
        private enum enumMixinStr_OBJ_NAME_TYPE_COMP_METH = `enum OBJ_NAME_TYPE_COMP_METH = 0x04;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_NAME_TYPE_COMP_METH); }))) {
            mixin(enumMixinStr_OBJ_NAME_TYPE_COMP_METH);
        }
    }




    static if(!is(typeof(OBJ_NAME_TYPE_NUM))) {
        private enum enumMixinStr_OBJ_NAME_TYPE_NUM = `enum OBJ_NAME_TYPE_NUM = 0x05;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_NAME_TYPE_NUM); }))) {
            mixin(enumMixinStr_OBJ_NAME_TYPE_NUM);
        }
    }




    static if(!is(typeof(OBJ_NAME_ALIAS))) {
        private enum enumMixinStr_OBJ_NAME_ALIAS = `enum OBJ_NAME_ALIAS = 0x8000;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_NAME_ALIAS); }))) {
            mixin(enumMixinStr_OBJ_NAME_ALIAS);
        }
    }




    static if(!is(typeof(OBJ_BSEARCH_VALUE_ON_NOMATCH))) {
        private enum enumMixinStr_OBJ_BSEARCH_VALUE_ON_NOMATCH = `enum OBJ_BSEARCH_VALUE_ON_NOMATCH = 0x01;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_BSEARCH_VALUE_ON_NOMATCH); }))) {
            mixin(enumMixinStr_OBJ_BSEARCH_VALUE_ON_NOMATCH);
        }
    }




    static if(!is(typeof(OBJ_BSEARCH_FIRST_VALUE_ON_MATCH))) {
        private enum enumMixinStr_OBJ_BSEARCH_FIRST_VALUE_ON_MATCH = `enum OBJ_BSEARCH_FIRST_VALUE_ON_MATCH = 0x02;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_BSEARCH_FIRST_VALUE_ON_MATCH); }))) {
            mixin(enumMixinStr_OBJ_BSEARCH_FIRST_VALUE_ON_MATCH);
        }
    }




    static if(!is(typeof(BN_TBIT))) {
        private enum enumMixinStr_BN_TBIT = `enum BN_TBIT = ( ( BN_ULONG ) 1 << ( BN_BITS2 - 1 ) );`;
        static if(is(typeof({ mixin(enumMixinStr_BN_TBIT); }))) {
            mixin(enumMixinStr_BN_TBIT);
        }
    }




    static if(!is(typeof(BN_BITS))) {
        private enum enumMixinStr_BN_BITS = `enum BN_BITS = ( BN_BITS2 * 2 );`;
        static if(is(typeof({ mixin(enumMixinStr_BN_BITS); }))) {
            mixin(enumMixinStr_BN_BITS);
        }
    }






    static if(!is(typeof(BN_BITS2))) {
        private enum enumMixinStr_BN_BITS2 = `enum BN_BITS2 = ( BN_BYTES * 8 );`;
        static if(is(typeof({ mixin(enumMixinStr_BN_BITS2); }))) {
            mixin(enumMixinStr_BN_BITS2);
        }
    }




    static if(!is(typeof(BN_BYTES))) {
        private enum enumMixinStr_BN_BYTES = `enum BN_BYTES = 8;`;
        static if(is(typeof({ mixin(enumMixinStr_BN_BYTES); }))) {
            mixin(enumMixinStr_BN_BYTES);
        }
    }




    static if(!is(typeof(BN_ULONG))) {
        private enum enumMixinStr_BN_ULONG = `enum BN_ULONG = unsigned long;`;
        static if(is(typeof({ mixin(enumMixinStr_BN_ULONG); }))) {
            mixin(enumMixinStr_BN_ULONG);
        }
    }






    static if(!is(typeof(BIO_R_WSASTARTUP))) {
        private enum enumMixinStr_BIO_R_WSASTARTUP = `enum BIO_R_WSASTARTUP = 122;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_R_WSASTARTUP); }))) {
            mixin(enumMixinStr_BIO_R_WSASTARTUP);
        }
    }




    static if(!is(typeof(BIO_R_WRITE_TO_READ_ONLY_BIO))) {
        private enum enumMixinStr_BIO_R_WRITE_TO_READ_ONLY_BIO = `enum BIO_R_WRITE_TO_READ_ONLY_BIO = 126;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_R_WRITE_TO_READ_ONLY_BIO); }))) {
            mixin(enumMixinStr_BIO_R_WRITE_TO_READ_ONLY_BIO);
        }
    }




    static if(!is(typeof(BIO_R_UNSUPPORTED_PROTOCOL_FAMILY))) {
        private enum enumMixinStr_BIO_R_UNSUPPORTED_PROTOCOL_FAMILY = `enum BIO_R_UNSUPPORTED_PROTOCOL_FAMILY = 131;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_R_UNSUPPORTED_PROTOCOL_FAMILY); }))) {
            mixin(enumMixinStr_BIO_R_UNSUPPORTED_PROTOCOL_FAMILY);
        }
    }




    static if(!is(typeof(BIO_R_UNSUPPORTED_METHOD))) {
        private enum enumMixinStr_BIO_R_UNSUPPORTED_METHOD = `enum BIO_R_UNSUPPORTED_METHOD = 121;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_R_UNSUPPORTED_METHOD); }))) {
            mixin(enumMixinStr_BIO_R_UNSUPPORTED_METHOD);
        }
    }




    static if(!is(typeof(BIO_R_UNSUPPORTED_IP_FAMILY))) {
        private enum enumMixinStr_BIO_R_UNSUPPORTED_IP_FAMILY = `enum BIO_R_UNSUPPORTED_IP_FAMILY = 146;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_R_UNSUPPORTED_IP_FAMILY); }))) {
            mixin(enumMixinStr_BIO_R_UNSUPPORTED_IP_FAMILY);
        }
    }




    static if(!is(typeof(BIO_R_UNKNOWN_INFO_TYPE))) {
        private enum enumMixinStr_BIO_R_UNKNOWN_INFO_TYPE = `enum BIO_R_UNKNOWN_INFO_TYPE = 140;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_R_UNKNOWN_INFO_TYPE); }))) {
            mixin(enumMixinStr_BIO_R_UNKNOWN_INFO_TYPE);
        }
    }




    static if(!is(typeof(BIO_R_UNINITIALIZED))) {
        private enum enumMixinStr_BIO_R_UNINITIALIZED = `enum BIO_R_UNINITIALIZED = 120;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_R_UNINITIALIZED); }))) {
            mixin(enumMixinStr_BIO_R_UNINITIALIZED);
        }
    }




    static if(!is(typeof(BIO_R_UNAVAILABLE_IP_FAMILY))) {
        private enum enumMixinStr_BIO_R_UNAVAILABLE_IP_FAMILY = `enum BIO_R_UNAVAILABLE_IP_FAMILY = 145;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_R_UNAVAILABLE_IP_FAMILY); }))) {
            mixin(enumMixinStr_BIO_R_UNAVAILABLE_IP_FAMILY);
        }
    }




    static if(!is(typeof(BIO_R_UNABLE_TO_REUSEADDR))) {
        private enum enumMixinStr_BIO_R_UNABLE_TO_REUSEADDR = `enum BIO_R_UNABLE_TO_REUSEADDR = 139;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_R_UNABLE_TO_REUSEADDR); }))) {
            mixin(enumMixinStr_BIO_R_UNABLE_TO_REUSEADDR);
        }
    }




    static if(!is(typeof(BIO_R_UNABLE_TO_NODELAY))) {
        private enum enumMixinStr_BIO_R_UNABLE_TO_NODELAY = `enum BIO_R_UNABLE_TO_NODELAY = 138;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_R_UNABLE_TO_NODELAY); }))) {
            mixin(enumMixinStr_BIO_R_UNABLE_TO_NODELAY);
        }
    }




    static if(!is(typeof(BIO_R_UNABLE_TO_LISTEN_SOCKET))) {
        private enum enumMixinStr_BIO_R_UNABLE_TO_LISTEN_SOCKET = `enum BIO_R_UNABLE_TO_LISTEN_SOCKET = 119;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_R_UNABLE_TO_LISTEN_SOCKET); }))) {
            mixin(enumMixinStr_BIO_R_UNABLE_TO_LISTEN_SOCKET);
        }
    }




    static if(!is(typeof(BIO_R_UNABLE_TO_KEEPALIVE))) {
        private enum enumMixinStr_BIO_R_UNABLE_TO_KEEPALIVE = `enum BIO_R_UNABLE_TO_KEEPALIVE = 137;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_R_UNABLE_TO_KEEPALIVE); }))) {
            mixin(enumMixinStr_BIO_R_UNABLE_TO_KEEPALIVE);
        }
    }




    static if(!is(typeof(BIO_R_UNABLE_TO_CREATE_SOCKET))) {
        private enum enumMixinStr_BIO_R_UNABLE_TO_CREATE_SOCKET = `enum BIO_R_UNABLE_TO_CREATE_SOCKET = 118;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_R_UNABLE_TO_CREATE_SOCKET); }))) {
            mixin(enumMixinStr_BIO_R_UNABLE_TO_CREATE_SOCKET);
        }
    }




    static if(!is(typeof(BIO_R_UNABLE_TO_BIND_SOCKET))) {
        private enum enumMixinStr_BIO_R_UNABLE_TO_BIND_SOCKET = `enum BIO_R_UNABLE_TO_BIND_SOCKET = 117;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_R_UNABLE_TO_BIND_SOCKET); }))) {
            mixin(enumMixinStr_BIO_R_UNABLE_TO_BIND_SOCKET);
        }
    }




    static if(!is(typeof(BIO_R_NULL_PARAMETER))) {
        private enum enumMixinStr_BIO_R_NULL_PARAMETER = `enum BIO_R_NULL_PARAMETER = 115;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_R_NULL_PARAMETER); }))) {
            mixin(enumMixinStr_BIO_R_NULL_PARAMETER);
        }
    }




    static if(!is(typeof(BIO_R_NO_SUCH_FILE))) {
        private enum enumMixinStr_BIO_R_NO_SUCH_FILE = `enum BIO_R_NO_SUCH_FILE = 128;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_R_NO_SUCH_FILE); }))) {
            mixin(enumMixinStr_BIO_R_NO_SUCH_FILE);
        }
    }




    static if(!is(typeof(BIO_R_NO_PORT_DEFINED))) {
        private enum enumMixinStr_BIO_R_NO_PORT_DEFINED = `enum BIO_R_NO_PORT_DEFINED = 113;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_R_NO_PORT_DEFINED); }))) {
            mixin(enumMixinStr_BIO_R_NO_PORT_DEFINED);
        }
    }
    static if(!is(typeof(BIO_R_NO_HOSTNAME_OR_SERVICE_SPECIFIED))) {
        private enum enumMixinStr_BIO_R_NO_HOSTNAME_OR_SERVICE_SPECIFIED = `enum BIO_R_NO_HOSTNAME_OR_SERVICE_SPECIFIED = 144;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_R_NO_HOSTNAME_OR_SERVICE_SPECIFIED); }))) {
            mixin(enumMixinStr_BIO_R_NO_HOSTNAME_OR_SERVICE_SPECIFIED);
        }
    }




    static if(!is(typeof(BIO_R_NO_ACCEPT_ADDR_OR_SERVICE_SPECIFIED))) {
        private enum enumMixinStr_BIO_R_NO_ACCEPT_ADDR_OR_SERVICE_SPECIFIED = `enum BIO_R_NO_ACCEPT_ADDR_OR_SERVICE_SPECIFIED = 143;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_R_NO_ACCEPT_ADDR_OR_SERVICE_SPECIFIED); }))) {
            mixin(enumMixinStr_BIO_R_NO_ACCEPT_ADDR_OR_SERVICE_SPECIFIED);
        }
    }




    static if(!is(typeof(BIO_R_NBIO_CONNECT_ERROR))) {
        private enum enumMixinStr_BIO_R_NBIO_CONNECT_ERROR = `enum BIO_R_NBIO_CONNECT_ERROR = 110;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_R_NBIO_CONNECT_ERROR); }))) {
            mixin(enumMixinStr_BIO_R_NBIO_CONNECT_ERROR);
        }
    }




    static if(!is(typeof(BIO_R_MALFORMED_HOST_OR_SERVICE))) {
        private enum enumMixinStr_BIO_R_MALFORMED_HOST_OR_SERVICE = `enum BIO_R_MALFORMED_HOST_OR_SERVICE = 130;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_R_MALFORMED_HOST_OR_SERVICE); }))) {
            mixin(enumMixinStr_BIO_R_MALFORMED_HOST_OR_SERVICE);
        }
    }






    static if(!is(typeof(BIO_R_LOOKUP_RETURNED_NOTHING))) {
        private enum enumMixinStr_BIO_R_LOOKUP_RETURNED_NOTHING = `enum BIO_R_LOOKUP_RETURNED_NOTHING = 142;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_R_LOOKUP_RETURNED_NOTHING); }))) {
            mixin(enumMixinStr_BIO_R_LOOKUP_RETURNED_NOTHING);
        }
    }




    static if(!is(typeof(BIO_R_LISTEN_V6_ONLY))) {
        private enum enumMixinStr_BIO_R_LISTEN_V6_ONLY = `enum BIO_R_LISTEN_V6_ONLY = 136;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_R_LISTEN_V6_ONLY); }))) {
            mixin(enumMixinStr_BIO_R_LISTEN_V6_ONLY);
        }
    }




    static if(!is(typeof(BIO_R_LENGTH_TOO_LONG))) {
        private enum enumMixinStr_BIO_R_LENGTH_TOO_LONG = `enum BIO_R_LENGTH_TOO_LONG = 102;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_R_LENGTH_TOO_LONG); }))) {
            mixin(enumMixinStr_BIO_R_LENGTH_TOO_LONG);
        }
    }




    static if(!is(typeof(BIO_R_IN_USE))) {
        private enum enumMixinStr_BIO_R_IN_USE = `enum BIO_R_IN_USE = 123;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_R_IN_USE); }))) {
            mixin(enumMixinStr_BIO_R_IN_USE);
        }
    }




    static if(!is(typeof(BIO_R_INVALID_SOCKET))) {
        private enum enumMixinStr_BIO_R_INVALID_SOCKET = `enum BIO_R_INVALID_SOCKET = 135;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_R_INVALID_SOCKET); }))) {
            mixin(enumMixinStr_BIO_R_INVALID_SOCKET);
        }
    }




    static if(!is(typeof(BIO_R_INVALID_ARGUMENT))) {
        private enum enumMixinStr_BIO_R_INVALID_ARGUMENT = `enum BIO_R_INVALID_ARGUMENT = 125;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_R_INVALID_ARGUMENT); }))) {
            mixin(enumMixinStr_BIO_R_INVALID_ARGUMENT);
        }
    }




    static if(!is(typeof(BIO_R_GETTING_SOCKTYPE))) {
        private enum enumMixinStr_BIO_R_GETTING_SOCKTYPE = `enum BIO_R_GETTING_SOCKTYPE = 134;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_R_GETTING_SOCKTYPE); }))) {
            mixin(enumMixinStr_BIO_R_GETTING_SOCKTYPE);
        }
    }






    static if(!is(typeof(BIO_R_GETSOCKNAME_TRUNCATED_ADDRESS))) {
        private enum enumMixinStr_BIO_R_GETSOCKNAME_TRUNCATED_ADDRESS = `enum BIO_R_GETSOCKNAME_TRUNCATED_ADDRESS = 133;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_R_GETSOCKNAME_TRUNCATED_ADDRESS); }))) {
            mixin(enumMixinStr_BIO_R_GETSOCKNAME_TRUNCATED_ADDRESS);
        }
    }




    static if(!is(typeof(BIO_R_GETSOCKNAME_ERROR))) {
        private enum enumMixinStr_BIO_R_GETSOCKNAME_ERROR = `enum BIO_R_GETSOCKNAME_ERROR = 132;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_R_GETSOCKNAME_ERROR); }))) {
            mixin(enumMixinStr_BIO_R_GETSOCKNAME_ERROR);
        }
    }




    static if(!is(typeof(OBJ_F_OBJ_ADD_OBJECT))) {
        private enum enumMixinStr_OBJ_F_OBJ_ADD_OBJECT = `enum OBJ_F_OBJ_ADD_OBJECT = 105;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_F_OBJ_ADD_OBJECT); }))) {
            mixin(enumMixinStr_OBJ_F_OBJ_ADD_OBJECT);
        }
    }




    static if(!is(typeof(OBJ_F_OBJ_ADD_SIGID))) {
        private enum enumMixinStr_OBJ_F_OBJ_ADD_SIGID = `enum OBJ_F_OBJ_ADD_SIGID = 107;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_F_OBJ_ADD_SIGID); }))) {
            mixin(enumMixinStr_OBJ_F_OBJ_ADD_SIGID);
        }
    }




    static if(!is(typeof(OBJ_F_OBJ_CREATE))) {
        private enum enumMixinStr_OBJ_F_OBJ_CREATE = `enum OBJ_F_OBJ_CREATE = 100;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_F_OBJ_CREATE); }))) {
            mixin(enumMixinStr_OBJ_F_OBJ_CREATE);
        }
    }




    static if(!is(typeof(OBJ_F_OBJ_DUP))) {
        private enum enumMixinStr_OBJ_F_OBJ_DUP = `enum OBJ_F_OBJ_DUP = 101;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_F_OBJ_DUP); }))) {
            mixin(enumMixinStr_OBJ_F_OBJ_DUP);
        }
    }




    static if(!is(typeof(OBJ_F_OBJ_NAME_NEW_INDEX))) {
        private enum enumMixinStr_OBJ_F_OBJ_NAME_NEW_INDEX = `enum OBJ_F_OBJ_NAME_NEW_INDEX = 106;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_F_OBJ_NAME_NEW_INDEX); }))) {
            mixin(enumMixinStr_OBJ_F_OBJ_NAME_NEW_INDEX);
        }
    }




    static if(!is(typeof(OBJ_F_OBJ_NID2LN))) {
        private enum enumMixinStr_OBJ_F_OBJ_NID2LN = `enum OBJ_F_OBJ_NID2LN = 102;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_F_OBJ_NID2LN); }))) {
            mixin(enumMixinStr_OBJ_F_OBJ_NID2LN);
        }
    }




    static if(!is(typeof(OBJ_F_OBJ_NID2OBJ))) {
        private enum enumMixinStr_OBJ_F_OBJ_NID2OBJ = `enum OBJ_F_OBJ_NID2OBJ = 103;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_F_OBJ_NID2OBJ); }))) {
            mixin(enumMixinStr_OBJ_F_OBJ_NID2OBJ);
        }
    }




    static if(!is(typeof(OBJ_F_OBJ_NID2SN))) {
        private enum enumMixinStr_OBJ_F_OBJ_NID2SN = `enum OBJ_F_OBJ_NID2SN = 104;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_F_OBJ_NID2SN); }))) {
            mixin(enumMixinStr_OBJ_F_OBJ_NID2SN);
        }
    }




    static if(!is(typeof(OBJ_F_OBJ_TXT2OBJ))) {
        private enum enumMixinStr_OBJ_F_OBJ_TXT2OBJ = `enum OBJ_F_OBJ_TXT2OBJ = 108;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_F_OBJ_TXT2OBJ); }))) {
            mixin(enumMixinStr_OBJ_F_OBJ_TXT2OBJ);
        }
    }




    static if(!is(typeof(OBJ_R_OID_EXISTS))) {
        private enum enumMixinStr_OBJ_R_OID_EXISTS = `enum OBJ_R_OID_EXISTS = 102;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_R_OID_EXISTS); }))) {
            mixin(enumMixinStr_OBJ_R_OID_EXISTS);
        }
    }




    static if(!is(typeof(OBJ_R_UNKNOWN_NID))) {
        private enum enumMixinStr_OBJ_R_UNKNOWN_NID = `enum OBJ_R_UNKNOWN_NID = 101;`;
        static if(is(typeof({ mixin(enumMixinStr_OBJ_R_UNKNOWN_NID); }))) {
            mixin(enumMixinStr_OBJ_R_UNKNOWN_NID);
        }
    }




    static if(!is(typeof(BIO_R_GETHOSTBYNAME_ADDR_IS_NOT_AF_INET))) {
        private enum enumMixinStr_BIO_R_GETHOSTBYNAME_ADDR_IS_NOT_AF_INET = `enum BIO_R_GETHOSTBYNAME_ADDR_IS_NOT_AF_INET = 107;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_R_GETHOSTBYNAME_ADDR_IS_NOT_AF_INET); }))) {
            mixin(enumMixinStr_BIO_R_GETHOSTBYNAME_ADDR_IS_NOT_AF_INET);
        }
    }




    static if(!is(typeof(BIO_R_CONNECT_ERROR))) {
        private enum enumMixinStr_BIO_R_CONNECT_ERROR = `enum BIO_R_CONNECT_ERROR = 103;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_R_CONNECT_ERROR); }))) {
            mixin(enumMixinStr_BIO_R_CONNECT_ERROR);
        }
    }




    static if(!is(typeof(BIO_R_BROKEN_PIPE))) {
        private enum enumMixinStr_BIO_R_BROKEN_PIPE = `enum BIO_R_BROKEN_PIPE = 124;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_R_BROKEN_PIPE); }))) {
            mixin(enumMixinStr_BIO_R_BROKEN_PIPE);
        }
    }




    static if(!is(typeof(BIO_R_BAD_FOPEN_MODE))) {
        private enum enumMixinStr_BIO_R_BAD_FOPEN_MODE = `enum BIO_R_BAD_FOPEN_MODE = 101;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_R_BAD_FOPEN_MODE); }))) {
            mixin(enumMixinStr_BIO_R_BAD_FOPEN_MODE);
        }
    }




    static if(!is(typeof(BIO_R_AMBIGUOUS_HOST_OR_SERVICE))) {
        private enum enumMixinStr_BIO_R_AMBIGUOUS_HOST_OR_SERVICE = `enum BIO_R_AMBIGUOUS_HOST_OR_SERVICE = 129;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_R_AMBIGUOUS_HOST_OR_SERVICE); }))) {
            mixin(enumMixinStr_BIO_R_AMBIGUOUS_HOST_OR_SERVICE);
        }
    }




    static if(!is(typeof(BIO_R_ADDRINFO_ADDR_IS_NOT_AF_INET))) {
        private enum enumMixinStr_BIO_R_ADDRINFO_ADDR_IS_NOT_AF_INET = `enum BIO_R_ADDRINFO_ADDR_IS_NOT_AF_INET = 141;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_R_ADDRINFO_ADDR_IS_NOT_AF_INET); }))) {
            mixin(enumMixinStr_BIO_R_ADDRINFO_ADDR_IS_NOT_AF_INET);
        }
    }




    static if(!is(typeof(BIO_R_ACCEPT_ERROR))) {
        private enum enumMixinStr_BIO_R_ACCEPT_ERROR = `enum BIO_R_ACCEPT_ERROR = 100;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_R_ACCEPT_ERROR); }))) {
            mixin(enumMixinStr_BIO_R_ACCEPT_ERROR);
        }
    }




    static if(!is(typeof(BIO_F_SSL_NEW))) {
        private enum enumMixinStr_BIO_F_SSL_NEW = `enum BIO_F_SSL_NEW = 118;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_F_SSL_NEW); }))) {
            mixin(enumMixinStr_BIO_F_SSL_NEW);
        }
    }




    static if(!is(typeof(BIO_F_SLG_WRITE))) {
        private enum enumMixinStr_BIO_F_SLG_WRITE = `enum BIO_F_SLG_WRITE = 155;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_F_SLG_WRITE); }))) {
            mixin(enumMixinStr_BIO_F_SLG_WRITE);
        }
    }




    static if(!is(typeof(BIO_F_NBIOF_NEW))) {
        private enum enumMixinStr_BIO_F_NBIOF_NEW = `enum BIO_F_NBIOF_NEW = 154;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_F_NBIOF_NEW); }))) {
            mixin(enumMixinStr_BIO_F_NBIOF_NEW);
        }
    }




    static if(!is(typeof(BIO_F_MEM_WRITE))) {
        private enum enumMixinStr_BIO_F_MEM_WRITE = `enum BIO_F_MEM_WRITE = 117;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_F_MEM_WRITE); }))) {
            mixin(enumMixinStr_BIO_F_MEM_WRITE);
        }
    }




    static if(!is(typeof(BIO_F_LINEBUFFER_NEW))) {
        private enum enumMixinStr_BIO_F_LINEBUFFER_NEW = `enum BIO_F_LINEBUFFER_NEW = 151;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_F_LINEBUFFER_NEW); }))) {
            mixin(enumMixinStr_BIO_F_LINEBUFFER_NEW);
        }
    }




    static if(!is(typeof(BIO_F_LINEBUFFER_CTRL))) {
        private enum enumMixinStr_BIO_F_LINEBUFFER_CTRL = `enum BIO_F_LINEBUFFER_CTRL = 129;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_F_LINEBUFFER_CTRL); }))) {
            mixin(enumMixinStr_BIO_F_LINEBUFFER_CTRL);
        }
    }




    static if(!is(typeof(BIO_F_FILE_READ))) {
        private enum enumMixinStr_BIO_F_FILE_READ = `enum BIO_F_FILE_READ = 130;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_F_FILE_READ); }))) {
            mixin(enumMixinStr_BIO_F_FILE_READ);
        }
    }




    static if(!is(typeof(BIO_F_FILE_CTRL))) {
        private enum enumMixinStr_BIO_F_FILE_CTRL = `enum BIO_F_FILE_CTRL = 116;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_F_FILE_CTRL); }))) {
            mixin(enumMixinStr_BIO_F_FILE_CTRL);
        }
    }




    static if(!is(typeof(BIO_F_DOAPR_OUTCH))) {
        private enum enumMixinStr_BIO_F_DOAPR_OUTCH = `enum BIO_F_DOAPR_OUTCH = 150;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_F_DOAPR_OUTCH); }))) {
            mixin(enumMixinStr_BIO_F_DOAPR_OUTCH);
        }
    }




    static if(!is(typeof(BIO_F_DGRAM_SCTP_WRITE))) {
        private enum enumMixinStr_BIO_F_DGRAM_SCTP_WRITE = `enum BIO_F_DGRAM_SCTP_WRITE = 133;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_F_DGRAM_SCTP_WRITE); }))) {
            mixin(enumMixinStr_BIO_F_DGRAM_SCTP_WRITE);
        }
    }




    static if(!is(typeof(BIO_F_DGRAM_SCTP_READ))) {
        private enum enumMixinStr_BIO_F_DGRAM_SCTP_READ = `enum BIO_F_DGRAM_SCTP_READ = 132;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_F_DGRAM_SCTP_READ); }))) {
            mixin(enumMixinStr_BIO_F_DGRAM_SCTP_READ);
        }
    }




    static if(!is(typeof(BIO_F_DGRAM_SCTP_NEW))) {
        private enum enumMixinStr_BIO_F_DGRAM_SCTP_NEW = `enum BIO_F_DGRAM_SCTP_NEW = 149;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_F_DGRAM_SCTP_NEW); }))) {
            mixin(enumMixinStr_BIO_F_DGRAM_SCTP_NEW);
        }
    }




    static if(!is(typeof(BIO_F_CONN_STATE))) {
        private enum enumMixinStr_BIO_F_CONN_STATE = `enum BIO_F_CONN_STATE = 115;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_F_CONN_STATE); }))) {
            mixin(enumMixinStr_BIO_F_CONN_STATE);
        }
    }




    static if(!is(typeof(BIO_F_CONN_CTRL))) {
        private enum enumMixinStr_BIO_F_CONN_CTRL = `enum BIO_F_CONN_CTRL = 127;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_F_CONN_CTRL); }))) {
            mixin(enumMixinStr_BIO_F_CONN_CTRL);
        }
    }




    static if(!is(typeof(BIO_F_BUFFER_CTRL))) {
        private enum enumMixinStr_BIO_F_BUFFER_CTRL = `enum BIO_F_BUFFER_CTRL = 114;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_F_BUFFER_CTRL); }))) {
            mixin(enumMixinStr_BIO_F_BUFFER_CTRL);
        }
    }




    static if(!is(typeof(BIO_F_BIO_WRITE_INTERN))) {
        private enum enumMixinStr_BIO_F_BIO_WRITE_INTERN = `enum BIO_F_BIO_WRITE_INTERN = 128;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_F_BIO_WRITE_INTERN); }))) {
            mixin(enumMixinStr_BIO_F_BIO_WRITE_INTERN);
        }
    }




    static if(!is(typeof(BIO_F_BIO_WRITE_EX))) {
        private enum enumMixinStr_BIO_F_BIO_WRITE_EX = `enum BIO_F_BIO_WRITE_EX = 119;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_F_BIO_WRITE_EX); }))) {
            mixin(enumMixinStr_BIO_F_BIO_WRITE_EX);
        }
    }




    static if(!is(typeof(BIO_F_BIO_WRITE))) {
        private enum enumMixinStr_BIO_F_BIO_WRITE = `enum BIO_F_BIO_WRITE = 113;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_F_BIO_WRITE); }))) {
            mixin(enumMixinStr_BIO_F_BIO_WRITE);
        }
    }




    static if(!is(typeof(BIO_F_BIO_SOCK_INIT))) {
        private enum enumMixinStr_BIO_F_BIO_SOCK_INIT = `enum BIO_F_BIO_SOCK_INIT = 112;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_F_BIO_SOCK_INIT); }))) {
            mixin(enumMixinStr_BIO_F_BIO_SOCK_INIT);
        }
    }




    static if(!is(typeof(BIO_F_BIO_SOCK_INFO))) {
        private enum enumMixinStr_BIO_F_BIO_SOCK_INFO = `enum BIO_F_BIO_SOCK_INFO = 141;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_F_BIO_SOCK_INFO); }))) {
            mixin(enumMixinStr_BIO_F_BIO_SOCK_INFO);
        }
    }




    static if(!is(typeof(BIO_F_BIO_SOCKET_NBIO))) {
        private enum enumMixinStr_BIO_F_BIO_SOCKET_NBIO = `enum BIO_F_BIO_SOCKET_NBIO = 142;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_F_BIO_SOCKET_NBIO); }))) {
            mixin(enumMixinStr_BIO_F_BIO_SOCKET_NBIO);
        }
    }




    static if(!is(typeof(BIO_F_BIO_SOCKET))) {
        private enum enumMixinStr_BIO_F_BIO_SOCKET = `enum BIO_F_BIO_SOCKET = 140;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_F_BIO_SOCKET); }))) {
            mixin(enumMixinStr_BIO_F_BIO_SOCKET);
        }
    }




    static if(!is(typeof(BIO_F_BIO_READ_INTERN))) {
        private enum enumMixinStr_BIO_F_BIO_READ_INTERN = `enum BIO_F_BIO_READ_INTERN = 120;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_F_BIO_READ_INTERN); }))) {
            mixin(enumMixinStr_BIO_F_BIO_READ_INTERN);
        }
    }




    static if(!is(typeof(BIO_F_BIO_READ_EX))) {
        private enum enumMixinStr_BIO_F_BIO_READ_EX = `enum BIO_F_BIO_READ_EX = 105;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_F_BIO_READ_EX); }))) {
            mixin(enumMixinStr_BIO_F_BIO_READ_EX);
        }
    }




    static if(!is(typeof(BIO_F_BIO_READ))) {
        private enum enumMixinStr_BIO_F_BIO_READ = `enum BIO_F_BIO_READ = 111;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_F_BIO_READ); }))) {
            mixin(enumMixinStr_BIO_F_BIO_READ);
        }
    }




    static if(!is(typeof(BIO_F_BIO_PUTS))) {
        private enum enumMixinStr_BIO_F_BIO_PUTS = `enum BIO_F_BIO_PUTS = 110;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_F_BIO_PUTS); }))) {
            mixin(enumMixinStr_BIO_F_BIO_PUTS);
        }
    }




    static if(!is(typeof(BIO_F_BIO_PARSE_HOSTSERV))) {
        private enum enumMixinStr_BIO_F_BIO_PARSE_HOSTSERV = `enum BIO_F_BIO_PARSE_HOSTSERV = 136;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_F_BIO_PARSE_HOSTSERV); }))) {
            mixin(enumMixinStr_BIO_F_BIO_PARSE_HOSTSERV);
        }
    }




    static if(!is(typeof(BIO_F_BIO_NWRITE0))) {
        private enum enumMixinStr_BIO_F_BIO_NWRITE0 = `enum BIO_F_BIO_NWRITE0 = 122;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_F_BIO_NWRITE0); }))) {
            mixin(enumMixinStr_BIO_F_BIO_NWRITE0);
        }
    }




    static if(!is(typeof(BIO_F_BIO_NWRITE))) {
        private enum enumMixinStr_BIO_F_BIO_NWRITE = `enum BIO_F_BIO_NWRITE = 125;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_F_BIO_NWRITE); }))) {
            mixin(enumMixinStr_BIO_F_BIO_NWRITE);
        }
    }




    static if(!is(typeof(BIO_F_BIO_NREAD0))) {
        private enum enumMixinStr_BIO_F_BIO_NREAD0 = `enum BIO_F_BIO_NREAD0 = 124;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_F_BIO_NREAD0); }))) {
            mixin(enumMixinStr_BIO_F_BIO_NREAD0);
        }
    }




    static if(!is(typeof(BIO_F_BIO_NREAD))) {
        private enum enumMixinStr_BIO_F_BIO_NREAD = `enum BIO_F_BIO_NREAD = 123;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_F_BIO_NREAD); }))) {
            mixin(enumMixinStr_BIO_F_BIO_NREAD);
        }
    }




    static if(!is(typeof(BIO_F_BIO_NEW_MEM_BUF))) {
        private enum enumMixinStr_BIO_F_BIO_NEW_MEM_BUF = `enum BIO_F_BIO_NEW_MEM_BUF = 126;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_F_BIO_NEW_MEM_BUF); }))) {
            mixin(enumMixinStr_BIO_F_BIO_NEW_MEM_BUF);
        }
    }




    static if(!is(typeof(BIO_F_BIO_NEW_FILE))) {
        private enum enumMixinStr_BIO_F_BIO_NEW_FILE = `enum BIO_F_BIO_NEW_FILE = 109;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_F_BIO_NEW_FILE); }))) {
            mixin(enumMixinStr_BIO_F_BIO_NEW_FILE);
        }
    }




    static if(!is(typeof(BIO_F_BIO_NEW_DGRAM_SCTP))) {
        private enum enumMixinStr_BIO_F_BIO_NEW_DGRAM_SCTP = `enum BIO_F_BIO_NEW_DGRAM_SCTP = 145;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_F_BIO_NEW_DGRAM_SCTP); }))) {
            mixin(enumMixinStr_BIO_F_BIO_NEW_DGRAM_SCTP);
        }
    }




    static if(!is(typeof(BIO_F_BIO_NEW))) {
        private enum enumMixinStr_BIO_F_BIO_NEW = `enum BIO_F_BIO_NEW = 108;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_F_BIO_NEW); }))) {
            mixin(enumMixinStr_BIO_F_BIO_NEW);
        }
    }




    static if(!is(typeof(BIO_F_BIO_METH_NEW))) {
        private enum enumMixinStr_BIO_F_BIO_METH_NEW = `enum BIO_F_BIO_METH_NEW = 146;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_F_BIO_METH_NEW); }))) {
            mixin(enumMixinStr_BIO_F_BIO_METH_NEW);
        }
    }




    static if(!is(typeof(BIO_F_BIO_MAKE_PAIR))) {
        private enum enumMixinStr_BIO_F_BIO_MAKE_PAIR = `enum BIO_F_BIO_MAKE_PAIR = 121;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_F_BIO_MAKE_PAIR); }))) {
            mixin(enumMixinStr_BIO_F_BIO_MAKE_PAIR);
        }
    }




    static if(!is(typeof(BIO_F_BIO_LOOKUP_EX))) {
        private enum enumMixinStr_BIO_F_BIO_LOOKUP_EX = `enum BIO_F_BIO_LOOKUP_EX = 143;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_F_BIO_LOOKUP_EX); }))) {
            mixin(enumMixinStr_BIO_F_BIO_LOOKUP_EX);
        }
    }




    static if(!is(typeof(BIO_F_BIO_LOOKUP))) {
        private enum enumMixinStr_BIO_F_BIO_LOOKUP = `enum BIO_F_BIO_LOOKUP = 135;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_F_BIO_LOOKUP); }))) {
            mixin(enumMixinStr_BIO_F_BIO_LOOKUP);
        }
    }




    static if(!is(typeof(BIO_F_BIO_LISTEN))) {
        private enum enumMixinStr_BIO_F_BIO_LISTEN = `enum BIO_F_BIO_LISTEN = 139;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_F_BIO_LISTEN); }))) {
            mixin(enumMixinStr_BIO_F_BIO_LISTEN);
        }
    }




    static if(!is(typeof(BIO_F_BIO_GET_PORT))) {
        private enum enumMixinStr_BIO_F_BIO_GET_PORT = `enum BIO_F_BIO_GET_PORT = 107;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_F_BIO_GET_PORT); }))) {
            mixin(enumMixinStr_BIO_F_BIO_GET_PORT);
        }
    }




    static if(!is(typeof(BIO_F_BIO_GET_NEW_INDEX))) {
        private enum enumMixinStr_BIO_F_BIO_GET_NEW_INDEX = `enum BIO_F_BIO_GET_NEW_INDEX = 102;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_F_BIO_GET_NEW_INDEX); }))) {
            mixin(enumMixinStr_BIO_F_BIO_GET_NEW_INDEX);
        }
    }




    static if(!is(typeof(BIO_F_BIO_GET_HOST_IP))) {
        private enum enumMixinStr_BIO_F_BIO_GET_HOST_IP = `enum BIO_F_BIO_GET_HOST_IP = 106;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_F_BIO_GET_HOST_IP); }))) {
            mixin(enumMixinStr_BIO_F_BIO_GET_HOST_IP);
        }
    }




    static if(!is(typeof(BIO_F_BIO_GETS))) {
        private enum enumMixinStr_BIO_F_BIO_GETS = `enum BIO_F_BIO_GETS = 104;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_F_BIO_GETS); }))) {
            mixin(enumMixinStr_BIO_F_BIO_GETS);
        }
    }




    static if(!is(typeof(BIO_F_BIO_CTRL))) {
        private enum enumMixinStr_BIO_F_BIO_CTRL = `enum BIO_F_BIO_CTRL = 103;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_F_BIO_CTRL); }))) {
            mixin(enumMixinStr_BIO_F_BIO_CTRL);
        }
    }




    static if(!is(typeof(BIO_F_BIO_CONNECT_NEW))) {
        private enum enumMixinStr_BIO_F_BIO_CONNECT_NEW = `enum BIO_F_BIO_CONNECT_NEW = 153;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_F_BIO_CONNECT_NEW); }))) {
            mixin(enumMixinStr_BIO_F_BIO_CONNECT_NEW);
        }
    }




    static if(!is(typeof(BIO_F_BIO_CONNECT))) {
        private enum enumMixinStr_BIO_F_BIO_CONNECT = `enum BIO_F_BIO_CONNECT = 138;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_F_BIO_CONNECT); }))) {
            mixin(enumMixinStr_BIO_F_BIO_CONNECT);
        }
    }




    static if(!is(typeof(BIO_F_BIO_CALLBACK_CTRL))) {
        private enum enumMixinStr_BIO_F_BIO_CALLBACK_CTRL = `enum BIO_F_BIO_CALLBACK_CTRL = 131;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_F_BIO_CALLBACK_CTRL); }))) {
            mixin(enumMixinStr_BIO_F_BIO_CALLBACK_CTRL);
        }
    }




    static if(!is(typeof(BIO_F_BIO_BIND))) {
        private enum enumMixinStr_BIO_F_BIO_BIND = `enum BIO_F_BIO_BIND = 147;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_F_BIO_BIND); }))) {
            mixin(enumMixinStr_BIO_F_BIO_BIND);
        }
    }




    static if(!is(typeof(BIO_F_BIO_ADDR_NEW))) {
        private enum enumMixinStr_BIO_F_BIO_ADDR_NEW = `enum BIO_F_BIO_ADDR_NEW = 144;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_F_BIO_ADDR_NEW); }))) {
            mixin(enumMixinStr_BIO_F_BIO_ADDR_NEW);
        }
    }




    static if(!is(typeof(BIO_F_BIO_ACCEPT_NEW))) {
        private enum enumMixinStr_BIO_F_BIO_ACCEPT_NEW = `enum BIO_F_BIO_ACCEPT_NEW = 152;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_F_BIO_ACCEPT_NEW); }))) {
            mixin(enumMixinStr_BIO_F_BIO_ACCEPT_NEW);
        }
    }




    static if(!is(typeof(BIO_F_BIO_ACCEPT_EX))) {
        private enum enumMixinStr_BIO_F_BIO_ACCEPT_EX = `enum BIO_F_BIO_ACCEPT_EX = 137;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_F_BIO_ACCEPT_EX); }))) {
            mixin(enumMixinStr_BIO_F_BIO_ACCEPT_EX);
        }
    }




    static if(!is(typeof(BIO_F_BIO_ACCEPT))) {
        private enum enumMixinStr_BIO_F_BIO_ACCEPT = `enum BIO_F_BIO_ACCEPT = 101;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_F_BIO_ACCEPT); }))) {
            mixin(enumMixinStr_BIO_F_BIO_ACCEPT);
        }
    }




    static if(!is(typeof(BIO_F_ADDR_STRINGS))) {
        private enum enumMixinStr_BIO_F_ADDR_STRINGS = `enum BIO_F_ADDR_STRINGS = 134;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_F_ADDR_STRINGS); }))) {
            mixin(enumMixinStr_BIO_F_ADDR_STRINGS);
        }
    }




    static if(!is(typeof(BIO_F_ADDRINFO_WRAP))) {
        private enum enumMixinStr_BIO_F_ADDRINFO_WRAP = `enum BIO_F_ADDRINFO_WRAP = 148;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_F_ADDRINFO_WRAP); }))) {
            mixin(enumMixinStr_BIO_F_ADDRINFO_WRAP);
        }
    }




    static if(!is(typeof(BIO_F_ACPT_STATE))) {
        private enum enumMixinStr_BIO_F_ACPT_STATE = `enum BIO_F_ACPT_STATE = 100;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_F_ACPT_STATE); }))) {
            mixin(enumMixinStr_BIO_F_ACPT_STATE);
        }
    }






    static if(!is(typeof(ossl_bio__printf__))) {
        private enum enumMixinStr_ossl_bio__printf__ = `enum ossl_bio__printf__ = __printf__;`;
        static if(is(typeof({ mixin(enumMixinStr_ossl_bio__printf__); }))) {
            mixin(enumMixinStr_ossl_bio__printf__);
        }
    }




    static if(!is(typeof(ossl_bio__attr__))) {
        private enum enumMixinStr_ossl_bio__attr__ = `enum ossl_bio__attr__ = __attribute__;`;
        static if(is(typeof({ mixin(enumMixinStr_ossl_bio__attr__); }))) {
            mixin(enumMixinStr_ossl_bio__attr__);
        }
    }




    static if(!is(typeof(BIO_SOCK_NODELAY))) {
        private enum enumMixinStr_BIO_SOCK_NODELAY = `enum BIO_SOCK_NODELAY = 0x10;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_SOCK_NODELAY); }))) {
            mixin(enumMixinStr_BIO_SOCK_NODELAY);
        }
    }




    static if(!is(typeof(BIO_SOCK_NONBLOCK))) {
        private enum enumMixinStr_BIO_SOCK_NONBLOCK = `enum BIO_SOCK_NONBLOCK = 0x08;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_SOCK_NONBLOCK); }))) {
            mixin(enumMixinStr_BIO_SOCK_NONBLOCK);
        }
    }




    static if(!is(typeof(BIO_SOCK_KEEPALIVE))) {
        private enum enumMixinStr_BIO_SOCK_KEEPALIVE = `enum BIO_SOCK_KEEPALIVE = 0x04;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_SOCK_KEEPALIVE); }))) {
            mixin(enumMixinStr_BIO_SOCK_KEEPALIVE);
        }
    }




    static if(!is(typeof(BIO_SOCK_V6_ONLY))) {
        private enum enumMixinStr_BIO_SOCK_V6_ONLY = `enum BIO_SOCK_V6_ONLY = 0x02;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_SOCK_V6_ONLY); }))) {
            mixin(enumMixinStr_BIO_SOCK_V6_ONLY);
        }
    }




    static if(!is(typeof(BIO_SOCK_REUSEADDR))) {
        private enum enumMixinStr_BIO_SOCK_REUSEADDR = `enum BIO_SOCK_REUSEADDR = 0x01;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_SOCK_REUSEADDR); }))) {
            mixin(enumMixinStr_BIO_SOCK_REUSEADDR);
        }
    }
    static if(!is(typeof(BIO_BIND_REUSEADDR_IF_UNUSED))) {
        private enum enumMixinStr_BIO_BIND_REUSEADDR_IF_UNUSED = `enum BIO_BIND_REUSEADDR_IF_UNUSED = 0x01;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_BIND_REUSEADDR_IF_UNUSED); }))) {
            mixin(enumMixinStr_BIO_BIND_REUSEADDR_IF_UNUSED);
        }
    }




    static if(!is(typeof(BIO_BIND_REUSEADDR))) {
        private enum enumMixinStr_BIO_BIND_REUSEADDR = `enum BIO_BIND_REUSEADDR = 0x01;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_BIND_REUSEADDR); }))) {
            mixin(enumMixinStr_BIO_BIND_REUSEADDR);
        }
    }




    static if(!is(typeof(BIO_BIND_NORMAL))) {
        private enum enumMixinStr_BIO_BIND_NORMAL = `enum BIO_BIND_NORMAL = 0;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_BIND_NORMAL); }))) {
            mixin(enumMixinStr_BIO_BIND_NORMAL);
        }
    }
    static if(!is(typeof(BIO_FAMILY_IPANY))) {
        private enum enumMixinStr_BIO_FAMILY_IPANY = `enum BIO_FAMILY_IPANY = 256;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_FAMILY_IPANY); }))) {
            mixin(enumMixinStr_BIO_FAMILY_IPANY);
        }
    }




    static if(!is(typeof(BIO_FAMILY_IPV6))) {
        private enum enumMixinStr_BIO_FAMILY_IPV6 = `enum BIO_FAMILY_IPV6 = 6;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_FAMILY_IPV6); }))) {
            mixin(enumMixinStr_BIO_FAMILY_IPV6);
        }
    }




    static if(!is(typeof(BIO_FAMILY_IPV4))) {
        private enum enumMixinStr_BIO_FAMILY_IPV4 = `enum BIO_FAMILY_IPV4 = 4;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_FAMILY_IPV4); }))) {
            mixin(enumMixinStr_BIO_FAMILY_IPV4);
        }
    }
    static if(!is(typeof(BIO_C_SET_CONNECT_MODE))) {
        private enum enumMixinStr_BIO_C_SET_CONNECT_MODE = `enum BIO_C_SET_CONNECT_MODE = 155;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_C_SET_CONNECT_MODE); }))) {
            mixin(enumMixinStr_BIO_C_SET_CONNECT_MODE);
        }
    }




    static if(!is(typeof(BIO_C_GET_EX_ARG))) {
        private enum enumMixinStr_BIO_C_GET_EX_ARG = `enum BIO_C_GET_EX_ARG = 154;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_C_GET_EX_ARG); }))) {
            mixin(enumMixinStr_BIO_C_GET_EX_ARG);
        }
    }




    static if(!is(typeof(BIO_C_SET_EX_ARG))) {
        private enum enumMixinStr_BIO_C_SET_EX_ARG = `enum BIO_C_SET_EX_ARG = 153;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_C_SET_EX_ARG); }))) {
            mixin(enumMixinStr_BIO_C_SET_EX_ARG);
        }
    }






    static if(!is(typeof(BIO_C_GET_SUFFIX))) {
        private enum enumMixinStr_BIO_C_GET_SUFFIX = `enum BIO_C_GET_SUFFIX = 152;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_C_GET_SUFFIX); }))) {
            mixin(enumMixinStr_BIO_C_GET_SUFFIX);
        }
    }




    static if(!is(typeof(BIO_C_SET_SUFFIX))) {
        private enum enumMixinStr_BIO_C_SET_SUFFIX = `enum BIO_C_SET_SUFFIX = 151;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_C_SET_SUFFIX); }))) {
            mixin(enumMixinStr_BIO_C_SET_SUFFIX);
        }
    }




    static if(!is(typeof(BIO_C_GET_PREFIX))) {
        private enum enumMixinStr_BIO_C_GET_PREFIX = `enum BIO_C_GET_PREFIX = 150;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_C_GET_PREFIX); }))) {
            mixin(enumMixinStr_BIO_C_GET_PREFIX);
        }
    }




    static if(!is(typeof(BIO_C_SET_PREFIX))) {
        private enum enumMixinStr_BIO_C_SET_PREFIX = `enum BIO_C_SET_PREFIX = 149;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_C_SET_PREFIX); }))) {
            mixin(enumMixinStr_BIO_C_SET_PREFIX);
        }
    }




    static if(!is(typeof(BIO_C_SET_MD_CTX))) {
        private enum enumMixinStr_BIO_C_SET_MD_CTX = `enum BIO_C_SET_MD_CTX = 148;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_C_SET_MD_CTX); }))) {
            mixin(enumMixinStr_BIO_C_SET_MD_CTX);
        }
    }




    static if(!is(typeof(BIO_C_RESET_READ_REQUEST))) {
        private enum enumMixinStr_BIO_C_RESET_READ_REQUEST = `enum BIO_C_RESET_READ_REQUEST = 147;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_C_RESET_READ_REQUEST); }))) {
            mixin(enumMixinStr_BIO_C_RESET_READ_REQUEST);
        }
    }




    static if(!is(typeof(BIO_C_NWRITE))) {
        private enum enumMixinStr_BIO_C_NWRITE = `enum BIO_C_NWRITE = 146;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_C_NWRITE); }))) {
            mixin(enumMixinStr_BIO_C_NWRITE);
        }
    }




    static if(!is(typeof(BIO_C_NWRITE0))) {
        private enum enumMixinStr_BIO_C_NWRITE0 = `enum BIO_C_NWRITE0 = 145;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_C_NWRITE0); }))) {
            mixin(enumMixinStr_BIO_C_NWRITE0);
        }
    }




    static if(!is(typeof(BIO_C_NREAD))) {
        private enum enumMixinStr_BIO_C_NREAD = `enum BIO_C_NREAD = 144;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_C_NREAD); }))) {
            mixin(enumMixinStr_BIO_C_NREAD);
        }
    }




    static if(!is(typeof(BIO_C_NREAD0))) {
        private enum enumMixinStr_BIO_C_NREAD0 = `enum BIO_C_NREAD0 = 143;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_C_NREAD0); }))) {
            mixin(enumMixinStr_BIO_C_NREAD0);
        }
    }




    static if(!is(typeof(BIO_C_SHUTDOWN_WR))) {
        private enum enumMixinStr_BIO_C_SHUTDOWN_WR = `enum BIO_C_SHUTDOWN_WR = 142;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_C_SHUTDOWN_WR); }))) {
            mixin(enumMixinStr_BIO_C_SHUTDOWN_WR);
        }
    }




    static if(!is(typeof(BIO_C_GET_READ_REQUEST))) {
        private enum enumMixinStr_BIO_C_GET_READ_REQUEST = `enum BIO_C_GET_READ_REQUEST = 141;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_C_GET_READ_REQUEST); }))) {
            mixin(enumMixinStr_BIO_C_GET_READ_REQUEST);
        }
    }




    static if(!is(typeof(BIO_C_GET_WRITE_GUARANTEE))) {
        private enum enumMixinStr_BIO_C_GET_WRITE_GUARANTEE = `enum BIO_C_GET_WRITE_GUARANTEE = 140;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_C_GET_WRITE_GUARANTEE); }))) {
            mixin(enumMixinStr_BIO_C_GET_WRITE_GUARANTEE);
        }
    }




    static if(!is(typeof(BIO_C_DESTROY_BIO_PAIR))) {
        private enum enumMixinStr_BIO_C_DESTROY_BIO_PAIR = `enum BIO_C_DESTROY_BIO_PAIR = 139;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_C_DESTROY_BIO_PAIR); }))) {
            mixin(enumMixinStr_BIO_C_DESTROY_BIO_PAIR);
        }
    }




    static if(!is(typeof(BIO_C_MAKE_BIO_PAIR))) {
        private enum enumMixinStr_BIO_C_MAKE_BIO_PAIR = `enum BIO_C_MAKE_BIO_PAIR = 138;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_C_MAKE_BIO_PAIR); }))) {
            mixin(enumMixinStr_BIO_C_MAKE_BIO_PAIR);
        }
    }




    static if(!is(typeof(BIO_C_GET_WRITE_BUF_SIZE))) {
        private enum enumMixinStr_BIO_C_GET_WRITE_BUF_SIZE = `enum BIO_C_GET_WRITE_BUF_SIZE = 137;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_C_GET_WRITE_BUF_SIZE); }))) {
            mixin(enumMixinStr_BIO_C_GET_WRITE_BUF_SIZE);
        }
    }




    static if(!is(typeof(BIO_C_SET_WRITE_BUF_SIZE))) {
        private enum enumMixinStr_BIO_C_SET_WRITE_BUF_SIZE = `enum BIO_C_SET_WRITE_BUF_SIZE = 136;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_C_SET_WRITE_BUF_SIZE); }))) {
            mixin(enumMixinStr_BIO_C_SET_WRITE_BUF_SIZE);
        }
    }




    static if(!is(typeof(BIO_C_SET_SOCKS))) {
        private enum enumMixinStr_BIO_C_SET_SOCKS = `enum BIO_C_SET_SOCKS = 135;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_C_SET_SOCKS); }))) {
            mixin(enumMixinStr_BIO_C_SET_SOCKS);
        }
    }




    static if(!is(typeof(BIO_C_GET_SOCKS))) {
        private enum enumMixinStr_BIO_C_GET_SOCKS = `enum BIO_C_GET_SOCKS = 134;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_C_GET_SOCKS); }))) {
            mixin(enumMixinStr_BIO_C_GET_SOCKS);
        }
    }




    static if(!is(typeof(BIO_C_FILE_TELL))) {
        private enum enumMixinStr_BIO_C_FILE_TELL = `enum BIO_C_FILE_TELL = 133;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_C_FILE_TELL); }))) {
            mixin(enumMixinStr_BIO_C_FILE_TELL);
        }
    }




    static if(!is(typeof(BIO_C_GET_BIND_MODE))) {
        private enum enumMixinStr_BIO_C_GET_BIND_MODE = `enum BIO_C_GET_BIND_MODE = 132;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_C_GET_BIND_MODE); }))) {
            mixin(enumMixinStr_BIO_C_GET_BIND_MODE);
        }
    }




    static if(!is(typeof(BIO_C_SET_BIND_MODE))) {
        private enum enumMixinStr_BIO_C_SET_BIND_MODE = `enum BIO_C_SET_BIND_MODE = 131;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_C_SET_BIND_MODE); }))) {
            mixin(enumMixinStr_BIO_C_SET_BIND_MODE);
        }
    }




    static if(!is(typeof(BIO_C_SET_BUF_MEM_EOF_RETURN))) {
        private enum enumMixinStr_BIO_C_SET_BUF_MEM_EOF_RETURN = `enum BIO_C_SET_BUF_MEM_EOF_RETURN = 130;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_C_SET_BUF_MEM_EOF_RETURN); }))) {
            mixin(enumMixinStr_BIO_C_SET_BUF_MEM_EOF_RETURN);
        }
    }




    static if(!is(typeof(BIO_C_GET_CIPHER_CTX))) {
        private enum enumMixinStr_BIO_C_GET_CIPHER_CTX = `enum BIO_C_GET_CIPHER_CTX = 129;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_C_GET_CIPHER_CTX); }))) {
            mixin(enumMixinStr_BIO_C_GET_CIPHER_CTX);
        }
    }




    static if(!is(typeof(BIO_C_FILE_SEEK))) {
        private enum enumMixinStr_BIO_C_FILE_SEEK = `enum BIO_C_FILE_SEEK = 128;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_C_FILE_SEEK); }))) {
            mixin(enumMixinStr_BIO_C_FILE_SEEK);
        }
    }




    static if(!is(typeof(BIO_C_SET_SSL_RENEGOTIATE_TIMEOUT))) {
        private enum enumMixinStr_BIO_C_SET_SSL_RENEGOTIATE_TIMEOUT = `enum BIO_C_SET_SSL_RENEGOTIATE_TIMEOUT = 127;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_C_SET_SSL_RENEGOTIATE_TIMEOUT); }))) {
            mixin(enumMixinStr_BIO_C_SET_SSL_RENEGOTIATE_TIMEOUT);
        }
    }




    static if(!is(typeof(BIO_C_GET_SSL_NUM_RENEGOTIATES))) {
        private enum enumMixinStr_BIO_C_GET_SSL_NUM_RENEGOTIATES = `enum BIO_C_GET_SSL_NUM_RENEGOTIATES = 126;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_C_GET_SSL_NUM_RENEGOTIATES); }))) {
            mixin(enumMixinStr_BIO_C_GET_SSL_NUM_RENEGOTIATES);
        }
    }




    static if(!is(typeof(BIO_C_SET_SSL_RENEGOTIATE_BYTES))) {
        private enum enumMixinStr_BIO_C_SET_SSL_RENEGOTIATE_BYTES = `enum BIO_C_SET_SSL_RENEGOTIATE_BYTES = 125;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_C_SET_SSL_RENEGOTIATE_BYTES); }))) {
            mixin(enumMixinStr_BIO_C_SET_SSL_RENEGOTIATE_BYTES);
        }
    }




    static if(!is(typeof(BIO_C_GET_ACCEPT))) {
        private enum enumMixinStr_BIO_C_GET_ACCEPT = `enum BIO_C_GET_ACCEPT = 124;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_C_GET_ACCEPT); }))) {
            mixin(enumMixinStr_BIO_C_GET_ACCEPT);
        }
    }




    static if(!is(typeof(BIO_C_GET_CONNECT))) {
        private enum enumMixinStr_BIO_C_GET_CONNECT = `enum BIO_C_GET_CONNECT = 123;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_C_GET_CONNECT); }))) {
            mixin(enumMixinStr_BIO_C_GET_CONNECT);
        }
    }




    static if(!is(typeof(BIO_C_SET_BUFF_READ_DATA))) {
        private enum enumMixinStr_BIO_C_SET_BUFF_READ_DATA = `enum BIO_C_SET_BUFF_READ_DATA = 122;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_C_SET_BUFF_READ_DATA); }))) {
            mixin(enumMixinStr_BIO_C_SET_BUFF_READ_DATA);
        }
    }




    static if(!is(typeof(BIO_C_GET_MD_CTX))) {
        private enum enumMixinStr_BIO_C_GET_MD_CTX = `enum BIO_C_GET_MD_CTX = 120;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_C_GET_MD_CTX); }))) {
            mixin(enumMixinStr_BIO_C_GET_MD_CTX);
        }
    }




    static if(!is(typeof(BIO_C_SSL_MODE))) {
        private enum enumMixinStr_BIO_C_SSL_MODE = `enum BIO_C_SSL_MODE = 119;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_C_SSL_MODE); }))) {
            mixin(enumMixinStr_BIO_C_SSL_MODE);
        }
    }




    static if(!is(typeof(BIO_C_SET_ACCEPT))) {
        private enum enumMixinStr_BIO_C_SET_ACCEPT = `enum BIO_C_SET_ACCEPT = 118;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_C_SET_ACCEPT); }))) {
            mixin(enumMixinStr_BIO_C_SET_ACCEPT);
        }
    }




    static if(!is(typeof(BIO_C_SET_BUFF_SIZE))) {
        private enum enumMixinStr_BIO_C_SET_BUFF_SIZE = `enum BIO_C_SET_BUFF_SIZE = 117;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_C_SET_BUFF_SIZE); }))) {
            mixin(enumMixinStr_BIO_C_SET_BUFF_SIZE);
        }
    }




    static if(!is(typeof(BIO_C_GET_BUFF_NUM_LINES))) {
        private enum enumMixinStr_BIO_C_GET_BUFF_NUM_LINES = `enum BIO_C_GET_BUFF_NUM_LINES = 116;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_C_GET_BUFF_NUM_LINES); }))) {
            mixin(enumMixinStr_BIO_C_GET_BUFF_NUM_LINES);
        }
    }




    static if(!is(typeof(BIO_C_GET_BUF_MEM_PTR))) {
        private enum enumMixinStr_BIO_C_GET_BUF_MEM_PTR = `enum BIO_C_GET_BUF_MEM_PTR = 115;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_C_GET_BUF_MEM_PTR); }))) {
            mixin(enumMixinStr_BIO_C_GET_BUF_MEM_PTR);
        }
    }




    static if(!is(typeof(BIO_C_SET_BUF_MEM))) {
        private enum enumMixinStr_BIO_C_SET_BUF_MEM = `enum BIO_C_SET_BUF_MEM = 114;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_C_SET_BUF_MEM); }))) {
            mixin(enumMixinStr_BIO_C_SET_BUF_MEM);
        }
    }




    static if(!is(typeof(BIO_C_GET_CIPHER_STATUS))) {
        private enum enumMixinStr_BIO_C_GET_CIPHER_STATUS = `enum BIO_C_GET_CIPHER_STATUS = 113;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_C_GET_CIPHER_STATUS); }))) {
            mixin(enumMixinStr_BIO_C_GET_CIPHER_STATUS);
        }
    }




    static if(!is(typeof(BIO_C_GET_MD))) {
        private enum enumMixinStr_BIO_C_GET_MD = `enum BIO_C_GET_MD = 112;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_C_GET_MD); }))) {
            mixin(enumMixinStr_BIO_C_GET_MD);
        }
    }






    static if(!is(typeof(BIO_C_SET_MD))) {
        private enum enumMixinStr_BIO_C_SET_MD = `enum BIO_C_SET_MD = 111;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_C_SET_MD); }))) {
            mixin(enumMixinStr_BIO_C_SET_MD);
        }
    }




    static if(!is(typeof(BIO_C_GET_SSL))) {
        private enum enumMixinStr_BIO_C_GET_SSL = `enum BIO_C_GET_SSL = 110;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_C_GET_SSL); }))) {
            mixin(enumMixinStr_BIO_C_GET_SSL);
        }
    }




    static if(!is(typeof(BIO_C_SET_SSL))) {
        private enum enumMixinStr_BIO_C_SET_SSL = `enum BIO_C_SET_SSL = 109;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_C_SET_SSL); }))) {
            mixin(enumMixinStr_BIO_C_SET_SSL);
        }
    }




    static if(!is(typeof(BIO_C_SET_FILENAME))) {
        private enum enumMixinStr_BIO_C_SET_FILENAME = `enum BIO_C_SET_FILENAME = 108;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_C_SET_FILENAME); }))) {
            mixin(enumMixinStr_BIO_C_SET_FILENAME);
        }
    }




    static if(!is(typeof(BIO_C_GET_FILE_PTR))) {
        private enum enumMixinStr_BIO_C_GET_FILE_PTR = `enum BIO_C_GET_FILE_PTR = 107;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_C_GET_FILE_PTR); }))) {
            mixin(enumMixinStr_BIO_C_GET_FILE_PTR);
        }
    }




    static if(!is(typeof(BIO_C_SET_FILE_PTR))) {
        private enum enumMixinStr_BIO_C_SET_FILE_PTR = `enum BIO_C_SET_FILE_PTR = 106;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_C_SET_FILE_PTR); }))) {
            mixin(enumMixinStr_BIO_C_SET_FILE_PTR);
        }
    }




    static if(!is(typeof(BIO_C_GET_FD))) {
        private enum enumMixinStr_BIO_C_GET_FD = `enum BIO_C_GET_FD = 105;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_C_GET_FD); }))) {
            mixin(enumMixinStr_BIO_C_GET_FD);
        }
    }




    static if(!is(typeof(BIO_C_SET_FD))) {
        private enum enumMixinStr_BIO_C_SET_FD = `enum BIO_C_SET_FD = 104;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_C_SET_FD); }))) {
            mixin(enumMixinStr_BIO_C_SET_FD);
        }
    }




    static if(!is(typeof(BIO_C_SET_NBIO))) {
        private enum enumMixinStr_BIO_C_SET_NBIO = `enum BIO_C_SET_NBIO = 102;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_C_SET_NBIO); }))) {
            mixin(enumMixinStr_BIO_C_SET_NBIO);
        }
    }




    static if(!is(typeof(BIO_C_DO_STATE_MACHINE))) {
        private enum enumMixinStr_BIO_C_DO_STATE_MACHINE = `enum BIO_C_DO_STATE_MACHINE = 101;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_C_DO_STATE_MACHINE); }))) {
            mixin(enumMixinStr_BIO_C_DO_STATE_MACHINE);
        }
    }




    static if(!is(typeof(BIO_C_SET_CONNECT))) {
        private enum enumMixinStr_BIO_C_SET_CONNECT = `enum BIO_C_SET_CONNECT = 100;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_C_SET_CONNECT); }))) {
            mixin(enumMixinStr_BIO_C_SET_CONNECT);
        }
    }
    static if(!is(typeof(BIO_CB_RETURN))) {
        private enum enumMixinStr_BIO_CB_RETURN = `enum BIO_CB_RETURN = 0x80;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_CB_RETURN); }))) {
            mixin(enumMixinStr_BIO_CB_RETURN);
        }
    }




    static if(!is(typeof(BIO_CB_CTRL))) {
        private enum enumMixinStr_BIO_CB_CTRL = `enum BIO_CB_CTRL = 0x06;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_CB_CTRL); }))) {
            mixin(enumMixinStr_BIO_CB_CTRL);
        }
    }




    static if(!is(typeof(BIO_CB_GETS))) {
        private enum enumMixinStr_BIO_CB_GETS = `enum BIO_CB_GETS = 0x05;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_CB_GETS); }))) {
            mixin(enumMixinStr_BIO_CB_GETS);
        }
    }




    static if(!is(typeof(BIO_CB_PUTS))) {
        private enum enumMixinStr_BIO_CB_PUTS = `enum BIO_CB_PUTS = 0x04;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_CB_PUTS); }))) {
            mixin(enumMixinStr_BIO_CB_PUTS);
        }
    }




    static if(!is(typeof(BIO_CB_WRITE))) {
        private enum enumMixinStr_BIO_CB_WRITE = `enum BIO_CB_WRITE = 0x03;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_CB_WRITE); }))) {
            mixin(enumMixinStr_BIO_CB_WRITE);
        }
    }




    static if(!is(typeof(BIO_CB_READ))) {
        private enum enumMixinStr_BIO_CB_READ = `enum BIO_CB_READ = 0x02;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_CB_READ); }))) {
            mixin(enumMixinStr_BIO_CB_READ);
        }
    }




    static if(!is(typeof(BIO_CB_FREE))) {
        private enum enumMixinStr_BIO_CB_FREE = `enum BIO_CB_FREE = 0x01;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_CB_FREE); }))) {
            mixin(enumMixinStr_BIO_CB_FREE);
        }
    }




    static if(!is(typeof(BIO_RR_ACCEPT))) {
        private enum enumMixinStr_BIO_RR_ACCEPT = `enum BIO_RR_ACCEPT = 0x03;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_RR_ACCEPT); }))) {
            mixin(enumMixinStr_BIO_RR_ACCEPT);
        }
    }




    static if(!is(typeof(BIO_RR_CONNECT))) {
        private enum enumMixinStr_BIO_RR_CONNECT = `enum BIO_RR_CONNECT = 0x02;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_RR_CONNECT); }))) {
            mixin(enumMixinStr_BIO_RR_CONNECT);
        }
    }




    static if(!is(typeof(BIO_RR_SSL_X509_LOOKUP))) {
        private enum enumMixinStr_BIO_RR_SSL_X509_LOOKUP = `enum BIO_RR_SSL_X509_LOOKUP = 0x01;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_RR_SSL_X509_LOOKUP); }))) {
            mixin(enumMixinStr_BIO_RR_SSL_X509_LOOKUP);
        }
    }
    static if(!is(typeof(BIO_FLAGS_IN_EOF))) {
        private enum enumMixinStr_BIO_FLAGS_IN_EOF = `enum BIO_FLAGS_IN_EOF = 0x800;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_FLAGS_IN_EOF); }))) {
            mixin(enumMixinStr_BIO_FLAGS_IN_EOF);
        }
    }




    static if(!is(typeof(BIO_FLAGS_NONCLEAR_RST))) {
        private enum enumMixinStr_BIO_FLAGS_NONCLEAR_RST = `enum BIO_FLAGS_NONCLEAR_RST = 0x400;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_FLAGS_NONCLEAR_RST); }))) {
            mixin(enumMixinStr_BIO_FLAGS_NONCLEAR_RST);
        }
    }




    static if(!is(typeof(BIO_FLAGS_MEM_RDONLY))) {
        private enum enumMixinStr_BIO_FLAGS_MEM_RDONLY = `enum BIO_FLAGS_MEM_RDONLY = 0x200;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_FLAGS_MEM_RDONLY); }))) {
            mixin(enumMixinStr_BIO_FLAGS_MEM_RDONLY);
        }
    }




    static if(!is(typeof(BIO_FLAGS_BASE64_NO_NL))) {
        private enum enumMixinStr_BIO_FLAGS_BASE64_NO_NL = `enum BIO_FLAGS_BASE64_NO_NL = 0x100;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_FLAGS_BASE64_NO_NL); }))) {
            mixin(enumMixinStr_BIO_FLAGS_BASE64_NO_NL);
        }
    }




    static if(!is(typeof(BIO_FLAGS_UPLINK))) {
        private enum enumMixinStr_BIO_FLAGS_UPLINK = `enum BIO_FLAGS_UPLINK = 0;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_FLAGS_UPLINK); }))) {
            mixin(enumMixinStr_BIO_FLAGS_UPLINK);
        }
    }






    static if(!is(typeof(BIO_FLAGS_SHOULD_RETRY))) {
        private enum enumMixinStr_BIO_FLAGS_SHOULD_RETRY = `enum BIO_FLAGS_SHOULD_RETRY = 0x08;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_FLAGS_SHOULD_RETRY); }))) {
            mixin(enumMixinStr_BIO_FLAGS_SHOULD_RETRY);
        }
    }




    static if(!is(typeof(BIO_FLAGS_RWS))) {
        private enum enumMixinStr_BIO_FLAGS_RWS = `enum BIO_FLAGS_RWS = ( BIO_FLAGS_READ | BIO_FLAGS_WRITE | BIO_FLAGS_IO_SPECIAL );`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_FLAGS_RWS); }))) {
            mixin(enumMixinStr_BIO_FLAGS_RWS);
        }
    }




    static if(!is(typeof(BIO_FLAGS_IO_SPECIAL))) {
        private enum enumMixinStr_BIO_FLAGS_IO_SPECIAL = `enum BIO_FLAGS_IO_SPECIAL = 0x04;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_FLAGS_IO_SPECIAL); }))) {
            mixin(enumMixinStr_BIO_FLAGS_IO_SPECIAL);
        }
    }




    static if(!is(typeof(BIO_FLAGS_WRITE))) {
        private enum enumMixinStr_BIO_FLAGS_WRITE = `enum BIO_FLAGS_WRITE = 0x02;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_FLAGS_WRITE); }))) {
            mixin(enumMixinStr_BIO_FLAGS_WRITE);
        }
    }




    static if(!is(typeof(BIO_FLAGS_READ))) {
        private enum enumMixinStr_BIO_FLAGS_READ = `enum BIO_FLAGS_READ = 0x01;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_FLAGS_READ); }))) {
            mixin(enumMixinStr_BIO_FLAGS_READ);
        }
    }




    static if(!is(typeof(BIO_FP_TEXT))) {
        private enum enumMixinStr_BIO_FP_TEXT = `enum BIO_FP_TEXT = 0x10;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_FP_TEXT); }))) {
            mixin(enumMixinStr_BIO_FP_TEXT);
        }
    }




    static if(!is(typeof(BIO_FP_APPEND))) {
        private enum enumMixinStr_BIO_FP_APPEND = `enum BIO_FP_APPEND = 0x08;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_FP_APPEND); }))) {
            mixin(enumMixinStr_BIO_FP_APPEND);
        }
    }




    static if(!is(typeof(BIO_FP_WRITE))) {
        private enum enumMixinStr_BIO_FP_WRITE = `enum BIO_FP_WRITE = 0x04;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_FP_WRITE); }))) {
            mixin(enumMixinStr_BIO_FP_WRITE);
        }
    }




    static if(!is(typeof(BIO_FP_READ))) {
        private enum enumMixinStr_BIO_FP_READ = `enum BIO_FP_READ = 0x02;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_FP_READ); }))) {
            mixin(enumMixinStr_BIO_FP_READ);
        }
    }




    static if(!is(typeof(BIO_CTRL_DGRAM_SET_PEEK_MODE))) {
        private enum enumMixinStr_BIO_CTRL_DGRAM_SET_PEEK_MODE = `enum BIO_CTRL_DGRAM_SET_PEEK_MODE = 71;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_CTRL_DGRAM_SET_PEEK_MODE); }))) {
            mixin(enumMixinStr_BIO_CTRL_DGRAM_SET_PEEK_MODE);
        }
    }




    static if(!is(typeof(BIO_CTRL_DGRAM_SCTP_SET_IN_HANDSHAKE))) {
        private enum enumMixinStr_BIO_CTRL_DGRAM_SCTP_SET_IN_HANDSHAKE = `enum BIO_CTRL_DGRAM_SCTP_SET_IN_HANDSHAKE = 50;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_CTRL_DGRAM_SCTP_SET_IN_HANDSHAKE); }))) {
            mixin(enumMixinStr_BIO_CTRL_DGRAM_SCTP_SET_IN_HANDSHAKE);
        }
    }




    static if(!is(typeof(BIO_CTRL_DGRAM_GET_MTU_OVERHEAD))) {
        private enum enumMixinStr_BIO_CTRL_DGRAM_GET_MTU_OVERHEAD = `enum BIO_CTRL_DGRAM_GET_MTU_OVERHEAD = 49;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_CTRL_DGRAM_GET_MTU_OVERHEAD); }))) {
            mixin(enumMixinStr_BIO_CTRL_DGRAM_GET_MTU_OVERHEAD);
        }
    }




    static if(!is(typeof(BIO_CTRL_DGRAM_SET_DONT_FRAG))) {
        private enum enumMixinStr_BIO_CTRL_DGRAM_SET_DONT_FRAG = `enum BIO_CTRL_DGRAM_SET_DONT_FRAG = 48;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_CTRL_DGRAM_SET_DONT_FRAG); }))) {
            mixin(enumMixinStr_BIO_CTRL_DGRAM_SET_DONT_FRAG);
        }
    }




    static if(!is(typeof(BIO_CTRL_DGRAM_SET_NEXT_TIMEOUT))) {
        private enum enumMixinStr_BIO_CTRL_DGRAM_SET_NEXT_TIMEOUT = `enum BIO_CTRL_DGRAM_SET_NEXT_TIMEOUT = 45;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_CTRL_DGRAM_SET_NEXT_TIMEOUT); }))) {
            mixin(enumMixinStr_BIO_CTRL_DGRAM_SET_NEXT_TIMEOUT);
        }
    }




    static if(!is(typeof(BIO_CTRL_DGRAM_SET_PEER))) {
        private enum enumMixinStr_BIO_CTRL_DGRAM_SET_PEER = `enum BIO_CTRL_DGRAM_SET_PEER = 44;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_CTRL_DGRAM_SET_PEER); }))) {
            mixin(enumMixinStr_BIO_CTRL_DGRAM_SET_PEER);
        }
    }




    static if(!is(typeof(BIO_CTRL_DGRAM_GET_PEER))) {
        private enum enumMixinStr_BIO_CTRL_DGRAM_GET_PEER = `enum BIO_CTRL_DGRAM_GET_PEER = 46;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_CTRL_DGRAM_GET_PEER); }))) {
            mixin(enumMixinStr_BIO_CTRL_DGRAM_GET_PEER);
        }
    }




    static if(!is(typeof(BIO_CTRL_DGRAM_MTU_EXCEEDED))) {
        private enum enumMixinStr_BIO_CTRL_DGRAM_MTU_EXCEEDED = `enum BIO_CTRL_DGRAM_MTU_EXCEEDED = 43;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_CTRL_DGRAM_MTU_EXCEEDED); }))) {
            mixin(enumMixinStr_BIO_CTRL_DGRAM_MTU_EXCEEDED);
        }
    }




    static if(!is(typeof(BIO_CTRL_DGRAM_SET_MTU))) {
        private enum enumMixinStr_BIO_CTRL_DGRAM_SET_MTU = `enum BIO_CTRL_DGRAM_SET_MTU = 42;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_CTRL_DGRAM_SET_MTU); }))) {
            mixin(enumMixinStr_BIO_CTRL_DGRAM_SET_MTU);
        }
    }




    static if(!is(typeof(BIO_CTRL_DGRAM_GET_MTU))) {
        private enum enumMixinStr_BIO_CTRL_DGRAM_GET_MTU = `enum BIO_CTRL_DGRAM_GET_MTU = 41;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_CTRL_DGRAM_GET_MTU); }))) {
            mixin(enumMixinStr_BIO_CTRL_DGRAM_GET_MTU);
        }
    }




    static if(!is(typeof(BIO_CTRL_DGRAM_GET_FALLBACK_MTU))) {
        private enum enumMixinStr_BIO_CTRL_DGRAM_GET_FALLBACK_MTU = `enum BIO_CTRL_DGRAM_GET_FALLBACK_MTU = 47;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_CTRL_DGRAM_GET_FALLBACK_MTU); }))) {
            mixin(enumMixinStr_BIO_CTRL_DGRAM_GET_FALLBACK_MTU);
        }
    }




    static if(!is(typeof(BIO_CTRL_DGRAM_QUERY_MTU))) {
        private enum enumMixinStr_BIO_CTRL_DGRAM_QUERY_MTU = `enum BIO_CTRL_DGRAM_QUERY_MTU = 40;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_CTRL_DGRAM_QUERY_MTU); }))) {
            mixin(enumMixinStr_BIO_CTRL_DGRAM_QUERY_MTU);
        }
    }




    static if(!is(typeof(BIO_CTRL_DGRAM_MTU_DISCOVER))) {
        private enum enumMixinStr_BIO_CTRL_DGRAM_MTU_DISCOVER = `enum BIO_CTRL_DGRAM_MTU_DISCOVER = 39;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_CTRL_DGRAM_MTU_DISCOVER); }))) {
            mixin(enumMixinStr_BIO_CTRL_DGRAM_MTU_DISCOVER);
        }
    }




    static if(!is(typeof(BIO_CTRL_DGRAM_GET_SEND_TIMER_EXP))) {
        private enum enumMixinStr_BIO_CTRL_DGRAM_GET_SEND_TIMER_EXP = `enum BIO_CTRL_DGRAM_GET_SEND_TIMER_EXP = 38;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_CTRL_DGRAM_GET_SEND_TIMER_EXP); }))) {
            mixin(enumMixinStr_BIO_CTRL_DGRAM_GET_SEND_TIMER_EXP);
        }
    }




    static if(!is(typeof(BIO_CTRL_DGRAM_GET_RECV_TIMER_EXP))) {
        private enum enumMixinStr_BIO_CTRL_DGRAM_GET_RECV_TIMER_EXP = `enum BIO_CTRL_DGRAM_GET_RECV_TIMER_EXP = 37;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_CTRL_DGRAM_GET_RECV_TIMER_EXP); }))) {
            mixin(enumMixinStr_BIO_CTRL_DGRAM_GET_RECV_TIMER_EXP);
        }
    }




    static if(!is(typeof(BIO_CTRL_DGRAM_GET_SEND_TIMEOUT))) {
        private enum enumMixinStr_BIO_CTRL_DGRAM_GET_SEND_TIMEOUT = `enum BIO_CTRL_DGRAM_GET_SEND_TIMEOUT = 36;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_CTRL_DGRAM_GET_SEND_TIMEOUT); }))) {
            mixin(enumMixinStr_BIO_CTRL_DGRAM_GET_SEND_TIMEOUT);
        }
    }




    static if(!is(typeof(BIO_CTRL_DGRAM_SET_SEND_TIMEOUT))) {
        private enum enumMixinStr_BIO_CTRL_DGRAM_SET_SEND_TIMEOUT = `enum BIO_CTRL_DGRAM_SET_SEND_TIMEOUT = 35;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_CTRL_DGRAM_SET_SEND_TIMEOUT); }))) {
            mixin(enumMixinStr_BIO_CTRL_DGRAM_SET_SEND_TIMEOUT);
        }
    }




    static if(!is(typeof(BIO_CTRL_DGRAM_GET_RECV_TIMEOUT))) {
        private enum enumMixinStr_BIO_CTRL_DGRAM_GET_RECV_TIMEOUT = `enum BIO_CTRL_DGRAM_GET_RECV_TIMEOUT = 34;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_CTRL_DGRAM_GET_RECV_TIMEOUT); }))) {
            mixin(enumMixinStr_BIO_CTRL_DGRAM_GET_RECV_TIMEOUT);
        }
    }




    static if(!is(typeof(BIO_CTRL_DGRAM_SET_RECV_TIMEOUT))) {
        private enum enumMixinStr_BIO_CTRL_DGRAM_SET_RECV_TIMEOUT = `enum BIO_CTRL_DGRAM_SET_RECV_TIMEOUT = 33;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_CTRL_DGRAM_SET_RECV_TIMEOUT); }))) {
            mixin(enumMixinStr_BIO_CTRL_DGRAM_SET_RECV_TIMEOUT);
        }
    }




    static if(!is(typeof(BIO_CTRL_DGRAM_SET_CONNECTED))) {
        private enum enumMixinStr_BIO_CTRL_DGRAM_SET_CONNECTED = `enum BIO_CTRL_DGRAM_SET_CONNECTED = 32;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_CTRL_DGRAM_SET_CONNECTED); }))) {
            mixin(enumMixinStr_BIO_CTRL_DGRAM_SET_CONNECTED);
        }
    }




    static if(!is(typeof(BIO_CTRL_DGRAM_CONNECT))) {
        private enum enumMixinStr_BIO_CTRL_DGRAM_CONNECT = `enum BIO_CTRL_DGRAM_CONNECT = 31;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_CTRL_DGRAM_CONNECT); }))) {
            mixin(enumMixinStr_BIO_CTRL_DGRAM_CONNECT);
        }
    }




    static if(!is(typeof(BIO_CTRL_SET_FILENAME))) {
        private enum enumMixinStr_BIO_CTRL_SET_FILENAME = `enum BIO_CTRL_SET_FILENAME = 30;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_CTRL_SET_FILENAME); }))) {
            mixin(enumMixinStr_BIO_CTRL_SET_FILENAME);
        }
    }




    static if(!is(typeof(BIO_CTRL_PEEK))) {
        private enum enumMixinStr_BIO_CTRL_PEEK = `enum BIO_CTRL_PEEK = 29;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_CTRL_PEEK); }))) {
            mixin(enumMixinStr_BIO_CTRL_PEEK);
        }
    }




    static if(!is(typeof(BIO_CTRL_GET_CALLBACK))) {
        private enum enumMixinStr_BIO_CTRL_GET_CALLBACK = `enum BIO_CTRL_GET_CALLBACK = 15;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_CTRL_GET_CALLBACK); }))) {
            mixin(enumMixinStr_BIO_CTRL_GET_CALLBACK);
        }
    }




    static if(!is(typeof(BIO_CTRL_SET_CALLBACK))) {
        private enum enumMixinStr_BIO_CTRL_SET_CALLBACK = `enum BIO_CTRL_SET_CALLBACK = 14;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_CTRL_SET_CALLBACK); }))) {
            mixin(enumMixinStr_BIO_CTRL_SET_CALLBACK);
        }
    }




    static if(!is(typeof(BIO_CTRL_WPENDING))) {
        private enum enumMixinStr_BIO_CTRL_WPENDING = `enum BIO_CTRL_WPENDING = 13;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_CTRL_WPENDING); }))) {
            mixin(enumMixinStr_BIO_CTRL_WPENDING);
        }
    }




    static if(!is(typeof(BIO_CTRL_DUP))) {
        private enum enumMixinStr_BIO_CTRL_DUP = `enum BIO_CTRL_DUP = 12;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_CTRL_DUP); }))) {
            mixin(enumMixinStr_BIO_CTRL_DUP);
        }
    }




    static if(!is(typeof(BIO_CTRL_FLUSH))) {
        private enum enumMixinStr_BIO_CTRL_FLUSH = `enum BIO_CTRL_FLUSH = 11;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_CTRL_FLUSH); }))) {
            mixin(enumMixinStr_BIO_CTRL_FLUSH);
        }
    }




    static if(!is(typeof(BIO_CTRL_PENDING))) {
        private enum enumMixinStr_BIO_CTRL_PENDING = `enum BIO_CTRL_PENDING = 10;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_CTRL_PENDING); }))) {
            mixin(enumMixinStr_BIO_CTRL_PENDING);
        }
    }




    static if(!is(typeof(BIO_CTRL_SET_CLOSE))) {
        private enum enumMixinStr_BIO_CTRL_SET_CLOSE = `enum BIO_CTRL_SET_CLOSE = 9;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_CTRL_SET_CLOSE); }))) {
            mixin(enumMixinStr_BIO_CTRL_SET_CLOSE);
        }
    }




    static if(!is(typeof(BIO_CTRL_GET_CLOSE))) {
        private enum enumMixinStr_BIO_CTRL_GET_CLOSE = `enum BIO_CTRL_GET_CLOSE = 8;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_CTRL_GET_CLOSE); }))) {
            mixin(enumMixinStr_BIO_CTRL_GET_CLOSE);
        }
    }






    static if(!is(typeof(BIO_CTRL_POP))) {
        private enum enumMixinStr_BIO_CTRL_POP = `enum BIO_CTRL_POP = 7;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_CTRL_POP); }))) {
            mixin(enumMixinStr_BIO_CTRL_POP);
        }
    }




    static if(!is(typeof(BIO_CTRL_PUSH))) {
        private enum enumMixinStr_BIO_CTRL_PUSH = `enum BIO_CTRL_PUSH = 6;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_CTRL_PUSH); }))) {
            mixin(enumMixinStr_BIO_CTRL_PUSH);
        }
    }




    static if(!is(typeof(BIO_CTRL_GET))) {
        private enum enumMixinStr_BIO_CTRL_GET = `enum BIO_CTRL_GET = 5;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_CTRL_GET); }))) {
            mixin(enumMixinStr_BIO_CTRL_GET);
        }
    }




    static if(!is(typeof(BIO_CTRL_SET))) {
        private enum enumMixinStr_BIO_CTRL_SET = `enum BIO_CTRL_SET = 4;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_CTRL_SET); }))) {
            mixin(enumMixinStr_BIO_CTRL_SET);
        }
    }




    static if(!is(typeof(BIO_CTRL_INFO))) {
        private enum enumMixinStr_BIO_CTRL_INFO = `enum BIO_CTRL_INFO = 3;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_CTRL_INFO); }))) {
            mixin(enumMixinStr_BIO_CTRL_INFO);
        }
    }




    static if(!is(typeof(BIO_CTRL_EOF))) {
        private enum enumMixinStr_BIO_CTRL_EOF = `enum BIO_CTRL_EOF = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_CTRL_EOF); }))) {
            mixin(enumMixinStr_BIO_CTRL_EOF);
        }
    }




    static if(!is(typeof(BIO_CTRL_RESET))) {
        private enum enumMixinStr_BIO_CTRL_RESET = `enum BIO_CTRL_RESET = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_CTRL_RESET); }))) {
            mixin(enumMixinStr_BIO_CTRL_RESET);
        }
    }




    static if(!is(typeof(BIO_CLOSE))) {
        private enum enumMixinStr_BIO_CLOSE = `enum BIO_CLOSE = 0x01;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_CLOSE); }))) {
            mixin(enumMixinStr_BIO_CLOSE);
        }
    }




    static if(!is(typeof(BIO_NOCLOSE))) {
        private enum enumMixinStr_BIO_NOCLOSE = `enum BIO_NOCLOSE = 0x00;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_NOCLOSE); }))) {
            mixin(enumMixinStr_BIO_NOCLOSE);
        }
    }




    static if(!is(typeof(BIO_TYPE_START))) {
        private enum enumMixinStr_BIO_TYPE_START = `enum BIO_TYPE_START = 128;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_TYPE_START); }))) {
            mixin(enumMixinStr_BIO_TYPE_START);
        }
    }




    static if(!is(typeof(BIO_TYPE_COMP))) {
        private enum enumMixinStr_BIO_TYPE_COMP = `enum BIO_TYPE_COMP = ( 23 | BIO_TYPE_FILTER );`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_TYPE_COMP); }))) {
            mixin(enumMixinStr_BIO_TYPE_COMP);
        }
    }




    static if(!is(typeof(BIO_TYPE_ASN1))) {
        private enum enumMixinStr_BIO_TYPE_ASN1 = `enum BIO_TYPE_ASN1 = ( 22 | BIO_TYPE_FILTER );`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_TYPE_ASN1); }))) {
            mixin(enumMixinStr_BIO_TYPE_ASN1);
        }
    }




    static if(!is(typeof(BIO_TYPE_DGRAM))) {
        private enum enumMixinStr_BIO_TYPE_DGRAM = `enum BIO_TYPE_DGRAM = ( 21 | BIO_TYPE_SOURCE_SINK | BIO_TYPE_DESCRIPTOR );`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_TYPE_DGRAM); }))) {
            mixin(enumMixinStr_BIO_TYPE_DGRAM);
        }
    }




    static if(!is(typeof(BIO_TYPE_LINEBUFFER))) {
        private enum enumMixinStr_BIO_TYPE_LINEBUFFER = `enum BIO_TYPE_LINEBUFFER = ( 20 | BIO_TYPE_FILTER );`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_TYPE_LINEBUFFER); }))) {
            mixin(enumMixinStr_BIO_TYPE_LINEBUFFER);
        }
    }




    static if(!is(typeof(BIO_TYPE_BIO))) {
        private enum enumMixinStr_BIO_TYPE_BIO = `enum BIO_TYPE_BIO = ( 19 | BIO_TYPE_SOURCE_SINK );`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_TYPE_BIO); }))) {
            mixin(enumMixinStr_BIO_TYPE_BIO);
        }
    }




    static if(!is(typeof(BIO_TYPE_NULL_FILTER))) {
        private enum enumMixinStr_BIO_TYPE_NULL_FILTER = `enum BIO_TYPE_NULL_FILTER = ( 17 | BIO_TYPE_FILTER );`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_TYPE_NULL_FILTER); }))) {
            mixin(enumMixinStr_BIO_TYPE_NULL_FILTER);
        }
    }




    static if(!is(typeof(BIO_TYPE_NBIO_TEST))) {
        private enum enumMixinStr_BIO_TYPE_NBIO_TEST = `enum BIO_TYPE_NBIO_TEST = ( 16 | BIO_TYPE_FILTER );`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_TYPE_NBIO_TEST); }))) {
            mixin(enumMixinStr_BIO_TYPE_NBIO_TEST);
        }
    }




    static if(!is(typeof(BIO_TYPE_ACCEPT))) {
        private enum enumMixinStr_BIO_TYPE_ACCEPT = `enum BIO_TYPE_ACCEPT = ( 13 | BIO_TYPE_SOURCE_SINK | BIO_TYPE_DESCRIPTOR );`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_TYPE_ACCEPT); }))) {
            mixin(enumMixinStr_BIO_TYPE_ACCEPT);
        }
    }




    static if(!is(typeof(BIO_TYPE_CONNECT))) {
        private enum enumMixinStr_BIO_TYPE_CONNECT = `enum BIO_TYPE_CONNECT = ( 12 | BIO_TYPE_SOURCE_SINK | BIO_TYPE_DESCRIPTOR );`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_TYPE_CONNECT); }))) {
            mixin(enumMixinStr_BIO_TYPE_CONNECT);
        }
    }




    static if(!is(typeof(BIO_TYPE_BASE64))) {
        private enum enumMixinStr_BIO_TYPE_BASE64 = `enum BIO_TYPE_BASE64 = ( 11 | BIO_TYPE_FILTER );`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_TYPE_BASE64); }))) {
            mixin(enumMixinStr_BIO_TYPE_BASE64);
        }
    }




    static if(!is(typeof(BIO_TYPE_CIPHER))) {
        private enum enumMixinStr_BIO_TYPE_CIPHER = `enum BIO_TYPE_CIPHER = ( 10 | BIO_TYPE_FILTER );`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_TYPE_CIPHER); }))) {
            mixin(enumMixinStr_BIO_TYPE_CIPHER);
        }
    }




    static if(!is(typeof(BIO_TYPE_BUFFER))) {
        private enum enumMixinStr_BIO_TYPE_BUFFER = `enum BIO_TYPE_BUFFER = ( 9 | BIO_TYPE_FILTER );`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_TYPE_BUFFER); }))) {
            mixin(enumMixinStr_BIO_TYPE_BUFFER);
        }
    }




    static if(!is(typeof(BIO_TYPE_MD))) {
        private enum enumMixinStr_BIO_TYPE_MD = `enum BIO_TYPE_MD = ( 8 | BIO_TYPE_FILTER );`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_TYPE_MD); }))) {
            mixin(enumMixinStr_BIO_TYPE_MD);
        }
    }




    static if(!is(typeof(BIO_TYPE_SSL))) {
        private enum enumMixinStr_BIO_TYPE_SSL = `enum BIO_TYPE_SSL = ( 7 | BIO_TYPE_FILTER );`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_TYPE_SSL); }))) {
            mixin(enumMixinStr_BIO_TYPE_SSL);
        }
    }




    static if(!is(typeof(BIO_TYPE_NULL))) {
        private enum enumMixinStr_BIO_TYPE_NULL = `enum BIO_TYPE_NULL = ( 6 | BIO_TYPE_SOURCE_SINK );`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_TYPE_NULL); }))) {
            mixin(enumMixinStr_BIO_TYPE_NULL);
        }
    }




    static if(!is(typeof(BIO_TYPE_SOCKET))) {
        private enum enumMixinStr_BIO_TYPE_SOCKET = `enum BIO_TYPE_SOCKET = ( 5 | BIO_TYPE_SOURCE_SINK | BIO_TYPE_DESCRIPTOR );`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_TYPE_SOCKET); }))) {
            mixin(enumMixinStr_BIO_TYPE_SOCKET);
        }
    }




    static if(!is(typeof(BIO_TYPE_FD))) {
        private enum enumMixinStr_BIO_TYPE_FD = `enum BIO_TYPE_FD = ( 4 | BIO_TYPE_SOURCE_SINK | BIO_TYPE_DESCRIPTOR );`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_TYPE_FD); }))) {
            mixin(enumMixinStr_BIO_TYPE_FD);
        }
    }




    static if(!is(typeof(BIO_TYPE_FILE))) {
        private enum enumMixinStr_BIO_TYPE_FILE = `enum BIO_TYPE_FILE = ( 2 | BIO_TYPE_SOURCE_SINK );`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_TYPE_FILE); }))) {
            mixin(enumMixinStr_BIO_TYPE_FILE);
        }
    }




    static if(!is(typeof(BIO_TYPE_MEM))) {
        private enum enumMixinStr_BIO_TYPE_MEM = `enum BIO_TYPE_MEM = ( 1 | BIO_TYPE_SOURCE_SINK );`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_TYPE_MEM); }))) {
            mixin(enumMixinStr_BIO_TYPE_MEM);
        }
    }




    static if(!is(typeof(BIO_TYPE_NONE))) {
        private enum enumMixinStr_BIO_TYPE_NONE = `enum BIO_TYPE_NONE = 0;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_TYPE_NONE); }))) {
            mixin(enumMixinStr_BIO_TYPE_NONE);
        }
    }




    static if(!is(typeof(BIO_TYPE_SOURCE_SINK))) {
        private enum enumMixinStr_BIO_TYPE_SOURCE_SINK = `enum BIO_TYPE_SOURCE_SINK = 0x0400;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_TYPE_SOURCE_SINK); }))) {
            mixin(enumMixinStr_BIO_TYPE_SOURCE_SINK);
        }
    }




    static if(!is(typeof(BIO_TYPE_FILTER))) {
        private enum enumMixinStr_BIO_TYPE_FILTER = `enum BIO_TYPE_FILTER = 0x0200;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_TYPE_FILTER); }))) {
            mixin(enumMixinStr_BIO_TYPE_FILTER);
        }
    }




    static if(!is(typeof(BIO_TYPE_DESCRIPTOR))) {
        private enum enumMixinStr_BIO_TYPE_DESCRIPTOR = `enum BIO_TYPE_DESCRIPTOR = 0x0100;`;
        static if(is(typeof({ mixin(enumMixinStr_BIO_TYPE_DESCRIPTOR); }))) {
            mixin(enumMixinStr_BIO_TYPE_DESCRIPTOR);
        }
    }






    static if(!is(typeof(ASN1_R_WRONG_TAG))) {
        private enum enumMixinStr_ASN1_R_WRONG_TAG = `enum ASN1_R_WRONG_TAG = 168;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_R_WRONG_TAG); }))) {
            mixin(enumMixinStr_ASN1_R_WRONG_TAG);
        }
    }




    static if(!is(typeof(ASN1_R_WRONG_PUBLIC_KEY_TYPE))) {
        private enum enumMixinStr_ASN1_R_WRONG_PUBLIC_KEY_TYPE = `enum ASN1_R_WRONG_PUBLIC_KEY_TYPE = 200;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_R_WRONG_PUBLIC_KEY_TYPE); }))) {
            mixin(enumMixinStr_ASN1_R_WRONG_PUBLIC_KEY_TYPE);
        }
    }




    static if(!is(typeof(ASN1_R_WRONG_INTEGER_TYPE))) {
        private enum enumMixinStr_ASN1_R_WRONG_INTEGER_TYPE = `enum ASN1_R_WRONG_INTEGER_TYPE = 225;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_R_WRONG_INTEGER_TYPE); }))) {
            mixin(enumMixinStr_ASN1_R_WRONG_INTEGER_TYPE);
        }
    }




    static if(!is(typeof(ASN1_R_UNSUPPORTED_TYPE))) {
        private enum enumMixinStr_ASN1_R_UNSUPPORTED_TYPE = `enum ASN1_R_UNSUPPORTED_TYPE = 196;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_R_UNSUPPORTED_TYPE); }))) {
            mixin(enumMixinStr_ASN1_R_UNSUPPORTED_TYPE);
        }
    }




    static if(!is(typeof(ASN1_R_UNSUPPORTED_PUBLIC_KEY_TYPE))) {
        private enum enumMixinStr_ASN1_R_UNSUPPORTED_PUBLIC_KEY_TYPE = `enum ASN1_R_UNSUPPORTED_PUBLIC_KEY_TYPE = 167;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_R_UNSUPPORTED_PUBLIC_KEY_TYPE); }))) {
            mixin(enumMixinStr_ASN1_R_UNSUPPORTED_PUBLIC_KEY_TYPE);
        }
    }




    static if(!is(typeof(ASN1_R_UNSUPPORTED_CIPHER))) {
        private enum enumMixinStr_ASN1_R_UNSUPPORTED_CIPHER = `enum ASN1_R_UNSUPPORTED_CIPHER = 228;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_R_UNSUPPORTED_CIPHER); }))) {
            mixin(enumMixinStr_ASN1_R_UNSUPPORTED_CIPHER);
        }
    }






    static if(!is(typeof(ASN1_R_UNSUPPORTED_ANY_DEFINED_BY_TYPE))) {
        private enum enumMixinStr_ASN1_R_UNSUPPORTED_ANY_DEFINED_BY_TYPE = `enum ASN1_R_UNSUPPORTED_ANY_DEFINED_BY_TYPE = 164;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_R_UNSUPPORTED_ANY_DEFINED_BY_TYPE); }))) {
            mixin(enumMixinStr_ASN1_R_UNSUPPORTED_ANY_DEFINED_BY_TYPE);
        }
    }




    static if(!is(typeof(ASN1_R_UNKNOWN_TAG))) {
        private enum enumMixinStr_ASN1_R_UNKNOWN_TAG = `enum ASN1_R_UNKNOWN_TAG = 194;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_R_UNKNOWN_TAG); }))) {
            mixin(enumMixinStr_ASN1_R_UNKNOWN_TAG);
        }
    }




    static if(!is(typeof(ASN1_R_UNKNOWN_SIGNATURE_ALGORITHM))) {
        private enum enumMixinStr_ASN1_R_UNKNOWN_SIGNATURE_ALGORITHM = `enum ASN1_R_UNKNOWN_SIGNATURE_ALGORITHM = 199;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_R_UNKNOWN_SIGNATURE_ALGORITHM); }))) {
            mixin(enumMixinStr_ASN1_R_UNKNOWN_SIGNATURE_ALGORITHM);
        }
    }




    static if(!is(typeof(ASN1_R_UNKNOWN_PUBLIC_KEY_TYPE))) {
        private enum enumMixinStr_ASN1_R_UNKNOWN_PUBLIC_KEY_TYPE = `enum ASN1_R_UNKNOWN_PUBLIC_KEY_TYPE = 163;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_R_UNKNOWN_PUBLIC_KEY_TYPE); }))) {
            mixin(enumMixinStr_ASN1_R_UNKNOWN_PUBLIC_KEY_TYPE);
        }
    }




    static if(!is(typeof(ASN1_R_UNKNOWN_OBJECT_TYPE))) {
        private enum enumMixinStr_ASN1_R_UNKNOWN_OBJECT_TYPE = `enum ASN1_R_UNKNOWN_OBJECT_TYPE = 162;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_R_UNKNOWN_OBJECT_TYPE); }))) {
            mixin(enumMixinStr_ASN1_R_UNKNOWN_OBJECT_TYPE);
        }
    }




    static if(!is(typeof(ASN1_R_UNKNOWN_MESSAGE_DIGEST_ALGORITHM))) {
        private enum enumMixinStr_ASN1_R_UNKNOWN_MESSAGE_DIGEST_ALGORITHM = `enum ASN1_R_UNKNOWN_MESSAGE_DIGEST_ALGORITHM = 161;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_R_UNKNOWN_MESSAGE_DIGEST_ALGORITHM); }))) {
            mixin(enumMixinStr_ASN1_R_UNKNOWN_MESSAGE_DIGEST_ALGORITHM);
        }
    }




    static if(!is(typeof(ASN1_R_UNKNOWN_FORMAT))) {
        private enum enumMixinStr_ASN1_R_UNKNOWN_FORMAT = `enum ASN1_R_UNKNOWN_FORMAT = 160;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_R_UNKNOWN_FORMAT); }))) {
            mixin(enumMixinStr_ASN1_R_UNKNOWN_FORMAT);
        }
    }




    static if(!is(typeof(ASN1_R_UNIVERSALSTRING_IS_WRONG_LENGTH))) {
        private enum enumMixinStr_ASN1_R_UNIVERSALSTRING_IS_WRONG_LENGTH = `enum ASN1_R_UNIVERSALSTRING_IS_WRONG_LENGTH = 215;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_R_UNIVERSALSTRING_IS_WRONG_LENGTH); }))) {
            mixin(enumMixinStr_ASN1_R_UNIVERSALSTRING_IS_WRONG_LENGTH);
        }
    }




    static if(!is(typeof(ASN1_R_UNEXPECTED_EOC))) {
        private enum enumMixinStr_ASN1_R_UNEXPECTED_EOC = `enum ASN1_R_UNEXPECTED_EOC = 159;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_R_UNEXPECTED_EOC); }))) {
            mixin(enumMixinStr_ASN1_R_UNEXPECTED_EOC);
        }
    }




    static if(!is(typeof(ASN1_R_TYPE_NOT_PRIMITIVE))) {
        private enum enumMixinStr_ASN1_R_TYPE_NOT_PRIMITIVE = `enum ASN1_R_TYPE_NOT_PRIMITIVE = 195;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_R_TYPE_NOT_PRIMITIVE); }))) {
            mixin(enumMixinStr_ASN1_R_TYPE_NOT_PRIMITIVE);
        }
    }




    static if(!is(typeof(ASN1_R_TYPE_NOT_CONSTRUCTED))) {
        private enum enumMixinStr_ASN1_R_TYPE_NOT_CONSTRUCTED = `enum ASN1_R_TYPE_NOT_CONSTRUCTED = 156;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_R_TYPE_NOT_CONSTRUCTED); }))) {
            mixin(enumMixinStr_ASN1_R_TYPE_NOT_CONSTRUCTED);
        }
    }




    static if(!is(typeof(ASN1_R_TOO_SMALL))) {
        private enum enumMixinStr_ASN1_R_TOO_SMALL = `enum ASN1_R_TOO_SMALL = 224;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_R_TOO_SMALL); }))) {
            mixin(enumMixinStr_ASN1_R_TOO_SMALL);
        }
    }




    static if(!is(typeof(ASN1_R_TOO_LONG))) {
        private enum enumMixinStr_ASN1_R_TOO_LONG = `enum ASN1_R_TOO_LONG = 155;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_R_TOO_LONG); }))) {
            mixin(enumMixinStr_ASN1_R_TOO_LONG);
        }
    }




    static if(!is(typeof(ASN1_R_TOO_LARGE))) {
        private enum enumMixinStr_ASN1_R_TOO_LARGE = `enum ASN1_R_TOO_LARGE = 223;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_R_TOO_LARGE); }))) {
            mixin(enumMixinStr_ASN1_R_TOO_LARGE);
        }
    }




    static if(!is(typeof(ASN1_R_TIME_NOT_ASCII_FORMAT))) {
        private enum enumMixinStr_ASN1_R_TIME_NOT_ASCII_FORMAT = `enum ASN1_R_TIME_NOT_ASCII_FORMAT = 193;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_R_TIME_NOT_ASCII_FORMAT); }))) {
            mixin(enumMixinStr_ASN1_R_TIME_NOT_ASCII_FORMAT);
        }
    }




    static if(!is(typeof(ASN1_R_THE_ASN1_OBJECT_IDENTIFIER_IS_NOT_KNOWN_FOR_THIS_MD))) {
        private enum enumMixinStr_ASN1_R_THE_ASN1_OBJECT_IDENTIFIER_IS_NOT_KNOWN_FOR_THIS_MD = `enum ASN1_R_THE_ASN1_OBJECT_IDENTIFIER_IS_NOT_KNOWN_FOR_THIS_MD = 154;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_R_THE_ASN1_OBJECT_IDENTIFIER_IS_NOT_KNOWN_FOR_THIS_MD); }))) {
            mixin(enumMixinStr_ASN1_R_THE_ASN1_OBJECT_IDENTIFIER_IS_NOT_KNOWN_FOR_THIS_MD);
        }
    }




    static if(!is(typeof(ASN1_R_STRING_TOO_SHORT))) {
        private enum enumMixinStr_ASN1_R_STRING_TOO_SHORT = `enum ASN1_R_STRING_TOO_SHORT = 152;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_R_STRING_TOO_SHORT); }))) {
            mixin(enumMixinStr_ASN1_R_STRING_TOO_SHORT);
        }
    }




    static if(!is(typeof(ASN1_R_STRING_TOO_LONG))) {
        private enum enumMixinStr_ASN1_R_STRING_TOO_LONG = `enum ASN1_R_STRING_TOO_LONG = 151;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_R_STRING_TOO_LONG); }))) {
            mixin(enumMixinStr_ASN1_R_STRING_TOO_LONG);
        }
    }




    static if(!is(typeof(ASN1_R_STREAMING_NOT_SUPPORTED))) {
        private enum enumMixinStr_ASN1_R_STREAMING_NOT_SUPPORTED = `enum ASN1_R_STREAMING_NOT_SUPPORTED = 202;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_R_STREAMING_NOT_SUPPORTED); }))) {
            mixin(enumMixinStr_ASN1_R_STREAMING_NOT_SUPPORTED);
        }
    }




    static if(!is(typeof(ASN1_R_SIG_INVALID_MIME_TYPE))) {
        private enum enumMixinStr_ASN1_R_SIG_INVALID_MIME_TYPE = `enum ASN1_R_SIG_INVALID_MIME_TYPE = 213;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_R_SIG_INVALID_MIME_TYPE); }))) {
            mixin(enumMixinStr_ASN1_R_SIG_INVALID_MIME_TYPE);
        }
    }




    static if(!is(typeof(ASN1_R_SHORT_LINE))) {
        private enum enumMixinStr_ASN1_R_SHORT_LINE = `enum ASN1_R_SHORT_LINE = 150;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_R_SHORT_LINE); }))) {
            mixin(enumMixinStr_ASN1_R_SHORT_LINE);
        }
    }




    static if(!is(typeof(ASN1_R_SEQUENCE_OR_SET_NEEDS_CONFIG))) {
        private enum enumMixinStr_ASN1_R_SEQUENCE_OR_SET_NEEDS_CONFIG = `enum ASN1_R_SEQUENCE_OR_SET_NEEDS_CONFIG = 192;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_R_SEQUENCE_OR_SET_NEEDS_CONFIG); }))) {
            mixin(enumMixinStr_ASN1_R_SEQUENCE_OR_SET_NEEDS_CONFIG);
        }
    }




    static if(!is(typeof(ASN1_R_SEQUENCE_NOT_CONSTRUCTED))) {
        private enum enumMixinStr_ASN1_R_SEQUENCE_NOT_CONSTRUCTED = `enum ASN1_R_SEQUENCE_NOT_CONSTRUCTED = 149;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_R_SEQUENCE_NOT_CONSTRUCTED); }))) {
            mixin(enumMixinStr_ASN1_R_SEQUENCE_NOT_CONSTRUCTED);
        }
    }




    static if(!is(typeof(ASN1_R_SEQUENCE_LENGTH_MISMATCH))) {
        private enum enumMixinStr_ASN1_R_SEQUENCE_LENGTH_MISMATCH = `enum ASN1_R_SEQUENCE_LENGTH_MISMATCH = 148;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_R_SEQUENCE_LENGTH_MISMATCH); }))) {
            mixin(enumMixinStr_ASN1_R_SEQUENCE_LENGTH_MISMATCH);
        }
    }




    static if(!is(typeof(ASN1_R_SECOND_NUMBER_TOO_LARGE))) {
        private enum enumMixinStr_ASN1_R_SECOND_NUMBER_TOO_LARGE = `enum ASN1_R_SECOND_NUMBER_TOO_LARGE = 147;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_R_SECOND_NUMBER_TOO_LARGE); }))) {
            mixin(enumMixinStr_ASN1_R_SECOND_NUMBER_TOO_LARGE);
        }
    }




    static if(!is(typeof(ASN1_R_ODD_NUMBER_OF_CHARS))) {
        private enum enumMixinStr_ASN1_R_ODD_NUMBER_OF_CHARS = `enum ASN1_R_ODD_NUMBER_OF_CHARS = 145;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_R_ODD_NUMBER_OF_CHARS); }))) {
            mixin(enumMixinStr_ASN1_R_ODD_NUMBER_OF_CHARS);
        }
    }




    static if(!is(typeof(ASN1_R_OBJECT_NOT_ASCII_FORMAT))) {
        private enum enumMixinStr_ASN1_R_OBJECT_NOT_ASCII_FORMAT = `enum ASN1_R_OBJECT_NOT_ASCII_FORMAT = 191;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_R_OBJECT_NOT_ASCII_FORMAT); }))) {
            mixin(enumMixinStr_ASN1_R_OBJECT_NOT_ASCII_FORMAT);
        }
    }




    static if(!is(typeof(ASN1_R_NULL_IS_WRONG_LENGTH))) {
        private enum enumMixinStr_ASN1_R_NULL_IS_WRONG_LENGTH = `enum ASN1_R_NULL_IS_WRONG_LENGTH = 144;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_R_NULL_IS_WRONG_LENGTH); }))) {
            mixin(enumMixinStr_ASN1_R_NULL_IS_WRONG_LENGTH);
        }
    }




    static if(!is(typeof(ASN1_R_NO_SIG_CONTENT_TYPE))) {
        private enum enumMixinStr_ASN1_R_NO_SIG_CONTENT_TYPE = `enum ASN1_R_NO_SIG_CONTENT_TYPE = 212;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_R_NO_SIG_CONTENT_TYPE); }))) {
            mixin(enumMixinStr_ASN1_R_NO_SIG_CONTENT_TYPE);
        }
    }




    static if(!is(typeof(ASN1_R_NO_MULTIPART_BOUNDARY))) {
        private enum enumMixinStr_ASN1_R_NO_MULTIPART_BOUNDARY = `enum ASN1_R_NO_MULTIPART_BOUNDARY = 211;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_R_NO_MULTIPART_BOUNDARY); }))) {
            mixin(enumMixinStr_ASN1_R_NO_MULTIPART_BOUNDARY);
        }
    }




    static if(!is(typeof(ASN1_R_NO_MULTIPART_BODY_FAILURE))) {
        private enum enumMixinStr_ASN1_R_NO_MULTIPART_BODY_FAILURE = `enum ASN1_R_NO_MULTIPART_BODY_FAILURE = 210;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_R_NO_MULTIPART_BODY_FAILURE); }))) {
            mixin(enumMixinStr_ASN1_R_NO_MULTIPART_BODY_FAILURE);
        }
    }




    static if(!is(typeof(ASN1_R_NO_MATCHING_CHOICE_TYPE))) {
        private enum enumMixinStr_ASN1_R_NO_MATCHING_CHOICE_TYPE = `enum ASN1_R_NO_MATCHING_CHOICE_TYPE = 143;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_R_NO_MATCHING_CHOICE_TYPE); }))) {
            mixin(enumMixinStr_ASN1_R_NO_MATCHING_CHOICE_TYPE);
        }
    }




    static if(!is(typeof(ASN1_R_NO_CONTENT_TYPE))) {
        private enum enumMixinStr_ASN1_R_NO_CONTENT_TYPE = `enum ASN1_R_NO_CONTENT_TYPE = 209;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_R_NO_CONTENT_TYPE); }))) {
            mixin(enumMixinStr_ASN1_R_NO_CONTENT_TYPE);
        }
    }




    static if(!is(typeof(ASN1_R_NOT_ENOUGH_DATA))) {
        private enum enumMixinStr_ASN1_R_NOT_ENOUGH_DATA = `enum ASN1_R_NOT_ENOUGH_DATA = 142;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_R_NOT_ENOUGH_DATA); }))) {
            mixin(enumMixinStr_ASN1_R_NOT_ENOUGH_DATA);
        }
    }




    static if(!is(typeof(ASN1_R_NOT_ASCII_FORMAT))) {
        private enum enumMixinStr_ASN1_R_NOT_ASCII_FORMAT = `enum ASN1_R_NOT_ASCII_FORMAT = 190;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_R_NOT_ASCII_FORMAT); }))) {
            mixin(enumMixinStr_ASN1_R_NOT_ASCII_FORMAT);
        }
    }




    static if(!is(typeof(ASN1_R_NON_HEX_CHARACTERS))) {
        private enum enumMixinStr_ASN1_R_NON_HEX_CHARACTERS = `enum ASN1_R_NON_HEX_CHARACTERS = 141;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_R_NON_HEX_CHARACTERS); }))) {
            mixin(enumMixinStr_ASN1_R_NON_HEX_CHARACTERS);
        }
    }




    static if(!is(typeof(ASN1_R_NESTED_TOO_DEEP))) {
        private enum enumMixinStr_ASN1_R_NESTED_TOO_DEEP = `enum ASN1_R_NESTED_TOO_DEEP = 201;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_R_NESTED_TOO_DEEP); }))) {
            mixin(enumMixinStr_ASN1_R_NESTED_TOO_DEEP);
        }
    }




    static if(!is(typeof(ASN1_R_NESTED_ASN1_STRING))) {
        private enum enumMixinStr_ASN1_R_NESTED_ASN1_STRING = `enum ASN1_R_NESTED_ASN1_STRING = 197;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_R_NESTED_ASN1_STRING); }))) {
            mixin(enumMixinStr_ASN1_R_NESTED_ASN1_STRING);
        }
    }




    static if(!is(typeof(ASN1_R_MSTRING_WRONG_TAG))) {
        private enum enumMixinStr_ASN1_R_MSTRING_WRONG_TAG = `enum ASN1_R_MSTRING_WRONG_TAG = 140;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_R_MSTRING_WRONG_TAG); }))) {
            mixin(enumMixinStr_ASN1_R_MSTRING_WRONG_TAG);
        }
    }




    static if(!is(typeof(ASN1_R_MSTRING_NOT_UNIVERSAL))) {
        private enum enumMixinStr_ASN1_R_MSTRING_NOT_UNIVERSAL = `enum ASN1_R_MSTRING_NOT_UNIVERSAL = 139;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_R_MSTRING_NOT_UNIVERSAL); }))) {
            mixin(enumMixinStr_ASN1_R_MSTRING_NOT_UNIVERSAL);
        }
    }






    static if(!is(typeof(ASN1_R_MISSING_VALUE))) {
        private enum enumMixinStr_ASN1_R_MISSING_VALUE = `enum ASN1_R_MISSING_VALUE = 189;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_R_MISSING_VALUE); }))) {
            mixin(enumMixinStr_ASN1_R_MISSING_VALUE);
        }
    }




    static if(!is(typeof(ASN1_R_MISSING_SECOND_NUMBER))) {
        private enum enumMixinStr_ASN1_R_MISSING_SECOND_NUMBER = `enum ASN1_R_MISSING_SECOND_NUMBER = 138;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_R_MISSING_SECOND_NUMBER); }))) {
            mixin(enumMixinStr_ASN1_R_MISSING_SECOND_NUMBER);
        }
    }




    static if(!is(typeof(ASN1_R_MISSING_EOC))) {
        private enum enumMixinStr_ASN1_R_MISSING_EOC = `enum ASN1_R_MISSING_EOC = 137;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_R_MISSING_EOC); }))) {
            mixin(enumMixinStr_ASN1_R_MISSING_EOC);
        }
    }




    static if(!is(typeof(ASN1_R_MIME_SIG_PARSE_ERROR))) {
        private enum enumMixinStr_ASN1_R_MIME_SIG_PARSE_ERROR = `enum ASN1_R_MIME_SIG_PARSE_ERROR = 208;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_R_MIME_SIG_PARSE_ERROR); }))) {
            mixin(enumMixinStr_ASN1_R_MIME_SIG_PARSE_ERROR);
        }
    }




    static if(!is(typeof(ASN1_R_MIME_PARSE_ERROR))) {
        private enum enumMixinStr_ASN1_R_MIME_PARSE_ERROR = `enum ASN1_R_MIME_PARSE_ERROR = 207;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_R_MIME_PARSE_ERROR); }))) {
            mixin(enumMixinStr_ASN1_R_MIME_PARSE_ERROR);
        }
    }




    static if(!is(typeof(ASN1_R_MIME_NO_CONTENT_TYPE))) {
        private enum enumMixinStr_ASN1_R_MIME_NO_CONTENT_TYPE = `enum ASN1_R_MIME_NO_CONTENT_TYPE = 206;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_R_MIME_NO_CONTENT_TYPE); }))) {
            mixin(enumMixinStr_ASN1_R_MIME_NO_CONTENT_TYPE);
        }
    }




    static if(!is(typeof(ASN1_R_LIST_ERROR))) {
        private enum enumMixinStr_ASN1_R_LIST_ERROR = `enum ASN1_R_LIST_ERROR = 188;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_R_LIST_ERROR); }))) {
            mixin(enumMixinStr_ASN1_R_LIST_ERROR);
        }
    }




    static if(!is(typeof(ASN1_R_INVALID_VALUE))) {
        private enum enumMixinStr_ASN1_R_INVALID_VALUE = `enum ASN1_R_INVALID_VALUE = 219;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_R_INVALID_VALUE); }))) {
            mixin(enumMixinStr_ASN1_R_INVALID_VALUE);
        }
    }




    static if(!is(typeof(ASN1_R_INVALID_UTF8STRING))) {
        private enum enumMixinStr_ASN1_R_INVALID_UTF8STRING = `enum ASN1_R_INVALID_UTF8STRING = 134;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_R_INVALID_UTF8STRING); }))) {
            mixin(enumMixinStr_ASN1_R_INVALID_UTF8STRING);
        }
    }




    static if(!is(typeof(ASN1_R_INVALID_UNIVERSALSTRING_LENGTH))) {
        private enum enumMixinStr_ASN1_R_INVALID_UNIVERSALSTRING_LENGTH = `enum ASN1_R_INVALID_UNIVERSALSTRING_LENGTH = 133;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_R_INVALID_UNIVERSALSTRING_LENGTH); }))) {
            mixin(enumMixinStr_ASN1_R_INVALID_UNIVERSALSTRING_LENGTH);
        }
    }




    static if(!is(typeof(ASN1_R_INVALID_STRING_TABLE_VALUE))) {
        private enum enumMixinStr_ASN1_R_INVALID_STRING_TABLE_VALUE = `enum ASN1_R_INVALID_STRING_TABLE_VALUE = 218;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_R_INVALID_STRING_TABLE_VALUE); }))) {
            mixin(enumMixinStr_ASN1_R_INVALID_STRING_TABLE_VALUE);
        }
    }




    static if(!is(typeof(ASN1_R_INVALID_SEPARATOR))) {
        private enum enumMixinStr_ASN1_R_INVALID_SEPARATOR = `enum ASN1_R_INVALID_SEPARATOR = 131;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_R_INVALID_SEPARATOR); }))) {
            mixin(enumMixinStr_ASN1_R_INVALID_SEPARATOR);
        }
    }




    static if(!is(typeof(ASN1_R_INVALID_SCRYPT_PARAMETERS))) {
        private enum enumMixinStr_ASN1_R_INVALID_SCRYPT_PARAMETERS = `enum ASN1_R_INVALID_SCRYPT_PARAMETERS = 227;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_R_INVALID_SCRYPT_PARAMETERS); }))) {
            mixin(enumMixinStr_ASN1_R_INVALID_SCRYPT_PARAMETERS);
        }
    }




    static if(!is(typeof(ASN1_R_INVALID_OBJECT_ENCODING))) {
        private enum enumMixinStr_ASN1_R_INVALID_OBJECT_ENCODING = `enum ASN1_R_INVALID_OBJECT_ENCODING = 216;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_R_INVALID_OBJECT_ENCODING); }))) {
            mixin(enumMixinStr_ASN1_R_INVALID_OBJECT_ENCODING);
        }
    }




    static if(!is(typeof(ASN1_R_INVALID_NUMBER))) {
        private enum enumMixinStr_ASN1_R_INVALID_NUMBER = `enum ASN1_R_INVALID_NUMBER = 187;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_R_INVALID_NUMBER); }))) {
            mixin(enumMixinStr_ASN1_R_INVALID_NUMBER);
        }
    }




    static if(!is(typeof(ASN1_R_INVALID_MODIFIER))) {
        private enum enumMixinStr_ASN1_R_INVALID_MODIFIER = `enum ASN1_R_INVALID_MODIFIER = 186;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_R_INVALID_MODIFIER); }))) {
            mixin(enumMixinStr_ASN1_R_INVALID_MODIFIER);
        }
    }




    static if(!is(typeof(ASN1_R_INVALID_MIME_TYPE))) {
        private enum enumMixinStr_ASN1_R_INVALID_MIME_TYPE = `enum ASN1_R_INVALID_MIME_TYPE = 205;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_R_INVALID_MIME_TYPE); }))) {
            mixin(enumMixinStr_ASN1_R_INVALID_MIME_TYPE);
        }
    }




    static if(!is(typeof(ASN1_R_INVALID_DIGIT))) {
        private enum enumMixinStr_ASN1_R_INVALID_DIGIT = `enum ASN1_R_INVALID_DIGIT = 130;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_R_INVALID_DIGIT); }))) {
            mixin(enumMixinStr_ASN1_R_INVALID_DIGIT);
        }
    }




    static if(!is(typeof(ASN1_R_INVALID_BMPSTRING_LENGTH))) {
        private enum enumMixinStr_ASN1_R_INVALID_BMPSTRING_LENGTH = `enum ASN1_R_INVALID_BMPSTRING_LENGTH = 129;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_R_INVALID_BMPSTRING_LENGTH); }))) {
            mixin(enumMixinStr_ASN1_R_INVALID_BMPSTRING_LENGTH);
        }
    }




    static if(!is(typeof(ASN1_R_INVALID_BIT_STRING_BITS_LEFT))) {
        private enum enumMixinStr_ASN1_R_INVALID_BIT_STRING_BITS_LEFT = `enum ASN1_R_INVALID_BIT_STRING_BITS_LEFT = 220;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_R_INVALID_BIT_STRING_BITS_LEFT); }))) {
            mixin(enumMixinStr_ASN1_R_INVALID_BIT_STRING_BITS_LEFT);
        }
    }




    static if(!is(typeof(ASN1_R_INTEGER_TOO_LARGE_FOR_LONG))) {
        private enum enumMixinStr_ASN1_R_INTEGER_TOO_LARGE_FOR_LONG = `enum ASN1_R_INTEGER_TOO_LARGE_FOR_LONG = 128;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_R_INTEGER_TOO_LARGE_FOR_LONG); }))) {
            mixin(enumMixinStr_ASN1_R_INTEGER_TOO_LARGE_FOR_LONG);
        }
    }




    static if(!is(typeof(ASN1_R_INTEGER_NOT_ASCII_FORMAT))) {
        private enum enumMixinStr_ASN1_R_INTEGER_NOT_ASCII_FORMAT = `enum ASN1_R_INTEGER_NOT_ASCII_FORMAT = 185;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_R_INTEGER_NOT_ASCII_FORMAT); }))) {
            mixin(enumMixinStr_ASN1_R_INTEGER_NOT_ASCII_FORMAT);
        }
    }




    static if(!is(typeof(ASN1_R_ILLEGAL_ZERO_CONTENT))) {
        private enum enumMixinStr_ASN1_R_ILLEGAL_ZERO_CONTENT = `enum ASN1_R_ILLEGAL_ZERO_CONTENT = 222;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_R_ILLEGAL_ZERO_CONTENT); }))) {
            mixin(enumMixinStr_ASN1_R_ILLEGAL_ZERO_CONTENT);
        }
    }




    static if(!is(typeof(ASN1_R_ILLEGAL_TIME_VALUE))) {
        private enum enumMixinStr_ASN1_R_ILLEGAL_TIME_VALUE = `enum ASN1_R_ILLEGAL_TIME_VALUE = 184;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_R_ILLEGAL_TIME_VALUE); }))) {
            mixin(enumMixinStr_ASN1_R_ILLEGAL_TIME_VALUE);
        }
    }




    static if(!is(typeof(ASN1_R_ILLEGAL_TAGGED_ANY))) {
        private enum enumMixinStr_ASN1_R_ILLEGAL_TAGGED_ANY = `enum ASN1_R_ILLEGAL_TAGGED_ANY = 127;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_R_ILLEGAL_TAGGED_ANY); }))) {
            mixin(enumMixinStr_ASN1_R_ILLEGAL_TAGGED_ANY);
        }
    }




    static if(!is(typeof(ASN1_R_ILLEGAL_PADDING))) {
        private enum enumMixinStr_ASN1_R_ILLEGAL_PADDING = `enum ASN1_R_ILLEGAL_PADDING = 221;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_R_ILLEGAL_PADDING); }))) {
            mixin(enumMixinStr_ASN1_R_ILLEGAL_PADDING);
        }
    }




    static if(!is(typeof(ASN1_R_ILLEGAL_OPTIONS_ON_ITEM_TEMPLATE))) {
        private enum enumMixinStr_ASN1_R_ILLEGAL_OPTIONS_ON_ITEM_TEMPLATE = `enum ASN1_R_ILLEGAL_OPTIONS_ON_ITEM_TEMPLATE = 170;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_R_ILLEGAL_OPTIONS_ON_ITEM_TEMPLATE); }))) {
            mixin(enumMixinStr_ASN1_R_ILLEGAL_OPTIONS_ON_ITEM_TEMPLATE);
        }
    }




    static if(!is(typeof(ASN1_R_ILLEGAL_OPTIONAL_ANY))) {
        private enum enumMixinStr_ASN1_R_ILLEGAL_OPTIONAL_ANY = `enum ASN1_R_ILLEGAL_OPTIONAL_ANY = 126;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_R_ILLEGAL_OPTIONAL_ANY); }))) {
            mixin(enumMixinStr_ASN1_R_ILLEGAL_OPTIONAL_ANY);
        }
    }




    static if(!is(typeof(ASN1_R_ILLEGAL_OBJECT))) {
        private enum enumMixinStr_ASN1_R_ILLEGAL_OBJECT = `enum ASN1_R_ILLEGAL_OBJECT = 183;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_R_ILLEGAL_OBJECT); }))) {
            mixin(enumMixinStr_ASN1_R_ILLEGAL_OBJECT);
        }
    }




    static if(!is(typeof(ASN1_R_ILLEGAL_NULL_VALUE))) {
        private enum enumMixinStr_ASN1_R_ILLEGAL_NULL_VALUE = `enum ASN1_R_ILLEGAL_NULL_VALUE = 182;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_R_ILLEGAL_NULL_VALUE); }))) {
            mixin(enumMixinStr_ASN1_R_ILLEGAL_NULL_VALUE);
        }
    }




    static if(!is(typeof(ASN1_R_ILLEGAL_NULL))) {
        private enum enumMixinStr_ASN1_R_ILLEGAL_NULL = `enum ASN1_R_ILLEGAL_NULL = 125;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_R_ILLEGAL_NULL); }))) {
            mixin(enumMixinStr_ASN1_R_ILLEGAL_NULL);
        }
    }




    static if(!is(typeof(ASN1_R_ILLEGAL_NESTED_TAGGING))) {
        private enum enumMixinStr_ASN1_R_ILLEGAL_NESTED_TAGGING = `enum ASN1_R_ILLEGAL_NESTED_TAGGING = 181;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_R_ILLEGAL_NESTED_TAGGING); }))) {
            mixin(enumMixinStr_ASN1_R_ILLEGAL_NESTED_TAGGING);
        }
    }




    static if(!is(typeof(ASN1_R_ILLEGAL_NEGATIVE_VALUE))) {
        private enum enumMixinStr_ASN1_R_ILLEGAL_NEGATIVE_VALUE = `enum ASN1_R_ILLEGAL_NEGATIVE_VALUE = 226;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_R_ILLEGAL_NEGATIVE_VALUE); }))) {
            mixin(enumMixinStr_ASN1_R_ILLEGAL_NEGATIVE_VALUE);
        }
    }




    static if(!is(typeof(ASN1_R_ILLEGAL_INTEGER))) {
        private enum enumMixinStr_ASN1_R_ILLEGAL_INTEGER = `enum ASN1_R_ILLEGAL_INTEGER = 180;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_R_ILLEGAL_INTEGER); }))) {
            mixin(enumMixinStr_ASN1_R_ILLEGAL_INTEGER);
        }
    }




    static if(!is(typeof(ASN1_R_ILLEGAL_IMPLICIT_TAG))) {
        private enum enumMixinStr_ASN1_R_ILLEGAL_IMPLICIT_TAG = `enum ASN1_R_ILLEGAL_IMPLICIT_TAG = 179;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_R_ILLEGAL_IMPLICIT_TAG); }))) {
            mixin(enumMixinStr_ASN1_R_ILLEGAL_IMPLICIT_TAG);
        }
    }




    static if(!is(typeof(ASN1_R_ILLEGAL_HEX))) {
        private enum enumMixinStr_ASN1_R_ILLEGAL_HEX = `enum ASN1_R_ILLEGAL_HEX = 178;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_R_ILLEGAL_HEX); }))) {
            mixin(enumMixinStr_ASN1_R_ILLEGAL_HEX);
        }
    }




    static if(!is(typeof(ASN1_R_ILLEGAL_FORMAT))) {
        private enum enumMixinStr_ASN1_R_ILLEGAL_FORMAT = `enum ASN1_R_ILLEGAL_FORMAT = 177;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_R_ILLEGAL_FORMAT); }))) {
            mixin(enumMixinStr_ASN1_R_ILLEGAL_FORMAT);
        }
    }




    static if(!is(typeof(ASN1_R_ILLEGAL_CHARACTERS))) {
        private enum enumMixinStr_ASN1_R_ILLEGAL_CHARACTERS = `enum ASN1_R_ILLEGAL_CHARACTERS = 124;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_R_ILLEGAL_CHARACTERS); }))) {
            mixin(enumMixinStr_ASN1_R_ILLEGAL_CHARACTERS);
        }
    }




    static if(!is(typeof(ASN1_R_ILLEGAL_BOOLEAN))) {
        private enum enumMixinStr_ASN1_R_ILLEGAL_BOOLEAN = `enum ASN1_R_ILLEGAL_BOOLEAN = 176;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_R_ILLEGAL_BOOLEAN); }))) {
            mixin(enumMixinStr_ASN1_R_ILLEGAL_BOOLEAN);
        }
    }




    static if(!is(typeof(ASN1_R_ILLEGAL_BITSTRING_FORMAT))) {
        private enum enumMixinStr_ASN1_R_ILLEGAL_BITSTRING_FORMAT = `enum ASN1_R_ILLEGAL_BITSTRING_FORMAT = 175;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_R_ILLEGAL_BITSTRING_FORMAT); }))) {
            mixin(enumMixinStr_ASN1_R_ILLEGAL_BITSTRING_FORMAT);
        }
    }






    static if(!is(typeof(ASN1_R_HEADER_TOO_LONG))) {
        private enum enumMixinStr_ASN1_R_HEADER_TOO_LONG = `enum ASN1_R_HEADER_TOO_LONG = 123;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_R_HEADER_TOO_LONG); }))) {
            mixin(enumMixinStr_ASN1_R_HEADER_TOO_LONG);
        }
    }




    static if(!is(typeof(ASN1_R_FIRST_NUM_TOO_LARGE))) {
        private enum enumMixinStr_ASN1_R_FIRST_NUM_TOO_LARGE = `enum ASN1_R_FIRST_NUM_TOO_LARGE = 122;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_R_FIRST_NUM_TOO_LARGE); }))) {
            mixin(enumMixinStr_ASN1_R_FIRST_NUM_TOO_LARGE);
        }
    }




    static if(!is(typeof(ASN1_R_FIELD_MISSING))) {
        private enum enumMixinStr_ASN1_R_FIELD_MISSING = `enum ASN1_R_FIELD_MISSING = 121;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_R_FIELD_MISSING); }))) {
            mixin(enumMixinStr_ASN1_R_FIELD_MISSING);
        }
    }




    static if(!is(typeof(ASN1_R_EXPLICIT_TAG_NOT_CONSTRUCTED))) {
        private enum enumMixinStr_ASN1_R_EXPLICIT_TAG_NOT_CONSTRUCTED = `enum ASN1_R_EXPLICIT_TAG_NOT_CONSTRUCTED = 120;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_R_EXPLICIT_TAG_NOT_CONSTRUCTED); }))) {
            mixin(enumMixinStr_ASN1_R_EXPLICIT_TAG_NOT_CONSTRUCTED);
        }
    }




    static if(!is(typeof(ASN1_R_EXPLICIT_LENGTH_MISMATCH))) {
        private enum enumMixinStr_ASN1_R_EXPLICIT_LENGTH_MISMATCH = `enum ASN1_R_EXPLICIT_LENGTH_MISMATCH = 119;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_R_EXPLICIT_LENGTH_MISMATCH); }))) {
            mixin(enumMixinStr_ASN1_R_EXPLICIT_LENGTH_MISMATCH);
        }
    }




    static if(!is(typeof(ASN1_R_EXPECTING_AN_OBJECT))) {
        private enum enumMixinStr_ASN1_R_EXPECTING_AN_OBJECT = `enum ASN1_R_EXPECTING_AN_OBJECT = 116;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_R_EXPECTING_AN_OBJECT); }))) {
            mixin(enumMixinStr_ASN1_R_EXPECTING_AN_OBJECT);
        }
    }




    static if(!is(typeof(ASN1_R_EXPECTING_AN_INTEGER))) {
        private enum enumMixinStr_ASN1_R_EXPECTING_AN_INTEGER = `enum ASN1_R_EXPECTING_AN_INTEGER = 115;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_R_EXPECTING_AN_INTEGER); }))) {
            mixin(enumMixinStr_ASN1_R_EXPECTING_AN_INTEGER);
        }
    }




    static if(!is(typeof(ASN1_R_ERROR_SETTING_CIPHER_PARAMS))) {
        private enum enumMixinStr_ASN1_R_ERROR_SETTING_CIPHER_PARAMS = `enum ASN1_R_ERROR_SETTING_CIPHER_PARAMS = 114;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_R_ERROR_SETTING_CIPHER_PARAMS); }))) {
            mixin(enumMixinStr_ASN1_R_ERROR_SETTING_CIPHER_PARAMS);
        }
    }




    static if(!is(typeof(ASN1_R_ERROR_LOADING_SECTION))) {
        private enum enumMixinStr_ASN1_R_ERROR_LOADING_SECTION = `enum ASN1_R_ERROR_LOADING_SECTION = 172;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_R_ERROR_LOADING_SECTION); }))) {
            mixin(enumMixinStr_ASN1_R_ERROR_LOADING_SECTION);
        }
    }




    static if(!is(typeof(ASN1_R_ERROR_GETTING_TIME))) {
        private enum enumMixinStr_ASN1_R_ERROR_GETTING_TIME = `enum ASN1_R_ERROR_GETTING_TIME = 173;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_R_ERROR_GETTING_TIME); }))) {
            mixin(enumMixinStr_ASN1_R_ERROR_GETTING_TIME);
        }
    }




    static if(!is(typeof(ASN1_R_ENCODE_ERROR))) {
        private enum enumMixinStr_ASN1_R_ENCODE_ERROR = `enum ASN1_R_ENCODE_ERROR = 112;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_R_ENCODE_ERROR); }))) {
            mixin(enumMixinStr_ASN1_R_ENCODE_ERROR);
        }
    }




    static if(!is(typeof(ASN1_R_DIGEST_AND_KEY_TYPE_NOT_SUPPORTED))) {
        private enum enumMixinStr_ASN1_R_DIGEST_AND_KEY_TYPE_NOT_SUPPORTED = `enum ASN1_R_DIGEST_AND_KEY_TYPE_NOT_SUPPORTED = 198;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_R_DIGEST_AND_KEY_TYPE_NOT_SUPPORTED); }))) {
            mixin(enumMixinStr_ASN1_R_DIGEST_AND_KEY_TYPE_NOT_SUPPORTED);
        }
    }




    static if(!is(typeof(ASN1_R_DEPTH_EXCEEDED))) {
        private enum enumMixinStr_ASN1_R_DEPTH_EXCEEDED = `enum ASN1_R_DEPTH_EXCEEDED = 174;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_R_DEPTH_EXCEEDED); }))) {
            mixin(enumMixinStr_ASN1_R_DEPTH_EXCEEDED);
        }
    }




    static if(!is(typeof(ASN1_R_DECODE_ERROR))) {
        private enum enumMixinStr_ASN1_R_DECODE_ERROR = `enum ASN1_R_DECODE_ERROR = 110;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_R_DECODE_ERROR); }))) {
            mixin(enumMixinStr_ASN1_R_DECODE_ERROR);
        }
    }




    static if(!is(typeof(ASN1_R_DATA_IS_WRONG))) {
        private enum enumMixinStr_ASN1_R_DATA_IS_WRONG = `enum ASN1_R_DATA_IS_WRONG = 109;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_R_DATA_IS_WRONG); }))) {
            mixin(enumMixinStr_ASN1_R_DATA_IS_WRONG);
        }
    }




    static if(!is(typeof(ASN1_R_CONTEXT_NOT_INITIALISED))) {
        private enum enumMixinStr_ASN1_R_CONTEXT_NOT_INITIALISED = `enum ASN1_R_CONTEXT_NOT_INITIALISED = 217;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_R_CONTEXT_NOT_INITIALISED); }))) {
            mixin(enumMixinStr_ASN1_R_CONTEXT_NOT_INITIALISED);
        }
    }




    static if(!is(typeof(ASN1_R_CIPHER_HAS_NO_OBJECT_IDENTIFIER))) {
        private enum enumMixinStr_ASN1_R_CIPHER_HAS_NO_OBJECT_IDENTIFIER = `enum ASN1_R_CIPHER_HAS_NO_OBJECT_IDENTIFIER = 108;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_R_CIPHER_HAS_NO_OBJECT_IDENTIFIER); }))) {
            mixin(enumMixinStr_ASN1_R_CIPHER_HAS_NO_OBJECT_IDENTIFIER);
        }
    }




    static if(!is(typeof(ASN1_R_BUFFER_TOO_SMALL))) {
        private enum enumMixinStr_ASN1_R_BUFFER_TOO_SMALL = `enum ASN1_R_BUFFER_TOO_SMALL = 107;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_R_BUFFER_TOO_SMALL); }))) {
            mixin(enumMixinStr_ASN1_R_BUFFER_TOO_SMALL);
        }
    }




    static if(!is(typeof(ASN1_R_BOOLEAN_IS_WRONG_LENGTH))) {
        private enum enumMixinStr_ASN1_R_BOOLEAN_IS_WRONG_LENGTH = `enum ASN1_R_BOOLEAN_IS_WRONG_LENGTH = 106;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_R_BOOLEAN_IS_WRONG_LENGTH); }))) {
            mixin(enumMixinStr_ASN1_R_BOOLEAN_IS_WRONG_LENGTH);
        }
    }




    static if(!is(typeof(ASN1_R_BN_LIB))) {
        private enum enumMixinStr_ASN1_R_BN_LIB = `enum ASN1_R_BN_LIB = 105;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_R_BN_LIB); }))) {
            mixin(enumMixinStr_ASN1_R_BN_LIB);
        }
    }




    static if(!is(typeof(ASN1_R_BMPSTRING_IS_WRONG_LENGTH))) {
        private enum enumMixinStr_ASN1_R_BMPSTRING_IS_WRONG_LENGTH = `enum ASN1_R_BMPSTRING_IS_WRONG_LENGTH = 214;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_R_BMPSTRING_IS_WRONG_LENGTH); }))) {
            mixin(enumMixinStr_ASN1_R_BMPSTRING_IS_WRONG_LENGTH);
        }
    }




    static if(!is(typeof(ASN1_R_BAD_TEMPLATE))) {
        private enum enumMixinStr_ASN1_R_BAD_TEMPLATE = `enum ASN1_R_BAD_TEMPLATE = 230;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_R_BAD_TEMPLATE); }))) {
            mixin(enumMixinStr_ASN1_R_BAD_TEMPLATE);
        }
    }




    static if(!is(typeof(ASN1_R_BAD_OBJECT_HEADER))) {
        private enum enumMixinStr_ASN1_R_BAD_OBJECT_HEADER = `enum ASN1_R_BAD_OBJECT_HEADER = 102;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_R_BAD_OBJECT_HEADER); }))) {
            mixin(enumMixinStr_ASN1_R_BAD_OBJECT_HEADER);
        }
    }




    static if(!is(typeof(ASN1_R_AUX_ERROR))) {
        private enum enumMixinStr_ASN1_R_AUX_ERROR = `enum ASN1_R_AUX_ERROR = 100;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_R_AUX_ERROR); }))) {
            mixin(enumMixinStr_ASN1_R_AUX_ERROR);
        }
    }




    static if(!is(typeof(ASN1_R_ASN1_SIG_PARSE_ERROR))) {
        private enum enumMixinStr_ASN1_R_ASN1_SIG_PARSE_ERROR = `enum ASN1_R_ASN1_SIG_PARSE_ERROR = 204;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_R_ASN1_SIG_PARSE_ERROR); }))) {
            mixin(enumMixinStr_ASN1_R_ASN1_SIG_PARSE_ERROR);
        }
    }




    static if(!is(typeof(ASN1_R_ASN1_PARSE_ERROR))) {
        private enum enumMixinStr_ASN1_R_ASN1_PARSE_ERROR = `enum ASN1_R_ASN1_PARSE_ERROR = 203;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_R_ASN1_PARSE_ERROR); }))) {
            mixin(enumMixinStr_ASN1_R_ASN1_PARSE_ERROR);
        }
    }




    static if(!is(typeof(ASN1_R_ADDING_OBJECT))) {
        private enum enumMixinStr_ASN1_R_ADDING_OBJECT = `enum ASN1_R_ADDING_OBJECT = 171;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_R_ADDING_OBJECT); }))) {
            mixin(enumMixinStr_ASN1_R_ADDING_OBJECT);
        }
    }




    static if(!is(typeof(ASN1_F_X509_PKEY_NEW))) {
        private enum enumMixinStr_ASN1_F_X509_PKEY_NEW = `enum ASN1_F_X509_PKEY_NEW = 173;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_F_X509_PKEY_NEW); }))) {
            mixin(enumMixinStr_ASN1_F_X509_PKEY_NEW);
        }
    }




    static if(!is(typeof(ASN1_F_X509_NAME_EX_NEW))) {
        private enum enumMixinStr_ASN1_F_X509_NAME_EX_NEW = `enum ASN1_F_X509_NAME_EX_NEW = 171;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_F_X509_NAME_EX_NEW); }))) {
            mixin(enumMixinStr_ASN1_F_X509_NAME_EX_NEW);
        }
    }




    static if(!is(typeof(ASN1_F_X509_NAME_EX_D2I))) {
        private enum enumMixinStr_ASN1_F_X509_NAME_EX_D2I = `enum ASN1_F_X509_NAME_EX_D2I = 158;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_F_X509_NAME_EX_D2I); }))) {
            mixin(enumMixinStr_ASN1_F_X509_NAME_EX_D2I);
        }
    }




    static if(!is(typeof(ASN1_F_X509_NAME_ENCODE))) {
        private enum enumMixinStr_ASN1_F_X509_NAME_ENCODE = `enum ASN1_F_X509_NAME_ENCODE = 203;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_F_X509_NAME_ENCODE); }))) {
            mixin(enumMixinStr_ASN1_F_X509_NAME_ENCODE);
        }
    }




    static if(!is(typeof(ASN1_F_X509_INFO_NEW))) {
        private enum enumMixinStr_ASN1_F_X509_INFO_NEW = `enum ASN1_F_X509_INFO_NEW = 170;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_F_X509_INFO_NEW); }))) {
            mixin(enumMixinStr_ASN1_F_X509_INFO_NEW);
        }
    }




    static if(!is(typeof(ASN1_F_X509_CRL_ADD0_REVOKED))) {
        private enum enumMixinStr_ASN1_F_X509_CRL_ADD0_REVOKED = `enum ASN1_F_X509_CRL_ADD0_REVOKED = 169;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_F_X509_CRL_ADD0_REVOKED); }))) {
            mixin(enumMixinStr_ASN1_F_X509_CRL_ADD0_REVOKED);
        }
    }




    static if(!is(typeof(ASN1_F_UINT64_NEW))) {
        private enum enumMixinStr_ASN1_F_UINT64_NEW = `enum ASN1_F_UINT64_NEW = 141;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_F_UINT64_NEW); }))) {
            mixin(enumMixinStr_ASN1_F_UINT64_NEW);
        }
    }




    static if(!is(typeof(ASN1_F_UINT64_C2I))) {
        private enum enumMixinStr_ASN1_F_UINT64_C2I = `enum ASN1_F_UINT64_C2I = 112;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_F_UINT64_C2I); }))) {
            mixin(enumMixinStr_ASN1_F_UINT64_C2I);
        }
    }




    static if(!is(typeof(ASN1_F_UINT32_NEW))) {
        private enum enumMixinStr_ASN1_F_UINT32_NEW = `enum ASN1_F_UINT32_NEW = 139;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_F_UINT32_NEW); }))) {
            mixin(enumMixinStr_ASN1_F_UINT32_NEW);
        }
    }




    static if(!is(typeof(ASN1_F_UINT32_C2I))) {
        private enum enumMixinStr_ASN1_F_UINT32_C2I = `enum ASN1_F_UINT32_C2I = 105;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_F_UINT32_C2I); }))) {
            mixin(enumMixinStr_ASN1_F_UINT32_C2I);
        }
    }




    static if(!is(typeof(ASN1_F_STBL_MODULE_INIT))) {
        private enum enumMixinStr_ASN1_F_STBL_MODULE_INIT = `enum ASN1_F_STBL_MODULE_INIT = 223;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_F_STBL_MODULE_INIT); }))) {
            mixin(enumMixinStr_ASN1_F_STBL_MODULE_INIT);
        }
    }




    static if(!is(typeof(ASN1_F_STABLE_GET))) {
        private enum enumMixinStr_ASN1_F_STABLE_GET = `enum ASN1_F_STABLE_GET = 138;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_F_STABLE_GET); }))) {
            mixin(enumMixinStr_ASN1_F_STABLE_GET);
        }
    }




    static if(!is(typeof(ASN1_F_SMIME_TEXT))) {
        private enum enumMixinStr_ASN1_F_SMIME_TEXT = `enum ASN1_F_SMIME_TEXT = 213;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_F_SMIME_TEXT); }))) {
            mixin(enumMixinStr_ASN1_F_SMIME_TEXT);
        }
    }






    static if(!is(typeof(ASN1_F_SMIME_READ_ASN1))) {
        private enum enumMixinStr_ASN1_F_SMIME_READ_ASN1 = `enum ASN1_F_SMIME_READ_ASN1 = 212;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_F_SMIME_READ_ASN1); }))) {
            mixin(enumMixinStr_ASN1_F_SMIME_READ_ASN1);
        }
    }




    static if(!is(typeof(ASN1_F_PKCS5_SCRYPT_SET))) {
        private enum enumMixinStr_ASN1_F_PKCS5_SCRYPT_SET = `enum ASN1_F_PKCS5_SCRYPT_SET = 232;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_F_PKCS5_SCRYPT_SET); }))) {
            mixin(enumMixinStr_ASN1_F_PKCS5_SCRYPT_SET);
        }
    }




    static if(!is(typeof(ASN1_F_PKCS5_PBKDF2_SET))) {
        private enum enumMixinStr_ASN1_F_PKCS5_PBKDF2_SET = `enum ASN1_F_PKCS5_PBKDF2_SET = 219;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_F_PKCS5_PBKDF2_SET); }))) {
            mixin(enumMixinStr_ASN1_F_PKCS5_PBKDF2_SET);
        }
    }




    static if(!is(typeof(ASN1_F_PKCS5_PBE_SET0_ALGOR))) {
        private enum enumMixinStr_ASN1_F_PKCS5_PBE_SET0_ALGOR = `enum ASN1_F_PKCS5_PBE_SET0_ALGOR = 215;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_F_PKCS5_PBE_SET0_ALGOR); }))) {
            mixin(enumMixinStr_ASN1_F_PKCS5_PBE_SET0_ALGOR);
        }
    }




    static if(!is(typeof(ASN1_F_PKCS5_PBE_SET))) {
        private enum enumMixinStr_ASN1_F_PKCS5_PBE_SET = `enum ASN1_F_PKCS5_PBE_SET = 202;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_F_PKCS5_PBE_SET); }))) {
            mixin(enumMixinStr_ASN1_F_PKCS5_PBE_SET);
        }
    }




    static if(!is(typeof(ASN1_F_PKCS5_PBE2_SET_SCRYPT))) {
        private enum enumMixinStr_ASN1_F_PKCS5_PBE2_SET_SCRYPT = `enum ASN1_F_PKCS5_PBE2_SET_SCRYPT = 231;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_F_PKCS5_PBE2_SET_SCRYPT); }))) {
            mixin(enumMixinStr_ASN1_F_PKCS5_PBE2_SET_SCRYPT);
        }
    }




    static if(!is(typeof(ASN1_F_PKCS5_PBE2_SET_IV))) {
        private enum enumMixinStr_ASN1_F_PKCS5_PBE2_SET_IV = `enum ASN1_F_PKCS5_PBE2_SET_IV = 167;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_F_PKCS5_PBE2_SET_IV); }))) {
            mixin(enumMixinStr_ASN1_F_PKCS5_PBE2_SET_IV);
        }
    }




    static if(!is(typeof(ASN1_F_PARSE_TAGGING))) {
        private enum enumMixinStr_ASN1_F_PARSE_TAGGING = `enum ASN1_F_PARSE_TAGGING = 182;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_F_PARSE_TAGGING); }))) {
            mixin(enumMixinStr_ASN1_F_PARSE_TAGGING);
        }
    }




    static if(!is(typeof(ASN1_F_OID_MODULE_INIT))) {
        private enum enumMixinStr_ASN1_F_OID_MODULE_INIT = `enum ASN1_F_OID_MODULE_INIT = 174;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_F_OID_MODULE_INIT); }))) {
            mixin(enumMixinStr_ASN1_F_OID_MODULE_INIT);
        }
    }




    static if(!is(typeof(ASN1_F_NDEF_SUFFIX))) {
        private enum enumMixinStr_ASN1_F_NDEF_SUFFIX = `enum ASN1_F_NDEF_SUFFIX = 136;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_F_NDEF_SUFFIX); }))) {
            mixin(enumMixinStr_ASN1_F_NDEF_SUFFIX);
        }
    }




    static if(!is(typeof(ASN1_F_NDEF_PREFIX))) {
        private enum enumMixinStr_ASN1_F_NDEF_PREFIX = `enum ASN1_F_NDEF_PREFIX = 127;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_F_NDEF_PREFIX); }))) {
            mixin(enumMixinStr_ASN1_F_NDEF_PREFIX);
        }
    }




    static if(!is(typeof(ASN1_F_LONG_C2I))) {
        private enum enumMixinStr_ASN1_F_LONG_C2I = `enum ASN1_F_LONG_C2I = 166;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_F_LONG_C2I); }))) {
            mixin(enumMixinStr_ASN1_F_LONG_C2I);
        }
    }




    static if(!is(typeof(ASN1_F_I2D_RSA_PUBKEY))) {
        private enum enumMixinStr_ASN1_F_I2D_RSA_PUBKEY = `enum ASN1_F_I2D_RSA_PUBKEY = 165;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_F_I2D_RSA_PUBKEY); }))) {
            mixin(enumMixinStr_ASN1_F_I2D_RSA_PUBKEY);
        }
    }




    static if(!is(typeof(ASN1_F_I2D_PUBLICKEY))) {
        private enum enumMixinStr_ASN1_F_I2D_PUBLICKEY = `enum ASN1_F_I2D_PUBLICKEY = 164;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_F_I2D_PUBLICKEY); }))) {
            mixin(enumMixinStr_ASN1_F_I2D_PUBLICKEY);
        }
    }




    static if(!is(typeof(ASN1_F_I2D_PRIVATEKEY))) {
        private enum enumMixinStr_ASN1_F_I2D_PRIVATEKEY = `enum ASN1_F_I2D_PRIVATEKEY = 163;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_F_I2D_PRIVATEKEY); }))) {
            mixin(enumMixinStr_ASN1_F_I2D_PRIVATEKEY);
        }
    }




    static if(!is(typeof(ASN1_F_I2D_EC_PUBKEY))) {
        private enum enumMixinStr_ASN1_F_I2D_EC_PUBKEY = `enum ASN1_F_I2D_EC_PUBKEY = 181;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_F_I2D_EC_PUBKEY); }))) {
            mixin(enumMixinStr_ASN1_F_I2D_EC_PUBKEY);
        }
    }




    static if(!is(typeof(ASN1_F_I2D_DSA_PUBKEY))) {
        private enum enumMixinStr_ASN1_F_I2D_DSA_PUBKEY = `enum ASN1_F_I2D_DSA_PUBKEY = 161;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_F_I2D_DSA_PUBKEY); }))) {
            mixin(enumMixinStr_ASN1_F_I2D_DSA_PUBKEY);
        }
    }




    static if(!is(typeof(ASN1_F_I2D_ASN1_OBJECT))) {
        private enum enumMixinStr_ASN1_F_I2D_ASN1_OBJECT = `enum ASN1_F_I2D_ASN1_OBJECT = 143;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_F_I2D_ASN1_OBJECT); }))) {
            mixin(enumMixinStr_ASN1_F_I2D_ASN1_OBJECT);
        }
    }




    static if(!is(typeof(ASN1_F_I2D_ASN1_BIO_STREAM))) {
        private enum enumMixinStr_ASN1_F_I2D_ASN1_BIO_STREAM = `enum ASN1_F_I2D_ASN1_BIO_STREAM = 211;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_F_I2D_ASN1_BIO_STREAM); }))) {
            mixin(enumMixinStr_ASN1_F_I2D_ASN1_BIO_STREAM);
        }
    }




    static if(!is(typeof(ASN1_F_I2A_ASN1_OBJECT))) {
        private enum enumMixinStr_ASN1_F_I2A_ASN1_OBJECT = `enum ASN1_F_I2A_ASN1_OBJECT = 126;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_F_I2A_ASN1_OBJECT); }))) {
            mixin(enumMixinStr_ASN1_F_I2A_ASN1_OBJECT);
        }
    }




    static if(!is(typeof(ASN1_F_DO_TCREATE))) {
        private enum enumMixinStr_ASN1_F_DO_TCREATE = `enum ASN1_F_DO_TCREATE = 222;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_F_DO_TCREATE); }))) {
            mixin(enumMixinStr_ASN1_F_DO_TCREATE);
        }
    }




    static if(!is(typeof(ASN1_F_DO_DUMP))) {
        private enum enumMixinStr_ASN1_F_DO_DUMP = `enum ASN1_F_DO_DUMP = 125;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_F_DO_DUMP); }))) {
            mixin(enumMixinStr_ASN1_F_DO_DUMP);
        }
    }




    static if(!is(typeof(ASN1_F_DO_CREATE))) {
        private enum enumMixinStr_ASN1_F_DO_CREATE = `enum ASN1_F_DO_CREATE = 124;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_F_DO_CREATE); }))) {
            mixin(enumMixinStr_ASN1_F_DO_CREATE);
        }
    }




    static if(!is(typeof(ASN1_F_DO_BUF))) {
        private enum enumMixinStr_ASN1_F_DO_BUF = `enum ASN1_F_DO_BUF = 142;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_F_DO_BUF); }))) {
            mixin(enumMixinStr_ASN1_F_DO_BUF);
        }
    }




    static if(!is(typeof(ASN1_F_D2I_PUBLICKEY))) {
        private enum enumMixinStr_ASN1_F_D2I_PUBLICKEY = `enum ASN1_F_D2I_PUBLICKEY = 155;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_F_D2I_PUBLICKEY); }))) {
            mixin(enumMixinStr_ASN1_F_D2I_PUBLICKEY);
        }
    }




    static if(!is(typeof(ASN1_F_D2I_PRIVATEKEY))) {
        private enum enumMixinStr_ASN1_F_D2I_PRIVATEKEY = `enum ASN1_F_D2I_PRIVATEKEY = 154;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_F_D2I_PRIVATEKEY); }))) {
            mixin(enumMixinStr_ASN1_F_D2I_PRIVATEKEY);
        }
    }




    static if(!is(typeof(ASN1_F_D2I_AUTOPRIVATEKEY))) {
        private enum enumMixinStr_ASN1_F_D2I_AUTOPRIVATEKEY = `enum ASN1_F_D2I_AUTOPRIVATEKEY = 207;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_F_D2I_AUTOPRIVATEKEY); }))) {
            mixin(enumMixinStr_ASN1_F_D2I_AUTOPRIVATEKEY);
        }
    }




    static if(!is(typeof(ASN1_F_D2I_ASN1_UINTEGER))) {
        private enum enumMixinStr_ASN1_F_D2I_ASN1_UINTEGER = `enum ASN1_F_D2I_ASN1_UINTEGER = 150;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_F_D2I_ASN1_UINTEGER); }))) {
            mixin(enumMixinStr_ASN1_F_D2I_ASN1_UINTEGER);
        }
    }




    static if(!is(typeof(ASN1_F_D2I_ASN1_OBJECT))) {
        private enum enumMixinStr_ASN1_F_D2I_ASN1_OBJECT = `enum ASN1_F_D2I_ASN1_OBJECT = 147;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_F_D2I_ASN1_OBJECT); }))) {
            mixin(enumMixinStr_ASN1_F_D2I_ASN1_OBJECT);
        }
    }




    static if(!is(typeof(ASN1_F_COLLECT_DATA))) {
        private enum enumMixinStr_ASN1_F_COLLECT_DATA = `enum ASN1_F_COLLECT_DATA = 140;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_F_COLLECT_DATA); }))) {
            mixin(enumMixinStr_ASN1_F_COLLECT_DATA);
        }
    }




    static if(!is(typeof(ASN1_F_C2I_UINT64_INT))) {
        private enum enumMixinStr_ASN1_F_C2I_UINT64_INT = `enum ASN1_F_C2I_UINT64_INT = 101;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_F_C2I_UINT64_INT); }))) {
            mixin(enumMixinStr_ASN1_F_C2I_UINT64_INT);
        }
    }




    static if(!is(typeof(ASN1_F_C2I_IBUF))) {
        private enum enumMixinStr_ASN1_F_C2I_IBUF = `enum ASN1_F_C2I_IBUF = 226;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_F_C2I_IBUF); }))) {
            mixin(enumMixinStr_ASN1_F_C2I_IBUF);
        }
    }




    static if(!is(typeof(ASN1_F_C2I_ASN1_OBJECT))) {
        private enum enumMixinStr_ASN1_F_C2I_ASN1_OBJECT = `enum ASN1_F_C2I_ASN1_OBJECT = 196;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_F_C2I_ASN1_OBJECT); }))) {
            mixin(enumMixinStr_ASN1_F_C2I_ASN1_OBJECT);
        }
    }




    static if(!is(typeof(ASN1_F_C2I_ASN1_INTEGER))) {
        private enum enumMixinStr_ASN1_F_C2I_ASN1_INTEGER = `enum ASN1_F_C2I_ASN1_INTEGER = 194;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_F_C2I_ASN1_INTEGER); }))) {
            mixin(enumMixinStr_ASN1_F_C2I_ASN1_INTEGER);
        }
    }




    static if(!is(typeof(ASN1_F_C2I_ASN1_BIT_STRING))) {
        private enum enumMixinStr_ASN1_F_C2I_ASN1_BIT_STRING = `enum ASN1_F_C2I_ASN1_BIT_STRING = 189;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_F_C2I_ASN1_BIT_STRING); }))) {
            mixin(enumMixinStr_ASN1_F_C2I_ASN1_BIT_STRING);
        }
    }




    static if(!is(typeof(ASN1_F_BN_TO_ASN1_STRING))) {
        private enum enumMixinStr_ASN1_F_BN_TO_ASN1_STRING = `enum ASN1_F_BN_TO_ASN1_STRING = 229;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_F_BN_TO_ASN1_STRING); }))) {
            mixin(enumMixinStr_ASN1_F_BN_TO_ASN1_STRING);
        }
    }




    static if(!is(typeof(ASN1_F_BITSTR_CB))) {
        private enum enumMixinStr_ASN1_F_BITSTR_CB = `enum ASN1_F_BITSTR_CB = 180;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_F_BITSTR_CB); }))) {
            mixin(enumMixinStr_ASN1_F_BITSTR_CB);
        }
    }




    static if(!is(typeof(ASN1_F_BIO_NEW_NDEF))) {
        private enum enumMixinStr_ASN1_F_BIO_NEW_NDEF = `enum ASN1_F_BIO_NEW_NDEF = 208;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_F_BIO_NEW_NDEF); }))) {
            mixin(enumMixinStr_ASN1_F_BIO_NEW_NDEF);
        }
    }




    static if(!is(typeof(ASN1_F_B64_WRITE_ASN1))) {
        private enum enumMixinStr_ASN1_F_B64_WRITE_ASN1 = `enum ASN1_F_B64_WRITE_ASN1 = 210;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_F_B64_WRITE_ASN1); }))) {
            mixin(enumMixinStr_ASN1_F_B64_WRITE_ASN1);
        }
    }




    static if(!is(typeof(ASN1_F_B64_READ_ASN1))) {
        private enum enumMixinStr_ASN1_F_B64_READ_ASN1 = `enum ASN1_F_B64_READ_ASN1 = 209;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_F_B64_READ_ASN1); }))) {
            mixin(enumMixinStr_ASN1_F_B64_READ_ASN1);
        }
    }






    static if(!is(typeof(ASN1_F_ASN1_VERIFY))) {
        private enum enumMixinStr_ASN1_F_ASN1_VERIFY = `enum ASN1_F_ASN1_VERIFY = 137;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_F_ASN1_VERIFY); }))) {
            mixin(enumMixinStr_ASN1_F_ASN1_VERIFY);
        }
    }




    static if(!is(typeof(ASN1_F_ASN1_UTCTIME_ADJ))) {
        private enum enumMixinStr_ASN1_F_ASN1_UTCTIME_ADJ = `enum ASN1_F_ASN1_UTCTIME_ADJ = 218;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_F_ASN1_UTCTIME_ADJ); }))) {
            mixin(enumMixinStr_ASN1_F_ASN1_UTCTIME_ADJ);
        }
    }




    static if(!is(typeof(ASN1_F_ASN1_TYPE_GET_OCTETSTRING))) {
        private enum enumMixinStr_ASN1_F_ASN1_TYPE_GET_OCTETSTRING = `enum ASN1_F_ASN1_TYPE_GET_OCTETSTRING = 135;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_F_ASN1_TYPE_GET_OCTETSTRING); }))) {
            mixin(enumMixinStr_ASN1_F_ASN1_TYPE_GET_OCTETSTRING);
        }
    }




    static if(!is(typeof(ASN1_F_ASN1_TYPE_GET_INT_OCTETSTRING))) {
        private enum enumMixinStr_ASN1_F_ASN1_TYPE_GET_INT_OCTETSTRING = `enum ASN1_F_ASN1_TYPE_GET_INT_OCTETSTRING = 134;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_F_ASN1_TYPE_GET_INT_OCTETSTRING); }))) {
            mixin(enumMixinStr_ASN1_F_ASN1_TYPE_GET_INT_OCTETSTRING);
        }
    }




    static if(!is(typeof(ASN1_F_ASN1_TIME_ADJ))) {
        private enum enumMixinStr_ASN1_F_ASN1_TIME_ADJ = `enum ASN1_F_ASN1_TIME_ADJ = 217;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_F_ASN1_TIME_ADJ); }))) {
            mixin(enumMixinStr_ASN1_F_ASN1_TIME_ADJ);
        }
    }




    static if(!is(typeof(ASN1_F_ASN1_TEMPLATE_NOEXP_D2I))) {
        private enum enumMixinStr_ASN1_F_ASN1_TEMPLATE_NOEXP_D2I = `enum ASN1_F_ASN1_TEMPLATE_NOEXP_D2I = 131;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_F_ASN1_TEMPLATE_NOEXP_D2I); }))) {
            mixin(enumMixinStr_ASN1_F_ASN1_TEMPLATE_NOEXP_D2I);
        }
    }




    static if(!is(typeof(ASN1_F_ASN1_TEMPLATE_NEW))) {
        private enum enumMixinStr_ASN1_F_ASN1_TEMPLATE_NEW = `enum ASN1_F_ASN1_TEMPLATE_NEW = 133;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_F_ASN1_TEMPLATE_NEW); }))) {
            mixin(enumMixinStr_ASN1_F_ASN1_TEMPLATE_NEW);
        }
    }




    static if(!is(typeof(ASN1_F_ASN1_TEMPLATE_EX_D2I))) {
        private enum enumMixinStr_ASN1_F_ASN1_TEMPLATE_EX_D2I = `enum ASN1_F_ASN1_TEMPLATE_EX_D2I = 132;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_F_ASN1_TEMPLATE_EX_D2I); }))) {
            mixin(enumMixinStr_ASN1_F_ASN1_TEMPLATE_EX_D2I);
        }
    }




    static if(!is(typeof(ASN1_F_ASN1_STRING_TYPE_NEW))) {
        private enum enumMixinStr_ASN1_F_ASN1_STRING_TYPE_NEW = `enum ASN1_F_ASN1_STRING_TYPE_NEW = 130;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_F_ASN1_STRING_TYPE_NEW); }))) {
            mixin(enumMixinStr_ASN1_F_ASN1_STRING_TYPE_NEW);
        }
    }




    static if(!is(typeof(ASN1_F_ASN1_STRING_TO_BN))) {
        private enum enumMixinStr_ASN1_F_ASN1_STRING_TO_BN = `enum ASN1_F_ASN1_STRING_TO_BN = 228;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_F_ASN1_STRING_TO_BN); }))) {
            mixin(enumMixinStr_ASN1_F_ASN1_STRING_TO_BN);
        }
    }




    static if(!is(typeof(ASN1_F_ASN1_STRING_TABLE_ADD))) {
        private enum enumMixinStr_ASN1_F_ASN1_STRING_TABLE_ADD = `enum ASN1_F_ASN1_STRING_TABLE_ADD = 129;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_F_ASN1_STRING_TABLE_ADD); }))) {
            mixin(enumMixinStr_ASN1_F_ASN1_STRING_TABLE_ADD);
        }
    }




    static if(!is(typeof(ASN1_F_ASN1_STRING_SET))) {
        private enum enumMixinStr_ASN1_F_ASN1_STRING_SET = `enum ASN1_F_ASN1_STRING_SET = 186;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_F_ASN1_STRING_SET); }))) {
            mixin(enumMixinStr_ASN1_F_ASN1_STRING_SET);
        }
    }




    static if(!is(typeof(ASN1_F_ASN1_STRING_GET_UINT64))) {
        private enum enumMixinStr_ASN1_F_ASN1_STRING_GET_UINT64 = `enum ASN1_F_ASN1_STRING_GET_UINT64 = 230;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_F_ASN1_STRING_GET_UINT64); }))) {
            mixin(enumMixinStr_ASN1_F_ASN1_STRING_GET_UINT64);
        }
    }




    static if(!is(typeof(ASN1_F_ASN1_STRING_GET_INT64))) {
        private enum enumMixinStr_ASN1_F_ASN1_STRING_GET_INT64 = `enum ASN1_F_ASN1_STRING_GET_INT64 = 227;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_F_ASN1_STRING_GET_INT64); }))) {
            mixin(enumMixinStr_ASN1_F_ASN1_STRING_GET_INT64);
        }
    }




    static if(!is(typeof(ASN1_F_ASN1_STR2TYPE))) {
        private enum enumMixinStr_ASN1_F_ASN1_STR2TYPE = `enum ASN1_F_ASN1_STR2TYPE = 179;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_F_ASN1_STR2TYPE); }))) {
            mixin(enumMixinStr_ASN1_F_ASN1_STR2TYPE);
        }
    }




    static if(!is(typeof(ASN1_F_ASN1_SIGN))) {
        private enum enumMixinStr_ASN1_F_ASN1_SIGN = `enum ASN1_F_ASN1_SIGN = 128;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_F_ASN1_SIGN); }))) {
            mixin(enumMixinStr_ASN1_F_ASN1_SIGN);
        }
    }




    static if(!is(typeof(ASN1_F_ASN1_SCTX_NEW))) {
        private enum enumMixinStr_ASN1_F_ASN1_SCTX_NEW = `enum ASN1_F_ASN1_SCTX_NEW = 221;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_F_ASN1_SCTX_NEW); }))) {
            mixin(enumMixinStr_ASN1_F_ASN1_SCTX_NEW);
        }
    }




    static if(!is(typeof(ASN1_F_ASN1_PRIMITIVE_NEW))) {
        private enum enumMixinStr_ASN1_F_ASN1_PRIMITIVE_NEW = `enum ASN1_F_ASN1_PRIMITIVE_NEW = 119;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_F_ASN1_PRIMITIVE_NEW); }))) {
            mixin(enumMixinStr_ASN1_F_ASN1_PRIMITIVE_NEW);
        }
    }




    static if(!is(typeof(ASN1_F_ASN1_PCTX_NEW))) {
        private enum enumMixinStr_ASN1_F_ASN1_PCTX_NEW = `enum ASN1_F_ASN1_PCTX_NEW = 205;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_F_ASN1_PCTX_NEW); }))) {
            mixin(enumMixinStr_ASN1_F_ASN1_PCTX_NEW);
        }
    }




    static if(!is(typeof(ASN1_F_ASN1_OUTPUT_DATA))) {
        private enum enumMixinStr_ASN1_F_ASN1_OUTPUT_DATA = `enum ASN1_F_ASN1_OUTPUT_DATA = 214;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_F_ASN1_OUTPUT_DATA); }))) {
            mixin(enumMixinStr_ASN1_F_ASN1_OUTPUT_DATA);
        }
    }




    static if(!is(typeof(ASN1_F_ASN1_OBJECT_NEW))) {
        private enum enumMixinStr_ASN1_F_ASN1_OBJECT_NEW = `enum ASN1_F_ASN1_OBJECT_NEW = 123;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_F_ASN1_OBJECT_NEW); }))) {
            mixin(enumMixinStr_ASN1_F_ASN1_OBJECT_NEW);
        }
    }




    static if(!is(typeof(ASN1_F_ASN1_MBSTRING_NCOPY))) {
        private enum enumMixinStr_ASN1_F_ASN1_MBSTRING_NCOPY = `enum ASN1_F_ASN1_MBSTRING_NCOPY = 122;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_F_ASN1_MBSTRING_NCOPY); }))) {
            mixin(enumMixinStr_ASN1_F_ASN1_MBSTRING_NCOPY);
        }
    }




    static if(!is(typeof(ASN1_F_ASN1_ITEM_VERIFY))) {
        private enum enumMixinStr_ASN1_F_ASN1_ITEM_VERIFY = `enum ASN1_F_ASN1_ITEM_VERIFY = 197;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_F_ASN1_ITEM_VERIFY); }))) {
            mixin(enumMixinStr_ASN1_F_ASN1_ITEM_VERIFY);
        }
    }




    static if(!is(typeof(ASN1_F_ASN1_ITEM_UNPACK))) {
        private enum enumMixinStr_ASN1_F_ASN1_ITEM_UNPACK = `enum ASN1_F_ASN1_ITEM_UNPACK = 199;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_F_ASN1_ITEM_UNPACK); }))) {
            mixin(enumMixinStr_ASN1_F_ASN1_ITEM_UNPACK);
        }
    }




    static if(!is(typeof(ASN1_F_ASN1_ITEM_SIGN_CTX))) {
        private enum enumMixinStr_ASN1_F_ASN1_ITEM_SIGN_CTX = `enum ASN1_F_ASN1_ITEM_SIGN_CTX = 220;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_F_ASN1_ITEM_SIGN_CTX); }))) {
            mixin(enumMixinStr_ASN1_F_ASN1_ITEM_SIGN_CTX);
        }
    }




    static if(!is(typeof(ASN1_F_ASN1_ITEM_SIGN))) {
        private enum enumMixinStr_ASN1_F_ASN1_ITEM_SIGN = `enum ASN1_F_ASN1_ITEM_SIGN = 195;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_F_ASN1_ITEM_SIGN); }))) {
            mixin(enumMixinStr_ASN1_F_ASN1_ITEM_SIGN);
        }
    }




    static if(!is(typeof(ASN1_F_ASN1_ITEM_PACK))) {
        private enum enumMixinStr_ASN1_F_ASN1_ITEM_PACK = `enum ASN1_F_ASN1_ITEM_PACK = 198;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_F_ASN1_ITEM_PACK); }))) {
            mixin(enumMixinStr_ASN1_F_ASN1_ITEM_PACK);
        }
    }




    static if(!is(typeof(ASN1_F_ASN1_ITEM_I2D_FP))) {
        private enum enumMixinStr_ASN1_F_ASN1_ITEM_I2D_FP = `enum ASN1_F_ASN1_ITEM_I2D_FP = 193;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_F_ASN1_ITEM_I2D_FP); }))) {
            mixin(enumMixinStr_ASN1_F_ASN1_ITEM_I2D_FP);
        }
    }




    static if(!is(typeof(ASN1_F_ASN1_ITEM_I2D_BIO))) {
        private enum enumMixinStr_ASN1_F_ASN1_ITEM_I2D_BIO = `enum ASN1_F_ASN1_ITEM_I2D_BIO = 192;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_F_ASN1_ITEM_I2D_BIO); }))) {
            mixin(enumMixinStr_ASN1_F_ASN1_ITEM_I2D_BIO);
        }
    }




    static if(!is(typeof(ASN1_F_ASN1_ITEM_FLAGS_I2D))) {
        private enum enumMixinStr_ASN1_F_ASN1_ITEM_FLAGS_I2D = `enum ASN1_F_ASN1_ITEM_FLAGS_I2D = 118;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_F_ASN1_ITEM_FLAGS_I2D); }))) {
            mixin(enumMixinStr_ASN1_F_ASN1_ITEM_FLAGS_I2D);
        }
    }




    static if(!is(typeof(ASN1_F_ASN1_ITEM_EX_I2D))) {
        private enum enumMixinStr_ASN1_F_ASN1_ITEM_EX_I2D = `enum ASN1_F_ASN1_ITEM_EX_I2D = 144;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_F_ASN1_ITEM_EX_I2D); }))) {
            mixin(enumMixinStr_ASN1_F_ASN1_ITEM_EX_I2D);
        }
    }




    static if(!is(typeof(ASN1_F_ASN1_ITEM_EMBED_NEW))) {
        private enum enumMixinStr_ASN1_F_ASN1_ITEM_EMBED_NEW = `enum ASN1_F_ASN1_ITEM_EMBED_NEW = 121;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_F_ASN1_ITEM_EMBED_NEW); }))) {
            mixin(enumMixinStr_ASN1_F_ASN1_ITEM_EMBED_NEW);
        }
    }




    static if(!is(typeof(ASN1_F_ASN1_ITEM_EMBED_D2I))) {
        private enum enumMixinStr_ASN1_F_ASN1_ITEM_EMBED_D2I = `enum ASN1_F_ASN1_ITEM_EMBED_D2I = 120;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_F_ASN1_ITEM_EMBED_D2I); }))) {
            mixin(enumMixinStr_ASN1_F_ASN1_ITEM_EMBED_D2I);
        }
    }




    static if(!is(typeof(ASN1_F_ASN1_ITEM_DUP))) {
        private enum enumMixinStr_ASN1_F_ASN1_ITEM_DUP = `enum ASN1_F_ASN1_ITEM_DUP = 191;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_F_ASN1_ITEM_DUP); }))) {
            mixin(enumMixinStr_ASN1_F_ASN1_ITEM_DUP);
        }
    }




    static if(!is(typeof(ASN1_F_ASN1_ITEM_D2I_FP))) {
        private enum enumMixinStr_ASN1_F_ASN1_ITEM_D2I_FP = `enum ASN1_F_ASN1_ITEM_D2I_FP = 206;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_F_ASN1_ITEM_D2I_FP); }))) {
            mixin(enumMixinStr_ASN1_F_ASN1_ITEM_D2I_FP);
        }
    }




    static if(!is(typeof(ASN1_F_ASN1_I2D_FP))) {
        private enum enumMixinStr_ASN1_F_ASN1_I2D_FP = `enum ASN1_F_ASN1_I2D_FP = 117;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_F_ASN1_I2D_FP); }))) {
            mixin(enumMixinStr_ASN1_F_ASN1_I2D_FP);
        }
    }




    static if(!is(typeof(ASN1_F_ASN1_I2D_BIO))) {
        private enum enumMixinStr_ASN1_F_ASN1_I2D_BIO = `enum ASN1_F_ASN1_I2D_BIO = 116;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_F_ASN1_I2D_BIO); }))) {
            mixin(enumMixinStr_ASN1_F_ASN1_I2D_BIO);
        }
    }




    static if(!is(typeof(ASN1_F_ASN1_GET_UINT64))) {
        private enum enumMixinStr_ASN1_F_ASN1_GET_UINT64 = `enum ASN1_F_ASN1_GET_UINT64 = 225;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_F_ASN1_GET_UINT64); }))) {
            mixin(enumMixinStr_ASN1_F_ASN1_GET_UINT64);
        }
    }




    static if(!is(typeof(ASN1_F_ASN1_GET_OBJECT))) {
        private enum enumMixinStr_ASN1_F_ASN1_GET_OBJECT = `enum ASN1_F_ASN1_GET_OBJECT = 114;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_F_ASN1_GET_OBJECT); }))) {
            mixin(enumMixinStr_ASN1_F_ASN1_GET_OBJECT);
        }
    }




    static if(!is(typeof(ASN1_F_ASN1_GET_INT64))) {
        private enum enumMixinStr_ASN1_F_ASN1_GET_INT64 = `enum ASN1_F_ASN1_GET_INT64 = 224;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_F_ASN1_GET_INT64); }))) {
            mixin(enumMixinStr_ASN1_F_ASN1_GET_INT64);
        }
    }






    static if(!is(typeof(ASN1_F_ASN1_GENERATE_V3))) {
        private enum enumMixinStr_ASN1_F_ASN1_GENERATE_V3 = `enum ASN1_F_ASN1_GENERATE_V3 = 178;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_F_ASN1_GENERATE_V3); }))) {
            mixin(enumMixinStr_ASN1_F_ASN1_GENERATE_V3);
        }
    }




    static if(!is(typeof(ASN1_F_ASN1_GENERALIZEDTIME_ADJ))) {
        private enum enumMixinStr_ASN1_F_ASN1_GENERALIZEDTIME_ADJ = `enum ASN1_F_ASN1_GENERALIZEDTIME_ADJ = 216;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_F_ASN1_GENERALIZEDTIME_ADJ); }))) {
            mixin(enumMixinStr_ASN1_F_ASN1_GENERALIZEDTIME_ADJ);
        }
    }




    static if(!is(typeof(ASN1_F_ASN1_FIND_END))) {
        private enum enumMixinStr_ASN1_F_ASN1_FIND_END = `enum ASN1_F_ASN1_FIND_END = 190;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_F_ASN1_FIND_END); }))) {
            mixin(enumMixinStr_ASN1_F_ASN1_FIND_END);
        }
    }




    static if(!is(typeof(ASN1_F_ASN1_EX_C2I))) {
        private enum enumMixinStr_ASN1_F_ASN1_EX_C2I = `enum ASN1_F_ASN1_EX_C2I = 204;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_F_ASN1_EX_C2I); }))) {
            mixin(enumMixinStr_ASN1_F_ASN1_EX_C2I);
        }
    }




    static if(!is(typeof(ASN1_F_ASN1_ENC_SAVE))) {
        private enum enumMixinStr_ASN1_F_ASN1_ENC_SAVE = `enum ASN1_F_ASN1_ENC_SAVE = 115;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_F_ASN1_ENC_SAVE); }))) {
            mixin(enumMixinStr_ASN1_F_ASN1_ENC_SAVE);
        }
    }




    static if(!is(typeof(ASN1_F_ASN1_DUP))) {
        private enum enumMixinStr_ASN1_F_ASN1_DUP = `enum ASN1_F_ASN1_DUP = 111;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_F_ASN1_DUP); }))) {
            mixin(enumMixinStr_ASN1_F_ASN1_DUP);
        }
    }




    static if(!is(typeof(ASN1_F_ASN1_DO_LOCK))) {
        private enum enumMixinStr_ASN1_F_ASN1_DO_LOCK = `enum ASN1_F_ASN1_DO_LOCK = 233;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_F_ASN1_DO_LOCK); }))) {
            mixin(enumMixinStr_ASN1_F_ASN1_DO_LOCK);
        }
    }




    static if(!is(typeof(ASN1_F_ASN1_DO_ADB))) {
        private enum enumMixinStr_ASN1_F_ASN1_DO_ADB = `enum ASN1_F_ASN1_DO_ADB = 110;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_F_ASN1_DO_ADB); }))) {
            mixin(enumMixinStr_ASN1_F_ASN1_DO_ADB);
        }
    }




    static if(!is(typeof(ASN1_F_ASN1_DIGEST))) {
        private enum enumMixinStr_ASN1_F_ASN1_DIGEST = `enum ASN1_F_ASN1_DIGEST = 184;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_F_ASN1_DIGEST); }))) {
            mixin(enumMixinStr_ASN1_F_ASN1_DIGEST);
        }
    }




    static if(!is(typeof(ASN1_F_ASN1_D2I_READ_BIO))) {
        private enum enumMixinStr_ASN1_F_ASN1_D2I_READ_BIO = `enum ASN1_F_ASN1_D2I_READ_BIO = 107;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_F_ASN1_D2I_READ_BIO); }))) {
            mixin(enumMixinStr_ASN1_F_ASN1_D2I_READ_BIO);
        }
    }




    static if(!is(typeof(ASN1_F_ASN1_D2I_FP))) {
        private enum enumMixinStr_ASN1_F_ASN1_D2I_FP = `enum ASN1_F_ASN1_D2I_FP = 109;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_F_ASN1_D2I_FP); }))) {
            mixin(enumMixinStr_ASN1_F_ASN1_D2I_FP);
        }
    }




    static if(!is(typeof(ASN1_F_ASN1_D2I_EX_PRIMITIVE))) {
        private enum enumMixinStr_ASN1_F_ASN1_D2I_EX_PRIMITIVE = `enum ASN1_F_ASN1_D2I_EX_PRIMITIVE = 108;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_F_ASN1_D2I_EX_PRIMITIVE); }))) {
            mixin(enumMixinStr_ASN1_F_ASN1_D2I_EX_PRIMITIVE);
        }
    }




    static if(!is(typeof(ASN1_F_ASN1_COLLECT))) {
        private enum enumMixinStr_ASN1_F_ASN1_COLLECT = `enum ASN1_F_ASN1_COLLECT = 106;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_F_ASN1_COLLECT); }))) {
            mixin(enumMixinStr_ASN1_F_ASN1_COLLECT);
        }
    }




    static if(!is(typeof(ASN1_F_ASN1_CHECK_TLEN))) {
        private enum enumMixinStr_ASN1_F_ASN1_CHECK_TLEN = `enum ASN1_F_ASN1_CHECK_TLEN = 104;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_F_ASN1_CHECK_TLEN); }))) {
            mixin(enumMixinStr_ASN1_F_ASN1_CHECK_TLEN);
        }
    }




    static if(!is(typeof(ASN1_F_ASN1_CB))) {
        private enum enumMixinStr_ASN1_F_ASN1_CB = `enum ASN1_F_ASN1_CB = 177;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_F_ASN1_CB); }))) {
            mixin(enumMixinStr_ASN1_F_ASN1_CB);
        }
    }




    static if(!is(typeof(ASN1_F_ASN1_BIT_STRING_SET_BIT))) {
        private enum enumMixinStr_ASN1_F_ASN1_BIT_STRING_SET_BIT = `enum ASN1_F_ASN1_BIT_STRING_SET_BIT = 183;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_F_ASN1_BIT_STRING_SET_BIT); }))) {
            mixin(enumMixinStr_ASN1_F_ASN1_BIT_STRING_SET_BIT);
        }
    }




    static if(!is(typeof(ASN1_F_ASN1_BIO_INIT))) {
        private enum enumMixinStr_ASN1_F_ASN1_BIO_INIT = `enum ASN1_F_ASN1_BIO_INIT = 113;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_F_ASN1_BIO_INIT); }))) {
            mixin(enumMixinStr_ASN1_F_ASN1_BIO_INIT);
        }
    }




    static if(!is(typeof(ASN1_F_APPEND_EXP))) {
        private enum enumMixinStr_ASN1_F_APPEND_EXP = `enum ASN1_F_APPEND_EXP = 176;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_F_APPEND_EXP); }))) {
            mixin(enumMixinStr_ASN1_F_APPEND_EXP);
        }
    }




    static if(!is(typeof(ASN1_F_A2I_ASN1_STRING))) {
        private enum enumMixinStr_ASN1_F_A2I_ASN1_STRING = `enum ASN1_F_A2I_ASN1_STRING = 103;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_F_A2I_ASN1_STRING); }))) {
            mixin(enumMixinStr_ASN1_F_A2I_ASN1_STRING);
        }
    }




    static if(!is(typeof(ASN1_F_A2I_ASN1_INTEGER))) {
        private enum enumMixinStr_ASN1_F_A2I_ASN1_INTEGER = `enum ASN1_F_A2I_ASN1_INTEGER = 102;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_F_A2I_ASN1_INTEGER); }))) {
            mixin(enumMixinStr_ASN1_F_A2I_ASN1_INTEGER);
        }
    }




    static if(!is(typeof(ASN1_F_A2D_ASN1_OBJECT))) {
        private enum enumMixinStr_ASN1_F_A2D_ASN1_OBJECT = `enum ASN1_F_A2D_ASN1_OBJECT = 100;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_F_A2D_ASN1_OBJECT); }))) {
            mixin(enumMixinStr_ASN1_F_A2D_ASN1_OBJECT);
        }
    }






    static if(!is(typeof(ASN1_PCTX_FLAGS_NO_STRUCT_NAME))) {
        private enum enumMixinStr_ASN1_PCTX_FLAGS_NO_STRUCT_NAME = `enum ASN1_PCTX_FLAGS_NO_STRUCT_NAME = 0x100;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_PCTX_FLAGS_NO_STRUCT_NAME); }))) {
            mixin(enumMixinStr_ASN1_PCTX_FLAGS_NO_STRUCT_NAME);
        }
    }




    static if(!is(typeof(ASN1_PCTX_FLAGS_SHOW_FIELD_STRUCT_NAME))) {
        private enum enumMixinStr_ASN1_PCTX_FLAGS_SHOW_FIELD_STRUCT_NAME = `enum ASN1_PCTX_FLAGS_SHOW_FIELD_STRUCT_NAME = 0x080;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_PCTX_FLAGS_SHOW_FIELD_STRUCT_NAME); }))) {
            mixin(enumMixinStr_ASN1_PCTX_FLAGS_SHOW_FIELD_STRUCT_NAME);
        }
    }




    static if(!is(typeof(ASN1_PCTX_FLAGS_NO_FIELD_NAME))) {
        private enum enumMixinStr_ASN1_PCTX_FLAGS_NO_FIELD_NAME = `enum ASN1_PCTX_FLAGS_NO_FIELD_NAME = 0x040;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_PCTX_FLAGS_NO_FIELD_NAME); }))) {
            mixin(enumMixinStr_ASN1_PCTX_FLAGS_NO_FIELD_NAME);
        }
    }




    static if(!is(typeof(ASN1_PCTX_FLAGS_NO_MSTRING_TYPE))) {
        private enum enumMixinStr_ASN1_PCTX_FLAGS_NO_MSTRING_TYPE = `enum ASN1_PCTX_FLAGS_NO_MSTRING_TYPE = 0x020;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_PCTX_FLAGS_NO_MSTRING_TYPE); }))) {
            mixin(enumMixinStr_ASN1_PCTX_FLAGS_NO_MSTRING_TYPE);
        }
    }




    static if(!is(typeof(ASN1_PCTX_FLAGS_NO_ANY_TYPE))) {
        private enum enumMixinStr_ASN1_PCTX_FLAGS_NO_ANY_TYPE = `enum ASN1_PCTX_FLAGS_NO_ANY_TYPE = 0x010;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_PCTX_FLAGS_NO_ANY_TYPE); }))) {
            mixin(enumMixinStr_ASN1_PCTX_FLAGS_NO_ANY_TYPE);
        }
    }




    static if(!is(typeof(ASN1_PCTX_FLAGS_SHOW_TYPE))) {
        private enum enumMixinStr_ASN1_PCTX_FLAGS_SHOW_TYPE = `enum ASN1_PCTX_FLAGS_SHOW_TYPE = 0x008;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_PCTX_FLAGS_SHOW_TYPE); }))) {
            mixin(enumMixinStr_ASN1_PCTX_FLAGS_SHOW_TYPE);
        }
    }




    static if(!is(typeof(ASN1_PCTX_FLAGS_SHOW_SSOF))) {
        private enum enumMixinStr_ASN1_PCTX_FLAGS_SHOW_SSOF = `enum ASN1_PCTX_FLAGS_SHOW_SSOF = 0x004;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_PCTX_FLAGS_SHOW_SSOF); }))) {
            mixin(enumMixinStr_ASN1_PCTX_FLAGS_SHOW_SSOF);
        }
    }




    static if(!is(typeof(ASN1_PCTX_FLAGS_SHOW_SEQUENCE))) {
        private enum enumMixinStr_ASN1_PCTX_FLAGS_SHOW_SEQUENCE = `enum ASN1_PCTX_FLAGS_SHOW_SEQUENCE = 0x002;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_PCTX_FLAGS_SHOW_SEQUENCE); }))) {
            mixin(enumMixinStr_ASN1_PCTX_FLAGS_SHOW_SEQUENCE);
        }
    }




    static if(!is(typeof(ASN1_PCTX_FLAGS_SHOW_ABSENT))) {
        private enum enumMixinStr_ASN1_PCTX_FLAGS_SHOW_ABSENT = `enum ASN1_PCTX_FLAGS_SHOW_ABSENT = 0x001;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_PCTX_FLAGS_SHOW_ABSENT); }))) {
            mixin(enumMixinStr_ASN1_PCTX_FLAGS_SHOW_ABSENT);
        }
    }
    static if(!is(typeof(B_ASN1_DISPLAYTEXT))) {
        private enum enumMixinStr_B_ASN1_DISPLAYTEXT = `enum B_ASN1_DISPLAYTEXT = B_ASN1_IA5STRING | B_ASN1_VISIBLESTRING | B_ASN1_BMPSTRING | B_ASN1_UTF8STRING;`;
        static if(is(typeof({ mixin(enumMixinStr_B_ASN1_DISPLAYTEXT); }))) {
            mixin(enumMixinStr_B_ASN1_DISPLAYTEXT);
        }
    }




    static if(!is(typeof(B_ASN1_DIRECTORYSTRING))) {
        private enum enumMixinStr_B_ASN1_DIRECTORYSTRING = `enum B_ASN1_DIRECTORYSTRING = B_ASN1_PRINTABLESTRING | B_ASN1_TELETEXSTRING | B_ASN1_BMPSTRING | B_ASN1_UNIVERSALSTRING | B_ASN1_UTF8STRING;`;
        static if(is(typeof({ mixin(enumMixinStr_B_ASN1_DIRECTORYSTRING); }))) {
            mixin(enumMixinStr_B_ASN1_DIRECTORYSTRING);
        }
    }




    static if(!is(typeof(B_ASN1_PRINTABLE))) {
        private enum enumMixinStr_B_ASN1_PRINTABLE = `enum B_ASN1_PRINTABLE = B_ASN1_NUMERICSTRING | B_ASN1_PRINTABLESTRING | B_ASN1_T61STRING | B_ASN1_IA5STRING | B_ASN1_BIT_STRING | B_ASN1_UNIVERSALSTRING | B_ASN1_BMPSTRING | B_ASN1_UTF8STRING | B_ASN1_SEQUENCE | B_ASN1_UNKNOWN;`;
        static if(is(typeof({ mixin(enumMixinStr_B_ASN1_PRINTABLE); }))) {
            mixin(enumMixinStr_B_ASN1_PRINTABLE);
        }
    }




    static if(!is(typeof(B_ASN1_TIME))) {
        private enum enumMixinStr_B_ASN1_TIME = `enum B_ASN1_TIME = B_ASN1_UTCTIME | B_ASN1_GENERALIZEDTIME;`;
        static if(is(typeof({ mixin(enumMixinStr_B_ASN1_TIME); }))) {
            mixin(enumMixinStr_B_ASN1_TIME);
        }
    }




    static if(!is(typeof(ASN1_STRFLGS_RFC2253))) {
        private enum enumMixinStr_ASN1_STRFLGS_RFC2253 = `enum ASN1_STRFLGS_RFC2253 = ( ASN1_STRFLGS_ESC_2253 | ASN1_STRFLGS_ESC_CTRL | ASN1_STRFLGS_ESC_MSB | ASN1_STRFLGS_UTF8_CONVERT | ASN1_STRFLGS_DUMP_UNKNOWN | ASN1_STRFLGS_DUMP_DER );`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_STRFLGS_RFC2253); }))) {
            mixin(enumMixinStr_ASN1_STRFLGS_RFC2253);
        }
    }




    static if(!is(typeof(ASN1_STRFLGS_ESC_2254))) {
        private enum enumMixinStr_ASN1_STRFLGS_ESC_2254 = `enum ASN1_STRFLGS_ESC_2254 = 0x400;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_STRFLGS_ESC_2254); }))) {
            mixin(enumMixinStr_ASN1_STRFLGS_ESC_2254);
        }
    }




    static if(!is(typeof(ASN1_STRFLGS_DUMP_DER))) {
        private enum enumMixinStr_ASN1_STRFLGS_DUMP_DER = `enum ASN1_STRFLGS_DUMP_DER = 0x200;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_STRFLGS_DUMP_DER); }))) {
            mixin(enumMixinStr_ASN1_STRFLGS_DUMP_DER);
        }
    }




    static if(!is(typeof(ASN1_STRFLGS_DUMP_UNKNOWN))) {
        private enum enumMixinStr_ASN1_STRFLGS_DUMP_UNKNOWN = `enum ASN1_STRFLGS_DUMP_UNKNOWN = 0x100;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_STRFLGS_DUMP_UNKNOWN); }))) {
            mixin(enumMixinStr_ASN1_STRFLGS_DUMP_UNKNOWN);
        }
    }




    static if(!is(typeof(ASN1_STRFLGS_DUMP_ALL))) {
        private enum enumMixinStr_ASN1_STRFLGS_DUMP_ALL = `enum ASN1_STRFLGS_DUMP_ALL = 0x80;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_STRFLGS_DUMP_ALL); }))) {
            mixin(enumMixinStr_ASN1_STRFLGS_DUMP_ALL);
        }
    }




    static if(!is(typeof(ASN1_STRFLGS_SHOW_TYPE))) {
        private enum enumMixinStr_ASN1_STRFLGS_SHOW_TYPE = `enum ASN1_STRFLGS_SHOW_TYPE = 0x40;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_STRFLGS_SHOW_TYPE); }))) {
            mixin(enumMixinStr_ASN1_STRFLGS_SHOW_TYPE);
        }
    }




    static if(!is(typeof(ASN1_STRFLGS_IGNORE_TYPE))) {
        private enum enumMixinStr_ASN1_STRFLGS_IGNORE_TYPE = `enum ASN1_STRFLGS_IGNORE_TYPE = 0x20;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_STRFLGS_IGNORE_TYPE); }))) {
            mixin(enumMixinStr_ASN1_STRFLGS_IGNORE_TYPE);
        }
    }




    static if(!is(typeof(ASN1_STRFLGS_UTF8_CONVERT))) {
        private enum enumMixinStr_ASN1_STRFLGS_UTF8_CONVERT = `enum ASN1_STRFLGS_UTF8_CONVERT = 0x10;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_STRFLGS_UTF8_CONVERT); }))) {
            mixin(enumMixinStr_ASN1_STRFLGS_UTF8_CONVERT);
        }
    }




    static if(!is(typeof(CHARTYPE_LAST_ESC_2253))) {
        private enum enumMixinStr_CHARTYPE_LAST_ESC_2253 = `enum CHARTYPE_LAST_ESC_2253 = 0x40;`;
        static if(is(typeof({ mixin(enumMixinStr_CHARTYPE_LAST_ESC_2253); }))) {
            mixin(enumMixinStr_CHARTYPE_LAST_ESC_2253);
        }
    }




    static if(!is(typeof(CHARTYPE_FIRST_ESC_2253))) {
        private enum enumMixinStr_CHARTYPE_FIRST_ESC_2253 = `enum CHARTYPE_FIRST_ESC_2253 = 0x20;`;
        static if(is(typeof({ mixin(enumMixinStr_CHARTYPE_FIRST_ESC_2253); }))) {
            mixin(enumMixinStr_CHARTYPE_FIRST_ESC_2253);
        }
    }




    static if(!is(typeof(CHARTYPE_PRINTABLESTRING))) {
        private enum enumMixinStr_CHARTYPE_PRINTABLESTRING = `enum CHARTYPE_PRINTABLESTRING = 0x10;`;
        static if(is(typeof({ mixin(enumMixinStr_CHARTYPE_PRINTABLESTRING); }))) {
            mixin(enumMixinStr_CHARTYPE_PRINTABLESTRING);
        }
    }




    static if(!is(typeof(ASN1_STRFLGS_ESC_QUOTE))) {
        private enum enumMixinStr_ASN1_STRFLGS_ESC_QUOTE = `enum ASN1_STRFLGS_ESC_QUOTE = 8;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_STRFLGS_ESC_QUOTE); }))) {
            mixin(enumMixinStr_ASN1_STRFLGS_ESC_QUOTE);
        }
    }




    static if(!is(typeof(ASN1_STRFLGS_ESC_MSB))) {
        private enum enumMixinStr_ASN1_STRFLGS_ESC_MSB = `enum ASN1_STRFLGS_ESC_MSB = 4;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_STRFLGS_ESC_MSB); }))) {
            mixin(enumMixinStr_ASN1_STRFLGS_ESC_MSB);
        }
    }




    static if(!is(typeof(ASN1_STRFLGS_ESC_CTRL))) {
        private enum enumMixinStr_ASN1_STRFLGS_ESC_CTRL = `enum ASN1_STRFLGS_ESC_CTRL = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_STRFLGS_ESC_CTRL); }))) {
            mixin(enumMixinStr_ASN1_STRFLGS_ESC_CTRL);
        }
    }




    static if(!is(typeof(ASN1_STRFLGS_ESC_2253))) {
        private enum enumMixinStr_ASN1_STRFLGS_ESC_2253 = `enum ASN1_STRFLGS_ESC_2253 = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_STRFLGS_ESC_2253); }))) {
            mixin(enumMixinStr_ASN1_STRFLGS_ESC_2253);
        }
    }
    static if(!is(typeof(ub_email_address))) {
        private enum enumMixinStr_ub_email_address = `enum ub_email_address = 128;`;
        static if(is(typeof({ mixin(enumMixinStr_ub_email_address); }))) {
            mixin(enumMixinStr_ub_email_address);
        }
    }




    static if(!is(typeof(ub_title))) {
        private enum enumMixinStr_ub_title = `enum ub_title = 64;`;
        static if(is(typeof({ mixin(enumMixinStr_ub_title); }))) {
            mixin(enumMixinStr_ub_title);
        }
    }




    static if(!is(typeof(ub_organization_unit_name))) {
        private enum enumMixinStr_ub_organization_unit_name = `enum ub_organization_unit_name = 64;`;
        static if(is(typeof({ mixin(enumMixinStr_ub_organization_unit_name); }))) {
            mixin(enumMixinStr_ub_organization_unit_name);
        }
    }




    static if(!is(typeof(ub_organization_name))) {
        private enum enumMixinStr_ub_organization_name = `enum ub_organization_name = 64;`;
        static if(is(typeof({ mixin(enumMixinStr_ub_organization_name); }))) {
            mixin(enumMixinStr_ub_organization_name);
        }
    }




    static if(!is(typeof(ub_state_name))) {
        private enum enumMixinStr_ub_state_name = `enum ub_state_name = 128;`;
        static if(is(typeof({ mixin(enumMixinStr_ub_state_name); }))) {
            mixin(enumMixinStr_ub_state_name);
        }
    }




    static if(!is(typeof(ub_locality_name))) {
        private enum enumMixinStr_ub_locality_name = `enum ub_locality_name = 128;`;
        static if(is(typeof({ mixin(enumMixinStr_ub_locality_name); }))) {
            mixin(enumMixinStr_ub_locality_name);
        }
    }




    static if(!is(typeof(ub_common_name))) {
        private enum enumMixinStr_ub_common_name = `enum ub_common_name = 64;`;
        static if(is(typeof({ mixin(enumMixinStr_ub_common_name); }))) {
            mixin(enumMixinStr_ub_common_name);
        }
    }




    static if(!is(typeof(ub_name))) {
        private enum enumMixinStr_ub_name = `enum ub_name = 32768;`;
        static if(is(typeof({ mixin(enumMixinStr_ub_name); }))) {
            mixin(enumMixinStr_ub_name);
        }
    }




    static if(!is(typeof(PKCS9STRING_TYPE))) {
        private enum enumMixinStr_PKCS9STRING_TYPE = `enum PKCS9STRING_TYPE = ( DIRSTRING_TYPE | B_ASN1_IA5STRING );`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS9STRING_TYPE); }))) {
            mixin(enumMixinStr_PKCS9STRING_TYPE);
        }
    }




    static if(!is(typeof(DIRSTRING_TYPE))) {
        private enum enumMixinStr_DIRSTRING_TYPE = `enum DIRSTRING_TYPE = ( B_ASN1_PRINTABLESTRING | B_ASN1_T61STRING | B_ASN1_BMPSTRING | B_ASN1_UTF8STRING );`;
        static if(is(typeof({ mixin(enumMixinStr_DIRSTRING_TYPE); }))) {
            mixin(enumMixinStr_DIRSTRING_TYPE);
        }
    }




    static if(!is(typeof(STABLE_NO_MASK))) {
        private enum enumMixinStr_STABLE_NO_MASK = `enum STABLE_NO_MASK = 0x02;`;
        static if(is(typeof({ mixin(enumMixinStr_STABLE_NO_MASK); }))) {
            mixin(enumMixinStr_STABLE_NO_MASK);
        }
    }




    static if(!is(typeof(STABLE_FLAGS_CLEAR))) {
        private enum enumMixinStr_STABLE_FLAGS_CLEAR = `enum STABLE_FLAGS_CLEAR = STABLE_FLAGS_MALLOC;`;
        static if(is(typeof({ mixin(enumMixinStr_STABLE_FLAGS_CLEAR); }))) {
            mixin(enumMixinStr_STABLE_FLAGS_CLEAR);
        }
    }




    static if(!is(typeof(STABLE_FLAGS_MALLOC))) {
        private enum enumMixinStr_STABLE_FLAGS_MALLOC = `enum STABLE_FLAGS_MALLOC = 0x01;`;
        static if(is(typeof({ mixin(enumMixinStr_STABLE_FLAGS_MALLOC); }))) {
            mixin(enumMixinStr_STABLE_FLAGS_MALLOC);
        }
    }




    static if(!is(typeof(ASN1_LONG_UNDEF))) {
        private enum enumMixinStr_ASN1_LONG_UNDEF = `enum ASN1_LONG_UNDEF = 0x7fffffffL;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_LONG_UNDEF); }))) {
            mixin(enumMixinStr_ASN1_LONG_UNDEF);
        }
    }




    static if(!is(typeof(ASN1_STRING_FLAG_X509_TIME))) {
        private enum enumMixinStr_ASN1_STRING_FLAG_X509_TIME = `enum ASN1_STRING_FLAG_X509_TIME = 0x100;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_STRING_FLAG_X509_TIME); }))) {
            mixin(enumMixinStr_ASN1_STRING_FLAG_X509_TIME);
        }
    }




    static if(!is(typeof(ASN1_STRING_FLAG_EMBED))) {
        private enum enumMixinStr_ASN1_STRING_FLAG_EMBED = `enum ASN1_STRING_FLAG_EMBED = 0x080;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_STRING_FLAG_EMBED); }))) {
            mixin(enumMixinStr_ASN1_STRING_FLAG_EMBED);
        }
    }




    static if(!is(typeof(ASN1_STRING_FLAG_MSTRING))) {
        private enum enumMixinStr_ASN1_STRING_FLAG_MSTRING = `enum ASN1_STRING_FLAG_MSTRING = 0x040;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_STRING_FLAG_MSTRING); }))) {
            mixin(enumMixinStr_ASN1_STRING_FLAG_MSTRING);
        }
    }




    static if(!is(typeof(ASN1_STRING_FLAG_CONT))) {
        private enum enumMixinStr_ASN1_STRING_FLAG_CONT = `enum ASN1_STRING_FLAG_CONT = 0x020;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_STRING_FLAG_CONT); }))) {
            mixin(enumMixinStr_ASN1_STRING_FLAG_CONT);
        }
    }




    static if(!is(typeof(ASN1_STRING_FLAG_NDEF))) {
        private enum enumMixinStr_ASN1_STRING_FLAG_NDEF = `enum ASN1_STRING_FLAG_NDEF = 0x010;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_STRING_FLAG_NDEF); }))) {
            mixin(enumMixinStr_ASN1_STRING_FLAG_NDEF);
        }
    }




    static if(!is(typeof(ASN1_STRING_FLAG_BITS_LEFT))) {
        private enum enumMixinStr_ASN1_STRING_FLAG_BITS_LEFT = `enum ASN1_STRING_FLAG_BITS_LEFT = 0x08;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_STRING_FLAG_BITS_LEFT); }))) {
            mixin(enumMixinStr_ASN1_STRING_FLAG_BITS_LEFT);
        }
    }




    static if(!is(typeof(SMIME_STREAM))) {
        private enum enumMixinStr_SMIME_STREAM = `enum SMIME_STREAM = 0x1000;`;
        static if(is(typeof({ mixin(enumMixinStr_SMIME_STREAM); }))) {
            mixin(enumMixinStr_SMIME_STREAM);
        }
    }




    static if(!is(typeof(SMIME_CRLFEOL))) {
        private enum enumMixinStr_SMIME_CRLFEOL = `enum SMIME_CRLFEOL = 0x800;`;
        static if(is(typeof({ mixin(enumMixinStr_SMIME_CRLFEOL); }))) {
            mixin(enumMixinStr_SMIME_CRLFEOL);
        }
    }




    static if(!is(typeof(SMIME_OLDMIME))) {
        private enum enumMixinStr_SMIME_OLDMIME = `enum SMIME_OLDMIME = 0x400;`;
        static if(is(typeof({ mixin(enumMixinStr_SMIME_OLDMIME); }))) {
            mixin(enumMixinStr_SMIME_OLDMIME);
        }
    }




    static if(!is(typeof(MBSTRING_UNIV))) {
        private enum enumMixinStr_MBSTRING_UNIV = `enum MBSTRING_UNIV = ( MBSTRING_FLAG | 4 );`;
        static if(is(typeof({ mixin(enumMixinStr_MBSTRING_UNIV); }))) {
            mixin(enumMixinStr_MBSTRING_UNIV);
        }
    }




    static if(!is(typeof(MBSTRING_BMP))) {
        private enum enumMixinStr_MBSTRING_BMP = `enum MBSTRING_BMP = ( MBSTRING_FLAG | 2 );`;
        static if(is(typeof({ mixin(enumMixinStr_MBSTRING_BMP); }))) {
            mixin(enumMixinStr_MBSTRING_BMP);
        }
    }




    static if(!is(typeof(MBSTRING_ASC))) {
        private enum enumMixinStr_MBSTRING_ASC = `enum MBSTRING_ASC = ( MBSTRING_FLAG | 1 );`;
        static if(is(typeof({ mixin(enumMixinStr_MBSTRING_ASC); }))) {
            mixin(enumMixinStr_MBSTRING_ASC);
        }
    }




    static if(!is(typeof(MBSTRING_UTF8))) {
        private enum enumMixinStr_MBSTRING_UTF8 = `enum MBSTRING_UTF8 = ( MBSTRING_FLAG );`;
        static if(is(typeof({ mixin(enumMixinStr_MBSTRING_UTF8); }))) {
            mixin(enumMixinStr_MBSTRING_UTF8);
        }
    }




    static if(!is(typeof(MBSTRING_FLAG))) {
        private enum enumMixinStr_MBSTRING_FLAG = `enum MBSTRING_FLAG = 0x1000;`;
        static if(is(typeof({ mixin(enumMixinStr_MBSTRING_FLAG); }))) {
            mixin(enumMixinStr_MBSTRING_FLAG);
        }
    }




    static if(!is(typeof(B_ASN1_SEQUENCE))) {
        private enum enumMixinStr_B_ASN1_SEQUENCE = `enum B_ASN1_SEQUENCE = 0x10000;`;
        static if(is(typeof({ mixin(enumMixinStr_B_ASN1_SEQUENCE); }))) {
            mixin(enumMixinStr_B_ASN1_SEQUENCE);
        }
    }




    static if(!is(typeof(B_ASN1_GENERALIZEDTIME))) {
        private enum enumMixinStr_B_ASN1_GENERALIZEDTIME = `enum B_ASN1_GENERALIZEDTIME = 0x8000;`;
        static if(is(typeof({ mixin(enumMixinStr_B_ASN1_GENERALIZEDTIME); }))) {
            mixin(enumMixinStr_B_ASN1_GENERALIZEDTIME);
        }
    }




    static if(!is(typeof(B_ASN1_UTCTIME))) {
        private enum enumMixinStr_B_ASN1_UTCTIME = `enum B_ASN1_UTCTIME = 0x4000;`;
        static if(is(typeof({ mixin(enumMixinStr_B_ASN1_UTCTIME); }))) {
            mixin(enumMixinStr_B_ASN1_UTCTIME);
        }
    }




    static if(!is(typeof(B_ASN1_UTF8STRING))) {
        private enum enumMixinStr_B_ASN1_UTF8STRING = `enum B_ASN1_UTF8STRING = 0x2000;`;
        static if(is(typeof({ mixin(enumMixinStr_B_ASN1_UTF8STRING); }))) {
            mixin(enumMixinStr_B_ASN1_UTF8STRING);
        }
    }




    static if(!is(typeof(B_ASN1_UNKNOWN))) {
        private enum enumMixinStr_B_ASN1_UNKNOWN = `enum B_ASN1_UNKNOWN = 0x1000;`;
        static if(is(typeof({ mixin(enumMixinStr_B_ASN1_UNKNOWN); }))) {
            mixin(enumMixinStr_B_ASN1_UNKNOWN);
        }
    }




    static if(!is(typeof(B_ASN1_BMPSTRING))) {
        private enum enumMixinStr_B_ASN1_BMPSTRING = `enum B_ASN1_BMPSTRING = 0x0800;`;
        static if(is(typeof({ mixin(enumMixinStr_B_ASN1_BMPSTRING); }))) {
            mixin(enumMixinStr_B_ASN1_BMPSTRING);
        }
    }






    static if(!is(typeof(B_ASN1_BIT_STRING))) {
        private enum enumMixinStr_B_ASN1_BIT_STRING = `enum B_ASN1_BIT_STRING = 0x0400;`;
        static if(is(typeof({ mixin(enumMixinStr_B_ASN1_BIT_STRING); }))) {
            mixin(enumMixinStr_B_ASN1_BIT_STRING);
        }
    }




    static if(!is(typeof(B_ASN1_OCTET_STRING))) {
        private enum enumMixinStr_B_ASN1_OCTET_STRING = `enum B_ASN1_OCTET_STRING = 0x0200;`;
        static if(is(typeof({ mixin(enumMixinStr_B_ASN1_OCTET_STRING); }))) {
            mixin(enumMixinStr_B_ASN1_OCTET_STRING);
        }
    }




    static if(!is(typeof(B_ASN1_UNIVERSALSTRING))) {
        private enum enumMixinStr_B_ASN1_UNIVERSALSTRING = `enum B_ASN1_UNIVERSALSTRING = 0x0100;`;
        static if(is(typeof({ mixin(enumMixinStr_B_ASN1_UNIVERSALSTRING); }))) {
            mixin(enumMixinStr_B_ASN1_UNIVERSALSTRING);
        }
    }




    static if(!is(typeof(B_ASN1_GENERALSTRING))) {
        private enum enumMixinStr_B_ASN1_GENERALSTRING = `enum B_ASN1_GENERALSTRING = 0x0080;`;
        static if(is(typeof({ mixin(enumMixinStr_B_ASN1_GENERALSTRING); }))) {
            mixin(enumMixinStr_B_ASN1_GENERALSTRING);
        }
    }




    static if(!is(typeof(B_ASN1_VISIBLESTRING))) {
        private enum enumMixinStr_B_ASN1_VISIBLESTRING = `enum B_ASN1_VISIBLESTRING = 0x0040;`;
        static if(is(typeof({ mixin(enumMixinStr_B_ASN1_VISIBLESTRING); }))) {
            mixin(enumMixinStr_B_ASN1_VISIBLESTRING);
        }
    }




    static if(!is(typeof(B_ASN1_ISO64STRING))) {
        private enum enumMixinStr_B_ASN1_ISO64STRING = `enum B_ASN1_ISO64STRING = 0x0040;`;
        static if(is(typeof({ mixin(enumMixinStr_B_ASN1_ISO64STRING); }))) {
            mixin(enumMixinStr_B_ASN1_ISO64STRING);
        }
    }




    static if(!is(typeof(B_ASN1_GRAPHICSTRING))) {
        private enum enumMixinStr_B_ASN1_GRAPHICSTRING = `enum B_ASN1_GRAPHICSTRING = 0x0020;`;
        static if(is(typeof({ mixin(enumMixinStr_B_ASN1_GRAPHICSTRING); }))) {
            mixin(enumMixinStr_B_ASN1_GRAPHICSTRING);
        }
    }




    static if(!is(typeof(B_ASN1_IA5STRING))) {
        private enum enumMixinStr_B_ASN1_IA5STRING = `enum B_ASN1_IA5STRING = 0x0010;`;
        static if(is(typeof({ mixin(enumMixinStr_B_ASN1_IA5STRING); }))) {
            mixin(enumMixinStr_B_ASN1_IA5STRING);
        }
    }




    static if(!is(typeof(B_ASN1_VIDEOTEXSTRING))) {
        private enum enumMixinStr_B_ASN1_VIDEOTEXSTRING = `enum B_ASN1_VIDEOTEXSTRING = 0x0008;`;
        static if(is(typeof({ mixin(enumMixinStr_B_ASN1_VIDEOTEXSTRING); }))) {
            mixin(enumMixinStr_B_ASN1_VIDEOTEXSTRING);
        }
    }




    static if(!is(typeof(B_ASN1_TELETEXSTRING))) {
        private enum enumMixinStr_B_ASN1_TELETEXSTRING = `enum B_ASN1_TELETEXSTRING = 0x0004;`;
        static if(is(typeof({ mixin(enumMixinStr_B_ASN1_TELETEXSTRING); }))) {
            mixin(enumMixinStr_B_ASN1_TELETEXSTRING);
        }
    }




    static if(!is(typeof(B_ASN1_T61STRING))) {
        private enum enumMixinStr_B_ASN1_T61STRING = `enum B_ASN1_T61STRING = 0x0004;`;
        static if(is(typeof({ mixin(enumMixinStr_B_ASN1_T61STRING); }))) {
            mixin(enumMixinStr_B_ASN1_T61STRING);
        }
    }




    static if(!is(typeof(B_ASN1_PRINTABLESTRING))) {
        private enum enumMixinStr_B_ASN1_PRINTABLESTRING = `enum B_ASN1_PRINTABLESTRING = 0x0002;`;
        static if(is(typeof({ mixin(enumMixinStr_B_ASN1_PRINTABLESTRING); }))) {
            mixin(enumMixinStr_B_ASN1_PRINTABLESTRING);
        }
    }




    static if(!is(typeof(B_ASN1_NUMERICSTRING))) {
        private enum enumMixinStr_B_ASN1_NUMERICSTRING = `enum B_ASN1_NUMERICSTRING = 0x0001;`;
        static if(is(typeof({ mixin(enumMixinStr_B_ASN1_NUMERICSTRING); }))) {
            mixin(enumMixinStr_B_ASN1_NUMERICSTRING);
        }
    }




    static if(!is(typeof(V_ASN1_NEG_ENUMERATED))) {
        private enum enumMixinStr_V_ASN1_NEG_ENUMERATED = `enum V_ASN1_NEG_ENUMERATED = ( 10 | V_ASN1_NEG );`;
        static if(is(typeof({ mixin(enumMixinStr_V_ASN1_NEG_ENUMERATED); }))) {
            mixin(enumMixinStr_V_ASN1_NEG_ENUMERATED);
        }
    }




    static if(!is(typeof(V_ASN1_NEG_INTEGER))) {
        private enum enumMixinStr_V_ASN1_NEG_INTEGER = `enum V_ASN1_NEG_INTEGER = ( 2 | V_ASN1_NEG );`;
        static if(is(typeof({ mixin(enumMixinStr_V_ASN1_NEG_INTEGER); }))) {
            mixin(enumMixinStr_V_ASN1_NEG_INTEGER);
        }
    }




    static if(!is(typeof(V_ASN1_NEG))) {
        private enum enumMixinStr_V_ASN1_NEG = `enum V_ASN1_NEG = 0x100;`;
        static if(is(typeof({ mixin(enumMixinStr_V_ASN1_NEG); }))) {
            mixin(enumMixinStr_V_ASN1_NEG);
        }
    }




    static if(!is(typeof(V_ASN1_BMPSTRING))) {
        private enum enumMixinStr_V_ASN1_BMPSTRING = `enum V_ASN1_BMPSTRING = 30;`;
        static if(is(typeof({ mixin(enumMixinStr_V_ASN1_BMPSTRING); }))) {
            mixin(enumMixinStr_V_ASN1_BMPSTRING);
        }
    }




    static if(!is(typeof(V_ASN1_UNIVERSALSTRING))) {
        private enum enumMixinStr_V_ASN1_UNIVERSALSTRING = `enum V_ASN1_UNIVERSALSTRING = 28;`;
        static if(is(typeof({ mixin(enumMixinStr_V_ASN1_UNIVERSALSTRING); }))) {
            mixin(enumMixinStr_V_ASN1_UNIVERSALSTRING);
        }
    }




    static if(!is(typeof(V_ASN1_GENERALSTRING))) {
        private enum enumMixinStr_V_ASN1_GENERALSTRING = `enum V_ASN1_GENERALSTRING = 27;`;
        static if(is(typeof({ mixin(enumMixinStr_V_ASN1_GENERALSTRING); }))) {
            mixin(enumMixinStr_V_ASN1_GENERALSTRING);
        }
    }




    static if(!is(typeof(V_ASN1_VISIBLESTRING))) {
        private enum enumMixinStr_V_ASN1_VISIBLESTRING = `enum V_ASN1_VISIBLESTRING = 26;`;
        static if(is(typeof({ mixin(enumMixinStr_V_ASN1_VISIBLESTRING); }))) {
            mixin(enumMixinStr_V_ASN1_VISIBLESTRING);
        }
    }




    static if(!is(typeof(V_ASN1_ISO64STRING))) {
        private enum enumMixinStr_V_ASN1_ISO64STRING = `enum V_ASN1_ISO64STRING = 26;`;
        static if(is(typeof({ mixin(enumMixinStr_V_ASN1_ISO64STRING); }))) {
            mixin(enumMixinStr_V_ASN1_ISO64STRING);
        }
    }




    static if(!is(typeof(V_ASN1_GRAPHICSTRING))) {
        private enum enumMixinStr_V_ASN1_GRAPHICSTRING = `enum V_ASN1_GRAPHICSTRING = 25;`;
        static if(is(typeof({ mixin(enumMixinStr_V_ASN1_GRAPHICSTRING); }))) {
            mixin(enumMixinStr_V_ASN1_GRAPHICSTRING);
        }
    }




    static if(!is(typeof(V_ASN1_GENERALIZEDTIME))) {
        private enum enumMixinStr_V_ASN1_GENERALIZEDTIME = `enum V_ASN1_GENERALIZEDTIME = 24;`;
        static if(is(typeof({ mixin(enumMixinStr_V_ASN1_GENERALIZEDTIME); }))) {
            mixin(enumMixinStr_V_ASN1_GENERALIZEDTIME);
        }
    }




    static if(!is(typeof(V_ASN1_UTCTIME))) {
        private enum enumMixinStr_V_ASN1_UTCTIME = `enum V_ASN1_UTCTIME = 23;`;
        static if(is(typeof({ mixin(enumMixinStr_V_ASN1_UTCTIME); }))) {
            mixin(enumMixinStr_V_ASN1_UTCTIME);
        }
    }




    static if(!is(typeof(V_ASN1_IA5STRING))) {
        private enum enumMixinStr_V_ASN1_IA5STRING = `enum V_ASN1_IA5STRING = 22;`;
        static if(is(typeof({ mixin(enumMixinStr_V_ASN1_IA5STRING); }))) {
            mixin(enumMixinStr_V_ASN1_IA5STRING);
        }
    }




    static if(!is(typeof(V_ASN1_VIDEOTEXSTRING))) {
        private enum enumMixinStr_V_ASN1_VIDEOTEXSTRING = `enum V_ASN1_VIDEOTEXSTRING = 21;`;
        static if(is(typeof({ mixin(enumMixinStr_V_ASN1_VIDEOTEXSTRING); }))) {
            mixin(enumMixinStr_V_ASN1_VIDEOTEXSTRING);
        }
    }




    static if(!is(typeof(V_ASN1_TELETEXSTRING))) {
        private enum enumMixinStr_V_ASN1_TELETEXSTRING = `enum V_ASN1_TELETEXSTRING = 20;`;
        static if(is(typeof({ mixin(enumMixinStr_V_ASN1_TELETEXSTRING); }))) {
            mixin(enumMixinStr_V_ASN1_TELETEXSTRING);
        }
    }




    static if(!is(typeof(V_ASN1_T61STRING))) {
        private enum enumMixinStr_V_ASN1_T61STRING = `enum V_ASN1_T61STRING = 20;`;
        static if(is(typeof({ mixin(enumMixinStr_V_ASN1_T61STRING); }))) {
            mixin(enumMixinStr_V_ASN1_T61STRING);
        }
    }




    static if(!is(typeof(V_ASN1_PRINTABLESTRING))) {
        private enum enumMixinStr_V_ASN1_PRINTABLESTRING = `enum V_ASN1_PRINTABLESTRING = 19;`;
        static if(is(typeof({ mixin(enumMixinStr_V_ASN1_PRINTABLESTRING); }))) {
            mixin(enumMixinStr_V_ASN1_PRINTABLESTRING);
        }
    }




    static if(!is(typeof(V_ASN1_NUMERICSTRING))) {
        private enum enumMixinStr_V_ASN1_NUMERICSTRING = `enum V_ASN1_NUMERICSTRING = 18;`;
        static if(is(typeof({ mixin(enumMixinStr_V_ASN1_NUMERICSTRING); }))) {
            mixin(enumMixinStr_V_ASN1_NUMERICSTRING);
        }
    }




    static if(!is(typeof(V_ASN1_SET))) {
        private enum enumMixinStr_V_ASN1_SET = `enum V_ASN1_SET = 17;`;
        static if(is(typeof({ mixin(enumMixinStr_V_ASN1_SET); }))) {
            mixin(enumMixinStr_V_ASN1_SET);
        }
    }




    static if(!is(typeof(V_ASN1_SEQUENCE))) {
        private enum enumMixinStr_V_ASN1_SEQUENCE = `enum V_ASN1_SEQUENCE = 16;`;
        static if(is(typeof({ mixin(enumMixinStr_V_ASN1_SEQUENCE); }))) {
            mixin(enumMixinStr_V_ASN1_SEQUENCE);
        }
    }




    static if(!is(typeof(V_ASN1_UTF8STRING))) {
        private enum enumMixinStr_V_ASN1_UTF8STRING = `enum V_ASN1_UTF8STRING = 12;`;
        static if(is(typeof({ mixin(enumMixinStr_V_ASN1_UTF8STRING); }))) {
            mixin(enumMixinStr_V_ASN1_UTF8STRING);
        }
    }




    static if(!is(typeof(V_ASN1_ENUMERATED))) {
        private enum enumMixinStr_V_ASN1_ENUMERATED = `enum V_ASN1_ENUMERATED = 10;`;
        static if(is(typeof({ mixin(enumMixinStr_V_ASN1_ENUMERATED); }))) {
            mixin(enumMixinStr_V_ASN1_ENUMERATED);
        }
    }




    static if(!is(typeof(V_ASN1_REAL))) {
        private enum enumMixinStr_V_ASN1_REAL = `enum V_ASN1_REAL = 9;`;
        static if(is(typeof({ mixin(enumMixinStr_V_ASN1_REAL); }))) {
            mixin(enumMixinStr_V_ASN1_REAL);
        }
    }




    static if(!is(typeof(V_ASN1_EXTERNAL))) {
        private enum enumMixinStr_V_ASN1_EXTERNAL = `enum V_ASN1_EXTERNAL = 8;`;
        static if(is(typeof({ mixin(enumMixinStr_V_ASN1_EXTERNAL); }))) {
            mixin(enumMixinStr_V_ASN1_EXTERNAL);
        }
    }




    static if(!is(typeof(V_ASN1_OBJECT_DESCRIPTOR))) {
        private enum enumMixinStr_V_ASN1_OBJECT_DESCRIPTOR = `enum V_ASN1_OBJECT_DESCRIPTOR = 7;`;
        static if(is(typeof({ mixin(enumMixinStr_V_ASN1_OBJECT_DESCRIPTOR); }))) {
            mixin(enumMixinStr_V_ASN1_OBJECT_DESCRIPTOR);
        }
    }




    static if(!is(typeof(V_ASN1_OBJECT))) {
        private enum enumMixinStr_V_ASN1_OBJECT = `enum V_ASN1_OBJECT = 6;`;
        static if(is(typeof({ mixin(enumMixinStr_V_ASN1_OBJECT); }))) {
            mixin(enumMixinStr_V_ASN1_OBJECT);
        }
    }




    static if(!is(typeof(V_ASN1_NULL))) {
        private enum enumMixinStr_V_ASN1_NULL = `enum V_ASN1_NULL = 5;`;
        static if(is(typeof({ mixin(enumMixinStr_V_ASN1_NULL); }))) {
            mixin(enumMixinStr_V_ASN1_NULL);
        }
    }




    static if(!is(typeof(V_ASN1_OCTET_STRING))) {
        private enum enumMixinStr_V_ASN1_OCTET_STRING = `enum V_ASN1_OCTET_STRING = 4;`;
        static if(is(typeof({ mixin(enumMixinStr_V_ASN1_OCTET_STRING); }))) {
            mixin(enumMixinStr_V_ASN1_OCTET_STRING);
        }
    }






    static if(!is(typeof(V_ASN1_BIT_STRING))) {
        private enum enumMixinStr_V_ASN1_BIT_STRING = `enum V_ASN1_BIT_STRING = 3;`;
        static if(is(typeof({ mixin(enumMixinStr_V_ASN1_BIT_STRING); }))) {
            mixin(enumMixinStr_V_ASN1_BIT_STRING);
        }
    }




    static if(!is(typeof(V_ASN1_INTEGER))) {
        private enum enumMixinStr_V_ASN1_INTEGER = `enum V_ASN1_INTEGER = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_V_ASN1_INTEGER); }))) {
            mixin(enumMixinStr_V_ASN1_INTEGER);
        }
    }




    static if(!is(typeof(V_ASN1_BOOLEAN))) {
        private enum enumMixinStr_V_ASN1_BOOLEAN = `enum V_ASN1_BOOLEAN = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_V_ASN1_BOOLEAN); }))) {
            mixin(enumMixinStr_V_ASN1_BOOLEAN);
        }
    }




    static if(!is(typeof(V_ASN1_EOC))) {
        private enum enumMixinStr_V_ASN1_EOC = `enum V_ASN1_EOC = 0;`;
        static if(is(typeof({ mixin(enumMixinStr_V_ASN1_EOC); }))) {
            mixin(enumMixinStr_V_ASN1_EOC);
        }
    }




    static if(!is(typeof(V_ASN1_UNDEF))) {
        private enum enumMixinStr_V_ASN1_UNDEF = `enum V_ASN1_UNDEF = - 1;`;
        static if(is(typeof({ mixin(enumMixinStr_V_ASN1_UNDEF); }))) {
            mixin(enumMixinStr_V_ASN1_UNDEF);
        }
    }




    static if(!is(typeof(V_ASN1_ANY))) {
        private enum enumMixinStr_V_ASN1_ANY = `enum V_ASN1_ANY = - 4;`;
        static if(is(typeof({ mixin(enumMixinStr_V_ASN1_ANY); }))) {
            mixin(enumMixinStr_V_ASN1_ANY);
        }
    }




    static if(!is(typeof(V_ASN1_OTHER))) {
        private enum enumMixinStr_V_ASN1_OTHER = `enum V_ASN1_OTHER = - 3;`;
        static if(is(typeof({ mixin(enumMixinStr_V_ASN1_OTHER); }))) {
            mixin(enumMixinStr_V_ASN1_OTHER);
        }
    }




    static if(!is(typeof(V_ASN1_APP_CHOOSE))) {
        private enum enumMixinStr_V_ASN1_APP_CHOOSE = `enum V_ASN1_APP_CHOOSE = - 2;`;
        static if(is(typeof({ mixin(enumMixinStr_V_ASN1_APP_CHOOSE); }))) {
            mixin(enumMixinStr_V_ASN1_APP_CHOOSE);
        }
    }




    static if(!is(typeof(V_ASN1_PRIMATIVE_TAG))) {
        private enum enumMixinStr_V_ASN1_PRIMATIVE_TAG = `enum V_ASN1_PRIMATIVE_TAG = V_ASN1_PRIMITIVE_TAG;`;
        static if(is(typeof({ mixin(enumMixinStr_V_ASN1_PRIMATIVE_TAG); }))) {
            mixin(enumMixinStr_V_ASN1_PRIMATIVE_TAG);
        }
    }




    static if(!is(typeof(V_ASN1_PRIMITIVE_TAG))) {
        private enum enumMixinStr_V_ASN1_PRIMITIVE_TAG = `enum V_ASN1_PRIMITIVE_TAG = 0x1f;`;
        static if(is(typeof({ mixin(enumMixinStr_V_ASN1_PRIMITIVE_TAG); }))) {
            mixin(enumMixinStr_V_ASN1_PRIMITIVE_TAG);
        }
    }




    static if(!is(typeof(V_ASN1_CONSTRUCTED))) {
        private enum enumMixinStr_V_ASN1_CONSTRUCTED = `enum V_ASN1_CONSTRUCTED = 0x20;`;
        static if(is(typeof({ mixin(enumMixinStr_V_ASN1_CONSTRUCTED); }))) {
            mixin(enumMixinStr_V_ASN1_CONSTRUCTED);
        }
    }




    static if(!is(typeof(V_ASN1_PRIVATE))) {
        private enum enumMixinStr_V_ASN1_PRIVATE = `enum V_ASN1_PRIVATE = 0xc0;`;
        static if(is(typeof({ mixin(enumMixinStr_V_ASN1_PRIVATE); }))) {
            mixin(enumMixinStr_V_ASN1_PRIVATE);
        }
    }




    static if(!is(typeof(V_ASN1_CONTEXT_SPECIFIC))) {
        private enum enumMixinStr_V_ASN1_CONTEXT_SPECIFIC = `enum V_ASN1_CONTEXT_SPECIFIC = 0x80;`;
        static if(is(typeof({ mixin(enumMixinStr_V_ASN1_CONTEXT_SPECIFIC); }))) {
            mixin(enumMixinStr_V_ASN1_CONTEXT_SPECIFIC);
        }
    }




    static if(!is(typeof(V_ASN1_APPLICATION))) {
        private enum enumMixinStr_V_ASN1_APPLICATION = `enum V_ASN1_APPLICATION = 0x40;`;
        static if(is(typeof({ mixin(enumMixinStr_V_ASN1_APPLICATION); }))) {
            mixin(enumMixinStr_V_ASN1_APPLICATION);
        }
    }




    static if(!is(typeof(V_ASN1_UNIVERSAL))) {
        private enum enumMixinStr_V_ASN1_UNIVERSAL = `enum V_ASN1_UNIVERSAL = 0x00;`;
        static if(is(typeof({ mixin(enumMixinStr_V_ASN1_UNIVERSAL); }))) {
            mixin(enumMixinStr_V_ASN1_UNIVERSAL);
        }
    }






    static if(!is(typeof(RTSIG_MAX))) {
        private enum enumMixinStr_RTSIG_MAX = `enum RTSIG_MAX = 32;`;
        static if(is(typeof({ mixin(enumMixinStr_RTSIG_MAX); }))) {
            mixin(enumMixinStr_RTSIG_MAX);
        }
    }




    static if(!is(typeof(XATTR_LIST_MAX))) {
        private enum enumMixinStr_XATTR_LIST_MAX = `enum XATTR_LIST_MAX = 65536;`;
        static if(is(typeof({ mixin(enumMixinStr_XATTR_LIST_MAX); }))) {
            mixin(enumMixinStr_XATTR_LIST_MAX);
        }
    }




    static if(!is(typeof(XATTR_SIZE_MAX))) {
        private enum enumMixinStr_XATTR_SIZE_MAX = `enum XATTR_SIZE_MAX = 65536;`;
        static if(is(typeof({ mixin(enumMixinStr_XATTR_SIZE_MAX); }))) {
            mixin(enumMixinStr_XATTR_SIZE_MAX);
        }
    }




    static if(!is(typeof(XATTR_NAME_MAX))) {
        private enum enumMixinStr_XATTR_NAME_MAX = `enum XATTR_NAME_MAX = 255;`;
        static if(is(typeof({ mixin(enumMixinStr_XATTR_NAME_MAX); }))) {
            mixin(enumMixinStr_XATTR_NAME_MAX);
        }
    }




    static if(!is(typeof(PIPE_BUF))) {
        private enum enumMixinStr_PIPE_BUF = `enum PIPE_BUF = 4096;`;
        static if(is(typeof({ mixin(enumMixinStr_PIPE_BUF); }))) {
            mixin(enumMixinStr_PIPE_BUF);
        }
    }




    static if(!is(typeof(PATH_MAX))) {
        private enum enumMixinStr_PATH_MAX = `enum PATH_MAX = 4096;`;
        static if(is(typeof({ mixin(enumMixinStr_PATH_MAX); }))) {
            mixin(enumMixinStr_PATH_MAX);
        }
    }




    static if(!is(typeof(NAME_MAX))) {
        private enum enumMixinStr_NAME_MAX = `enum NAME_MAX = 255;`;
        static if(is(typeof({ mixin(enumMixinStr_NAME_MAX); }))) {
            mixin(enumMixinStr_NAME_MAX);
        }
    }




    static if(!is(typeof(MAX_INPUT))) {
        private enum enumMixinStr_MAX_INPUT = `enum MAX_INPUT = 255;`;
        static if(is(typeof({ mixin(enumMixinStr_MAX_INPUT); }))) {
            mixin(enumMixinStr_MAX_INPUT);
        }
    }




    static if(!is(typeof(MAX_CANON))) {
        private enum enumMixinStr_MAX_CANON = `enum MAX_CANON = 255;`;
        static if(is(typeof({ mixin(enumMixinStr_MAX_CANON); }))) {
            mixin(enumMixinStr_MAX_CANON);
        }
    }




    static if(!is(typeof(LINK_MAX))) {
        private enum enumMixinStr_LINK_MAX = `enum LINK_MAX = 127;`;
        static if(is(typeof({ mixin(enumMixinStr_LINK_MAX); }))) {
            mixin(enumMixinStr_LINK_MAX);
        }
    }




    static if(!is(typeof(ARG_MAX))) {
        private enum enumMixinStr_ARG_MAX = `enum ARG_MAX = 131072;`;
        static if(is(typeof({ mixin(enumMixinStr_ARG_MAX); }))) {
            mixin(enumMixinStr_ARG_MAX);
        }
    }




    static if(!is(typeof(NGROUPS_MAX))) {
        private enum enumMixinStr_NGROUPS_MAX = `enum NGROUPS_MAX = 65536;`;
        static if(is(typeof({ mixin(enumMixinStr_NGROUPS_MAX); }))) {
            mixin(enumMixinStr_NGROUPS_MAX);
        }
    }




    static if(!is(typeof(NR_OPEN))) {
        private enum enumMixinStr_NR_OPEN = `enum NR_OPEN = 1024;`;
        static if(is(typeof({ mixin(enumMixinStr_NR_OPEN); }))) {
            mixin(enumMixinStr_NR_OPEN);
        }
    }






    static if(!is(typeof(ULLONG_MAX))) {
        private enum enumMixinStr_ULLONG_MAX = `enum ULLONG_MAX = ( LLONG_MAX * 2ULL + 1 );`;
        static if(is(typeof({ mixin(enumMixinStr_ULLONG_MAX); }))) {
            mixin(enumMixinStr_ULLONG_MAX);
        }
    }




    static if(!is(typeof(LLONG_MAX))) {
        private enum enumMixinStr_LLONG_MAX = `enum LLONG_MAX = 0x7fffffffffffffffLL;`;
        static if(is(typeof({ mixin(enumMixinStr_LLONG_MAX); }))) {
            mixin(enumMixinStr_LLONG_MAX);
        }
    }




    static if(!is(typeof(LLONG_MIN))) {
        private enum enumMixinStr_LLONG_MIN = `enum LLONG_MIN = ( - 0x7fffffffffffffffLL - 1 );`;
        static if(is(typeof({ mixin(enumMixinStr_LLONG_MIN); }))) {
            mixin(enumMixinStr_LLONG_MIN);
        }
    }




    static if(!is(typeof(MB_LEN_MAX))) {
        private enum enumMixinStr_MB_LEN_MAX = `enum MB_LEN_MAX = 16;`;
        static if(is(typeof({ mixin(enumMixinStr_MB_LEN_MAX); }))) {
            mixin(enumMixinStr_MB_LEN_MAX);
        }
    }






    static if(!is(typeof(_LIBC_LIMITS_H_))) {
        private enum enumMixinStr__LIBC_LIMITS_H_ = `enum _LIBC_LIMITS_H_ = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__LIBC_LIMITS_H_); }))) {
            mixin(enumMixinStr__LIBC_LIMITS_H_);
        }
    }




    static if(!is(typeof(SCNxPTR))) {
        private enum enumMixinStr_SCNxPTR = `enum SCNxPTR = __PRIPTR_PREFIX "x";`;
        static if(is(typeof({ mixin(enumMixinStr_SCNxPTR); }))) {
            mixin(enumMixinStr_SCNxPTR);
        }
    }




    static if(!is(typeof(SCNuPTR))) {
        private enum enumMixinStr_SCNuPTR = `enum SCNuPTR = __PRIPTR_PREFIX "u";`;
        static if(is(typeof({ mixin(enumMixinStr_SCNuPTR); }))) {
            mixin(enumMixinStr_SCNuPTR);
        }
    }




    static if(!is(typeof(SCNoPTR))) {
        private enum enumMixinStr_SCNoPTR = `enum SCNoPTR = __PRIPTR_PREFIX "o";`;
        static if(is(typeof({ mixin(enumMixinStr_SCNoPTR); }))) {
            mixin(enumMixinStr_SCNoPTR);
        }
    }




    static if(!is(typeof(SCNiPTR))) {
        private enum enumMixinStr_SCNiPTR = `enum SCNiPTR = __PRIPTR_PREFIX "i";`;
        static if(is(typeof({ mixin(enumMixinStr_SCNiPTR); }))) {
            mixin(enumMixinStr_SCNiPTR);
        }
    }






    static if(!is(typeof(SCNdPTR))) {
        private enum enumMixinStr_SCNdPTR = `enum SCNdPTR = __PRIPTR_PREFIX "d";`;
        static if(is(typeof({ mixin(enumMixinStr_SCNdPTR); }))) {
            mixin(enumMixinStr_SCNdPTR);
        }
    }




    static if(!is(typeof(SCNxMAX))) {
        private enum enumMixinStr_SCNxMAX = `enum SCNxMAX = __PRI64_PREFIX "x";`;
        static if(is(typeof({ mixin(enumMixinStr_SCNxMAX); }))) {
            mixin(enumMixinStr_SCNxMAX);
        }
    }




    static if(!is(typeof(SCNuMAX))) {
        private enum enumMixinStr_SCNuMAX = `enum SCNuMAX = __PRI64_PREFIX "u";`;
        static if(is(typeof({ mixin(enumMixinStr_SCNuMAX); }))) {
            mixin(enumMixinStr_SCNuMAX);
        }
    }




    static if(!is(typeof(SCNoMAX))) {
        private enum enumMixinStr_SCNoMAX = `enum SCNoMAX = __PRI64_PREFIX "o";`;
        static if(is(typeof({ mixin(enumMixinStr_SCNoMAX); }))) {
            mixin(enumMixinStr_SCNoMAX);
        }
    }




    static if(!is(typeof(SCNiMAX))) {
        private enum enumMixinStr_SCNiMAX = `enum SCNiMAX = __PRI64_PREFIX "i";`;
        static if(is(typeof({ mixin(enumMixinStr_SCNiMAX); }))) {
            mixin(enumMixinStr_SCNiMAX);
        }
    }




    static if(!is(typeof(SCNdMAX))) {
        private enum enumMixinStr_SCNdMAX = `enum SCNdMAX = __PRI64_PREFIX "d";`;
        static if(is(typeof({ mixin(enumMixinStr_SCNdMAX); }))) {
            mixin(enumMixinStr_SCNdMAX);
        }
    }




    static if(!is(typeof(SCNxFAST64))) {
        private enum enumMixinStr_SCNxFAST64 = `enum SCNxFAST64 = __PRI64_PREFIX "x";`;
        static if(is(typeof({ mixin(enumMixinStr_SCNxFAST64); }))) {
            mixin(enumMixinStr_SCNxFAST64);
        }
    }




    static if(!is(typeof(SCNxFAST32))) {
        private enum enumMixinStr_SCNxFAST32 = `enum SCNxFAST32 = __PRIPTR_PREFIX "x";`;
        static if(is(typeof({ mixin(enumMixinStr_SCNxFAST32); }))) {
            mixin(enumMixinStr_SCNxFAST32);
        }
    }




    static if(!is(typeof(SCNxFAST16))) {
        private enum enumMixinStr_SCNxFAST16 = `enum SCNxFAST16 = __PRIPTR_PREFIX "x";`;
        static if(is(typeof({ mixin(enumMixinStr_SCNxFAST16); }))) {
            mixin(enumMixinStr_SCNxFAST16);
        }
    }




    static if(!is(typeof(SCNxFAST8))) {
        private enum enumMixinStr_SCNxFAST8 = `enum SCNxFAST8 = "hhx";`;
        static if(is(typeof({ mixin(enumMixinStr_SCNxFAST8); }))) {
            mixin(enumMixinStr_SCNxFAST8);
        }
    }




    static if(!is(typeof(SCNxLEAST64))) {
        private enum enumMixinStr_SCNxLEAST64 = `enum SCNxLEAST64 = __PRI64_PREFIX "x";`;
        static if(is(typeof({ mixin(enumMixinStr_SCNxLEAST64); }))) {
            mixin(enumMixinStr_SCNxLEAST64);
        }
    }




    static if(!is(typeof(SCNxLEAST32))) {
        private enum enumMixinStr_SCNxLEAST32 = `enum SCNxLEAST32 = "x";`;
        static if(is(typeof({ mixin(enumMixinStr_SCNxLEAST32); }))) {
            mixin(enumMixinStr_SCNxLEAST32);
        }
    }




    static if(!is(typeof(SCNxLEAST16))) {
        private enum enumMixinStr_SCNxLEAST16 = `enum SCNxLEAST16 = "hx";`;
        static if(is(typeof({ mixin(enumMixinStr_SCNxLEAST16); }))) {
            mixin(enumMixinStr_SCNxLEAST16);
        }
    }




    static if(!is(typeof(SCNxLEAST8))) {
        private enum enumMixinStr_SCNxLEAST8 = `enum SCNxLEAST8 = "hhx";`;
        static if(is(typeof({ mixin(enumMixinStr_SCNxLEAST8); }))) {
            mixin(enumMixinStr_SCNxLEAST8);
        }
    }




    static if(!is(typeof(SCNx64))) {
        private enum enumMixinStr_SCNx64 = `enum SCNx64 = __PRI64_PREFIX "x";`;
        static if(is(typeof({ mixin(enumMixinStr_SCNx64); }))) {
            mixin(enumMixinStr_SCNx64);
        }
    }




    static if(!is(typeof(SCNx32))) {
        private enum enumMixinStr_SCNx32 = `enum SCNx32 = "x";`;
        static if(is(typeof({ mixin(enumMixinStr_SCNx32); }))) {
            mixin(enumMixinStr_SCNx32);
        }
    }




    static if(!is(typeof(SCNx16))) {
        private enum enumMixinStr_SCNx16 = `enum SCNx16 = "hx";`;
        static if(is(typeof({ mixin(enumMixinStr_SCNx16); }))) {
            mixin(enumMixinStr_SCNx16);
        }
    }




    static if(!is(typeof(SCNx8))) {
        private enum enumMixinStr_SCNx8 = `enum SCNx8 = "hhx";`;
        static if(is(typeof({ mixin(enumMixinStr_SCNx8); }))) {
            mixin(enumMixinStr_SCNx8);
        }
    }




    static if(!is(typeof(SCNoFAST64))) {
        private enum enumMixinStr_SCNoFAST64 = `enum SCNoFAST64 = __PRI64_PREFIX "o";`;
        static if(is(typeof({ mixin(enumMixinStr_SCNoFAST64); }))) {
            mixin(enumMixinStr_SCNoFAST64);
        }
    }




    static if(!is(typeof(SCNoFAST32))) {
        private enum enumMixinStr_SCNoFAST32 = `enum SCNoFAST32 = __PRIPTR_PREFIX "o";`;
        static if(is(typeof({ mixin(enumMixinStr_SCNoFAST32); }))) {
            mixin(enumMixinStr_SCNoFAST32);
        }
    }




    static if(!is(typeof(SCNoFAST16))) {
        private enum enumMixinStr_SCNoFAST16 = `enum SCNoFAST16 = __PRIPTR_PREFIX "o";`;
        static if(is(typeof({ mixin(enumMixinStr_SCNoFAST16); }))) {
            mixin(enumMixinStr_SCNoFAST16);
        }
    }




    static if(!is(typeof(SCNoFAST8))) {
        private enum enumMixinStr_SCNoFAST8 = `enum SCNoFAST8 = "hho";`;
        static if(is(typeof({ mixin(enumMixinStr_SCNoFAST8); }))) {
            mixin(enumMixinStr_SCNoFAST8);
        }
    }




    static if(!is(typeof(SCNoLEAST64))) {
        private enum enumMixinStr_SCNoLEAST64 = `enum SCNoLEAST64 = __PRI64_PREFIX "o";`;
        static if(is(typeof({ mixin(enumMixinStr_SCNoLEAST64); }))) {
            mixin(enumMixinStr_SCNoLEAST64);
        }
    }




    static if(!is(typeof(SCNoLEAST32))) {
        private enum enumMixinStr_SCNoLEAST32 = `enum SCNoLEAST32 = "o";`;
        static if(is(typeof({ mixin(enumMixinStr_SCNoLEAST32); }))) {
            mixin(enumMixinStr_SCNoLEAST32);
        }
    }




    static if(!is(typeof(SCNoLEAST16))) {
        private enum enumMixinStr_SCNoLEAST16 = `enum SCNoLEAST16 = "ho";`;
        static if(is(typeof({ mixin(enumMixinStr_SCNoLEAST16); }))) {
            mixin(enumMixinStr_SCNoLEAST16);
        }
    }




    static if(!is(typeof(SCNoLEAST8))) {
        private enum enumMixinStr_SCNoLEAST8 = `enum SCNoLEAST8 = "hho";`;
        static if(is(typeof({ mixin(enumMixinStr_SCNoLEAST8); }))) {
            mixin(enumMixinStr_SCNoLEAST8);
        }
    }




    static if(!is(typeof(SCNo64))) {
        private enum enumMixinStr_SCNo64 = `enum SCNo64 = __PRI64_PREFIX "o";`;
        static if(is(typeof({ mixin(enumMixinStr_SCNo64); }))) {
            mixin(enumMixinStr_SCNo64);
        }
    }




    static if(!is(typeof(SCNo32))) {
        private enum enumMixinStr_SCNo32 = `enum SCNo32 = "o";`;
        static if(is(typeof({ mixin(enumMixinStr_SCNo32); }))) {
            mixin(enumMixinStr_SCNo32);
        }
    }




    static if(!is(typeof(SCNo16))) {
        private enum enumMixinStr_SCNo16 = `enum SCNo16 = "ho";`;
        static if(is(typeof({ mixin(enumMixinStr_SCNo16); }))) {
            mixin(enumMixinStr_SCNo16);
        }
    }




    static if(!is(typeof(SCNo8))) {
        private enum enumMixinStr_SCNo8 = `enum SCNo8 = "hho";`;
        static if(is(typeof({ mixin(enumMixinStr_SCNo8); }))) {
            mixin(enumMixinStr_SCNo8);
        }
    }




    static if(!is(typeof(SCNuFAST64))) {
        private enum enumMixinStr_SCNuFAST64 = `enum SCNuFAST64 = __PRI64_PREFIX "u";`;
        static if(is(typeof({ mixin(enumMixinStr_SCNuFAST64); }))) {
            mixin(enumMixinStr_SCNuFAST64);
        }
    }




    static if(!is(typeof(SCNuFAST32))) {
        private enum enumMixinStr_SCNuFAST32 = `enum SCNuFAST32 = __PRIPTR_PREFIX "u";`;
        static if(is(typeof({ mixin(enumMixinStr_SCNuFAST32); }))) {
            mixin(enumMixinStr_SCNuFAST32);
        }
    }




    static if(!is(typeof(SCNuFAST16))) {
        private enum enumMixinStr_SCNuFAST16 = `enum SCNuFAST16 = __PRIPTR_PREFIX "u";`;
        static if(is(typeof({ mixin(enumMixinStr_SCNuFAST16); }))) {
            mixin(enumMixinStr_SCNuFAST16);
        }
    }




    static if(!is(typeof(SCNuFAST8))) {
        private enum enumMixinStr_SCNuFAST8 = `enum SCNuFAST8 = "hhu";`;
        static if(is(typeof({ mixin(enumMixinStr_SCNuFAST8); }))) {
            mixin(enumMixinStr_SCNuFAST8);
        }
    }




    static if(!is(typeof(SCNuLEAST64))) {
        private enum enumMixinStr_SCNuLEAST64 = `enum SCNuLEAST64 = __PRI64_PREFIX "u";`;
        static if(is(typeof({ mixin(enumMixinStr_SCNuLEAST64); }))) {
            mixin(enumMixinStr_SCNuLEAST64);
        }
    }




    static if(!is(typeof(SCNuLEAST32))) {
        private enum enumMixinStr_SCNuLEAST32 = `enum SCNuLEAST32 = "u";`;
        static if(is(typeof({ mixin(enumMixinStr_SCNuLEAST32); }))) {
            mixin(enumMixinStr_SCNuLEAST32);
        }
    }




    static if(!is(typeof(SCNuLEAST16))) {
        private enum enumMixinStr_SCNuLEAST16 = `enum SCNuLEAST16 = "hu";`;
        static if(is(typeof({ mixin(enumMixinStr_SCNuLEAST16); }))) {
            mixin(enumMixinStr_SCNuLEAST16);
        }
    }




    static if(!is(typeof(SCNuLEAST8))) {
        private enum enumMixinStr_SCNuLEAST8 = `enum SCNuLEAST8 = "hhu";`;
        static if(is(typeof({ mixin(enumMixinStr_SCNuLEAST8); }))) {
            mixin(enumMixinStr_SCNuLEAST8);
        }
    }




    static if(!is(typeof(SCNu64))) {
        private enum enumMixinStr_SCNu64 = `enum SCNu64 = __PRI64_PREFIX "u";`;
        static if(is(typeof({ mixin(enumMixinStr_SCNu64); }))) {
            mixin(enumMixinStr_SCNu64);
        }
    }




    static if(!is(typeof(SCNu32))) {
        private enum enumMixinStr_SCNu32 = `enum SCNu32 = "u";`;
        static if(is(typeof({ mixin(enumMixinStr_SCNu32); }))) {
            mixin(enumMixinStr_SCNu32);
        }
    }






    static if(!is(typeof(SCNu16))) {
        private enum enumMixinStr_SCNu16 = `enum SCNu16 = "hu";`;
        static if(is(typeof({ mixin(enumMixinStr_SCNu16); }))) {
            mixin(enumMixinStr_SCNu16);
        }
    }




    static if(!is(typeof(SCNu8))) {
        private enum enumMixinStr_SCNu8 = `enum SCNu8 = "hhu";`;
        static if(is(typeof({ mixin(enumMixinStr_SCNu8); }))) {
            mixin(enumMixinStr_SCNu8);
        }
    }




    static if(!is(typeof(SCNiFAST64))) {
        private enum enumMixinStr_SCNiFAST64 = `enum SCNiFAST64 = __PRI64_PREFIX "i";`;
        static if(is(typeof({ mixin(enumMixinStr_SCNiFAST64); }))) {
            mixin(enumMixinStr_SCNiFAST64);
        }
    }




    static if(!is(typeof(SCNiFAST32))) {
        private enum enumMixinStr_SCNiFAST32 = `enum SCNiFAST32 = __PRIPTR_PREFIX "i";`;
        static if(is(typeof({ mixin(enumMixinStr_SCNiFAST32); }))) {
            mixin(enumMixinStr_SCNiFAST32);
        }
    }




    static if(!is(typeof(SCNiFAST16))) {
        private enum enumMixinStr_SCNiFAST16 = `enum SCNiFAST16 = __PRIPTR_PREFIX "i";`;
        static if(is(typeof({ mixin(enumMixinStr_SCNiFAST16); }))) {
            mixin(enumMixinStr_SCNiFAST16);
        }
    }




    static if(!is(typeof(SCNiFAST8))) {
        private enum enumMixinStr_SCNiFAST8 = `enum SCNiFAST8 = "hhi";`;
        static if(is(typeof({ mixin(enumMixinStr_SCNiFAST8); }))) {
            mixin(enumMixinStr_SCNiFAST8);
        }
    }




    static if(!is(typeof(SCNiLEAST64))) {
        private enum enumMixinStr_SCNiLEAST64 = `enum SCNiLEAST64 = __PRI64_PREFIX "i";`;
        static if(is(typeof({ mixin(enumMixinStr_SCNiLEAST64); }))) {
            mixin(enumMixinStr_SCNiLEAST64);
        }
    }




    static if(!is(typeof(SCNiLEAST32))) {
        private enum enumMixinStr_SCNiLEAST32 = `enum SCNiLEAST32 = "i";`;
        static if(is(typeof({ mixin(enumMixinStr_SCNiLEAST32); }))) {
            mixin(enumMixinStr_SCNiLEAST32);
        }
    }




    static if(!is(typeof(SCNiLEAST16))) {
        private enum enumMixinStr_SCNiLEAST16 = `enum SCNiLEAST16 = "hi";`;
        static if(is(typeof({ mixin(enumMixinStr_SCNiLEAST16); }))) {
            mixin(enumMixinStr_SCNiLEAST16);
        }
    }




    static if(!is(typeof(SCNiLEAST8))) {
        private enum enumMixinStr_SCNiLEAST8 = `enum SCNiLEAST8 = "hhi";`;
        static if(is(typeof({ mixin(enumMixinStr_SCNiLEAST8); }))) {
            mixin(enumMixinStr_SCNiLEAST8);
        }
    }




    static if(!is(typeof(SCNi64))) {
        private enum enumMixinStr_SCNi64 = `enum SCNi64 = __PRI64_PREFIX "i";`;
        static if(is(typeof({ mixin(enumMixinStr_SCNi64); }))) {
            mixin(enumMixinStr_SCNi64);
        }
    }




    static if(!is(typeof(SCNi32))) {
        private enum enumMixinStr_SCNi32 = `enum SCNi32 = "i";`;
        static if(is(typeof({ mixin(enumMixinStr_SCNi32); }))) {
            mixin(enumMixinStr_SCNi32);
        }
    }




    static if(!is(typeof(SCNi16))) {
        private enum enumMixinStr_SCNi16 = `enum SCNi16 = "hi";`;
        static if(is(typeof({ mixin(enumMixinStr_SCNi16); }))) {
            mixin(enumMixinStr_SCNi16);
        }
    }




    static if(!is(typeof(SCNi8))) {
        private enum enumMixinStr_SCNi8 = `enum SCNi8 = "hhi";`;
        static if(is(typeof({ mixin(enumMixinStr_SCNi8); }))) {
            mixin(enumMixinStr_SCNi8);
        }
    }




    static if(!is(typeof(SCNdFAST64))) {
        private enum enumMixinStr_SCNdFAST64 = `enum SCNdFAST64 = __PRI64_PREFIX "d";`;
        static if(is(typeof({ mixin(enumMixinStr_SCNdFAST64); }))) {
            mixin(enumMixinStr_SCNdFAST64);
        }
    }




    static if(!is(typeof(SCNdFAST32))) {
        private enum enumMixinStr_SCNdFAST32 = `enum SCNdFAST32 = __PRIPTR_PREFIX "d";`;
        static if(is(typeof({ mixin(enumMixinStr_SCNdFAST32); }))) {
            mixin(enumMixinStr_SCNdFAST32);
        }
    }




    static if(!is(typeof(SCNdFAST16))) {
        private enum enumMixinStr_SCNdFAST16 = `enum SCNdFAST16 = __PRIPTR_PREFIX "d";`;
        static if(is(typeof({ mixin(enumMixinStr_SCNdFAST16); }))) {
            mixin(enumMixinStr_SCNdFAST16);
        }
    }




    static if(!is(typeof(SCNdFAST8))) {
        private enum enumMixinStr_SCNdFAST8 = `enum SCNdFAST8 = "hhd";`;
        static if(is(typeof({ mixin(enumMixinStr_SCNdFAST8); }))) {
            mixin(enumMixinStr_SCNdFAST8);
        }
    }




    static if(!is(typeof(SCNdLEAST64))) {
        private enum enumMixinStr_SCNdLEAST64 = `enum SCNdLEAST64 = __PRI64_PREFIX "d";`;
        static if(is(typeof({ mixin(enumMixinStr_SCNdLEAST64); }))) {
            mixin(enumMixinStr_SCNdLEAST64);
        }
    }




    static if(!is(typeof(SCNdLEAST32))) {
        private enum enumMixinStr_SCNdLEAST32 = `enum SCNdLEAST32 = "d";`;
        static if(is(typeof({ mixin(enumMixinStr_SCNdLEAST32); }))) {
            mixin(enumMixinStr_SCNdLEAST32);
        }
    }




    static if(!is(typeof(SCNdLEAST16))) {
        private enum enumMixinStr_SCNdLEAST16 = `enum SCNdLEAST16 = "hd";`;
        static if(is(typeof({ mixin(enumMixinStr_SCNdLEAST16); }))) {
            mixin(enumMixinStr_SCNdLEAST16);
        }
    }




    static if(!is(typeof(SCNdLEAST8))) {
        private enum enumMixinStr_SCNdLEAST8 = `enum SCNdLEAST8 = "hhd";`;
        static if(is(typeof({ mixin(enumMixinStr_SCNdLEAST8); }))) {
            mixin(enumMixinStr_SCNdLEAST8);
        }
    }




    static if(!is(typeof(SCNd64))) {
        private enum enumMixinStr_SCNd64 = `enum SCNd64 = __PRI64_PREFIX "d";`;
        static if(is(typeof({ mixin(enumMixinStr_SCNd64); }))) {
            mixin(enumMixinStr_SCNd64);
        }
    }




    static if(!is(typeof(SCNd32))) {
        private enum enumMixinStr_SCNd32 = `enum SCNd32 = "d";`;
        static if(is(typeof({ mixin(enumMixinStr_SCNd32); }))) {
            mixin(enumMixinStr_SCNd32);
        }
    }




    static if(!is(typeof(SCNd16))) {
        private enum enumMixinStr_SCNd16 = `enum SCNd16 = "hd";`;
        static if(is(typeof({ mixin(enumMixinStr_SCNd16); }))) {
            mixin(enumMixinStr_SCNd16);
        }
    }




    static if(!is(typeof(SCNd8))) {
        private enum enumMixinStr_SCNd8 = `enum SCNd8 = "hhd";`;
        static if(is(typeof({ mixin(enumMixinStr_SCNd8); }))) {
            mixin(enumMixinStr_SCNd8);
        }
    }




    static if(!is(typeof(PRIXPTR))) {
        private enum enumMixinStr_PRIXPTR = `enum PRIXPTR = __PRIPTR_PREFIX "X";`;
        static if(is(typeof({ mixin(enumMixinStr_PRIXPTR); }))) {
            mixin(enumMixinStr_PRIXPTR);
        }
    }




    static if(!is(typeof(PRIxPTR))) {
        private enum enumMixinStr_PRIxPTR = `enum PRIxPTR = __PRIPTR_PREFIX "x";`;
        static if(is(typeof({ mixin(enumMixinStr_PRIxPTR); }))) {
            mixin(enumMixinStr_PRIxPTR);
        }
    }




    static if(!is(typeof(PRIuPTR))) {
        private enum enumMixinStr_PRIuPTR = `enum PRIuPTR = __PRIPTR_PREFIX "u";`;
        static if(is(typeof({ mixin(enumMixinStr_PRIuPTR); }))) {
            mixin(enumMixinStr_PRIuPTR);
        }
    }




    static if(!is(typeof(PRIoPTR))) {
        private enum enumMixinStr_PRIoPTR = `enum PRIoPTR = __PRIPTR_PREFIX "o";`;
        static if(is(typeof({ mixin(enumMixinStr_PRIoPTR); }))) {
            mixin(enumMixinStr_PRIoPTR);
        }
    }




    static if(!is(typeof(PRIiPTR))) {
        private enum enumMixinStr_PRIiPTR = `enum PRIiPTR = __PRIPTR_PREFIX "i";`;
        static if(is(typeof({ mixin(enumMixinStr_PRIiPTR); }))) {
            mixin(enumMixinStr_PRIiPTR);
        }
    }




    static if(!is(typeof(PRIdPTR))) {
        private enum enumMixinStr_PRIdPTR = `enum PRIdPTR = __PRIPTR_PREFIX "d";`;
        static if(is(typeof({ mixin(enumMixinStr_PRIdPTR); }))) {
            mixin(enumMixinStr_PRIdPTR);
        }
    }




    static if(!is(typeof(PRIXMAX))) {
        private enum enumMixinStr_PRIXMAX = `enum PRIXMAX = __PRI64_PREFIX "X";`;
        static if(is(typeof({ mixin(enumMixinStr_PRIXMAX); }))) {
            mixin(enumMixinStr_PRIXMAX);
        }
    }




    static if(!is(typeof(PRIxMAX))) {
        private enum enumMixinStr_PRIxMAX = `enum PRIxMAX = __PRI64_PREFIX "x";`;
        static if(is(typeof({ mixin(enumMixinStr_PRIxMAX); }))) {
            mixin(enumMixinStr_PRIxMAX);
        }
    }




    static if(!is(typeof(PRIuMAX))) {
        private enum enumMixinStr_PRIuMAX = `enum PRIuMAX = __PRI64_PREFIX "u";`;
        static if(is(typeof({ mixin(enumMixinStr_PRIuMAX); }))) {
            mixin(enumMixinStr_PRIuMAX);
        }
    }




    static if(!is(typeof(PRIoMAX))) {
        private enum enumMixinStr_PRIoMAX = `enum PRIoMAX = __PRI64_PREFIX "o";`;
        static if(is(typeof({ mixin(enumMixinStr_PRIoMAX); }))) {
            mixin(enumMixinStr_PRIoMAX);
        }
    }




    static if(!is(typeof(PRIiMAX))) {
        private enum enumMixinStr_PRIiMAX = `enum PRIiMAX = __PRI64_PREFIX "i";`;
        static if(is(typeof({ mixin(enumMixinStr_PRIiMAX); }))) {
            mixin(enumMixinStr_PRIiMAX);
        }
    }




    static if(!is(typeof(PRIdMAX))) {
        private enum enumMixinStr_PRIdMAX = `enum PRIdMAX = __PRI64_PREFIX "d";`;
        static if(is(typeof({ mixin(enumMixinStr_PRIdMAX); }))) {
            mixin(enumMixinStr_PRIdMAX);
        }
    }




    static if(!is(typeof(PRIXFAST64))) {
        private enum enumMixinStr_PRIXFAST64 = `enum PRIXFAST64 = __PRI64_PREFIX "X";`;
        static if(is(typeof({ mixin(enumMixinStr_PRIXFAST64); }))) {
            mixin(enumMixinStr_PRIXFAST64);
        }
    }




    static if(!is(typeof(PRIXFAST32))) {
        private enum enumMixinStr_PRIXFAST32 = `enum PRIXFAST32 = __PRIPTR_PREFIX "X";`;
        static if(is(typeof({ mixin(enumMixinStr_PRIXFAST32); }))) {
            mixin(enumMixinStr_PRIXFAST32);
        }
    }






    static if(!is(typeof(PRIXFAST16))) {
        private enum enumMixinStr_PRIXFAST16 = `enum PRIXFAST16 = __PRIPTR_PREFIX "X";`;
        static if(is(typeof({ mixin(enumMixinStr_PRIXFAST16); }))) {
            mixin(enumMixinStr_PRIXFAST16);
        }
    }




    static if(!is(typeof(PRIXFAST8))) {
        private enum enumMixinStr_PRIXFAST8 = `enum PRIXFAST8 = "X";`;
        static if(is(typeof({ mixin(enumMixinStr_PRIXFAST8); }))) {
            mixin(enumMixinStr_PRIXFAST8);
        }
    }




    static if(!is(typeof(PRIXLEAST64))) {
        private enum enumMixinStr_PRIXLEAST64 = `enum PRIXLEAST64 = __PRI64_PREFIX "X";`;
        static if(is(typeof({ mixin(enumMixinStr_PRIXLEAST64); }))) {
            mixin(enumMixinStr_PRIXLEAST64);
        }
    }




    static if(!is(typeof(PRIXLEAST32))) {
        private enum enumMixinStr_PRIXLEAST32 = `enum PRIXLEAST32 = "X";`;
        static if(is(typeof({ mixin(enumMixinStr_PRIXLEAST32); }))) {
            mixin(enumMixinStr_PRIXLEAST32);
        }
    }




    static if(!is(typeof(PRIXLEAST16))) {
        private enum enumMixinStr_PRIXLEAST16 = `enum PRIXLEAST16 = "X";`;
        static if(is(typeof({ mixin(enumMixinStr_PRIXLEAST16); }))) {
            mixin(enumMixinStr_PRIXLEAST16);
        }
    }




    static if(!is(typeof(PRIXLEAST8))) {
        private enum enumMixinStr_PRIXLEAST8 = `enum PRIXLEAST8 = "X";`;
        static if(is(typeof({ mixin(enumMixinStr_PRIXLEAST8); }))) {
            mixin(enumMixinStr_PRIXLEAST8);
        }
    }




    static if(!is(typeof(PRIX64))) {
        private enum enumMixinStr_PRIX64 = `enum PRIX64 = __PRI64_PREFIX "X";`;
        static if(is(typeof({ mixin(enumMixinStr_PRIX64); }))) {
            mixin(enumMixinStr_PRIX64);
        }
    }




    static if(!is(typeof(PRIX32))) {
        private enum enumMixinStr_PRIX32 = `enum PRIX32 = "X";`;
        static if(is(typeof({ mixin(enumMixinStr_PRIX32); }))) {
            mixin(enumMixinStr_PRIX32);
        }
    }




    static if(!is(typeof(PRIX16))) {
        private enum enumMixinStr_PRIX16 = `enum PRIX16 = "X";`;
        static if(is(typeof({ mixin(enumMixinStr_PRIX16); }))) {
            mixin(enumMixinStr_PRIX16);
        }
    }




    static if(!is(typeof(PRIX8))) {
        private enum enumMixinStr_PRIX8 = `enum PRIX8 = "X";`;
        static if(is(typeof({ mixin(enumMixinStr_PRIX8); }))) {
            mixin(enumMixinStr_PRIX8);
        }
    }




    static if(!is(typeof(PRIxFAST64))) {
        private enum enumMixinStr_PRIxFAST64 = `enum PRIxFAST64 = __PRI64_PREFIX "x";`;
        static if(is(typeof({ mixin(enumMixinStr_PRIxFAST64); }))) {
            mixin(enumMixinStr_PRIxFAST64);
        }
    }




    static if(!is(typeof(PRIxFAST32))) {
        private enum enumMixinStr_PRIxFAST32 = `enum PRIxFAST32 = __PRIPTR_PREFIX "x";`;
        static if(is(typeof({ mixin(enumMixinStr_PRIxFAST32); }))) {
            mixin(enumMixinStr_PRIxFAST32);
        }
    }




    static if(!is(typeof(PRIxFAST16))) {
        private enum enumMixinStr_PRIxFAST16 = `enum PRIxFAST16 = __PRIPTR_PREFIX "x";`;
        static if(is(typeof({ mixin(enumMixinStr_PRIxFAST16); }))) {
            mixin(enumMixinStr_PRIxFAST16);
        }
    }




    static if(!is(typeof(PRIxFAST8))) {
        private enum enumMixinStr_PRIxFAST8 = `enum PRIxFAST8 = "x";`;
        static if(is(typeof({ mixin(enumMixinStr_PRIxFAST8); }))) {
            mixin(enumMixinStr_PRIxFAST8);
        }
    }




    static if(!is(typeof(PRIxLEAST64))) {
        private enum enumMixinStr_PRIxLEAST64 = `enum PRIxLEAST64 = __PRI64_PREFIX "x";`;
        static if(is(typeof({ mixin(enumMixinStr_PRIxLEAST64); }))) {
            mixin(enumMixinStr_PRIxLEAST64);
        }
    }




    static if(!is(typeof(PRIxLEAST32))) {
        private enum enumMixinStr_PRIxLEAST32 = `enum PRIxLEAST32 = "x";`;
        static if(is(typeof({ mixin(enumMixinStr_PRIxLEAST32); }))) {
            mixin(enumMixinStr_PRIxLEAST32);
        }
    }




    static if(!is(typeof(PRIxLEAST16))) {
        private enum enumMixinStr_PRIxLEAST16 = `enum PRIxLEAST16 = "x";`;
        static if(is(typeof({ mixin(enumMixinStr_PRIxLEAST16); }))) {
            mixin(enumMixinStr_PRIxLEAST16);
        }
    }




    static if(!is(typeof(PRIxLEAST8))) {
        private enum enumMixinStr_PRIxLEAST8 = `enum PRIxLEAST8 = "x";`;
        static if(is(typeof({ mixin(enumMixinStr_PRIxLEAST8); }))) {
            mixin(enumMixinStr_PRIxLEAST8);
        }
    }




    static if(!is(typeof(PRIx64))) {
        private enum enumMixinStr_PRIx64 = `enum PRIx64 = __PRI64_PREFIX "x";`;
        static if(is(typeof({ mixin(enumMixinStr_PRIx64); }))) {
            mixin(enumMixinStr_PRIx64);
        }
    }




    static if(!is(typeof(PRIx32))) {
        private enum enumMixinStr_PRIx32 = `enum PRIx32 = "x";`;
        static if(is(typeof({ mixin(enumMixinStr_PRIx32); }))) {
            mixin(enumMixinStr_PRIx32);
        }
    }




    static if(!is(typeof(PRIx16))) {
        private enum enumMixinStr_PRIx16 = `enum PRIx16 = "x";`;
        static if(is(typeof({ mixin(enumMixinStr_PRIx16); }))) {
            mixin(enumMixinStr_PRIx16);
        }
    }




    static if(!is(typeof(PRIx8))) {
        private enum enumMixinStr_PRIx8 = `enum PRIx8 = "x";`;
        static if(is(typeof({ mixin(enumMixinStr_PRIx8); }))) {
            mixin(enumMixinStr_PRIx8);
        }
    }




    static if(!is(typeof(PRIuFAST64))) {
        private enum enumMixinStr_PRIuFAST64 = `enum PRIuFAST64 = __PRI64_PREFIX "u";`;
        static if(is(typeof({ mixin(enumMixinStr_PRIuFAST64); }))) {
            mixin(enumMixinStr_PRIuFAST64);
        }
    }




    static if(!is(typeof(PRIuFAST32))) {
        private enum enumMixinStr_PRIuFAST32 = `enum PRIuFAST32 = __PRIPTR_PREFIX "u";`;
        static if(is(typeof({ mixin(enumMixinStr_PRIuFAST32); }))) {
            mixin(enumMixinStr_PRIuFAST32);
        }
    }




    static if(!is(typeof(PRIuFAST16))) {
        private enum enumMixinStr_PRIuFAST16 = `enum PRIuFAST16 = __PRIPTR_PREFIX "u";`;
        static if(is(typeof({ mixin(enumMixinStr_PRIuFAST16); }))) {
            mixin(enumMixinStr_PRIuFAST16);
        }
    }




    static if(!is(typeof(PRIuFAST8))) {
        private enum enumMixinStr_PRIuFAST8 = `enum PRIuFAST8 = "u";`;
        static if(is(typeof({ mixin(enumMixinStr_PRIuFAST8); }))) {
            mixin(enumMixinStr_PRIuFAST8);
        }
    }




    static if(!is(typeof(PRIuLEAST64))) {
        private enum enumMixinStr_PRIuLEAST64 = `enum PRIuLEAST64 = __PRI64_PREFIX "u";`;
        static if(is(typeof({ mixin(enumMixinStr_PRIuLEAST64); }))) {
            mixin(enumMixinStr_PRIuLEAST64);
        }
    }




    static if(!is(typeof(PRIuLEAST32))) {
        private enum enumMixinStr_PRIuLEAST32 = `enum PRIuLEAST32 = "u";`;
        static if(is(typeof({ mixin(enumMixinStr_PRIuLEAST32); }))) {
            mixin(enumMixinStr_PRIuLEAST32);
        }
    }




    static if(!is(typeof(PRIuLEAST16))) {
        private enum enumMixinStr_PRIuLEAST16 = `enum PRIuLEAST16 = "u";`;
        static if(is(typeof({ mixin(enumMixinStr_PRIuLEAST16); }))) {
            mixin(enumMixinStr_PRIuLEAST16);
        }
    }




    static if(!is(typeof(PRIuLEAST8))) {
        private enum enumMixinStr_PRIuLEAST8 = `enum PRIuLEAST8 = "u";`;
        static if(is(typeof({ mixin(enumMixinStr_PRIuLEAST8); }))) {
            mixin(enumMixinStr_PRIuLEAST8);
        }
    }




    static if(!is(typeof(PRIu64))) {
        private enum enumMixinStr_PRIu64 = `enum PRIu64 = __PRI64_PREFIX "u";`;
        static if(is(typeof({ mixin(enumMixinStr_PRIu64); }))) {
            mixin(enumMixinStr_PRIu64);
        }
    }




    static if(!is(typeof(PRIu32))) {
        private enum enumMixinStr_PRIu32 = `enum PRIu32 = "u";`;
        static if(is(typeof({ mixin(enumMixinStr_PRIu32); }))) {
            mixin(enumMixinStr_PRIu32);
        }
    }




    static if(!is(typeof(PRIu16))) {
        private enum enumMixinStr_PRIu16 = `enum PRIu16 = "u";`;
        static if(is(typeof({ mixin(enumMixinStr_PRIu16); }))) {
            mixin(enumMixinStr_PRIu16);
        }
    }




    static if(!is(typeof(PRIu8))) {
        private enum enumMixinStr_PRIu8 = `enum PRIu8 = "u";`;
        static if(is(typeof({ mixin(enumMixinStr_PRIu8); }))) {
            mixin(enumMixinStr_PRIu8);
        }
    }




    static if(!is(typeof(PRIoFAST64))) {
        private enum enumMixinStr_PRIoFAST64 = `enum PRIoFAST64 = __PRI64_PREFIX "o";`;
        static if(is(typeof({ mixin(enumMixinStr_PRIoFAST64); }))) {
            mixin(enumMixinStr_PRIoFAST64);
        }
    }




    static if(!is(typeof(PRIoFAST32))) {
        private enum enumMixinStr_PRIoFAST32 = `enum PRIoFAST32 = __PRIPTR_PREFIX "o";`;
        static if(is(typeof({ mixin(enumMixinStr_PRIoFAST32); }))) {
            mixin(enumMixinStr_PRIoFAST32);
        }
    }




    static if(!is(typeof(PRIoFAST16))) {
        private enum enumMixinStr_PRIoFAST16 = `enum PRIoFAST16 = __PRIPTR_PREFIX "o";`;
        static if(is(typeof({ mixin(enumMixinStr_PRIoFAST16); }))) {
            mixin(enumMixinStr_PRIoFAST16);
        }
    }




    static if(!is(typeof(PRIoFAST8))) {
        private enum enumMixinStr_PRIoFAST8 = `enum PRIoFAST8 = "o";`;
        static if(is(typeof({ mixin(enumMixinStr_PRIoFAST8); }))) {
            mixin(enumMixinStr_PRIoFAST8);
        }
    }




    static if(!is(typeof(PRIoLEAST64))) {
        private enum enumMixinStr_PRIoLEAST64 = `enum PRIoLEAST64 = __PRI64_PREFIX "o";`;
        static if(is(typeof({ mixin(enumMixinStr_PRIoLEAST64); }))) {
            mixin(enumMixinStr_PRIoLEAST64);
        }
    }




    static if(!is(typeof(PRIoLEAST32))) {
        private enum enumMixinStr_PRIoLEAST32 = `enum PRIoLEAST32 = "o";`;
        static if(is(typeof({ mixin(enumMixinStr_PRIoLEAST32); }))) {
            mixin(enumMixinStr_PRIoLEAST32);
        }
    }






    static if(!is(typeof(PRIoLEAST16))) {
        private enum enumMixinStr_PRIoLEAST16 = `enum PRIoLEAST16 = "o";`;
        static if(is(typeof({ mixin(enumMixinStr_PRIoLEAST16); }))) {
            mixin(enumMixinStr_PRIoLEAST16);
        }
    }




    static if(!is(typeof(PRIoLEAST8))) {
        private enum enumMixinStr_PRIoLEAST8 = `enum PRIoLEAST8 = "o";`;
        static if(is(typeof({ mixin(enumMixinStr_PRIoLEAST8); }))) {
            mixin(enumMixinStr_PRIoLEAST8);
        }
    }




    static if(!is(typeof(PRIo64))) {
        private enum enumMixinStr_PRIo64 = `enum PRIo64 = __PRI64_PREFIX "o";`;
        static if(is(typeof({ mixin(enumMixinStr_PRIo64); }))) {
            mixin(enumMixinStr_PRIo64);
        }
    }




    static if(!is(typeof(PRIo32))) {
        private enum enumMixinStr_PRIo32 = `enum PRIo32 = "o";`;
        static if(is(typeof({ mixin(enumMixinStr_PRIo32); }))) {
            mixin(enumMixinStr_PRIo32);
        }
    }




    static if(!is(typeof(PRIo16))) {
        private enum enumMixinStr_PRIo16 = `enum PRIo16 = "o";`;
        static if(is(typeof({ mixin(enumMixinStr_PRIo16); }))) {
            mixin(enumMixinStr_PRIo16);
        }
    }




    static if(!is(typeof(PRIo8))) {
        private enum enumMixinStr_PRIo8 = `enum PRIo8 = "o";`;
        static if(is(typeof({ mixin(enumMixinStr_PRIo8); }))) {
            mixin(enumMixinStr_PRIo8);
        }
    }




    static if(!is(typeof(PRIiFAST64))) {
        private enum enumMixinStr_PRIiFAST64 = `enum PRIiFAST64 = __PRI64_PREFIX "i";`;
        static if(is(typeof({ mixin(enumMixinStr_PRIiFAST64); }))) {
            mixin(enumMixinStr_PRIiFAST64);
        }
    }




    static if(!is(typeof(PRIiFAST32))) {
        private enum enumMixinStr_PRIiFAST32 = `enum PRIiFAST32 = __PRIPTR_PREFIX "i";`;
        static if(is(typeof({ mixin(enumMixinStr_PRIiFAST32); }))) {
            mixin(enumMixinStr_PRIiFAST32);
        }
    }




    static if(!is(typeof(PRIiFAST16))) {
        private enum enumMixinStr_PRIiFAST16 = `enum PRIiFAST16 = __PRIPTR_PREFIX "i";`;
        static if(is(typeof({ mixin(enumMixinStr_PRIiFAST16); }))) {
            mixin(enumMixinStr_PRIiFAST16);
        }
    }




    static if(!is(typeof(PRIiFAST8))) {
        private enum enumMixinStr_PRIiFAST8 = `enum PRIiFAST8 = "i";`;
        static if(is(typeof({ mixin(enumMixinStr_PRIiFAST8); }))) {
            mixin(enumMixinStr_PRIiFAST8);
        }
    }




    static if(!is(typeof(PRIiLEAST64))) {
        private enum enumMixinStr_PRIiLEAST64 = `enum PRIiLEAST64 = __PRI64_PREFIX "i";`;
        static if(is(typeof({ mixin(enumMixinStr_PRIiLEAST64); }))) {
            mixin(enumMixinStr_PRIiLEAST64);
        }
    }




    static if(!is(typeof(PRIiLEAST32))) {
        private enum enumMixinStr_PRIiLEAST32 = `enum PRIiLEAST32 = "i";`;
        static if(is(typeof({ mixin(enumMixinStr_PRIiLEAST32); }))) {
            mixin(enumMixinStr_PRIiLEAST32);
        }
    }




    static if(!is(typeof(PRIiLEAST16))) {
        private enum enumMixinStr_PRIiLEAST16 = `enum PRIiLEAST16 = "i";`;
        static if(is(typeof({ mixin(enumMixinStr_PRIiLEAST16); }))) {
            mixin(enumMixinStr_PRIiLEAST16);
        }
    }




    static if(!is(typeof(PRIiLEAST8))) {
        private enum enumMixinStr_PRIiLEAST8 = `enum PRIiLEAST8 = "i";`;
        static if(is(typeof({ mixin(enumMixinStr_PRIiLEAST8); }))) {
            mixin(enumMixinStr_PRIiLEAST8);
        }
    }




    static if(!is(typeof(PRIi64))) {
        private enum enumMixinStr_PRIi64 = `enum PRIi64 = __PRI64_PREFIX "i";`;
        static if(is(typeof({ mixin(enumMixinStr_PRIi64); }))) {
            mixin(enumMixinStr_PRIi64);
        }
    }




    static if(!is(typeof(PRIi32))) {
        private enum enumMixinStr_PRIi32 = `enum PRIi32 = "i";`;
        static if(is(typeof({ mixin(enumMixinStr_PRIi32); }))) {
            mixin(enumMixinStr_PRIi32);
        }
    }




    static if(!is(typeof(PRIi16))) {
        private enum enumMixinStr_PRIi16 = `enum PRIi16 = "i";`;
        static if(is(typeof({ mixin(enumMixinStr_PRIi16); }))) {
            mixin(enumMixinStr_PRIi16);
        }
    }




    static if(!is(typeof(PRIi8))) {
        private enum enumMixinStr_PRIi8 = `enum PRIi8 = "i";`;
        static if(is(typeof({ mixin(enumMixinStr_PRIi8); }))) {
            mixin(enumMixinStr_PRIi8);
        }
    }




    static if(!is(typeof(PRIdFAST64))) {
        private enum enumMixinStr_PRIdFAST64 = `enum PRIdFAST64 = __PRI64_PREFIX "d";`;
        static if(is(typeof({ mixin(enumMixinStr_PRIdFAST64); }))) {
            mixin(enumMixinStr_PRIdFAST64);
        }
    }




    static if(!is(typeof(PRIdFAST32))) {
        private enum enumMixinStr_PRIdFAST32 = `enum PRIdFAST32 = __PRIPTR_PREFIX "d";`;
        static if(is(typeof({ mixin(enumMixinStr_PRIdFAST32); }))) {
            mixin(enumMixinStr_PRIdFAST32);
        }
    }




    static if(!is(typeof(PRIdFAST16))) {
        private enum enumMixinStr_PRIdFAST16 = `enum PRIdFAST16 = __PRIPTR_PREFIX "d";`;
        static if(is(typeof({ mixin(enumMixinStr_PRIdFAST16); }))) {
            mixin(enumMixinStr_PRIdFAST16);
        }
    }




    static if(!is(typeof(PRIdFAST8))) {
        private enum enumMixinStr_PRIdFAST8 = `enum PRIdFAST8 = "d";`;
        static if(is(typeof({ mixin(enumMixinStr_PRIdFAST8); }))) {
            mixin(enumMixinStr_PRIdFAST8);
        }
    }




    static if(!is(typeof(PRIdLEAST64))) {
        private enum enumMixinStr_PRIdLEAST64 = `enum PRIdLEAST64 = __PRI64_PREFIX "d";`;
        static if(is(typeof({ mixin(enumMixinStr_PRIdLEAST64); }))) {
            mixin(enumMixinStr_PRIdLEAST64);
        }
    }




    static if(!is(typeof(PRIdLEAST32))) {
        private enum enumMixinStr_PRIdLEAST32 = `enum PRIdLEAST32 = "d";`;
        static if(is(typeof({ mixin(enumMixinStr_PRIdLEAST32); }))) {
            mixin(enumMixinStr_PRIdLEAST32);
        }
    }




    static if(!is(typeof(PRIdLEAST16))) {
        private enum enumMixinStr_PRIdLEAST16 = `enum PRIdLEAST16 = "d";`;
        static if(is(typeof({ mixin(enumMixinStr_PRIdLEAST16); }))) {
            mixin(enumMixinStr_PRIdLEAST16);
        }
    }




    static if(!is(typeof(PRIdLEAST8))) {
        private enum enumMixinStr_PRIdLEAST8 = `enum PRIdLEAST8 = "d";`;
        static if(is(typeof({ mixin(enumMixinStr_PRIdLEAST8); }))) {
            mixin(enumMixinStr_PRIdLEAST8);
        }
    }




    static if(!is(typeof(PRId64))) {
        private enum enumMixinStr_PRId64 = `enum PRId64 = __PRI64_PREFIX "d";`;
        static if(is(typeof({ mixin(enumMixinStr_PRId64); }))) {
            mixin(enumMixinStr_PRId64);
        }
    }




    static if(!is(typeof(PRId32))) {
        private enum enumMixinStr_PRId32 = `enum PRId32 = "d";`;
        static if(is(typeof({ mixin(enumMixinStr_PRId32); }))) {
            mixin(enumMixinStr_PRId32);
        }
    }




    static if(!is(typeof(PRId16))) {
        private enum enumMixinStr_PRId16 = `enum PRId16 = "d";`;
        static if(is(typeof({ mixin(enumMixinStr_PRId16); }))) {
            mixin(enumMixinStr_PRId16);
        }
    }




    static if(!is(typeof(PRId8))) {
        private enum enumMixinStr_PRId8 = `enum PRId8 = "d";`;
        static if(is(typeof({ mixin(enumMixinStr_PRId8); }))) {
            mixin(enumMixinStr_PRId8);
        }
    }




    static if(!is(typeof(__PRIPTR_PREFIX))) {
        private enum enumMixinStr___PRIPTR_PREFIX = `enum __PRIPTR_PREFIX = "l";`;
        static if(is(typeof({ mixin(enumMixinStr___PRIPTR_PREFIX); }))) {
            mixin(enumMixinStr___PRIPTR_PREFIX);
        }
    }




    static if(!is(typeof(__PRI64_PREFIX))) {
        private enum enumMixinStr___PRI64_PREFIX = `enum __PRI64_PREFIX = "l";`;
        static if(is(typeof({ mixin(enumMixinStr___PRI64_PREFIX); }))) {
            mixin(enumMixinStr___PRI64_PREFIX);
        }
    }




    static if(!is(typeof(____gwchar_t_defined))) {
        private enum enumMixinStr_____gwchar_t_defined = `enum ____gwchar_t_defined = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_____gwchar_t_defined); }))) {
            mixin(enumMixinStr_____gwchar_t_defined);
        }
    }




    static if(!is(typeof(_INTTYPES_H))) {
        private enum enumMixinStr__INTTYPES_H = `enum _INTTYPES_H = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__INTTYPES_H); }))) {
            mixin(enumMixinStr__INTTYPES_H);
        }
    }
    static if(!is(typeof(__GLIBC_MINOR__))) {
        private enum enumMixinStr___GLIBC_MINOR__ = `enum __GLIBC_MINOR__ = 33;`;
        static if(is(typeof({ mixin(enumMixinStr___GLIBC_MINOR__); }))) {
            mixin(enumMixinStr___GLIBC_MINOR__);
        }
    }




    static if(!is(typeof(__GLIBC__))) {
        private enum enumMixinStr___GLIBC__ = `enum __GLIBC__ = 2;`;
        static if(is(typeof({ mixin(enumMixinStr___GLIBC__); }))) {
            mixin(enumMixinStr___GLIBC__);
        }
    }




    static if(!is(typeof(__GNU_LIBRARY__))) {
        private enum enumMixinStr___GNU_LIBRARY__ = `enum __GNU_LIBRARY__ = 6;`;
        static if(is(typeof({ mixin(enumMixinStr___GNU_LIBRARY__); }))) {
            mixin(enumMixinStr___GNU_LIBRARY__);
        }
    }




    static if(!is(typeof(__GLIBC_USE_DEPRECATED_SCANF))) {
        private enum enumMixinStr___GLIBC_USE_DEPRECATED_SCANF = `enum __GLIBC_USE_DEPRECATED_SCANF = 0;`;
        static if(is(typeof({ mixin(enumMixinStr___GLIBC_USE_DEPRECATED_SCANF); }))) {
            mixin(enumMixinStr___GLIBC_USE_DEPRECATED_SCANF);
        }
    }




    static if(!is(typeof(__GLIBC_USE_DEPRECATED_GETS))) {
        private enum enumMixinStr___GLIBC_USE_DEPRECATED_GETS = `enum __GLIBC_USE_DEPRECATED_GETS = 0;`;
        static if(is(typeof({ mixin(enumMixinStr___GLIBC_USE_DEPRECATED_GETS); }))) {
            mixin(enumMixinStr___GLIBC_USE_DEPRECATED_GETS);
        }
    }




    static if(!is(typeof(__USE_FORTIFY_LEVEL))) {
        private enum enumMixinStr___USE_FORTIFY_LEVEL = `enum __USE_FORTIFY_LEVEL = 0;`;
        static if(is(typeof({ mixin(enumMixinStr___USE_FORTIFY_LEVEL); }))) {
            mixin(enumMixinStr___USE_FORTIFY_LEVEL);
        }
    }




    static if(!is(typeof(__USE_ATFILE))) {
        private enum enumMixinStr___USE_ATFILE = `enum __USE_ATFILE = 1;`;
        static if(is(typeof({ mixin(enumMixinStr___USE_ATFILE); }))) {
            mixin(enumMixinStr___USE_ATFILE);
        }
    }




    static if(!is(typeof(__USE_MISC))) {
        private enum enumMixinStr___USE_MISC = `enum __USE_MISC = 1;`;
        static if(is(typeof({ mixin(enumMixinStr___USE_MISC); }))) {
            mixin(enumMixinStr___USE_MISC);
        }
    }




    static if(!is(typeof(_ATFILE_SOURCE))) {
        private enum enumMixinStr__ATFILE_SOURCE = `enum _ATFILE_SOURCE = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__ATFILE_SOURCE); }))) {
            mixin(enumMixinStr__ATFILE_SOURCE);
        }
    }




    static if(!is(typeof(__USE_XOPEN2K8))) {
        private enum enumMixinStr___USE_XOPEN2K8 = `enum __USE_XOPEN2K8 = 1;`;
        static if(is(typeof({ mixin(enumMixinStr___USE_XOPEN2K8); }))) {
            mixin(enumMixinStr___USE_XOPEN2K8);
        }
    }




    static if(!is(typeof(__USE_ISOC99))) {
        private enum enumMixinStr___USE_ISOC99 = `enum __USE_ISOC99 = 1;`;
        static if(is(typeof({ mixin(enumMixinStr___USE_ISOC99); }))) {
            mixin(enumMixinStr___USE_ISOC99);
        }
    }




    static if(!is(typeof(__USE_ISOC95))) {
        private enum enumMixinStr___USE_ISOC95 = `enum __USE_ISOC95 = 1;`;
        static if(is(typeof({ mixin(enumMixinStr___USE_ISOC95); }))) {
            mixin(enumMixinStr___USE_ISOC95);
        }
    }




    static if(!is(typeof(__USE_XOPEN2K))) {
        private enum enumMixinStr___USE_XOPEN2K = `enum __USE_XOPEN2K = 1;`;
        static if(is(typeof({ mixin(enumMixinStr___USE_XOPEN2K); }))) {
            mixin(enumMixinStr___USE_XOPEN2K);
        }
    }




    static if(!is(typeof(__USE_POSIX199506))) {
        private enum enumMixinStr___USE_POSIX199506 = `enum __USE_POSIX199506 = 1;`;
        static if(is(typeof({ mixin(enumMixinStr___USE_POSIX199506); }))) {
            mixin(enumMixinStr___USE_POSIX199506);
        }
    }




    static if(!is(typeof(__USE_POSIX199309))) {
        private enum enumMixinStr___USE_POSIX199309 = `enum __USE_POSIX199309 = 1;`;
        static if(is(typeof({ mixin(enumMixinStr___USE_POSIX199309); }))) {
            mixin(enumMixinStr___USE_POSIX199309);
        }
    }




    static if(!is(typeof(__USE_POSIX2))) {
        private enum enumMixinStr___USE_POSIX2 = `enum __USE_POSIX2 = 1;`;
        static if(is(typeof({ mixin(enumMixinStr___USE_POSIX2); }))) {
            mixin(enumMixinStr___USE_POSIX2);
        }
    }




    static if(!is(typeof(__USE_POSIX))) {
        private enum enumMixinStr___USE_POSIX = `enum __USE_POSIX = 1;`;
        static if(is(typeof({ mixin(enumMixinStr___USE_POSIX); }))) {
            mixin(enumMixinStr___USE_POSIX);
        }
    }




    static if(!is(typeof(_POSIX_C_SOURCE))) {
        private enum enumMixinStr__POSIX_C_SOURCE = `enum _POSIX_C_SOURCE = 200809L;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_C_SOURCE); }))) {
            mixin(enumMixinStr__POSIX_C_SOURCE);
        }
    }




    static if(!is(typeof(_POSIX_SOURCE))) {
        private enum enumMixinStr__POSIX_SOURCE = `enum _POSIX_SOURCE = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_SOURCE); }))) {
            mixin(enumMixinStr__POSIX_SOURCE);
        }
    }




    static if(!is(typeof(__USE_POSIX_IMPLICITLY))) {
        private enum enumMixinStr___USE_POSIX_IMPLICITLY = `enum __USE_POSIX_IMPLICITLY = 1;`;
        static if(is(typeof({ mixin(enumMixinStr___USE_POSIX_IMPLICITLY); }))) {
            mixin(enumMixinStr___USE_POSIX_IMPLICITLY);
        }
    }




    static if(!is(typeof(__USE_ISOC11))) {
        private enum enumMixinStr___USE_ISOC11 = `enum __USE_ISOC11 = 1;`;
        static if(is(typeof({ mixin(enumMixinStr___USE_ISOC11); }))) {
            mixin(enumMixinStr___USE_ISOC11);
        }
    }




    static if(!is(typeof(__GLIBC_USE_ISOC2X))) {
        private enum enumMixinStr___GLIBC_USE_ISOC2X = `enum __GLIBC_USE_ISOC2X = 0;`;
        static if(is(typeof({ mixin(enumMixinStr___GLIBC_USE_ISOC2X); }))) {
            mixin(enumMixinStr___GLIBC_USE_ISOC2X);
        }
    }




    static if(!is(typeof(_DEFAULT_SOURCE))) {
        private enum enumMixinStr__DEFAULT_SOURCE = `enum _DEFAULT_SOURCE = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__DEFAULT_SOURCE); }))) {
            mixin(enumMixinStr__DEFAULT_SOURCE);
        }
    }
    static if(!is(typeof(_FEATURES_H))) {
        private enum enumMixinStr__FEATURES_H = `enum _FEATURES_H = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__FEATURES_H); }))) {
            mixin(enumMixinStr__FEATURES_H);
        }
    }




    static if(!is(typeof(errno))) {
        private enum enumMixinStr_errno = `enum errno = ( * __errno_location ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_errno); }))) {
            mixin(enumMixinStr_errno);
        }
    }




    static if(!is(typeof(_ERRNO_H))) {
        private enum enumMixinStr__ERRNO_H = `enum _ERRNO_H = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__ERRNO_H); }))) {
            mixin(enumMixinStr__ERRNO_H);
        }
    }
    static if(!is(typeof(NON_EMPTY_TRANSLATION_UNIT))) {
        private enum enumMixinStr_NON_EMPTY_TRANSLATION_UNIT = `enum NON_EMPTY_TRANSLATION_UNIT = static void * dummy = & dummy ;;`;
        static if(is(typeof({ mixin(enumMixinStr_NON_EMPTY_TRANSLATION_UNIT); }))) {
            mixin(enumMixinStr_NON_EMPTY_TRANSLATION_UNIT);
        }
    }
    static if(!is(typeof(BYTE_ORDER))) {
        private enum enumMixinStr_BYTE_ORDER = `enum BYTE_ORDER = __BYTE_ORDER;`;
        static if(is(typeof({ mixin(enumMixinStr_BYTE_ORDER); }))) {
            mixin(enumMixinStr_BYTE_ORDER);
        }
    }




    static if(!is(typeof(PDP_ENDIAN))) {
        private enum enumMixinStr_PDP_ENDIAN = `enum PDP_ENDIAN = __PDP_ENDIAN;`;
        static if(is(typeof({ mixin(enumMixinStr_PDP_ENDIAN); }))) {
            mixin(enumMixinStr_PDP_ENDIAN);
        }
    }




    static if(!is(typeof(BIG_ENDIAN))) {
        private enum enumMixinStr_BIG_ENDIAN = `enum BIG_ENDIAN = __BIG_ENDIAN;`;
        static if(is(typeof({ mixin(enumMixinStr_BIG_ENDIAN); }))) {
            mixin(enumMixinStr_BIG_ENDIAN);
        }
    }




    static if(!is(typeof(LITTLE_ENDIAN))) {
        private enum enumMixinStr_LITTLE_ENDIAN = `enum LITTLE_ENDIAN = __LITTLE_ENDIAN;`;
        static if(is(typeof({ mixin(enumMixinStr_LITTLE_ENDIAN); }))) {
            mixin(enumMixinStr_LITTLE_ENDIAN);
        }
    }




    static if(!is(typeof(_ENDIAN_H))) {
        private enum enumMixinStr__ENDIAN_H = `enum _ENDIAN_H = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__ENDIAN_H); }))) {
            mixin(enumMixinStr__ENDIAN_H);
        }
    }




    static if(!is(typeof(__SYSCALL_WORDSIZE))) {
        private enum enumMixinStr___SYSCALL_WORDSIZE = `enum __SYSCALL_WORDSIZE = 64;`;
        static if(is(typeof({ mixin(enumMixinStr___SYSCALL_WORDSIZE); }))) {
            mixin(enumMixinStr___SYSCALL_WORDSIZE);
        }
    }




    static if(!is(typeof(__WORDSIZE_TIME64_COMPAT32))) {
        private enum enumMixinStr___WORDSIZE_TIME64_COMPAT32 = `enum __WORDSIZE_TIME64_COMPAT32 = 1;`;
        static if(is(typeof({ mixin(enumMixinStr___WORDSIZE_TIME64_COMPAT32); }))) {
            mixin(enumMixinStr___WORDSIZE_TIME64_COMPAT32);
        }
    }




    static if(!is(typeof(__WORDSIZE))) {
        private enum enumMixinStr___WORDSIZE = `enum __WORDSIZE = 64;`;
        static if(is(typeof({ mixin(enumMixinStr___WORDSIZE); }))) {
            mixin(enumMixinStr___WORDSIZE);
        }
    }




    static if(!is(typeof(__WCHAR_MIN))) {
        private enum enumMixinStr___WCHAR_MIN = `enum __WCHAR_MIN = ( - __WCHAR_MAX - 1 );`;
        static if(is(typeof({ mixin(enumMixinStr___WCHAR_MIN); }))) {
            mixin(enumMixinStr___WCHAR_MIN);
        }
    }




    static if(!is(typeof(__WCHAR_MAX))) {
        private enum enumMixinStr___WCHAR_MAX = `enum __WCHAR_MAX = 0x7fffffff;`;
        static if(is(typeof({ mixin(enumMixinStr___WCHAR_MAX); }))) {
            mixin(enumMixinStr___WCHAR_MAX);
        }
    }




    static if(!is(typeof(_BITS_WCHAR_H))) {
        private enum enumMixinStr__BITS_WCHAR_H = `enum _BITS_WCHAR_H = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__BITS_WCHAR_H); }))) {
            mixin(enumMixinStr__BITS_WCHAR_H);
        }
    }




    static if(!is(typeof(__WCOREFLAG))) {
        private enum enumMixinStr___WCOREFLAG = `enum __WCOREFLAG = 0x80;`;
        static if(is(typeof({ mixin(enumMixinStr___WCOREFLAG); }))) {
            mixin(enumMixinStr___WCOREFLAG);
        }
    }




    static if(!is(typeof(__W_CONTINUED))) {
        private enum enumMixinStr___W_CONTINUED = `enum __W_CONTINUED = 0xffff;`;
        static if(is(typeof({ mixin(enumMixinStr___W_CONTINUED); }))) {
            mixin(enumMixinStr___W_CONTINUED);
        }
    }
    static if(!is(typeof(__WCLONE))) {
        private enum enumMixinStr___WCLONE = `enum __WCLONE = 0x80000000;`;
        static if(is(typeof({ mixin(enumMixinStr___WCLONE); }))) {
            mixin(enumMixinStr___WCLONE);
        }
    }




    static if(!is(typeof(__WALL))) {
        private enum enumMixinStr___WALL = `enum __WALL = 0x40000000;`;
        static if(is(typeof({ mixin(enumMixinStr___WALL); }))) {
            mixin(enumMixinStr___WALL);
        }
    }




    static if(!is(typeof(__WNOTHREAD))) {
        private enum enumMixinStr___WNOTHREAD = `enum __WNOTHREAD = 0x20000000;`;
        static if(is(typeof({ mixin(enumMixinStr___WNOTHREAD); }))) {
            mixin(enumMixinStr___WNOTHREAD);
        }
    }




    static if(!is(typeof(WNOWAIT))) {
        private enum enumMixinStr_WNOWAIT = `enum WNOWAIT = 0x01000000;`;
        static if(is(typeof({ mixin(enumMixinStr_WNOWAIT); }))) {
            mixin(enumMixinStr_WNOWAIT);
        }
    }




    static if(!is(typeof(WCONTINUED))) {
        private enum enumMixinStr_WCONTINUED = `enum WCONTINUED = 8;`;
        static if(is(typeof({ mixin(enumMixinStr_WCONTINUED); }))) {
            mixin(enumMixinStr_WCONTINUED);
        }
    }




    static if(!is(typeof(WEXITED))) {
        private enum enumMixinStr_WEXITED = `enum WEXITED = 4;`;
        static if(is(typeof({ mixin(enumMixinStr_WEXITED); }))) {
            mixin(enumMixinStr_WEXITED);
        }
    }




    static if(!is(typeof(WSTOPPED))) {
        private enum enumMixinStr_WSTOPPED = `enum WSTOPPED = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_WSTOPPED); }))) {
            mixin(enumMixinStr_WSTOPPED);
        }
    }




    static if(!is(typeof(WUNTRACED))) {
        private enum enumMixinStr_WUNTRACED = `enum WUNTRACED = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_WUNTRACED); }))) {
            mixin(enumMixinStr_WUNTRACED);
        }
    }




    static if(!is(typeof(WNOHANG))) {
        private enum enumMixinStr_WNOHANG = `enum WNOHANG = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_WNOHANG); }))) {
            mixin(enumMixinStr_WNOHANG);
        }
    }




    static if(!is(typeof(_BITS_UINTN_IDENTITY_H))) {
        private enum enumMixinStr__BITS_UINTN_IDENTITY_H = `enum _BITS_UINTN_IDENTITY_H = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__BITS_UINTN_IDENTITY_H); }))) {
            mixin(enumMixinStr__BITS_UINTN_IDENTITY_H);
        }
    }




    static if(!is(typeof(__FD_SETSIZE))) {
        private enum enumMixinStr___FD_SETSIZE = `enum __FD_SETSIZE = 1024;`;
        static if(is(typeof({ mixin(enumMixinStr___FD_SETSIZE); }))) {
            mixin(enumMixinStr___FD_SETSIZE);
        }
    }




    static if(!is(typeof(__KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64))) {
        private enum enumMixinStr___KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64 = `enum __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64 = 1;`;
        static if(is(typeof({ mixin(enumMixinStr___KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64); }))) {
            mixin(enumMixinStr___KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64);
        }
    }




    static if(!is(typeof(__STATFS_MATCHES_STATFS64))) {
        private enum enumMixinStr___STATFS_MATCHES_STATFS64 = `enum __STATFS_MATCHES_STATFS64 = 1;`;
        static if(is(typeof({ mixin(enumMixinStr___STATFS_MATCHES_STATFS64); }))) {
            mixin(enumMixinStr___STATFS_MATCHES_STATFS64);
        }
    }




    static if(!is(typeof(__RLIM_T_MATCHES_RLIM64_T))) {
        private enum enumMixinStr___RLIM_T_MATCHES_RLIM64_T = `enum __RLIM_T_MATCHES_RLIM64_T = 1;`;
        static if(is(typeof({ mixin(enumMixinStr___RLIM_T_MATCHES_RLIM64_T); }))) {
            mixin(enumMixinStr___RLIM_T_MATCHES_RLIM64_T);
        }
    }




    static if(!is(typeof(__INO_T_MATCHES_INO64_T))) {
        private enum enumMixinStr___INO_T_MATCHES_INO64_T = `enum __INO_T_MATCHES_INO64_T = 1;`;
        static if(is(typeof({ mixin(enumMixinStr___INO_T_MATCHES_INO64_T); }))) {
            mixin(enumMixinStr___INO_T_MATCHES_INO64_T);
        }
    }




    static if(!is(typeof(__OFF_T_MATCHES_OFF64_T))) {
        private enum enumMixinStr___OFF_T_MATCHES_OFF64_T = `enum __OFF_T_MATCHES_OFF64_T = 1;`;
        static if(is(typeof({ mixin(enumMixinStr___OFF_T_MATCHES_OFF64_T); }))) {
            mixin(enumMixinStr___OFF_T_MATCHES_OFF64_T);
        }
    }




    static if(!is(typeof(__CPU_MASK_TYPE))) {
        private enum enumMixinStr___CPU_MASK_TYPE = `enum __CPU_MASK_TYPE = __SYSCALL_ULONG_TYPE;`;
        static if(is(typeof({ mixin(enumMixinStr___CPU_MASK_TYPE); }))) {
            mixin(enumMixinStr___CPU_MASK_TYPE);
        }
    }




    static if(!is(typeof(__SSIZE_T_TYPE))) {
        private enum enumMixinStr___SSIZE_T_TYPE = `enum __SSIZE_T_TYPE = __SWORD_TYPE;`;
        static if(is(typeof({ mixin(enumMixinStr___SSIZE_T_TYPE); }))) {
            mixin(enumMixinStr___SSIZE_T_TYPE);
        }
    }




    static if(!is(typeof(__FSID_T_TYPE))) {
        private enum enumMixinStr___FSID_T_TYPE = `enum __FSID_T_TYPE = { int __val [ 2 ] ; };`;
        static if(is(typeof({ mixin(enumMixinStr___FSID_T_TYPE); }))) {
            mixin(enumMixinStr___FSID_T_TYPE);
        }
    }




    static if(!is(typeof(__BLKSIZE_T_TYPE))) {
        private enum enumMixinStr___BLKSIZE_T_TYPE = `enum __BLKSIZE_T_TYPE = __SYSCALL_SLONG_TYPE;`;
        static if(is(typeof({ mixin(enumMixinStr___BLKSIZE_T_TYPE); }))) {
            mixin(enumMixinStr___BLKSIZE_T_TYPE);
        }
    }




    static if(!is(typeof(__TIMER_T_TYPE))) {
        private enum enumMixinStr___TIMER_T_TYPE = `enum __TIMER_T_TYPE = void *;`;
        static if(is(typeof({ mixin(enumMixinStr___TIMER_T_TYPE); }))) {
            mixin(enumMixinStr___TIMER_T_TYPE);
        }
    }




    static if(!is(typeof(__CLOCKID_T_TYPE))) {
        private enum enumMixinStr___CLOCKID_T_TYPE = `enum __CLOCKID_T_TYPE = __S32_TYPE;`;
        static if(is(typeof({ mixin(enumMixinStr___CLOCKID_T_TYPE); }))) {
            mixin(enumMixinStr___CLOCKID_T_TYPE);
        }
    }




    static if(!is(typeof(__KEY_T_TYPE))) {
        private enum enumMixinStr___KEY_T_TYPE = `enum __KEY_T_TYPE = __S32_TYPE;`;
        static if(is(typeof({ mixin(enumMixinStr___KEY_T_TYPE); }))) {
            mixin(enumMixinStr___KEY_T_TYPE);
        }
    }




    static if(!is(typeof(__DADDR_T_TYPE))) {
        private enum enumMixinStr___DADDR_T_TYPE = `enum __DADDR_T_TYPE = __S32_TYPE;`;
        static if(is(typeof({ mixin(enumMixinStr___DADDR_T_TYPE); }))) {
            mixin(enumMixinStr___DADDR_T_TYPE);
        }
    }




    static if(!is(typeof(__SUSECONDS64_T_TYPE))) {
        private enum enumMixinStr___SUSECONDS64_T_TYPE = `enum __SUSECONDS64_T_TYPE = __SQUAD_TYPE;`;
        static if(is(typeof({ mixin(enumMixinStr___SUSECONDS64_T_TYPE); }))) {
            mixin(enumMixinStr___SUSECONDS64_T_TYPE);
        }
    }




    static if(!is(typeof(__SUSECONDS_T_TYPE))) {
        private enum enumMixinStr___SUSECONDS_T_TYPE = `enum __SUSECONDS_T_TYPE = __SYSCALL_SLONG_TYPE;`;
        static if(is(typeof({ mixin(enumMixinStr___SUSECONDS_T_TYPE); }))) {
            mixin(enumMixinStr___SUSECONDS_T_TYPE);
        }
    }




    static if(!is(typeof(__USECONDS_T_TYPE))) {
        private enum enumMixinStr___USECONDS_T_TYPE = `enum __USECONDS_T_TYPE = __U32_TYPE;`;
        static if(is(typeof({ mixin(enumMixinStr___USECONDS_T_TYPE); }))) {
            mixin(enumMixinStr___USECONDS_T_TYPE);
        }
    }




    static if(!is(typeof(__TIME_T_TYPE))) {
        private enum enumMixinStr___TIME_T_TYPE = `enum __TIME_T_TYPE = __SYSCALL_SLONG_TYPE;`;
        static if(is(typeof({ mixin(enumMixinStr___TIME_T_TYPE); }))) {
            mixin(enumMixinStr___TIME_T_TYPE);
        }
    }




    static if(!is(typeof(__CLOCK_T_TYPE))) {
        private enum enumMixinStr___CLOCK_T_TYPE = `enum __CLOCK_T_TYPE = __SYSCALL_SLONG_TYPE;`;
        static if(is(typeof({ mixin(enumMixinStr___CLOCK_T_TYPE); }))) {
            mixin(enumMixinStr___CLOCK_T_TYPE);
        }
    }




    static if(!is(typeof(__ID_T_TYPE))) {
        private enum enumMixinStr___ID_T_TYPE = `enum __ID_T_TYPE = __U32_TYPE;`;
        static if(is(typeof({ mixin(enumMixinStr___ID_T_TYPE); }))) {
            mixin(enumMixinStr___ID_T_TYPE);
        }
    }




    static if(!is(typeof(__FSFILCNT64_T_TYPE))) {
        private enum enumMixinStr___FSFILCNT64_T_TYPE = `enum __FSFILCNT64_T_TYPE = __UQUAD_TYPE;`;
        static if(is(typeof({ mixin(enumMixinStr___FSFILCNT64_T_TYPE); }))) {
            mixin(enumMixinStr___FSFILCNT64_T_TYPE);
        }
    }




    static if(!is(typeof(__FSFILCNT_T_TYPE))) {
        private enum enumMixinStr___FSFILCNT_T_TYPE = `enum __FSFILCNT_T_TYPE = __SYSCALL_ULONG_TYPE;`;
        static if(is(typeof({ mixin(enumMixinStr___FSFILCNT_T_TYPE); }))) {
            mixin(enumMixinStr___FSFILCNT_T_TYPE);
        }
    }




    static if(!is(typeof(__FSBLKCNT64_T_TYPE))) {
        private enum enumMixinStr___FSBLKCNT64_T_TYPE = `enum __FSBLKCNT64_T_TYPE = __UQUAD_TYPE;`;
        static if(is(typeof({ mixin(enumMixinStr___FSBLKCNT64_T_TYPE); }))) {
            mixin(enumMixinStr___FSBLKCNT64_T_TYPE);
        }
    }




    static if(!is(typeof(__FSBLKCNT_T_TYPE))) {
        private enum enumMixinStr___FSBLKCNT_T_TYPE = `enum __FSBLKCNT_T_TYPE = __SYSCALL_ULONG_TYPE;`;
        static if(is(typeof({ mixin(enumMixinStr___FSBLKCNT_T_TYPE); }))) {
            mixin(enumMixinStr___FSBLKCNT_T_TYPE);
        }
    }




    static if(!is(typeof(__BLKCNT64_T_TYPE))) {
        private enum enumMixinStr___BLKCNT64_T_TYPE = `enum __BLKCNT64_T_TYPE = __SQUAD_TYPE;`;
        static if(is(typeof({ mixin(enumMixinStr___BLKCNT64_T_TYPE); }))) {
            mixin(enumMixinStr___BLKCNT64_T_TYPE);
        }
    }




    static if(!is(typeof(__BLKCNT_T_TYPE))) {
        private enum enumMixinStr___BLKCNT_T_TYPE = `enum __BLKCNT_T_TYPE = __SYSCALL_SLONG_TYPE;`;
        static if(is(typeof({ mixin(enumMixinStr___BLKCNT_T_TYPE); }))) {
            mixin(enumMixinStr___BLKCNT_T_TYPE);
        }
    }




    static if(!is(typeof(OPENSSL_FILE))) {
        private enum enumMixinStr_OPENSSL_FILE = `enum OPENSSL_FILE = "./v1_1_0.d.tmp";`;
        static if(is(typeof({ mixin(enumMixinStr_OPENSSL_FILE); }))) {
            mixin(enumMixinStr_OPENSSL_FILE);
        }
    }




    static if(!is(typeof(OPENSSL_LINE))) {
        private enum enumMixinStr_OPENSSL_LINE = `enum OPENSSL_LINE = 69414;`;
        static if(is(typeof({ mixin(enumMixinStr_OPENSSL_LINE); }))) {
            mixin(enumMixinStr_OPENSSL_LINE);
        }
    }




    static if(!is(typeof(__RLIM64_T_TYPE))) {
        private enum enumMixinStr___RLIM64_T_TYPE = `enum __RLIM64_T_TYPE = __UQUAD_TYPE;`;
        static if(is(typeof({ mixin(enumMixinStr___RLIM64_T_TYPE); }))) {
            mixin(enumMixinStr___RLIM64_T_TYPE);
        }
    }




    static if(!is(typeof(__RLIM_T_TYPE))) {
        private enum enumMixinStr___RLIM_T_TYPE = `enum __RLIM_T_TYPE = __SYSCALL_ULONG_TYPE;`;
        static if(is(typeof({ mixin(enumMixinStr___RLIM_T_TYPE); }))) {
            mixin(enumMixinStr___RLIM_T_TYPE);
        }
    }




    static if(!is(typeof(__PID_T_TYPE))) {
        private enum enumMixinStr___PID_T_TYPE = `enum __PID_T_TYPE = __S32_TYPE;`;
        static if(is(typeof({ mixin(enumMixinStr___PID_T_TYPE); }))) {
            mixin(enumMixinStr___PID_T_TYPE);
        }
    }




    static if(!is(typeof(__OFF64_T_TYPE))) {
        private enum enumMixinStr___OFF64_T_TYPE = `enum __OFF64_T_TYPE = __SQUAD_TYPE;`;
        static if(is(typeof({ mixin(enumMixinStr___OFF64_T_TYPE); }))) {
            mixin(enumMixinStr___OFF64_T_TYPE);
        }
    }




    static if(!is(typeof(__OFF_T_TYPE))) {
        private enum enumMixinStr___OFF_T_TYPE = `enum __OFF_T_TYPE = __SYSCALL_SLONG_TYPE;`;
        static if(is(typeof({ mixin(enumMixinStr___OFF_T_TYPE); }))) {
            mixin(enumMixinStr___OFF_T_TYPE);
        }
    }




    static if(!is(typeof(__FSWORD_T_TYPE))) {
        private enum enumMixinStr___FSWORD_T_TYPE = `enum __FSWORD_T_TYPE = __SYSCALL_SLONG_TYPE;`;
        static if(is(typeof({ mixin(enumMixinStr___FSWORD_T_TYPE); }))) {
            mixin(enumMixinStr___FSWORD_T_TYPE);
        }
    }




    static if(!is(typeof(__NLINK_T_TYPE))) {
        private enum enumMixinStr___NLINK_T_TYPE = `enum __NLINK_T_TYPE = __SYSCALL_ULONG_TYPE;`;
        static if(is(typeof({ mixin(enumMixinStr___NLINK_T_TYPE); }))) {
            mixin(enumMixinStr___NLINK_T_TYPE);
        }
    }




    static if(!is(typeof(__MODE_T_TYPE))) {
        private enum enumMixinStr___MODE_T_TYPE = `enum __MODE_T_TYPE = __U32_TYPE;`;
        static if(is(typeof({ mixin(enumMixinStr___MODE_T_TYPE); }))) {
            mixin(enumMixinStr___MODE_T_TYPE);
        }
    }




    static if(!is(typeof(__INO64_T_TYPE))) {
        private enum enumMixinStr___INO64_T_TYPE = `enum __INO64_T_TYPE = __UQUAD_TYPE;`;
        static if(is(typeof({ mixin(enumMixinStr___INO64_T_TYPE); }))) {
            mixin(enumMixinStr___INO64_T_TYPE);
        }
    }




    static if(!is(typeof(__INO_T_TYPE))) {
        private enum enumMixinStr___INO_T_TYPE = `enum __INO_T_TYPE = __SYSCALL_ULONG_TYPE;`;
        static if(is(typeof({ mixin(enumMixinStr___INO_T_TYPE); }))) {
            mixin(enumMixinStr___INO_T_TYPE);
        }
    }




    static if(!is(typeof(__GID_T_TYPE))) {
        private enum enumMixinStr___GID_T_TYPE = `enum __GID_T_TYPE = __U32_TYPE;`;
        static if(is(typeof({ mixin(enumMixinStr___GID_T_TYPE); }))) {
            mixin(enumMixinStr___GID_T_TYPE);
        }
    }




    static if(!is(typeof(__UID_T_TYPE))) {
        private enum enumMixinStr___UID_T_TYPE = `enum __UID_T_TYPE = __U32_TYPE;`;
        static if(is(typeof({ mixin(enumMixinStr___UID_T_TYPE); }))) {
            mixin(enumMixinStr___UID_T_TYPE);
        }
    }




    static if(!is(typeof(__DEV_T_TYPE))) {
        private enum enumMixinStr___DEV_T_TYPE = `enum __DEV_T_TYPE = __UQUAD_TYPE;`;
        static if(is(typeof({ mixin(enumMixinStr___DEV_T_TYPE); }))) {
            mixin(enumMixinStr___DEV_T_TYPE);
        }
    }




    static if(!is(typeof(__SYSCALL_ULONG_TYPE))) {
        private enum enumMixinStr___SYSCALL_ULONG_TYPE = `enum __SYSCALL_ULONG_TYPE = __ULONGWORD_TYPE;`;
        static if(is(typeof({ mixin(enumMixinStr___SYSCALL_ULONG_TYPE); }))) {
            mixin(enumMixinStr___SYSCALL_ULONG_TYPE);
        }
    }




    static if(!is(typeof(__SYSCALL_SLONG_TYPE))) {
        private enum enumMixinStr___SYSCALL_SLONG_TYPE = `enum __SYSCALL_SLONG_TYPE = __SLONGWORD_TYPE;`;
        static if(is(typeof({ mixin(enumMixinStr___SYSCALL_SLONG_TYPE); }))) {
            mixin(enumMixinStr___SYSCALL_SLONG_TYPE);
        }
    }




    static if(!is(typeof(_BITS_TYPESIZES_H))) {
        private enum enumMixinStr__BITS_TYPESIZES_H = `enum _BITS_TYPESIZES_H = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__BITS_TYPESIZES_H); }))) {
            mixin(enumMixinStr__BITS_TYPESIZES_H);
        }
    }




    static if(!is(typeof(__timer_t_defined))) {
        private enum enumMixinStr___timer_t_defined = `enum __timer_t_defined = 1;`;
        static if(is(typeof({ mixin(enumMixinStr___timer_t_defined); }))) {
            mixin(enumMixinStr___timer_t_defined);
        }
    }




    static if(!is(typeof(__time_t_defined))) {
        private enum enumMixinStr___time_t_defined = `enum __time_t_defined = 1;`;
        static if(is(typeof({ mixin(enumMixinStr___time_t_defined); }))) {
            mixin(enumMixinStr___time_t_defined);
        }
    }




    static if(!is(typeof(__struct_tm_defined))) {
        private enum enumMixinStr___struct_tm_defined = `enum __struct_tm_defined = 1;`;
        static if(is(typeof({ mixin(enumMixinStr___struct_tm_defined); }))) {
            mixin(enumMixinStr___struct_tm_defined);
        }
    }




    static if(!is(typeof(__timeval_defined))) {
        private enum enumMixinStr___timeval_defined = `enum __timeval_defined = 1;`;
        static if(is(typeof({ mixin(enumMixinStr___timeval_defined); }))) {
            mixin(enumMixinStr___timeval_defined);
        }
    }




    static if(!is(typeof(_STRUCT_TIMESPEC))) {
        private enum enumMixinStr__STRUCT_TIMESPEC = `enum _STRUCT_TIMESPEC = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__STRUCT_TIMESPEC); }))) {
            mixin(enumMixinStr__STRUCT_TIMESPEC);
        }
    }




    static if(!is(typeof(_BITS_TYPES_STRUCT_SCHED_PARAM))) {
        private enum enumMixinStr__BITS_TYPES_STRUCT_SCHED_PARAM = `enum _BITS_TYPES_STRUCT_SCHED_PARAM = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__BITS_TYPES_STRUCT_SCHED_PARAM); }))) {
            mixin(enumMixinStr__BITS_TYPES_STRUCT_SCHED_PARAM);
        }
    }




    static if(!is(typeof(__itimerspec_defined))) {
        private enum enumMixinStr___itimerspec_defined = `enum __itimerspec_defined = 1;`;
        static if(is(typeof({ mixin(enumMixinStr___itimerspec_defined); }))) {
            mixin(enumMixinStr___itimerspec_defined);
        }
    }




    static if(!is(typeof(__jmp_buf_tag_defined))) {
        private enum enumMixinStr___jmp_buf_tag_defined = `enum __jmp_buf_tag_defined = 1;`;
        static if(is(typeof({ mixin(enumMixinStr___jmp_buf_tag_defined); }))) {
            mixin(enumMixinStr___jmp_buf_tag_defined);
        }
    }




    static if(!is(typeof(_IO_USER_LOCK))) {
        private enum enumMixinStr__IO_USER_LOCK = `enum _IO_USER_LOCK = 0x8000;`;
        static if(is(typeof({ mixin(enumMixinStr__IO_USER_LOCK); }))) {
            mixin(enumMixinStr__IO_USER_LOCK);
        }
    }






    static if(!is(typeof(_IO_ERR_SEEN))) {
        private enum enumMixinStr__IO_ERR_SEEN = `enum _IO_ERR_SEEN = 0x0020;`;
        static if(is(typeof({ mixin(enumMixinStr__IO_ERR_SEEN); }))) {
            mixin(enumMixinStr__IO_ERR_SEEN);
        }
    }






    static if(!is(typeof(_IO_EOF_SEEN))) {
        private enum enumMixinStr__IO_EOF_SEEN = `enum _IO_EOF_SEEN = 0x0010;`;
        static if(is(typeof({ mixin(enumMixinStr__IO_EOF_SEEN); }))) {
            mixin(enumMixinStr__IO_EOF_SEEN);
        }
    }
    static if(!is(typeof(__struct_FILE_defined))) {
        private enum enumMixinStr___struct_FILE_defined = `enum __struct_FILE_defined = 1;`;
        static if(is(typeof({ mixin(enumMixinStr___struct_FILE_defined); }))) {
            mixin(enumMixinStr___struct_FILE_defined);
        }
    }




    static if(!is(typeof(__sigset_t_defined))) {
        private enum enumMixinStr___sigset_t_defined = `enum __sigset_t_defined = 1;`;
        static if(is(typeof({ mixin(enumMixinStr___sigset_t_defined); }))) {
            mixin(enumMixinStr___sigset_t_defined);
        }
    }




    static if(!is(typeof(_BITS_TYPES_LOCALE_T_H))) {
        private enum enumMixinStr__BITS_TYPES_LOCALE_T_H = `enum _BITS_TYPES_LOCALE_T_H = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__BITS_TYPES_LOCALE_T_H); }))) {
            mixin(enumMixinStr__BITS_TYPES_LOCALE_T_H);
        }
    }




    static if(!is(typeof(__clockid_t_defined))) {
        private enum enumMixinStr___clockid_t_defined = `enum __clockid_t_defined = 1;`;
        static if(is(typeof({ mixin(enumMixinStr___clockid_t_defined); }))) {
            mixin(enumMixinStr___clockid_t_defined);
        }
    }




    static if(!is(typeof(__clock_t_defined))) {
        private enum enumMixinStr___clock_t_defined = `enum __clock_t_defined = 1;`;
        static if(is(typeof({ mixin(enumMixinStr___clock_t_defined); }))) {
            mixin(enumMixinStr___clock_t_defined);
        }
    }




    static if(!is(typeof(_SIGSET_NWORDS))) {
        private enum enumMixinStr__SIGSET_NWORDS = `enum _SIGSET_NWORDS = ( 1024 / ( 8 * ( unsigned long int ) .sizeof ) );`;
        static if(is(typeof({ mixin(enumMixinStr__SIGSET_NWORDS); }))) {
            mixin(enumMixinStr__SIGSET_NWORDS);
        }
    }






    static if(!is(typeof(____mbstate_t_defined))) {
        private enum enumMixinStr_____mbstate_t_defined = `enum ____mbstate_t_defined = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_____mbstate_t_defined); }))) {
            mixin(enumMixinStr_____mbstate_t_defined);
        }
    }




    static if(!is(typeof(_BITS_TYPES___LOCALE_T_H))) {
        private enum enumMixinStr__BITS_TYPES___LOCALE_T_H = `enum _BITS_TYPES___LOCALE_T_H = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__BITS_TYPES___LOCALE_T_H); }))) {
            mixin(enumMixinStr__BITS_TYPES___LOCALE_T_H);
        }
    }




    static if(!is(typeof(OPENSSL_MIN_API))) {
        private enum enumMixinStr_OPENSSL_MIN_API = `enum OPENSSL_MIN_API = 0;`;
        static if(is(typeof({ mixin(enumMixinStr_OPENSSL_MIN_API); }))) {
            mixin(enumMixinStr_OPENSSL_MIN_API);
        }
    }




    static if(!is(typeof(_____fpos_t_defined))) {
        private enum enumMixinStr______fpos_t_defined = `enum _____fpos_t_defined = 1;`;
        static if(is(typeof({ mixin(enumMixinStr______fpos_t_defined); }))) {
            mixin(enumMixinStr______fpos_t_defined);
        }
    }




    static if(!is(typeof(_____fpos64_t_defined))) {
        private enum enumMixinStr______fpos64_t_defined = `enum _____fpos64_t_defined = 1;`;
        static if(is(typeof({ mixin(enumMixinStr______fpos64_t_defined); }))) {
            mixin(enumMixinStr______fpos64_t_defined);
        }
    }




    static if(!is(typeof(____FILE_defined))) {
        private enum enumMixinStr_____FILE_defined = `enum ____FILE_defined = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_____FILE_defined); }))) {
            mixin(enumMixinStr_____FILE_defined);
        }
    }




    static if(!is(typeof(__FILE_defined))) {
        private enum enumMixinStr___FILE_defined = `enum __FILE_defined = 1;`;
        static if(is(typeof({ mixin(enumMixinStr___FILE_defined); }))) {
            mixin(enumMixinStr___FILE_defined);
        }
    }




    static if(!is(typeof(__STD_TYPE))) {
        private enum enumMixinStr___STD_TYPE = `enum __STD_TYPE = typedef;`;
        static if(is(typeof({ mixin(enumMixinStr___STD_TYPE); }))) {
            mixin(enumMixinStr___STD_TYPE);
        }
    }




    static if(!is(typeof(__U64_TYPE))) {
        private enum enumMixinStr___U64_TYPE = `enum __U64_TYPE = unsigned long int;`;
        static if(is(typeof({ mixin(enumMixinStr___U64_TYPE); }))) {
            mixin(enumMixinStr___U64_TYPE);
        }
    }




    static if(!is(typeof(__S64_TYPE))) {
        private enum enumMixinStr___S64_TYPE = `enum __S64_TYPE = long int;`;
        static if(is(typeof({ mixin(enumMixinStr___S64_TYPE); }))) {
            mixin(enumMixinStr___S64_TYPE);
        }
    }




    static if(!is(typeof(__ULONG32_TYPE))) {
        private enum enumMixinStr___ULONG32_TYPE = `enum __ULONG32_TYPE = unsigned int;`;
        static if(is(typeof({ mixin(enumMixinStr___ULONG32_TYPE); }))) {
            mixin(enumMixinStr___ULONG32_TYPE);
        }
    }




    static if(!is(typeof(__SLONG32_TYPE))) {
        private enum enumMixinStr___SLONG32_TYPE = `enum __SLONG32_TYPE = int;`;
        static if(is(typeof({ mixin(enumMixinStr___SLONG32_TYPE); }))) {
            mixin(enumMixinStr___SLONG32_TYPE);
        }
    }




    static if(!is(typeof(__UWORD_TYPE))) {
        private enum enumMixinStr___UWORD_TYPE = `enum __UWORD_TYPE = unsigned long int;`;
        static if(is(typeof({ mixin(enumMixinStr___UWORD_TYPE); }))) {
            mixin(enumMixinStr___UWORD_TYPE);
        }
    }




    static if(!is(typeof(__SWORD_TYPE))) {
        private enum enumMixinStr___SWORD_TYPE = `enum __SWORD_TYPE = long int;`;
        static if(is(typeof({ mixin(enumMixinStr___SWORD_TYPE); }))) {
            mixin(enumMixinStr___SWORD_TYPE);
        }
    }




    static if(!is(typeof(__UQUAD_TYPE))) {
        private enum enumMixinStr___UQUAD_TYPE = `enum __UQUAD_TYPE = unsigned long int;`;
        static if(is(typeof({ mixin(enumMixinStr___UQUAD_TYPE); }))) {
            mixin(enumMixinStr___UQUAD_TYPE);
        }
    }




    static if(!is(typeof(__SQUAD_TYPE))) {
        private enum enumMixinStr___SQUAD_TYPE = `enum __SQUAD_TYPE = long int;`;
        static if(is(typeof({ mixin(enumMixinStr___SQUAD_TYPE); }))) {
            mixin(enumMixinStr___SQUAD_TYPE);
        }
    }




    static if(!is(typeof(__ULONGWORD_TYPE))) {
        private enum enumMixinStr___ULONGWORD_TYPE = `enum __ULONGWORD_TYPE = unsigned long int;`;
        static if(is(typeof({ mixin(enumMixinStr___ULONGWORD_TYPE); }))) {
            mixin(enumMixinStr___ULONGWORD_TYPE);
        }
    }




    static if(!is(typeof(__SLONGWORD_TYPE))) {
        private enum enumMixinStr___SLONGWORD_TYPE = `enum __SLONGWORD_TYPE = long int;`;
        static if(is(typeof({ mixin(enumMixinStr___SLONGWORD_TYPE); }))) {
            mixin(enumMixinStr___SLONGWORD_TYPE);
        }
    }




    static if(!is(typeof(__U32_TYPE))) {
        private enum enumMixinStr___U32_TYPE = `enum __U32_TYPE = unsigned int;`;
        static if(is(typeof({ mixin(enumMixinStr___U32_TYPE); }))) {
            mixin(enumMixinStr___U32_TYPE);
        }
    }




    static if(!is(typeof(__S32_TYPE))) {
        private enum enumMixinStr___S32_TYPE = `enum __S32_TYPE = int;`;
        static if(is(typeof({ mixin(enumMixinStr___S32_TYPE); }))) {
            mixin(enumMixinStr___S32_TYPE);
        }
    }




    static if(!is(typeof(__U16_TYPE))) {
        private enum enumMixinStr___U16_TYPE = `enum __U16_TYPE = unsigned short int;`;
        static if(is(typeof({ mixin(enumMixinStr___U16_TYPE); }))) {
            mixin(enumMixinStr___U16_TYPE);
        }
    }




    static if(!is(typeof(__S16_TYPE))) {
        private enum enumMixinStr___S16_TYPE = `enum __S16_TYPE = short int;`;
        static if(is(typeof({ mixin(enumMixinStr___S16_TYPE); }))) {
            mixin(enumMixinStr___S16_TYPE);
        }
    }




    static if(!is(typeof(_BITS_TYPES_H))) {
        private enum enumMixinStr__BITS_TYPES_H = `enum _BITS_TYPES_H = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__BITS_TYPES_H); }))) {
            mixin(enumMixinStr__BITS_TYPES_H);
        }
    }




    static if(!is(typeof(__TIMESIZE))) {
        private enum enumMixinStr___TIMESIZE = `enum __TIMESIZE = 64;`;
        static if(is(typeof({ mixin(enumMixinStr___TIMESIZE); }))) {
            mixin(enumMixinStr___TIMESIZE);
        }
    }




    static if(!is(typeof(__TIME64_T_TYPE))) {
        private enum enumMixinStr___TIME64_T_TYPE = `enum __TIME64_T_TYPE = long int;`;
        static if(is(typeof({ mixin(enumMixinStr___TIME64_T_TYPE); }))) {
            mixin(enumMixinStr___TIME64_T_TYPE);
        }
    }




    static if(!is(typeof(_BITS_TIME64_H))) {
        private enum enumMixinStr__BITS_TIME64_H = `enum _BITS_TIME64_H = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__BITS_TIME64_H); }))) {
            mixin(enumMixinStr__BITS_TIME64_H);
        }
    }




    static if(!is(typeof(TIMER_ABSTIME))) {
        private enum enumMixinStr_TIMER_ABSTIME = `enum TIMER_ABSTIME = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_TIMER_ABSTIME); }))) {
            mixin(enumMixinStr_TIMER_ABSTIME);
        }
    }




    static if(!is(typeof(CLOCK_TAI))) {
        private enum enumMixinStr_CLOCK_TAI = `enum CLOCK_TAI = 11;`;
        static if(is(typeof({ mixin(enumMixinStr_CLOCK_TAI); }))) {
            mixin(enumMixinStr_CLOCK_TAI);
        }
    }




    static if(!is(typeof(CLOCK_BOOTTIME_ALARM))) {
        private enum enumMixinStr_CLOCK_BOOTTIME_ALARM = `enum CLOCK_BOOTTIME_ALARM = 9;`;
        static if(is(typeof({ mixin(enumMixinStr_CLOCK_BOOTTIME_ALARM); }))) {
            mixin(enumMixinStr_CLOCK_BOOTTIME_ALARM);
        }
    }




    static if(!is(typeof(CLOCK_REALTIME_ALARM))) {
        private enum enumMixinStr_CLOCK_REALTIME_ALARM = `enum CLOCK_REALTIME_ALARM = 8;`;
        static if(is(typeof({ mixin(enumMixinStr_CLOCK_REALTIME_ALARM); }))) {
            mixin(enumMixinStr_CLOCK_REALTIME_ALARM);
        }
    }




    static if(!is(typeof(CLOCK_BOOTTIME))) {
        private enum enumMixinStr_CLOCK_BOOTTIME = `enum CLOCK_BOOTTIME = 7;`;
        static if(is(typeof({ mixin(enumMixinStr_CLOCK_BOOTTIME); }))) {
            mixin(enumMixinStr_CLOCK_BOOTTIME);
        }
    }




    static if(!is(typeof(CLOCK_MONOTONIC_COARSE))) {
        private enum enumMixinStr_CLOCK_MONOTONIC_COARSE = `enum CLOCK_MONOTONIC_COARSE = 6;`;
        static if(is(typeof({ mixin(enumMixinStr_CLOCK_MONOTONIC_COARSE); }))) {
            mixin(enumMixinStr_CLOCK_MONOTONIC_COARSE);
        }
    }




    static if(!is(typeof(CLOCK_REALTIME_COARSE))) {
        private enum enumMixinStr_CLOCK_REALTIME_COARSE = `enum CLOCK_REALTIME_COARSE = 5;`;
        static if(is(typeof({ mixin(enumMixinStr_CLOCK_REALTIME_COARSE); }))) {
            mixin(enumMixinStr_CLOCK_REALTIME_COARSE);
        }
    }




    static if(!is(typeof(CLOCK_MONOTONIC_RAW))) {
        private enum enumMixinStr_CLOCK_MONOTONIC_RAW = `enum CLOCK_MONOTONIC_RAW = 4;`;
        static if(is(typeof({ mixin(enumMixinStr_CLOCK_MONOTONIC_RAW); }))) {
            mixin(enumMixinStr_CLOCK_MONOTONIC_RAW);
        }
    }




    static if(!is(typeof(CLOCK_THREAD_CPUTIME_ID))) {
        private enum enumMixinStr_CLOCK_THREAD_CPUTIME_ID = `enum CLOCK_THREAD_CPUTIME_ID = 3;`;
        static if(is(typeof({ mixin(enumMixinStr_CLOCK_THREAD_CPUTIME_ID); }))) {
            mixin(enumMixinStr_CLOCK_THREAD_CPUTIME_ID);
        }
    }




    static if(!is(typeof(CLOCK_PROCESS_CPUTIME_ID))) {
        private enum enumMixinStr_CLOCK_PROCESS_CPUTIME_ID = `enum CLOCK_PROCESS_CPUTIME_ID = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_CLOCK_PROCESS_CPUTIME_ID); }))) {
            mixin(enumMixinStr_CLOCK_PROCESS_CPUTIME_ID);
        }
    }




    static if(!is(typeof(CLOCK_MONOTONIC))) {
        private enum enumMixinStr_CLOCK_MONOTONIC = `enum CLOCK_MONOTONIC = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_CLOCK_MONOTONIC); }))) {
            mixin(enumMixinStr_CLOCK_MONOTONIC);
        }
    }




    static if(!is(typeof(CLOCK_REALTIME))) {
        private enum enumMixinStr_CLOCK_REALTIME = `enum CLOCK_REALTIME = 0;`;
        static if(is(typeof({ mixin(enumMixinStr_CLOCK_REALTIME); }))) {
            mixin(enumMixinStr_CLOCK_REALTIME);
        }
    }




    static if(!is(typeof(CLOCKS_PER_SEC))) {
        private enum enumMixinStr_CLOCKS_PER_SEC = `enum CLOCKS_PER_SEC = ( cast( __clock_t ) 1000000 );`;
        static if(is(typeof({ mixin(enumMixinStr_CLOCKS_PER_SEC); }))) {
            mixin(enumMixinStr_CLOCKS_PER_SEC);
        }
    }




    static if(!is(typeof(_BITS_TIME_H))) {
        private enum enumMixinStr__BITS_TIME_H = `enum _BITS_TIME_H = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__BITS_TIME_H); }))) {
            mixin(enumMixinStr__BITS_TIME_H);
        }
    }




    static if(!is(typeof(__ONCE_FLAG_INIT))) {
        private enum enumMixinStr___ONCE_FLAG_INIT = `enum __ONCE_FLAG_INIT = { 0 };`;
        static if(is(typeof({ mixin(enumMixinStr___ONCE_FLAG_INIT); }))) {
            mixin(enumMixinStr___ONCE_FLAG_INIT);
        }
    }




    static if(!is(typeof(_THREAD_SHARED_TYPES_H))) {
        private enum enumMixinStr__THREAD_SHARED_TYPES_H = `enum _THREAD_SHARED_TYPES_H = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__THREAD_SHARED_TYPES_H); }))) {
            mixin(enumMixinStr__THREAD_SHARED_TYPES_H);
        }
    }






    static if(!is(typeof(__PTHREAD_RWLOCK_ELISION_EXTRA))) {
        private enum enumMixinStr___PTHREAD_RWLOCK_ELISION_EXTRA = `enum __PTHREAD_RWLOCK_ELISION_EXTRA = 0 , { 0 , 0 , 0 , 0 , 0 , 0 , 0 };`;
        static if(is(typeof({ mixin(enumMixinStr___PTHREAD_RWLOCK_ELISION_EXTRA); }))) {
            mixin(enumMixinStr___PTHREAD_RWLOCK_ELISION_EXTRA);
        }
    }
    static if(!is(typeof(__PTHREAD_MUTEX_HAVE_PREV))) {
        private enum enumMixinStr___PTHREAD_MUTEX_HAVE_PREV = `enum __PTHREAD_MUTEX_HAVE_PREV = 1;`;
        static if(is(typeof({ mixin(enumMixinStr___PTHREAD_MUTEX_HAVE_PREV); }))) {
            mixin(enumMixinStr___PTHREAD_MUTEX_HAVE_PREV);
        }
    }




    static if(!is(typeof(_THREAD_MUTEX_INTERNAL_H))) {
        private enum enumMixinStr__THREAD_MUTEX_INTERNAL_H = `enum _THREAD_MUTEX_INTERNAL_H = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__THREAD_MUTEX_INTERNAL_H); }))) {
            mixin(enumMixinStr__THREAD_MUTEX_INTERNAL_H);
        }
    }




    static if(!is(typeof(FOPEN_MAX))) {
        private enum enumMixinStr_FOPEN_MAX = `enum FOPEN_MAX = 16;`;
        static if(is(typeof({ mixin(enumMixinStr_FOPEN_MAX); }))) {
            mixin(enumMixinStr_FOPEN_MAX);
        }
    }




    static if(!is(typeof(L_ctermid))) {
        private enum enumMixinStr_L_ctermid = `enum L_ctermid = 9;`;
        static if(is(typeof({ mixin(enumMixinStr_L_ctermid); }))) {
            mixin(enumMixinStr_L_ctermid);
        }
    }




    static if(!is(typeof(FILENAME_MAX))) {
        private enum enumMixinStr_FILENAME_MAX = `enum FILENAME_MAX = 4096;`;
        static if(is(typeof({ mixin(enumMixinStr_FILENAME_MAX); }))) {
            mixin(enumMixinStr_FILENAME_MAX);
        }
    }




    static if(!is(typeof(TMP_MAX))) {
        private enum enumMixinStr_TMP_MAX = `enum TMP_MAX = 238328;`;
        static if(is(typeof({ mixin(enumMixinStr_TMP_MAX); }))) {
            mixin(enumMixinStr_TMP_MAX);
        }
    }




    static if(!is(typeof(L_tmpnam))) {
        private enum enumMixinStr_L_tmpnam = `enum L_tmpnam = 20;`;
        static if(is(typeof({ mixin(enumMixinStr_L_tmpnam); }))) {
            mixin(enumMixinStr_L_tmpnam);
        }
    }




    static if(!is(typeof(_BITS_STDIO_LIM_H))) {
        private enum enumMixinStr__BITS_STDIO_LIM_H = `enum _BITS_STDIO_LIM_H = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__BITS_STDIO_LIM_H); }))) {
            mixin(enumMixinStr__BITS_STDIO_LIM_H);
        }
    }




    static if(!is(typeof(_BITS_STDINT_UINTN_H))) {
        private enum enumMixinStr__BITS_STDINT_UINTN_H = `enum _BITS_STDINT_UINTN_H = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__BITS_STDINT_UINTN_H); }))) {
            mixin(enumMixinStr__BITS_STDINT_UINTN_H);
        }
    }




    static if(!is(typeof(_BITS_STDINT_INTN_H))) {
        private enum enumMixinStr__BITS_STDINT_INTN_H = `enum _BITS_STDINT_INTN_H = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__BITS_STDINT_INTN_H); }))) {
            mixin(enumMixinStr__BITS_STDINT_INTN_H);
        }
    }




    static if(!is(typeof(_BITS_SETJMP_H))) {
        private enum enumMixinStr__BITS_SETJMP_H = `enum _BITS_SETJMP_H = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__BITS_SETJMP_H); }))) {
            mixin(enumMixinStr__BITS_SETJMP_H);
        }
    }
    static if(!is(typeof(SCHED_RR))) {
        private enum enumMixinStr_SCHED_RR = `enum SCHED_RR = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_SCHED_RR); }))) {
            mixin(enumMixinStr_SCHED_RR);
        }
    }




    static if(!is(typeof(SCHED_FIFO))) {
        private enum enumMixinStr_SCHED_FIFO = `enum SCHED_FIFO = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_SCHED_FIFO); }))) {
            mixin(enumMixinStr_SCHED_FIFO);
        }
    }




    static if(!is(typeof(SCHED_OTHER))) {
        private enum enumMixinStr_SCHED_OTHER = `enum SCHED_OTHER = 0;`;
        static if(is(typeof({ mixin(enumMixinStr_SCHED_OTHER); }))) {
            mixin(enumMixinStr_SCHED_OTHER);
        }
    }




    static if(!is(typeof(_BITS_SCHED_H))) {
        private enum enumMixinStr__BITS_SCHED_H = `enum _BITS_SCHED_H = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__BITS_SCHED_H); }))) {
            mixin(enumMixinStr__BITS_SCHED_H);
        }
    }




    static if(!is(typeof(__have_pthread_attr_t))) {
        private enum enumMixinStr___have_pthread_attr_t = `enum __have_pthread_attr_t = 1;`;
        static if(is(typeof({ mixin(enumMixinStr___have_pthread_attr_t); }))) {
            mixin(enumMixinStr___have_pthread_attr_t);
        }
    }




    static if(!is(typeof(_BITS_PTHREADTYPES_COMMON_H))) {
        private enum enumMixinStr__BITS_PTHREADTYPES_COMMON_H = `enum _BITS_PTHREADTYPES_COMMON_H = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__BITS_PTHREADTYPES_COMMON_H); }))) {
            mixin(enumMixinStr__BITS_PTHREADTYPES_COMMON_H);
        }
    }
    static if(!is(typeof(__SIZEOF_PTHREAD_BARRIERATTR_T))) {
        private enum enumMixinStr___SIZEOF_PTHREAD_BARRIERATTR_T = `enum __SIZEOF_PTHREAD_BARRIERATTR_T = 4;`;
        static if(is(typeof({ mixin(enumMixinStr___SIZEOF_PTHREAD_BARRIERATTR_T); }))) {
            mixin(enumMixinStr___SIZEOF_PTHREAD_BARRIERATTR_T);
        }
    }




    static if(!is(typeof(__SIZEOF_PTHREAD_RWLOCKATTR_T))) {
        private enum enumMixinStr___SIZEOF_PTHREAD_RWLOCKATTR_T = `enum __SIZEOF_PTHREAD_RWLOCKATTR_T = 8;`;
        static if(is(typeof({ mixin(enumMixinStr___SIZEOF_PTHREAD_RWLOCKATTR_T); }))) {
            mixin(enumMixinStr___SIZEOF_PTHREAD_RWLOCKATTR_T);
        }
    }




    static if(!is(typeof(__SIZEOF_PTHREAD_CONDATTR_T))) {
        private enum enumMixinStr___SIZEOF_PTHREAD_CONDATTR_T = `enum __SIZEOF_PTHREAD_CONDATTR_T = 4;`;
        static if(is(typeof({ mixin(enumMixinStr___SIZEOF_PTHREAD_CONDATTR_T); }))) {
            mixin(enumMixinStr___SIZEOF_PTHREAD_CONDATTR_T);
        }
    }




    static if(!is(typeof(__SIZEOF_PTHREAD_COND_T))) {
        private enum enumMixinStr___SIZEOF_PTHREAD_COND_T = `enum __SIZEOF_PTHREAD_COND_T = 48;`;
        static if(is(typeof({ mixin(enumMixinStr___SIZEOF_PTHREAD_COND_T); }))) {
            mixin(enumMixinStr___SIZEOF_PTHREAD_COND_T);
        }
    }




    static if(!is(typeof(__SIZEOF_PTHREAD_MUTEXATTR_T))) {
        private enum enumMixinStr___SIZEOF_PTHREAD_MUTEXATTR_T = `enum __SIZEOF_PTHREAD_MUTEXATTR_T = 4;`;
        static if(is(typeof({ mixin(enumMixinStr___SIZEOF_PTHREAD_MUTEXATTR_T); }))) {
            mixin(enumMixinStr___SIZEOF_PTHREAD_MUTEXATTR_T);
        }
    }




    static if(!is(typeof(__SIZEOF_PTHREAD_BARRIER_T))) {
        private enum enumMixinStr___SIZEOF_PTHREAD_BARRIER_T = `enum __SIZEOF_PTHREAD_BARRIER_T = 32;`;
        static if(is(typeof({ mixin(enumMixinStr___SIZEOF_PTHREAD_BARRIER_T); }))) {
            mixin(enumMixinStr___SIZEOF_PTHREAD_BARRIER_T);
        }
    }




    static if(!is(typeof(__SIZEOF_PTHREAD_RWLOCK_T))) {
        private enum enumMixinStr___SIZEOF_PTHREAD_RWLOCK_T = `enum __SIZEOF_PTHREAD_RWLOCK_T = 56;`;
        static if(is(typeof({ mixin(enumMixinStr___SIZEOF_PTHREAD_RWLOCK_T); }))) {
            mixin(enumMixinStr___SIZEOF_PTHREAD_RWLOCK_T);
        }
    }




    static if(!is(typeof(__SIZEOF_PTHREAD_ATTR_T))) {
        private enum enumMixinStr___SIZEOF_PTHREAD_ATTR_T = `enum __SIZEOF_PTHREAD_ATTR_T = 56;`;
        static if(is(typeof({ mixin(enumMixinStr___SIZEOF_PTHREAD_ATTR_T); }))) {
            mixin(enumMixinStr___SIZEOF_PTHREAD_ATTR_T);
        }
    }




    static if(!is(typeof(__SIZEOF_PTHREAD_MUTEX_T))) {
        private enum enumMixinStr___SIZEOF_PTHREAD_MUTEX_T = `enum __SIZEOF_PTHREAD_MUTEX_T = 40;`;
        static if(is(typeof({ mixin(enumMixinStr___SIZEOF_PTHREAD_MUTEX_T); }))) {
            mixin(enumMixinStr___SIZEOF_PTHREAD_MUTEX_T);
        }
    }




    static if(!is(typeof(_BITS_PTHREADTYPES_ARCH_H))) {
        private enum enumMixinStr__BITS_PTHREADTYPES_ARCH_H = `enum _BITS_PTHREADTYPES_ARCH_H = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__BITS_PTHREADTYPES_ARCH_H); }))) {
            mixin(enumMixinStr__BITS_PTHREADTYPES_ARCH_H);
        }
    }




    static if(!is(typeof(RE_DUP_MAX))) {
        private enum enumMixinStr_RE_DUP_MAX = `enum RE_DUP_MAX = ( 0x7fff );`;
        static if(is(typeof({ mixin(enumMixinStr_RE_DUP_MAX); }))) {
            mixin(enumMixinStr_RE_DUP_MAX);
        }
    }




    static if(!is(typeof(CHARCLASS_NAME_MAX))) {
        private enum enumMixinStr_CHARCLASS_NAME_MAX = `enum CHARCLASS_NAME_MAX = 2048;`;
        static if(is(typeof({ mixin(enumMixinStr_CHARCLASS_NAME_MAX); }))) {
            mixin(enumMixinStr_CHARCLASS_NAME_MAX);
        }
    }




    static if(!is(typeof(LINE_MAX))) {
        private enum enumMixinStr_LINE_MAX = `enum LINE_MAX = _POSIX2_LINE_MAX;`;
        static if(is(typeof({ mixin(enumMixinStr_LINE_MAX); }))) {
            mixin(enumMixinStr_LINE_MAX);
        }
    }




    static if(!is(typeof(EXPR_NEST_MAX))) {
        private enum enumMixinStr_EXPR_NEST_MAX = `enum EXPR_NEST_MAX = _POSIX2_EXPR_NEST_MAX;`;
        static if(is(typeof({ mixin(enumMixinStr_EXPR_NEST_MAX); }))) {
            mixin(enumMixinStr_EXPR_NEST_MAX);
        }
    }




    static if(!is(typeof(COLL_WEIGHTS_MAX))) {
        private enum enumMixinStr_COLL_WEIGHTS_MAX = `enum COLL_WEIGHTS_MAX = 255;`;
        static if(is(typeof({ mixin(enumMixinStr_COLL_WEIGHTS_MAX); }))) {
            mixin(enumMixinStr_COLL_WEIGHTS_MAX);
        }
    }




    static if(!is(typeof(BC_STRING_MAX))) {
        private enum enumMixinStr_BC_STRING_MAX = `enum BC_STRING_MAX = _POSIX2_BC_STRING_MAX;`;
        static if(is(typeof({ mixin(enumMixinStr_BC_STRING_MAX); }))) {
            mixin(enumMixinStr_BC_STRING_MAX);
        }
    }




    static if(!is(typeof(BC_SCALE_MAX))) {
        private enum enumMixinStr_BC_SCALE_MAX = `enum BC_SCALE_MAX = _POSIX2_BC_SCALE_MAX;`;
        static if(is(typeof({ mixin(enumMixinStr_BC_SCALE_MAX); }))) {
            mixin(enumMixinStr_BC_SCALE_MAX);
        }
    }




    static if(!is(typeof(BC_DIM_MAX))) {
        private enum enumMixinStr_BC_DIM_MAX = `enum BC_DIM_MAX = _POSIX2_BC_DIM_MAX;`;
        static if(is(typeof({ mixin(enumMixinStr_BC_DIM_MAX); }))) {
            mixin(enumMixinStr_BC_DIM_MAX);
        }
    }




    static if(!is(typeof(BC_BASE_MAX))) {
        private enum enumMixinStr_BC_BASE_MAX = `enum BC_BASE_MAX = _POSIX2_BC_BASE_MAX;`;
        static if(is(typeof({ mixin(enumMixinStr_BC_BASE_MAX); }))) {
            mixin(enumMixinStr_BC_BASE_MAX);
        }
    }




    static if(!is(typeof(_POSIX2_CHARCLASS_NAME_MAX))) {
        private enum enumMixinStr__POSIX2_CHARCLASS_NAME_MAX = `enum _POSIX2_CHARCLASS_NAME_MAX = 14;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX2_CHARCLASS_NAME_MAX); }))) {
            mixin(enumMixinStr__POSIX2_CHARCLASS_NAME_MAX);
        }
    }




    static if(!is(typeof(_POSIX2_RE_DUP_MAX))) {
        private enum enumMixinStr__POSIX2_RE_DUP_MAX = `enum _POSIX2_RE_DUP_MAX = 255;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX2_RE_DUP_MAX); }))) {
            mixin(enumMixinStr__POSIX2_RE_DUP_MAX);
        }
    }




    static if(!is(typeof(_POSIX2_LINE_MAX))) {
        private enum enumMixinStr__POSIX2_LINE_MAX = `enum _POSIX2_LINE_MAX = 2048;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX2_LINE_MAX); }))) {
            mixin(enumMixinStr__POSIX2_LINE_MAX);
        }
    }




    static if(!is(typeof(_POSIX2_EXPR_NEST_MAX))) {
        private enum enumMixinStr__POSIX2_EXPR_NEST_MAX = `enum _POSIX2_EXPR_NEST_MAX = 32;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX2_EXPR_NEST_MAX); }))) {
            mixin(enumMixinStr__POSIX2_EXPR_NEST_MAX);
        }
    }




    static if(!is(typeof(_POSIX2_COLL_WEIGHTS_MAX))) {
        private enum enumMixinStr__POSIX2_COLL_WEIGHTS_MAX = `enum _POSIX2_COLL_WEIGHTS_MAX = 2;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX2_COLL_WEIGHTS_MAX); }))) {
            mixin(enumMixinStr__POSIX2_COLL_WEIGHTS_MAX);
        }
    }




    static if(!is(typeof(_POSIX2_BC_STRING_MAX))) {
        private enum enumMixinStr__POSIX2_BC_STRING_MAX = `enum _POSIX2_BC_STRING_MAX = 1000;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX2_BC_STRING_MAX); }))) {
            mixin(enumMixinStr__POSIX2_BC_STRING_MAX);
        }
    }




    static if(!is(typeof(_POSIX2_BC_SCALE_MAX))) {
        private enum enumMixinStr__POSIX2_BC_SCALE_MAX = `enum _POSIX2_BC_SCALE_MAX = 99;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX2_BC_SCALE_MAX); }))) {
            mixin(enumMixinStr__POSIX2_BC_SCALE_MAX);
        }
    }




    static if(!is(typeof(_POSIX2_BC_DIM_MAX))) {
        private enum enumMixinStr__POSIX2_BC_DIM_MAX = `enum _POSIX2_BC_DIM_MAX = 2048;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX2_BC_DIM_MAX); }))) {
            mixin(enumMixinStr__POSIX2_BC_DIM_MAX);
        }
    }




    static if(!is(typeof(_POSIX2_BC_BASE_MAX))) {
        private enum enumMixinStr__POSIX2_BC_BASE_MAX = `enum _POSIX2_BC_BASE_MAX = 99;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX2_BC_BASE_MAX); }))) {
            mixin(enumMixinStr__POSIX2_BC_BASE_MAX);
        }
    }




    static if(!is(typeof(_BITS_POSIX2_LIM_H))) {
        private enum enumMixinStr__BITS_POSIX2_LIM_H = `enum _BITS_POSIX2_LIM_H = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__BITS_POSIX2_LIM_H); }))) {
            mixin(enumMixinStr__BITS_POSIX2_LIM_H);
        }
    }




    static if(!is(typeof(SSIZE_MAX))) {
        private enum enumMixinStr_SSIZE_MAX = `enum SSIZE_MAX = LONG_MAX;`;
        static if(is(typeof({ mixin(enumMixinStr_SSIZE_MAX); }))) {
            mixin(enumMixinStr_SSIZE_MAX);
        }
    }




    static if(!is(typeof(_POSIX_CLOCKRES_MIN))) {
        private enum enumMixinStr__POSIX_CLOCKRES_MIN = `enum _POSIX_CLOCKRES_MIN = 20000000;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_CLOCKRES_MIN); }))) {
            mixin(enumMixinStr__POSIX_CLOCKRES_MIN);
        }
    }




    static if(!is(typeof(_POSIX_TZNAME_MAX))) {
        private enum enumMixinStr__POSIX_TZNAME_MAX = `enum _POSIX_TZNAME_MAX = 6;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_TZNAME_MAX); }))) {
            mixin(enumMixinStr__POSIX_TZNAME_MAX);
        }
    }




    static if(!is(typeof(_POSIX_TTY_NAME_MAX))) {
        private enum enumMixinStr__POSIX_TTY_NAME_MAX = `enum _POSIX_TTY_NAME_MAX = 9;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_TTY_NAME_MAX); }))) {
            mixin(enumMixinStr__POSIX_TTY_NAME_MAX);
        }
    }




    static if(!is(typeof(_POSIX_TIMER_MAX))) {
        private enum enumMixinStr__POSIX_TIMER_MAX = `enum _POSIX_TIMER_MAX = 32;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_TIMER_MAX); }))) {
            mixin(enumMixinStr__POSIX_TIMER_MAX);
        }
    }




    static if(!is(typeof(_POSIX_SYMLOOP_MAX))) {
        private enum enumMixinStr__POSIX_SYMLOOP_MAX = `enum _POSIX_SYMLOOP_MAX = 8;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_SYMLOOP_MAX); }))) {
            mixin(enumMixinStr__POSIX_SYMLOOP_MAX);
        }
    }




    static if(!is(typeof(_POSIX_SYMLINK_MAX))) {
        private enum enumMixinStr__POSIX_SYMLINK_MAX = `enum _POSIX_SYMLINK_MAX = 255;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_SYMLINK_MAX); }))) {
            mixin(enumMixinStr__POSIX_SYMLINK_MAX);
        }
    }




    static if(!is(typeof(_POSIX_STREAM_MAX))) {
        private enum enumMixinStr__POSIX_STREAM_MAX = `enum _POSIX_STREAM_MAX = 8;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_STREAM_MAX); }))) {
            mixin(enumMixinStr__POSIX_STREAM_MAX);
        }
    }




    static if(!is(typeof(_POSIX_SSIZE_MAX))) {
        private enum enumMixinStr__POSIX_SSIZE_MAX = `enum _POSIX_SSIZE_MAX = 32767;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_SSIZE_MAX); }))) {
            mixin(enumMixinStr__POSIX_SSIZE_MAX);
        }
    }




    static if(!is(typeof(_POSIX_SIGQUEUE_MAX))) {
        private enum enumMixinStr__POSIX_SIGQUEUE_MAX = `enum _POSIX_SIGQUEUE_MAX = 32;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_SIGQUEUE_MAX); }))) {
            mixin(enumMixinStr__POSIX_SIGQUEUE_MAX);
        }
    }




    static if(!is(typeof(_POSIX_SEM_VALUE_MAX))) {
        private enum enumMixinStr__POSIX_SEM_VALUE_MAX = `enum _POSIX_SEM_VALUE_MAX = 32767;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_SEM_VALUE_MAX); }))) {
            mixin(enumMixinStr__POSIX_SEM_VALUE_MAX);
        }
    }




    static if(!is(typeof(_POSIX_SEM_NSEMS_MAX))) {
        private enum enumMixinStr__POSIX_SEM_NSEMS_MAX = `enum _POSIX_SEM_NSEMS_MAX = 256;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_SEM_NSEMS_MAX); }))) {
            mixin(enumMixinStr__POSIX_SEM_NSEMS_MAX);
        }
    }




    static if(!is(typeof(_POSIX_RTSIG_MAX))) {
        private enum enumMixinStr__POSIX_RTSIG_MAX = `enum _POSIX_RTSIG_MAX = 8;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_RTSIG_MAX); }))) {
            mixin(enumMixinStr__POSIX_RTSIG_MAX);
        }
    }




    static if(!is(typeof(_POSIX_RE_DUP_MAX))) {
        private enum enumMixinStr__POSIX_RE_DUP_MAX = `enum _POSIX_RE_DUP_MAX = 255;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_RE_DUP_MAX); }))) {
            mixin(enumMixinStr__POSIX_RE_DUP_MAX);
        }
    }




    static if(!is(typeof(_POSIX_PIPE_BUF))) {
        private enum enumMixinStr__POSIX_PIPE_BUF = `enum _POSIX_PIPE_BUF = 512;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_PIPE_BUF); }))) {
            mixin(enumMixinStr__POSIX_PIPE_BUF);
        }
    }




    static if(!is(typeof(_POSIX_PATH_MAX))) {
        private enum enumMixinStr__POSIX_PATH_MAX = `enum _POSIX_PATH_MAX = 256;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_PATH_MAX); }))) {
            mixin(enumMixinStr__POSIX_PATH_MAX);
        }
    }




    static if(!is(typeof(_POSIX_OPEN_MAX))) {
        private enum enumMixinStr__POSIX_OPEN_MAX = `enum _POSIX_OPEN_MAX = 20;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_OPEN_MAX); }))) {
            mixin(enumMixinStr__POSIX_OPEN_MAX);
        }
    }




    static if(!is(typeof(_POSIX_NGROUPS_MAX))) {
        private enum enumMixinStr__POSIX_NGROUPS_MAX = `enum _POSIX_NGROUPS_MAX = 8;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_NGROUPS_MAX); }))) {
            mixin(enumMixinStr__POSIX_NGROUPS_MAX);
        }
    }




    static if(!is(typeof(_POSIX_NAME_MAX))) {
        private enum enumMixinStr__POSIX_NAME_MAX = `enum _POSIX_NAME_MAX = 14;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_NAME_MAX); }))) {
            mixin(enumMixinStr__POSIX_NAME_MAX);
        }
    }




    static if(!is(typeof(_POSIX_MQ_PRIO_MAX))) {
        private enum enumMixinStr__POSIX_MQ_PRIO_MAX = `enum _POSIX_MQ_PRIO_MAX = 32;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_MQ_PRIO_MAX); }))) {
            mixin(enumMixinStr__POSIX_MQ_PRIO_MAX);
        }
    }




    static if(!is(typeof(_POSIX_MQ_OPEN_MAX))) {
        private enum enumMixinStr__POSIX_MQ_OPEN_MAX = `enum _POSIX_MQ_OPEN_MAX = 8;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_MQ_OPEN_MAX); }))) {
            mixin(enumMixinStr__POSIX_MQ_OPEN_MAX);
        }
    }




    static if(!is(typeof(_POSIX_MAX_INPUT))) {
        private enum enumMixinStr__POSIX_MAX_INPUT = `enum _POSIX_MAX_INPUT = 255;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_MAX_INPUT); }))) {
            mixin(enumMixinStr__POSIX_MAX_INPUT);
        }
    }




    static if(!is(typeof(_POSIX_MAX_CANON))) {
        private enum enumMixinStr__POSIX_MAX_CANON = `enum _POSIX_MAX_CANON = 255;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_MAX_CANON); }))) {
            mixin(enumMixinStr__POSIX_MAX_CANON);
        }
    }




    static if(!is(typeof(_POSIX_LOGIN_NAME_MAX))) {
        private enum enumMixinStr__POSIX_LOGIN_NAME_MAX = `enum _POSIX_LOGIN_NAME_MAX = 9;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_LOGIN_NAME_MAX); }))) {
            mixin(enumMixinStr__POSIX_LOGIN_NAME_MAX);
        }
    }




    static if(!is(typeof(_POSIX_LINK_MAX))) {
        private enum enumMixinStr__POSIX_LINK_MAX = `enum _POSIX_LINK_MAX = 8;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_LINK_MAX); }))) {
            mixin(enumMixinStr__POSIX_LINK_MAX);
        }
    }




    static if(!is(typeof(_POSIX_HOST_NAME_MAX))) {
        private enum enumMixinStr__POSIX_HOST_NAME_MAX = `enum _POSIX_HOST_NAME_MAX = 255;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_HOST_NAME_MAX); }))) {
            mixin(enumMixinStr__POSIX_HOST_NAME_MAX);
        }
    }




    static if(!is(typeof(OPENSSL_API_COMPAT))) {
        private enum enumMixinStr_OPENSSL_API_COMPAT = `enum OPENSSL_API_COMPAT = 0;`;
        static if(is(typeof({ mixin(enumMixinStr_OPENSSL_API_COMPAT); }))) {
            mixin(enumMixinStr_OPENSSL_API_COMPAT);
        }
    }




    static if(!is(typeof(_POSIX_DELAYTIMER_MAX))) {
        private enum enumMixinStr__POSIX_DELAYTIMER_MAX = `enum _POSIX_DELAYTIMER_MAX = 32;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_DELAYTIMER_MAX); }))) {
            mixin(enumMixinStr__POSIX_DELAYTIMER_MAX);
        }
    }




    static if(!is(typeof(_POSIX_CHILD_MAX))) {
        private enum enumMixinStr__POSIX_CHILD_MAX = `enum _POSIX_CHILD_MAX = 25;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_CHILD_MAX); }))) {
            mixin(enumMixinStr__POSIX_CHILD_MAX);
        }
    }




    static if(!is(typeof(_POSIX_ARG_MAX))) {
        private enum enumMixinStr__POSIX_ARG_MAX = `enum _POSIX_ARG_MAX = 4096;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_ARG_MAX); }))) {
            mixin(enumMixinStr__POSIX_ARG_MAX);
        }
    }




    static if(!is(typeof(_POSIX_AIO_MAX))) {
        private enum enumMixinStr__POSIX_AIO_MAX = `enum _POSIX_AIO_MAX = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_AIO_MAX); }))) {
            mixin(enumMixinStr__POSIX_AIO_MAX);
        }
    }




    static if(!is(typeof(_POSIX_AIO_LISTIO_MAX))) {
        private enum enumMixinStr__POSIX_AIO_LISTIO_MAX = `enum _POSIX_AIO_LISTIO_MAX = 2;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_AIO_LISTIO_MAX); }))) {
            mixin(enumMixinStr__POSIX_AIO_LISTIO_MAX);
        }
    }




    static if(!is(typeof(_BITS_POSIX1_LIM_H))) {
        private enum enumMixinStr__BITS_POSIX1_LIM_H = `enum _BITS_POSIX1_LIM_H = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__BITS_POSIX1_LIM_H); }))) {
            mixin(enumMixinStr__BITS_POSIX1_LIM_H);
        }
    }




    static if(!is(typeof(__LDOUBLE_REDIRECTS_TO_FLOAT128_ABI))) {
        private enum enumMixinStr___LDOUBLE_REDIRECTS_TO_FLOAT128_ABI = `enum __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI = 0;`;
        static if(is(typeof({ mixin(enumMixinStr___LDOUBLE_REDIRECTS_TO_FLOAT128_ABI); }))) {
            mixin(enumMixinStr___LDOUBLE_REDIRECTS_TO_FLOAT128_ABI);
        }
    }




    static if(!is(typeof(SEM_VALUE_MAX))) {
        private enum enumMixinStr_SEM_VALUE_MAX = `enum SEM_VALUE_MAX = ( 2147483647 );`;
        static if(is(typeof({ mixin(enumMixinStr_SEM_VALUE_MAX); }))) {
            mixin(enumMixinStr_SEM_VALUE_MAX);
        }
    }




    static if(!is(typeof(MQ_PRIO_MAX))) {
        private enum enumMixinStr_MQ_PRIO_MAX = `enum MQ_PRIO_MAX = 32768;`;
        static if(is(typeof({ mixin(enumMixinStr_MQ_PRIO_MAX); }))) {
            mixin(enumMixinStr_MQ_PRIO_MAX);
        }
    }




    static if(!is(typeof(HOST_NAME_MAX))) {
        private enum enumMixinStr_HOST_NAME_MAX = `enum HOST_NAME_MAX = 64;`;
        static if(is(typeof({ mixin(enumMixinStr_HOST_NAME_MAX); }))) {
            mixin(enumMixinStr_HOST_NAME_MAX);
        }
    }




    static if(!is(typeof(LOGIN_NAME_MAX))) {
        private enum enumMixinStr_LOGIN_NAME_MAX = `enum LOGIN_NAME_MAX = 256;`;
        static if(is(typeof({ mixin(enumMixinStr_LOGIN_NAME_MAX); }))) {
            mixin(enumMixinStr_LOGIN_NAME_MAX);
        }
    }




    static if(!is(typeof(TTY_NAME_MAX))) {
        private enum enumMixinStr_TTY_NAME_MAX = `enum TTY_NAME_MAX = 32;`;
        static if(is(typeof({ mixin(enumMixinStr_TTY_NAME_MAX); }))) {
            mixin(enumMixinStr_TTY_NAME_MAX);
        }
    }




    static if(!is(typeof(DELAYTIMER_MAX))) {
        private enum enumMixinStr_DELAYTIMER_MAX = `enum DELAYTIMER_MAX = 2147483647;`;
        static if(is(typeof({ mixin(enumMixinStr_DELAYTIMER_MAX); }))) {
            mixin(enumMixinStr_DELAYTIMER_MAX);
        }
    }




    static if(!is(typeof(PTHREAD_STACK_MIN))) {
        private enum enumMixinStr_PTHREAD_STACK_MIN = `enum PTHREAD_STACK_MIN = 16384;`;
        static if(is(typeof({ mixin(enumMixinStr_PTHREAD_STACK_MIN); }))) {
            mixin(enumMixinStr_PTHREAD_STACK_MIN);
        }
    }




    static if(!is(typeof(AIO_PRIO_DELTA_MAX))) {
        private enum enumMixinStr_AIO_PRIO_DELTA_MAX = `enum AIO_PRIO_DELTA_MAX = 20;`;
        static if(is(typeof({ mixin(enumMixinStr_AIO_PRIO_DELTA_MAX); }))) {
            mixin(enumMixinStr_AIO_PRIO_DELTA_MAX);
        }
    }




    static if(!is(typeof(_POSIX_THREAD_THREADS_MAX))) {
        private enum enumMixinStr__POSIX_THREAD_THREADS_MAX = `enum _POSIX_THREAD_THREADS_MAX = 64;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_THREAD_THREADS_MAX); }))) {
            mixin(enumMixinStr__POSIX_THREAD_THREADS_MAX);
        }
    }




    static if(!is(typeof(PTHREAD_DESTRUCTOR_ITERATIONS))) {
        private enum enumMixinStr_PTHREAD_DESTRUCTOR_ITERATIONS = `enum PTHREAD_DESTRUCTOR_ITERATIONS = _POSIX_THREAD_DESTRUCTOR_ITERATIONS;`;
        static if(is(typeof({ mixin(enumMixinStr_PTHREAD_DESTRUCTOR_ITERATIONS); }))) {
            mixin(enumMixinStr_PTHREAD_DESTRUCTOR_ITERATIONS);
        }
    }




    static if(!is(typeof(_POSIX_THREAD_DESTRUCTOR_ITERATIONS))) {
        private enum enumMixinStr__POSIX_THREAD_DESTRUCTOR_ITERATIONS = `enum _POSIX_THREAD_DESTRUCTOR_ITERATIONS = 4;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_THREAD_DESTRUCTOR_ITERATIONS); }))) {
            mixin(enumMixinStr__POSIX_THREAD_DESTRUCTOR_ITERATIONS);
        }
    }




    static if(!is(typeof(PTHREAD_KEYS_MAX))) {
        private enum enumMixinStr_PTHREAD_KEYS_MAX = `enum PTHREAD_KEYS_MAX = 1024;`;
        static if(is(typeof({ mixin(enumMixinStr_PTHREAD_KEYS_MAX); }))) {
            mixin(enumMixinStr_PTHREAD_KEYS_MAX);
        }
    }




    static if(!is(typeof(_POSIX_THREAD_KEYS_MAX))) {
        private enum enumMixinStr__POSIX_THREAD_KEYS_MAX = `enum _POSIX_THREAD_KEYS_MAX = 128;`;
        static if(is(typeof({ mixin(enumMixinStr__POSIX_THREAD_KEYS_MAX); }))) {
            mixin(enumMixinStr__POSIX_THREAD_KEYS_MAX);
        }
    }
    static if(!is(typeof(__GLIBC_USE_IEC_60559_TYPES_EXT))) {
        private enum enumMixinStr___GLIBC_USE_IEC_60559_TYPES_EXT = `enum __GLIBC_USE_IEC_60559_TYPES_EXT = 0;`;
        static if(is(typeof({ mixin(enumMixinStr___GLIBC_USE_IEC_60559_TYPES_EXT); }))) {
            mixin(enumMixinStr___GLIBC_USE_IEC_60559_TYPES_EXT);
        }
    }




    static if(!is(typeof(__GLIBC_USE_IEC_60559_FUNCS_EXT_C2X))) {
        private enum enumMixinStr___GLIBC_USE_IEC_60559_FUNCS_EXT_C2X = `enum __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X = 0;`;
        static if(is(typeof({ mixin(enumMixinStr___GLIBC_USE_IEC_60559_FUNCS_EXT_C2X); }))) {
            mixin(enumMixinStr___GLIBC_USE_IEC_60559_FUNCS_EXT_C2X);
        }
    }




    static if(!is(typeof(__GLIBC_USE_IEC_60559_FUNCS_EXT))) {
        private enum enumMixinStr___GLIBC_USE_IEC_60559_FUNCS_EXT = `enum __GLIBC_USE_IEC_60559_FUNCS_EXT = 0;`;
        static if(is(typeof({ mixin(enumMixinStr___GLIBC_USE_IEC_60559_FUNCS_EXT); }))) {
            mixin(enumMixinStr___GLIBC_USE_IEC_60559_FUNCS_EXT);
        }
    }




    static if(!is(typeof(__GLIBC_USE_IEC_60559_BFP_EXT_C2X))) {
        private enum enumMixinStr___GLIBC_USE_IEC_60559_BFP_EXT_C2X = `enum __GLIBC_USE_IEC_60559_BFP_EXT_C2X = 0;`;
        static if(is(typeof({ mixin(enumMixinStr___GLIBC_USE_IEC_60559_BFP_EXT_C2X); }))) {
            mixin(enumMixinStr___GLIBC_USE_IEC_60559_BFP_EXT_C2X);
        }
    }






    static if(!is(typeof(__GLIBC_USE_IEC_60559_BFP_EXT))) {
        private enum enumMixinStr___GLIBC_USE_IEC_60559_BFP_EXT = `enum __GLIBC_USE_IEC_60559_BFP_EXT = 0;`;
        static if(is(typeof({ mixin(enumMixinStr___GLIBC_USE_IEC_60559_BFP_EXT); }))) {
            mixin(enumMixinStr___GLIBC_USE_IEC_60559_BFP_EXT);
        }
    }




    static if(!is(typeof(__GLIBC_USE_LIB_EXT2))) {
        private enum enumMixinStr___GLIBC_USE_LIB_EXT2 = `enum __GLIBC_USE_LIB_EXT2 = 0;`;
        static if(is(typeof({ mixin(enumMixinStr___GLIBC_USE_LIB_EXT2); }))) {
            mixin(enumMixinStr___GLIBC_USE_LIB_EXT2);
        }
    }




    static if(!is(typeof(__HAVE_FLOAT64X_LONG_DOUBLE))) {
        private enum enumMixinStr___HAVE_FLOAT64X_LONG_DOUBLE = `enum __HAVE_FLOAT64X_LONG_DOUBLE = 1;`;
        static if(is(typeof({ mixin(enumMixinStr___HAVE_FLOAT64X_LONG_DOUBLE); }))) {
            mixin(enumMixinStr___HAVE_FLOAT64X_LONG_DOUBLE);
        }
    }




    static if(!is(typeof(__HAVE_FLOAT64X))) {
        private enum enumMixinStr___HAVE_FLOAT64X = `enum __HAVE_FLOAT64X = 1;`;
        static if(is(typeof({ mixin(enumMixinStr___HAVE_FLOAT64X); }))) {
            mixin(enumMixinStr___HAVE_FLOAT64X);
        }
    }




    static if(!is(typeof(__HAVE_DISTINCT_FLOAT128))) {
        private enum enumMixinStr___HAVE_DISTINCT_FLOAT128 = `enum __HAVE_DISTINCT_FLOAT128 = 0;`;
        static if(is(typeof({ mixin(enumMixinStr___HAVE_DISTINCT_FLOAT128); }))) {
            mixin(enumMixinStr___HAVE_DISTINCT_FLOAT128);
        }
    }




    static if(!is(typeof(__HAVE_FLOAT128))) {
        private enum enumMixinStr___HAVE_FLOAT128 = `enum __HAVE_FLOAT128 = 0;`;
        static if(is(typeof({ mixin(enumMixinStr___HAVE_FLOAT128); }))) {
            mixin(enumMixinStr___HAVE_FLOAT128);
        }
    }
    static if(!is(typeof(__CFLOAT64X))) {
        private enum enumMixinStr___CFLOAT64X = `enum __CFLOAT64X = _Complex long double;`;
        static if(is(typeof({ mixin(enumMixinStr___CFLOAT64X); }))) {
            mixin(enumMixinStr___CFLOAT64X);
        }
    }




    static if(!is(typeof(__CFLOAT32X))) {
        private enum enumMixinStr___CFLOAT32X = `enum __CFLOAT32X = _Complex double;`;
        static if(is(typeof({ mixin(enumMixinStr___CFLOAT32X); }))) {
            mixin(enumMixinStr___CFLOAT32X);
        }
    }




    static if(!is(typeof(__CFLOAT64))) {
        private enum enumMixinStr___CFLOAT64 = `enum __CFLOAT64 = _Complex double;`;
        static if(is(typeof({ mixin(enumMixinStr___CFLOAT64); }))) {
            mixin(enumMixinStr___CFLOAT64);
        }
    }




    static if(!is(typeof(__CFLOAT32))) {
        private enum enumMixinStr___CFLOAT32 = `enum __CFLOAT32 = _Complex float;`;
        static if(is(typeof({ mixin(enumMixinStr___CFLOAT32); }))) {
            mixin(enumMixinStr___CFLOAT32);
        }
    }
    static if(!is(typeof(__HAVE_FLOATN_NOT_TYPEDEF))) {
        private enum enumMixinStr___HAVE_FLOATN_NOT_TYPEDEF = `enum __HAVE_FLOATN_NOT_TYPEDEF = 0;`;
        static if(is(typeof({ mixin(enumMixinStr___HAVE_FLOATN_NOT_TYPEDEF); }))) {
            mixin(enumMixinStr___HAVE_FLOATN_NOT_TYPEDEF);
        }
    }




    static if(!is(typeof(__HAVE_FLOAT128_UNLIKE_LDBL))) {
        private enum enumMixinStr___HAVE_FLOAT128_UNLIKE_LDBL = `enum __HAVE_FLOAT128_UNLIKE_LDBL = ( 0 && 64 != 113 );`;
        static if(is(typeof({ mixin(enumMixinStr___HAVE_FLOAT128_UNLIKE_LDBL); }))) {
            mixin(enumMixinStr___HAVE_FLOAT128_UNLIKE_LDBL);
        }
    }




    static if(!is(typeof(__HAVE_DISTINCT_FLOAT128X))) {
        private enum enumMixinStr___HAVE_DISTINCT_FLOAT128X = `enum __HAVE_DISTINCT_FLOAT128X = __HAVE_FLOAT128X;`;
        static if(is(typeof({ mixin(enumMixinStr___HAVE_DISTINCT_FLOAT128X); }))) {
            mixin(enumMixinStr___HAVE_DISTINCT_FLOAT128X);
        }
    }




    static if(!is(typeof(__HAVE_DISTINCT_FLOAT64X))) {
        private enum enumMixinStr___HAVE_DISTINCT_FLOAT64X = `enum __HAVE_DISTINCT_FLOAT64X = 0;`;
        static if(is(typeof({ mixin(enumMixinStr___HAVE_DISTINCT_FLOAT64X); }))) {
            mixin(enumMixinStr___HAVE_DISTINCT_FLOAT64X);
        }
    }




    static if(!is(typeof(__HAVE_DISTINCT_FLOAT32X))) {
        private enum enumMixinStr___HAVE_DISTINCT_FLOAT32X = `enum __HAVE_DISTINCT_FLOAT32X = 0;`;
        static if(is(typeof({ mixin(enumMixinStr___HAVE_DISTINCT_FLOAT32X); }))) {
            mixin(enumMixinStr___HAVE_DISTINCT_FLOAT32X);
        }
    }




    static if(!is(typeof(__HAVE_DISTINCT_FLOAT64))) {
        private enum enumMixinStr___HAVE_DISTINCT_FLOAT64 = `enum __HAVE_DISTINCT_FLOAT64 = 0;`;
        static if(is(typeof({ mixin(enumMixinStr___HAVE_DISTINCT_FLOAT64); }))) {
            mixin(enumMixinStr___HAVE_DISTINCT_FLOAT64);
        }
    }




    static if(!is(typeof(__HAVE_DISTINCT_FLOAT32))) {
        private enum enumMixinStr___HAVE_DISTINCT_FLOAT32 = `enum __HAVE_DISTINCT_FLOAT32 = 0;`;
        static if(is(typeof({ mixin(enumMixinStr___HAVE_DISTINCT_FLOAT32); }))) {
            mixin(enumMixinStr___HAVE_DISTINCT_FLOAT32);
        }
    }




    static if(!is(typeof(__HAVE_DISTINCT_FLOAT16))) {
        private enum enumMixinStr___HAVE_DISTINCT_FLOAT16 = `enum __HAVE_DISTINCT_FLOAT16 = __HAVE_FLOAT16;`;
        static if(is(typeof({ mixin(enumMixinStr___HAVE_DISTINCT_FLOAT16); }))) {
            mixin(enumMixinStr___HAVE_DISTINCT_FLOAT16);
        }
    }




    static if(!is(typeof(__HAVE_FLOAT128X))) {
        private enum enumMixinStr___HAVE_FLOAT128X = `enum __HAVE_FLOAT128X = 0;`;
        static if(is(typeof({ mixin(enumMixinStr___HAVE_FLOAT128X); }))) {
            mixin(enumMixinStr___HAVE_FLOAT128X);
        }
    }




    static if(!is(typeof(__HAVE_FLOAT32X))) {
        private enum enumMixinStr___HAVE_FLOAT32X = `enum __HAVE_FLOAT32X = 1;`;
        static if(is(typeof({ mixin(enumMixinStr___HAVE_FLOAT32X); }))) {
            mixin(enumMixinStr___HAVE_FLOAT32X);
        }
    }




    static if(!is(typeof(__HAVE_FLOAT64))) {
        private enum enumMixinStr___HAVE_FLOAT64 = `enum __HAVE_FLOAT64 = 1;`;
        static if(is(typeof({ mixin(enumMixinStr___HAVE_FLOAT64); }))) {
            mixin(enumMixinStr___HAVE_FLOAT64);
        }
    }




    static if(!is(typeof(__HAVE_FLOAT32))) {
        private enum enumMixinStr___HAVE_FLOAT32 = `enum __HAVE_FLOAT32 = 1;`;
        static if(is(typeof({ mixin(enumMixinStr___HAVE_FLOAT32); }))) {
            mixin(enumMixinStr___HAVE_FLOAT32);
        }
    }




    static if(!is(typeof(__HAVE_FLOAT16))) {
        private enum enumMixinStr___HAVE_FLOAT16 = `enum __HAVE_FLOAT16 = 0;`;
        static if(is(typeof({ mixin(enumMixinStr___HAVE_FLOAT16); }))) {
            mixin(enumMixinStr___HAVE_FLOAT16);
        }
    }






    static if(!is(typeof(ENOTSUP))) {
        private enum enumMixinStr_ENOTSUP = `enum ENOTSUP = EOPNOTSUPP;`;
        static if(is(typeof({ mixin(enumMixinStr_ENOTSUP); }))) {
            mixin(enumMixinStr_ENOTSUP);
        }
    }




    static if(!is(typeof(_BITS_ERRNO_H))) {
        private enum enumMixinStr__BITS_ERRNO_H = `enum _BITS_ERRNO_H = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__BITS_ERRNO_H); }))) {
            mixin(enumMixinStr__BITS_ERRNO_H);
        }
    }




    static if(!is(typeof(__BYTE_ORDER))) {
        private enum enumMixinStr___BYTE_ORDER = `enum __BYTE_ORDER = __LITTLE_ENDIAN;`;
        static if(is(typeof({ mixin(enumMixinStr___BYTE_ORDER); }))) {
            mixin(enumMixinStr___BYTE_ORDER);
        }
    }




    static if(!is(typeof(_BITS_ENDIANNESS_H))) {
        private enum enumMixinStr__BITS_ENDIANNESS_H = `enum _BITS_ENDIANNESS_H = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__BITS_ENDIANNESS_H); }))) {
            mixin(enumMixinStr__BITS_ENDIANNESS_H);
        }
    }






    static if(!is(typeof(__FLOAT_WORD_ORDER))) {
        private enum enumMixinStr___FLOAT_WORD_ORDER = `enum __FLOAT_WORD_ORDER = __LITTLE_ENDIAN;`;
        static if(is(typeof({ mixin(enumMixinStr___FLOAT_WORD_ORDER); }))) {
            mixin(enumMixinStr___FLOAT_WORD_ORDER);
        }
    }




    static if(!is(typeof(__PDP_ENDIAN))) {
        private enum enumMixinStr___PDP_ENDIAN = `enum __PDP_ENDIAN = 3412;`;
        static if(is(typeof({ mixin(enumMixinStr___PDP_ENDIAN); }))) {
            mixin(enumMixinStr___PDP_ENDIAN);
        }
    }




    static if(!is(typeof(__BIG_ENDIAN))) {
        private enum enumMixinStr___BIG_ENDIAN = `enum __BIG_ENDIAN = 4321;`;
        static if(is(typeof({ mixin(enumMixinStr___BIG_ENDIAN); }))) {
            mixin(enumMixinStr___BIG_ENDIAN);
        }
    }




    static if(!is(typeof(__LITTLE_ENDIAN))) {
        private enum enumMixinStr___LITTLE_ENDIAN = `enum __LITTLE_ENDIAN = 1234;`;
        static if(is(typeof({ mixin(enumMixinStr___LITTLE_ENDIAN); }))) {
            mixin(enumMixinStr___LITTLE_ENDIAN);
        }
    }




    static if(!is(typeof(_BITS_ENDIAN_H))) {
        private enum enumMixinStr__BITS_ENDIAN_H = `enum _BITS_ENDIAN_H = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__BITS_ENDIAN_H); }))) {
            mixin(enumMixinStr__BITS_ENDIAN_H);
        }
    }
    static if(!is(typeof(__NCPUBITS))) {
        private enum enumMixinStr___NCPUBITS = `enum __NCPUBITS = ( 8 * ( __cpu_mask ) .sizeof );`;
        static if(is(typeof({ mixin(enumMixinStr___NCPUBITS); }))) {
            mixin(enumMixinStr___NCPUBITS);
        }
    }




    static if(!is(typeof(__CPU_SETSIZE))) {
        private enum enumMixinStr___CPU_SETSIZE = `enum __CPU_SETSIZE = 1024;`;
        static if(is(typeof({ mixin(enumMixinStr___CPU_SETSIZE); }))) {
            mixin(enumMixinStr___CPU_SETSIZE);
        }
    }




    static if(!is(typeof(_BITS_CPU_SET_H))) {
        private enum enumMixinStr__BITS_CPU_SET_H = `enum _BITS_CPU_SET_H = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__BITS_CPU_SET_H); }))) {
            mixin(enumMixinStr__BITS_CPU_SET_H);
        }
    }
    static if(!is(typeof(_BITS_BYTESWAP_H))) {
        private enum enumMixinStr__BITS_BYTESWAP_H = `enum _BITS_BYTESWAP_H = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__BITS_BYTESWAP_H); }))) {
            mixin(enumMixinStr__BITS_BYTESWAP_H);
        }
    }




    static if(!is(typeof(EHWPOISON))) {
        private enum enumMixinStr_EHWPOISON = `enum EHWPOISON = 133;`;
        static if(is(typeof({ mixin(enumMixinStr_EHWPOISON); }))) {
            mixin(enumMixinStr_EHWPOISON);
        }
    }




    static if(!is(typeof(ERFKILL))) {
        private enum enumMixinStr_ERFKILL = `enum ERFKILL = 132;`;
        static if(is(typeof({ mixin(enumMixinStr_ERFKILL); }))) {
            mixin(enumMixinStr_ERFKILL);
        }
    }




    static if(!is(typeof(ENOTRECOVERABLE))) {
        private enum enumMixinStr_ENOTRECOVERABLE = `enum ENOTRECOVERABLE = 131;`;
        static if(is(typeof({ mixin(enumMixinStr_ENOTRECOVERABLE); }))) {
            mixin(enumMixinStr_ENOTRECOVERABLE);
        }
    }




    static if(!is(typeof(EOWNERDEAD))) {
        private enum enumMixinStr_EOWNERDEAD = `enum EOWNERDEAD = 130;`;
        static if(is(typeof({ mixin(enumMixinStr_EOWNERDEAD); }))) {
            mixin(enumMixinStr_EOWNERDEAD);
        }
    }




    static if(!is(typeof(EKEYREJECTED))) {
        private enum enumMixinStr_EKEYREJECTED = `enum EKEYREJECTED = 129;`;
        static if(is(typeof({ mixin(enumMixinStr_EKEYREJECTED); }))) {
            mixin(enumMixinStr_EKEYREJECTED);
        }
    }




    static if(!is(typeof(EKEYREVOKED))) {
        private enum enumMixinStr_EKEYREVOKED = `enum EKEYREVOKED = 128;`;
        static if(is(typeof({ mixin(enumMixinStr_EKEYREVOKED); }))) {
            mixin(enumMixinStr_EKEYREVOKED);
        }
    }




    static if(!is(typeof(EKEYEXPIRED))) {
        private enum enumMixinStr_EKEYEXPIRED = `enum EKEYEXPIRED = 127;`;
        static if(is(typeof({ mixin(enumMixinStr_EKEYEXPIRED); }))) {
            mixin(enumMixinStr_EKEYEXPIRED);
        }
    }




    static if(!is(typeof(ENOKEY))) {
        private enum enumMixinStr_ENOKEY = `enum ENOKEY = 126;`;
        static if(is(typeof({ mixin(enumMixinStr_ENOKEY); }))) {
            mixin(enumMixinStr_ENOKEY);
        }
    }




    static if(!is(typeof(ECANCELED))) {
        private enum enumMixinStr_ECANCELED = `enum ECANCELED = 125;`;
        static if(is(typeof({ mixin(enumMixinStr_ECANCELED); }))) {
            mixin(enumMixinStr_ECANCELED);
        }
    }




    static if(!is(typeof(EMEDIUMTYPE))) {
        private enum enumMixinStr_EMEDIUMTYPE = `enum EMEDIUMTYPE = 124;`;
        static if(is(typeof({ mixin(enumMixinStr_EMEDIUMTYPE); }))) {
            mixin(enumMixinStr_EMEDIUMTYPE);
        }
    }




    static if(!is(typeof(ENOMEDIUM))) {
        private enum enumMixinStr_ENOMEDIUM = `enum ENOMEDIUM = 123;`;
        static if(is(typeof({ mixin(enumMixinStr_ENOMEDIUM); }))) {
            mixin(enumMixinStr_ENOMEDIUM);
        }
    }




    static if(!is(typeof(EDQUOT))) {
        private enum enumMixinStr_EDQUOT = `enum EDQUOT = 122;`;
        static if(is(typeof({ mixin(enumMixinStr_EDQUOT); }))) {
            mixin(enumMixinStr_EDQUOT);
        }
    }




    static if(!is(typeof(EREMOTEIO))) {
        private enum enumMixinStr_EREMOTEIO = `enum EREMOTEIO = 121;`;
        static if(is(typeof({ mixin(enumMixinStr_EREMOTEIO); }))) {
            mixin(enumMixinStr_EREMOTEIO);
        }
    }




    static if(!is(typeof(EISNAM))) {
        private enum enumMixinStr_EISNAM = `enum EISNAM = 120;`;
        static if(is(typeof({ mixin(enumMixinStr_EISNAM); }))) {
            mixin(enumMixinStr_EISNAM);
        }
    }




    static if(!is(typeof(ENAVAIL))) {
        private enum enumMixinStr_ENAVAIL = `enum ENAVAIL = 119;`;
        static if(is(typeof({ mixin(enumMixinStr_ENAVAIL); }))) {
            mixin(enumMixinStr_ENAVAIL);
        }
    }




    static if(!is(typeof(ENOTNAM))) {
        private enum enumMixinStr_ENOTNAM = `enum ENOTNAM = 118;`;
        static if(is(typeof({ mixin(enumMixinStr_ENOTNAM); }))) {
            mixin(enumMixinStr_ENOTNAM);
        }
    }




    static if(!is(typeof(EUCLEAN))) {
        private enum enumMixinStr_EUCLEAN = `enum EUCLEAN = 117;`;
        static if(is(typeof({ mixin(enumMixinStr_EUCLEAN); }))) {
            mixin(enumMixinStr_EUCLEAN);
        }
    }




    static if(!is(typeof(ESTALE))) {
        private enum enumMixinStr_ESTALE = `enum ESTALE = 116;`;
        static if(is(typeof({ mixin(enumMixinStr_ESTALE); }))) {
            mixin(enumMixinStr_ESTALE);
        }
    }




    static if(!is(typeof(EINPROGRESS))) {
        private enum enumMixinStr_EINPROGRESS = `enum EINPROGRESS = 115;`;
        static if(is(typeof({ mixin(enumMixinStr_EINPROGRESS); }))) {
            mixin(enumMixinStr_EINPROGRESS);
        }
    }




    static if(!is(typeof(EALREADY))) {
        private enum enumMixinStr_EALREADY = `enum EALREADY = 114;`;
        static if(is(typeof({ mixin(enumMixinStr_EALREADY); }))) {
            mixin(enumMixinStr_EALREADY);
        }
    }




    static if(!is(typeof(EHOSTUNREACH))) {
        private enum enumMixinStr_EHOSTUNREACH = `enum EHOSTUNREACH = 113;`;
        static if(is(typeof({ mixin(enumMixinStr_EHOSTUNREACH); }))) {
            mixin(enumMixinStr_EHOSTUNREACH);
        }
    }




    static if(!is(typeof(EHOSTDOWN))) {
        private enum enumMixinStr_EHOSTDOWN = `enum EHOSTDOWN = 112;`;
        static if(is(typeof({ mixin(enumMixinStr_EHOSTDOWN); }))) {
            mixin(enumMixinStr_EHOSTDOWN);
        }
    }




    static if(!is(typeof(ECONNREFUSED))) {
        private enum enumMixinStr_ECONNREFUSED = `enum ECONNREFUSED = 111;`;
        static if(is(typeof({ mixin(enumMixinStr_ECONNREFUSED); }))) {
            mixin(enumMixinStr_ECONNREFUSED);
        }
    }




    static if(!is(typeof(ETIMEDOUT))) {
        private enum enumMixinStr_ETIMEDOUT = `enum ETIMEDOUT = 110;`;
        static if(is(typeof({ mixin(enumMixinStr_ETIMEDOUT); }))) {
            mixin(enumMixinStr_ETIMEDOUT);
        }
    }




    static if(!is(typeof(ETOOMANYREFS))) {
        private enum enumMixinStr_ETOOMANYREFS = `enum ETOOMANYREFS = 109;`;
        static if(is(typeof({ mixin(enumMixinStr_ETOOMANYREFS); }))) {
            mixin(enumMixinStr_ETOOMANYREFS);
        }
    }




    static if(!is(typeof(ESHUTDOWN))) {
        private enum enumMixinStr_ESHUTDOWN = `enum ESHUTDOWN = 108;`;
        static if(is(typeof({ mixin(enumMixinStr_ESHUTDOWN); }))) {
            mixin(enumMixinStr_ESHUTDOWN);
        }
    }




    static if(!is(typeof(ENOTCONN))) {
        private enum enumMixinStr_ENOTCONN = `enum ENOTCONN = 107;`;
        static if(is(typeof({ mixin(enumMixinStr_ENOTCONN); }))) {
            mixin(enumMixinStr_ENOTCONN);
        }
    }




    static if(!is(typeof(EISCONN))) {
        private enum enumMixinStr_EISCONN = `enum EISCONN = 106;`;
        static if(is(typeof({ mixin(enumMixinStr_EISCONN); }))) {
            mixin(enumMixinStr_EISCONN);
        }
    }




    static if(!is(typeof(ENOBUFS))) {
        private enum enumMixinStr_ENOBUFS = `enum ENOBUFS = 105;`;
        static if(is(typeof({ mixin(enumMixinStr_ENOBUFS); }))) {
            mixin(enumMixinStr_ENOBUFS);
        }
    }




    static if(!is(typeof(ECONNRESET))) {
        private enum enumMixinStr_ECONNRESET = `enum ECONNRESET = 104;`;
        static if(is(typeof({ mixin(enumMixinStr_ECONNRESET); }))) {
            mixin(enumMixinStr_ECONNRESET);
        }
    }




    static if(!is(typeof(ECONNABORTED))) {
        private enum enumMixinStr_ECONNABORTED = `enum ECONNABORTED = 103;`;
        static if(is(typeof({ mixin(enumMixinStr_ECONNABORTED); }))) {
            mixin(enumMixinStr_ECONNABORTED);
        }
    }




    static if(!is(typeof(ENETRESET))) {
        private enum enumMixinStr_ENETRESET = `enum ENETRESET = 102;`;
        static if(is(typeof({ mixin(enumMixinStr_ENETRESET); }))) {
            mixin(enumMixinStr_ENETRESET);
        }
    }




    static if(!is(typeof(ENETUNREACH))) {
        private enum enumMixinStr_ENETUNREACH = `enum ENETUNREACH = 101;`;
        static if(is(typeof({ mixin(enumMixinStr_ENETUNREACH); }))) {
            mixin(enumMixinStr_ENETUNREACH);
        }
    }




    static if(!is(typeof(ENETDOWN))) {
        private enum enumMixinStr_ENETDOWN = `enum ENETDOWN = 100;`;
        static if(is(typeof({ mixin(enumMixinStr_ENETDOWN); }))) {
            mixin(enumMixinStr_ENETDOWN);
        }
    }




    static if(!is(typeof(EADDRNOTAVAIL))) {
        private enum enumMixinStr_EADDRNOTAVAIL = `enum EADDRNOTAVAIL = 99;`;
        static if(is(typeof({ mixin(enumMixinStr_EADDRNOTAVAIL); }))) {
            mixin(enumMixinStr_EADDRNOTAVAIL);
        }
    }




    static if(!is(typeof(EADDRINUSE))) {
        private enum enumMixinStr_EADDRINUSE = `enum EADDRINUSE = 98;`;
        static if(is(typeof({ mixin(enumMixinStr_EADDRINUSE); }))) {
            mixin(enumMixinStr_EADDRINUSE);
        }
    }




    static if(!is(typeof(EAFNOSUPPORT))) {
        private enum enumMixinStr_EAFNOSUPPORT = `enum EAFNOSUPPORT = 97;`;
        static if(is(typeof({ mixin(enumMixinStr_EAFNOSUPPORT); }))) {
            mixin(enumMixinStr_EAFNOSUPPORT);
        }
    }






    static if(!is(typeof(OPENSSL_UNISTD))) {
        private enum enumMixinStr_OPENSSL_UNISTD = `enum OPENSSL_UNISTD = < unistd . h >;`;
        static if(is(typeof({ mixin(enumMixinStr_OPENSSL_UNISTD); }))) {
            mixin(enumMixinStr_OPENSSL_UNISTD);
        }
    }






    static if(!is(typeof(RC4_INT))) {
        private enum enumMixinStr_RC4_INT = `enum RC4_INT = unsigned int;`;
        static if(is(typeof({ mixin(enumMixinStr_RC4_INT); }))) {
            mixin(enumMixinStr_RC4_INT);
        }
    }






    static if(!is(typeof(OPENSSL_VERSION_NUMBER))) {
        private enum enumMixinStr_OPENSSL_VERSION_NUMBER = `enum OPENSSL_VERSION_NUMBER = 0x101010afL;`;
        static if(is(typeof({ mixin(enumMixinStr_OPENSSL_VERSION_NUMBER); }))) {
            mixin(enumMixinStr_OPENSSL_VERSION_NUMBER);
        }
    }




    static if(!is(typeof(OPENSSL_VERSION_TEXT))) {
        private enum enumMixinStr_OPENSSL_VERSION_TEXT = `enum OPENSSL_VERSION_TEXT = "OpenSSL 1.1.1j  16 Feb 2021";`;
        static if(is(typeof({ mixin(enumMixinStr_OPENSSL_VERSION_TEXT); }))) {
            mixin(enumMixinStr_OPENSSL_VERSION_TEXT);
        }
    }




    static if(!is(typeof(SHLIB_VERSION_HISTORY))) {
        private enum enumMixinStr_SHLIB_VERSION_HISTORY = `enum SHLIB_VERSION_HISTORY = "";`;
        static if(is(typeof({ mixin(enumMixinStr_SHLIB_VERSION_HISTORY); }))) {
            mixin(enumMixinStr_SHLIB_VERSION_HISTORY);
        }
    }




    static if(!is(typeof(SHLIB_VERSION_NUMBER))) {
        private enum enumMixinStr_SHLIB_VERSION_NUMBER = `enum SHLIB_VERSION_NUMBER = "1.1";`;
        static if(is(typeof({ mixin(enumMixinStr_SHLIB_VERSION_NUMBER); }))) {
            mixin(enumMixinStr_SHLIB_VERSION_NUMBER);
        }
    }






    static if(!is(typeof(EPFNOSUPPORT))) {
        private enum enumMixinStr_EPFNOSUPPORT = `enum EPFNOSUPPORT = 96;`;
        static if(is(typeof({ mixin(enumMixinStr_EPFNOSUPPORT); }))) {
            mixin(enumMixinStr_EPFNOSUPPORT);
        }
    }




    static if(!is(typeof(EOPNOTSUPP))) {
        private enum enumMixinStr_EOPNOTSUPP = `enum EOPNOTSUPP = 95;`;
        static if(is(typeof({ mixin(enumMixinStr_EOPNOTSUPP); }))) {
            mixin(enumMixinStr_EOPNOTSUPP);
        }
    }




    static if(!is(typeof(ESOCKTNOSUPPORT))) {
        private enum enumMixinStr_ESOCKTNOSUPPORT = `enum ESOCKTNOSUPPORT = 94;`;
        static if(is(typeof({ mixin(enumMixinStr_ESOCKTNOSUPPORT); }))) {
            mixin(enumMixinStr_ESOCKTNOSUPPORT);
        }
    }




    static if(!is(typeof(EPROTONOSUPPORT))) {
        private enum enumMixinStr_EPROTONOSUPPORT = `enum EPROTONOSUPPORT = 93;`;
        static if(is(typeof({ mixin(enumMixinStr_EPROTONOSUPPORT); }))) {
            mixin(enumMixinStr_EPROTONOSUPPORT);
        }
    }




    static if(!is(typeof(ENOPROTOOPT))) {
        private enum enumMixinStr_ENOPROTOOPT = `enum ENOPROTOOPT = 92;`;
        static if(is(typeof({ mixin(enumMixinStr_ENOPROTOOPT); }))) {
            mixin(enumMixinStr_ENOPROTOOPT);
        }
    }




    static if(!is(typeof(EPROTOTYPE))) {
        private enum enumMixinStr_EPROTOTYPE = `enum EPROTOTYPE = 91;`;
        static if(is(typeof({ mixin(enumMixinStr_EPROTOTYPE); }))) {
            mixin(enumMixinStr_EPROTOTYPE);
        }
    }




    static if(!is(typeof(EMSGSIZE))) {
        private enum enumMixinStr_EMSGSIZE = `enum EMSGSIZE = 90;`;
        static if(is(typeof({ mixin(enumMixinStr_EMSGSIZE); }))) {
            mixin(enumMixinStr_EMSGSIZE);
        }
    }




    static if(!is(typeof(EDESTADDRREQ))) {
        private enum enumMixinStr_EDESTADDRREQ = `enum EDESTADDRREQ = 89;`;
        static if(is(typeof({ mixin(enumMixinStr_EDESTADDRREQ); }))) {
            mixin(enumMixinStr_EDESTADDRREQ);
        }
    }




    static if(!is(typeof(ENOTSOCK))) {
        private enum enumMixinStr_ENOTSOCK = `enum ENOTSOCK = 88;`;
        static if(is(typeof({ mixin(enumMixinStr_ENOTSOCK); }))) {
            mixin(enumMixinStr_ENOTSOCK);
        }
    }




    static if(!is(typeof(EUSERS))) {
        private enum enumMixinStr_EUSERS = `enum EUSERS = 87;`;
        static if(is(typeof({ mixin(enumMixinStr_EUSERS); }))) {
            mixin(enumMixinStr_EUSERS);
        }
    }




    static if(!is(typeof(ESTRPIPE))) {
        private enum enumMixinStr_ESTRPIPE = `enum ESTRPIPE = 86;`;
        static if(is(typeof({ mixin(enumMixinStr_ESTRPIPE); }))) {
            mixin(enumMixinStr_ESTRPIPE);
        }
    }




    static if(!is(typeof(ERESTART))) {
        private enum enumMixinStr_ERESTART = `enum ERESTART = 85;`;
        static if(is(typeof({ mixin(enumMixinStr_ERESTART); }))) {
            mixin(enumMixinStr_ERESTART);
        }
    }




    static if(!is(typeof(EILSEQ))) {
        private enum enumMixinStr_EILSEQ = `enum EILSEQ = 84;`;
        static if(is(typeof({ mixin(enumMixinStr_EILSEQ); }))) {
            mixin(enumMixinStr_EILSEQ);
        }
    }




    static if(!is(typeof(ELIBEXEC))) {
        private enum enumMixinStr_ELIBEXEC = `enum ELIBEXEC = 83;`;
        static if(is(typeof({ mixin(enumMixinStr_ELIBEXEC); }))) {
            mixin(enumMixinStr_ELIBEXEC);
        }
    }




    static if(!is(typeof(ELIBMAX))) {
        private enum enumMixinStr_ELIBMAX = `enum ELIBMAX = 82;`;
        static if(is(typeof({ mixin(enumMixinStr_ELIBMAX); }))) {
            mixin(enumMixinStr_ELIBMAX);
        }
    }




    static if(!is(typeof(ELIBSCN))) {
        private enum enumMixinStr_ELIBSCN = `enum ELIBSCN = 81;`;
        static if(is(typeof({ mixin(enumMixinStr_ELIBSCN); }))) {
            mixin(enumMixinStr_ELIBSCN);
        }
    }




    static if(!is(typeof(ELIBBAD))) {
        private enum enumMixinStr_ELIBBAD = `enum ELIBBAD = 80;`;
        static if(is(typeof({ mixin(enumMixinStr_ELIBBAD); }))) {
            mixin(enumMixinStr_ELIBBAD);
        }
    }




    static if(!is(typeof(ELIBACC))) {
        private enum enumMixinStr_ELIBACC = `enum ELIBACC = 79;`;
        static if(is(typeof({ mixin(enumMixinStr_ELIBACC); }))) {
            mixin(enumMixinStr_ELIBACC);
        }
    }




    static if(!is(typeof(EREMCHG))) {
        private enum enumMixinStr_EREMCHG = `enum EREMCHG = 78;`;
        static if(is(typeof({ mixin(enumMixinStr_EREMCHG); }))) {
            mixin(enumMixinStr_EREMCHG);
        }
    }




    static if(!is(typeof(EBADFD))) {
        private enum enumMixinStr_EBADFD = `enum EBADFD = 77;`;
        static if(is(typeof({ mixin(enumMixinStr_EBADFD); }))) {
            mixin(enumMixinStr_EBADFD);
        }
    }




    static if(!is(typeof(ENOTUNIQ))) {
        private enum enumMixinStr_ENOTUNIQ = `enum ENOTUNIQ = 76;`;
        static if(is(typeof({ mixin(enumMixinStr_ENOTUNIQ); }))) {
            mixin(enumMixinStr_ENOTUNIQ);
        }
    }




    static if(!is(typeof(EOVERFLOW))) {
        private enum enumMixinStr_EOVERFLOW = `enum EOVERFLOW = 75;`;
        static if(is(typeof({ mixin(enumMixinStr_EOVERFLOW); }))) {
            mixin(enumMixinStr_EOVERFLOW);
        }
    }




    static if(!is(typeof(EBADMSG))) {
        private enum enumMixinStr_EBADMSG = `enum EBADMSG = 74;`;
        static if(is(typeof({ mixin(enumMixinStr_EBADMSG); }))) {
            mixin(enumMixinStr_EBADMSG);
        }
    }




    static if(!is(typeof(EDOTDOT))) {
        private enum enumMixinStr_EDOTDOT = `enum EDOTDOT = 73;`;
        static if(is(typeof({ mixin(enumMixinStr_EDOTDOT); }))) {
            mixin(enumMixinStr_EDOTDOT);
        }
    }




    static if(!is(typeof(EMULTIHOP))) {
        private enum enumMixinStr_EMULTIHOP = `enum EMULTIHOP = 72;`;
        static if(is(typeof({ mixin(enumMixinStr_EMULTIHOP); }))) {
            mixin(enumMixinStr_EMULTIHOP);
        }
    }




    static if(!is(typeof(EPROTO))) {
        private enum enumMixinStr_EPROTO = `enum EPROTO = 71;`;
        static if(is(typeof({ mixin(enumMixinStr_EPROTO); }))) {
            mixin(enumMixinStr_EPROTO);
        }
    }




    static if(!is(typeof(ECOMM))) {
        private enum enumMixinStr_ECOMM = `enum ECOMM = 70;`;
        static if(is(typeof({ mixin(enumMixinStr_ECOMM); }))) {
            mixin(enumMixinStr_ECOMM);
        }
    }




    static if(!is(typeof(ESRMNT))) {
        private enum enumMixinStr_ESRMNT = `enum ESRMNT = 69;`;
        static if(is(typeof({ mixin(enumMixinStr_ESRMNT); }))) {
            mixin(enumMixinStr_ESRMNT);
        }
    }




    static if(!is(typeof(EADV))) {
        private enum enumMixinStr_EADV = `enum EADV = 68;`;
        static if(is(typeof({ mixin(enumMixinStr_EADV); }))) {
            mixin(enumMixinStr_EADV);
        }
    }




    static if(!is(typeof(ENOLINK))) {
        private enum enumMixinStr_ENOLINK = `enum ENOLINK = 67;`;
        static if(is(typeof({ mixin(enumMixinStr_ENOLINK); }))) {
            mixin(enumMixinStr_ENOLINK);
        }
    }




    static if(!is(typeof(EREMOTE))) {
        private enum enumMixinStr_EREMOTE = `enum EREMOTE = 66;`;
        static if(is(typeof({ mixin(enumMixinStr_EREMOTE); }))) {
            mixin(enumMixinStr_EREMOTE);
        }
    }




    static if(!is(typeof(ENOPKG))) {
        private enum enumMixinStr_ENOPKG = `enum ENOPKG = 65;`;
        static if(is(typeof({ mixin(enumMixinStr_ENOPKG); }))) {
            mixin(enumMixinStr_ENOPKG);
        }
    }




    static if(!is(typeof(ENONET))) {
        private enum enumMixinStr_ENONET = `enum ENONET = 64;`;
        static if(is(typeof({ mixin(enumMixinStr_ENONET); }))) {
            mixin(enumMixinStr_ENONET);
        }
    }




    static if(!is(typeof(ENOSR))) {
        private enum enumMixinStr_ENOSR = `enum ENOSR = 63;`;
        static if(is(typeof({ mixin(enumMixinStr_ENOSR); }))) {
            mixin(enumMixinStr_ENOSR);
        }
    }




    static if(!is(typeof(ETIME))) {
        private enum enumMixinStr_ETIME = `enum ETIME = 62;`;
        static if(is(typeof({ mixin(enumMixinStr_ETIME); }))) {
            mixin(enumMixinStr_ETIME);
        }
    }




    static if(!is(typeof(ENODATA))) {
        private enum enumMixinStr_ENODATA = `enum ENODATA = 61;`;
        static if(is(typeof({ mixin(enumMixinStr_ENODATA); }))) {
            mixin(enumMixinStr_ENODATA);
        }
    }




    static if(!is(typeof(ENOSTR))) {
        private enum enumMixinStr_ENOSTR = `enum ENOSTR = 60;`;
        static if(is(typeof({ mixin(enumMixinStr_ENOSTR); }))) {
            mixin(enumMixinStr_ENOSTR);
        }
    }




    static if(!is(typeof(EBFONT))) {
        private enum enumMixinStr_EBFONT = `enum EBFONT = 59;`;
        static if(is(typeof({ mixin(enumMixinStr_EBFONT); }))) {
            mixin(enumMixinStr_EBFONT);
        }
    }




    static if(!is(typeof(EDEADLOCK))) {
        private enum enumMixinStr_EDEADLOCK = `enum EDEADLOCK = EDEADLK;`;
        static if(is(typeof({ mixin(enumMixinStr_EDEADLOCK); }))) {
            mixin(enumMixinStr_EDEADLOCK);
        }
    }




    static if(!is(typeof(EBADSLT))) {
        private enum enumMixinStr_EBADSLT = `enum EBADSLT = 57;`;
        static if(is(typeof({ mixin(enumMixinStr_EBADSLT); }))) {
            mixin(enumMixinStr_EBADSLT);
        }
    }




    static if(!is(typeof(EBADRQC))) {
        private enum enumMixinStr_EBADRQC = `enum EBADRQC = 56;`;
        static if(is(typeof({ mixin(enumMixinStr_EBADRQC); }))) {
            mixin(enumMixinStr_EBADRQC);
        }
    }




    static if(!is(typeof(ENOANO))) {
        private enum enumMixinStr_ENOANO = `enum ENOANO = 55;`;
        static if(is(typeof({ mixin(enumMixinStr_ENOANO); }))) {
            mixin(enumMixinStr_ENOANO);
        }
    }




    static if(!is(typeof(EXFULL))) {
        private enum enumMixinStr_EXFULL = `enum EXFULL = 54;`;
        static if(is(typeof({ mixin(enumMixinStr_EXFULL); }))) {
            mixin(enumMixinStr_EXFULL);
        }
    }




    static if(!is(typeof(EBADR))) {
        private enum enumMixinStr_EBADR = `enum EBADR = 53;`;
        static if(is(typeof({ mixin(enumMixinStr_EBADR); }))) {
            mixin(enumMixinStr_EBADR);
        }
    }




    static if(!is(typeof(EBADE))) {
        private enum enumMixinStr_EBADE = `enum EBADE = 52;`;
        static if(is(typeof({ mixin(enumMixinStr_EBADE); }))) {
            mixin(enumMixinStr_EBADE);
        }
    }




    static if(!is(typeof(EL2HLT))) {
        private enum enumMixinStr_EL2HLT = `enum EL2HLT = 51;`;
        static if(is(typeof({ mixin(enumMixinStr_EL2HLT); }))) {
            mixin(enumMixinStr_EL2HLT);
        }
    }




    static if(!is(typeof(ENOCSI))) {
        private enum enumMixinStr_ENOCSI = `enum ENOCSI = 50;`;
        static if(is(typeof({ mixin(enumMixinStr_ENOCSI); }))) {
            mixin(enumMixinStr_ENOCSI);
        }
    }




    static if(!is(typeof(EUNATCH))) {
        private enum enumMixinStr_EUNATCH = `enum EUNATCH = 49;`;
        static if(is(typeof({ mixin(enumMixinStr_EUNATCH); }))) {
            mixin(enumMixinStr_EUNATCH);
        }
    }




    static if(!is(typeof(ELNRNG))) {
        private enum enumMixinStr_ELNRNG = `enum ELNRNG = 48;`;
        static if(is(typeof({ mixin(enumMixinStr_ELNRNG); }))) {
            mixin(enumMixinStr_ELNRNG);
        }
    }




    static if(!is(typeof(EL3RST))) {
        private enum enumMixinStr_EL3RST = `enum EL3RST = 47;`;
        static if(is(typeof({ mixin(enumMixinStr_EL3RST); }))) {
            mixin(enumMixinStr_EL3RST);
        }
    }




    static if(!is(typeof(EL3HLT))) {
        private enum enumMixinStr_EL3HLT = `enum EL3HLT = 46;`;
        static if(is(typeof({ mixin(enumMixinStr_EL3HLT); }))) {
            mixin(enumMixinStr_EL3HLT);
        }
    }




    static if(!is(typeof(EL2NSYNC))) {
        private enum enumMixinStr_EL2NSYNC = `enum EL2NSYNC = 45;`;
        static if(is(typeof({ mixin(enumMixinStr_EL2NSYNC); }))) {
            mixin(enumMixinStr_EL2NSYNC);
        }
    }




    static if(!is(typeof(ECHRNG))) {
        private enum enumMixinStr_ECHRNG = `enum ECHRNG = 44;`;
        static if(is(typeof({ mixin(enumMixinStr_ECHRNG); }))) {
            mixin(enumMixinStr_ECHRNG);
        }
    }




    static if(!is(typeof(EIDRM))) {
        private enum enumMixinStr_EIDRM = `enum EIDRM = 43;`;
        static if(is(typeof({ mixin(enumMixinStr_EIDRM); }))) {
            mixin(enumMixinStr_EIDRM);
        }
    }




    static if(!is(typeof(ENOMSG))) {
        private enum enumMixinStr_ENOMSG = `enum ENOMSG = 42;`;
        static if(is(typeof({ mixin(enumMixinStr_ENOMSG); }))) {
            mixin(enumMixinStr_ENOMSG);
        }
    }




    static if(!is(typeof(EWOULDBLOCK))) {
        private enum enumMixinStr_EWOULDBLOCK = `enum EWOULDBLOCK = EAGAIN;`;
        static if(is(typeof({ mixin(enumMixinStr_EWOULDBLOCK); }))) {
            mixin(enumMixinStr_EWOULDBLOCK);
        }
    }




    static if(!is(typeof(ELOOP))) {
        private enum enumMixinStr_ELOOP = `enum ELOOP = 40;`;
        static if(is(typeof({ mixin(enumMixinStr_ELOOP); }))) {
            mixin(enumMixinStr_ELOOP);
        }
    }




    static if(!is(typeof(ENOTEMPTY))) {
        private enum enumMixinStr_ENOTEMPTY = `enum ENOTEMPTY = 39;`;
        static if(is(typeof({ mixin(enumMixinStr_ENOTEMPTY); }))) {
            mixin(enumMixinStr_ENOTEMPTY);
        }
    }




    static if(!is(typeof(ENOSYS))) {
        private enum enumMixinStr_ENOSYS = `enum ENOSYS = 38;`;
        static if(is(typeof({ mixin(enumMixinStr_ENOSYS); }))) {
            mixin(enumMixinStr_ENOSYS);
        }
    }




    static if(!is(typeof(ENOLCK))) {
        private enum enumMixinStr_ENOLCK = `enum ENOLCK = 37;`;
        static if(is(typeof({ mixin(enumMixinStr_ENOLCK); }))) {
            mixin(enumMixinStr_ENOLCK);
        }
    }




    static if(!is(typeof(ENAMETOOLONG))) {
        private enum enumMixinStr_ENAMETOOLONG = `enum ENAMETOOLONG = 36;`;
        static if(is(typeof({ mixin(enumMixinStr_ENAMETOOLONG); }))) {
            mixin(enumMixinStr_ENAMETOOLONG);
        }
    }




    static if(!is(typeof(EDEADLK))) {
        private enum enumMixinStr_EDEADLK = `enum EDEADLK = 35;`;
        static if(is(typeof({ mixin(enumMixinStr_EDEADLK); }))) {
            mixin(enumMixinStr_EDEADLK);
        }
    }






    static if(!is(typeof(ERANGE))) {
        private enum enumMixinStr_ERANGE = `enum ERANGE = 34;`;
        static if(is(typeof({ mixin(enumMixinStr_ERANGE); }))) {
            mixin(enumMixinStr_ERANGE);
        }
    }




    static if(!is(typeof(EDOM))) {
        private enum enumMixinStr_EDOM = `enum EDOM = 33;`;
        static if(is(typeof({ mixin(enumMixinStr_EDOM); }))) {
            mixin(enumMixinStr_EDOM);
        }
    }




    static if(!is(typeof(EPIPE))) {
        private enum enumMixinStr_EPIPE = `enum EPIPE = 32;`;
        static if(is(typeof({ mixin(enumMixinStr_EPIPE); }))) {
            mixin(enumMixinStr_EPIPE);
        }
    }




    static if(!is(typeof(EMLINK))) {
        private enum enumMixinStr_EMLINK = `enum EMLINK = 31;`;
        static if(is(typeof({ mixin(enumMixinStr_EMLINK); }))) {
            mixin(enumMixinStr_EMLINK);
        }
    }




    static if(!is(typeof(EROFS))) {
        private enum enumMixinStr_EROFS = `enum EROFS = 30;`;
        static if(is(typeof({ mixin(enumMixinStr_EROFS); }))) {
            mixin(enumMixinStr_EROFS);
        }
    }




    static if(!is(typeof(ESPIPE))) {
        private enum enumMixinStr_ESPIPE = `enum ESPIPE = 29;`;
        static if(is(typeof({ mixin(enumMixinStr_ESPIPE); }))) {
            mixin(enumMixinStr_ESPIPE);
        }
    }




    static if(!is(typeof(ENOSPC))) {
        private enum enumMixinStr_ENOSPC = `enum ENOSPC = 28;`;
        static if(is(typeof({ mixin(enumMixinStr_ENOSPC); }))) {
            mixin(enumMixinStr_ENOSPC);
        }
    }




    static if(!is(typeof(EFBIG))) {
        private enum enumMixinStr_EFBIG = `enum EFBIG = 27;`;
        static if(is(typeof({ mixin(enumMixinStr_EFBIG); }))) {
            mixin(enumMixinStr_EFBIG);
        }
    }




    static if(!is(typeof(ETXTBSY))) {
        private enum enumMixinStr_ETXTBSY = `enum ETXTBSY = 26;`;
        static if(is(typeof({ mixin(enumMixinStr_ETXTBSY); }))) {
            mixin(enumMixinStr_ETXTBSY);
        }
    }




    static if(!is(typeof(ENOTTY))) {
        private enum enumMixinStr_ENOTTY = `enum ENOTTY = 25;`;
        static if(is(typeof({ mixin(enumMixinStr_ENOTTY); }))) {
            mixin(enumMixinStr_ENOTTY);
        }
    }




    static if(!is(typeof(EMFILE))) {
        private enum enumMixinStr_EMFILE = `enum EMFILE = 24;`;
        static if(is(typeof({ mixin(enumMixinStr_EMFILE); }))) {
            mixin(enumMixinStr_EMFILE);
        }
    }




    static if(!is(typeof(ENFILE))) {
        private enum enumMixinStr_ENFILE = `enum ENFILE = 23;`;
        static if(is(typeof({ mixin(enumMixinStr_ENFILE); }))) {
            mixin(enumMixinStr_ENFILE);
        }
    }




    static if(!is(typeof(EINVAL))) {
        private enum enumMixinStr_EINVAL = `enum EINVAL = 22;`;
        static if(is(typeof({ mixin(enumMixinStr_EINVAL); }))) {
            mixin(enumMixinStr_EINVAL);
        }
    }




    static if(!is(typeof(EISDIR))) {
        private enum enumMixinStr_EISDIR = `enum EISDIR = 21;`;
        static if(is(typeof({ mixin(enumMixinStr_EISDIR); }))) {
            mixin(enumMixinStr_EISDIR);
        }
    }




    static if(!is(typeof(ENOTDIR))) {
        private enum enumMixinStr_ENOTDIR = `enum ENOTDIR = 20;`;
        static if(is(typeof({ mixin(enumMixinStr_ENOTDIR); }))) {
            mixin(enumMixinStr_ENOTDIR);
        }
    }




    static if(!is(typeof(ENODEV))) {
        private enum enumMixinStr_ENODEV = `enum ENODEV = 19;`;
        static if(is(typeof({ mixin(enumMixinStr_ENODEV); }))) {
            mixin(enumMixinStr_ENODEV);
        }
    }




    static if(!is(typeof(EXDEV))) {
        private enum enumMixinStr_EXDEV = `enum EXDEV = 18;`;
        static if(is(typeof({ mixin(enumMixinStr_EXDEV); }))) {
            mixin(enumMixinStr_EXDEV);
        }
    }




    static if(!is(typeof(EEXIST))) {
        private enum enumMixinStr_EEXIST = `enum EEXIST = 17;`;
        static if(is(typeof({ mixin(enumMixinStr_EEXIST); }))) {
            mixin(enumMixinStr_EEXIST);
        }
    }




    static if(!is(typeof(EBUSY))) {
        private enum enumMixinStr_EBUSY = `enum EBUSY = 16;`;
        static if(is(typeof({ mixin(enumMixinStr_EBUSY); }))) {
            mixin(enumMixinStr_EBUSY);
        }
    }




    static if(!is(typeof(ENOTBLK))) {
        private enum enumMixinStr_ENOTBLK = `enum ENOTBLK = 15;`;
        static if(is(typeof({ mixin(enumMixinStr_ENOTBLK); }))) {
            mixin(enumMixinStr_ENOTBLK);
        }
    }




    static if(!is(typeof(EFAULT))) {
        private enum enumMixinStr_EFAULT = `enum EFAULT = 14;`;
        static if(is(typeof({ mixin(enumMixinStr_EFAULT); }))) {
            mixin(enumMixinStr_EFAULT);
        }
    }




    static if(!is(typeof(EACCES))) {
        private enum enumMixinStr_EACCES = `enum EACCES = 13;`;
        static if(is(typeof({ mixin(enumMixinStr_EACCES); }))) {
            mixin(enumMixinStr_EACCES);
        }
    }




    static if(!is(typeof(ENOMEM))) {
        private enum enumMixinStr_ENOMEM = `enum ENOMEM = 12;`;
        static if(is(typeof({ mixin(enumMixinStr_ENOMEM); }))) {
            mixin(enumMixinStr_ENOMEM);
        }
    }




    static if(!is(typeof(EAGAIN))) {
        private enum enumMixinStr_EAGAIN = `enum EAGAIN = 11;`;
        static if(is(typeof({ mixin(enumMixinStr_EAGAIN); }))) {
            mixin(enumMixinStr_EAGAIN);
        }
    }




    static if(!is(typeof(ECHILD))) {
        private enum enumMixinStr_ECHILD = `enum ECHILD = 10;`;
        static if(is(typeof({ mixin(enumMixinStr_ECHILD); }))) {
            mixin(enumMixinStr_ECHILD);
        }
    }




    static if(!is(typeof(EBADF))) {
        private enum enumMixinStr_EBADF = `enum EBADF = 9;`;
        static if(is(typeof({ mixin(enumMixinStr_EBADF); }))) {
            mixin(enumMixinStr_EBADF);
        }
    }




    static if(!is(typeof(ENOEXEC))) {
        private enum enumMixinStr_ENOEXEC = `enum ENOEXEC = 8;`;
        static if(is(typeof({ mixin(enumMixinStr_ENOEXEC); }))) {
            mixin(enumMixinStr_ENOEXEC);
        }
    }




    static if(!is(typeof(E2BIG))) {
        private enum enumMixinStr_E2BIG = `enum E2BIG = 7;`;
        static if(is(typeof({ mixin(enumMixinStr_E2BIG); }))) {
            mixin(enumMixinStr_E2BIG);
        }
    }




    static if(!is(typeof(ENXIO))) {
        private enum enumMixinStr_ENXIO = `enum ENXIO = 6;`;
        static if(is(typeof({ mixin(enumMixinStr_ENXIO); }))) {
            mixin(enumMixinStr_ENXIO);
        }
    }




    static if(!is(typeof(EIO))) {
        private enum enumMixinStr_EIO = `enum EIO = 5;`;
        static if(is(typeof({ mixin(enumMixinStr_EIO); }))) {
            mixin(enumMixinStr_EIO);
        }
    }




    static if(!is(typeof(EINTR))) {
        private enum enumMixinStr_EINTR = `enum EINTR = 4;`;
        static if(is(typeof({ mixin(enumMixinStr_EINTR); }))) {
            mixin(enumMixinStr_EINTR);
        }
    }




    static if(!is(typeof(ESRCH))) {
        private enum enumMixinStr_ESRCH = `enum ESRCH = 3;`;
        static if(is(typeof({ mixin(enumMixinStr_ESRCH); }))) {
            mixin(enumMixinStr_ESRCH);
        }
    }




    static if(!is(typeof(ENOENT))) {
        private enum enumMixinStr_ENOENT = `enum ENOENT = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_ENOENT); }))) {
            mixin(enumMixinStr_ENOENT);
        }
    }




    static if(!is(typeof(EPERM))) {
        private enum enumMixinStr_EPERM = `enum EPERM = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_EPERM); }))) {
            mixin(enumMixinStr_EPERM);
        }
    }
    static if(!is(typeof(_ALLOCA_H))) {
        private enum enumMixinStr__ALLOCA_H = `enum _ALLOCA_H = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__ALLOCA_H); }))) {
            mixin(enumMixinStr__ALLOCA_H);
        }
    }




    static if(!is(typeof(WHIRLPOOL_COUNTER))) {
        private enum enumMixinStr_WHIRLPOOL_COUNTER = `enum WHIRLPOOL_COUNTER = ( 256 / 8 );`;
        static if(is(typeof({ mixin(enumMixinStr_WHIRLPOOL_COUNTER); }))) {
            mixin(enumMixinStr_WHIRLPOOL_COUNTER);
        }
    }




    static if(!is(typeof(WHIRLPOOL_BBLOCK))) {
        private enum enumMixinStr_WHIRLPOOL_BBLOCK = `enum WHIRLPOOL_BBLOCK = 512;`;
        static if(is(typeof({ mixin(enumMixinStr_WHIRLPOOL_BBLOCK); }))) {
            mixin(enumMixinStr_WHIRLPOOL_BBLOCK);
        }
    }




    static if(!is(typeof(WHIRLPOOL_DIGEST_LENGTH))) {
        private enum enumMixinStr_WHIRLPOOL_DIGEST_LENGTH = `enum WHIRLPOOL_DIGEST_LENGTH = ( 512 / 8 );`;
        static if(is(typeof({ mixin(enumMixinStr_WHIRLPOOL_DIGEST_LENGTH); }))) {
            mixin(enumMixinStr_WHIRLPOOL_DIGEST_LENGTH);
        }
    }






    static if(!is(typeof(UI_R_UNKNOWN_CONTROL_COMMAND))) {
        private enum enumMixinStr_UI_R_UNKNOWN_CONTROL_COMMAND = `enum UI_R_UNKNOWN_CONTROL_COMMAND = 106;`;
        static if(is(typeof({ mixin(enumMixinStr_UI_R_UNKNOWN_CONTROL_COMMAND); }))) {
            mixin(enumMixinStr_UI_R_UNKNOWN_CONTROL_COMMAND);
        }
    }




    static if(!is(typeof(UI_R_RESULT_TOO_SMALL))) {
        private enum enumMixinStr_UI_R_RESULT_TOO_SMALL = `enum UI_R_RESULT_TOO_SMALL = 101;`;
        static if(is(typeof({ mixin(enumMixinStr_UI_R_RESULT_TOO_SMALL); }))) {
            mixin(enumMixinStr_UI_R_RESULT_TOO_SMALL);
        }
    }




    static if(!is(typeof(UI_R_RESULT_TOO_LARGE))) {
        private enum enumMixinStr_UI_R_RESULT_TOO_LARGE = `enum UI_R_RESULT_TOO_LARGE = 100;`;
        static if(is(typeof({ mixin(enumMixinStr_UI_R_RESULT_TOO_LARGE); }))) {
            mixin(enumMixinStr_UI_R_RESULT_TOO_LARGE);
        }
    }




    static if(!is(typeof(UI_R_NO_RESULT_BUFFER))) {
        private enum enumMixinStr_UI_R_NO_RESULT_BUFFER = `enum UI_R_NO_RESULT_BUFFER = 105;`;
        static if(is(typeof({ mixin(enumMixinStr_UI_R_NO_RESULT_BUFFER); }))) {
            mixin(enumMixinStr_UI_R_NO_RESULT_BUFFER);
        }
    }




    static if(!is(typeof(UI_R_INDEX_TOO_SMALL))) {
        private enum enumMixinStr_UI_R_INDEX_TOO_SMALL = `enum UI_R_INDEX_TOO_SMALL = 103;`;
        static if(is(typeof({ mixin(enumMixinStr_UI_R_INDEX_TOO_SMALL); }))) {
            mixin(enumMixinStr_UI_R_INDEX_TOO_SMALL);
        }
    }




    static if(!is(typeof(UI_R_INDEX_TOO_LARGE))) {
        private enum enumMixinStr_UI_R_INDEX_TOO_LARGE = `enum UI_R_INDEX_TOO_LARGE = 102;`;
        static if(is(typeof({ mixin(enumMixinStr_UI_R_INDEX_TOO_LARGE); }))) {
            mixin(enumMixinStr_UI_R_INDEX_TOO_LARGE);
        }
    }




    static if(!is(typeof(UI_R_COMMON_OK_AND_CANCEL_CHARACTERS))) {
        private enum enumMixinStr_UI_R_COMMON_OK_AND_CANCEL_CHARACTERS = `enum UI_R_COMMON_OK_AND_CANCEL_CHARACTERS = 104;`;
        static if(is(typeof({ mixin(enumMixinStr_UI_R_COMMON_OK_AND_CANCEL_CHARACTERS); }))) {
            mixin(enumMixinStr_UI_R_COMMON_OK_AND_CANCEL_CHARACTERS);
        }
    }




    static if(!is(typeof(UI_F_UI_SET_RESULT))) {
        private enum enumMixinStr_UI_F_UI_SET_RESULT = `enum UI_F_UI_SET_RESULT = 105;`;
        static if(is(typeof({ mixin(enumMixinStr_UI_F_UI_SET_RESULT); }))) {
            mixin(enumMixinStr_UI_F_UI_SET_RESULT);
        }
    }




    static if(!is(typeof(UI_F_UI_NEW_METHOD))) {
        private enum enumMixinStr_UI_F_UI_NEW_METHOD = `enum UI_F_UI_NEW_METHOD = 104;`;
        static if(is(typeof({ mixin(enumMixinStr_UI_F_UI_NEW_METHOD); }))) {
            mixin(enumMixinStr_UI_F_UI_NEW_METHOD);
        }
    }




    static if(!is(typeof(UI_F_UI_GET0_RESULT))) {
        private enum enumMixinStr_UI_F_UI_GET0_RESULT = `enum UI_F_UI_GET0_RESULT = 107;`;
        static if(is(typeof({ mixin(enumMixinStr_UI_F_UI_GET0_RESULT); }))) {
            mixin(enumMixinStr_UI_F_UI_GET0_RESULT);
        }
    }




    static if(!is(typeof(UI_F_UI_DUP_VERIFY_STRING))) {
        private enum enumMixinStr_UI_F_UI_DUP_VERIFY_STRING = `enum UI_F_UI_DUP_VERIFY_STRING = 106;`;
        static if(is(typeof({ mixin(enumMixinStr_UI_F_UI_DUP_VERIFY_STRING); }))) {
            mixin(enumMixinStr_UI_F_UI_DUP_VERIFY_STRING);
        }
    }




    static if(!is(typeof(UI_F_UI_DUP_INPUT_STRING))) {
        private enum enumMixinStr_UI_F_UI_DUP_INPUT_STRING = `enum UI_F_UI_DUP_INPUT_STRING = 103;`;
        static if(is(typeof({ mixin(enumMixinStr_UI_F_UI_DUP_INPUT_STRING); }))) {
            mixin(enumMixinStr_UI_F_UI_DUP_INPUT_STRING);
        }
    }




    static if(!is(typeof(UI_F_UI_DUP_INPUT_BOOLEAN))) {
        private enum enumMixinStr_UI_F_UI_DUP_INPUT_BOOLEAN = `enum UI_F_UI_DUP_INPUT_BOOLEAN = 110;`;
        static if(is(typeof({ mixin(enumMixinStr_UI_F_UI_DUP_INPUT_BOOLEAN); }))) {
            mixin(enumMixinStr_UI_F_UI_DUP_INPUT_BOOLEAN);
        }
    }




    static if(!is(typeof(UI_F_UI_DUP_INFO_STRING))) {
        private enum enumMixinStr_UI_F_UI_DUP_INFO_STRING = `enum UI_F_UI_DUP_INFO_STRING = 102;`;
        static if(is(typeof({ mixin(enumMixinStr_UI_F_UI_DUP_INFO_STRING); }))) {
            mixin(enumMixinStr_UI_F_UI_DUP_INFO_STRING);
        }
    }




    static if(!is(typeof(UI_F_UI_DUP_ERROR_STRING))) {
        private enum enumMixinStr_UI_F_UI_DUP_ERROR_STRING = `enum UI_F_UI_DUP_ERROR_STRING = 101;`;
        static if(is(typeof({ mixin(enumMixinStr_UI_F_UI_DUP_ERROR_STRING); }))) {
            mixin(enumMixinStr_UI_F_UI_DUP_ERROR_STRING);
        }
    }




    static if(!is(typeof(UI_F_UI_CTRL))) {
        private enum enumMixinStr_UI_F_UI_CTRL = `enum UI_F_UI_CTRL = 111;`;
        static if(is(typeof({ mixin(enumMixinStr_UI_F_UI_CTRL); }))) {
            mixin(enumMixinStr_UI_F_UI_CTRL);
        }
    }




    static if(!is(typeof(UI_F_UI_CREATE_METHOD))) {
        private enum enumMixinStr_UI_F_UI_CREATE_METHOD = `enum UI_F_UI_CREATE_METHOD = 112;`;
        static if(is(typeof({ mixin(enumMixinStr_UI_F_UI_CREATE_METHOD); }))) {
            mixin(enumMixinStr_UI_F_UI_CREATE_METHOD);
        }
    }




    static if(!is(typeof(UI_F_GENERAL_ALLOCATE_PROMPT))) {
        private enum enumMixinStr_UI_F_GENERAL_ALLOCATE_PROMPT = `enum UI_F_GENERAL_ALLOCATE_PROMPT = 109;`;
        static if(is(typeof({ mixin(enumMixinStr_UI_F_GENERAL_ALLOCATE_PROMPT); }))) {
            mixin(enumMixinStr_UI_F_GENERAL_ALLOCATE_PROMPT);
        }
    }




    static if(!is(typeof(UI_F_GENERAL_ALLOCATE_BOOLEAN))) {
        private enum enumMixinStr_UI_F_GENERAL_ALLOCATE_BOOLEAN = `enum UI_F_GENERAL_ALLOCATE_BOOLEAN = 108;`;
        static if(is(typeof({ mixin(enumMixinStr_UI_F_GENERAL_ALLOCATE_BOOLEAN); }))) {
            mixin(enumMixinStr_UI_F_GENERAL_ALLOCATE_BOOLEAN);
        }
    }
    static if(!is(typeof(UI_CTRL_IS_REDOABLE))) {
        private enum enumMixinStr_UI_CTRL_IS_REDOABLE = `enum UI_CTRL_IS_REDOABLE = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_UI_CTRL_IS_REDOABLE); }))) {
            mixin(enumMixinStr_UI_CTRL_IS_REDOABLE);
        }
    }




    static if(!is(typeof(UI_CTRL_PRINT_ERRORS))) {
        private enum enumMixinStr_UI_CTRL_PRINT_ERRORS = `enum UI_CTRL_PRINT_ERRORS = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_UI_CTRL_PRINT_ERRORS); }))) {
            mixin(enumMixinStr_UI_CTRL_PRINT_ERRORS);
        }
    }




    static if(!is(typeof(UI_INPUT_FLAG_USER_BASE))) {
        private enum enumMixinStr_UI_INPUT_FLAG_USER_BASE = `enum UI_INPUT_FLAG_USER_BASE = 16;`;
        static if(is(typeof({ mixin(enumMixinStr_UI_INPUT_FLAG_USER_BASE); }))) {
            mixin(enumMixinStr_UI_INPUT_FLAG_USER_BASE);
        }
    }




    static if(!is(typeof(UI_INPUT_FLAG_DEFAULT_PWD))) {
        private enum enumMixinStr_UI_INPUT_FLAG_DEFAULT_PWD = `enum UI_INPUT_FLAG_DEFAULT_PWD = 0x02;`;
        static if(is(typeof({ mixin(enumMixinStr_UI_INPUT_FLAG_DEFAULT_PWD); }))) {
            mixin(enumMixinStr_UI_INPUT_FLAG_DEFAULT_PWD);
        }
    }




    static if(!is(typeof(UI_INPUT_FLAG_ECHO))) {
        private enum enumMixinStr_UI_INPUT_FLAG_ECHO = `enum UI_INPUT_FLAG_ECHO = 0x01;`;
        static if(is(typeof({ mixin(enumMixinStr_UI_INPUT_FLAG_ECHO); }))) {
            mixin(enumMixinStr_UI_INPUT_FLAG_ECHO);
        }
    }






    static if(!is(typeof(DB_ERROR_WRONG_NUM_FIELDS))) {
        private enum enumMixinStr_DB_ERROR_WRONG_NUM_FIELDS = `enum DB_ERROR_WRONG_NUM_FIELDS = 6;`;
        static if(is(typeof({ mixin(enumMixinStr_DB_ERROR_WRONG_NUM_FIELDS); }))) {
            mixin(enumMixinStr_DB_ERROR_WRONG_NUM_FIELDS);
        }
    }




    static if(!is(typeof(DB_ERROR_INSERT_INDEX_CLASH))) {
        private enum enumMixinStr_DB_ERROR_INSERT_INDEX_CLASH = `enum DB_ERROR_INSERT_INDEX_CLASH = 5;`;
        static if(is(typeof({ mixin(enumMixinStr_DB_ERROR_INSERT_INDEX_CLASH); }))) {
            mixin(enumMixinStr_DB_ERROR_INSERT_INDEX_CLASH);
        }
    }




    static if(!is(typeof(DB_ERROR_NO_INDEX))) {
        private enum enumMixinStr_DB_ERROR_NO_INDEX = `enum DB_ERROR_NO_INDEX = 4;`;
        static if(is(typeof({ mixin(enumMixinStr_DB_ERROR_NO_INDEX); }))) {
            mixin(enumMixinStr_DB_ERROR_NO_INDEX);
        }
    }




    static if(!is(typeof(DB_ERROR_INDEX_OUT_OF_RANGE))) {
        private enum enumMixinStr_DB_ERROR_INDEX_OUT_OF_RANGE = `enum DB_ERROR_INDEX_OUT_OF_RANGE = 3;`;
        static if(is(typeof({ mixin(enumMixinStr_DB_ERROR_INDEX_OUT_OF_RANGE); }))) {
            mixin(enumMixinStr_DB_ERROR_INDEX_OUT_OF_RANGE);
        }
    }




    static if(!is(typeof(DB_ERROR_INDEX_CLASH))) {
        private enum enumMixinStr_DB_ERROR_INDEX_CLASH = `enum DB_ERROR_INDEX_CLASH = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_DB_ERROR_INDEX_CLASH); }))) {
            mixin(enumMixinStr_DB_ERROR_INDEX_CLASH);
        }
    }




    static if(!is(typeof(DB_ERROR_MALLOC))) {
        private enum enumMixinStr_DB_ERROR_MALLOC = `enum DB_ERROR_MALLOC = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_DB_ERROR_MALLOC); }))) {
            mixin(enumMixinStr_DB_ERROR_MALLOC);
        }
    }




    static if(!is(typeof(DB_ERROR_OK))) {
        private enum enumMixinStr_DB_ERROR_OK = `enum DB_ERROR_OK = 0;`;
        static if(is(typeof({ mixin(enumMixinStr_DB_ERROR_OK); }))) {
            mixin(enumMixinStr_DB_ERROR_OK);
        }
    }






    static if(!is(typeof(TS_R_WRONG_CONTENT_TYPE))) {
        private enum enumMixinStr_TS_R_WRONG_CONTENT_TYPE = `enum TS_R_WRONG_CONTENT_TYPE = 114;`;
        static if(is(typeof({ mixin(enumMixinStr_TS_R_WRONG_CONTENT_TYPE); }))) {
            mixin(enumMixinStr_TS_R_WRONG_CONTENT_TYPE);
        }
    }




    static if(!is(typeof(TS_R_VAR_LOOKUP_FAILURE))) {
        private enum enumMixinStr_TS_R_VAR_LOOKUP_FAILURE = `enum TS_R_VAR_LOOKUP_FAILURE = 136;`;
        static if(is(typeof({ mixin(enumMixinStr_TS_R_VAR_LOOKUP_FAILURE); }))) {
            mixin(enumMixinStr_TS_R_VAR_LOOKUP_FAILURE);
        }
    }




    static if(!is(typeof(TS_R_VAR_BAD_VALUE))) {
        private enum enumMixinStr_TS_R_VAR_BAD_VALUE = `enum TS_R_VAR_BAD_VALUE = 135;`;
        static if(is(typeof({ mixin(enumMixinStr_TS_R_VAR_BAD_VALUE); }))) {
            mixin(enumMixinStr_TS_R_VAR_BAD_VALUE);
        }
    }




    static if(!is(typeof(TS_R_UNSUPPORTED_VERSION))) {
        private enum enumMixinStr_TS_R_UNSUPPORTED_VERSION = `enum TS_R_UNSUPPORTED_VERSION = 113;`;
        static if(is(typeof({ mixin(enumMixinStr_TS_R_UNSUPPORTED_VERSION); }))) {
            mixin(enumMixinStr_TS_R_UNSUPPORTED_VERSION);
        }
    }




    static if(!is(typeof(TS_R_UNSUPPORTED_MD_ALGORITHM))) {
        private enum enumMixinStr_TS_R_UNSUPPORTED_MD_ALGORITHM = `enum TS_R_UNSUPPORTED_MD_ALGORITHM = 126;`;
        static if(is(typeof({ mixin(enumMixinStr_TS_R_UNSUPPORTED_MD_ALGORITHM); }))) {
            mixin(enumMixinStr_TS_R_UNSUPPORTED_MD_ALGORITHM);
        }
    }




    static if(!is(typeof(TS_R_UNACCEPTABLE_POLICY))) {
        private enum enumMixinStr_TS_R_UNACCEPTABLE_POLICY = `enum TS_R_UNACCEPTABLE_POLICY = 125;`;
        static if(is(typeof({ mixin(enumMixinStr_TS_R_UNACCEPTABLE_POLICY); }))) {
            mixin(enumMixinStr_TS_R_UNACCEPTABLE_POLICY);
        }
    }




    static if(!is(typeof(TS_R_TS_DATASIGN))) {
        private enum enumMixinStr_TS_R_TS_DATASIGN = `enum TS_R_TS_DATASIGN = 124;`;
        static if(is(typeof({ mixin(enumMixinStr_TS_R_TS_DATASIGN); }))) {
            mixin(enumMixinStr_TS_R_TS_DATASIGN);
        }
    }




    static if(!is(typeof(TS_R_TST_INFO_SETUP_ERROR))) {
        private enum enumMixinStr_TS_R_TST_INFO_SETUP_ERROR = `enum TS_R_TST_INFO_SETUP_ERROR = 123;`;
        static if(is(typeof({ mixin(enumMixinStr_TS_R_TST_INFO_SETUP_ERROR); }))) {
            mixin(enumMixinStr_TS_R_TST_INFO_SETUP_ERROR);
        }
    }




    static if(!is(typeof(TS_R_TSA_UNTRUSTED))) {
        private enum enumMixinStr_TS_R_TSA_UNTRUSTED = `enum TS_R_TSA_UNTRUSTED = 112;`;
        static if(is(typeof({ mixin(enumMixinStr_TS_R_TSA_UNTRUSTED); }))) {
            mixin(enumMixinStr_TS_R_TSA_UNTRUSTED);
        }
    }




    static if(!is(typeof(TS_R_TSA_NAME_MISMATCH))) {
        private enum enumMixinStr_TS_R_TSA_NAME_MISMATCH = `enum TS_R_TSA_NAME_MISMATCH = 111;`;
        static if(is(typeof({ mixin(enumMixinStr_TS_R_TSA_NAME_MISMATCH); }))) {
            mixin(enumMixinStr_TS_R_TSA_NAME_MISMATCH);
        }
    }




    static if(!is(typeof(TS_R_TOKEN_PRESENT))) {
        private enum enumMixinStr_TS_R_TOKEN_PRESENT = `enum TS_R_TOKEN_PRESENT = 131;`;
        static if(is(typeof({ mixin(enumMixinStr_TS_R_TOKEN_PRESENT); }))) {
            mixin(enumMixinStr_TS_R_TOKEN_PRESENT);
        }
    }




    static if(!is(typeof(TS_R_TOKEN_NOT_PRESENT))) {
        private enum enumMixinStr_TS_R_TOKEN_NOT_PRESENT = `enum TS_R_TOKEN_NOT_PRESENT = 130;`;
        static if(is(typeof({ mixin(enumMixinStr_TS_R_TOKEN_NOT_PRESENT); }))) {
            mixin(enumMixinStr_TS_R_TOKEN_NOT_PRESENT);
        }
    }




    static if(!is(typeof(TS_R_TIME_SYSCALL_ERROR))) {
        private enum enumMixinStr_TS_R_TIME_SYSCALL_ERROR = `enum TS_R_TIME_SYSCALL_ERROR = 122;`;
        static if(is(typeof({ mixin(enumMixinStr_TS_R_TIME_SYSCALL_ERROR); }))) {
            mixin(enumMixinStr_TS_R_TIME_SYSCALL_ERROR);
        }
    }




    static if(!is(typeof(TS_R_THERE_MUST_BE_ONE_SIGNER))) {
        private enum enumMixinStr_TS_R_THERE_MUST_BE_ONE_SIGNER = `enum TS_R_THERE_MUST_BE_ONE_SIGNER = 110;`;
        static if(is(typeof({ mixin(enumMixinStr_TS_R_THERE_MUST_BE_ONE_SIGNER); }))) {
            mixin(enumMixinStr_TS_R_THERE_MUST_BE_ONE_SIGNER);
        }
    }




    static if(!is(typeof(TS_R_SIGNATURE_FAILURE))) {
        private enum enumMixinStr_TS_R_SIGNATURE_FAILURE = `enum TS_R_SIGNATURE_FAILURE = 109;`;
        static if(is(typeof({ mixin(enumMixinStr_TS_R_SIGNATURE_FAILURE); }))) {
            mixin(enumMixinStr_TS_R_SIGNATURE_FAILURE);
        }
    }




    static if(!is(typeof(TS_R_RESPONSE_SETUP_ERROR))) {
        private enum enumMixinStr_TS_R_RESPONSE_SETUP_ERROR = `enum TS_R_RESPONSE_SETUP_ERROR = 121;`;
        static if(is(typeof({ mixin(enumMixinStr_TS_R_RESPONSE_SETUP_ERROR); }))) {
            mixin(enumMixinStr_TS_R_RESPONSE_SETUP_ERROR);
        }
    }




    static if(!is(typeof(TS_R_PRIVATE_KEY_DOES_NOT_MATCH_CERTIFICATE))) {
        private enum enumMixinStr_TS_R_PRIVATE_KEY_DOES_NOT_MATCH_CERTIFICATE = `enum TS_R_PRIVATE_KEY_DOES_NOT_MATCH_CERTIFICATE = 120;`;
        static if(is(typeof({ mixin(enumMixinStr_TS_R_PRIVATE_KEY_DOES_NOT_MATCH_CERTIFICATE); }))) {
            mixin(enumMixinStr_TS_R_PRIVATE_KEY_DOES_NOT_MATCH_CERTIFICATE);
        }
    }




    static if(!is(typeof(TS_R_POLICY_MISMATCH))) {
        private enum enumMixinStr_TS_R_POLICY_MISMATCH = `enum TS_R_POLICY_MISMATCH = 108;`;
        static if(is(typeof({ mixin(enumMixinStr_TS_R_POLICY_MISMATCH); }))) {
            mixin(enumMixinStr_TS_R_POLICY_MISMATCH);
        }
    }




    static if(!is(typeof(TS_R_PKCS7_TO_TS_TST_INFO_FAILED))) {
        private enum enumMixinStr_TS_R_PKCS7_TO_TS_TST_INFO_FAILED = `enum TS_R_PKCS7_TO_TS_TST_INFO_FAILED = 129;`;
        static if(is(typeof({ mixin(enumMixinStr_TS_R_PKCS7_TO_TS_TST_INFO_FAILED); }))) {
            mixin(enumMixinStr_TS_R_PKCS7_TO_TS_TST_INFO_FAILED);
        }
    }




    static if(!is(typeof(TS_R_PKCS7_ADD_SIGNED_ATTR_ERROR))) {
        private enum enumMixinStr_TS_R_PKCS7_ADD_SIGNED_ATTR_ERROR = `enum TS_R_PKCS7_ADD_SIGNED_ATTR_ERROR = 119;`;
        static if(is(typeof({ mixin(enumMixinStr_TS_R_PKCS7_ADD_SIGNED_ATTR_ERROR); }))) {
            mixin(enumMixinStr_TS_R_PKCS7_ADD_SIGNED_ATTR_ERROR);
        }
    }




    static if(!is(typeof(TS_R_PKCS7_ADD_SIGNATURE_ERROR))) {
        private enum enumMixinStr_TS_R_PKCS7_ADD_SIGNATURE_ERROR = `enum TS_R_PKCS7_ADD_SIGNATURE_ERROR = 118;`;
        static if(is(typeof({ mixin(enumMixinStr_TS_R_PKCS7_ADD_SIGNATURE_ERROR); }))) {
            mixin(enumMixinStr_TS_R_PKCS7_ADD_SIGNATURE_ERROR);
        }
    }




    static if(!is(typeof(TS_R_NO_TIME_STAMP_TOKEN))) {
        private enum enumMixinStr_TS_R_NO_TIME_STAMP_TOKEN = `enum TS_R_NO_TIME_STAMP_TOKEN = 107;`;
        static if(is(typeof({ mixin(enumMixinStr_TS_R_NO_TIME_STAMP_TOKEN); }))) {
            mixin(enumMixinStr_TS_R_NO_TIME_STAMP_TOKEN);
        }
    }




    static if(!is(typeof(TS_R_NO_CONTENT))) {
        private enum enumMixinStr_TS_R_NO_CONTENT = `enum TS_R_NO_CONTENT = 106;`;
        static if(is(typeof({ mixin(enumMixinStr_TS_R_NO_CONTENT); }))) {
            mixin(enumMixinStr_TS_R_NO_CONTENT);
        }
    }




    static if(!is(typeof(TS_R_NONCE_NOT_RETURNED))) {
        private enum enumMixinStr_TS_R_NONCE_NOT_RETURNED = `enum TS_R_NONCE_NOT_RETURNED = 105;`;
        static if(is(typeof({ mixin(enumMixinStr_TS_R_NONCE_NOT_RETURNED); }))) {
            mixin(enumMixinStr_TS_R_NONCE_NOT_RETURNED);
        }
    }




    static if(!is(typeof(TS_R_NONCE_MISMATCH))) {
        private enum enumMixinStr_TS_R_NONCE_MISMATCH = `enum TS_R_NONCE_MISMATCH = 104;`;
        static if(is(typeof({ mixin(enumMixinStr_TS_R_NONCE_MISMATCH); }))) {
            mixin(enumMixinStr_TS_R_NONCE_MISMATCH);
        }
    }




    static if(!is(typeof(TS_R_MESSAGE_IMPRINT_MISMATCH))) {
        private enum enumMixinStr_TS_R_MESSAGE_IMPRINT_MISMATCH = `enum TS_R_MESSAGE_IMPRINT_MISMATCH = 103;`;
        static if(is(typeof({ mixin(enumMixinStr_TS_R_MESSAGE_IMPRINT_MISMATCH); }))) {
            mixin(enumMixinStr_TS_R_MESSAGE_IMPRINT_MISMATCH);
        }
    }




    static if(!is(typeof(TS_R_INVALID_SIGNER_CERTIFICATE_PURPOSE))) {
        private enum enumMixinStr_TS_R_INVALID_SIGNER_CERTIFICATE_PURPOSE = `enum TS_R_INVALID_SIGNER_CERTIFICATE_PURPOSE = 117;`;
        static if(is(typeof({ mixin(enumMixinStr_TS_R_INVALID_SIGNER_CERTIFICATE_PURPOSE); }))) {
            mixin(enumMixinStr_TS_R_INVALID_SIGNER_CERTIFICATE_PURPOSE);
        }
    }




    static if(!is(typeof(TS_R_INVALID_NULL_POINTER))) {
        private enum enumMixinStr_TS_R_INVALID_NULL_POINTER = `enum TS_R_INVALID_NULL_POINTER = 102;`;
        static if(is(typeof({ mixin(enumMixinStr_TS_R_INVALID_NULL_POINTER); }))) {
            mixin(enumMixinStr_TS_R_INVALID_NULL_POINTER);
        }
    }




    static if(!is(typeof(TS_R_ESS_SIGNING_CERTIFICATE_ERROR))) {
        private enum enumMixinStr_TS_R_ESS_SIGNING_CERTIFICATE_ERROR = `enum TS_R_ESS_SIGNING_CERTIFICATE_ERROR = 101;`;
        static if(is(typeof({ mixin(enumMixinStr_TS_R_ESS_SIGNING_CERTIFICATE_ERROR); }))) {
            mixin(enumMixinStr_TS_R_ESS_SIGNING_CERTIFICATE_ERROR);
        }
    }




    static if(!is(typeof(TS_R_ESS_ADD_SIGNING_CERT_ERROR))) {
        private enum enumMixinStr_TS_R_ESS_ADD_SIGNING_CERT_ERROR = `enum TS_R_ESS_ADD_SIGNING_CERT_ERROR = 116;`;
        static if(is(typeof({ mixin(enumMixinStr_TS_R_ESS_ADD_SIGNING_CERT_ERROR); }))) {
            mixin(enumMixinStr_TS_R_ESS_ADD_SIGNING_CERT_ERROR);
        }
    }




    static if(!is(typeof(TS_R_DETACHED_CONTENT))) {
        private enum enumMixinStr_TS_R_DETACHED_CONTENT = `enum TS_R_DETACHED_CONTENT = 134;`;
        static if(is(typeof({ mixin(enumMixinStr_TS_R_DETACHED_CONTENT); }))) {
            mixin(enumMixinStr_TS_R_DETACHED_CONTENT);
        }
    }




    static if(!is(typeof(TS_R_COULD_NOT_SET_TIME))) {
        private enum enumMixinStr_TS_R_COULD_NOT_SET_TIME = `enum TS_R_COULD_NOT_SET_TIME = 115;`;
        static if(is(typeof({ mixin(enumMixinStr_TS_R_COULD_NOT_SET_TIME); }))) {
            mixin(enumMixinStr_TS_R_COULD_NOT_SET_TIME);
        }
    }




    static if(!is(typeof(TS_R_COULD_NOT_SET_ENGINE))) {
        private enum enumMixinStr_TS_R_COULD_NOT_SET_ENGINE = `enum TS_R_COULD_NOT_SET_ENGINE = 127;`;
        static if(is(typeof({ mixin(enumMixinStr_TS_R_COULD_NOT_SET_ENGINE); }))) {
            mixin(enumMixinStr_TS_R_COULD_NOT_SET_ENGINE);
        }
    }




    static if(!is(typeof(TS_R_CERTIFICATE_VERIFY_ERROR))) {
        private enum enumMixinStr_TS_R_CERTIFICATE_VERIFY_ERROR = `enum TS_R_CERTIFICATE_VERIFY_ERROR = 100;`;
        static if(is(typeof({ mixin(enumMixinStr_TS_R_CERTIFICATE_VERIFY_ERROR); }))) {
            mixin(enumMixinStr_TS_R_CERTIFICATE_VERIFY_ERROR);
        }
    }




    static if(!is(typeof(TS_R_CANNOT_LOAD_KEY))) {
        private enum enumMixinStr_TS_R_CANNOT_LOAD_KEY = `enum TS_R_CANNOT_LOAD_KEY = 138;`;
        static if(is(typeof({ mixin(enumMixinStr_TS_R_CANNOT_LOAD_KEY); }))) {
            mixin(enumMixinStr_TS_R_CANNOT_LOAD_KEY);
        }
    }




    static if(!is(typeof(TS_R_CANNOT_LOAD_CERT))) {
        private enum enumMixinStr_TS_R_CANNOT_LOAD_CERT = `enum TS_R_CANNOT_LOAD_CERT = 137;`;
        static if(is(typeof({ mixin(enumMixinStr_TS_R_CANNOT_LOAD_CERT); }))) {
            mixin(enumMixinStr_TS_R_CANNOT_LOAD_CERT);
        }
    }




    static if(!is(typeof(TS_R_BAD_TYPE))) {
        private enum enumMixinStr_TS_R_BAD_TYPE = `enum TS_R_BAD_TYPE = 133;`;
        static if(is(typeof({ mixin(enumMixinStr_TS_R_BAD_TYPE); }))) {
            mixin(enumMixinStr_TS_R_BAD_TYPE);
        }
    }




    static if(!is(typeof(TS_R_BAD_PKCS7_TYPE))) {
        private enum enumMixinStr_TS_R_BAD_PKCS7_TYPE = `enum TS_R_BAD_PKCS7_TYPE = 132;`;
        static if(is(typeof({ mixin(enumMixinStr_TS_R_BAD_PKCS7_TYPE); }))) {
            mixin(enumMixinStr_TS_R_BAD_PKCS7_TYPE);
        }
    }




    static if(!is(typeof(TS_F_TS_VERIFY_CTX_NEW))) {
        private enum enumMixinStr_TS_F_TS_VERIFY_CTX_NEW = `enum TS_F_TS_VERIFY_CTX_NEW = 144;`;
        static if(is(typeof({ mixin(enumMixinStr_TS_F_TS_VERIFY_CTX_NEW); }))) {
            mixin(enumMixinStr_TS_F_TS_VERIFY_CTX_NEW);
        }
    }




    static if(!is(typeof(TS_F_TS_VERIFY_CERT))) {
        private enum enumMixinStr_TS_F_TS_VERIFY_CERT = `enum TS_F_TS_VERIFY_CERT = 109;`;
        static if(is(typeof({ mixin(enumMixinStr_TS_F_TS_VERIFY_CERT); }))) {
            mixin(enumMixinStr_TS_F_TS_VERIFY_CERT);
        }
    }




    static if(!is(typeof(TS_F_TS_VERIFY))) {
        private enum enumMixinStr_TS_F_TS_VERIFY = `enum TS_F_TS_VERIFY = 108;`;
        static if(is(typeof({ mixin(enumMixinStr_TS_F_TS_VERIFY); }))) {
            mixin(enumMixinStr_TS_F_TS_VERIFY);
        }
    }




    static if(!is(typeof(TS_F_TS_TST_INFO_SET_TSA))) {
        private enum enumMixinStr_TS_F_TS_TST_INFO_SET_TSA = `enum TS_F_TS_TST_INFO_SET_TSA = 143;`;
        static if(is(typeof({ mixin(enumMixinStr_TS_F_TS_TST_INFO_SET_TSA); }))) {
            mixin(enumMixinStr_TS_F_TS_TST_INFO_SET_TSA);
        }
    }




    static if(!is(typeof(TS_F_TS_TST_INFO_SET_TIME))) {
        private enum enumMixinStr_TS_F_TS_TST_INFO_SET_TIME = `enum TS_F_TS_TST_INFO_SET_TIME = 142;`;
        static if(is(typeof({ mixin(enumMixinStr_TS_F_TS_TST_INFO_SET_TIME); }))) {
            mixin(enumMixinStr_TS_F_TS_TST_INFO_SET_TIME);
        }
    }






    static if(!is(typeof(TS_F_TS_TST_INFO_SET_SERIAL))) {
        private enum enumMixinStr_TS_F_TS_TST_INFO_SET_SERIAL = `enum TS_F_TS_TST_INFO_SET_SERIAL = 141;`;
        static if(is(typeof({ mixin(enumMixinStr_TS_F_TS_TST_INFO_SET_SERIAL); }))) {
            mixin(enumMixinStr_TS_F_TS_TST_INFO_SET_SERIAL);
        }
    }




    static if(!is(typeof(TS_F_TS_TST_INFO_SET_POLICY_ID))) {
        private enum enumMixinStr_TS_F_TS_TST_INFO_SET_POLICY_ID = `enum TS_F_TS_TST_INFO_SET_POLICY_ID = 140;`;
        static if(is(typeof({ mixin(enumMixinStr_TS_F_TS_TST_INFO_SET_POLICY_ID); }))) {
            mixin(enumMixinStr_TS_F_TS_TST_INFO_SET_POLICY_ID);
        }
    }




    static if(!is(typeof(TS_F_TS_TST_INFO_SET_NONCE))) {
        private enum enumMixinStr_TS_F_TS_TST_INFO_SET_NONCE = `enum TS_F_TS_TST_INFO_SET_NONCE = 139;`;
        static if(is(typeof({ mixin(enumMixinStr_TS_F_TS_TST_INFO_SET_NONCE); }))) {
            mixin(enumMixinStr_TS_F_TS_TST_INFO_SET_NONCE);
        }
    }




    static if(!is(typeof(TS_F_TS_TST_INFO_SET_MSG_IMPRINT))) {
        private enum enumMixinStr_TS_F_TS_TST_INFO_SET_MSG_IMPRINT = `enum TS_F_TS_TST_INFO_SET_MSG_IMPRINT = 138;`;
        static if(is(typeof({ mixin(enumMixinStr_TS_F_TS_TST_INFO_SET_MSG_IMPRINT); }))) {
            mixin(enumMixinStr_TS_F_TS_TST_INFO_SET_MSG_IMPRINT);
        }
    }




    static if(!is(typeof(TS_F_TS_TST_INFO_SET_ACCURACY))) {
        private enum enumMixinStr_TS_F_TS_TST_INFO_SET_ACCURACY = `enum TS_F_TS_TST_INFO_SET_ACCURACY = 137;`;
        static if(is(typeof({ mixin(enumMixinStr_TS_F_TS_TST_INFO_SET_ACCURACY); }))) {
            mixin(enumMixinStr_TS_F_TS_TST_INFO_SET_ACCURACY);
        }
    }




    static if(!is(typeof(TS_F_TS_RESP_VERIFY_SIGNATURE))) {
        private enum enumMixinStr_TS_F_TS_RESP_VERIFY_SIGNATURE = `enum TS_F_TS_RESP_VERIFY_SIGNATURE = 106;`;
        static if(is(typeof({ mixin(enumMixinStr_TS_F_TS_RESP_VERIFY_SIGNATURE); }))) {
            mixin(enumMixinStr_TS_F_TS_RESP_VERIFY_SIGNATURE);
        }
    }




    static if(!is(typeof(PEM_BUFSIZE))) {
        private enum enumMixinStr_PEM_BUFSIZE = `enum PEM_BUFSIZE = 1024;`;
        static if(is(typeof({ mixin(enumMixinStr_PEM_BUFSIZE); }))) {
            mixin(enumMixinStr_PEM_BUFSIZE);
        }
    }




    static if(!is(typeof(PEM_STRING_X509_OLD))) {
        private enum enumMixinStr_PEM_STRING_X509_OLD = `enum PEM_STRING_X509_OLD = "X509 CERTIFICATE";`;
        static if(is(typeof({ mixin(enumMixinStr_PEM_STRING_X509_OLD); }))) {
            mixin(enumMixinStr_PEM_STRING_X509_OLD);
        }
    }




    static if(!is(typeof(PEM_STRING_X509))) {
        private enum enumMixinStr_PEM_STRING_X509 = `enum PEM_STRING_X509 = "CERTIFICATE";`;
        static if(is(typeof({ mixin(enumMixinStr_PEM_STRING_X509); }))) {
            mixin(enumMixinStr_PEM_STRING_X509);
        }
    }




    static if(!is(typeof(PEM_STRING_X509_TRUSTED))) {
        private enum enumMixinStr_PEM_STRING_X509_TRUSTED = `enum PEM_STRING_X509_TRUSTED = "TRUSTED CERTIFICATE";`;
        static if(is(typeof({ mixin(enumMixinStr_PEM_STRING_X509_TRUSTED); }))) {
            mixin(enumMixinStr_PEM_STRING_X509_TRUSTED);
        }
    }




    static if(!is(typeof(PEM_STRING_X509_REQ_OLD))) {
        private enum enumMixinStr_PEM_STRING_X509_REQ_OLD = `enum PEM_STRING_X509_REQ_OLD = "NEW CERTIFICATE REQUEST";`;
        static if(is(typeof({ mixin(enumMixinStr_PEM_STRING_X509_REQ_OLD); }))) {
            mixin(enumMixinStr_PEM_STRING_X509_REQ_OLD);
        }
    }




    static if(!is(typeof(PEM_STRING_X509_REQ))) {
        private enum enumMixinStr_PEM_STRING_X509_REQ = `enum PEM_STRING_X509_REQ = "CERTIFICATE REQUEST";`;
        static if(is(typeof({ mixin(enumMixinStr_PEM_STRING_X509_REQ); }))) {
            mixin(enumMixinStr_PEM_STRING_X509_REQ);
        }
    }




    static if(!is(typeof(PEM_STRING_X509_CRL))) {
        private enum enumMixinStr_PEM_STRING_X509_CRL = `enum PEM_STRING_X509_CRL = "X509 CRL";`;
        static if(is(typeof({ mixin(enumMixinStr_PEM_STRING_X509_CRL); }))) {
            mixin(enumMixinStr_PEM_STRING_X509_CRL);
        }
    }




    static if(!is(typeof(PEM_STRING_EVP_PKEY))) {
        private enum enumMixinStr_PEM_STRING_EVP_PKEY = `enum PEM_STRING_EVP_PKEY = "ANY PRIVATE KEY";`;
        static if(is(typeof({ mixin(enumMixinStr_PEM_STRING_EVP_PKEY); }))) {
            mixin(enumMixinStr_PEM_STRING_EVP_PKEY);
        }
    }




    static if(!is(typeof(PEM_STRING_PUBLIC))) {
        private enum enumMixinStr_PEM_STRING_PUBLIC = `enum PEM_STRING_PUBLIC = "PUBLIC KEY";`;
        static if(is(typeof({ mixin(enumMixinStr_PEM_STRING_PUBLIC); }))) {
            mixin(enumMixinStr_PEM_STRING_PUBLIC);
        }
    }




    static if(!is(typeof(PEM_STRING_RSA))) {
        private enum enumMixinStr_PEM_STRING_RSA = `enum PEM_STRING_RSA = "RSA PRIVATE KEY";`;
        static if(is(typeof({ mixin(enumMixinStr_PEM_STRING_RSA); }))) {
            mixin(enumMixinStr_PEM_STRING_RSA);
        }
    }




    static if(!is(typeof(PEM_STRING_RSA_PUBLIC))) {
        private enum enumMixinStr_PEM_STRING_RSA_PUBLIC = `enum PEM_STRING_RSA_PUBLIC = "RSA PUBLIC KEY";`;
        static if(is(typeof({ mixin(enumMixinStr_PEM_STRING_RSA_PUBLIC); }))) {
            mixin(enumMixinStr_PEM_STRING_RSA_PUBLIC);
        }
    }




    static if(!is(typeof(PEM_STRING_DSA))) {
        private enum enumMixinStr_PEM_STRING_DSA = `enum PEM_STRING_DSA = "DSA PRIVATE KEY";`;
        static if(is(typeof({ mixin(enumMixinStr_PEM_STRING_DSA); }))) {
            mixin(enumMixinStr_PEM_STRING_DSA);
        }
    }




    static if(!is(typeof(PEM_STRING_DSA_PUBLIC))) {
        private enum enumMixinStr_PEM_STRING_DSA_PUBLIC = `enum PEM_STRING_DSA_PUBLIC = "DSA PUBLIC KEY";`;
        static if(is(typeof({ mixin(enumMixinStr_PEM_STRING_DSA_PUBLIC); }))) {
            mixin(enumMixinStr_PEM_STRING_DSA_PUBLIC);
        }
    }




    static if(!is(typeof(PEM_STRING_PKCS7))) {
        private enum enumMixinStr_PEM_STRING_PKCS7 = `enum PEM_STRING_PKCS7 = "PKCS7";`;
        static if(is(typeof({ mixin(enumMixinStr_PEM_STRING_PKCS7); }))) {
            mixin(enumMixinStr_PEM_STRING_PKCS7);
        }
    }




    static if(!is(typeof(PEM_STRING_PKCS7_SIGNED))) {
        private enum enumMixinStr_PEM_STRING_PKCS7_SIGNED = `enum PEM_STRING_PKCS7_SIGNED = "PKCS #7 SIGNED DATA";`;
        static if(is(typeof({ mixin(enumMixinStr_PEM_STRING_PKCS7_SIGNED); }))) {
            mixin(enumMixinStr_PEM_STRING_PKCS7_SIGNED);
        }
    }




    static if(!is(typeof(PEM_STRING_PKCS8))) {
        private enum enumMixinStr_PEM_STRING_PKCS8 = `enum PEM_STRING_PKCS8 = "ENCRYPTED PRIVATE KEY";`;
        static if(is(typeof({ mixin(enumMixinStr_PEM_STRING_PKCS8); }))) {
            mixin(enumMixinStr_PEM_STRING_PKCS8);
        }
    }




    static if(!is(typeof(PEM_STRING_PKCS8INF))) {
        private enum enumMixinStr_PEM_STRING_PKCS8INF = `enum PEM_STRING_PKCS8INF = "PRIVATE KEY";`;
        static if(is(typeof({ mixin(enumMixinStr_PEM_STRING_PKCS8INF); }))) {
            mixin(enumMixinStr_PEM_STRING_PKCS8INF);
        }
    }




    static if(!is(typeof(PEM_STRING_DHPARAMS))) {
        private enum enumMixinStr_PEM_STRING_DHPARAMS = `enum PEM_STRING_DHPARAMS = "DH PARAMETERS";`;
        static if(is(typeof({ mixin(enumMixinStr_PEM_STRING_DHPARAMS); }))) {
            mixin(enumMixinStr_PEM_STRING_DHPARAMS);
        }
    }




    static if(!is(typeof(PEM_STRING_DHXPARAMS))) {
        private enum enumMixinStr_PEM_STRING_DHXPARAMS = `enum PEM_STRING_DHXPARAMS = "X9.42 DH PARAMETERS";`;
        static if(is(typeof({ mixin(enumMixinStr_PEM_STRING_DHXPARAMS); }))) {
            mixin(enumMixinStr_PEM_STRING_DHXPARAMS);
        }
    }




    static if(!is(typeof(PEM_STRING_SSL_SESSION))) {
        private enum enumMixinStr_PEM_STRING_SSL_SESSION = `enum PEM_STRING_SSL_SESSION = "SSL SESSION PARAMETERS";`;
        static if(is(typeof({ mixin(enumMixinStr_PEM_STRING_SSL_SESSION); }))) {
            mixin(enumMixinStr_PEM_STRING_SSL_SESSION);
        }
    }




    static if(!is(typeof(PEM_STRING_DSAPARAMS))) {
        private enum enumMixinStr_PEM_STRING_DSAPARAMS = `enum PEM_STRING_DSAPARAMS = "DSA PARAMETERS";`;
        static if(is(typeof({ mixin(enumMixinStr_PEM_STRING_DSAPARAMS); }))) {
            mixin(enumMixinStr_PEM_STRING_DSAPARAMS);
        }
    }




    static if(!is(typeof(PEM_STRING_ECDSA_PUBLIC))) {
        private enum enumMixinStr_PEM_STRING_ECDSA_PUBLIC = `enum PEM_STRING_ECDSA_PUBLIC = "ECDSA PUBLIC KEY";`;
        static if(is(typeof({ mixin(enumMixinStr_PEM_STRING_ECDSA_PUBLIC); }))) {
            mixin(enumMixinStr_PEM_STRING_ECDSA_PUBLIC);
        }
    }




    static if(!is(typeof(PEM_STRING_ECPARAMETERS))) {
        private enum enumMixinStr_PEM_STRING_ECPARAMETERS = `enum PEM_STRING_ECPARAMETERS = "EC PARAMETERS";`;
        static if(is(typeof({ mixin(enumMixinStr_PEM_STRING_ECPARAMETERS); }))) {
            mixin(enumMixinStr_PEM_STRING_ECPARAMETERS);
        }
    }




    static if(!is(typeof(PEM_STRING_ECPRIVATEKEY))) {
        private enum enumMixinStr_PEM_STRING_ECPRIVATEKEY = `enum PEM_STRING_ECPRIVATEKEY = "EC PRIVATE KEY";`;
        static if(is(typeof({ mixin(enumMixinStr_PEM_STRING_ECPRIVATEKEY); }))) {
            mixin(enumMixinStr_PEM_STRING_ECPRIVATEKEY);
        }
    }




    static if(!is(typeof(PEM_STRING_PARAMETERS))) {
        private enum enumMixinStr_PEM_STRING_PARAMETERS = `enum PEM_STRING_PARAMETERS = "PARAMETERS";`;
        static if(is(typeof({ mixin(enumMixinStr_PEM_STRING_PARAMETERS); }))) {
            mixin(enumMixinStr_PEM_STRING_PARAMETERS);
        }
    }




    static if(!is(typeof(PEM_STRING_CMS))) {
        private enum enumMixinStr_PEM_STRING_CMS = `enum PEM_STRING_CMS = "CMS";`;
        static if(is(typeof({ mixin(enumMixinStr_PEM_STRING_CMS); }))) {
            mixin(enumMixinStr_PEM_STRING_CMS);
        }
    }




    static if(!is(typeof(PEM_TYPE_ENCRYPTED))) {
        private enum enumMixinStr_PEM_TYPE_ENCRYPTED = `enum PEM_TYPE_ENCRYPTED = 10;`;
        static if(is(typeof({ mixin(enumMixinStr_PEM_TYPE_ENCRYPTED); }))) {
            mixin(enumMixinStr_PEM_TYPE_ENCRYPTED);
        }
    }




    static if(!is(typeof(PEM_TYPE_MIC_ONLY))) {
        private enum enumMixinStr_PEM_TYPE_MIC_ONLY = `enum PEM_TYPE_MIC_ONLY = 20;`;
        static if(is(typeof({ mixin(enumMixinStr_PEM_TYPE_MIC_ONLY); }))) {
            mixin(enumMixinStr_PEM_TYPE_MIC_ONLY);
        }
    }




    static if(!is(typeof(PEM_TYPE_MIC_CLEAR))) {
        private enum enumMixinStr_PEM_TYPE_MIC_CLEAR = `enum PEM_TYPE_MIC_CLEAR = 30;`;
        static if(is(typeof({ mixin(enumMixinStr_PEM_TYPE_MIC_CLEAR); }))) {
            mixin(enumMixinStr_PEM_TYPE_MIC_CLEAR);
        }
    }




    static if(!is(typeof(PEM_TYPE_CLEAR))) {
        private enum enumMixinStr_PEM_TYPE_CLEAR = `enum PEM_TYPE_CLEAR = 40;`;
        static if(is(typeof({ mixin(enumMixinStr_PEM_TYPE_CLEAR); }))) {
            mixin(enumMixinStr_PEM_TYPE_CLEAR);
        }
    }
    static if(!is(typeof(TS_F_TS_RESP_SIGN))) {
        private enum enumMixinStr_TS_F_TS_RESP_SIGN = `enum TS_F_TS_RESP_SIGN = 136;`;
        static if(is(typeof({ mixin(enumMixinStr_TS_F_TS_RESP_SIGN); }))) {
            mixin(enumMixinStr_TS_F_TS_RESP_SIGN);
        }
    }




    static if(!is(typeof(TS_F_TS_RESP_SET_TST_INFO))) {
        private enum enumMixinStr_TS_F_TS_RESP_SET_TST_INFO = `enum TS_F_TS_RESP_SET_TST_INFO = 150;`;
        static if(is(typeof({ mixin(enumMixinStr_TS_F_TS_RESP_SET_TST_INFO); }))) {
            mixin(enumMixinStr_TS_F_TS_RESP_SET_TST_INFO);
        }
    }




    static if(!is(typeof(TS_F_TS_RESP_SET_STATUS_INFO))) {
        private enum enumMixinStr_TS_F_TS_RESP_SET_STATUS_INFO = `enum TS_F_TS_RESP_SET_STATUS_INFO = 135;`;
        static if(is(typeof({ mixin(enumMixinStr_TS_F_TS_RESP_SET_STATUS_INFO); }))) {
            mixin(enumMixinStr_TS_F_TS_RESP_SET_STATUS_INFO);
        }
    }




    static if(!is(typeof(TS_F_TS_RESP_SET_GENTIME_WITH_PRECISION))) {
        private enum enumMixinStr_TS_F_TS_RESP_SET_GENTIME_WITH_PRECISION = `enum TS_F_TS_RESP_SET_GENTIME_WITH_PRECISION = 134;`;
        static if(is(typeof({ mixin(enumMixinStr_TS_F_TS_RESP_SET_GENTIME_WITH_PRECISION); }))) {
            mixin(enumMixinStr_TS_F_TS_RESP_SET_GENTIME_WITH_PRECISION);
        }
    }




    static if(!is(typeof(PEM_FLAG_SECURE))) {
        private enum enumMixinStr_PEM_FLAG_SECURE = `enum PEM_FLAG_SECURE = 0x1;`;
        static if(is(typeof({ mixin(enumMixinStr_PEM_FLAG_SECURE); }))) {
            mixin(enumMixinStr_PEM_FLAG_SECURE);
        }
    }




    static if(!is(typeof(PEM_FLAG_EAY_COMPATIBLE))) {
        private enum enumMixinStr_PEM_FLAG_EAY_COMPATIBLE = `enum PEM_FLAG_EAY_COMPATIBLE = 0x2;`;
        static if(is(typeof({ mixin(enumMixinStr_PEM_FLAG_EAY_COMPATIBLE); }))) {
            mixin(enumMixinStr_PEM_FLAG_EAY_COMPATIBLE);
        }
    }




    static if(!is(typeof(PEM_FLAG_ONLY_B64))) {
        private enum enumMixinStr_PEM_FLAG_ONLY_B64 = `enum PEM_FLAG_ONLY_B64 = 0x4;`;
        static if(is(typeof({ mixin(enumMixinStr_PEM_FLAG_ONLY_B64); }))) {
            mixin(enumMixinStr_PEM_FLAG_ONLY_B64);
        }
    }




    static if(!is(typeof(TS_F_TS_RESP_GET_POLICY))) {
        private enum enumMixinStr_TS_F_TS_RESP_GET_POLICY = `enum TS_F_TS_RESP_GET_POLICY = 133;`;
        static if(is(typeof({ mixin(enumMixinStr_TS_F_TS_RESP_GET_POLICY); }))) {
            mixin(enumMixinStr_TS_F_TS_RESP_GET_POLICY);
        }
    }




    static if(!is(typeof(TS_F_TS_RESP_CTX_SET_STATUS_INFO))) {
        private enum enumMixinStr_TS_F_TS_RESP_CTX_SET_STATUS_INFO = `enum TS_F_TS_RESP_CTX_SET_STATUS_INFO = 132;`;
        static if(is(typeof({ mixin(enumMixinStr_TS_F_TS_RESP_CTX_SET_STATUS_INFO); }))) {
            mixin(enumMixinStr_TS_F_TS_RESP_CTX_SET_STATUS_INFO);
        }
    }




    static if(!is(typeof(TS_F_TS_RESP_CTX_SET_SIGNER_CERT))) {
        private enum enumMixinStr_TS_F_TS_RESP_CTX_SET_SIGNER_CERT = `enum TS_F_TS_RESP_CTX_SET_SIGNER_CERT = 131;`;
        static if(is(typeof({ mixin(enumMixinStr_TS_F_TS_RESP_CTX_SET_SIGNER_CERT); }))) {
            mixin(enumMixinStr_TS_F_TS_RESP_CTX_SET_SIGNER_CERT);
        }
    }




    static if(!is(typeof(TS_F_TS_RESP_CTX_SET_DEF_POLICY))) {
        private enum enumMixinStr_TS_F_TS_RESP_CTX_SET_DEF_POLICY = `enum TS_F_TS_RESP_CTX_SET_DEF_POLICY = 130;`;
        static if(is(typeof({ mixin(enumMixinStr_TS_F_TS_RESP_CTX_SET_DEF_POLICY); }))) {
            mixin(enumMixinStr_TS_F_TS_RESP_CTX_SET_DEF_POLICY);
        }
    }




    static if(!is(typeof(TS_F_TS_RESP_CTX_SET_CERTS))) {
        private enum enumMixinStr_TS_F_TS_RESP_CTX_SET_CERTS = `enum TS_F_TS_RESP_CTX_SET_CERTS = 129;`;
        static if(is(typeof({ mixin(enumMixinStr_TS_F_TS_RESP_CTX_SET_CERTS); }))) {
            mixin(enumMixinStr_TS_F_TS_RESP_CTX_SET_CERTS);
        }
    }




    static if(!is(typeof(TS_F_TS_RESP_CTX_SET_ACCURACY))) {
        private enum enumMixinStr_TS_F_TS_RESP_CTX_SET_ACCURACY = `enum TS_F_TS_RESP_CTX_SET_ACCURACY = 128;`;
        static if(is(typeof({ mixin(enumMixinStr_TS_F_TS_RESP_CTX_SET_ACCURACY); }))) {
            mixin(enumMixinStr_TS_F_TS_RESP_CTX_SET_ACCURACY);
        }
    }




    static if(!is(typeof(TS_F_TS_RESP_CTX_NEW))) {
        private enum enumMixinStr_TS_F_TS_RESP_CTX_NEW = `enum TS_F_TS_RESP_CTX_NEW = 127;`;
        static if(is(typeof({ mixin(enumMixinStr_TS_F_TS_RESP_CTX_NEW); }))) {
            mixin(enumMixinStr_TS_F_TS_RESP_CTX_NEW);
        }
    }




    static if(!is(typeof(TS_F_TS_RESP_CTX_ADD_POLICY))) {
        private enum enumMixinStr_TS_F_TS_RESP_CTX_ADD_POLICY = `enum TS_F_TS_RESP_CTX_ADD_POLICY = 126;`;
        static if(is(typeof({ mixin(enumMixinStr_TS_F_TS_RESP_CTX_ADD_POLICY); }))) {
            mixin(enumMixinStr_TS_F_TS_RESP_CTX_ADD_POLICY);
        }
    }




    static if(!is(typeof(TS_F_TS_RESP_CTX_ADD_MD))) {
        private enum enumMixinStr_TS_F_TS_RESP_CTX_ADD_MD = `enum TS_F_TS_RESP_CTX_ADD_MD = 125;`;
        static if(is(typeof({ mixin(enumMixinStr_TS_F_TS_RESP_CTX_ADD_MD); }))) {
            mixin(enumMixinStr_TS_F_TS_RESP_CTX_ADD_MD);
        }
    }




    static if(!is(typeof(TS_F_TS_RESP_CTX_ADD_FAILURE_INFO))) {
        private enum enumMixinStr_TS_F_TS_RESP_CTX_ADD_FAILURE_INFO = `enum TS_F_TS_RESP_CTX_ADD_FAILURE_INFO = 124;`;
        static if(is(typeof({ mixin(enumMixinStr_TS_F_TS_RESP_CTX_ADD_FAILURE_INFO); }))) {
            mixin(enumMixinStr_TS_F_TS_RESP_CTX_ADD_FAILURE_INFO);
        }
    }




    static if(!is(typeof(TS_F_TS_RESP_CREATE_TST_INFO))) {
        private enum enumMixinStr_TS_F_TS_RESP_CREATE_TST_INFO = `enum TS_F_TS_RESP_CREATE_TST_INFO = 123;`;
        static if(is(typeof({ mixin(enumMixinStr_TS_F_TS_RESP_CREATE_TST_INFO); }))) {
            mixin(enumMixinStr_TS_F_TS_RESP_CREATE_TST_INFO);
        }
    }




    static if(!is(typeof(TS_F_TS_RESP_CREATE_RESPONSE))) {
        private enum enumMixinStr_TS_F_TS_RESP_CREATE_RESPONSE = `enum TS_F_TS_RESP_CREATE_RESPONSE = 122;`;
        static if(is(typeof({ mixin(enumMixinStr_TS_F_TS_RESP_CREATE_RESPONSE); }))) {
            mixin(enumMixinStr_TS_F_TS_RESP_CREATE_RESPONSE);
        }
    }




    static if(!is(typeof(TS_F_TS_REQ_SET_POLICY_ID))) {
        private enum enumMixinStr_TS_F_TS_REQ_SET_POLICY_ID = `enum TS_F_TS_REQ_SET_POLICY_ID = 121;`;
        static if(is(typeof({ mixin(enumMixinStr_TS_F_TS_REQ_SET_POLICY_ID); }))) {
            mixin(enumMixinStr_TS_F_TS_REQ_SET_POLICY_ID);
        }
    }




    static if(!is(typeof(TS_F_TS_REQ_SET_NONCE))) {
        private enum enumMixinStr_TS_F_TS_REQ_SET_NONCE = `enum TS_F_TS_REQ_SET_NONCE = 120;`;
        static if(is(typeof({ mixin(enumMixinStr_TS_F_TS_REQ_SET_NONCE); }))) {
            mixin(enumMixinStr_TS_F_TS_REQ_SET_NONCE);
        }
    }




    static if(!is(typeof(TS_F_TS_REQ_SET_MSG_IMPRINT))) {
        private enum enumMixinStr_TS_F_TS_REQ_SET_MSG_IMPRINT = `enum TS_F_TS_REQ_SET_MSG_IMPRINT = 119;`;
        static if(is(typeof({ mixin(enumMixinStr_TS_F_TS_REQ_SET_MSG_IMPRINT); }))) {
            mixin(enumMixinStr_TS_F_TS_REQ_SET_MSG_IMPRINT);
        }
    }




    static if(!is(typeof(TS_F_TS_MSG_IMPRINT_SET_ALGO))) {
        private enum enumMixinStr_TS_F_TS_MSG_IMPRINT_SET_ALGO = `enum TS_F_TS_MSG_IMPRINT_SET_ALGO = 118;`;
        static if(is(typeof({ mixin(enumMixinStr_TS_F_TS_MSG_IMPRINT_SET_ALGO); }))) {
            mixin(enumMixinStr_TS_F_TS_MSG_IMPRINT_SET_ALGO);
        }
    }




    static if(!is(typeof(TS_F_TS_GET_STATUS_TEXT))) {
        private enum enumMixinStr_TS_F_TS_GET_STATUS_TEXT = `enum TS_F_TS_GET_STATUS_TEXT = 105;`;
        static if(is(typeof({ mixin(enumMixinStr_TS_F_TS_GET_STATUS_TEXT); }))) {
            mixin(enumMixinStr_TS_F_TS_GET_STATUS_TEXT);
        }
    }




    static if(!is(typeof(TS_F_TS_CONF_SET_DEFAULT_ENGINE))) {
        private enum enumMixinStr_TS_F_TS_CONF_SET_DEFAULT_ENGINE = `enum TS_F_TS_CONF_SET_DEFAULT_ENGINE = 146;`;
        static if(is(typeof({ mixin(enumMixinStr_TS_F_TS_CONF_SET_DEFAULT_ENGINE); }))) {
            mixin(enumMixinStr_TS_F_TS_CONF_SET_DEFAULT_ENGINE);
        }
    }




    static if(!is(typeof(TS_F_TS_CONF_LOOKUP_FAIL))) {
        private enum enumMixinStr_TS_F_TS_CONF_LOOKUP_FAIL = `enum TS_F_TS_CONF_LOOKUP_FAIL = 152;`;
        static if(is(typeof({ mixin(enumMixinStr_TS_F_TS_CONF_LOOKUP_FAIL); }))) {
            mixin(enumMixinStr_TS_F_TS_CONF_LOOKUP_FAIL);
        }
    }




    static if(!is(typeof(TS_F_TS_CONF_LOAD_KEY))) {
        private enum enumMixinStr_TS_F_TS_CONF_LOAD_KEY = `enum TS_F_TS_CONF_LOAD_KEY = 155;`;
        static if(is(typeof({ mixin(enumMixinStr_TS_F_TS_CONF_LOAD_KEY); }))) {
            mixin(enumMixinStr_TS_F_TS_CONF_LOAD_KEY);
        }
    }




    static if(!is(typeof(TS_F_TS_CONF_LOAD_CERTS))) {
        private enum enumMixinStr_TS_F_TS_CONF_LOAD_CERTS = `enum TS_F_TS_CONF_LOAD_CERTS = 154;`;
        static if(is(typeof({ mixin(enumMixinStr_TS_F_TS_CONF_LOAD_CERTS); }))) {
            mixin(enumMixinStr_TS_F_TS_CONF_LOAD_CERTS);
        }
    }




    static if(!is(typeof(TS_F_TS_CONF_LOAD_CERT))) {
        private enum enumMixinStr_TS_F_TS_CONF_LOAD_CERT = `enum TS_F_TS_CONF_LOAD_CERT = 153;`;
        static if(is(typeof({ mixin(enumMixinStr_TS_F_TS_CONF_LOAD_CERT); }))) {
            mixin(enumMixinStr_TS_F_TS_CONF_LOAD_CERT);
        }
    }




    static if(!is(typeof(TS_F_TS_CONF_INVALID))) {
        private enum enumMixinStr_TS_F_TS_CONF_INVALID = `enum TS_F_TS_CONF_INVALID = 151;`;
        static if(is(typeof({ mixin(enumMixinStr_TS_F_TS_CONF_INVALID); }))) {
            mixin(enumMixinStr_TS_F_TS_CONF_INVALID);
        }
    }




    static if(!is(typeof(TS_F_TS_COMPUTE_IMPRINT))) {
        private enum enumMixinStr_TS_F_TS_COMPUTE_IMPRINT = `enum TS_F_TS_COMPUTE_IMPRINT = 145;`;
        static if(is(typeof({ mixin(enumMixinStr_TS_F_TS_COMPUTE_IMPRINT); }))) {
            mixin(enumMixinStr_TS_F_TS_COMPUTE_IMPRINT);
        }
    }




    static if(!is(typeof(TS_F_TS_CHECK_STATUS_INFO))) {
        private enum enumMixinStr_TS_F_TS_CHECK_STATUS_INFO = `enum TS_F_TS_CHECK_STATUS_INFO = 104;`;
        static if(is(typeof({ mixin(enumMixinStr_TS_F_TS_CHECK_STATUS_INFO); }))) {
            mixin(enumMixinStr_TS_F_TS_CHECK_STATUS_INFO);
        }
    }




    static if(!is(typeof(TS_F_TS_CHECK_SIGNING_CERTS))) {
        private enum enumMixinStr_TS_F_TS_CHECK_SIGNING_CERTS = `enum TS_F_TS_CHECK_SIGNING_CERTS = 103;`;
        static if(is(typeof({ mixin(enumMixinStr_TS_F_TS_CHECK_SIGNING_CERTS); }))) {
            mixin(enumMixinStr_TS_F_TS_CHECK_SIGNING_CERTS);
        }
    }




    static if(!is(typeof(TS_F_TS_CHECK_POLICY))) {
        private enum enumMixinStr_TS_F_TS_CHECK_POLICY = `enum TS_F_TS_CHECK_POLICY = 102;`;
        static if(is(typeof({ mixin(enumMixinStr_TS_F_TS_CHECK_POLICY); }))) {
            mixin(enumMixinStr_TS_F_TS_CHECK_POLICY);
        }
    }




    static if(!is(typeof(TS_F_TS_CHECK_NONCES))) {
        private enum enumMixinStr_TS_F_TS_CHECK_NONCES = `enum TS_F_TS_CHECK_NONCES = 101;`;
        static if(is(typeof({ mixin(enumMixinStr_TS_F_TS_CHECK_NONCES); }))) {
            mixin(enumMixinStr_TS_F_TS_CHECK_NONCES);
        }
    }




    static if(!is(typeof(TS_F_TS_CHECK_IMPRINTS))) {
        private enum enumMixinStr_TS_F_TS_CHECK_IMPRINTS = `enum TS_F_TS_CHECK_IMPRINTS = 100;`;
        static if(is(typeof({ mixin(enumMixinStr_TS_F_TS_CHECK_IMPRINTS); }))) {
            mixin(enumMixinStr_TS_F_TS_CHECK_IMPRINTS);
        }
    }




    static if(!is(typeof(TS_F_TS_ACCURACY_SET_SECONDS))) {
        private enum enumMixinStr_TS_F_TS_ACCURACY_SET_SECONDS = `enum TS_F_TS_ACCURACY_SET_SECONDS = 117;`;
        static if(is(typeof({ mixin(enumMixinStr_TS_F_TS_ACCURACY_SET_SECONDS); }))) {
            mixin(enumMixinStr_TS_F_TS_ACCURACY_SET_SECONDS);
        }
    }




    static if(!is(typeof(TS_F_TS_ACCURACY_SET_MILLIS))) {
        private enum enumMixinStr_TS_F_TS_ACCURACY_SET_MILLIS = `enum TS_F_TS_ACCURACY_SET_MILLIS = 116;`;
        static if(is(typeof({ mixin(enumMixinStr_TS_F_TS_ACCURACY_SET_MILLIS); }))) {
            mixin(enumMixinStr_TS_F_TS_ACCURACY_SET_MILLIS);
        }
    }




    static if(!is(typeof(TS_F_TS_ACCURACY_SET_MICROS))) {
        private enum enumMixinStr_TS_F_TS_ACCURACY_SET_MICROS = `enum TS_F_TS_ACCURACY_SET_MICROS = 115;`;
        static if(is(typeof({ mixin(enumMixinStr_TS_F_TS_ACCURACY_SET_MICROS); }))) {
            mixin(enumMixinStr_TS_F_TS_ACCURACY_SET_MICROS);
        }
    }




    static if(!is(typeof(TS_F_PKCS7_TO_TS_TST_INFO))) {
        private enum enumMixinStr_TS_F_PKCS7_TO_TS_TST_INFO = `enum TS_F_PKCS7_TO_TS_TST_INFO = 148;`;
        static if(is(typeof({ mixin(enumMixinStr_TS_F_PKCS7_TO_TS_TST_INFO); }))) {
            mixin(enumMixinStr_TS_F_PKCS7_TO_TS_TST_INFO);
        }
    }




    static if(!is(typeof(TS_F_INT_TS_RESP_VERIFY_TOKEN))) {
        private enum enumMixinStr_TS_F_INT_TS_RESP_VERIFY_TOKEN = `enum TS_F_INT_TS_RESP_VERIFY_TOKEN = 149;`;
        static if(is(typeof({ mixin(enumMixinStr_TS_F_INT_TS_RESP_VERIFY_TOKEN); }))) {
            mixin(enumMixinStr_TS_F_INT_TS_RESP_VERIFY_TOKEN);
        }
    }




    static if(!is(typeof(TS_F_ESS_SIGNING_CERT_NEW_INIT))) {
        private enum enumMixinStr_TS_F_ESS_SIGNING_CERT_NEW_INIT = `enum TS_F_ESS_SIGNING_CERT_NEW_INIT = 114;`;
        static if(is(typeof({ mixin(enumMixinStr_TS_F_ESS_SIGNING_CERT_NEW_INIT); }))) {
            mixin(enumMixinStr_TS_F_ESS_SIGNING_CERT_NEW_INIT);
        }
    }




    static if(!is(typeof(TS_F_ESS_CERT_ID_NEW_INIT))) {
        private enum enumMixinStr_TS_F_ESS_CERT_ID_NEW_INIT = `enum TS_F_ESS_CERT_ID_NEW_INIT = 113;`;
        static if(is(typeof({ mixin(enumMixinStr_TS_F_ESS_CERT_ID_NEW_INIT); }))) {
            mixin(enumMixinStr_TS_F_ESS_CERT_ID_NEW_INIT);
        }
    }




    static if(!is(typeof(TS_F_ESS_ADD_SIGNING_CERT))) {
        private enum enumMixinStr_TS_F_ESS_ADD_SIGNING_CERT = `enum TS_F_ESS_ADD_SIGNING_CERT = 112;`;
        static if(is(typeof({ mixin(enumMixinStr_TS_F_ESS_ADD_SIGNING_CERT); }))) {
            mixin(enumMixinStr_TS_F_ESS_ADD_SIGNING_CERT);
        }
    }




    static if(!is(typeof(TS_F_DEF_TIME_CB))) {
        private enum enumMixinStr_TS_F_DEF_TIME_CB = `enum TS_F_DEF_TIME_CB = 111;`;
        static if(is(typeof({ mixin(enumMixinStr_TS_F_DEF_TIME_CB); }))) {
            mixin(enumMixinStr_TS_F_DEF_TIME_CB);
        }
    }




    static if(!is(typeof(TS_F_DEF_SERIAL_CB))) {
        private enum enumMixinStr_TS_F_DEF_SERIAL_CB = `enum TS_F_DEF_SERIAL_CB = 110;`;
        static if(is(typeof({ mixin(enumMixinStr_TS_F_DEF_SERIAL_CB); }))) {
            mixin(enumMixinStr_TS_F_DEF_SERIAL_CB);
        }
    }




    static if(!is(typeof(TS_VFY_ALL_DATA))) {
        private enum enumMixinStr_TS_VFY_ALL_DATA = `enum TS_VFY_ALL_DATA = ( TS_VFY_SIGNATURE | TS_VFY_VERSION | TS_VFY_POLICY | TS_VFY_DATA | TS_VFY_NONCE | TS_VFY_SIGNER | TS_VFY_TSA_NAME );`;
        static if(is(typeof({ mixin(enumMixinStr_TS_VFY_ALL_DATA); }))) {
            mixin(enumMixinStr_TS_VFY_ALL_DATA);
        }
    }




    static if(!is(typeof(TS_VFY_ALL_IMPRINT))) {
        private enum enumMixinStr_TS_VFY_ALL_IMPRINT = `enum TS_VFY_ALL_IMPRINT = ( TS_VFY_SIGNATURE | TS_VFY_VERSION | TS_VFY_POLICY | TS_VFY_IMPRINT | TS_VFY_NONCE | TS_VFY_SIGNER | TS_VFY_TSA_NAME );`;
        static if(is(typeof({ mixin(enumMixinStr_TS_VFY_ALL_IMPRINT); }))) {
            mixin(enumMixinStr_TS_VFY_ALL_IMPRINT);
        }
    }




    static if(!is(typeof(TS_VFY_TSA_NAME))) {
        private enum enumMixinStr_TS_VFY_TSA_NAME = `enum TS_VFY_TSA_NAME = ( 1u << 7 );`;
        static if(is(typeof({ mixin(enumMixinStr_TS_VFY_TSA_NAME); }))) {
            mixin(enumMixinStr_TS_VFY_TSA_NAME);
        }
    }




    static if(!is(typeof(TS_VFY_SIGNER))) {
        private enum enumMixinStr_TS_VFY_SIGNER = `enum TS_VFY_SIGNER = ( 1u << 6 );`;
        static if(is(typeof({ mixin(enumMixinStr_TS_VFY_SIGNER); }))) {
            mixin(enumMixinStr_TS_VFY_SIGNER);
        }
    }




    static if(!is(typeof(TS_VFY_NONCE))) {
        private enum enumMixinStr_TS_VFY_NONCE = `enum TS_VFY_NONCE = ( 1u << 5 );`;
        static if(is(typeof({ mixin(enumMixinStr_TS_VFY_NONCE); }))) {
            mixin(enumMixinStr_TS_VFY_NONCE);
        }
    }




    static if(!is(typeof(TS_VFY_DATA))) {
        private enum enumMixinStr_TS_VFY_DATA = `enum TS_VFY_DATA = ( 1u << 4 );`;
        static if(is(typeof({ mixin(enumMixinStr_TS_VFY_DATA); }))) {
            mixin(enumMixinStr_TS_VFY_DATA);
        }
    }




    static if(!is(typeof(TS_VFY_IMPRINT))) {
        private enum enumMixinStr_TS_VFY_IMPRINT = `enum TS_VFY_IMPRINT = ( 1u << 3 );`;
        static if(is(typeof({ mixin(enumMixinStr_TS_VFY_IMPRINT); }))) {
            mixin(enumMixinStr_TS_VFY_IMPRINT);
        }
    }




    static if(!is(typeof(TS_VFY_POLICY))) {
        private enum enumMixinStr_TS_VFY_POLICY = `enum TS_VFY_POLICY = ( 1u << 2 );`;
        static if(is(typeof({ mixin(enumMixinStr_TS_VFY_POLICY); }))) {
            mixin(enumMixinStr_TS_VFY_POLICY);
        }
    }




    static if(!is(typeof(TS_VFY_VERSION))) {
        private enum enumMixinStr_TS_VFY_VERSION = `enum TS_VFY_VERSION = ( 1u << 1 );`;
        static if(is(typeof({ mixin(enumMixinStr_TS_VFY_VERSION); }))) {
            mixin(enumMixinStr_TS_VFY_VERSION);
        }
    }




    static if(!is(typeof(TS_VFY_SIGNATURE))) {
        private enum enumMixinStr_TS_VFY_SIGNATURE = `enum TS_VFY_SIGNATURE = ( 1u << 0 );`;
        static if(is(typeof({ mixin(enumMixinStr_TS_VFY_SIGNATURE); }))) {
            mixin(enumMixinStr_TS_VFY_SIGNATURE);
        }
    }




    static if(!is(typeof(TS_MAX_STATUS_LENGTH))) {
        private enum enumMixinStr_TS_MAX_STATUS_LENGTH = `enum TS_MAX_STATUS_LENGTH = ( 1024 * 1024 );`;
        static if(is(typeof({ mixin(enumMixinStr_TS_MAX_STATUS_LENGTH); }))) {
            mixin(enumMixinStr_TS_MAX_STATUS_LENGTH);
        }
    }




    static if(!is(typeof(TS_MAX_CLOCK_PRECISION_DIGITS))) {
        private enum enumMixinStr_TS_MAX_CLOCK_PRECISION_DIGITS = `enum TS_MAX_CLOCK_PRECISION_DIGITS = 6;`;
        static if(is(typeof({ mixin(enumMixinStr_TS_MAX_CLOCK_PRECISION_DIGITS); }))) {
            mixin(enumMixinStr_TS_MAX_CLOCK_PRECISION_DIGITS);
        }
    }




    static if(!is(typeof(TS_ESS_CERT_ID_CHAIN))) {
        private enum enumMixinStr_TS_ESS_CERT_ID_CHAIN = `enum TS_ESS_CERT_ID_CHAIN = 0x04;`;
        static if(is(typeof({ mixin(enumMixinStr_TS_ESS_CERT_ID_CHAIN); }))) {
            mixin(enumMixinStr_TS_ESS_CERT_ID_CHAIN);
        }
    }




    static if(!is(typeof(TS_ORDERING))) {
        private enum enumMixinStr_TS_ORDERING = `enum TS_ORDERING = 0x02;`;
        static if(is(typeof({ mixin(enumMixinStr_TS_ORDERING); }))) {
            mixin(enumMixinStr_TS_ORDERING);
        }
    }




    static if(!is(typeof(TS_TSA_NAME))) {
        private enum enumMixinStr_TS_TSA_NAME = `enum TS_TSA_NAME = 0x01;`;
        static if(is(typeof({ mixin(enumMixinStr_TS_TSA_NAME); }))) {
            mixin(enumMixinStr_TS_TSA_NAME);
        }
    }




    static if(!is(typeof(TS_INFO_SYSTEM_FAILURE))) {
        private enum enumMixinStr_TS_INFO_SYSTEM_FAILURE = `enum TS_INFO_SYSTEM_FAILURE = 25;`;
        static if(is(typeof({ mixin(enumMixinStr_TS_INFO_SYSTEM_FAILURE); }))) {
            mixin(enumMixinStr_TS_INFO_SYSTEM_FAILURE);
        }
    }




    static if(!is(typeof(TS_INFO_ADD_INFO_NOT_AVAILABLE))) {
        private enum enumMixinStr_TS_INFO_ADD_INFO_NOT_AVAILABLE = `enum TS_INFO_ADD_INFO_NOT_AVAILABLE = 17;`;
        static if(is(typeof({ mixin(enumMixinStr_TS_INFO_ADD_INFO_NOT_AVAILABLE); }))) {
            mixin(enumMixinStr_TS_INFO_ADD_INFO_NOT_AVAILABLE);
        }
    }




    static if(!is(typeof(TS_INFO_UNACCEPTED_EXTENSION))) {
        private enum enumMixinStr_TS_INFO_UNACCEPTED_EXTENSION = `enum TS_INFO_UNACCEPTED_EXTENSION = 16;`;
        static if(is(typeof({ mixin(enumMixinStr_TS_INFO_UNACCEPTED_EXTENSION); }))) {
            mixin(enumMixinStr_TS_INFO_UNACCEPTED_EXTENSION);
        }
    }




    static if(!is(typeof(TS_INFO_UNACCEPTED_POLICY))) {
        private enum enumMixinStr_TS_INFO_UNACCEPTED_POLICY = `enum TS_INFO_UNACCEPTED_POLICY = 15;`;
        static if(is(typeof({ mixin(enumMixinStr_TS_INFO_UNACCEPTED_POLICY); }))) {
            mixin(enumMixinStr_TS_INFO_UNACCEPTED_POLICY);
        }
    }




    static if(!is(typeof(TS_INFO_TIME_NOT_AVAILABLE))) {
        private enum enumMixinStr_TS_INFO_TIME_NOT_AVAILABLE = `enum TS_INFO_TIME_NOT_AVAILABLE = 14;`;
        static if(is(typeof({ mixin(enumMixinStr_TS_INFO_TIME_NOT_AVAILABLE); }))) {
            mixin(enumMixinStr_TS_INFO_TIME_NOT_AVAILABLE);
        }
    }




    static if(!is(typeof(TS_INFO_BAD_DATA_FORMAT))) {
        private enum enumMixinStr_TS_INFO_BAD_DATA_FORMAT = `enum TS_INFO_BAD_DATA_FORMAT = 5;`;
        static if(is(typeof({ mixin(enumMixinStr_TS_INFO_BAD_DATA_FORMAT); }))) {
            mixin(enumMixinStr_TS_INFO_BAD_DATA_FORMAT);
        }
    }




    static if(!is(typeof(TS_INFO_BAD_REQUEST))) {
        private enum enumMixinStr_TS_INFO_BAD_REQUEST = `enum TS_INFO_BAD_REQUEST = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_TS_INFO_BAD_REQUEST); }))) {
            mixin(enumMixinStr_TS_INFO_BAD_REQUEST);
        }
    }




    static if(!is(typeof(TS_INFO_BAD_ALG))) {
        private enum enumMixinStr_TS_INFO_BAD_ALG = `enum TS_INFO_BAD_ALG = 0;`;
        static if(is(typeof({ mixin(enumMixinStr_TS_INFO_BAD_ALG); }))) {
            mixin(enumMixinStr_TS_INFO_BAD_ALG);
        }
    }




    static if(!is(typeof(TS_STATUS_REVOCATION_NOTIFICATION))) {
        private enum enumMixinStr_TS_STATUS_REVOCATION_NOTIFICATION = `enum TS_STATUS_REVOCATION_NOTIFICATION = 5;`;
        static if(is(typeof({ mixin(enumMixinStr_TS_STATUS_REVOCATION_NOTIFICATION); }))) {
            mixin(enumMixinStr_TS_STATUS_REVOCATION_NOTIFICATION);
        }
    }




    static if(!is(typeof(TS_STATUS_REVOCATION_WARNING))) {
        private enum enumMixinStr_TS_STATUS_REVOCATION_WARNING = `enum TS_STATUS_REVOCATION_WARNING = 4;`;
        static if(is(typeof({ mixin(enumMixinStr_TS_STATUS_REVOCATION_WARNING); }))) {
            mixin(enumMixinStr_TS_STATUS_REVOCATION_WARNING);
        }
    }




    static if(!is(typeof(TS_STATUS_WAITING))) {
        private enum enumMixinStr_TS_STATUS_WAITING = `enum TS_STATUS_WAITING = 3;`;
        static if(is(typeof({ mixin(enumMixinStr_TS_STATUS_WAITING); }))) {
            mixin(enumMixinStr_TS_STATUS_WAITING);
        }
    }




    static if(!is(typeof(TS_STATUS_REJECTION))) {
        private enum enumMixinStr_TS_STATUS_REJECTION = `enum TS_STATUS_REJECTION = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_TS_STATUS_REJECTION); }))) {
            mixin(enumMixinStr_TS_STATUS_REJECTION);
        }
    }




    static if(!is(typeof(TS_STATUS_GRANTED_WITH_MODS))) {
        private enum enumMixinStr_TS_STATUS_GRANTED_WITH_MODS = `enum TS_STATUS_GRANTED_WITH_MODS = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_TS_STATUS_GRANTED_WITH_MODS); }))) {
            mixin(enumMixinStr_TS_STATUS_GRANTED_WITH_MODS);
        }
    }




    static if(!is(typeof(TS_STATUS_GRANTED))) {
        private enum enumMixinStr_TS_STATUS_GRANTED = `enum TS_STATUS_GRANTED = 0;`;
        static if(is(typeof({ mixin(enumMixinStr_TS_STATUS_GRANTED); }))) {
            mixin(enumMixinStr_TS_STATUS_GRANTED);
        }
    }






    static if(!is(typeof(TLS_MD_EXTENDED_MASTER_SECRET_CONST_SIZE))) {
        private enum enumMixinStr_TLS_MD_EXTENDED_MASTER_SECRET_CONST_SIZE = `enum TLS_MD_EXTENDED_MASTER_SECRET_CONST_SIZE = 22;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS_MD_EXTENDED_MASTER_SECRET_CONST_SIZE); }))) {
            mixin(enumMixinStr_TLS_MD_EXTENDED_MASTER_SECRET_CONST_SIZE);
        }
    }




    static if(!is(typeof(TLS_MD_EXTENDED_MASTER_SECRET_CONST))) {
        private enum enumMixinStr_TLS_MD_EXTENDED_MASTER_SECRET_CONST = `enum TLS_MD_EXTENDED_MASTER_SECRET_CONST = "extended master secret";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS_MD_EXTENDED_MASTER_SECRET_CONST); }))) {
            mixin(enumMixinStr_TLS_MD_EXTENDED_MASTER_SECRET_CONST);
        }
    }




    static if(!is(typeof(TLS_MD_MASTER_SECRET_CONST_SIZE))) {
        private enum enumMixinStr_TLS_MD_MASTER_SECRET_CONST_SIZE = `enum TLS_MD_MASTER_SECRET_CONST_SIZE = 13;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS_MD_MASTER_SECRET_CONST_SIZE); }))) {
            mixin(enumMixinStr_TLS_MD_MASTER_SECRET_CONST_SIZE);
        }
    }




    static if(!is(typeof(TLS_MD_MASTER_SECRET_CONST))) {
        private enum enumMixinStr_TLS_MD_MASTER_SECRET_CONST = `enum TLS_MD_MASTER_SECRET_CONST = "master secret";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS_MD_MASTER_SECRET_CONST); }))) {
            mixin(enumMixinStr_TLS_MD_MASTER_SECRET_CONST);
        }
    }




    static if(!is(typeof(TLS_MD_IV_BLOCK_CONST_SIZE))) {
        private enum enumMixinStr_TLS_MD_IV_BLOCK_CONST_SIZE = `enum TLS_MD_IV_BLOCK_CONST_SIZE = 8;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS_MD_IV_BLOCK_CONST_SIZE); }))) {
            mixin(enumMixinStr_TLS_MD_IV_BLOCK_CONST_SIZE);
        }
    }




    static if(!is(typeof(TLS_MD_IV_BLOCK_CONST))) {
        private enum enumMixinStr_TLS_MD_IV_BLOCK_CONST = `enum TLS_MD_IV_BLOCK_CONST = "IV block";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS_MD_IV_BLOCK_CONST); }))) {
            mixin(enumMixinStr_TLS_MD_IV_BLOCK_CONST);
        }
    }




    static if(!is(typeof(TLS_MD_SERVER_WRITE_KEY_CONST_SIZE))) {
        private enum enumMixinStr_TLS_MD_SERVER_WRITE_KEY_CONST_SIZE = `enum TLS_MD_SERVER_WRITE_KEY_CONST_SIZE = 16;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS_MD_SERVER_WRITE_KEY_CONST_SIZE); }))) {
            mixin(enumMixinStr_TLS_MD_SERVER_WRITE_KEY_CONST_SIZE);
        }
    }




    static if(!is(typeof(TLS_MD_SERVER_WRITE_KEY_CONST))) {
        private enum enumMixinStr_TLS_MD_SERVER_WRITE_KEY_CONST = `enum TLS_MD_SERVER_WRITE_KEY_CONST = "server write key";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS_MD_SERVER_WRITE_KEY_CONST); }))) {
            mixin(enumMixinStr_TLS_MD_SERVER_WRITE_KEY_CONST);
        }
    }




    static if(!is(typeof(TLS_MD_CLIENT_WRITE_KEY_CONST_SIZE))) {
        private enum enumMixinStr_TLS_MD_CLIENT_WRITE_KEY_CONST_SIZE = `enum TLS_MD_CLIENT_WRITE_KEY_CONST_SIZE = 16;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS_MD_CLIENT_WRITE_KEY_CONST_SIZE); }))) {
            mixin(enumMixinStr_TLS_MD_CLIENT_WRITE_KEY_CONST_SIZE);
        }
    }




    static if(!is(typeof(TLS_MD_CLIENT_WRITE_KEY_CONST))) {
        private enum enumMixinStr_TLS_MD_CLIENT_WRITE_KEY_CONST = `enum TLS_MD_CLIENT_WRITE_KEY_CONST = "client write key";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS_MD_CLIENT_WRITE_KEY_CONST); }))) {
            mixin(enumMixinStr_TLS_MD_CLIENT_WRITE_KEY_CONST);
        }
    }




    static if(!is(typeof(TLS_MD_KEY_EXPANSION_CONST_SIZE))) {
        private enum enumMixinStr_TLS_MD_KEY_EXPANSION_CONST_SIZE = `enum TLS_MD_KEY_EXPANSION_CONST_SIZE = 13;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS_MD_KEY_EXPANSION_CONST_SIZE); }))) {
            mixin(enumMixinStr_TLS_MD_KEY_EXPANSION_CONST_SIZE);
        }
    }




    static if(!is(typeof(TLS_MD_KEY_EXPANSION_CONST))) {
        private enum enumMixinStr_TLS_MD_KEY_EXPANSION_CONST = `enum TLS_MD_KEY_EXPANSION_CONST = "key expansion";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS_MD_KEY_EXPANSION_CONST); }))) {
            mixin(enumMixinStr_TLS_MD_KEY_EXPANSION_CONST);
        }
    }




    static if(!is(typeof(TLS_MD_SERVER_FINISH_CONST_SIZE))) {
        private enum enumMixinStr_TLS_MD_SERVER_FINISH_CONST_SIZE = `enum TLS_MD_SERVER_FINISH_CONST_SIZE = 15;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS_MD_SERVER_FINISH_CONST_SIZE); }))) {
            mixin(enumMixinStr_TLS_MD_SERVER_FINISH_CONST_SIZE);
        }
    }




    static if(!is(typeof(TLS_MD_SERVER_FINISH_CONST))) {
        private enum enumMixinStr_TLS_MD_SERVER_FINISH_CONST = `enum TLS_MD_SERVER_FINISH_CONST = "server finished";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS_MD_SERVER_FINISH_CONST); }))) {
            mixin(enumMixinStr_TLS_MD_SERVER_FINISH_CONST);
        }
    }




    static if(!is(typeof(TLS_MD_CLIENT_FINISH_CONST_SIZE))) {
        private enum enumMixinStr_TLS_MD_CLIENT_FINISH_CONST_SIZE = `enum TLS_MD_CLIENT_FINISH_CONST_SIZE = 15;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS_MD_CLIENT_FINISH_CONST_SIZE); }))) {
            mixin(enumMixinStr_TLS_MD_CLIENT_FINISH_CONST_SIZE);
        }
    }




    static if(!is(typeof(TLS_MD_CLIENT_FINISH_CONST))) {
        private enum enumMixinStr_TLS_MD_CLIENT_FINISH_CONST = `enum TLS_MD_CLIENT_FINISH_CONST = "client finished";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS_MD_CLIENT_FINISH_CONST); }))) {
            mixin(enumMixinStr_TLS_MD_CLIENT_FINISH_CONST);
        }
    }




    static if(!is(typeof(TLS_MD_MAX_CONST_SIZE))) {
        private enum enumMixinStr_TLS_MD_MAX_CONST_SIZE = `enum TLS_MD_MAX_CONST_SIZE = 22;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS_MD_MAX_CONST_SIZE); }))) {
            mixin(enumMixinStr_TLS_MD_MAX_CONST_SIZE);
        }
    }




    static if(!is(typeof(TLS1_FINISH_MAC_LENGTH))) {
        private enum enumMixinStr_TLS1_FINISH_MAC_LENGTH = `enum TLS1_FINISH_MAC_LENGTH = 12;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_FINISH_MAC_LENGTH); }))) {
            mixin(enumMixinStr_TLS1_FINISH_MAC_LENGTH);
        }
    }




    static if(!is(typeof(TLS_CT_NUMBER))) {
        private enum enumMixinStr_TLS_CT_NUMBER = `enum TLS_CT_NUMBER = 9;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS_CT_NUMBER); }))) {
            mixin(enumMixinStr_TLS_CT_NUMBER);
        }
    }




    static if(!is(typeof(TLS_CT_GOST12_512_SIGN))) {
        private enum enumMixinStr_TLS_CT_GOST12_512_SIGN = `enum TLS_CT_GOST12_512_SIGN = 239;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS_CT_GOST12_512_SIGN); }))) {
            mixin(enumMixinStr_TLS_CT_GOST12_512_SIGN);
        }
    }




    static if(!is(typeof(TLS_CT_GOST12_SIGN))) {
        private enum enumMixinStr_TLS_CT_GOST12_SIGN = `enum TLS_CT_GOST12_SIGN = 238;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS_CT_GOST12_SIGN); }))) {
            mixin(enumMixinStr_TLS_CT_GOST12_SIGN);
        }
    }




    static if(!is(typeof(TLS_CT_GOST01_SIGN))) {
        private enum enumMixinStr_TLS_CT_GOST01_SIGN = `enum TLS_CT_GOST01_SIGN = 22;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS_CT_GOST01_SIGN); }))) {
            mixin(enumMixinStr_TLS_CT_GOST01_SIGN);
        }
    }




    static if(!is(typeof(TLS_CT_ECDSA_FIXED_ECDH))) {
        private enum enumMixinStr_TLS_CT_ECDSA_FIXED_ECDH = `enum TLS_CT_ECDSA_FIXED_ECDH = 66;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS_CT_ECDSA_FIXED_ECDH); }))) {
            mixin(enumMixinStr_TLS_CT_ECDSA_FIXED_ECDH);
        }
    }




    static if(!is(typeof(TLS_CT_RSA_FIXED_ECDH))) {
        private enum enumMixinStr_TLS_CT_RSA_FIXED_ECDH = `enum TLS_CT_RSA_FIXED_ECDH = 65;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS_CT_RSA_FIXED_ECDH); }))) {
            mixin(enumMixinStr_TLS_CT_RSA_FIXED_ECDH);
        }
    }




    static if(!is(typeof(TLS_CT_ECDSA_SIGN))) {
        private enum enumMixinStr_TLS_CT_ECDSA_SIGN = `enum TLS_CT_ECDSA_SIGN = 64;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS_CT_ECDSA_SIGN); }))) {
            mixin(enumMixinStr_TLS_CT_ECDSA_SIGN);
        }
    }




    static if(!is(typeof(TLS_CT_DSS_FIXED_DH))) {
        private enum enumMixinStr_TLS_CT_DSS_FIXED_DH = `enum TLS_CT_DSS_FIXED_DH = 4;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS_CT_DSS_FIXED_DH); }))) {
            mixin(enumMixinStr_TLS_CT_DSS_FIXED_DH);
        }
    }




    static if(!is(typeof(TLS_CT_RSA_FIXED_DH))) {
        private enum enumMixinStr_TLS_CT_RSA_FIXED_DH = `enum TLS_CT_RSA_FIXED_DH = 3;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS_CT_RSA_FIXED_DH); }))) {
            mixin(enumMixinStr_TLS_CT_RSA_FIXED_DH);
        }
    }




    static if(!is(typeof(TLS_CT_DSS_SIGN))) {
        private enum enumMixinStr_TLS_CT_DSS_SIGN = `enum TLS_CT_DSS_SIGN = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS_CT_DSS_SIGN); }))) {
            mixin(enumMixinStr_TLS_CT_DSS_SIGN);
        }
    }




    static if(!is(typeof(TLS_CT_RSA_SIGN))) {
        private enum enumMixinStr_TLS_CT_RSA_SIGN = `enum TLS_CT_RSA_SIGN = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS_CT_RSA_SIGN); }))) {
            mixin(enumMixinStr_TLS_CT_RSA_SIGN);
        }
    }




    static if(!is(typeof(TLS1_TXT_RSA_PSK_WITH_CHACHA20_POLY1305))) {
        private enum enumMixinStr_TLS1_TXT_RSA_PSK_WITH_CHACHA20_POLY1305 = `enum TLS1_TXT_RSA_PSK_WITH_CHACHA20_POLY1305 = "RSA-PSK-CHACHA20-POLY1305";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_RSA_PSK_WITH_CHACHA20_POLY1305); }))) {
            mixin(enumMixinStr_TLS1_TXT_RSA_PSK_WITH_CHACHA20_POLY1305);
        }
    }




    static if(!is(typeof(TLS1_TXT_DHE_PSK_WITH_CHACHA20_POLY1305))) {
        private enum enumMixinStr_TLS1_TXT_DHE_PSK_WITH_CHACHA20_POLY1305 = `enum TLS1_TXT_DHE_PSK_WITH_CHACHA20_POLY1305 = "DHE-PSK-CHACHA20-POLY1305";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_DHE_PSK_WITH_CHACHA20_POLY1305); }))) {
            mixin(enumMixinStr_TLS1_TXT_DHE_PSK_WITH_CHACHA20_POLY1305);
        }
    }




    static if(!is(typeof(TLS1_TXT_ECDHE_PSK_WITH_CHACHA20_POLY1305))) {
        private enum enumMixinStr_TLS1_TXT_ECDHE_PSK_WITH_CHACHA20_POLY1305 = `enum TLS1_TXT_ECDHE_PSK_WITH_CHACHA20_POLY1305 = "ECDHE-PSK-CHACHA20-POLY1305";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_ECDHE_PSK_WITH_CHACHA20_POLY1305); }))) {
            mixin(enumMixinStr_TLS1_TXT_ECDHE_PSK_WITH_CHACHA20_POLY1305);
        }
    }




    static if(!is(typeof(TLS1_TXT_PSK_WITH_CHACHA20_POLY1305))) {
        private enum enumMixinStr_TLS1_TXT_PSK_WITH_CHACHA20_POLY1305 = `enum TLS1_TXT_PSK_WITH_CHACHA20_POLY1305 = "PSK-CHACHA20-POLY1305";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_PSK_WITH_CHACHA20_POLY1305); }))) {
            mixin(enumMixinStr_TLS1_TXT_PSK_WITH_CHACHA20_POLY1305);
        }
    }




    static if(!is(typeof(TLS1_TXT_DHE_RSA_WITH_CHACHA20_POLY1305))) {
        private enum enumMixinStr_TLS1_TXT_DHE_RSA_WITH_CHACHA20_POLY1305 = `enum TLS1_TXT_DHE_RSA_WITH_CHACHA20_POLY1305 = "DHE-RSA-CHACHA20-POLY1305";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_DHE_RSA_WITH_CHACHA20_POLY1305); }))) {
            mixin(enumMixinStr_TLS1_TXT_DHE_RSA_WITH_CHACHA20_POLY1305);
        }
    }




    static if(!is(typeof(TLS1_TXT_ECDHE_ECDSA_WITH_CHACHA20_POLY1305))) {
        private enum enumMixinStr_TLS1_TXT_ECDHE_ECDSA_WITH_CHACHA20_POLY1305 = `enum TLS1_TXT_ECDHE_ECDSA_WITH_CHACHA20_POLY1305 = "ECDHE-ECDSA-CHACHA20-POLY1305";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_ECDHE_ECDSA_WITH_CHACHA20_POLY1305); }))) {
            mixin(enumMixinStr_TLS1_TXT_ECDHE_ECDSA_WITH_CHACHA20_POLY1305);
        }
    }




    static if(!is(typeof(TLS1_TXT_ECDHE_RSA_WITH_CHACHA20_POLY1305))) {
        private enum enumMixinStr_TLS1_TXT_ECDHE_RSA_WITH_CHACHA20_POLY1305 = `enum TLS1_TXT_ECDHE_RSA_WITH_CHACHA20_POLY1305 = "ECDHE-RSA-CHACHA20-POLY1305";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_ECDHE_RSA_WITH_CHACHA20_POLY1305); }))) {
            mixin(enumMixinStr_TLS1_TXT_ECDHE_RSA_WITH_CHACHA20_POLY1305);
        }
    }




    static if(!is(typeof(TLS1_TXT_ECDH_RSA_WITH_CAMELLIA_256_CBC_SHA384))) {
        private enum enumMixinStr_TLS1_TXT_ECDH_RSA_WITH_CAMELLIA_256_CBC_SHA384 = `enum TLS1_TXT_ECDH_RSA_WITH_CAMELLIA_256_CBC_SHA384 = "ECDH-RSA-CAMELLIA256-SHA384";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_ECDH_RSA_WITH_CAMELLIA_256_CBC_SHA384); }))) {
            mixin(enumMixinStr_TLS1_TXT_ECDH_RSA_WITH_CAMELLIA_256_CBC_SHA384);
        }
    }




    static if(!is(typeof(TLS1_TXT_ECDH_RSA_WITH_CAMELLIA_128_CBC_SHA256))) {
        private enum enumMixinStr_TLS1_TXT_ECDH_RSA_WITH_CAMELLIA_128_CBC_SHA256 = `enum TLS1_TXT_ECDH_RSA_WITH_CAMELLIA_128_CBC_SHA256 = "ECDH-RSA-CAMELLIA128-SHA256";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_ECDH_RSA_WITH_CAMELLIA_128_CBC_SHA256); }))) {
            mixin(enumMixinStr_TLS1_TXT_ECDH_RSA_WITH_CAMELLIA_128_CBC_SHA256);
        }
    }




    static if(!is(typeof(TLS1_TXT_ECDHE_RSA_WITH_CAMELLIA_256_CBC_SHA384))) {
        private enum enumMixinStr_TLS1_TXT_ECDHE_RSA_WITH_CAMELLIA_256_CBC_SHA384 = `enum TLS1_TXT_ECDHE_RSA_WITH_CAMELLIA_256_CBC_SHA384 = "ECDHE-RSA-CAMELLIA256-SHA384";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_ECDHE_RSA_WITH_CAMELLIA_256_CBC_SHA384); }))) {
            mixin(enumMixinStr_TLS1_TXT_ECDHE_RSA_WITH_CAMELLIA_256_CBC_SHA384);
        }
    }




    static if(!is(typeof(TLS1_TXT_ECDHE_RSA_WITH_CAMELLIA_128_CBC_SHA256))) {
        private enum enumMixinStr_TLS1_TXT_ECDHE_RSA_WITH_CAMELLIA_128_CBC_SHA256 = `enum TLS1_TXT_ECDHE_RSA_WITH_CAMELLIA_128_CBC_SHA256 = "ECDHE-RSA-CAMELLIA128-SHA256";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_ECDHE_RSA_WITH_CAMELLIA_128_CBC_SHA256); }))) {
            mixin(enumMixinStr_TLS1_TXT_ECDHE_RSA_WITH_CAMELLIA_128_CBC_SHA256);
        }
    }




    static if(!is(typeof(TLS1_TXT_ECDH_ECDSA_WITH_CAMELLIA_256_CBC_SHA384))) {
        private enum enumMixinStr_TLS1_TXT_ECDH_ECDSA_WITH_CAMELLIA_256_CBC_SHA384 = `enum TLS1_TXT_ECDH_ECDSA_WITH_CAMELLIA_256_CBC_SHA384 = "ECDH-ECDSA-CAMELLIA256-SHA384";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_ECDH_ECDSA_WITH_CAMELLIA_256_CBC_SHA384); }))) {
            mixin(enumMixinStr_TLS1_TXT_ECDH_ECDSA_WITH_CAMELLIA_256_CBC_SHA384);
        }
    }




    static if(!is(typeof(TLS1_TXT_ECDH_ECDSA_WITH_CAMELLIA_128_CBC_SHA256))) {
        private enum enumMixinStr_TLS1_TXT_ECDH_ECDSA_WITH_CAMELLIA_128_CBC_SHA256 = `enum TLS1_TXT_ECDH_ECDSA_WITH_CAMELLIA_128_CBC_SHA256 = "ECDH-ECDSA-CAMELLIA128-SHA256";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_ECDH_ECDSA_WITH_CAMELLIA_128_CBC_SHA256); }))) {
            mixin(enumMixinStr_TLS1_TXT_ECDH_ECDSA_WITH_CAMELLIA_128_CBC_SHA256);
        }
    }




    static if(!is(typeof(TLS1_TXT_ECDHE_ECDSA_WITH_CAMELLIA_256_CBC_SHA384))) {
        private enum enumMixinStr_TLS1_TXT_ECDHE_ECDSA_WITH_CAMELLIA_256_CBC_SHA384 = `enum TLS1_TXT_ECDHE_ECDSA_WITH_CAMELLIA_256_CBC_SHA384 = "ECDHE-ECDSA-CAMELLIA256-SHA384";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_ECDHE_ECDSA_WITH_CAMELLIA_256_CBC_SHA384); }))) {
            mixin(enumMixinStr_TLS1_TXT_ECDHE_ECDSA_WITH_CAMELLIA_256_CBC_SHA384);
        }
    }




    static if(!is(typeof(TLS1_TXT_ECDHE_ECDSA_WITH_CAMELLIA_128_CBC_SHA256))) {
        private enum enumMixinStr_TLS1_TXT_ECDHE_ECDSA_WITH_CAMELLIA_128_CBC_SHA256 = `enum TLS1_TXT_ECDHE_ECDSA_WITH_CAMELLIA_128_CBC_SHA256 = "ECDHE-ECDSA-CAMELLIA128-SHA256";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_ECDHE_ECDSA_WITH_CAMELLIA_128_CBC_SHA256); }))) {
            mixin(enumMixinStr_TLS1_TXT_ECDHE_ECDSA_WITH_CAMELLIA_128_CBC_SHA256);
        }
    }




    static if(!is(typeof(TLS1_TXT_ECDHE_PSK_WITH_NULL_SHA384))) {
        private enum enumMixinStr_TLS1_TXT_ECDHE_PSK_WITH_NULL_SHA384 = `enum TLS1_TXT_ECDHE_PSK_WITH_NULL_SHA384 = "ECDHE-PSK-NULL-SHA384";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_ECDHE_PSK_WITH_NULL_SHA384); }))) {
            mixin(enumMixinStr_TLS1_TXT_ECDHE_PSK_WITH_NULL_SHA384);
        }
    }




    static if(!is(typeof(TLS1_TXT_ECDHE_PSK_WITH_NULL_SHA256))) {
        private enum enumMixinStr_TLS1_TXT_ECDHE_PSK_WITH_NULL_SHA256 = `enum TLS1_TXT_ECDHE_PSK_WITH_NULL_SHA256 = "ECDHE-PSK-NULL-SHA256";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_ECDHE_PSK_WITH_NULL_SHA256); }))) {
            mixin(enumMixinStr_TLS1_TXT_ECDHE_PSK_WITH_NULL_SHA256);
        }
    }




    static if(!is(typeof(TLS1_TXT_ECDHE_PSK_WITH_NULL_SHA))) {
        private enum enumMixinStr_TLS1_TXT_ECDHE_PSK_WITH_NULL_SHA = `enum TLS1_TXT_ECDHE_PSK_WITH_NULL_SHA = "ECDHE-PSK-NULL-SHA";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_ECDHE_PSK_WITH_NULL_SHA); }))) {
            mixin(enumMixinStr_TLS1_TXT_ECDHE_PSK_WITH_NULL_SHA);
        }
    }




    static if(!is(typeof(TLS1_TXT_ECDHE_PSK_WITH_AES_256_CBC_SHA384))) {
        private enum enumMixinStr_TLS1_TXT_ECDHE_PSK_WITH_AES_256_CBC_SHA384 = `enum TLS1_TXT_ECDHE_PSK_WITH_AES_256_CBC_SHA384 = "ECDHE-PSK-AES256-CBC-SHA384";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_ECDHE_PSK_WITH_AES_256_CBC_SHA384); }))) {
            mixin(enumMixinStr_TLS1_TXT_ECDHE_PSK_WITH_AES_256_CBC_SHA384);
        }
    }




    static if(!is(typeof(TLS1_TXT_ECDHE_PSK_WITH_AES_128_CBC_SHA256))) {
        private enum enumMixinStr_TLS1_TXT_ECDHE_PSK_WITH_AES_128_CBC_SHA256 = `enum TLS1_TXT_ECDHE_PSK_WITH_AES_128_CBC_SHA256 = "ECDHE-PSK-AES128-CBC-SHA256";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_ECDHE_PSK_WITH_AES_128_CBC_SHA256); }))) {
            mixin(enumMixinStr_TLS1_TXT_ECDHE_PSK_WITH_AES_128_CBC_SHA256);
        }
    }




    static if(!is(typeof(TLS1_TXT_ECDHE_PSK_WITH_AES_256_CBC_SHA))) {
        private enum enumMixinStr_TLS1_TXT_ECDHE_PSK_WITH_AES_256_CBC_SHA = `enum TLS1_TXT_ECDHE_PSK_WITH_AES_256_CBC_SHA = "ECDHE-PSK-AES256-CBC-SHA";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_ECDHE_PSK_WITH_AES_256_CBC_SHA); }))) {
            mixin(enumMixinStr_TLS1_TXT_ECDHE_PSK_WITH_AES_256_CBC_SHA);
        }
    }




    static if(!is(typeof(TLS1_TXT_ECDHE_PSK_WITH_AES_128_CBC_SHA))) {
        private enum enumMixinStr_TLS1_TXT_ECDHE_PSK_WITH_AES_128_CBC_SHA = `enum TLS1_TXT_ECDHE_PSK_WITH_AES_128_CBC_SHA = "ECDHE-PSK-AES128-CBC-SHA";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_ECDHE_PSK_WITH_AES_128_CBC_SHA); }))) {
            mixin(enumMixinStr_TLS1_TXT_ECDHE_PSK_WITH_AES_128_CBC_SHA);
        }
    }




    static if(!is(typeof(TLS1_TXT_ECDHE_PSK_WITH_3DES_EDE_CBC_SHA))) {
        private enum enumMixinStr_TLS1_TXT_ECDHE_PSK_WITH_3DES_EDE_CBC_SHA = `enum TLS1_TXT_ECDHE_PSK_WITH_3DES_EDE_CBC_SHA = "ECDHE-PSK-3DES-EDE-CBC-SHA";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_ECDHE_PSK_WITH_3DES_EDE_CBC_SHA); }))) {
            mixin(enumMixinStr_TLS1_TXT_ECDHE_PSK_WITH_3DES_EDE_CBC_SHA);
        }
    }




    static if(!is(typeof(TLS1_TXT_ECDHE_PSK_WITH_RC4_128_SHA))) {
        private enum enumMixinStr_TLS1_TXT_ECDHE_PSK_WITH_RC4_128_SHA = `enum TLS1_TXT_ECDHE_PSK_WITH_RC4_128_SHA = "ECDHE-PSK-RC4-SHA";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_ECDHE_PSK_WITH_RC4_128_SHA); }))) {
            mixin(enumMixinStr_TLS1_TXT_ECDHE_PSK_WITH_RC4_128_SHA);
        }
    }




    static if(!is(typeof(TLS1_TXT_PSK_WITH_AES_256_GCM_SHA384))) {
        private enum enumMixinStr_TLS1_TXT_PSK_WITH_AES_256_GCM_SHA384 = `enum TLS1_TXT_PSK_WITH_AES_256_GCM_SHA384 = "PSK-AES256-GCM-SHA384";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_PSK_WITH_AES_256_GCM_SHA384); }))) {
            mixin(enumMixinStr_TLS1_TXT_PSK_WITH_AES_256_GCM_SHA384);
        }
    }




    static if(!is(typeof(TLS1_TXT_PSK_WITH_AES_128_GCM_SHA256))) {
        private enum enumMixinStr_TLS1_TXT_PSK_WITH_AES_128_GCM_SHA256 = `enum TLS1_TXT_PSK_WITH_AES_128_GCM_SHA256 = "PSK-AES128-GCM-SHA256";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_PSK_WITH_AES_128_GCM_SHA256); }))) {
            mixin(enumMixinStr_TLS1_TXT_PSK_WITH_AES_128_GCM_SHA256);
        }
    }




    static if(!is(typeof(TLS1_TXT_ECDH_RSA_WITH_AES_256_GCM_SHA384))) {
        private enum enumMixinStr_TLS1_TXT_ECDH_RSA_WITH_AES_256_GCM_SHA384 = `enum TLS1_TXT_ECDH_RSA_WITH_AES_256_GCM_SHA384 = "ECDH-RSA-AES256-GCM-SHA384";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_ECDH_RSA_WITH_AES_256_GCM_SHA384); }))) {
            mixin(enumMixinStr_TLS1_TXT_ECDH_RSA_WITH_AES_256_GCM_SHA384);
        }
    }




    static if(!is(typeof(TLS1_TXT_ECDH_RSA_WITH_AES_128_GCM_SHA256))) {
        private enum enumMixinStr_TLS1_TXT_ECDH_RSA_WITH_AES_128_GCM_SHA256 = `enum TLS1_TXT_ECDH_RSA_WITH_AES_128_GCM_SHA256 = "ECDH-RSA-AES128-GCM-SHA256";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_ECDH_RSA_WITH_AES_128_GCM_SHA256); }))) {
            mixin(enumMixinStr_TLS1_TXT_ECDH_RSA_WITH_AES_128_GCM_SHA256);
        }
    }




    static if(!is(typeof(TLS1_TXT_ECDHE_RSA_WITH_AES_256_GCM_SHA384))) {
        private enum enumMixinStr_TLS1_TXT_ECDHE_RSA_WITH_AES_256_GCM_SHA384 = `enum TLS1_TXT_ECDHE_RSA_WITH_AES_256_GCM_SHA384 = "ECDHE-RSA-AES256-GCM-SHA384";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_ECDHE_RSA_WITH_AES_256_GCM_SHA384); }))) {
            mixin(enumMixinStr_TLS1_TXT_ECDHE_RSA_WITH_AES_256_GCM_SHA384);
        }
    }




    static if(!is(typeof(TLS1_TXT_ECDHE_RSA_WITH_AES_128_GCM_SHA256))) {
        private enum enumMixinStr_TLS1_TXT_ECDHE_RSA_WITH_AES_128_GCM_SHA256 = `enum TLS1_TXT_ECDHE_RSA_WITH_AES_128_GCM_SHA256 = "ECDHE-RSA-AES128-GCM-SHA256";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_ECDHE_RSA_WITH_AES_128_GCM_SHA256); }))) {
            mixin(enumMixinStr_TLS1_TXT_ECDHE_RSA_WITH_AES_128_GCM_SHA256);
        }
    }




    static if(!is(typeof(TLS1_TXT_ECDH_ECDSA_WITH_AES_256_GCM_SHA384))) {
        private enum enumMixinStr_TLS1_TXT_ECDH_ECDSA_WITH_AES_256_GCM_SHA384 = `enum TLS1_TXT_ECDH_ECDSA_WITH_AES_256_GCM_SHA384 = "ECDH-ECDSA-AES256-GCM-SHA384";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_ECDH_ECDSA_WITH_AES_256_GCM_SHA384); }))) {
            mixin(enumMixinStr_TLS1_TXT_ECDH_ECDSA_WITH_AES_256_GCM_SHA384);
        }
    }




    static if(!is(typeof(TLS1_TXT_ECDH_ECDSA_WITH_AES_128_GCM_SHA256))) {
        private enum enumMixinStr_TLS1_TXT_ECDH_ECDSA_WITH_AES_128_GCM_SHA256 = `enum TLS1_TXT_ECDH_ECDSA_WITH_AES_128_GCM_SHA256 = "ECDH-ECDSA-AES128-GCM-SHA256";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_ECDH_ECDSA_WITH_AES_128_GCM_SHA256); }))) {
            mixin(enumMixinStr_TLS1_TXT_ECDH_ECDSA_WITH_AES_128_GCM_SHA256);
        }
    }




    static if(!is(typeof(TLS1_TXT_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384))) {
        private enum enumMixinStr_TLS1_TXT_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 = `enum TLS1_TXT_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 = "ECDHE-ECDSA-AES256-GCM-SHA384";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384); }))) {
            mixin(enumMixinStr_TLS1_TXT_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384);
        }
    }




    static if(!is(typeof(TLS1_TXT_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256))) {
        private enum enumMixinStr_TLS1_TXT_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 = `enum TLS1_TXT_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 = "ECDHE-ECDSA-AES128-GCM-SHA256";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256); }))) {
            mixin(enumMixinStr_TLS1_TXT_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256);
        }
    }




    static if(!is(typeof(TLS1_TXT_ECDH_RSA_WITH_AES_256_SHA384))) {
        private enum enumMixinStr_TLS1_TXT_ECDH_RSA_WITH_AES_256_SHA384 = `enum TLS1_TXT_ECDH_RSA_WITH_AES_256_SHA384 = "ECDH-RSA-AES256-SHA384";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_ECDH_RSA_WITH_AES_256_SHA384); }))) {
            mixin(enumMixinStr_TLS1_TXT_ECDH_RSA_WITH_AES_256_SHA384);
        }
    }




    static if(!is(typeof(TLS1_TXT_ECDH_RSA_WITH_AES_128_SHA256))) {
        private enum enumMixinStr_TLS1_TXT_ECDH_RSA_WITH_AES_128_SHA256 = `enum TLS1_TXT_ECDH_RSA_WITH_AES_128_SHA256 = "ECDH-RSA-AES128-SHA256";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_ECDH_RSA_WITH_AES_128_SHA256); }))) {
            mixin(enumMixinStr_TLS1_TXT_ECDH_RSA_WITH_AES_128_SHA256);
        }
    }




    static if(!is(typeof(TLS1_TXT_ECDHE_RSA_WITH_AES_256_SHA384))) {
        private enum enumMixinStr_TLS1_TXT_ECDHE_RSA_WITH_AES_256_SHA384 = `enum TLS1_TXT_ECDHE_RSA_WITH_AES_256_SHA384 = "ECDHE-RSA-AES256-SHA384";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_ECDHE_RSA_WITH_AES_256_SHA384); }))) {
            mixin(enumMixinStr_TLS1_TXT_ECDHE_RSA_WITH_AES_256_SHA384);
        }
    }




    static if(!is(typeof(TLS1_TXT_ECDHE_RSA_WITH_AES_128_SHA256))) {
        private enum enumMixinStr_TLS1_TXT_ECDHE_RSA_WITH_AES_128_SHA256 = `enum TLS1_TXT_ECDHE_RSA_WITH_AES_128_SHA256 = "ECDHE-RSA-AES128-SHA256";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_ECDHE_RSA_WITH_AES_128_SHA256); }))) {
            mixin(enumMixinStr_TLS1_TXT_ECDHE_RSA_WITH_AES_128_SHA256);
        }
    }




    static if(!is(typeof(TLS1_TXT_ECDH_ECDSA_WITH_AES_256_SHA384))) {
        private enum enumMixinStr_TLS1_TXT_ECDH_ECDSA_WITH_AES_256_SHA384 = `enum TLS1_TXT_ECDH_ECDSA_WITH_AES_256_SHA384 = "ECDH-ECDSA-AES256-SHA384";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_ECDH_ECDSA_WITH_AES_256_SHA384); }))) {
            mixin(enumMixinStr_TLS1_TXT_ECDH_ECDSA_WITH_AES_256_SHA384);
        }
    }




    static if(!is(typeof(TLS1_TXT_ECDH_ECDSA_WITH_AES_128_SHA256))) {
        private enum enumMixinStr_TLS1_TXT_ECDH_ECDSA_WITH_AES_128_SHA256 = `enum TLS1_TXT_ECDH_ECDSA_WITH_AES_128_SHA256 = "ECDH-ECDSA-AES128-SHA256";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_ECDH_ECDSA_WITH_AES_128_SHA256); }))) {
            mixin(enumMixinStr_TLS1_TXT_ECDH_ECDSA_WITH_AES_128_SHA256);
        }
    }




    static if(!is(typeof(TLS1_TXT_ECDHE_ECDSA_WITH_AES_256_SHA384))) {
        private enum enumMixinStr_TLS1_TXT_ECDHE_ECDSA_WITH_AES_256_SHA384 = `enum TLS1_TXT_ECDHE_ECDSA_WITH_AES_256_SHA384 = "ECDHE-ECDSA-AES256-SHA384";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_ECDHE_ECDSA_WITH_AES_256_SHA384); }))) {
            mixin(enumMixinStr_TLS1_TXT_ECDHE_ECDSA_WITH_AES_256_SHA384);
        }
    }




    static if(!is(typeof(TLS1_TXT_ECDHE_ECDSA_WITH_AES_128_SHA256))) {
        private enum enumMixinStr_TLS1_TXT_ECDHE_ECDSA_WITH_AES_128_SHA256 = `enum TLS1_TXT_ECDHE_ECDSA_WITH_AES_128_SHA256 = "ECDHE-ECDSA-AES128-SHA256";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_ECDHE_ECDSA_WITH_AES_128_SHA256); }))) {
            mixin(enumMixinStr_TLS1_TXT_ECDHE_ECDSA_WITH_AES_128_SHA256);
        }
    }




    static if(!is(typeof(TLS1_TXT_ECDHE_ECDSA_WITH_AES_256_CCM_8))) {
        private enum enumMixinStr_TLS1_TXT_ECDHE_ECDSA_WITH_AES_256_CCM_8 = `enum TLS1_TXT_ECDHE_ECDSA_WITH_AES_256_CCM_8 = "ECDHE-ECDSA-AES256-CCM8";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_ECDHE_ECDSA_WITH_AES_256_CCM_8); }))) {
            mixin(enumMixinStr_TLS1_TXT_ECDHE_ECDSA_WITH_AES_256_CCM_8);
        }
    }




    static if(!is(typeof(TLS1_TXT_ECDHE_ECDSA_WITH_AES_128_CCM_8))) {
        private enum enumMixinStr_TLS1_TXT_ECDHE_ECDSA_WITH_AES_128_CCM_8 = `enum TLS1_TXT_ECDHE_ECDSA_WITH_AES_128_CCM_8 = "ECDHE-ECDSA-AES128-CCM8";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_ECDHE_ECDSA_WITH_AES_128_CCM_8); }))) {
            mixin(enumMixinStr_TLS1_TXT_ECDHE_ECDSA_WITH_AES_128_CCM_8);
        }
    }




    static if(!is(typeof(TLS1_TXT_ECDHE_ECDSA_WITH_AES_256_CCM))) {
        private enum enumMixinStr_TLS1_TXT_ECDHE_ECDSA_WITH_AES_256_CCM = `enum TLS1_TXT_ECDHE_ECDSA_WITH_AES_256_CCM = "ECDHE-ECDSA-AES256-CCM";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_ECDHE_ECDSA_WITH_AES_256_CCM); }))) {
            mixin(enumMixinStr_TLS1_TXT_ECDHE_ECDSA_WITH_AES_256_CCM);
        }
    }




    static if(!is(typeof(TLS1_TXT_ECDHE_ECDSA_WITH_AES_128_CCM))) {
        private enum enumMixinStr_TLS1_TXT_ECDHE_ECDSA_WITH_AES_128_CCM = `enum TLS1_TXT_ECDHE_ECDSA_WITH_AES_128_CCM = "ECDHE-ECDSA-AES128-CCM";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_ECDHE_ECDSA_WITH_AES_128_CCM); }))) {
            mixin(enumMixinStr_TLS1_TXT_ECDHE_ECDSA_WITH_AES_128_CCM);
        }
    }




    static if(!is(typeof(TLS1_TXT_DHE_PSK_WITH_AES_256_CCM_8))) {
        private enum enumMixinStr_TLS1_TXT_DHE_PSK_WITH_AES_256_CCM_8 = `enum TLS1_TXT_DHE_PSK_WITH_AES_256_CCM_8 = "DHE-PSK-AES256-CCM8";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_DHE_PSK_WITH_AES_256_CCM_8); }))) {
            mixin(enumMixinStr_TLS1_TXT_DHE_PSK_WITH_AES_256_CCM_8);
        }
    }




    static if(!is(typeof(TLS1_TXT_DHE_PSK_WITH_AES_128_CCM_8))) {
        private enum enumMixinStr_TLS1_TXT_DHE_PSK_WITH_AES_128_CCM_8 = `enum TLS1_TXT_DHE_PSK_WITH_AES_128_CCM_8 = "DHE-PSK-AES128-CCM8";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_DHE_PSK_WITH_AES_128_CCM_8); }))) {
            mixin(enumMixinStr_TLS1_TXT_DHE_PSK_WITH_AES_128_CCM_8);
        }
    }




    static if(!is(typeof(TLS1_TXT_PSK_WITH_AES_256_CCM_8))) {
        private enum enumMixinStr_TLS1_TXT_PSK_WITH_AES_256_CCM_8 = `enum TLS1_TXT_PSK_WITH_AES_256_CCM_8 = "PSK-AES256-CCM8";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_PSK_WITH_AES_256_CCM_8); }))) {
            mixin(enumMixinStr_TLS1_TXT_PSK_WITH_AES_256_CCM_8);
        }
    }




    static if(!is(typeof(TLS1_TXT_PSK_WITH_AES_128_CCM_8))) {
        private enum enumMixinStr_TLS1_TXT_PSK_WITH_AES_128_CCM_8 = `enum TLS1_TXT_PSK_WITH_AES_128_CCM_8 = "PSK-AES128-CCM8";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_PSK_WITH_AES_128_CCM_8); }))) {
            mixin(enumMixinStr_TLS1_TXT_PSK_WITH_AES_128_CCM_8);
        }
    }




    static if(!is(typeof(TLS1_TXT_DHE_PSK_WITH_AES_256_CCM))) {
        private enum enumMixinStr_TLS1_TXT_DHE_PSK_WITH_AES_256_CCM = `enum TLS1_TXT_DHE_PSK_WITH_AES_256_CCM = "DHE-PSK-AES256-CCM";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_DHE_PSK_WITH_AES_256_CCM); }))) {
            mixin(enumMixinStr_TLS1_TXT_DHE_PSK_WITH_AES_256_CCM);
        }
    }




    static if(!is(typeof(TLS1_TXT_DHE_PSK_WITH_AES_128_CCM))) {
        private enum enumMixinStr_TLS1_TXT_DHE_PSK_WITH_AES_128_CCM = `enum TLS1_TXT_DHE_PSK_WITH_AES_128_CCM = "DHE-PSK-AES128-CCM";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_DHE_PSK_WITH_AES_128_CCM); }))) {
            mixin(enumMixinStr_TLS1_TXT_DHE_PSK_WITH_AES_128_CCM);
        }
    }




    static if(!is(typeof(TLS1_TXT_PSK_WITH_AES_256_CCM))) {
        private enum enumMixinStr_TLS1_TXT_PSK_WITH_AES_256_CCM = `enum TLS1_TXT_PSK_WITH_AES_256_CCM = "PSK-AES256-CCM";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_PSK_WITH_AES_256_CCM); }))) {
            mixin(enumMixinStr_TLS1_TXT_PSK_WITH_AES_256_CCM);
        }
    }






    static if(!is(typeof(TLS1_TXT_PSK_WITH_AES_128_CCM))) {
        private enum enumMixinStr_TLS1_TXT_PSK_WITH_AES_128_CCM = `enum TLS1_TXT_PSK_WITH_AES_128_CCM = "PSK-AES128-CCM";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_PSK_WITH_AES_128_CCM); }))) {
            mixin(enumMixinStr_TLS1_TXT_PSK_WITH_AES_128_CCM);
        }
    }




    static if(!is(typeof(TLS1_TXT_DHE_RSA_WITH_AES_256_CCM_8))) {
        private enum enumMixinStr_TLS1_TXT_DHE_RSA_WITH_AES_256_CCM_8 = `enum TLS1_TXT_DHE_RSA_WITH_AES_256_CCM_8 = "DHE-RSA-AES256-CCM8";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_DHE_RSA_WITH_AES_256_CCM_8); }))) {
            mixin(enumMixinStr_TLS1_TXT_DHE_RSA_WITH_AES_256_CCM_8);
        }
    }




    static if(!is(typeof(PEM_F_B2I_DSS))) {
        private enum enumMixinStr_PEM_F_B2I_DSS = `enum PEM_F_B2I_DSS = 127;`;
        static if(is(typeof({ mixin(enumMixinStr_PEM_F_B2I_DSS); }))) {
            mixin(enumMixinStr_PEM_F_B2I_DSS);
        }
    }




    static if(!is(typeof(PEM_F_B2I_PVK_BIO))) {
        private enum enumMixinStr_PEM_F_B2I_PVK_BIO = `enum PEM_F_B2I_PVK_BIO = 128;`;
        static if(is(typeof({ mixin(enumMixinStr_PEM_F_B2I_PVK_BIO); }))) {
            mixin(enumMixinStr_PEM_F_B2I_PVK_BIO);
        }
    }




    static if(!is(typeof(PEM_F_B2I_RSA))) {
        private enum enumMixinStr_PEM_F_B2I_RSA = `enum PEM_F_B2I_RSA = 129;`;
        static if(is(typeof({ mixin(enumMixinStr_PEM_F_B2I_RSA); }))) {
            mixin(enumMixinStr_PEM_F_B2I_RSA);
        }
    }




    static if(!is(typeof(PEM_F_CHECK_BITLEN_DSA))) {
        private enum enumMixinStr_PEM_F_CHECK_BITLEN_DSA = `enum PEM_F_CHECK_BITLEN_DSA = 130;`;
        static if(is(typeof({ mixin(enumMixinStr_PEM_F_CHECK_BITLEN_DSA); }))) {
            mixin(enumMixinStr_PEM_F_CHECK_BITLEN_DSA);
        }
    }




    static if(!is(typeof(PEM_F_CHECK_BITLEN_RSA))) {
        private enum enumMixinStr_PEM_F_CHECK_BITLEN_RSA = `enum PEM_F_CHECK_BITLEN_RSA = 131;`;
        static if(is(typeof({ mixin(enumMixinStr_PEM_F_CHECK_BITLEN_RSA); }))) {
            mixin(enumMixinStr_PEM_F_CHECK_BITLEN_RSA);
        }
    }




    static if(!is(typeof(PEM_F_D2I_PKCS8PRIVATEKEY_BIO))) {
        private enum enumMixinStr_PEM_F_D2I_PKCS8PRIVATEKEY_BIO = `enum PEM_F_D2I_PKCS8PRIVATEKEY_BIO = 120;`;
        static if(is(typeof({ mixin(enumMixinStr_PEM_F_D2I_PKCS8PRIVATEKEY_BIO); }))) {
            mixin(enumMixinStr_PEM_F_D2I_PKCS8PRIVATEKEY_BIO);
        }
    }




    static if(!is(typeof(PEM_F_D2I_PKCS8PRIVATEKEY_FP))) {
        private enum enumMixinStr_PEM_F_D2I_PKCS8PRIVATEKEY_FP = `enum PEM_F_D2I_PKCS8PRIVATEKEY_FP = 121;`;
        static if(is(typeof({ mixin(enumMixinStr_PEM_F_D2I_PKCS8PRIVATEKEY_FP); }))) {
            mixin(enumMixinStr_PEM_F_D2I_PKCS8PRIVATEKEY_FP);
        }
    }




    static if(!is(typeof(PEM_F_DO_B2I))) {
        private enum enumMixinStr_PEM_F_DO_B2I = `enum PEM_F_DO_B2I = 132;`;
        static if(is(typeof({ mixin(enumMixinStr_PEM_F_DO_B2I); }))) {
            mixin(enumMixinStr_PEM_F_DO_B2I);
        }
    }




    static if(!is(typeof(PEM_F_DO_B2I_BIO))) {
        private enum enumMixinStr_PEM_F_DO_B2I_BIO = `enum PEM_F_DO_B2I_BIO = 133;`;
        static if(is(typeof({ mixin(enumMixinStr_PEM_F_DO_B2I_BIO); }))) {
            mixin(enumMixinStr_PEM_F_DO_B2I_BIO);
        }
    }




    static if(!is(typeof(PEM_F_DO_BLOB_HEADER))) {
        private enum enumMixinStr_PEM_F_DO_BLOB_HEADER = `enum PEM_F_DO_BLOB_HEADER = 134;`;
        static if(is(typeof({ mixin(enumMixinStr_PEM_F_DO_BLOB_HEADER); }))) {
            mixin(enumMixinStr_PEM_F_DO_BLOB_HEADER);
        }
    }




    static if(!is(typeof(PEM_F_DO_I2B))) {
        private enum enumMixinStr_PEM_F_DO_I2B = `enum PEM_F_DO_I2B = 146;`;
        static if(is(typeof({ mixin(enumMixinStr_PEM_F_DO_I2B); }))) {
            mixin(enumMixinStr_PEM_F_DO_I2B);
        }
    }




    static if(!is(typeof(PEM_F_DO_PK8PKEY))) {
        private enum enumMixinStr_PEM_F_DO_PK8PKEY = `enum PEM_F_DO_PK8PKEY = 126;`;
        static if(is(typeof({ mixin(enumMixinStr_PEM_F_DO_PK8PKEY); }))) {
            mixin(enumMixinStr_PEM_F_DO_PK8PKEY);
        }
    }




    static if(!is(typeof(PEM_F_DO_PK8PKEY_FP))) {
        private enum enumMixinStr_PEM_F_DO_PK8PKEY_FP = `enum PEM_F_DO_PK8PKEY_FP = 125;`;
        static if(is(typeof({ mixin(enumMixinStr_PEM_F_DO_PK8PKEY_FP); }))) {
            mixin(enumMixinStr_PEM_F_DO_PK8PKEY_FP);
        }
    }




    static if(!is(typeof(PEM_F_DO_PVK_BODY))) {
        private enum enumMixinStr_PEM_F_DO_PVK_BODY = `enum PEM_F_DO_PVK_BODY = 135;`;
        static if(is(typeof({ mixin(enumMixinStr_PEM_F_DO_PVK_BODY); }))) {
            mixin(enumMixinStr_PEM_F_DO_PVK_BODY);
        }
    }




    static if(!is(typeof(PEM_F_DO_PVK_HEADER))) {
        private enum enumMixinStr_PEM_F_DO_PVK_HEADER = `enum PEM_F_DO_PVK_HEADER = 136;`;
        static if(is(typeof({ mixin(enumMixinStr_PEM_F_DO_PVK_HEADER); }))) {
            mixin(enumMixinStr_PEM_F_DO_PVK_HEADER);
        }
    }




    static if(!is(typeof(PEM_F_GET_HEADER_AND_DATA))) {
        private enum enumMixinStr_PEM_F_GET_HEADER_AND_DATA = `enum PEM_F_GET_HEADER_AND_DATA = 143;`;
        static if(is(typeof({ mixin(enumMixinStr_PEM_F_GET_HEADER_AND_DATA); }))) {
            mixin(enumMixinStr_PEM_F_GET_HEADER_AND_DATA);
        }
    }




    static if(!is(typeof(PEM_F_GET_NAME))) {
        private enum enumMixinStr_PEM_F_GET_NAME = `enum PEM_F_GET_NAME = 144;`;
        static if(is(typeof({ mixin(enumMixinStr_PEM_F_GET_NAME); }))) {
            mixin(enumMixinStr_PEM_F_GET_NAME);
        }
    }




    static if(!is(typeof(PEM_F_I2B_PVK))) {
        private enum enumMixinStr_PEM_F_I2B_PVK = `enum PEM_F_I2B_PVK = 137;`;
        static if(is(typeof({ mixin(enumMixinStr_PEM_F_I2B_PVK); }))) {
            mixin(enumMixinStr_PEM_F_I2B_PVK);
        }
    }




    static if(!is(typeof(PEM_F_I2B_PVK_BIO))) {
        private enum enumMixinStr_PEM_F_I2B_PVK_BIO = `enum PEM_F_I2B_PVK_BIO = 138;`;
        static if(is(typeof({ mixin(enumMixinStr_PEM_F_I2B_PVK_BIO); }))) {
            mixin(enumMixinStr_PEM_F_I2B_PVK_BIO);
        }
    }




    static if(!is(typeof(PEM_F_LOAD_IV))) {
        private enum enumMixinStr_PEM_F_LOAD_IV = `enum PEM_F_LOAD_IV = 101;`;
        static if(is(typeof({ mixin(enumMixinStr_PEM_F_LOAD_IV); }))) {
            mixin(enumMixinStr_PEM_F_LOAD_IV);
        }
    }




    static if(!is(typeof(PEM_F_PEM_ASN1_READ))) {
        private enum enumMixinStr_PEM_F_PEM_ASN1_READ = `enum PEM_F_PEM_ASN1_READ = 102;`;
        static if(is(typeof({ mixin(enumMixinStr_PEM_F_PEM_ASN1_READ); }))) {
            mixin(enumMixinStr_PEM_F_PEM_ASN1_READ);
        }
    }




    static if(!is(typeof(PEM_F_PEM_ASN1_READ_BIO))) {
        private enum enumMixinStr_PEM_F_PEM_ASN1_READ_BIO = `enum PEM_F_PEM_ASN1_READ_BIO = 103;`;
        static if(is(typeof({ mixin(enumMixinStr_PEM_F_PEM_ASN1_READ_BIO); }))) {
            mixin(enumMixinStr_PEM_F_PEM_ASN1_READ_BIO);
        }
    }




    static if(!is(typeof(PEM_F_PEM_ASN1_WRITE))) {
        private enum enumMixinStr_PEM_F_PEM_ASN1_WRITE = `enum PEM_F_PEM_ASN1_WRITE = 104;`;
        static if(is(typeof({ mixin(enumMixinStr_PEM_F_PEM_ASN1_WRITE); }))) {
            mixin(enumMixinStr_PEM_F_PEM_ASN1_WRITE);
        }
    }




    static if(!is(typeof(PEM_F_PEM_ASN1_WRITE_BIO))) {
        private enum enumMixinStr_PEM_F_PEM_ASN1_WRITE_BIO = `enum PEM_F_PEM_ASN1_WRITE_BIO = 105;`;
        static if(is(typeof({ mixin(enumMixinStr_PEM_F_PEM_ASN1_WRITE_BIO); }))) {
            mixin(enumMixinStr_PEM_F_PEM_ASN1_WRITE_BIO);
        }
    }




    static if(!is(typeof(PEM_F_PEM_DEF_CALLBACK))) {
        private enum enumMixinStr_PEM_F_PEM_DEF_CALLBACK = `enum PEM_F_PEM_DEF_CALLBACK = 100;`;
        static if(is(typeof({ mixin(enumMixinStr_PEM_F_PEM_DEF_CALLBACK); }))) {
            mixin(enumMixinStr_PEM_F_PEM_DEF_CALLBACK);
        }
    }




    static if(!is(typeof(PEM_F_PEM_DO_HEADER))) {
        private enum enumMixinStr_PEM_F_PEM_DO_HEADER = `enum PEM_F_PEM_DO_HEADER = 106;`;
        static if(is(typeof({ mixin(enumMixinStr_PEM_F_PEM_DO_HEADER); }))) {
            mixin(enumMixinStr_PEM_F_PEM_DO_HEADER);
        }
    }




    static if(!is(typeof(PEM_F_PEM_GET_EVP_CIPHER_INFO))) {
        private enum enumMixinStr_PEM_F_PEM_GET_EVP_CIPHER_INFO = `enum PEM_F_PEM_GET_EVP_CIPHER_INFO = 107;`;
        static if(is(typeof({ mixin(enumMixinStr_PEM_F_PEM_GET_EVP_CIPHER_INFO); }))) {
            mixin(enumMixinStr_PEM_F_PEM_GET_EVP_CIPHER_INFO);
        }
    }




    static if(!is(typeof(PEM_F_PEM_READ))) {
        private enum enumMixinStr_PEM_F_PEM_READ = `enum PEM_F_PEM_READ = 108;`;
        static if(is(typeof({ mixin(enumMixinStr_PEM_F_PEM_READ); }))) {
            mixin(enumMixinStr_PEM_F_PEM_READ);
        }
    }




    static if(!is(typeof(PEM_F_PEM_READ_BIO))) {
        private enum enumMixinStr_PEM_F_PEM_READ_BIO = `enum PEM_F_PEM_READ_BIO = 109;`;
        static if(is(typeof({ mixin(enumMixinStr_PEM_F_PEM_READ_BIO); }))) {
            mixin(enumMixinStr_PEM_F_PEM_READ_BIO);
        }
    }




    static if(!is(typeof(PEM_F_PEM_READ_BIO_DHPARAMS))) {
        private enum enumMixinStr_PEM_F_PEM_READ_BIO_DHPARAMS = `enum PEM_F_PEM_READ_BIO_DHPARAMS = 141;`;
        static if(is(typeof({ mixin(enumMixinStr_PEM_F_PEM_READ_BIO_DHPARAMS); }))) {
            mixin(enumMixinStr_PEM_F_PEM_READ_BIO_DHPARAMS);
        }
    }




    static if(!is(typeof(PEM_F_PEM_READ_BIO_EX))) {
        private enum enumMixinStr_PEM_F_PEM_READ_BIO_EX = `enum PEM_F_PEM_READ_BIO_EX = 145;`;
        static if(is(typeof({ mixin(enumMixinStr_PEM_F_PEM_READ_BIO_EX); }))) {
            mixin(enumMixinStr_PEM_F_PEM_READ_BIO_EX);
        }
    }




    static if(!is(typeof(PEM_F_PEM_READ_BIO_PARAMETERS))) {
        private enum enumMixinStr_PEM_F_PEM_READ_BIO_PARAMETERS = `enum PEM_F_PEM_READ_BIO_PARAMETERS = 140;`;
        static if(is(typeof({ mixin(enumMixinStr_PEM_F_PEM_READ_BIO_PARAMETERS); }))) {
            mixin(enumMixinStr_PEM_F_PEM_READ_BIO_PARAMETERS);
        }
    }




    static if(!is(typeof(PEM_F_PEM_READ_BIO_PRIVATEKEY))) {
        private enum enumMixinStr_PEM_F_PEM_READ_BIO_PRIVATEKEY = `enum PEM_F_PEM_READ_BIO_PRIVATEKEY = 123;`;
        static if(is(typeof({ mixin(enumMixinStr_PEM_F_PEM_READ_BIO_PRIVATEKEY); }))) {
            mixin(enumMixinStr_PEM_F_PEM_READ_BIO_PRIVATEKEY);
        }
    }




    static if(!is(typeof(PEM_F_PEM_READ_DHPARAMS))) {
        private enum enumMixinStr_PEM_F_PEM_READ_DHPARAMS = `enum PEM_F_PEM_READ_DHPARAMS = 142;`;
        static if(is(typeof({ mixin(enumMixinStr_PEM_F_PEM_READ_DHPARAMS); }))) {
            mixin(enumMixinStr_PEM_F_PEM_READ_DHPARAMS);
        }
    }




    static if(!is(typeof(PEM_F_PEM_READ_PRIVATEKEY))) {
        private enum enumMixinStr_PEM_F_PEM_READ_PRIVATEKEY = `enum PEM_F_PEM_READ_PRIVATEKEY = 124;`;
        static if(is(typeof({ mixin(enumMixinStr_PEM_F_PEM_READ_PRIVATEKEY); }))) {
            mixin(enumMixinStr_PEM_F_PEM_READ_PRIVATEKEY);
        }
    }




    static if(!is(typeof(PEM_F_PEM_SIGNFINAL))) {
        private enum enumMixinStr_PEM_F_PEM_SIGNFINAL = `enum PEM_F_PEM_SIGNFINAL = 112;`;
        static if(is(typeof({ mixin(enumMixinStr_PEM_F_PEM_SIGNFINAL); }))) {
            mixin(enumMixinStr_PEM_F_PEM_SIGNFINAL);
        }
    }




    static if(!is(typeof(PEM_F_PEM_WRITE))) {
        private enum enumMixinStr_PEM_F_PEM_WRITE = `enum PEM_F_PEM_WRITE = 113;`;
        static if(is(typeof({ mixin(enumMixinStr_PEM_F_PEM_WRITE); }))) {
            mixin(enumMixinStr_PEM_F_PEM_WRITE);
        }
    }




    static if(!is(typeof(PEM_F_PEM_WRITE_BIO))) {
        private enum enumMixinStr_PEM_F_PEM_WRITE_BIO = `enum PEM_F_PEM_WRITE_BIO = 114;`;
        static if(is(typeof({ mixin(enumMixinStr_PEM_F_PEM_WRITE_BIO); }))) {
            mixin(enumMixinStr_PEM_F_PEM_WRITE_BIO);
        }
    }




    static if(!is(typeof(PEM_F_PEM_WRITE_BIO_PRIVATEKEY_TRADITIONAL))) {
        private enum enumMixinStr_PEM_F_PEM_WRITE_BIO_PRIVATEKEY_TRADITIONAL = `enum PEM_F_PEM_WRITE_BIO_PRIVATEKEY_TRADITIONAL = 147;`;
        static if(is(typeof({ mixin(enumMixinStr_PEM_F_PEM_WRITE_BIO_PRIVATEKEY_TRADITIONAL); }))) {
            mixin(enumMixinStr_PEM_F_PEM_WRITE_BIO_PRIVATEKEY_TRADITIONAL);
        }
    }




    static if(!is(typeof(PEM_F_PEM_WRITE_PRIVATEKEY))) {
        private enum enumMixinStr_PEM_F_PEM_WRITE_PRIVATEKEY = `enum PEM_F_PEM_WRITE_PRIVATEKEY = 139;`;
        static if(is(typeof({ mixin(enumMixinStr_PEM_F_PEM_WRITE_PRIVATEKEY); }))) {
            mixin(enumMixinStr_PEM_F_PEM_WRITE_PRIVATEKEY);
        }
    }




    static if(!is(typeof(PEM_F_PEM_X509_INFO_READ))) {
        private enum enumMixinStr_PEM_F_PEM_X509_INFO_READ = `enum PEM_F_PEM_X509_INFO_READ = 115;`;
        static if(is(typeof({ mixin(enumMixinStr_PEM_F_PEM_X509_INFO_READ); }))) {
            mixin(enumMixinStr_PEM_F_PEM_X509_INFO_READ);
        }
    }




    static if(!is(typeof(PEM_F_PEM_X509_INFO_READ_BIO))) {
        private enum enumMixinStr_PEM_F_PEM_X509_INFO_READ_BIO = `enum PEM_F_PEM_X509_INFO_READ_BIO = 116;`;
        static if(is(typeof({ mixin(enumMixinStr_PEM_F_PEM_X509_INFO_READ_BIO); }))) {
            mixin(enumMixinStr_PEM_F_PEM_X509_INFO_READ_BIO);
        }
    }




    static if(!is(typeof(PEM_F_PEM_X509_INFO_WRITE_BIO))) {
        private enum enumMixinStr_PEM_F_PEM_X509_INFO_WRITE_BIO = `enum PEM_F_PEM_X509_INFO_WRITE_BIO = 117;`;
        static if(is(typeof({ mixin(enumMixinStr_PEM_F_PEM_X509_INFO_WRITE_BIO); }))) {
            mixin(enumMixinStr_PEM_F_PEM_X509_INFO_WRITE_BIO);
        }
    }




    static if(!is(typeof(PEM_R_BAD_BASE64_DECODE))) {
        private enum enumMixinStr_PEM_R_BAD_BASE64_DECODE = `enum PEM_R_BAD_BASE64_DECODE = 100;`;
        static if(is(typeof({ mixin(enumMixinStr_PEM_R_BAD_BASE64_DECODE); }))) {
            mixin(enumMixinStr_PEM_R_BAD_BASE64_DECODE);
        }
    }




    static if(!is(typeof(PEM_R_BAD_DECRYPT))) {
        private enum enumMixinStr_PEM_R_BAD_DECRYPT = `enum PEM_R_BAD_DECRYPT = 101;`;
        static if(is(typeof({ mixin(enumMixinStr_PEM_R_BAD_DECRYPT); }))) {
            mixin(enumMixinStr_PEM_R_BAD_DECRYPT);
        }
    }




    static if(!is(typeof(PEM_R_BAD_END_LINE))) {
        private enum enumMixinStr_PEM_R_BAD_END_LINE = `enum PEM_R_BAD_END_LINE = 102;`;
        static if(is(typeof({ mixin(enumMixinStr_PEM_R_BAD_END_LINE); }))) {
            mixin(enumMixinStr_PEM_R_BAD_END_LINE);
        }
    }




    static if(!is(typeof(PEM_R_BAD_IV_CHARS))) {
        private enum enumMixinStr_PEM_R_BAD_IV_CHARS = `enum PEM_R_BAD_IV_CHARS = 103;`;
        static if(is(typeof({ mixin(enumMixinStr_PEM_R_BAD_IV_CHARS); }))) {
            mixin(enumMixinStr_PEM_R_BAD_IV_CHARS);
        }
    }




    static if(!is(typeof(PEM_R_BAD_MAGIC_NUMBER))) {
        private enum enumMixinStr_PEM_R_BAD_MAGIC_NUMBER = `enum PEM_R_BAD_MAGIC_NUMBER = 116;`;
        static if(is(typeof({ mixin(enumMixinStr_PEM_R_BAD_MAGIC_NUMBER); }))) {
            mixin(enumMixinStr_PEM_R_BAD_MAGIC_NUMBER);
        }
    }




    static if(!is(typeof(PEM_R_BAD_PASSWORD_READ))) {
        private enum enumMixinStr_PEM_R_BAD_PASSWORD_READ = `enum PEM_R_BAD_PASSWORD_READ = 104;`;
        static if(is(typeof({ mixin(enumMixinStr_PEM_R_BAD_PASSWORD_READ); }))) {
            mixin(enumMixinStr_PEM_R_BAD_PASSWORD_READ);
        }
    }




    static if(!is(typeof(PEM_R_BAD_VERSION_NUMBER))) {
        private enum enumMixinStr_PEM_R_BAD_VERSION_NUMBER = `enum PEM_R_BAD_VERSION_NUMBER = 117;`;
        static if(is(typeof({ mixin(enumMixinStr_PEM_R_BAD_VERSION_NUMBER); }))) {
            mixin(enumMixinStr_PEM_R_BAD_VERSION_NUMBER);
        }
    }




    static if(!is(typeof(PEM_R_BIO_WRITE_FAILURE))) {
        private enum enumMixinStr_PEM_R_BIO_WRITE_FAILURE = `enum PEM_R_BIO_WRITE_FAILURE = 118;`;
        static if(is(typeof({ mixin(enumMixinStr_PEM_R_BIO_WRITE_FAILURE); }))) {
            mixin(enumMixinStr_PEM_R_BIO_WRITE_FAILURE);
        }
    }




    static if(!is(typeof(PEM_R_CIPHER_IS_NULL))) {
        private enum enumMixinStr_PEM_R_CIPHER_IS_NULL = `enum PEM_R_CIPHER_IS_NULL = 127;`;
        static if(is(typeof({ mixin(enumMixinStr_PEM_R_CIPHER_IS_NULL); }))) {
            mixin(enumMixinStr_PEM_R_CIPHER_IS_NULL);
        }
    }




    static if(!is(typeof(PEM_R_ERROR_CONVERTING_PRIVATE_KEY))) {
        private enum enumMixinStr_PEM_R_ERROR_CONVERTING_PRIVATE_KEY = `enum PEM_R_ERROR_CONVERTING_PRIVATE_KEY = 115;`;
        static if(is(typeof({ mixin(enumMixinStr_PEM_R_ERROR_CONVERTING_PRIVATE_KEY); }))) {
            mixin(enumMixinStr_PEM_R_ERROR_CONVERTING_PRIVATE_KEY);
        }
    }




    static if(!is(typeof(PEM_R_EXPECTING_PRIVATE_KEY_BLOB))) {
        private enum enumMixinStr_PEM_R_EXPECTING_PRIVATE_KEY_BLOB = `enum PEM_R_EXPECTING_PRIVATE_KEY_BLOB = 119;`;
        static if(is(typeof({ mixin(enumMixinStr_PEM_R_EXPECTING_PRIVATE_KEY_BLOB); }))) {
            mixin(enumMixinStr_PEM_R_EXPECTING_PRIVATE_KEY_BLOB);
        }
    }




    static if(!is(typeof(PEM_R_EXPECTING_PUBLIC_KEY_BLOB))) {
        private enum enumMixinStr_PEM_R_EXPECTING_PUBLIC_KEY_BLOB = `enum PEM_R_EXPECTING_PUBLIC_KEY_BLOB = 120;`;
        static if(is(typeof({ mixin(enumMixinStr_PEM_R_EXPECTING_PUBLIC_KEY_BLOB); }))) {
            mixin(enumMixinStr_PEM_R_EXPECTING_PUBLIC_KEY_BLOB);
        }
    }




    static if(!is(typeof(PEM_R_HEADER_TOO_LONG))) {
        private enum enumMixinStr_PEM_R_HEADER_TOO_LONG = `enum PEM_R_HEADER_TOO_LONG = 128;`;
        static if(is(typeof({ mixin(enumMixinStr_PEM_R_HEADER_TOO_LONG); }))) {
            mixin(enumMixinStr_PEM_R_HEADER_TOO_LONG);
        }
    }




    static if(!is(typeof(PEM_R_INCONSISTENT_HEADER))) {
        private enum enumMixinStr_PEM_R_INCONSISTENT_HEADER = `enum PEM_R_INCONSISTENT_HEADER = 121;`;
        static if(is(typeof({ mixin(enumMixinStr_PEM_R_INCONSISTENT_HEADER); }))) {
            mixin(enumMixinStr_PEM_R_INCONSISTENT_HEADER);
        }
    }




    static if(!is(typeof(PEM_R_KEYBLOB_HEADER_PARSE_ERROR))) {
        private enum enumMixinStr_PEM_R_KEYBLOB_HEADER_PARSE_ERROR = `enum PEM_R_KEYBLOB_HEADER_PARSE_ERROR = 122;`;
        static if(is(typeof({ mixin(enumMixinStr_PEM_R_KEYBLOB_HEADER_PARSE_ERROR); }))) {
            mixin(enumMixinStr_PEM_R_KEYBLOB_HEADER_PARSE_ERROR);
        }
    }




    static if(!is(typeof(PEM_R_KEYBLOB_TOO_SHORT))) {
        private enum enumMixinStr_PEM_R_KEYBLOB_TOO_SHORT = `enum PEM_R_KEYBLOB_TOO_SHORT = 123;`;
        static if(is(typeof({ mixin(enumMixinStr_PEM_R_KEYBLOB_TOO_SHORT); }))) {
            mixin(enumMixinStr_PEM_R_KEYBLOB_TOO_SHORT);
        }
    }




    static if(!is(typeof(PEM_R_MISSING_DEK_IV))) {
        private enum enumMixinStr_PEM_R_MISSING_DEK_IV = `enum PEM_R_MISSING_DEK_IV = 129;`;
        static if(is(typeof({ mixin(enumMixinStr_PEM_R_MISSING_DEK_IV); }))) {
            mixin(enumMixinStr_PEM_R_MISSING_DEK_IV);
        }
    }




    static if(!is(typeof(PEM_R_NOT_DEK_INFO))) {
        private enum enumMixinStr_PEM_R_NOT_DEK_INFO = `enum PEM_R_NOT_DEK_INFO = 105;`;
        static if(is(typeof({ mixin(enumMixinStr_PEM_R_NOT_DEK_INFO); }))) {
            mixin(enumMixinStr_PEM_R_NOT_DEK_INFO);
        }
    }




    static if(!is(typeof(PEM_R_NOT_ENCRYPTED))) {
        private enum enumMixinStr_PEM_R_NOT_ENCRYPTED = `enum PEM_R_NOT_ENCRYPTED = 106;`;
        static if(is(typeof({ mixin(enumMixinStr_PEM_R_NOT_ENCRYPTED); }))) {
            mixin(enumMixinStr_PEM_R_NOT_ENCRYPTED);
        }
    }




    static if(!is(typeof(PEM_R_NOT_PROC_TYPE))) {
        private enum enumMixinStr_PEM_R_NOT_PROC_TYPE = `enum PEM_R_NOT_PROC_TYPE = 107;`;
        static if(is(typeof({ mixin(enumMixinStr_PEM_R_NOT_PROC_TYPE); }))) {
            mixin(enumMixinStr_PEM_R_NOT_PROC_TYPE);
        }
    }




    static if(!is(typeof(PEM_R_NO_START_LINE))) {
        private enum enumMixinStr_PEM_R_NO_START_LINE = `enum PEM_R_NO_START_LINE = 108;`;
        static if(is(typeof({ mixin(enumMixinStr_PEM_R_NO_START_LINE); }))) {
            mixin(enumMixinStr_PEM_R_NO_START_LINE);
        }
    }




    static if(!is(typeof(PEM_R_PROBLEMS_GETTING_PASSWORD))) {
        private enum enumMixinStr_PEM_R_PROBLEMS_GETTING_PASSWORD = `enum PEM_R_PROBLEMS_GETTING_PASSWORD = 109;`;
        static if(is(typeof({ mixin(enumMixinStr_PEM_R_PROBLEMS_GETTING_PASSWORD); }))) {
            mixin(enumMixinStr_PEM_R_PROBLEMS_GETTING_PASSWORD);
        }
    }




    static if(!is(typeof(PEM_R_PVK_DATA_TOO_SHORT))) {
        private enum enumMixinStr_PEM_R_PVK_DATA_TOO_SHORT = `enum PEM_R_PVK_DATA_TOO_SHORT = 124;`;
        static if(is(typeof({ mixin(enumMixinStr_PEM_R_PVK_DATA_TOO_SHORT); }))) {
            mixin(enumMixinStr_PEM_R_PVK_DATA_TOO_SHORT);
        }
    }




    static if(!is(typeof(PEM_R_PVK_TOO_SHORT))) {
        private enum enumMixinStr_PEM_R_PVK_TOO_SHORT = `enum PEM_R_PVK_TOO_SHORT = 125;`;
        static if(is(typeof({ mixin(enumMixinStr_PEM_R_PVK_TOO_SHORT); }))) {
            mixin(enumMixinStr_PEM_R_PVK_TOO_SHORT);
        }
    }




    static if(!is(typeof(PEM_R_READ_KEY))) {
        private enum enumMixinStr_PEM_R_READ_KEY = `enum PEM_R_READ_KEY = 111;`;
        static if(is(typeof({ mixin(enumMixinStr_PEM_R_READ_KEY); }))) {
            mixin(enumMixinStr_PEM_R_READ_KEY);
        }
    }




    static if(!is(typeof(PEM_R_SHORT_HEADER))) {
        private enum enumMixinStr_PEM_R_SHORT_HEADER = `enum PEM_R_SHORT_HEADER = 112;`;
        static if(is(typeof({ mixin(enumMixinStr_PEM_R_SHORT_HEADER); }))) {
            mixin(enumMixinStr_PEM_R_SHORT_HEADER);
        }
    }




    static if(!is(typeof(PEM_R_UNEXPECTED_DEK_IV))) {
        private enum enumMixinStr_PEM_R_UNEXPECTED_DEK_IV = `enum PEM_R_UNEXPECTED_DEK_IV = 130;`;
        static if(is(typeof({ mixin(enumMixinStr_PEM_R_UNEXPECTED_DEK_IV); }))) {
            mixin(enumMixinStr_PEM_R_UNEXPECTED_DEK_IV);
        }
    }




    static if(!is(typeof(PEM_R_UNSUPPORTED_CIPHER))) {
        private enum enumMixinStr_PEM_R_UNSUPPORTED_CIPHER = `enum PEM_R_UNSUPPORTED_CIPHER = 113;`;
        static if(is(typeof({ mixin(enumMixinStr_PEM_R_UNSUPPORTED_CIPHER); }))) {
            mixin(enumMixinStr_PEM_R_UNSUPPORTED_CIPHER);
        }
    }




    static if(!is(typeof(PEM_R_UNSUPPORTED_ENCRYPTION))) {
        private enum enumMixinStr_PEM_R_UNSUPPORTED_ENCRYPTION = `enum PEM_R_UNSUPPORTED_ENCRYPTION = 114;`;
        static if(is(typeof({ mixin(enumMixinStr_PEM_R_UNSUPPORTED_ENCRYPTION); }))) {
            mixin(enumMixinStr_PEM_R_UNSUPPORTED_ENCRYPTION);
        }
    }




    static if(!is(typeof(PEM_R_UNSUPPORTED_KEY_COMPONENTS))) {
        private enum enumMixinStr_PEM_R_UNSUPPORTED_KEY_COMPONENTS = `enum PEM_R_UNSUPPORTED_KEY_COMPONENTS = 126;`;
        static if(is(typeof({ mixin(enumMixinStr_PEM_R_UNSUPPORTED_KEY_COMPONENTS); }))) {
            mixin(enumMixinStr_PEM_R_UNSUPPORTED_KEY_COMPONENTS);
        }
    }




    static if(!is(typeof(PEM_R_UNSUPPORTED_PUBLIC_KEY_TYPE))) {
        private enum enumMixinStr_PEM_R_UNSUPPORTED_PUBLIC_KEY_TYPE = `enum PEM_R_UNSUPPORTED_PUBLIC_KEY_TYPE = 110;`;
        static if(is(typeof({ mixin(enumMixinStr_PEM_R_UNSUPPORTED_PUBLIC_KEY_TYPE); }))) {
            mixin(enumMixinStr_PEM_R_UNSUPPORTED_PUBLIC_KEY_TYPE);
        }
    }






    static if(!is(typeof(TLS1_TXT_DHE_RSA_WITH_AES_128_CCM_8))) {
        private enum enumMixinStr_TLS1_TXT_DHE_RSA_WITH_AES_128_CCM_8 = `enum TLS1_TXT_DHE_RSA_WITH_AES_128_CCM_8 = "DHE-RSA-AES128-CCM8";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_DHE_RSA_WITH_AES_128_CCM_8); }))) {
            mixin(enumMixinStr_TLS1_TXT_DHE_RSA_WITH_AES_128_CCM_8);
        }
    }




    static if(!is(typeof(TLS1_TXT_RSA_WITH_AES_256_CCM_8))) {
        private enum enumMixinStr_TLS1_TXT_RSA_WITH_AES_256_CCM_8 = `enum TLS1_TXT_RSA_WITH_AES_256_CCM_8 = "AES256-CCM8";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_RSA_WITH_AES_256_CCM_8); }))) {
            mixin(enumMixinStr_TLS1_TXT_RSA_WITH_AES_256_CCM_8);
        }
    }




    static if(!is(typeof(TLS1_TXT_RSA_WITH_AES_128_CCM_8))) {
        private enum enumMixinStr_TLS1_TXT_RSA_WITH_AES_128_CCM_8 = `enum TLS1_TXT_RSA_WITH_AES_128_CCM_8 = "AES128-CCM8";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_RSA_WITH_AES_128_CCM_8); }))) {
            mixin(enumMixinStr_TLS1_TXT_RSA_WITH_AES_128_CCM_8);
        }
    }




    static if(!is(typeof(TLS1_TXT_DHE_RSA_WITH_AES_256_CCM))) {
        private enum enumMixinStr_TLS1_TXT_DHE_RSA_WITH_AES_256_CCM = `enum TLS1_TXT_DHE_RSA_WITH_AES_256_CCM = "DHE-RSA-AES256-CCM";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_DHE_RSA_WITH_AES_256_CCM); }))) {
            mixin(enumMixinStr_TLS1_TXT_DHE_RSA_WITH_AES_256_CCM);
        }
    }




    static if(!is(typeof(TLS1_TXT_DHE_RSA_WITH_AES_128_CCM))) {
        private enum enumMixinStr_TLS1_TXT_DHE_RSA_WITH_AES_128_CCM = `enum TLS1_TXT_DHE_RSA_WITH_AES_128_CCM = "DHE-RSA-AES128-CCM";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_DHE_RSA_WITH_AES_128_CCM); }))) {
            mixin(enumMixinStr_TLS1_TXT_DHE_RSA_WITH_AES_128_CCM);
        }
    }




    static if(!is(typeof(TLS1_TXT_RSA_WITH_AES_256_CCM))) {
        private enum enumMixinStr_TLS1_TXT_RSA_WITH_AES_256_CCM = `enum TLS1_TXT_RSA_WITH_AES_256_CCM = "AES256-CCM";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_RSA_WITH_AES_256_CCM); }))) {
            mixin(enumMixinStr_TLS1_TXT_RSA_WITH_AES_256_CCM);
        }
    }




    static if(!is(typeof(TLS1_TXT_RSA_WITH_AES_128_CCM))) {
        private enum enumMixinStr_TLS1_TXT_RSA_WITH_AES_128_CCM = `enum TLS1_TXT_RSA_WITH_AES_128_CCM = "AES128-CCM";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_RSA_WITH_AES_128_CCM); }))) {
            mixin(enumMixinStr_TLS1_TXT_RSA_WITH_AES_128_CCM);
        }
    }




    static if(!is(typeof(TLS1_TXT_ADH_WITH_AES_256_GCM_SHA384))) {
        private enum enumMixinStr_TLS1_TXT_ADH_WITH_AES_256_GCM_SHA384 = `enum TLS1_TXT_ADH_WITH_AES_256_GCM_SHA384 = "ADH-AES256-GCM-SHA384";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_ADH_WITH_AES_256_GCM_SHA384); }))) {
            mixin(enumMixinStr_TLS1_TXT_ADH_WITH_AES_256_GCM_SHA384);
        }
    }




    static if(!is(typeof(TLS1_TXT_ADH_WITH_AES_128_GCM_SHA256))) {
        private enum enumMixinStr_TLS1_TXT_ADH_WITH_AES_128_GCM_SHA256 = `enum TLS1_TXT_ADH_WITH_AES_128_GCM_SHA256 = "ADH-AES128-GCM-SHA256";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_ADH_WITH_AES_128_GCM_SHA256); }))) {
            mixin(enumMixinStr_TLS1_TXT_ADH_WITH_AES_128_GCM_SHA256);
        }
    }




    static if(!is(typeof(TLS1_TXT_DH_DSS_WITH_AES_256_GCM_SHA384))) {
        private enum enumMixinStr_TLS1_TXT_DH_DSS_WITH_AES_256_GCM_SHA384 = `enum TLS1_TXT_DH_DSS_WITH_AES_256_GCM_SHA384 = "DH-DSS-AES256-GCM-SHA384";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_DH_DSS_WITH_AES_256_GCM_SHA384); }))) {
            mixin(enumMixinStr_TLS1_TXT_DH_DSS_WITH_AES_256_GCM_SHA384);
        }
    }




    static if(!is(typeof(TLS1_TXT_DH_DSS_WITH_AES_128_GCM_SHA256))) {
        private enum enumMixinStr_TLS1_TXT_DH_DSS_WITH_AES_128_GCM_SHA256 = `enum TLS1_TXT_DH_DSS_WITH_AES_128_GCM_SHA256 = "DH-DSS-AES128-GCM-SHA256";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_DH_DSS_WITH_AES_128_GCM_SHA256); }))) {
            mixin(enumMixinStr_TLS1_TXT_DH_DSS_WITH_AES_128_GCM_SHA256);
        }
    }




    static if(!is(typeof(TLS1_TXT_DHE_DSS_WITH_AES_256_GCM_SHA384))) {
        private enum enumMixinStr_TLS1_TXT_DHE_DSS_WITH_AES_256_GCM_SHA384 = `enum TLS1_TXT_DHE_DSS_WITH_AES_256_GCM_SHA384 = "DHE-DSS-AES256-GCM-SHA384";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_DHE_DSS_WITH_AES_256_GCM_SHA384); }))) {
            mixin(enumMixinStr_TLS1_TXT_DHE_DSS_WITH_AES_256_GCM_SHA384);
        }
    }




    static if(!is(typeof(TLS1_TXT_DHE_DSS_WITH_AES_128_GCM_SHA256))) {
        private enum enumMixinStr_TLS1_TXT_DHE_DSS_WITH_AES_128_GCM_SHA256 = `enum TLS1_TXT_DHE_DSS_WITH_AES_128_GCM_SHA256 = "DHE-DSS-AES128-GCM-SHA256";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_DHE_DSS_WITH_AES_128_GCM_SHA256); }))) {
            mixin(enumMixinStr_TLS1_TXT_DHE_DSS_WITH_AES_128_GCM_SHA256);
        }
    }




    static if(!is(typeof(TLS1_TXT_DH_RSA_WITH_AES_256_GCM_SHA384))) {
        private enum enumMixinStr_TLS1_TXT_DH_RSA_WITH_AES_256_GCM_SHA384 = `enum TLS1_TXT_DH_RSA_WITH_AES_256_GCM_SHA384 = "DH-RSA-AES256-GCM-SHA384";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_DH_RSA_WITH_AES_256_GCM_SHA384); }))) {
            mixin(enumMixinStr_TLS1_TXT_DH_RSA_WITH_AES_256_GCM_SHA384);
        }
    }




    static if(!is(typeof(TLS1_TXT_DH_RSA_WITH_AES_128_GCM_SHA256))) {
        private enum enumMixinStr_TLS1_TXT_DH_RSA_WITH_AES_128_GCM_SHA256 = `enum TLS1_TXT_DH_RSA_WITH_AES_128_GCM_SHA256 = "DH-RSA-AES128-GCM-SHA256";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_DH_RSA_WITH_AES_128_GCM_SHA256); }))) {
            mixin(enumMixinStr_TLS1_TXT_DH_RSA_WITH_AES_128_GCM_SHA256);
        }
    }




    static if(!is(typeof(TLS1_TXT_DHE_RSA_WITH_AES_256_GCM_SHA384))) {
        private enum enumMixinStr_TLS1_TXT_DHE_RSA_WITH_AES_256_GCM_SHA384 = `enum TLS1_TXT_DHE_RSA_WITH_AES_256_GCM_SHA384 = "DHE-RSA-AES256-GCM-SHA384";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_DHE_RSA_WITH_AES_256_GCM_SHA384); }))) {
            mixin(enumMixinStr_TLS1_TXT_DHE_RSA_WITH_AES_256_GCM_SHA384);
        }
    }




    static if(!is(typeof(TLS1_TXT_DHE_RSA_WITH_AES_128_GCM_SHA256))) {
        private enum enumMixinStr_TLS1_TXT_DHE_RSA_WITH_AES_128_GCM_SHA256 = `enum TLS1_TXT_DHE_RSA_WITH_AES_128_GCM_SHA256 = "DHE-RSA-AES128-GCM-SHA256";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_DHE_RSA_WITH_AES_128_GCM_SHA256); }))) {
            mixin(enumMixinStr_TLS1_TXT_DHE_RSA_WITH_AES_128_GCM_SHA256);
        }
    }




    static if(!is(typeof(TLS1_TXT_RSA_WITH_AES_256_GCM_SHA384))) {
        private enum enumMixinStr_TLS1_TXT_RSA_WITH_AES_256_GCM_SHA384 = `enum TLS1_TXT_RSA_WITH_AES_256_GCM_SHA384 = "AES256-GCM-SHA384";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_RSA_WITH_AES_256_GCM_SHA384); }))) {
            mixin(enumMixinStr_TLS1_TXT_RSA_WITH_AES_256_GCM_SHA384);
        }
    }




    static if(!is(typeof(TLS1_TXT_RSA_WITH_AES_128_GCM_SHA256))) {
        private enum enumMixinStr_TLS1_TXT_RSA_WITH_AES_128_GCM_SHA256 = `enum TLS1_TXT_RSA_WITH_AES_128_GCM_SHA256 = "AES128-GCM-SHA256";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_RSA_WITH_AES_128_GCM_SHA256); }))) {
            mixin(enumMixinStr_TLS1_TXT_RSA_WITH_AES_128_GCM_SHA256);
        }
    }




    static if(!is(typeof(TLS1_TXT_ADH_WITH_AES_256_SHA256))) {
        private enum enumMixinStr_TLS1_TXT_ADH_WITH_AES_256_SHA256 = `enum TLS1_TXT_ADH_WITH_AES_256_SHA256 = "ADH-AES256-SHA256";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_ADH_WITH_AES_256_SHA256); }))) {
            mixin(enumMixinStr_TLS1_TXT_ADH_WITH_AES_256_SHA256);
        }
    }




    static if(!is(typeof(TLS1_TXT_ADH_WITH_AES_128_SHA256))) {
        private enum enumMixinStr_TLS1_TXT_ADH_WITH_AES_128_SHA256 = `enum TLS1_TXT_ADH_WITH_AES_128_SHA256 = "ADH-AES128-SHA256";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_ADH_WITH_AES_128_SHA256); }))) {
            mixin(enumMixinStr_TLS1_TXT_ADH_WITH_AES_128_SHA256);
        }
    }




    static if(!is(typeof(TLS1_TXT_DHE_RSA_WITH_AES_256_SHA256))) {
        private enum enumMixinStr_TLS1_TXT_DHE_RSA_WITH_AES_256_SHA256 = `enum TLS1_TXT_DHE_RSA_WITH_AES_256_SHA256 = "DHE-RSA-AES256-SHA256";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_DHE_RSA_WITH_AES_256_SHA256); }))) {
            mixin(enumMixinStr_TLS1_TXT_DHE_RSA_WITH_AES_256_SHA256);
        }
    }




    static if(!is(typeof(TLS1_TXT_DHE_DSS_WITH_AES_256_SHA256))) {
        private enum enumMixinStr_TLS1_TXT_DHE_DSS_WITH_AES_256_SHA256 = `enum TLS1_TXT_DHE_DSS_WITH_AES_256_SHA256 = "DHE-DSS-AES256-SHA256";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_DHE_DSS_WITH_AES_256_SHA256); }))) {
            mixin(enumMixinStr_TLS1_TXT_DHE_DSS_WITH_AES_256_SHA256);
        }
    }




    static if(!is(typeof(TLS1_TXT_DH_RSA_WITH_AES_256_SHA256))) {
        private enum enumMixinStr_TLS1_TXT_DH_RSA_WITH_AES_256_SHA256 = `enum TLS1_TXT_DH_RSA_WITH_AES_256_SHA256 = "DH-RSA-AES256-SHA256";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_DH_RSA_WITH_AES_256_SHA256); }))) {
            mixin(enumMixinStr_TLS1_TXT_DH_RSA_WITH_AES_256_SHA256);
        }
    }




    static if(!is(typeof(TLS1_TXT_DH_DSS_WITH_AES_256_SHA256))) {
        private enum enumMixinStr_TLS1_TXT_DH_DSS_WITH_AES_256_SHA256 = `enum TLS1_TXT_DH_DSS_WITH_AES_256_SHA256 = "DH-DSS-AES256-SHA256";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_DH_DSS_WITH_AES_256_SHA256); }))) {
            mixin(enumMixinStr_TLS1_TXT_DH_DSS_WITH_AES_256_SHA256);
        }
    }




    static if(!is(typeof(TLS1_TXT_DHE_RSA_WITH_AES_128_SHA256))) {
        private enum enumMixinStr_TLS1_TXT_DHE_RSA_WITH_AES_128_SHA256 = `enum TLS1_TXT_DHE_RSA_WITH_AES_128_SHA256 = "DHE-RSA-AES128-SHA256";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_DHE_RSA_WITH_AES_128_SHA256); }))) {
            mixin(enumMixinStr_TLS1_TXT_DHE_RSA_WITH_AES_128_SHA256);
        }
    }




    static if(!is(typeof(TLS1_TXT_DHE_DSS_WITH_AES_128_SHA256))) {
        private enum enumMixinStr_TLS1_TXT_DHE_DSS_WITH_AES_128_SHA256 = `enum TLS1_TXT_DHE_DSS_WITH_AES_128_SHA256 = "DHE-DSS-AES128-SHA256";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_DHE_DSS_WITH_AES_128_SHA256); }))) {
            mixin(enumMixinStr_TLS1_TXT_DHE_DSS_WITH_AES_128_SHA256);
        }
    }




    static if(!is(typeof(TLS1_TXT_DH_RSA_WITH_AES_128_SHA256))) {
        private enum enumMixinStr_TLS1_TXT_DH_RSA_WITH_AES_128_SHA256 = `enum TLS1_TXT_DH_RSA_WITH_AES_128_SHA256 = "DH-RSA-AES128-SHA256";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_DH_RSA_WITH_AES_128_SHA256); }))) {
            mixin(enumMixinStr_TLS1_TXT_DH_RSA_WITH_AES_128_SHA256);
        }
    }




    static if(!is(typeof(TLS1_TXT_DH_DSS_WITH_AES_128_SHA256))) {
        private enum enumMixinStr_TLS1_TXT_DH_DSS_WITH_AES_128_SHA256 = `enum TLS1_TXT_DH_DSS_WITH_AES_128_SHA256 = "DH-DSS-AES128-SHA256";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_DH_DSS_WITH_AES_128_SHA256); }))) {
            mixin(enumMixinStr_TLS1_TXT_DH_DSS_WITH_AES_128_SHA256);
        }
    }




    static if(!is(typeof(TLS1_TXT_RSA_WITH_AES_256_SHA256))) {
        private enum enumMixinStr_TLS1_TXT_RSA_WITH_AES_256_SHA256 = `enum TLS1_TXT_RSA_WITH_AES_256_SHA256 = "AES256-SHA256";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_RSA_WITH_AES_256_SHA256); }))) {
            mixin(enumMixinStr_TLS1_TXT_RSA_WITH_AES_256_SHA256);
        }
    }




    static if(!is(typeof(TLS1_TXT_RSA_WITH_AES_128_SHA256))) {
        private enum enumMixinStr_TLS1_TXT_RSA_WITH_AES_128_SHA256 = `enum TLS1_TXT_RSA_WITH_AES_128_SHA256 = "AES128-SHA256";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_RSA_WITH_AES_128_SHA256); }))) {
            mixin(enumMixinStr_TLS1_TXT_RSA_WITH_AES_128_SHA256);
        }
    }




    static if(!is(typeof(TLS1_TXT_RSA_WITH_NULL_SHA256))) {
        private enum enumMixinStr_TLS1_TXT_RSA_WITH_NULL_SHA256 = `enum TLS1_TXT_RSA_WITH_NULL_SHA256 = "NULL-SHA256";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_RSA_WITH_NULL_SHA256); }))) {
            mixin(enumMixinStr_TLS1_TXT_RSA_WITH_NULL_SHA256);
        }
    }




    static if(!is(typeof(TLS1_TXT_ADH_WITH_SEED_SHA))) {
        private enum enumMixinStr_TLS1_TXT_ADH_WITH_SEED_SHA = `enum TLS1_TXT_ADH_WITH_SEED_SHA = "ADH-SEED-SHA";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_ADH_WITH_SEED_SHA); }))) {
            mixin(enumMixinStr_TLS1_TXT_ADH_WITH_SEED_SHA);
        }
    }




    static if(!is(typeof(TLS1_TXT_DHE_RSA_WITH_SEED_SHA))) {
        private enum enumMixinStr_TLS1_TXT_DHE_RSA_WITH_SEED_SHA = `enum TLS1_TXT_DHE_RSA_WITH_SEED_SHA = "DHE-RSA-SEED-SHA";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_DHE_RSA_WITH_SEED_SHA); }))) {
            mixin(enumMixinStr_TLS1_TXT_DHE_RSA_WITH_SEED_SHA);
        }
    }




    static if(!is(typeof(TLS1_TXT_DHE_DSS_WITH_SEED_SHA))) {
        private enum enumMixinStr_TLS1_TXT_DHE_DSS_WITH_SEED_SHA = `enum TLS1_TXT_DHE_DSS_WITH_SEED_SHA = "DHE-DSS-SEED-SHA";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_DHE_DSS_WITH_SEED_SHA); }))) {
            mixin(enumMixinStr_TLS1_TXT_DHE_DSS_WITH_SEED_SHA);
        }
    }




    static if(!is(typeof(TLS1_TXT_DH_RSA_WITH_SEED_SHA))) {
        private enum enumMixinStr_TLS1_TXT_DH_RSA_WITH_SEED_SHA = `enum TLS1_TXT_DH_RSA_WITH_SEED_SHA = "DH-RSA-SEED-SHA";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_DH_RSA_WITH_SEED_SHA); }))) {
            mixin(enumMixinStr_TLS1_TXT_DH_RSA_WITH_SEED_SHA);
        }
    }




    static if(!is(typeof(TLS1_TXT_DH_DSS_WITH_SEED_SHA))) {
        private enum enumMixinStr_TLS1_TXT_DH_DSS_WITH_SEED_SHA = `enum TLS1_TXT_DH_DSS_WITH_SEED_SHA = "DH-DSS-SEED-SHA";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_DH_DSS_WITH_SEED_SHA); }))) {
            mixin(enumMixinStr_TLS1_TXT_DH_DSS_WITH_SEED_SHA);
        }
    }




    static if(!is(typeof(TLS1_TXT_RSA_WITH_SEED_SHA))) {
        private enum enumMixinStr_TLS1_TXT_RSA_WITH_SEED_SHA = `enum TLS1_TXT_RSA_WITH_SEED_SHA = "SEED-SHA";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_RSA_WITH_SEED_SHA); }))) {
            mixin(enumMixinStr_TLS1_TXT_RSA_WITH_SEED_SHA);
        }
    }




    static if(!is(typeof(TLS1_TXT_ECDHE_PSK_WITH_CAMELLIA_256_CBC_SHA384))) {
        private enum enumMixinStr_TLS1_TXT_ECDHE_PSK_WITH_CAMELLIA_256_CBC_SHA384 = `enum TLS1_TXT_ECDHE_PSK_WITH_CAMELLIA_256_CBC_SHA384 = "ECDHE-PSK-CAMELLIA256-SHA384";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_ECDHE_PSK_WITH_CAMELLIA_256_CBC_SHA384); }))) {
            mixin(enumMixinStr_TLS1_TXT_ECDHE_PSK_WITH_CAMELLIA_256_CBC_SHA384);
        }
    }




    static if(!is(typeof(TLS1_TXT_ECDHE_PSK_WITH_CAMELLIA_128_CBC_SHA256))) {
        private enum enumMixinStr_TLS1_TXT_ECDHE_PSK_WITH_CAMELLIA_128_CBC_SHA256 = `enum TLS1_TXT_ECDHE_PSK_WITH_CAMELLIA_128_CBC_SHA256 = "ECDHE-PSK-CAMELLIA128-SHA256";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_ECDHE_PSK_WITH_CAMELLIA_128_CBC_SHA256); }))) {
            mixin(enumMixinStr_TLS1_TXT_ECDHE_PSK_WITH_CAMELLIA_128_CBC_SHA256);
        }
    }




    static if(!is(typeof(TLS1_TXT_RSA_PSK_WITH_CAMELLIA_256_CBC_SHA384))) {
        private enum enumMixinStr_TLS1_TXT_RSA_PSK_WITH_CAMELLIA_256_CBC_SHA384 = `enum TLS1_TXT_RSA_PSK_WITH_CAMELLIA_256_CBC_SHA384 = "RSA-PSK-CAMELLIA256-SHA384";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_RSA_PSK_WITH_CAMELLIA_256_CBC_SHA384); }))) {
            mixin(enumMixinStr_TLS1_TXT_RSA_PSK_WITH_CAMELLIA_256_CBC_SHA384);
        }
    }




    static if(!is(typeof(TLS1_TXT_RSA_PSK_WITH_CAMELLIA_128_CBC_SHA256))) {
        private enum enumMixinStr_TLS1_TXT_RSA_PSK_WITH_CAMELLIA_128_CBC_SHA256 = `enum TLS1_TXT_RSA_PSK_WITH_CAMELLIA_128_CBC_SHA256 = "RSA-PSK-CAMELLIA128-SHA256";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_RSA_PSK_WITH_CAMELLIA_128_CBC_SHA256); }))) {
            mixin(enumMixinStr_TLS1_TXT_RSA_PSK_WITH_CAMELLIA_128_CBC_SHA256);
        }
    }




    static if(!is(typeof(TLS1_TXT_DHE_PSK_WITH_CAMELLIA_256_CBC_SHA384))) {
        private enum enumMixinStr_TLS1_TXT_DHE_PSK_WITH_CAMELLIA_256_CBC_SHA384 = `enum TLS1_TXT_DHE_PSK_WITH_CAMELLIA_256_CBC_SHA384 = "DHE-PSK-CAMELLIA256-SHA384";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_DHE_PSK_WITH_CAMELLIA_256_CBC_SHA384); }))) {
            mixin(enumMixinStr_TLS1_TXT_DHE_PSK_WITH_CAMELLIA_256_CBC_SHA384);
        }
    }




    static if(!is(typeof(TLS1_TXT_DHE_PSK_WITH_CAMELLIA_128_CBC_SHA256))) {
        private enum enumMixinStr_TLS1_TXT_DHE_PSK_WITH_CAMELLIA_128_CBC_SHA256 = `enum TLS1_TXT_DHE_PSK_WITH_CAMELLIA_128_CBC_SHA256 = "DHE-PSK-CAMELLIA128-SHA256";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_DHE_PSK_WITH_CAMELLIA_128_CBC_SHA256); }))) {
            mixin(enumMixinStr_TLS1_TXT_DHE_PSK_WITH_CAMELLIA_128_CBC_SHA256);
        }
    }




    static if(!is(typeof(TLS1_TXT_PSK_WITH_CAMELLIA_256_CBC_SHA384))) {
        private enum enumMixinStr_TLS1_TXT_PSK_WITH_CAMELLIA_256_CBC_SHA384 = `enum TLS1_TXT_PSK_WITH_CAMELLIA_256_CBC_SHA384 = "PSK-CAMELLIA256-SHA384";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_PSK_WITH_CAMELLIA_256_CBC_SHA384); }))) {
            mixin(enumMixinStr_TLS1_TXT_PSK_WITH_CAMELLIA_256_CBC_SHA384);
        }
    }




    static if(!is(typeof(TLS1_TXT_PSK_WITH_CAMELLIA_128_CBC_SHA256))) {
        private enum enumMixinStr_TLS1_TXT_PSK_WITH_CAMELLIA_128_CBC_SHA256 = `enum TLS1_TXT_PSK_WITH_CAMELLIA_128_CBC_SHA256 = "PSK-CAMELLIA128-SHA256";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_PSK_WITH_CAMELLIA_128_CBC_SHA256); }))) {
            mixin(enumMixinStr_TLS1_TXT_PSK_WITH_CAMELLIA_128_CBC_SHA256);
        }
    }




    static if(!is(typeof(TLS1_TXT_ADH_WITH_CAMELLIA_256_CBC_SHA256))) {
        private enum enumMixinStr_TLS1_TXT_ADH_WITH_CAMELLIA_256_CBC_SHA256 = `enum TLS1_TXT_ADH_WITH_CAMELLIA_256_CBC_SHA256 = "ADH-CAMELLIA256-SHA256";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_ADH_WITH_CAMELLIA_256_CBC_SHA256); }))) {
            mixin(enumMixinStr_TLS1_TXT_ADH_WITH_CAMELLIA_256_CBC_SHA256);
        }
    }




    static if(!is(typeof(TLS1_TXT_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256))) {
        private enum enumMixinStr_TLS1_TXT_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256 = `enum TLS1_TXT_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256 = "DHE-RSA-CAMELLIA256-SHA256";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256); }))) {
            mixin(enumMixinStr_TLS1_TXT_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256);
        }
    }




    static if(!is(typeof(TLS1_TXT_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA256))) {
        private enum enumMixinStr_TLS1_TXT_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA256 = `enum TLS1_TXT_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA256 = "DHE-DSS-CAMELLIA256-SHA256";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA256); }))) {
            mixin(enumMixinStr_TLS1_TXT_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA256);
        }
    }




    static if(!is(typeof(TLS1_TXT_DH_RSA_WITH_CAMELLIA_256_CBC_SHA256))) {
        private enum enumMixinStr_TLS1_TXT_DH_RSA_WITH_CAMELLIA_256_CBC_SHA256 = `enum TLS1_TXT_DH_RSA_WITH_CAMELLIA_256_CBC_SHA256 = "DH-RSA-CAMELLIA256-SHA256";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_DH_RSA_WITH_CAMELLIA_256_CBC_SHA256); }))) {
            mixin(enumMixinStr_TLS1_TXT_DH_RSA_WITH_CAMELLIA_256_CBC_SHA256);
        }
    }




    static if(!is(typeof(TLS1_TXT_DH_DSS_WITH_CAMELLIA_256_CBC_SHA256))) {
        private enum enumMixinStr_TLS1_TXT_DH_DSS_WITH_CAMELLIA_256_CBC_SHA256 = `enum TLS1_TXT_DH_DSS_WITH_CAMELLIA_256_CBC_SHA256 = "DH-DSS-CAMELLIA256-SHA256";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_DH_DSS_WITH_CAMELLIA_256_CBC_SHA256); }))) {
            mixin(enumMixinStr_TLS1_TXT_DH_DSS_WITH_CAMELLIA_256_CBC_SHA256);
        }
    }




    static if(!is(typeof(TLS1_TXT_RSA_WITH_CAMELLIA_256_CBC_SHA256))) {
        private enum enumMixinStr_TLS1_TXT_RSA_WITH_CAMELLIA_256_CBC_SHA256 = `enum TLS1_TXT_RSA_WITH_CAMELLIA_256_CBC_SHA256 = "CAMELLIA256-SHA256";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_RSA_WITH_CAMELLIA_256_CBC_SHA256); }))) {
            mixin(enumMixinStr_TLS1_TXT_RSA_WITH_CAMELLIA_256_CBC_SHA256);
        }
    }




    static if(!is(typeof(TLS1_TXT_ADH_WITH_CAMELLIA_128_CBC_SHA256))) {
        private enum enumMixinStr_TLS1_TXT_ADH_WITH_CAMELLIA_128_CBC_SHA256 = `enum TLS1_TXT_ADH_WITH_CAMELLIA_128_CBC_SHA256 = "ADH-CAMELLIA128-SHA256";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_ADH_WITH_CAMELLIA_128_CBC_SHA256); }))) {
            mixin(enumMixinStr_TLS1_TXT_ADH_WITH_CAMELLIA_128_CBC_SHA256);
        }
    }




    static if(!is(typeof(TLS1_TXT_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256))) {
        private enum enumMixinStr_TLS1_TXT_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256 = `enum TLS1_TXT_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256 = "DHE-RSA-CAMELLIA128-SHA256";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256); }))) {
            mixin(enumMixinStr_TLS1_TXT_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256);
        }
    }




    static if(!is(typeof(TLS1_TXT_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA256))) {
        private enum enumMixinStr_TLS1_TXT_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA256 = `enum TLS1_TXT_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA256 = "DHE-DSS-CAMELLIA128-SHA256";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA256); }))) {
            mixin(enumMixinStr_TLS1_TXT_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA256);
        }
    }




    static if(!is(typeof(TLS1_TXT_DH_RSA_WITH_CAMELLIA_128_CBC_SHA256))) {
        private enum enumMixinStr_TLS1_TXT_DH_RSA_WITH_CAMELLIA_128_CBC_SHA256 = `enum TLS1_TXT_DH_RSA_WITH_CAMELLIA_128_CBC_SHA256 = "DH-RSA-CAMELLIA128-SHA256";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_DH_RSA_WITH_CAMELLIA_128_CBC_SHA256); }))) {
            mixin(enumMixinStr_TLS1_TXT_DH_RSA_WITH_CAMELLIA_128_CBC_SHA256);
        }
    }




    static if(!is(typeof(TLS1_TXT_DH_DSS_WITH_CAMELLIA_128_CBC_SHA256))) {
        private enum enumMixinStr_TLS1_TXT_DH_DSS_WITH_CAMELLIA_128_CBC_SHA256 = `enum TLS1_TXT_DH_DSS_WITH_CAMELLIA_128_CBC_SHA256 = "DH-DSS-CAMELLIA128-SHA256";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_DH_DSS_WITH_CAMELLIA_128_CBC_SHA256); }))) {
            mixin(enumMixinStr_TLS1_TXT_DH_DSS_WITH_CAMELLIA_128_CBC_SHA256);
        }
    }




    static if(!is(typeof(TLS1_TXT_RSA_WITH_CAMELLIA_128_CBC_SHA256))) {
        private enum enumMixinStr_TLS1_TXT_RSA_WITH_CAMELLIA_128_CBC_SHA256 = `enum TLS1_TXT_RSA_WITH_CAMELLIA_128_CBC_SHA256 = "CAMELLIA128-SHA256";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_RSA_WITH_CAMELLIA_128_CBC_SHA256); }))) {
            mixin(enumMixinStr_TLS1_TXT_RSA_WITH_CAMELLIA_128_CBC_SHA256);
        }
    }




    static if(!is(typeof(TLS1_TXT_ADH_WITH_CAMELLIA_256_CBC_SHA))) {
        private enum enumMixinStr_TLS1_TXT_ADH_WITH_CAMELLIA_256_CBC_SHA = `enum TLS1_TXT_ADH_WITH_CAMELLIA_256_CBC_SHA = "ADH-CAMELLIA256-SHA";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_ADH_WITH_CAMELLIA_256_CBC_SHA); }))) {
            mixin(enumMixinStr_TLS1_TXT_ADH_WITH_CAMELLIA_256_CBC_SHA);
        }
    }




    static if(!is(typeof(TLS1_TXT_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA))) {
        private enum enumMixinStr_TLS1_TXT_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA = `enum TLS1_TXT_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA = "DHE-RSA-CAMELLIA256-SHA";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA); }))) {
            mixin(enumMixinStr_TLS1_TXT_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA);
        }
    }




    static if(!is(typeof(TLS1_TXT_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA))) {
        private enum enumMixinStr_TLS1_TXT_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA = `enum TLS1_TXT_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA = "DHE-DSS-CAMELLIA256-SHA";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA); }))) {
            mixin(enumMixinStr_TLS1_TXT_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA);
        }
    }




    static if(!is(typeof(TLS1_TXT_DH_RSA_WITH_CAMELLIA_256_CBC_SHA))) {
        private enum enumMixinStr_TLS1_TXT_DH_RSA_WITH_CAMELLIA_256_CBC_SHA = `enum TLS1_TXT_DH_RSA_WITH_CAMELLIA_256_CBC_SHA = "DH-RSA-CAMELLIA256-SHA";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_DH_RSA_WITH_CAMELLIA_256_CBC_SHA); }))) {
            mixin(enumMixinStr_TLS1_TXT_DH_RSA_WITH_CAMELLIA_256_CBC_SHA);
        }
    }




    static if(!is(typeof(TLS1_TXT_DH_DSS_WITH_CAMELLIA_256_CBC_SHA))) {
        private enum enumMixinStr_TLS1_TXT_DH_DSS_WITH_CAMELLIA_256_CBC_SHA = `enum TLS1_TXT_DH_DSS_WITH_CAMELLIA_256_CBC_SHA = "DH-DSS-CAMELLIA256-SHA";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_DH_DSS_WITH_CAMELLIA_256_CBC_SHA); }))) {
            mixin(enumMixinStr_TLS1_TXT_DH_DSS_WITH_CAMELLIA_256_CBC_SHA);
        }
    }




    static if(!is(typeof(TLS1_TXT_RSA_WITH_CAMELLIA_256_CBC_SHA))) {
        private enum enumMixinStr_TLS1_TXT_RSA_WITH_CAMELLIA_256_CBC_SHA = `enum TLS1_TXT_RSA_WITH_CAMELLIA_256_CBC_SHA = "CAMELLIA256-SHA";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_RSA_WITH_CAMELLIA_256_CBC_SHA); }))) {
            mixin(enumMixinStr_TLS1_TXT_RSA_WITH_CAMELLIA_256_CBC_SHA);
        }
    }




    static if(!is(typeof(TLS1_TXT_ADH_WITH_CAMELLIA_128_CBC_SHA))) {
        private enum enumMixinStr_TLS1_TXT_ADH_WITH_CAMELLIA_128_CBC_SHA = `enum TLS1_TXT_ADH_WITH_CAMELLIA_128_CBC_SHA = "ADH-CAMELLIA128-SHA";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_ADH_WITH_CAMELLIA_128_CBC_SHA); }))) {
            mixin(enumMixinStr_TLS1_TXT_ADH_WITH_CAMELLIA_128_CBC_SHA);
        }
    }




    static if(!is(typeof(TLS1_TXT_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA))) {
        private enum enumMixinStr_TLS1_TXT_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA = `enum TLS1_TXT_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA = "DHE-RSA-CAMELLIA128-SHA";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA); }))) {
            mixin(enumMixinStr_TLS1_TXT_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA);
        }
    }




    static if(!is(typeof(TLS1_TXT_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA))) {
        private enum enumMixinStr_TLS1_TXT_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA = `enum TLS1_TXT_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA = "DHE-DSS-CAMELLIA128-SHA";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA); }))) {
            mixin(enumMixinStr_TLS1_TXT_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA);
        }
    }




    static if(!is(typeof(TLS1_TXT_DH_RSA_WITH_CAMELLIA_128_CBC_SHA))) {
        private enum enumMixinStr_TLS1_TXT_DH_RSA_WITH_CAMELLIA_128_CBC_SHA = `enum TLS1_TXT_DH_RSA_WITH_CAMELLIA_128_CBC_SHA = "DH-RSA-CAMELLIA128-SHA";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_DH_RSA_WITH_CAMELLIA_128_CBC_SHA); }))) {
            mixin(enumMixinStr_TLS1_TXT_DH_RSA_WITH_CAMELLIA_128_CBC_SHA);
        }
    }




    static if(!is(typeof(TLS1_TXT_DH_DSS_WITH_CAMELLIA_128_CBC_SHA))) {
        private enum enumMixinStr_TLS1_TXT_DH_DSS_WITH_CAMELLIA_128_CBC_SHA = `enum TLS1_TXT_DH_DSS_WITH_CAMELLIA_128_CBC_SHA = "DH-DSS-CAMELLIA128-SHA";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_DH_DSS_WITH_CAMELLIA_128_CBC_SHA); }))) {
            mixin(enumMixinStr_TLS1_TXT_DH_DSS_WITH_CAMELLIA_128_CBC_SHA);
        }
    }




    static if(!is(typeof(TLS1_TXT_RSA_WITH_CAMELLIA_128_CBC_SHA))) {
        private enum enumMixinStr_TLS1_TXT_RSA_WITH_CAMELLIA_128_CBC_SHA = `enum TLS1_TXT_RSA_WITH_CAMELLIA_128_CBC_SHA = "CAMELLIA128-SHA";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_RSA_WITH_CAMELLIA_128_CBC_SHA); }))) {
            mixin(enumMixinStr_TLS1_TXT_RSA_WITH_CAMELLIA_128_CBC_SHA);
        }
    }




    static if(!is(typeof(TLS1_TXT_SRP_SHA_DSS_WITH_AES_256_CBC_SHA))) {
        private enum enumMixinStr_TLS1_TXT_SRP_SHA_DSS_WITH_AES_256_CBC_SHA = `enum TLS1_TXT_SRP_SHA_DSS_WITH_AES_256_CBC_SHA = "SRP-DSS-AES-256-CBC-SHA";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_SRP_SHA_DSS_WITH_AES_256_CBC_SHA); }))) {
            mixin(enumMixinStr_TLS1_TXT_SRP_SHA_DSS_WITH_AES_256_CBC_SHA);
        }
    }




    static if(!is(typeof(TLS1_TXT_SRP_SHA_RSA_WITH_AES_256_CBC_SHA))) {
        private enum enumMixinStr_TLS1_TXT_SRP_SHA_RSA_WITH_AES_256_CBC_SHA = `enum TLS1_TXT_SRP_SHA_RSA_WITH_AES_256_CBC_SHA = "SRP-RSA-AES-256-CBC-SHA";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_SRP_SHA_RSA_WITH_AES_256_CBC_SHA); }))) {
            mixin(enumMixinStr_TLS1_TXT_SRP_SHA_RSA_WITH_AES_256_CBC_SHA);
        }
    }




    static if(!is(typeof(TLS1_TXT_SRP_SHA_WITH_AES_256_CBC_SHA))) {
        private enum enumMixinStr_TLS1_TXT_SRP_SHA_WITH_AES_256_CBC_SHA = `enum TLS1_TXT_SRP_SHA_WITH_AES_256_CBC_SHA = "SRP-AES-256-CBC-SHA";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_SRP_SHA_WITH_AES_256_CBC_SHA); }))) {
            mixin(enumMixinStr_TLS1_TXT_SRP_SHA_WITH_AES_256_CBC_SHA);
        }
    }




    static if(!is(typeof(TLS1_TXT_SRP_SHA_DSS_WITH_AES_128_CBC_SHA))) {
        private enum enumMixinStr_TLS1_TXT_SRP_SHA_DSS_WITH_AES_128_CBC_SHA = `enum TLS1_TXT_SRP_SHA_DSS_WITH_AES_128_CBC_SHA = "SRP-DSS-AES-128-CBC-SHA";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_SRP_SHA_DSS_WITH_AES_128_CBC_SHA); }))) {
            mixin(enumMixinStr_TLS1_TXT_SRP_SHA_DSS_WITH_AES_128_CBC_SHA);
        }
    }




    static if(!is(typeof(TLS1_TXT_SRP_SHA_RSA_WITH_AES_128_CBC_SHA))) {
        private enum enumMixinStr_TLS1_TXT_SRP_SHA_RSA_WITH_AES_128_CBC_SHA = `enum TLS1_TXT_SRP_SHA_RSA_WITH_AES_128_CBC_SHA = "SRP-RSA-AES-128-CBC-SHA";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_SRP_SHA_RSA_WITH_AES_128_CBC_SHA); }))) {
            mixin(enumMixinStr_TLS1_TXT_SRP_SHA_RSA_WITH_AES_128_CBC_SHA);
        }
    }




    static if(!is(typeof(TLS1_TXT_SRP_SHA_WITH_AES_128_CBC_SHA))) {
        private enum enumMixinStr_TLS1_TXT_SRP_SHA_WITH_AES_128_CBC_SHA = `enum TLS1_TXT_SRP_SHA_WITH_AES_128_CBC_SHA = "SRP-AES-128-CBC-SHA";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_SRP_SHA_WITH_AES_128_CBC_SHA); }))) {
            mixin(enumMixinStr_TLS1_TXT_SRP_SHA_WITH_AES_128_CBC_SHA);
        }
    }




    static if(!is(typeof(TLS1_TXT_SRP_SHA_DSS_WITH_3DES_EDE_CBC_SHA))) {
        private enum enumMixinStr_TLS1_TXT_SRP_SHA_DSS_WITH_3DES_EDE_CBC_SHA = `enum TLS1_TXT_SRP_SHA_DSS_WITH_3DES_EDE_CBC_SHA = "SRP-DSS-3DES-EDE-CBC-SHA";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_SRP_SHA_DSS_WITH_3DES_EDE_CBC_SHA); }))) {
            mixin(enumMixinStr_TLS1_TXT_SRP_SHA_DSS_WITH_3DES_EDE_CBC_SHA);
        }
    }




    static if(!is(typeof(TLS1_TXT_SRP_SHA_RSA_WITH_3DES_EDE_CBC_SHA))) {
        private enum enumMixinStr_TLS1_TXT_SRP_SHA_RSA_WITH_3DES_EDE_CBC_SHA = `enum TLS1_TXT_SRP_SHA_RSA_WITH_3DES_EDE_CBC_SHA = "SRP-RSA-3DES-EDE-CBC-SHA";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_SRP_SHA_RSA_WITH_3DES_EDE_CBC_SHA); }))) {
            mixin(enumMixinStr_TLS1_TXT_SRP_SHA_RSA_WITH_3DES_EDE_CBC_SHA);
        }
    }




    static if(!is(typeof(TLS1_TXT_SRP_SHA_WITH_3DES_EDE_CBC_SHA))) {
        private enum enumMixinStr_TLS1_TXT_SRP_SHA_WITH_3DES_EDE_CBC_SHA = `enum TLS1_TXT_SRP_SHA_WITH_3DES_EDE_CBC_SHA = "SRP-3DES-EDE-CBC-SHA";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_SRP_SHA_WITH_3DES_EDE_CBC_SHA); }))) {
            mixin(enumMixinStr_TLS1_TXT_SRP_SHA_WITH_3DES_EDE_CBC_SHA);
        }
    }




    static if(!is(typeof(TLS1_TXT_RSA_PSK_WITH_NULL_SHA384))) {
        private enum enumMixinStr_TLS1_TXT_RSA_PSK_WITH_NULL_SHA384 = `enum TLS1_TXT_RSA_PSK_WITH_NULL_SHA384 = "RSA-PSK-NULL-SHA384";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_RSA_PSK_WITH_NULL_SHA384); }))) {
            mixin(enumMixinStr_TLS1_TXT_RSA_PSK_WITH_NULL_SHA384);
        }
    }




    static if(!is(typeof(TLS1_TXT_RSA_PSK_WITH_NULL_SHA256))) {
        private enum enumMixinStr_TLS1_TXT_RSA_PSK_WITH_NULL_SHA256 = `enum TLS1_TXT_RSA_PSK_WITH_NULL_SHA256 = "RSA-PSK-NULL-SHA256";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_RSA_PSK_WITH_NULL_SHA256); }))) {
            mixin(enumMixinStr_TLS1_TXT_RSA_PSK_WITH_NULL_SHA256);
        }
    }




    static if(!is(typeof(TLS1_TXT_RSA_PSK_WITH_AES_256_CBC_SHA384))) {
        private enum enumMixinStr_TLS1_TXT_RSA_PSK_WITH_AES_256_CBC_SHA384 = `enum TLS1_TXT_RSA_PSK_WITH_AES_256_CBC_SHA384 = "RSA-PSK-AES256-CBC-SHA384";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_RSA_PSK_WITH_AES_256_CBC_SHA384); }))) {
            mixin(enumMixinStr_TLS1_TXT_RSA_PSK_WITH_AES_256_CBC_SHA384);
        }
    }




    static if(!is(typeof(TLS1_TXT_RSA_PSK_WITH_AES_128_CBC_SHA256))) {
        private enum enumMixinStr_TLS1_TXT_RSA_PSK_WITH_AES_128_CBC_SHA256 = `enum TLS1_TXT_RSA_PSK_WITH_AES_128_CBC_SHA256 = "RSA-PSK-AES128-CBC-SHA256";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_RSA_PSK_WITH_AES_128_CBC_SHA256); }))) {
            mixin(enumMixinStr_TLS1_TXT_RSA_PSK_WITH_AES_128_CBC_SHA256);
        }
    }




    static if(!is(typeof(TLS1_TXT_DHE_PSK_WITH_NULL_SHA384))) {
        private enum enumMixinStr_TLS1_TXT_DHE_PSK_WITH_NULL_SHA384 = `enum TLS1_TXT_DHE_PSK_WITH_NULL_SHA384 = "DHE-PSK-NULL-SHA384";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_DHE_PSK_WITH_NULL_SHA384); }))) {
            mixin(enumMixinStr_TLS1_TXT_DHE_PSK_WITH_NULL_SHA384);
        }
    }




    static if(!is(typeof(TLS1_TXT_DHE_PSK_WITH_NULL_SHA256))) {
        private enum enumMixinStr_TLS1_TXT_DHE_PSK_WITH_NULL_SHA256 = `enum TLS1_TXT_DHE_PSK_WITH_NULL_SHA256 = "DHE-PSK-NULL-SHA256";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_DHE_PSK_WITH_NULL_SHA256); }))) {
            mixin(enumMixinStr_TLS1_TXT_DHE_PSK_WITH_NULL_SHA256);
        }
    }




    static if(!is(typeof(TLS1_TXT_DHE_PSK_WITH_AES_256_CBC_SHA384))) {
        private enum enumMixinStr_TLS1_TXT_DHE_PSK_WITH_AES_256_CBC_SHA384 = `enum TLS1_TXT_DHE_PSK_WITH_AES_256_CBC_SHA384 = "DHE-PSK-AES256-CBC-SHA384";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_DHE_PSK_WITH_AES_256_CBC_SHA384); }))) {
            mixin(enumMixinStr_TLS1_TXT_DHE_PSK_WITH_AES_256_CBC_SHA384);
        }
    }




    static if(!is(typeof(TLS1_TXT_DHE_PSK_WITH_AES_128_CBC_SHA256))) {
        private enum enumMixinStr_TLS1_TXT_DHE_PSK_WITH_AES_128_CBC_SHA256 = `enum TLS1_TXT_DHE_PSK_WITH_AES_128_CBC_SHA256 = "DHE-PSK-AES128-CBC-SHA256";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_DHE_PSK_WITH_AES_128_CBC_SHA256); }))) {
            mixin(enumMixinStr_TLS1_TXT_DHE_PSK_WITH_AES_128_CBC_SHA256);
        }
    }




    static if(!is(typeof(TLS1_TXT_PSK_WITH_NULL_SHA384))) {
        private enum enumMixinStr_TLS1_TXT_PSK_WITH_NULL_SHA384 = `enum TLS1_TXT_PSK_WITH_NULL_SHA384 = "PSK-NULL-SHA384";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_PSK_WITH_NULL_SHA384); }))) {
            mixin(enumMixinStr_TLS1_TXT_PSK_WITH_NULL_SHA384);
        }
    }




    static if(!is(typeof(TLS1_TXT_PSK_WITH_NULL_SHA256))) {
        private enum enumMixinStr_TLS1_TXT_PSK_WITH_NULL_SHA256 = `enum TLS1_TXT_PSK_WITH_NULL_SHA256 = "PSK-NULL-SHA256";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_PSK_WITH_NULL_SHA256); }))) {
            mixin(enumMixinStr_TLS1_TXT_PSK_WITH_NULL_SHA256);
        }
    }




    static if(!is(typeof(TLS1_TXT_PSK_WITH_AES_256_CBC_SHA384))) {
        private enum enumMixinStr_TLS1_TXT_PSK_WITH_AES_256_CBC_SHA384 = `enum TLS1_TXT_PSK_WITH_AES_256_CBC_SHA384 = "PSK-AES256-CBC-SHA384";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_PSK_WITH_AES_256_CBC_SHA384); }))) {
            mixin(enumMixinStr_TLS1_TXT_PSK_WITH_AES_256_CBC_SHA384);
        }
    }




    static if(!is(typeof(TLS1_TXT_PSK_WITH_AES_128_CBC_SHA256))) {
        private enum enumMixinStr_TLS1_TXT_PSK_WITH_AES_128_CBC_SHA256 = `enum TLS1_TXT_PSK_WITH_AES_128_CBC_SHA256 = "PSK-AES128-CBC-SHA256";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_PSK_WITH_AES_128_CBC_SHA256); }))) {
            mixin(enumMixinStr_TLS1_TXT_PSK_WITH_AES_128_CBC_SHA256);
        }
    }




    static if(!is(typeof(TLS1_TXT_RSA_PSK_WITH_AES_256_GCM_SHA384))) {
        private enum enumMixinStr_TLS1_TXT_RSA_PSK_WITH_AES_256_GCM_SHA384 = `enum TLS1_TXT_RSA_PSK_WITH_AES_256_GCM_SHA384 = "RSA-PSK-AES256-GCM-SHA384";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_RSA_PSK_WITH_AES_256_GCM_SHA384); }))) {
            mixin(enumMixinStr_TLS1_TXT_RSA_PSK_WITH_AES_256_GCM_SHA384);
        }
    }




    static if(!is(typeof(TLS1_TXT_RSA_PSK_WITH_AES_128_GCM_SHA256))) {
        private enum enumMixinStr_TLS1_TXT_RSA_PSK_WITH_AES_128_GCM_SHA256 = `enum TLS1_TXT_RSA_PSK_WITH_AES_128_GCM_SHA256 = "RSA-PSK-AES128-GCM-SHA256";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_RSA_PSK_WITH_AES_128_GCM_SHA256); }))) {
            mixin(enumMixinStr_TLS1_TXT_RSA_PSK_WITH_AES_128_GCM_SHA256);
        }
    }




    static if(!is(typeof(TLS1_TXT_DHE_PSK_WITH_AES_256_GCM_SHA384))) {
        private enum enumMixinStr_TLS1_TXT_DHE_PSK_WITH_AES_256_GCM_SHA384 = `enum TLS1_TXT_DHE_PSK_WITH_AES_256_GCM_SHA384 = "DHE-PSK-AES256-GCM-SHA384";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_DHE_PSK_WITH_AES_256_GCM_SHA384); }))) {
            mixin(enumMixinStr_TLS1_TXT_DHE_PSK_WITH_AES_256_GCM_SHA384);
        }
    }




    static if(!is(typeof(TLS1_TXT_DHE_PSK_WITH_AES_128_GCM_SHA256))) {
        private enum enumMixinStr_TLS1_TXT_DHE_PSK_WITH_AES_128_GCM_SHA256 = `enum TLS1_TXT_DHE_PSK_WITH_AES_128_GCM_SHA256 = "DHE-PSK-AES128-GCM-SHA256";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_DHE_PSK_WITH_AES_128_GCM_SHA256); }))) {
            mixin(enumMixinStr_TLS1_TXT_DHE_PSK_WITH_AES_128_GCM_SHA256);
        }
    }




    static if(!is(typeof(PKCS7_S_HEADER))) {
        private enum enumMixinStr_PKCS7_S_HEADER = `enum PKCS7_S_HEADER = 0;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS7_S_HEADER); }))) {
            mixin(enumMixinStr_PKCS7_S_HEADER);
        }
    }




    static if(!is(typeof(PKCS7_S_BODY))) {
        private enum enumMixinStr_PKCS7_S_BODY = `enum PKCS7_S_BODY = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS7_S_BODY); }))) {
            mixin(enumMixinStr_PKCS7_S_BODY);
        }
    }




    static if(!is(typeof(PKCS7_S_TAIL))) {
        private enum enumMixinStr_PKCS7_S_TAIL = `enum PKCS7_S_TAIL = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS7_S_TAIL); }))) {
            mixin(enumMixinStr_PKCS7_S_TAIL);
        }
    }




    static if(!is(typeof(TLS1_TXT_RSA_PSK_WITH_AES_256_CBC_SHA))) {
        private enum enumMixinStr_TLS1_TXT_RSA_PSK_WITH_AES_256_CBC_SHA = `enum TLS1_TXT_RSA_PSK_WITH_AES_256_CBC_SHA = "RSA-PSK-AES256-CBC-SHA";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_RSA_PSK_WITH_AES_256_CBC_SHA); }))) {
            mixin(enumMixinStr_TLS1_TXT_RSA_PSK_WITH_AES_256_CBC_SHA);
        }
    }




    static if(!is(typeof(TLS1_TXT_RSA_PSK_WITH_AES_128_CBC_SHA))) {
        private enum enumMixinStr_TLS1_TXT_RSA_PSK_WITH_AES_128_CBC_SHA = `enum TLS1_TXT_RSA_PSK_WITH_AES_128_CBC_SHA = "RSA-PSK-AES128-CBC-SHA";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_RSA_PSK_WITH_AES_128_CBC_SHA); }))) {
            mixin(enumMixinStr_TLS1_TXT_RSA_PSK_WITH_AES_128_CBC_SHA);
        }
    }




    static if(!is(typeof(TLS1_TXT_RSA_PSK_WITH_3DES_EDE_CBC_SHA))) {
        private enum enumMixinStr_TLS1_TXT_RSA_PSK_WITH_3DES_EDE_CBC_SHA = `enum TLS1_TXT_RSA_PSK_WITH_3DES_EDE_CBC_SHA = "RSA-PSK-3DES-EDE-CBC-SHA";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_RSA_PSK_WITH_3DES_EDE_CBC_SHA); }))) {
            mixin(enumMixinStr_TLS1_TXT_RSA_PSK_WITH_3DES_EDE_CBC_SHA);
        }
    }




    static if(!is(typeof(TLS1_TXT_RSA_PSK_WITH_RC4_128_SHA))) {
        private enum enumMixinStr_TLS1_TXT_RSA_PSK_WITH_RC4_128_SHA = `enum TLS1_TXT_RSA_PSK_WITH_RC4_128_SHA = "RSA-PSK-RC4-SHA";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_RSA_PSK_WITH_RC4_128_SHA); }))) {
            mixin(enumMixinStr_TLS1_TXT_RSA_PSK_WITH_RC4_128_SHA);
        }
    }




    static if(!is(typeof(TLS1_TXT_DHE_PSK_WITH_AES_256_CBC_SHA))) {
        private enum enumMixinStr_TLS1_TXT_DHE_PSK_WITH_AES_256_CBC_SHA = `enum TLS1_TXT_DHE_PSK_WITH_AES_256_CBC_SHA = "DHE-PSK-AES256-CBC-SHA";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_DHE_PSK_WITH_AES_256_CBC_SHA); }))) {
            mixin(enumMixinStr_TLS1_TXT_DHE_PSK_WITH_AES_256_CBC_SHA);
        }
    }




    static if(!is(typeof(TLS1_TXT_DHE_PSK_WITH_AES_128_CBC_SHA))) {
        private enum enumMixinStr_TLS1_TXT_DHE_PSK_WITH_AES_128_CBC_SHA = `enum TLS1_TXT_DHE_PSK_WITH_AES_128_CBC_SHA = "DHE-PSK-AES128-CBC-SHA";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_DHE_PSK_WITH_AES_128_CBC_SHA); }))) {
            mixin(enumMixinStr_TLS1_TXT_DHE_PSK_WITH_AES_128_CBC_SHA);
        }
    }




    static if(!is(typeof(TLS1_TXT_DHE_PSK_WITH_3DES_EDE_CBC_SHA))) {
        private enum enumMixinStr_TLS1_TXT_DHE_PSK_WITH_3DES_EDE_CBC_SHA = `enum TLS1_TXT_DHE_PSK_WITH_3DES_EDE_CBC_SHA = "DHE-PSK-3DES-EDE-CBC-SHA";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_DHE_PSK_WITH_3DES_EDE_CBC_SHA); }))) {
            mixin(enumMixinStr_TLS1_TXT_DHE_PSK_WITH_3DES_EDE_CBC_SHA);
        }
    }




    static if(!is(typeof(TLS1_TXT_DHE_PSK_WITH_RC4_128_SHA))) {
        private enum enumMixinStr_TLS1_TXT_DHE_PSK_WITH_RC4_128_SHA = `enum TLS1_TXT_DHE_PSK_WITH_RC4_128_SHA = "DHE-PSK-RC4-SHA";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_DHE_PSK_WITH_RC4_128_SHA); }))) {
            mixin(enumMixinStr_TLS1_TXT_DHE_PSK_WITH_RC4_128_SHA);
        }
    }




    static if(!is(typeof(TLS1_TXT_PSK_WITH_AES_256_CBC_SHA))) {
        private enum enumMixinStr_TLS1_TXT_PSK_WITH_AES_256_CBC_SHA = `enum TLS1_TXT_PSK_WITH_AES_256_CBC_SHA = "PSK-AES256-CBC-SHA";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_PSK_WITH_AES_256_CBC_SHA); }))) {
            mixin(enumMixinStr_TLS1_TXT_PSK_WITH_AES_256_CBC_SHA);
        }
    }




    static if(!is(typeof(TLS1_TXT_PSK_WITH_AES_128_CBC_SHA))) {
        private enum enumMixinStr_TLS1_TXT_PSK_WITH_AES_128_CBC_SHA = `enum TLS1_TXT_PSK_WITH_AES_128_CBC_SHA = "PSK-AES128-CBC-SHA";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_PSK_WITH_AES_128_CBC_SHA); }))) {
            mixin(enumMixinStr_TLS1_TXT_PSK_WITH_AES_128_CBC_SHA);
        }
    }




    static if(!is(typeof(TLS1_TXT_PSK_WITH_3DES_EDE_CBC_SHA))) {
        private enum enumMixinStr_TLS1_TXT_PSK_WITH_3DES_EDE_CBC_SHA = `enum TLS1_TXT_PSK_WITH_3DES_EDE_CBC_SHA = "PSK-3DES-EDE-CBC-SHA";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_PSK_WITH_3DES_EDE_CBC_SHA); }))) {
            mixin(enumMixinStr_TLS1_TXT_PSK_WITH_3DES_EDE_CBC_SHA);
        }
    }




    static if(!is(typeof(TLS1_TXT_PSK_WITH_RC4_128_SHA))) {
        private enum enumMixinStr_TLS1_TXT_PSK_WITH_RC4_128_SHA = `enum TLS1_TXT_PSK_WITH_RC4_128_SHA = "PSK-RC4-SHA";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_PSK_WITH_RC4_128_SHA); }))) {
            mixin(enumMixinStr_TLS1_TXT_PSK_WITH_RC4_128_SHA);
        }
    }




    static if(!is(typeof(TLS1_TXT_ECDH_anon_WITH_AES_256_CBC_SHA))) {
        private enum enumMixinStr_TLS1_TXT_ECDH_anon_WITH_AES_256_CBC_SHA = `enum TLS1_TXT_ECDH_anon_WITH_AES_256_CBC_SHA = "AECDH-AES256-SHA";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_ECDH_anon_WITH_AES_256_CBC_SHA); }))) {
            mixin(enumMixinStr_TLS1_TXT_ECDH_anon_WITH_AES_256_CBC_SHA);
        }
    }




    static if(!is(typeof(TLS1_TXT_ECDH_anon_WITH_AES_128_CBC_SHA))) {
        private enum enumMixinStr_TLS1_TXT_ECDH_anon_WITH_AES_128_CBC_SHA = `enum TLS1_TXT_ECDH_anon_WITH_AES_128_CBC_SHA = "AECDH-AES128-SHA";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_ECDH_anon_WITH_AES_128_CBC_SHA); }))) {
            mixin(enumMixinStr_TLS1_TXT_ECDH_anon_WITH_AES_128_CBC_SHA);
        }
    }




    static if(!is(typeof(TLS1_TXT_ECDH_anon_WITH_DES_192_CBC3_SHA))) {
        private enum enumMixinStr_TLS1_TXT_ECDH_anon_WITH_DES_192_CBC3_SHA = `enum TLS1_TXT_ECDH_anon_WITH_DES_192_CBC3_SHA = "AECDH-DES-CBC3-SHA";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_ECDH_anon_WITH_DES_192_CBC3_SHA); }))) {
            mixin(enumMixinStr_TLS1_TXT_ECDH_anon_WITH_DES_192_CBC3_SHA);
        }
    }




    static if(!is(typeof(TLS1_TXT_ECDH_anon_WITH_RC4_128_SHA))) {
        private enum enumMixinStr_TLS1_TXT_ECDH_anon_WITH_RC4_128_SHA = `enum TLS1_TXT_ECDH_anon_WITH_RC4_128_SHA = "AECDH-RC4-SHA";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_ECDH_anon_WITH_RC4_128_SHA); }))) {
            mixin(enumMixinStr_TLS1_TXT_ECDH_anon_WITH_RC4_128_SHA);
        }
    }




    static if(!is(typeof(TLS1_TXT_ECDH_anon_WITH_NULL_SHA))) {
        private enum enumMixinStr_TLS1_TXT_ECDH_anon_WITH_NULL_SHA = `enum TLS1_TXT_ECDH_anon_WITH_NULL_SHA = "AECDH-NULL-SHA";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_ECDH_anon_WITH_NULL_SHA); }))) {
            mixin(enumMixinStr_TLS1_TXT_ECDH_anon_WITH_NULL_SHA);
        }
    }




    static if(!is(typeof(TLS1_TXT_ECDHE_RSA_WITH_AES_256_CBC_SHA))) {
        private enum enumMixinStr_TLS1_TXT_ECDHE_RSA_WITH_AES_256_CBC_SHA = `enum TLS1_TXT_ECDHE_RSA_WITH_AES_256_CBC_SHA = "ECDHE-RSA-AES256-SHA";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_ECDHE_RSA_WITH_AES_256_CBC_SHA); }))) {
            mixin(enumMixinStr_TLS1_TXT_ECDHE_RSA_WITH_AES_256_CBC_SHA);
        }
    }




    static if(!is(typeof(TLS1_TXT_ECDHE_RSA_WITH_AES_128_CBC_SHA))) {
        private enum enumMixinStr_TLS1_TXT_ECDHE_RSA_WITH_AES_128_CBC_SHA = `enum TLS1_TXT_ECDHE_RSA_WITH_AES_128_CBC_SHA = "ECDHE-RSA-AES128-SHA";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_ECDHE_RSA_WITH_AES_128_CBC_SHA); }))) {
            mixin(enumMixinStr_TLS1_TXT_ECDHE_RSA_WITH_AES_128_CBC_SHA);
        }
    }




    static if(!is(typeof(TLS1_TXT_ECDHE_RSA_WITH_DES_192_CBC3_SHA))) {
        private enum enumMixinStr_TLS1_TXT_ECDHE_RSA_WITH_DES_192_CBC3_SHA = `enum TLS1_TXT_ECDHE_RSA_WITH_DES_192_CBC3_SHA = "ECDHE-RSA-DES-CBC3-SHA";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_ECDHE_RSA_WITH_DES_192_CBC3_SHA); }))) {
            mixin(enumMixinStr_TLS1_TXT_ECDHE_RSA_WITH_DES_192_CBC3_SHA);
        }
    }




    static if(!is(typeof(TLS1_TXT_ECDHE_RSA_WITH_RC4_128_SHA))) {
        private enum enumMixinStr_TLS1_TXT_ECDHE_RSA_WITH_RC4_128_SHA = `enum TLS1_TXT_ECDHE_RSA_WITH_RC4_128_SHA = "ECDHE-RSA-RC4-SHA";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_ECDHE_RSA_WITH_RC4_128_SHA); }))) {
            mixin(enumMixinStr_TLS1_TXT_ECDHE_RSA_WITH_RC4_128_SHA);
        }
    }




    static if(!is(typeof(TLS1_TXT_ECDHE_RSA_WITH_NULL_SHA))) {
        private enum enumMixinStr_TLS1_TXT_ECDHE_RSA_WITH_NULL_SHA = `enum TLS1_TXT_ECDHE_RSA_WITH_NULL_SHA = "ECDHE-RSA-NULL-SHA";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_ECDHE_RSA_WITH_NULL_SHA); }))) {
            mixin(enumMixinStr_TLS1_TXT_ECDHE_RSA_WITH_NULL_SHA);
        }
    }




    static if(!is(typeof(TLS1_TXT_ECDH_RSA_WITH_AES_256_CBC_SHA))) {
        private enum enumMixinStr_TLS1_TXT_ECDH_RSA_WITH_AES_256_CBC_SHA = `enum TLS1_TXT_ECDH_RSA_WITH_AES_256_CBC_SHA = "ECDH-RSA-AES256-SHA";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_ECDH_RSA_WITH_AES_256_CBC_SHA); }))) {
            mixin(enumMixinStr_TLS1_TXT_ECDH_RSA_WITH_AES_256_CBC_SHA);
        }
    }




    static if(!is(typeof(TLS1_TXT_ECDH_RSA_WITH_AES_128_CBC_SHA))) {
        private enum enumMixinStr_TLS1_TXT_ECDH_RSA_WITH_AES_128_CBC_SHA = `enum TLS1_TXT_ECDH_RSA_WITH_AES_128_CBC_SHA = "ECDH-RSA-AES128-SHA";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_ECDH_RSA_WITH_AES_128_CBC_SHA); }))) {
            mixin(enumMixinStr_TLS1_TXT_ECDH_RSA_WITH_AES_128_CBC_SHA);
        }
    }




    static if(!is(typeof(TLS1_TXT_ECDH_RSA_WITH_DES_192_CBC3_SHA))) {
        private enum enumMixinStr_TLS1_TXT_ECDH_RSA_WITH_DES_192_CBC3_SHA = `enum TLS1_TXT_ECDH_RSA_WITH_DES_192_CBC3_SHA = "ECDH-RSA-DES-CBC3-SHA";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_ECDH_RSA_WITH_DES_192_CBC3_SHA); }))) {
            mixin(enumMixinStr_TLS1_TXT_ECDH_RSA_WITH_DES_192_CBC3_SHA);
        }
    }




    static if(!is(typeof(TLS1_TXT_ECDH_RSA_WITH_RC4_128_SHA))) {
        private enum enumMixinStr_TLS1_TXT_ECDH_RSA_WITH_RC4_128_SHA = `enum TLS1_TXT_ECDH_RSA_WITH_RC4_128_SHA = "ECDH-RSA-RC4-SHA";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_ECDH_RSA_WITH_RC4_128_SHA); }))) {
            mixin(enumMixinStr_TLS1_TXT_ECDH_RSA_WITH_RC4_128_SHA);
        }
    }




    static if(!is(typeof(TLS1_TXT_ECDH_RSA_WITH_NULL_SHA))) {
        private enum enumMixinStr_TLS1_TXT_ECDH_RSA_WITH_NULL_SHA = `enum TLS1_TXT_ECDH_RSA_WITH_NULL_SHA = "ECDH-RSA-NULL-SHA";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_ECDH_RSA_WITH_NULL_SHA); }))) {
            mixin(enumMixinStr_TLS1_TXT_ECDH_RSA_WITH_NULL_SHA);
        }
    }




    static if(!is(typeof(TLS1_TXT_ECDHE_ECDSA_WITH_AES_256_CBC_SHA))) {
        private enum enumMixinStr_TLS1_TXT_ECDHE_ECDSA_WITH_AES_256_CBC_SHA = `enum TLS1_TXT_ECDHE_ECDSA_WITH_AES_256_CBC_SHA = "ECDHE-ECDSA-AES256-SHA";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_ECDHE_ECDSA_WITH_AES_256_CBC_SHA); }))) {
            mixin(enumMixinStr_TLS1_TXT_ECDHE_ECDSA_WITH_AES_256_CBC_SHA);
        }
    }




    static if(!is(typeof(PKCS7_OP_SET_DETACHED_SIGNATURE))) {
        private enum enumMixinStr_PKCS7_OP_SET_DETACHED_SIGNATURE = `enum PKCS7_OP_SET_DETACHED_SIGNATURE = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS7_OP_SET_DETACHED_SIGNATURE); }))) {
            mixin(enumMixinStr_PKCS7_OP_SET_DETACHED_SIGNATURE);
        }
    }




    static if(!is(typeof(PKCS7_OP_GET_DETACHED_SIGNATURE))) {
        private enum enumMixinStr_PKCS7_OP_GET_DETACHED_SIGNATURE = `enum PKCS7_OP_GET_DETACHED_SIGNATURE = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS7_OP_GET_DETACHED_SIGNATURE); }))) {
            mixin(enumMixinStr_PKCS7_OP_GET_DETACHED_SIGNATURE);
        }
    }
    static if(!is(typeof(PKCS7_TEXT))) {
        private enum enumMixinStr_PKCS7_TEXT = `enum PKCS7_TEXT = 0x1;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS7_TEXT); }))) {
            mixin(enumMixinStr_PKCS7_TEXT);
        }
    }




    static if(!is(typeof(PKCS7_NOCERTS))) {
        private enum enumMixinStr_PKCS7_NOCERTS = `enum PKCS7_NOCERTS = 0x2;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS7_NOCERTS); }))) {
            mixin(enumMixinStr_PKCS7_NOCERTS);
        }
    }




    static if(!is(typeof(PKCS7_NOSIGS))) {
        private enum enumMixinStr_PKCS7_NOSIGS = `enum PKCS7_NOSIGS = 0x4;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS7_NOSIGS); }))) {
            mixin(enumMixinStr_PKCS7_NOSIGS);
        }
    }




    static if(!is(typeof(PKCS7_NOCHAIN))) {
        private enum enumMixinStr_PKCS7_NOCHAIN = `enum PKCS7_NOCHAIN = 0x8;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS7_NOCHAIN); }))) {
            mixin(enumMixinStr_PKCS7_NOCHAIN);
        }
    }




    static if(!is(typeof(PKCS7_NOINTERN))) {
        private enum enumMixinStr_PKCS7_NOINTERN = `enum PKCS7_NOINTERN = 0x10;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS7_NOINTERN); }))) {
            mixin(enumMixinStr_PKCS7_NOINTERN);
        }
    }




    static if(!is(typeof(PKCS7_NOVERIFY))) {
        private enum enumMixinStr_PKCS7_NOVERIFY = `enum PKCS7_NOVERIFY = 0x20;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS7_NOVERIFY); }))) {
            mixin(enumMixinStr_PKCS7_NOVERIFY);
        }
    }




    static if(!is(typeof(PKCS7_DETACHED))) {
        private enum enumMixinStr_PKCS7_DETACHED = `enum PKCS7_DETACHED = 0x40;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS7_DETACHED); }))) {
            mixin(enumMixinStr_PKCS7_DETACHED);
        }
    }




    static if(!is(typeof(PKCS7_BINARY))) {
        private enum enumMixinStr_PKCS7_BINARY = `enum PKCS7_BINARY = 0x80;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS7_BINARY); }))) {
            mixin(enumMixinStr_PKCS7_BINARY);
        }
    }




    static if(!is(typeof(PKCS7_NOATTR))) {
        private enum enumMixinStr_PKCS7_NOATTR = `enum PKCS7_NOATTR = 0x100;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS7_NOATTR); }))) {
            mixin(enumMixinStr_PKCS7_NOATTR);
        }
    }




    static if(!is(typeof(PKCS7_NOSMIMECAP))) {
        private enum enumMixinStr_PKCS7_NOSMIMECAP = `enum PKCS7_NOSMIMECAP = 0x200;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS7_NOSMIMECAP); }))) {
            mixin(enumMixinStr_PKCS7_NOSMIMECAP);
        }
    }




    static if(!is(typeof(PKCS7_NOOLDMIMETYPE))) {
        private enum enumMixinStr_PKCS7_NOOLDMIMETYPE = `enum PKCS7_NOOLDMIMETYPE = 0x400;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS7_NOOLDMIMETYPE); }))) {
            mixin(enumMixinStr_PKCS7_NOOLDMIMETYPE);
        }
    }




    static if(!is(typeof(PKCS7_CRLFEOL))) {
        private enum enumMixinStr_PKCS7_CRLFEOL = `enum PKCS7_CRLFEOL = 0x800;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS7_CRLFEOL); }))) {
            mixin(enumMixinStr_PKCS7_CRLFEOL);
        }
    }




    static if(!is(typeof(PKCS7_STREAM))) {
        private enum enumMixinStr_PKCS7_STREAM = `enum PKCS7_STREAM = 0x1000;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS7_STREAM); }))) {
            mixin(enumMixinStr_PKCS7_STREAM);
        }
    }




    static if(!is(typeof(PKCS7_NOCRL))) {
        private enum enumMixinStr_PKCS7_NOCRL = `enum PKCS7_NOCRL = 0x2000;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS7_NOCRL); }))) {
            mixin(enumMixinStr_PKCS7_NOCRL);
        }
    }




    static if(!is(typeof(PKCS7_PARTIAL))) {
        private enum enumMixinStr_PKCS7_PARTIAL = `enum PKCS7_PARTIAL = 0x4000;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS7_PARTIAL); }))) {
            mixin(enumMixinStr_PKCS7_PARTIAL);
        }
    }




    static if(!is(typeof(PKCS7_REUSE_DIGEST))) {
        private enum enumMixinStr_PKCS7_REUSE_DIGEST = `enum PKCS7_REUSE_DIGEST = 0x8000;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS7_REUSE_DIGEST); }))) {
            mixin(enumMixinStr_PKCS7_REUSE_DIGEST);
        }
    }




    static if(!is(typeof(PKCS7_NO_DUAL_CONTENT))) {
        private enum enumMixinStr_PKCS7_NO_DUAL_CONTENT = `enum PKCS7_NO_DUAL_CONTENT = 0x10000;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS7_NO_DUAL_CONTENT); }))) {
            mixin(enumMixinStr_PKCS7_NO_DUAL_CONTENT);
        }
    }




    static if(!is(typeof(SMIME_TEXT))) {
        private enum enumMixinStr_SMIME_TEXT = `enum SMIME_TEXT = 0x1;`;
        static if(is(typeof({ mixin(enumMixinStr_SMIME_TEXT); }))) {
            mixin(enumMixinStr_SMIME_TEXT);
        }
    }




    static if(!is(typeof(SMIME_NOCERTS))) {
        private enum enumMixinStr_SMIME_NOCERTS = `enum SMIME_NOCERTS = 0x2;`;
        static if(is(typeof({ mixin(enumMixinStr_SMIME_NOCERTS); }))) {
            mixin(enumMixinStr_SMIME_NOCERTS);
        }
    }




    static if(!is(typeof(SMIME_NOSIGS))) {
        private enum enumMixinStr_SMIME_NOSIGS = `enum SMIME_NOSIGS = 0x4;`;
        static if(is(typeof({ mixin(enumMixinStr_SMIME_NOSIGS); }))) {
            mixin(enumMixinStr_SMIME_NOSIGS);
        }
    }




    static if(!is(typeof(SMIME_NOCHAIN))) {
        private enum enumMixinStr_SMIME_NOCHAIN = `enum SMIME_NOCHAIN = 0x8;`;
        static if(is(typeof({ mixin(enumMixinStr_SMIME_NOCHAIN); }))) {
            mixin(enumMixinStr_SMIME_NOCHAIN);
        }
    }




    static if(!is(typeof(SMIME_NOINTERN))) {
        private enum enumMixinStr_SMIME_NOINTERN = `enum SMIME_NOINTERN = 0x10;`;
        static if(is(typeof({ mixin(enumMixinStr_SMIME_NOINTERN); }))) {
            mixin(enumMixinStr_SMIME_NOINTERN);
        }
    }




    static if(!is(typeof(SMIME_NOVERIFY))) {
        private enum enumMixinStr_SMIME_NOVERIFY = `enum SMIME_NOVERIFY = 0x20;`;
        static if(is(typeof({ mixin(enumMixinStr_SMIME_NOVERIFY); }))) {
            mixin(enumMixinStr_SMIME_NOVERIFY);
        }
    }




    static if(!is(typeof(SMIME_DETACHED))) {
        private enum enumMixinStr_SMIME_DETACHED = `enum SMIME_DETACHED = 0x40;`;
        static if(is(typeof({ mixin(enumMixinStr_SMIME_DETACHED); }))) {
            mixin(enumMixinStr_SMIME_DETACHED);
        }
    }




    static if(!is(typeof(SMIME_BINARY))) {
        private enum enumMixinStr_SMIME_BINARY = `enum SMIME_BINARY = 0x80;`;
        static if(is(typeof({ mixin(enumMixinStr_SMIME_BINARY); }))) {
            mixin(enumMixinStr_SMIME_BINARY);
        }
    }




    static if(!is(typeof(SMIME_NOATTR))) {
        private enum enumMixinStr_SMIME_NOATTR = `enum SMIME_NOATTR = 0x100;`;
        static if(is(typeof({ mixin(enumMixinStr_SMIME_NOATTR); }))) {
            mixin(enumMixinStr_SMIME_NOATTR);
        }
    }




    static if(!is(typeof(SMIME_ASCIICRLF))) {
        private enum enumMixinStr_SMIME_ASCIICRLF = `enum SMIME_ASCIICRLF = 0x80000;`;
        static if(is(typeof({ mixin(enumMixinStr_SMIME_ASCIICRLF); }))) {
            mixin(enumMixinStr_SMIME_ASCIICRLF);
        }
    }




    static if(!is(typeof(TLS1_TXT_ECDHE_ECDSA_WITH_AES_128_CBC_SHA))) {
        private enum enumMixinStr_TLS1_TXT_ECDHE_ECDSA_WITH_AES_128_CBC_SHA = `enum TLS1_TXT_ECDHE_ECDSA_WITH_AES_128_CBC_SHA = "ECDHE-ECDSA-AES128-SHA";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_ECDHE_ECDSA_WITH_AES_128_CBC_SHA); }))) {
            mixin(enumMixinStr_TLS1_TXT_ECDHE_ECDSA_WITH_AES_128_CBC_SHA);
        }
    }




    static if(!is(typeof(TLS1_TXT_ECDHE_ECDSA_WITH_DES_192_CBC3_SHA))) {
        private enum enumMixinStr_TLS1_TXT_ECDHE_ECDSA_WITH_DES_192_CBC3_SHA = `enum TLS1_TXT_ECDHE_ECDSA_WITH_DES_192_CBC3_SHA = "ECDHE-ECDSA-DES-CBC3-SHA";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_ECDHE_ECDSA_WITH_DES_192_CBC3_SHA); }))) {
            mixin(enumMixinStr_TLS1_TXT_ECDHE_ECDSA_WITH_DES_192_CBC3_SHA);
        }
    }




    static if(!is(typeof(TLS1_TXT_ECDHE_ECDSA_WITH_RC4_128_SHA))) {
        private enum enumMixinStr_TLS1_TXT_ECDHE_ECDSA_WITH_RC4_128_SHA = `enum TLS1_TXT_ECDHE_ECDSA_WITH_RC4_128_SHA = "ECDHE-ECDSA-RC4-SHA";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_ECDHE_ECDSA_WITH_RC4_128_SHA); }))) {
            mixin(enumMixinStr_TLS1_TXT_ECDHE_ECDSA_WITH_RC4_128_SHA);
        }
    }




    static if(!is(typeof(TLS1_TXT_ECDHE_ECDSA_WITH_NULL_SHA))) {
        private enum enumMixinStr_TLS1_TXT_ECDHE_ECDSA_WITH_NULL_SHA = `enum TLS1_TXT_ECDHE_ECDSA_WITH_NULL_SHA = "ECDHE-ECDSA-NULL-SHA";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_ECDHE_ECDSA_WITH_NULL_SHA); }))) {
            mixin(enumMixinStr_TLS1_TXT_ECDHE_ECDSA_WITH_NULL_SHA);
        }
    }




    static if(!is(typeof(TLS1_TXT_ECDH_ECDSA_WITH_AES_256_CBC_SHA))) {
        private enum enumMixinStr_TLS1_TXT_ECDH_ECDSA_WITH_AES_256_CBC_SHA = `enum TLS1_TXT_ECDH_ECDSA_WITH_AES_256_CBC_SHA = "ECDH-ECDSA-AES256-SHA";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_ECDH_ECDSA_WITH_AES_256_CBC_SHA); }))) {
            mixin(enumMixinStr_TLS1_TXT_ECDH_ECDSA_WITH_AES_256_CBC_SHA);
        }
    }




    static if(!is(typeof(TLS1_TXT_ECDH_ECDSA_WITH_AES_128_CBC_SHA))) {
        private enum enumMixinStr_TLS1_TXT_ECDH_ECDSA_WITH_AES_128_CBC_SHA = `enum TLS1_TXT_ECDH_ECDSA_WITH_AES_128_CBC_SHA = "ECDH-ECDSA-AES128-SHA";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_ECDH_ECDSA_WITH_AES_128_CBC_SHA); }))) {
            mixin(enumMixinStr_TLS1_TXT_ECDH_ECDSA_WITH_AES_128_CBC_SHA);
        }
    }




    static if(!is(typeof(TLS1_TXT_ECDH_ECDSA_WITH_DES_192_CBC3_SHA))) {
        private enum enumMixinStr_TLS1_TXT_ECDH_ECDSA_WITH_DES_192_CBC3_SHA = `enum TLS1_TXT_ECDH_ECDSA_WITH_DES_192_CBC3_SHA = "ECDH-ECDSA-DES-CBC3-SHA";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_ECDH_ECDSA_WITH_DES_192_CBC3_SHA); }))) {
            mixin(enumMixinStr_TLS1_TXT_ECDH_ECDSA_WITH_DES_192_CBC3_SHA);
        }
    }




    static if(!is(typeof(TLS1_TXT_ECDH_ECDSA_WITH_RC4_128_SHA))) {
        private enum enumMixinStr_TLS1_TXT_ECDH_ECDSA_WITH_RC4_128_SHA = `enum TLS1_TXT_ECDH_ECDSA_WITH_RC4_128_SHA = "ECDH-ECDSA-RC4-SHA";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_ECDH_ECDSA_WITH_RC4_128_SHA); }))) {
            mixin(enumMixinStr_TLS1_TXT_ECDH_ECDSA_WITH_RC4_128_SHA);
        }
    }




    static if(!is(typeof(TLS1_TXT_ECDH_ECDSA_WITH_NULL_SHA))) {
        private enum enumMixinStr_TLS1_TXT_ECDH_ECDSA_WITH_NULL_SHA = `enum TLS1_TXT_ECDH_ECDSA_WITH_NULL_SHA = "ECDH-ECDSA-NULL-SHA";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_ECDH_ECDSA_WITH_NULL_SHA); }))) {
            mixin(enumMixinStr_TLS1_TXT_ECDH_ECDSA_WITH_NULL_SHA);
        }
    }




    static if(!is(typeof(TLS1_TXT_ADH_WITH_AES_256_SHA))) {
        private enum enumMixinStr_TLS1_TXT_ADH_WITH_AES_256_SHA = `enum TLS1_TXT_ADH_WITH_AES_256_SHA = "ADH-AES256-SHA";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_ADH_WITH_AES_256_SHA); }))) {
            mixin(enumMixinStr_TLS1_TXT_ADH_WITH_AES_256_SHA);
        }
    }




    static if(!is(typeof(TLS1_TXT_DHE_RSA_WITH_AES_256_SHA))) {
        private enum enumMixinStr_TLS1_TXT_DHE_RSA_WITH_AES_256_SHA = `enum TLS1_TXT_DHE_RSA_WITH_AES_256_SHA = "DHE-RSA-AES256-SHA";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_DHE_RSA_WITH_AES_256_SHA); }))) {
            mixin(enumMixinStr_TLS1_TXT_DHE_RSA_WITH_AES_256_SHA);
        }
    }




    static if(!is(typeof(TLS1_TXT_DHE_DSS_WITH_AES_256_SHA))) {
        private enum enumMixinStr_TLS1_TXT_DHE_DSS_WITH_AES_256_SHA = `enum TLS1_TXT_DHE_DSS_WITH_AES_256_SHA = "DHE-DSS-AES256-SHA";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_DHE_DSS_WITH_AES_256_SHA); }))) {
            mixin(enumMixinStr_TLS1_TXT_DHE_DSS_WITH_AES_256_SHA);
        }
    }




    static if(!is(typeof(TLS1_TXT_DH_RSA_WITH_AES_256_SHA))) {
        private enum enumMixinStr_TLS1_TXT_DH_RSA_WITH_AES_256_SHA = `enum TLS1_TXT_DH_RSA_WITH_AES_256_SHA = "DH-RSA-AES256-SHA";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_DH_RSA_WITH_AES_256_SHA); }))) {
            mixin(enumMixinStr_TLS1_TXT_DH_RSA_WITH_AES_256_SHA);
        }
    }




    static if(!is(typeof(TLS1_TXT_DH_DSS_WITH_AES_256_SHA))) {
        private enum enumMixinStr_TLS1_TXT_DH_DSS_WITH_AES_256_SHA = `enum TLS1_TXT_DH_DSS_WITH_AES_256_SHA = "DH-DSS-AES256-SHA";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_DH_DSS_WITH_AES_256_SHA); }))) {
            mixin(enumMixinStr_TLS1_TXT_DH_DSS_WITH_AES_256_SHA);
        }
    }




    static if(!is(typeof(TLS1_TXT_RSA_WITH_AES_256_SHA))) {
        private enum enumMixinStr_TLS1_TXT_RSA_WITH_AES_256_SHA = `enum TLS1_TXT_RSA_WITH_AES_256_SHA = "AES256-SHA";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_RSA_WITH_AES_256_SHA); }))) {
            mixin(enumMixinStr_TLS1_TXT_RSA_WITH_AES_256_SHA);
        }
    }




    static if(!is(typeof(TLS1_TXT_ADH_WITH_AES_128_SHA))) {
        private enum enumMixinStr_TLS1_TXT_ADH_WITH_AES_128_SHA = `enum TLS1_TXT_ADH_WITH_AES_128_SHA = "ADH-AES128-SHA";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_ADH_WITH_AES_128_SHA); }))) {
            mixin(enumMixinStr_TLS1_TXT_ADH_WITH_AES_128_SHA);
        }
    }




    static if(!is(typeof(TLS1_TXT_DHE_RSA_WITH_AES_128_SHA))) {
        private enum enumMixinStr_TLS1_TXT_DHE_RSA_WITH_AES_128_SHA = `enum TLS1_TXT_DHE_RSA_WITH_AES_128_SHA = "DHE-RSA-AES128-SHA";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_DHE_RSA_WITH_AES_128_SHA); }))) {
            mixin(enumMixinStr_TLS1_TXT_DHE_RSA_WITH_AES_128_SHA);
        }
    }




    static if(!is(typeof(TLS1_TXT_DHE_DSS_WITH_AES_128_SHA))) {
        private enum enumMixinStr_TLS1_TXT_DHE_DSS_WITH_AES_128_SHA = `enum TLS1_TXT_DHE_DSS_WITH_AES_128_SHA = "DHE-DSS-AES128-SHA";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_DHE_DSS_WITH_AES_128_SHA); }))) {
            mixin(enumMixinStr_TLS1_TXT_DHE_DSS_WITH_AES_128_SHA);
        }
    }




    static if(!is(typeof(TLS1_TXT_DH_RSA_WITH_AES_128_SHA))) {
        private enum enumMixinStr_TLS1_TXT_DH_RSA_WITH_AES_128_SHA = `enum TLS1_TXT_DH_RSA_WITH_AES_128_SHA = "DH-RSA-AES128-SHA";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_DH_RSA_WITH_AES_128_SHA); }))) {
            mixin(enumMixinStr_TLS1_TXT_DH_RSA_WITH_AES_128_SHA);
        }
    }




    static if(!is(typeof(TLS1_TXT_DH_DSS_WITH_AES_128_SHA))) {
        private enum enumMixinStr_TLS1_TXT_DH_DSS_WITH_AES_128_SHA = `enum TLS1_TXT_DH_DSS_WITH_AES_128_SHA = "DH-DSS-AES128-SHA";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_DH_DSS_WITH_AES_128_SHA); }))) {
            mixin(enumMixinStr_TLS1_TXT_DH_DSS_WITH_AES_128_SHA);
        }
    }




    static if(!is(typeof(TLS1_TXT_RSA_WITH_AES_128_SHA))) {
        private enum enumMixinStr_TLS1_TXT_RSA_WITH_AES_128_SHA = `enum TLS1_TXT_RSA_WITH_AES_128_SHA = "AES128-SHA";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_RSA_WITH_AES_128_SHA); }))) {
            mixin(enumMixinStr_TLS1_TXT_RSA_WITH_AES_128_SHA);
        }
    }




    static if(!is(typeof(TLS1_TXT_RSA_PSK_WITH_NULL_SHA))) {
        private enum enumMixinStr_TLS1_TXT_RSA_PSK_WITH_NULL_SHA = `enum TLS1_TXT_RSA_PSK_WITH_NULL_SHA = "RSA-PSK-NULL-SHA";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_RSA_PSK_WITH_NULL_SHA); }))) {
            mixin(enumMixinStr_TLS1_TXT_RSA_PSK_WITH_NULL_SHA);
        }
    }




    static if(!is(typeof(TLS1_TXT_DHE_PSK_WITH_NULL_SHA))) {
        private enum enumMixinStr_TLS1_TXT_DHE_PSK_WITH_NULL_SHA = `enum TLS1_TXT_DHE_PSK_WITH_NULL_SHA = "DHE-PSK-NULL-SHA";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_DHE_PSK_WITH_NULL_SHA); }))) {
            mixin(enumMixinStr_TLS1_TXT_DHE_PSK_WITH_NULL_SHA);
        }
    }




    static if(!is(typeof(TLS1_TXT_PSK_WITH_NULL_SHA))) {
        private enum enumMixinStr_TLS1_TXT_PSK_WITH_NULL_SHA = `enum TLS1_TXT_PSK_WITH_NULL_SHA = "PSK-NULL-SHA";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_PSK_WITH_NULL_SHA); }))) {
            mixin(enumMixinStr_TLS1_TXT_PSK_WITH_NULL_SHA);
        }
    }




    static if(!is(typeof(TLS1_TXT_DHE_DSS_WITH_RC4_128_SHA))) {
        private enum enumMixinStr_TLS1_TXT_DHE_DSS_WITH_RC4_128_SHA = `enum TLS1_TXT_DHE_DSS_WITH_RC4_128_SHA = "DHE-DSS-RC4-SHA";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_TXT_DHE_DSS_WITH_RC4_128_SHA); }))) {
            mixin(enumMixinStr_TLS1_TXT_DHE_DSS_WITH_RC4_128_SHA);
        }
    }




    static if(!is(typeof(TLS1_CK_RSA_PSK_WITH_CHACHA20_POLY1305))) {
        private enum enumMixinStr_TLS1_CK_RSA_PSK_WITH_CHACHA20_POLY1305 = `enum TLS1_CK_RSA_PSK_WITH_CHACHA20_POLY1305 = 0x0300CCAE;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_RSA_PSK_WITH_CHACHA20_POLY1305); }))) {
            mixin(enumMixinStr_TLS1_CK_RSA_PSK_WITH_CHACHA20_POLY1305);
        }
    }




    static if(!is(typeof(TLS1_CK_DHE_PSK_WITH_CHACHA20_POLY1305))) {
        private enum enumMixinStr_TLS1_CK_DHE_PSK_WITH_CHACHA20_POLY1305 = `enum TLS1_CK_DHE_PSK_WITH_CHACHA20_POLY1305 = 0x0300CCAD;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_DHE_PSK_WITH_CHACHA20_POLY1305); }))) {
            mixin(enumMixinStr_TLS1_CK_DHE_PSK_WITH_CHACHA20_POLY1305);
        }
    }




    static if(!is(typeof(TLS1_CK_ECDHE_PSK_WITH_CHACHA20_POLY1305))) {
        private enum enumMixinStr_TLS1_CK_ECDHE_PSK_WITH_CHACHA20_POLY1305 = `enum TLS1_CK_ECDHE_PSK_WITH_CHACHA20_POLY1305 = 0x0300CCAC;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_ECDHE_PSK_WITH_CHACHA20_POLY1305); }))) {
            mixin(enumMixinStr_TLS1_CK_ECDHE_PSK_WITH_CHACHA20_POLY1305);
        }
    }




    static if(!is(typeof(TLS1_CK_PSK_WITH_CHACHA20_POLY1305))) {
        private enum enumMixinStr_TLS1_CK_PSK_WITH_CHACHA20_POLY1305 = `enum TLS1_CK_PSK_WITH_CHACHA20_POLY1305 = 0x0300CCAB;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_PSK_WITH_CHACHA20_POLY1305); }))) {
            mixin(enumMixinStr_TLS1_CK_PSK_WITH_CHACHA20_POLY1305);
        }
    }




    static if(!is(typeof(TLS1_CK_DHE_RSA_WITH_CHACHA20_POLY1305))) {
        private enum enumMixinStr_TLS1_CK_DHE_RSA_WITH_CHACHA20_POLY1305 = `enum TLS1_CK_DHE_RSA_WITH_CHACHA20_POLY1305 = 0x0300CCAA;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_DHE_RSA_WITH_CHACHA20_POLY1305); }))) {
            mixin(enumMixinStr_TLS1_CK_DHE_RSA_WITH_CHACHA20_POLY1305);
        }
    }




    static if(!is(typeof(TLS1_CK_ECDHE_ECDSA_WITH_CHACHA20_POLY1305))) {
        private enum enumMixinStr_TLS1_CK_ECDHE_ECDSA_WITH_CHACHA20_POLY1305 = `enum TLS1_CK_ECDHE_ECDSA_WITH_CHACHA20_POLY1305 = 0x0300CCA9;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_ECDHE_ECDSA_WITH_CHACHA20_POLY1305); }))) {
            mixin(enumMixinStr_TLS1_CK_ECDHE_ECDSA_WITH_CHACHA20_POLY1305);
        }
    }




    static if(!is(typeof(TLS1_CK_ECDHE_RSA_WITH_CHACHA20_POLY1305))) {
        private enum enumMixinStr_TLS1_CK_ECDHE_RSA_WITH_CHACHA20_POLY1305 = `enum TLS1_CK_ECDHE_RSA_WITH_CHACHA20_POLY1305 = 0x0300CCA8;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_ECDHE_RSA_WITH_CHACHA20_POLY1305); }))) {
            mixin(enumMixinStr_TLS1_CK_ECDHE_RSA_WITH_CHACHA20_POLY1305);
        }
    }




    static if(!is(typeof(TLS1_CK_ECDHE_PSK_WITH_CAMELLIA_256_CBC_SHA384))) {
        private enum enumMixinStr_TLS1_CK_ECDHE_PSK_WITH_CAMELLIA_256_CBC_SHA384 = `enum TLS1_CK_ECDHE_PSK_WITH_CAMELLIA_256_CBC_SHA384 = 0x0300C09B;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_ECDHE_PSK_WITH_CAMELLIA_256_CBC_SHA384); }))) {
            mixin(enumMixinStr_TLS1_CK_ECDHE_PSK_WITH_CAMELLIA_256_CBC_SHA384);
        }
    }




    static if(!is(typeof(TLS1_CK_ECDHE_PSK_WITH_CAMELLIA_128_CBC_SHA256))) {
        private enum enumMixinStr_TLS1_CK_ECDHE_PSK_WITH_CAMELLIA_128_CBC_SHA256 = `enum TLS1_CK_ECDHE_PSK_WITH_CAMELLIA_128_CBC_SHA256 = 0x0300C09A;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_ECDHE_PSK_WITH_CAMELLIA_128_CBC_SHA256); }))) {
            mixin(enumMixinStr_TLS1_CK_ECDHE_PSK_WITH_CAMELLIA_128_CBC_SHA256);
        }
    }




    static if(!is(typeof(TLS1_CK_RSA_PSK_WITH_CAMELLIA_256_CBC_SHA384))) {
        private enum enumMixinStr_TLS1_CK_RSA_PSK_WITH_CAMELLIA_256_CBC_SHA384 = `enum TLS1_CK_RSA_PSK_WITH_CAMELLIA_256_CBC_SHA384 = 0x0300C099;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_RSA_PSK_WITH_CAMELLIA_256_CBC_SHA384); }))) {
            mixin(enumMixinStr_TLS1_CK_RSA_PSK_WITH_CAMELLIA_256_CBC_SHA384);
        }
    }




    static if(!is(typeof(TLS1_CK_RSA_PSK_WITH_CAMELLIA_128_CBC_SHA256))) {
        private enum enumMixinStr_TLS1_CK_RSA_PSK_WITH_CAMELLIA_128_CBC_SHA256 = `enum TLS1_CK_RSA_PSK_WITH_CAMELLIA_128_CBC_SHA256 = 0x0300C098;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_RSA_PSK_WITH_CAMELLIA_128_CBC_SHA256); }))) {
            mixin(enumMixinStr_TLS1_CK_RSA_PSK_WITH_CAMELLIA_128_CBC_SHA256);
        }
    }




    static if(!is(typeof(TLS1_CK_DHE_PSK_WITH_CAMELLIA_256_CBC_SHA384))) {
        private enum enumMixinStr_TLS1_CK_DHE_PSK_WITH_CAMELLIA_256_CBC_SHA384 = `enum TLS1_CK_DHE_PSK_WITH_CAMELLIA_256_CBC_SHA384 = 0x0300C097;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_DHE_PSK_WITH_CAMELLIA_256_CBC_SHA384); }))) {
            mixin(enumMixinStr_TLS1_CK_DHE_PSK_WITH_CAMELLIA_256_CBC_SHA384);
        }
    }




    static if(!is(typeof(TLS1_CK_DHE_PSK_WITH_CAMELLIA_128_CBC_SHA256))) {
        private enum enumMixinStr_TLS1_CK_DHE_PSK_WITH_CAMELLIA_128_CBC_SHA256 = `enum TLS1_CK_DHE_PSK_WITH_CAMELLIA_128_CBC_SHA256 = 0x0300C096;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_DHE_PSK_WITH_CAMELLIA_128_CBC_SHA256); }))) {
            mixin(enumMixinStr_TLS1_CK_DHE_PSK_WITH_CAMELLIA_128_CBC_SHA256);
        }
    }




    static if(!is(typeof(TLS1_CK_PSK_WITH_CAMELLIA_256_CBC_SHA384))) {
        private enum enumMixinStr_TLS1_CK_PSK_WITH_CAMELLIA_256_CBC_SHA384 = `enum TLS1_CK_PSK_WITH_CAMELLIA_256_CBC_SHA384 = 0x0300C095;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_PSK_WITH_CAMELLIA_256_CBC_SHA384); }))) {
            mixin(enumMixinStr_TLS1_CK_PSK_WITH_CAMELLIA_256_CBC_SHA384);
        }
    }




    static if(!is(typeof(TLS1_CK_PSK_WITH_CAMELLIA_128_CBC_SHA256))) {
        private enum enumMixinStr_TLS1_CK_PSK_WITH_CAMELLIA_128_CBC_SHA256 = `enum TLS1_CK_PSK_WITH_CAMELLIA_128_CBC_SHA256 = 0x0300C094;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_PSK_WITH_CAMELLIA_128_CBC_SHA256); }))) {
            mixin(enumMixinStr_TLS1_CK_PSK_WITH_CAMELLIA_128_CBC_SHA256);
        }
    }




    static if(!is(typeof(TLS1_CK_ECDH_RSA_WITH_CAMELLIA_256_CBC_SHA384))) {
        private enum enumMixinStr_TLS1_CK_ECDH_RSA_WITH_CAMELLIA_256_CBC_SHA384 = `enum TLS1_CK_ECDH_RSA_WITH_CAMELLIA_256_CBC_SHA384 = 0x0300C079;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_ECDH_RSA_WITH_CAMELLIA_256_CBC_SHA384); }))) {
            mixin(enumMixinStr_TLS1_CK_ECDH_RSA_WITH_CAMELLIA_256_CBC_SHA384);
        }
    }




    static if(!is(typeof(TLS1_CK_ECDH_RSA_WITH_CAMELLIA_128_CBC_SHA256))) {
        private enum enumMixinStr_TLS1_CK_ECDH_RSA_WITH_CAMELLIA_128_CBC_SHA256 = `enum TLS1_CK_ECDH_RSA_WITH_CAMELLIA_128_CBC_SHA256 = 0x0300C078;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_ECDH_RSA_WITH_CAMELLIA_128_CBC_SHA256); }))) {
            mixin(enumMixinStr_TLS1_CK_ECDH_RSA_WITH_CAMELLIA_128_CBC_SHA256);
        }
    }




    static if(!is(typeof(TLS1_CK_ECDHE_RSA_WITH_CAMELLIA_256_CBC_SHA384))) {
        private enum enumMixinStr_TLS1_CK_ECDHE_RSA_WITH_CAMELLIA_256_CBC_SHA384 = `enum TLS1_CK_ECDHE_RSA_WITH_CAMELLIA_256_CBC_SHA384 = 0x0300C077;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_ECDHE_RSA_WITH_CAMELLIA_256_CBC_SHA384); }))) {
            mixin(enumMixinStr_TLS1_CK_ECDHE_RSA_WITH_CAMELLIA_256_CBC_SHA384);
        }
    }




    static if(!is(typeof(TLS1_CK_ECDHE_RSA_WITH_CAMELLIA_128_CBC_SHA256))) {
        private enum enumMixinStr_TLS1_CK_ECDHE_RSA_WITH_CAMELLIA_128_CBC_SHA256 = `enum TLS1_CK_ECDHE_RSA_WITH_CAMELLIA_128_CBC_SHA256 = 0x0300C076;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_ECDHE_RSA_WITH_CAMELLIA_128_CBC_SHA256); }))) {
            mixin(enumMixinStr_TLS1_CK_ECDHE_RSA_WITH_CAMELLIA_128_CBC_SHA256);
        }
    }




    static if(!is(typeof(TLS1_CK_ECDH_ECDSA_WITH_CAMELLIA_256_CBC_SHA384))) {
        private enum enumMixinStr_TLS1_CK_ECDH_ECDSA_WITH_CAMELLIA_256_CBC_SHA384 = `enum TLS1_CK_ECDH_ECDSA_WITH_CAMELLIA_256_CBC_SHA384 = 0x0300C075;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_ECDH_ECDSA_WITH_CAMELLIA_256_CBC_SHA384); }))) {
            mixin(enumMixinStr_TLS1_CK_ECDH_ECDSA_WITH_CAMELLIA_256_CBC_SHA384);
        }
    }




    static if(!is(typeof(TLS1_CK_ECDH_ECDSA_WITH_CAMELLIA_128_CBC_SHA256))) {
        private enum enumMixinStr_TLS1_CK_ECDH_ECDSA_WITH_CAMELLIA_128_CBC_SHA256 = `enum TLS1_CK_ECDH_ECDSA_WITH_CAMELLIA_128_CBC_SHA256 = 0x0300C074;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_ECDH_ECDSA_WITH_CAMELLIA_128_CBC_SHA256); }))) {
            mixin(enumMixinStr_TLS1_CK_ECDH_ECDSA_WITH_CAMELLIA_128_CBC_SHA256);
        }
    }




    static if(!is(typeof(TLS1_CK_ECDHE_ECDSA_WITH_CAMELLIA_256_CBC_SHA384))) {
        private enum enumMixinStr_TLS1_CK_ECDHE_ECDSA_WITH_CAMELLIA_256_CBC_SHA384 = `enum TLS1_CK_ECDHE_ECDSA_WITH_CAMELLIA_256_CBC_SHA384 = 0x0300C073;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_ECDHE_ECDSA_WITH_CAMELLIA_256_CBC_SHA384); }))) {
            mixin(enumMixinStr_TLS1_CK_ECDHE_ECDSA_WITH_CAMELLIA_256_CBC_SHA384);
        }
    }




    static if(!is(typeof(TLS1_CK_ECDHE_ECDSA_WITH_CAMELLIA_128_CBC_SHA256))) {
        private enum enumMixinStr_TLS1_CK_ECDHE_ECDSA_WITH_CAMELLIA_128_CBC_SHA256 = `enum TLS1_CK_ECDHE_ECDSA_WITH_CAMELLIA_128_CBC_SHA256 = 0x0300C072;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_ECDHE_ECDSA_WITH_CAMELLIA_128_CBC_SHA256); }))) {
            mixin(enumMixinStr_TLS1_CK_ECDHE_ECDSA_WITH_CAMELLIA_128_CBC_SHA256);
        }
    }




    static if(!is(typeof(TLS1_CK_ECDHE_PSK_WITH_NULL_SHA384))) {
        private enum enumMixinStr_TLS1_CK_ECDHE_PSK_WITH_NULL_SHA384 = `enum TLS1_CK_ECDHE_PSK_WITH_NULL_SHA384 = 0x0300C03B;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_ECDHE_PSK_WITH_NULL_SHA384); }))) {
            mixin(enumMixinStr_TLS1_CK_ECDHE_PSK_WITH_NULL_SHA384);
        }
    }




    static if(!is(typeof(TLS1_CK_ECDHE_PSK_WITH_NULL_SHA256))) {
        private enum enumMixinStr_TLS1_CK_ECDHE_PSK_WITH_NULL_SHA256 = `enum TLS1_CK_ECDHE_PSK_WITH_NULL_SHA256 = 0x0300C03A;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_ECDHE_PSK_WITH_NULL_SHA256); }))) {
            mixin(enumMixinStr_TLS1_CK_ECDHE_PSK_WITH_NULL_SHA256);
        }
    }




    static if(!is(typeof(TLS1_CK_ECDHE_PSK_WITH_NULL_SHA))) {
        private enum enumMixinStr_TLS1_CK_ECDHE_PSK_WITH_NULL_SHA = `enum TLS1_CK_ECDHE_PSK_WITH_NULL_SHA = 0x0300C039;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_ECDHE_PSK_WITH_NULL_SHA); }))) {
            mixin(enumMixinStr_TLS1_CK_ECDHE_PSK_WITH_NULL_SHA);
        }
    }




    static if(!is(typeof(TLS1_CK_ECDHE_PSK_WITH_AES_256_CBC_SHA384))) {
        private enum enumMixinStr_TLS1_CK_ECDHE_PSK_WITH_AES_256_CBC_SHA384 = `enum TLS1_CK_ECDHE_PSK_WITH_AES_256_CBC_SHA384 = 0x0300C038;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_ECDHE_PSK_WITH_AES_256_CBC_SHA384); }))) {
            mixin(enumMixinStr_TLS1_CK_ECDHE_PSK_WITH_AES_256_CBC_SHA384);
        }
    }




    static if(!is(typeof(TLS1_CK_ECDHE_PSK_WITH_AES_128_CBC_SHA256))) {
        private enum enumMixinStr_TLS1_CK_ECDHE_PSK_WITH_AES_128_CBC_SHA256 = `enum TLS1_CK_ECDHE_PSK_WITH_AES_128_CBC_SHA256 = 0x0300C037;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_ECDHE_PSK_WITH_AES_128_CBC_SHA256); }))) {
            mixin(enumMixinStr_TLS1_CK_ECDHE_PSK_WITH_AES_128_CBC_SHA256);
        }
    }




    static if(!is(typeof(TLS1_CK_ECDHE_PSK_WITH_AES_256_CBC_SHA))) {
        private enum enumMixinStr_TLS1_CK_ECDHE_PSK_WITH_AES_256_CBC_SHA = `enum TLS1_CK_ECDHE_PSK_WITH_AES_256_CBC_SHA = 0x0300C036;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_ECDHE_PSK_WITH_AES_256_CBC_SHA); }))) {
            mixin(enumMixinStr_TLS1_CK_ECDHE_PSK_WITH_AES_256_CBC_SHA);
        }
    }




    static if(!is(typeof(TLS1_CK_ECDHE_PSK_WITH_AES_128_CBC_SHA))) {
        private enum enumMixinStr_TLS1_CK_ECDHE_PSK_WITH_AES_128_CBC_SHA = `enum TLS1_CK_ECDHE_PSK_WITH_AES_128_CBC_SHA = 0x0300C035;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_ECDHE_PSK_WITH_AES_128_CBC_SHA); }))) {
            mixin(enumMixinStr_TLS1_CK_ECDHE_PSK_WITH_AES_128_CBC_SHA);
        }
    }




    static if(!is(typeof(TLS1_CK_ECDHE_PSK_WITH_3DES_EDE_CBC_SHA))) {
        private enum enumMixinStr_TLS1_CK_ECDHE_PSK_WITH_3DES_EDE_CBC_SHA = `enum TLS1_CK_ECDHE_PSK_WITH_3DES_EDE_CBC_SHA = 0x0300C034;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_ECDHE_PSK_WITH_3DES_EDE_CBC_SHA); }))) {
            mixin(enumMixinStr_TLS1_CK_ECDHE_PSK_WITH_3DES_EDE_CBC_SHA);
        }
    }




    static if(!is(typeof(TLS1_CK_ECDHE_PSK_WITH_RC4_128_SHA))) {
        private enum enumMixinStr_TLS1_CK_ECDHE_PSK_WITH_RC4_128_SHA = `enum TLS1_CK_ECDHE_PSK_WITH_RC4_128_SHA = 0x0300C033;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_ECDHE_PSK_WITH_RC4_128_SHA); }))) {
            mixin(enumMixinStr_TLS1_CK_ECDHE_PSK_WITH_RC4_128_SHA);
        }
    }




    static if(!is(typeof(TLS1_CK_ECDH_RSA_WITH_AES_256_GCM_SHA384))) {
        private enum enumMixinStr_TLS1_CK_ECDH_RSA_WITH_AES_256_GCM_SHA384 = `enum TLS1_CK_ECDH_RSA_WITH_AES_256_GCM_SHA384 = 0x0300C032;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_ECDH_RSA_WITH_AES_256_GCM_SHA384); }))) {
            mixin(enumMixinStr_TLS1_CK_ECDH_RSA_WITH_AES_256_GCM_SHA384);
        }
    }




    static if(!is(typeof(TLS1_CK_ECDH_RSA_WITH_AES_128_GCM_SHA256))) {
        private enum enumMixinStr_TLS1_CK_ECDH_RSA_WITH_AES_128_GCM_SHA256 = `enum TLS1_CK_ECDH_RSA_WITH_AES_128_GCM_SHA256 = 0x0300C031;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_ECDH_RSA_WITH_AES_128_GCM_SHA256); }))) {
            mixin(enumMixinStr_TLS1_CK_ECDH_RSA_WITH_AES_128_GCM_SHA256);
        }
    }




    static if(!is(typeof(TLS1_CK_ECDHE_RSA_WITH_AES_256_GCM_SHA384))) {
        private enum enumMixinStr_TLS1_CK_ECDHE_RSA_WITH_AES_256_GCM_SHA384 = `enum TLS1_CK_ECDHE_RSA_WITH_AES_256_GCM_SHA384 = 0x0300C030;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_ECDHE_RSA_WITH_AES_256_GCM_SHA384); }))) {
            mixin(enumMixinStr_TLS1_CK_ECDHE_RSA_WITH_AES_256_GCM_SHA384);
        }
    }




    static if(!is(typeof(TLS1_CK_ECDHE_RSA_WITH_AES_128_GCM_SHA256))) {
        private enum enumMixinStr_TLS1_CK_ECDHE_RSA_WITH_AES_128_GCM_SHA256 = `enum TLS1_CK_ECDHE_RSA_WITH_AES_128_GCM_SHA256 = 0x0300C02F;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_ECDHE_RSA_WITH_AES_128_GCM_SHA256); }))) {
            mixin(enumMixinStr_TLS1_CK_ECDHE_RSA_WITH_AES_128_GCM_SHA256);
        }
    }




    static if(!is(typeof(TLS1_CK_ECDH_ECDSA_WITH_AES_256_GCM_SHA384))) {
        private enum enumMixinStr_TLS1_CK_ECDH_ECDSA_WITH_AES_256_GCM_SHA384 = `enum TLS1_CK_ECDH_ECDSA_WITH_AES_256_GCM_SHA384 = 0x0300C02E;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_ECDH_ECDSA_WITH_AES_256_GCM_SHA384); }))) {
            mixin(enumMixinStr_TLS1_CK_ECDH_ECDSA_WITH_AES_256_GCM_SHA384);
        }
    }




    static if(!is(typeof(TLS1_CK_ECDH_ECDSA_WITH_AES_128_GCM_SHA256))) {
        private enum enumMixinStr_TLS1_CK_ECDH_ECDSA_WITH_AES_128_GCM_SHA256 = `enum TLS1_CK_ECDH_ECDSA_WITH_AES_128_GCM_SHA256 = 0x0300C02D;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_ECDH_ECDSA_WITH_AES_128_GCM_SHA256); }))) {
            mixin(enumMixinStr_TLS1_CK_ECDH_ECDSA_WITH_AES_128_GCM_SHA256);
        }
    }




    static if(!is(typeof(TLS1_CK_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384))) {
        private enum enumMixinStr_TLS1_CK_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 = `enum TLS1_CK_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 = 0x0300C02C;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384); }))) {
            mixin(enumMixinStr_TLS1_CK_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384);
        }
    }




    static if(!is(typeof(TLS1_CK_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256))) {
        private enum enumMixinStr_TLS1_CK_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 = `enum TLS1_CK_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 = 0x0300C02B;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256); }))) {
            mixin(enumMixinStr_TLS1_CK_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256);
        }
    }




    static if(!is(typeof(TLS1_CK_ECDH_RSA_WITH_AES_256_SHA384))) {
        private enum enumMixinStr_TLS1_CK_ECDH_RSA_WITH_AES_256_SHA384 = `enum TLS1_CK_ECDH_RSA_WITH_AES_256_SHA384 = 0x0300C02A;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_ECDH_RSA_WITH_AES_256_SHA384); }))) {
            mixin(enumMixinStr_TLS1_CK_ECDH_RSA_WITH_AES_256_SHA384);
        }
    }




    static if(!is(typeof(TLS1_CK_ECDH_RSA_WITH_AES_128_SHA256))) {
        private enum enumMixinStr_TLS1_CK_ECDH_RSA_WITH_AES_128_SHA256 = `enum TLS1_CK_ECDH_RSA_WITH_AES_128_SHA256 = 0x0300C029;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_ECDH_RSA_WITH_AES_128_SHA256); }))) {
            mixin(enumMixinStr_TLS1_CK_ECDH_RSA_WITH_AES_128_SHA256);
        }
    }




    static if(!is(typeof(TLS1_CK_ECDHE_RSA_WITH_AES_256_SHA384))) {
        private enum enumMixinStr_TLS1_CK_ECDHE_RSA_WITH_AES_256_SHA384 = `enum TLS1_CK_ECDHE_RSA_WITH_AES_256_SHA384 = 0x0300C028;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_ECDHE_RSA_WITH_AES_256_SHA384); }))) {
            mixin(enumMixinStr_TLS1_CK_ECDHE_RSA_WITH_AES_256_SHA384);
        }
    }




    static if(!is(typeof(TLS1_CK_ECDHE_RSA_WITH_AES_128_SHA256))) {
        private enum enumMixinStr_TLS1_CK_ECDHE_RSA_WITH_AES_128_SHA256 = `enum TLS1_CK_ECDHE_RSA_WITH_AES_128_SHA256 = 0x0300C027;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_ECDHE_RSA_WITH_AES_128_SHA256); }))) {
            mixin(enumMixinStr_TLS1_CK_ECDHE_RSA_WITH_AES_128_SHA256);
        }
    }




    static if(!is(typeof(TLS1_CK_ECDH_ECDSA_WITH_AES_256_SHA384))) {
        private enum enumMixinStr_TLS1_CK_ECDH_ECDSA_WITH_AES_256_SHA384 = `enum TLS1_CK_ECDH_ECDSA_WITH_AES_256_SHA384 = 0x0300C026;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_ECDH_ECDSA_WITH_AES_256_SHA384); }))) {
            mixin(enumMixinStr_TLS1_CK_ECDH_ECDSA_WITH_AES_256_SHA384);
        }
    }




    static if(!is(typeof(TLS1_CK_ECDH_ECDSA_WITH_AES_128_SHA256))) {
        private enum enumMixinStr_TLS1_CK_ECDH_ECDSA_WITH_AES_128_SHA256 = `enum TLS1_CK_ECDH_ECDSA_WITH_AES_128_SHA256 = 0x0300C025;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_ECDH_ECDSA_WITH_AES_128_SHA256); }))) {
            mixin(enumMixinStr_TLS1_CK_ECDH_ECDSA_WITH_AES_128_SHA256);
        }
    }




    static if(!is(typeof(TLS1_CK_ECDHE_ECDSA_WITH_AES_256_SHA384))) {
        private enum enumMixinStr_TLS1_CK_ECDHE_ECDSA_WITH_AES_256_SHA384 = `enum TLS1_CK_ECDHE_ECDSA_WITH_AES_256_SHA384 = 0x0300C024;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_ECDHE_ECDSA_WITH_AES_256_SHA384); }))) {
            mixin(enumMixinStr_TLS1_CK_ECDHE_ECDSA_WITH_AES_256_SHA384);
        }
    }




    static if(!is(typeof(TLS1_CK_ECDHE_ECDSA_WITH_AES_128_SHA256))) {
        private enum enumMixinStr_TLS1_CK_ECDHE_ECDSA_WITH_AES_128_SHA256 = `enum TLS1_CK_ECDHE_ECDSA_WITH_AES_128_SHA256 = 0x0300C023;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_ECDHE_ECDSA_WITH_AES_128_SHA256); }))) {
            mixin(enumMixinStr_TLS1_CK_ECDHE_ECDSA_WITH_AES_128_SHA256);
        }
    }




    static if(!is(typeof(TLS1_CK_SRP_SHA_DSS_WITH_AES_256_CBC_SHA))) {
        private enum enumMixinStr_TLS1_CK_SRP_SHA_DSS_WITH_AES_256_CBC_SHA = `enum TLS1_CK_SRP_SHA_DSS_WITH_AES_256_CBC_SHA = 0x0300C022;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_SRP_SHA_DSS_WITH_AES_256_CBC_SHA); }))) {
            mixin(enumMixinStr_TLS1_CK_SRP_SHA_DSS_WITH_AES_256_CBC_SHA);
        }
    }




    static if(!is(typeof(TLS1_CK_SRP_SHA_RSA_WITH_AES_256_CBC_SHA))) {
        private enum enumMixinStr_TLS1_CK_SRP_SHA_RSA_WITH_AES_256_CBC_SHA = `enum TLS1_CK_SRP_SHA_RSA_WITH_AES_256_CBC_SHA = 0x0300C021;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_SRP_SHA_RSA_WITH_AES_256_CBC_SHA); }))) {
            mixin(enumMixinStr_TLS1_CK_SRP_SHA_RSA_WITH_AES_256_CBC_SHA);
        }
    }




    static if(!is(typeof(TLS1_CK_SRP_SHA_WITH_AES_256_CBC_SHA))) {
        private enum enumMixinStr_TLS1_CK_SRP_SHA_WITH_AES_256_CBC_SHA = `enum TLS1_CK_SRP_SHA_WITH_AES_256_CBC_SHA = 0x0300C020;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_SRP_SHA_WITH_AES_256_CBC_SHA); }))) {
            mixin(enumMixinStr_TLS1_CK_SRP_SHA_WITH_AES_256_CBC_SHA);
        }
    }




    static if(!is(typeof(TLS1_CK_SRP_SHA_DSS_WITH_AES_128_CBC_SHA))) {
        private enum enumMixinStr_TLS1_CK_SRP_SHA_DSS_WITH_AES_128_CBC_SHA = `enum TLS1_CK_SRP_SHA_DSS_WITH_AES_128_CBC_SHA = 0x0300C01F;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_SRP_SHA_DSS_WITH_AES_128_CBC_SHA); }))) {
            mixin(enumMixinStr_TLS1_CK_SRP_SHA_DSS_WITH_AES_128_CBC_SHA);
        }
    }




    static if(!is(typeof(TLS1_CK_SRP_SHA_RSA_WITH_AES_128_CBC_SHA))) {
        private enum enumMixinStr_TLS1_CK_SRP_SHA_RSA_WITH_AES_128_CBC_SHA = `enum TLS1_CK_SRP_SHA_RSA_WITH_AES_128_CBC_SHA = 0x0300C01E;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_SRP_SHA_RSA_WITH_AES_128_CBC_SHA); }))) {
            mixin(enumMixinStr_TLS1_CK_SRP_SHA_RSA_WITH_AES_128_CBC_SHA);
        }
    }




    static if(!is(typeof(TLS1_CK_SRP_SHA_WITH_AES_128_CBC_SHA))) {
        private enum enumMixinStr_TLS1_CK_SRP_SHA_WITH_AES_128_CBC_SHA = `enum TLS1_CK_SRP_SHA_WITH_AES_128_CBC_SHA = 0x0300C01D;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_SRP_SHA_WITH_AES_128_CBC_SHA); }))) {
            mixin(enumMixinStr_TLS1_CK_SRP_SHA_WITH_AES_128_CBC_SHA);
        }
    }




    static if(!is(typeof(TLS1_CK_SRP_SHA_DSS_WITH_3DES_EDE_CBC_SHA))) {
        private enum enumMixinStr_TLS1_CK_SRP_SHA_DSS_WITH_3DES_EDE_CBC_SHA = `enum TLS1_CK_SRP_SHA_DSS_WITH_3DES_EDE_CBC_SHA = 0x0300C01C;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_SRP_SHA_DSS_WITH_3DES_EDE_CBC_SHA); }))) {
            mixin(enumMixinStr_TLS1_CK_SRP_SHA_DSS_WITH_3DES_EDE_CBC_SHA);
        }
    }




    static if(!is(typeof(TLS1_CK_SRP_SHA_RSA_WITH_3DES_EDE_CBC_SHA))) {
        private enum enumMixinStr_TLS1_CK_SRP_SHA_RSA_WITH_3DES_EDE_CBC_SHA = `enum TLS1_CK_SRP_SHA_RSA_WITH_3DES_EDE_CBC_SHA = 0x0300C01B;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_SRP_SHA_RSA_WITH_3DES_EDE_CBC_SHA); }))) {
            mixin(enumMixinStr_TLS1_CK_SRP_SHA_RSA_WITH_3DES_EDE_CBC_SHA);
        }
    }




    static if(!is(typeof(TLS1_CK_SRP_SHA_WITH_3DES_EDE_CBC_SHA))) {
        private enum enumMixinStr_TLS1_CK_SRP_SHA_WITH_3DES_EDE_CBC_SHA = `enum TLS1_CK_SRP_SHA_WITH_3DES_EDE_CBC_SHA = 0x0300C01A;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_SRP_SHA_WITH_3DES_EDE_CBC_SHA); }))) {
            mixin(enumMixinStr_TLS1_CK_SRP_SHA_WITH_3DES_EDE_CBC_SHA);
        }
    }




    static if(!is(typeof(TLS1_CK_ECDH_anon_WITH_AES_256_CBC_SHA))) {
        private enum enumMixinStr_TLS1_CK_ECDH_anon_WITH_AES_256_CBC_SHA = `enum TLS1_CK_ECDH_anon_WITH_AES_256_CBC_SHA = 0x0300C019;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_ECDH_anon_WITH_AES_256_CBC_SHA); }))) {
            mixin(enumMixinStr_TLS1_CK_ECDH_anon_WITH_AES_256_CBC_SHA);
        }
    }




    static if(!is(typeof(TLS1_CK_ECDH_anon_WITH_AES_128_CBC_SHA))) {
        private enum enumMixinStr_TLS1_CK_ECDH_anon_WITH_AES_128_CBC_SHA = `enum TLS1_CK_ECDH_anon_WITH_AES_128_CBC_SHA = 0x0300C018;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_ECDH_anon_WITH_AES_128_CBC_SHA); }))) {
            mixin(enumMixinStr_TLS1_CK_ECDH_anon_WITH_AES_128_CBC_SHA);
        }
    }




    static if(!is(typeof(TLS1_CK_ECDH_anon_WITH_DES_192_CBC3_SHA))) {
        private enum enumMixinStr_TLS1_CK_ECDH_anon_WITH_DES_192_CBC3_SHA = `enum TLS1_CK_ECDH_anon_WITH_DES_192_CBC3_SHA = 0x0300C017;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_ECDH_anon_WITH_DES_192_CBC3_SHA); }))) {
            mixin(enumMixinStr_TLS1_CK_ECDH_anon_WITH_DES_192_CBC3_SHA);
        }
    }




    static if(!is(typeof(TLS1_CK_ECDH_anon_WITH_RC4_128_SHA))) {
        private enum enumMixinStr_TLS1_CK_ECDH_anon_WITH_RC4_128_SHA = `enum TLS1_CK_ECDH_anon_WITH_RC4_128_SHA = 0x0300C016;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_ECDH_anon_WITH_RC4_128_SHA); }))) {
            mixin(enumMixinStr_TLS1_CK_ECDH_anon_WITH_RC4_128_SHA);
        }
    }




    static if(!is(typeof(TLS1_CK_ECDH_anon_WITH_NULL_SHA))) {
        private enum enumMixinStr_TLS1_CK_ECDH_anon_WITH_NULL_SHA = `enum TLS1_CK_ECDH_anon_WITH_NULL_SHA = 0x0300C015;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_ECDH_anon_WITH_NULL_SHA); }))) {
            mixin(enumMixinStr_TLS1_CK_ECDH_anon_WITH_NULL_SHA);
        }
    }




    static if(!is(typeof(TLS1_CK_ECDHE_RSA_WITH_AES_256_CBC_SHA))) {
        private enum enumMixinStr_TLS1_CK_ECDHE_RSA_WITH_AES_256_CBC_SHA = `enum TLS1_CK_ECDHE_RSA_WITH_AES_256_CBC_SHA = 0x0300C014;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_ECDHE_RSA_WITH_AES_256_CBC_SHA); }))) {
            mixin(enumMixinStr_TLS1_CK_ECDHE_RSA_WITH_AES_256_CBC_SHA);
        }
    }




    static if(!is(typeof(TLS1_CK_ECDHE_RSA_WITH_AES_128_CBC_SHA))) {
        private enum enumMixinStr_TLS1_CK_ECDHE_RSA_WITH_AES_128_CBC_SHA = `enum TLS1_CK_ECDHE_RSA_WITH_AES_128_CBC_SHA = 0x0300C013;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_ECDHE_RSA_WITH_AES_128_CBC_SHA); }))) {
            mixin(enumMixinStr_TLS1_CK_ECDHE_RSA_WITH_AES_128_CBC_SHA);
        }
    }




    static if(!is(typeof(TLS1_CK_ECDHE_RSA_WITH_DES_192_CBC3_SHA))) {
        private enum enumMixinStr_TLS1_CK_ECDHE_RSA_WITH_DES_192_CBC3_SHA = `enum TLS1_CK_ECDHE_RSA_WITH_DES_192_CBC3_SHA = 0x0300C012;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_ECDHE_RSA_WITH_DES_192_CBC3_SHA); }))) {
            mixin(enumMixinStr_TLS1_CK_ECDHE_RSA_WITH_DES_192_CBC3_SHA);
        }
    }




    static if(!is(typeof(TLS1_CK_ECDHE_RSA_WITH_RC4_128_SHA))) {
        private enum enumMixinStr_TLS1_CK_ECDHE_RSA_WITH_RC4_128_SHA = `enum TLS1_CK_ECDHE_RSA_WITH_RC4_128_SHA = 0x0300C011;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_ECDHE_RSA_WITH_RC4_128_SHA); }))) {
            mixin(enumMixinStr_TLS1_CK_ECDHE_RSA_WITH_RC4_128_SHA);
        }
    }




    static if(!is(typeof(TLS1_CK_ECDHE_RSA_WITH_NULL_SHA))) {
        private enum enumMixinStr_TLS1_CK_ECDHE_RSA_WITH_NULL_SHA = `enum TLS1_CK_ECDHE_RSA_WITH_NULL_SHA = 0x0300C010;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_ECDHE_RSA_WITH_NULL_SHA); }))) {
            mixin(enumMixinStr_TLS1_CK_ECDHE_RSA_WITH_NULL_SHA);
        }
    }




    static if(!is(typeof(TLS1_CK_ECDH_RSA_WITH_AES_256_CBC_SHA))) {
        private enum enumMixinStr_TLS1_CK_ECDH_RSA_WITH_AES_256_CBC_SHA = `enum TLS1_CK_ECDH_RSA_WITH_AES_256_CBC_SHA = 0x0300C00F;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_ECDH_RSA_WITH_AES_256_CBC_SHA); }))) {
            mixin(enumMixinStr_TLS1_CK_ECDH_RSA_WITH_AES_256_CBC_SHA);
        }
    }




    static if(!is(typeof(TLS1_CK_ECDH_RSA_WITH_AES_128_CBC_SHA))) {
        private enum enumMixinStr_TLS1_CK_ECDH_RSA_WITH_AES_128_CBC_SHA = `enum TLS1_CK_ECDH_RSA_WITH_AES_128_CBC_SHA = 0x0300C00E;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_ECDH_RSA_WITH_AES_128_CBC_SHA); }))) {
            mixin(enumMixinStr_TLS1_CK_ECDH_RSA_WITH_AES_128_CBC_SHA);
        }
    }




    static if(!is(typeof(TLS1_CK_ECDH_RSA_WITH_DES_192_CBC3_SHA))) {
        private enum enumMixinStr_TLS1_CK_ECDH_RSA_WITH_DES_192_CBC3_SHA = `enum TLS1_CK_ECDH_RSA_WITH_DES_192_CBC3_SHA = 0x0300C00D;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_ECDH_RSA_WITH_DES_192_CBC3_SHA); }))) {
            mixin(enumMixinStr_TLS1_CK_ECDH_RSA_WITH_DES_192_CBC3_SHA);
        }
    }




    static if(!is(typeof(TLS1_CK_ECDH_RSA_WITH_RC4_128_SHA))) {
        private enum enumMixinStr_TLS1_CK_ECDH_RSA_WITH_RC4_128_SHA = `enum TLS1_CK_ECDH_RSA_WITH_RC4_128_SHA = 0x0300C00C;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_ECDH_RSA_WITH_RC4_128_SHA); }))) {
            mixin(enumMixinStr_TLS1_CK_ECDH_RSA_WITH_RC4_128_SHA);
        }
    }




    static if(!is(typeof(TLS1_CK_ECDH_RSA_WITH_NULL_SHA))) {
        private enum enumMixinStr_TLS1_CK_ECDH_RSA_WITH_NULL_SHA = `enum TLS1_CK_ECDH_RSA_WITH_NULL_SHA = 0x0300C00B;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_ECDH_RSA_WITH_NULL_SHA); }))) {
            mixin(enumMixinStr_TLS1_CK_ECDH_RSA_WITH_NULL_SHA);
        }
    }




    static if(!is(typeof(TLS1_CK_ECDHE_ECDSA_WITH_AES_256_CBC_SHA))) {
        private enum enumMixinStr_TLS1_CK_ECDHE_ECDSA_WITH_AES_256_CBC_SHA = `enum TLS1_CK_ECDHE_ECDSA_WITH_AES_256_CBC_SHA = 0x0300C00A;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_ECDHE_ECDSA_WITH_AES_256_CBC_SHA); }))) {
            mixin(enumMixinStr_TLS1_CK_ECDHE_ECDSA_WITH_AES_256_CBC_SHA);
        }
    }




    static if(!is(typeof(TLS1_CK_ECDHE_ECDSA_WITH_AES_128_CBC_SHA))) {
        private enum enumMixinStr_TLS1_CK_ECDHE_ECDSA_WITH_AES_128_CBC_SHA = `enum TLS1_CK_ECDHE_ECDSA_WITH_AES_128_CBC_SHA = 0x0300C009;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_ECDHE_ECDSA_WITH_AES_128_CBC_SHA); }))) {
            mixin(enumMixinStr_TLS1_CK_ECDHE_ECDSA_WITH_AES_128_CBC_SHA);
        }
    }




    static if(!is(typeof(TLS1_CK_ECDHE_ECDSA_WITH_DES_192_CBC3_SHA))) {
        private enum enumMixinStr_TLS1_CK_ECDHE_ECDSA_WITH_DES_192_CBC3_SHA = `enum TLS1_CK_ECDHE_ECDSA_WITH_DES_192_CBC3_SHA = 0x0300C008;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_ECDHE_ECDSA_WITH_DES_192_CBC3_SHA); }))) {
            mixin(enumMixinStr_TLS1_CK_ECDHE_ECDSA_WITH_DES_192_CBC3_SHA);
        }
    }




    static if(!is(typeof(TLS1_CK_ECDHE_ECDSA_WITH_RC4_128_SHA))) {
        private enum enumMixinStr_TLS1_CK_ECDHE_ECDSA_WITH_RC4_128_SHA = `enum TLS1_CK_ECDHE_ECDSA_WITH_RC4_128_SHA = 0x0300C007;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_ECDHE_ECDSA_WITH_RC4_128_SHA); }))) {
            mixin(enumMixinStr_TLS1_CK_ECDHE_ECDSA_WITH_RC4_128_SHA);
        }
    }




    static if(!is(typeof(TLS1_CK_ECDHE_ECDSA_WITH_NULL_SHA))) {
        private enum enumMixinStr_TLS1_CK_ECDHE_ECDSA_WITH_NULL_SHA = `enum TLS1_CK_ECDHE_ECDSA_WITH_NULL_SHA = 0x0300C006;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_ECDHE_ECDSA_WITH_NULL_SHA); }))) {
            mixin(enumMixinStr_TLS1_CK_ECDHE_ECDSA_WITH_NULL_SHA);
        }
    }




    static if(!is(typeof(TLS1_CK_ECDH_ECDSA_WITH_AES_256_CBC_SHA))) {
        private enum enumMixinStr_TLS1_CK_ECDH_ECDSA_WITH_AES_256_CBC_SHA = `enum TLS1_CK_ECDH_ECDSA_WITH_AES_256_CBC_SHA = 0x0300C005;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_ECDH_ECDSA_WITH_AES_256_CBC_SHA); }))) {
            mixin(enumMixinStr_TLS1_CK_ECDH_ECDSA_WITH_AES_256_CBC_SHA);
        }
    }




    static if(!is(typeof(TLS1_CK_ECDH_ECDSA_WITH_AES_128_CBC_SHA))) {
        private enum enumMixinStr_TLS1_CK_ECDH_ECDSA_WITH_AES_128_CBC_SHA = `enum TLS1_CK_ECDH_ECDSA_WITH_AES_128_CBC_SHA = 0x0300C004;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_ECDH_ECDSA_WITH_AES_128_CBC_SHA); }))) {
            mixin(enumMixinStr_TLS1_CK_ECDH_ECDSA_WITH_AES_128_CBC_SHA);
        }
    }




    static if(!is(typeof(TLS1_CK_ECDH_ECDSA_WITH_DES_192_CBC3_SHA))) {
        private enum enumMixinStr_TLS1_CK_ECDH_ECDSA_WITH_DES_192_CBC3_SHA = `enum TLS1_CK_ECDH_ECDSA_WITH_DES_192_CBC3_SHA = 0x0300C003;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_ECDH_ECDSA_WITH_DES_192_CBC3_SHA); }))) {
            mixin(enumMixinStr_TLS1_CK_ECDH_ECDSA_WITH_DES_192_CBC3_SHA);
        }
    }




    static if(!is(typeof(TLS1_CK_ECDH_ECDSA_WITH_RC4_128_SHA))) {
        private enum enumMixinStr_TLS1_CK_ECDH_ECDSA_WITH_RC4_128_SHA = `enum TLS1_CK_ECDH_ECDSA_WITH_RC4_128_SHA = 0x0300C002;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_ECDH_ECDSA_WITH_RC4_128_SHA); }))) {
            mixin(enumMixinStr_TLS1_CK_ECDH_ECDSA_WITH_RC4_128_SHA);
        }
    }




    static if(!is(typeof(TLS1_CK_ECDH_ECDSA_WITH_NULL_SHA))) {
        private enum enumMixinStr_TLS1_CK_ECDH_ECDSA_WITH_NULL_SHA = `enum TLS1_CK_ECDH_ECDSA_WITH_NULL_SHA = 0x0300C001;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_ECDH_ECDSA_WITH_NULL_SHA); }))) {
            mixin(enumMixinStr_TLS1_CK_ECDH_ECDSA_WITH_NULL_SHA);
        }
    }




    static if(!is(typeof(TLS1_CK_ADH_WITH_CAMELLIA_256_CBC_SHA256))) {
        private enum enumMixinStr_TLS1_CK_ADH_WITH_CAMELLIA_256_CBC_SHA256 = `enum TLS1_CK_ADH_WITH_CAMELLIA_256_CBC_SHA256 = 0x030000C5;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_ADH_WITH_CAMELLIA_256_CBC_SHA256); }))) {
            mixin(enumMixinStr_TLS1_CK_ADH_WITH_CAMELLIA_256_CBC_SHA256);
        }
    }




    static if(!is(typeof(TLS1_CK_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256))) {
        private enum enumMixinStr_TLS1_CK_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256 = `enum TLS1_CK_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256 = 0x030000C4;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256); }))) {
            mixin(enumMixinStr_TLS1_CK_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256);
        }
    }




    static if(!is(typeof(TLS1_CK_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA256))) {
        private enum enumMixinStr_TLS1_CK_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA256 = `enum TLS1_CK_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA256 = 0x030000C3;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA256); }))) {
            mixin(enumMixinStr_TLS1_CK_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA256);
        }
    }




    static if(!is(typeof(TLS1_CK_DH_RSA_WITH_CAMELLIA_256_CBC_SHA256))) {
        private enum enumMixinStr_TLS1_CK_DH_RSA_WITH_CAMELLIA_256_CBC_SHA256 = `enum TLS1_CK_DH_RSA_WITH_CAMELLIA_256_CBC_SHA256 = 0x030000C2;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_DH_RSA_WITH_CAMELLIA_256_CBC_SHA256); }))) {
            mixin(enumMixinStr_TLS1_CK_DH_RSA_WITH_CAMELLIA_256_CBC_SHA256);
        }
    }




    static if(!is(typeof(TLS1_CK_DH_DSS_WITH_CAMELLIA_256_CBC_SHA256))) {
        private enum enumMixinStr_TLS1_CK_DH_DSS_WITH_CAMELLIA_256_CBC_SHA256 = `enum TLS1_CK_DH_DSS_WITH_CAMELLIA_256_CBC_SHA256 = 0x030000C1;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_DH_DSS_WITH_CAMELLIA_256_CBC_SHA256); }))) {
            mixin(enumMixinStr_TLS1_CK_DH_DSS_WITH_CAMELLIA_256_CBC_SHA256);
        }
    }




    static if(!is(typeof(TLS1_CK_RSA_WITH_CAMELLIA_256_CBC_SHA256))) {
        private enum enumMixinStr_TLS1_CK_RSA_WITH_CAMELLIA_256_CBC_SHA256 = `enum TLS1_CK_RSA_WITH_CAMELLIA_256_CBC_SHA256 = 0x030000C0;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_RSA_WITH_CAMELLIA_256_CBC_SHA256); }))) {
            mixin(enumMixinStr_TLS1_CK_RSA_WITH_CAMELLIA_256_CBC_SHA256);
        }
    }




    static if(!is(typeof(TLS1_CK_ADH_WITH_CAMELLIA_128_CBC_SHA256))) {
        private enum enumMixinStr_TLS1_CK_ADH_WITH_CAMELLIA_128_CBC_SHA256 = `enum TLS1_CK_ADH_WITH_CAMELLIA_128_CBC_SHA256 = 0x030000BF;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_ADH_WITH_CAMELLIA_128_CBC_SHA256); }))) {
            mixin(enumMixinStr_TLS1_CK_ADH_WITH_CAMELLIA_128_CBC_SHA256);
        }
    }




    static if(!is(typeof(TLS1_CK_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256))) {
        private enum enumMixinStr_TLS1_CK_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256 = `enum TLS1_CK_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256 = 0x030000BE;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256); }))) {
            mixin(enumMixinStr_TLS1_CK_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256);
        }
    }




    static if(!is(typeof(TLS1_CK_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA256))) {
        private enum enumMixinStr_TLS1_CK_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA256 = `enum TLS1_CK_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA256 = 0x030000BD;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA256); }))) {
            mixin(enumMixinStr_TLS1_CK_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA256);
        }
    }




    static if(!is(typeof(TLS1_CK_DH_RSA_WITH_CAMELLIA_128_CBC_SHA256))) {
        private enum enumMixinStr_TLS1_CK_DH_RSA_WITH_CAMELLIA_128_CBC_SHA256 = `enum TLS1_CK_DH_RSA_WITH_CAMELLIA_128_CBC_SHA256 = 0x030000BC;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_DH_RSA_WITH_CAMELLIA_128_CBC_SHA256); }))) {
            mixin(enumMixinStr_TLS1_CK_DH_RSA_WITH_CAMELLIA_128_CBC_SHA256);
        }
    }




    static if(!is(typeof(TLS1_CK_DH_DSS_WITH_CAMELLIA_128_CBC_SHA256))) {
        private enum enumMixinStr_TLS1_CK_DH_DSS_WITH_CAMELLIA_128_CBC_SHA256 = `enum TLS1_CK_DH_DSS_WITH_CAMELLIA_128_CBC_SHA256 = 0x030000BB;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_DH_DSS_WITH_CAMELLIA_128_CBC_SHA256); }))) {
            mixin(enumMixinStr_TLS1_CK_DH_DSS_WITH_CAMELLIA_128_CBC_SHA256);
        }
    }




    static if(!is(typeof(TLS1_CK_RSA_WITH_CAMELLIA_128_CBC_SHA256))) {
        private enum enumMixinStr_TLS1_CK_RSA_WITH_CAMELLIA_128_CBC_SHA256 = `enum TLS1_CK_RSA_WITH_CAMELLIA_128_CBC_SHA256 = 0x030000BA;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_RSA_WITH_CAMELLIA_128_CBC_SHA256); }))) {
            mixin(enumMixinStr_TLS1_CK_RSA_WITH_CAMELLIA_128_CBC_SHA256);
        }
    }




    static if(!is(typeof(TLS1_CK_ECDHE_ECDSA_WITH_AES_256_CCM_8))) {
        private enum enumMixinStr_TLS1_CK_ECDHE_ECDSA_WITH_AES_256_CCM_8 = `enum TLS1_CK_ECDHE_ECDSA_WITH_AES_256_CCM_8 = 0x0300C0AF;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_ECDHE_ECDSA_WITH_AES_256_CCM_8); }))) {
            mixin(enumMixinStr_TLS1_CK_ECDHE_ECDSA_WITH_AES_256_CCM_8);
        }
    }




    static if(!is(typeof(TLS1_CK_ECDHE_ECDSA_WITH_AES_128_CCM_8))) {
        private enum enumMixinStr_TLS1_CK_ECDHE_ECDSA_WITH_AES_128_CCM_8 = `enum TLS1_CK_ECDHE_ECDSA_WITH_AES_128_CCM_8 = 0x0300C0AE;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_ECDHE_ECDSA_WITH_AES_128_CCM_8); }))) {
            mixin(enumMixinStr_TLS1_CK_ECDHE_ECDSA_WITH_AES_128_CCM_8);
        }
    }




    static if(!is(typeof(TLS1_CK_ECDHE_ECDSA_WITH_AES_256_CCM))) {
        private enum enumMixinStr_TLS1_CK_ECDHE_ECDSA_WITH_AES_256_CCM = `enum TLS1_CK_ECDHE_ECDSA_WITH_AES_256_CCM = 0x0300C0AD;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_ECDHE_ECDSA_WITH_AES_256_CCM); }))) {
            mixin(enumMixinStr_TLS1_CK_ECDHE_ECDSA_WITH_AES_256_CCM);
        }
    }




    static if(!is(typeof(TLS1_CK_ECDHE_ECDSA_WITH_AES_128_CCM))) {
        private enum enumMixinStr_TLS1_CK_ECDHE_ECDSA_WITH_AES_128_CCM = `enum TLS1_CK_ECDHE_ECDSA_WITH_AES_128_CCM = 0x0300C0AC;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_ECDHE_ECDSA_WITH_AES_128_CCM); }))) {
            mixin(enumMixinStr_TLS1_CK_ECDHE_ECDSA_WITH_AES_128_CCM);
        }
    }




    static if(!is(typeof(TLS1_CK_DHE_PSK_WITH_AES_256_CCM_8))) {
        private enum enumMixinStr_TLS1_CK_DHE_PSK_WITH_AES_256_CCM_8 = `enum TLS1_CK_DHE_PSK_WITH_AES_256_CCM_8 = 0x0300C0AB;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_DHE_PSK_WITH_AES_256_CCM_8); }))) {
            mixin(enumMixinStr_TLS1_CK_DHE_PSK_WITH_AES_256_CCM_8);
        }
    }




    static if(!is(typeof(TLS1_CK_DHE_PSK_WITH_AES_128_CCM_8))) {
        private enum enumMixinStr_TLS1_CK_DHE_PSK_WITH_AES_128_CCM_8 = `enum TLS1_CK_DHE_PSK_WITH_AES_128_CCM_8 = 0x0300C0AA;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_DHE_PSK_WITH_AES_128_CCM_8); }))) {
            mixin(enumMixinStr_TLS1_CK_DHE_PSK_WITH_AES_128_CCM_8);
        }
    }




    static if(!is(typeof(TLS1_CK_PSK_WITH_AES_256_CCM_8))) {
        private enum enumMixinStr_TLS1_CK_PSK_WITH_AES_256_CCM_8 = `enum TLS1_CK_PSK_WITH_AES_256_CCM_8 = 0x0300C0A9;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_PSK_WITH_AES_256_CCM_8); }))) {
            mixin(enumMixinStr_TLS1_CK_PSK_WITH_AES_256_CCM_8);
        }
    }




    static if(!is(typeof(TLS1_CK_PSK_WITH_AES_128_CCM_8))) {
        private enum enumMixinStr_TLS1_CK_PSK_WITH_AES_128_CCM_8 = `enum TLS1_CK_PSK_WITH_AES_128_CCM_8 = 0x0300C0A8;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_PSK_WITH_AES_128_CCM_8); }))) {
            mixin(enumMixinStr_TLS1_CK_PSK_WITH_AES_128_CCM_8);
        }
    }




    static if(!is(typeof(TLS1_CK_DHE_PSK_WITH_AES_256_CCM))) {
        private enum enumMixinStr_TLS1_CK_DHE_PSK_WITH_AES_256_CCM = `enum TLS1_CK_DHE_PSK_WITH_AES_256_CCM = 0x0300C0A7;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_DHE_PSK_WITH_AES_256_CCM); }))) {
            mixin(enumMixinStr_TLS1_CK_DHE_PSK_WITH_AES_256_CCM);
        }
    }




    static if(!is(typeof(TLS1_CK_DHE_PSK_WITH_AES_128_CCM))) {
        private enum enumMixinStr_TLS1_CK_DHE_PSK_WITH_AES_128_CCM = `enum TLS1_CK_DHE_PSK_WITH_AES_128_CCM = 0x0300C0A6;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_DHE_PSK_WITH_AES_128_CCM); }))) {
            mixin(enumMixinStr_TLS1_CK_DHE_PSK_WITH_AES_128_CCM);
        }
    }




    static if(!is(typeof(TLS1_CK_PSK_WITH_AES_256_CCM))) {
        private enum enumMixinStr_TLS1_CK_PSK_WITH_AES_256_CCM = `enum TLS1_CK_PSK_WITH_AES_256_CCM = 0x0300C0A5;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_PSK_WITH_AES_256_CCM); }))) {
            mixin(enumMixinStr_TLS1_CK_PSK_WITH_AES_256_CCM);
        }
    }




    static if(!is(typeof(TLS1_CK_PSK_WITH_AES_128_CCM))) {
        private enum enumMixinStr_TLS1_CK_PSK_WITH_AES_128_CCM = `enum TLS1_CK_PSK_WITH_AES_128_CCM = 0x0300C0A4;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_PSK_WITH_AES_128_CCM); }))) {
            mixin(enumMixinStr_TLS1_CK_PSK_WITH_AES_128_CCM);
        }
    }




    static if(!is(typeof(TLS1_CK_DHE_RSA_WITH_AES_256_CCM_8))) {
        private enum enumMixinStr_TLS1_CK_DHE_RSA_WITH_AES_256_CCM_8 = `enum TLS1_CK_DHE_RSA_WITH_AES_256_CCM_8 = 0x0300C0A3;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_DHE_RSA_WITH_AES_256_CCM_8); }))) {
            mixin(enumMixinStr_TLS1_CK_DHE_RSA_WITH_AES_256_CCM_8);
        }
    }




    static if(!is(typeof(TLS1_CK_DHE_RSA_WITH_AES_128_CCM_8))) {
        private enum enumMixinStr_TLS1_CK_DHE_RSA_WITH_AES_128_CCM_8 = `enum TLS1_CK_DHE_RSA_WITH_AES_128_CCM_8 = 0x0300C0A2;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_DHE_RSA_WITH_AES_128_CCM_8); }))) {
            mixin(enumMixinStr_TLS1_CK_DHE_RSA_WITH_AES_128_CCM_8);
        }
    }




    static if(!is(typeof(TLS1_CK_RSA_WITH_AES_256_CCM_8))) {
        private enum enumMixinStr_TLS1_CK_RSA_WITH_AES_256_CCM_8 = `enum TLS1_CK_RSA_WITH_AES_256_CCM_8 = 0x0300C0A1;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_RSA_WITH_AES_256_CCM_8); }))) {
            mixin(enumMixinStr_TLS1_CK_RSA_WITH_AES_256_CCM_8);
        }
    }




    static if(!is(typeof(TLS1_CK_RSA_WITH_AES_128_CCM_8))) {
        private enum enumMixinStr_TLS1_CK_RSA_WITH_AES_128_CCM_8 = `enum TLS1_CK_RSA_WITH_AES_128_CCM_8 = 0x0300C0A0;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_RSA_WITH_AES_128_CCM_8); }))) {
            mixin(enumMixinStr_TLS1_CK_RSA_WITH_AES_128_CCM_8);
        }
    }




    static if(!is(typeof(TLS1_CK_DHE_RSA_WITH_AES_256_CCM))) {
        private enum enumMixinStr_TLS1_CK_DHE_RSA_WITH_AES_256_CCM = `enum TLS1_CK_DHE_RSA_WITH_AES_256_CCM = 0x0300C09F;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_DHE_RSA_WITH_AES_256_CCM); }))) {
            mixin(enumMixinStr_TLS1_CK_DHE_RSA_WITH_AES_256_CCM);
        }
    }




    static if(!is(typeof(TLS1_CK_DHE_RSA_WITH_AES_128_CCM))) {
        private enum enumMixinStr_TLS1_CK_DHE_RSA_WITH_AES_128_CCM = `enum TLS1_CK_DHE_RSA_WITH_AES_128_CCM = 0x0300C09E;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_DHE_RSA_WITH_AES_128_CCM); }))) {
            mixin(enumMixinStr_TLS1_CK_DHE_RSA_WITH_AES_128_CCM);
        }
    }




    static if(!is(typeof(TLS1_CK_RSA_WITH_AES_256_CCM))) {
        private enum enumMixinStr_TLS1_CK_RSA_WITH_AES_256_CCM = `enum TLS1_CK_RSA_WITH_AES_256_CCM = 0x0300C09D;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_RSA_WITH_AES_256_CCM); }))) {
            mixin(enumMixinStr_TLS1_CK_RSA_WITH_AES_256_CCM);
        }
    }






    static if(!is(typeof(TLS1_CK_RSA_WITH_AES_128_CCM))) {
        private enum enumMixinStr_TLS1_CK_RSA_WITH_AES_128_CCM = `enum TLS1_CK_RSA_WITH_AES_128_CCM = 0x0300C09C;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_RSA_WITH_AES_128_CCM); }))) {
            mixin(enumMixinStr_TLS1_CK_RSA_WITH_AES_128_CCM);
        }
    }




    static if(!is(typeof(TLS1_CK_ADH_WITH_AES_256_GCM_SHA384))) {
        private enum enumMixinStr_TLS1_CK_ADH_WITH_AES_256_GCM_SHA384 = `enum TLS1_CK_ADH_WITH_AES_256_GCM_SHA384 = 0x030000A7;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_ADH_WITH_AES_256_GCM_SHA384); }))) {
            mixin(enumMixinStr_TLS1_CK_ADH_WITH_AES_256_GCM_SHA384);
        }
    }




    static if(!is(typeof(PKCS7_F_DO_PKCS7_SIGNED_ATTRIB))) {
        private enum enumMixinStr_PKCS7_F_DO_PKCS7_SIGNED_ATTRIB = `enum PKCS7_F_DO_PKCS7_SIGNED_ATTRIB = 136;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS7_F_DO_PKCS7_SIGNED_ATTRIB); }))) {
            mixin(enumMixinStr_PKCS7_F_DO_PKCS7_SIGNED_ATTRIB);
        }
    }




    static if(!is(typeof(PKCS7_F_PKCS7_ADD0_ATTRIB_SIGNING_TIME))) {
        private enum enumMixinStr_PKCS7_F_PKCS7_ADD0_ATTRIB_SIGNING_TIME = `enum PKCS7_F_PKCS7_ADD0_ATTRIB_SIGNING_TIME = 135;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS7_F_PKCS7_ADD0_ATTRIB_SIGNING_TIME); }))) {
            mixin(enumMixinStr_PKCS7_F_PKCS7_ADD0_ATTRIB_SIGNING_TIME);
        }
    }




    static if(!is(typeof(PKCS7_F_PKCS7_ADD_ATTRIB_SMIMECAP))) {
        private enum enumMixinStr_PKCS7_F_PKCS7_ADD_ATTRIB_SMIMECAP = `enum PKCS7_F_PKCS7_ADD_ATTRIB_SMIMECAP = 118;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS7_F_PKCS7_ADD_ATTRIB_SMIMECAP); }))) {
            mixin(enumMixinStr_PKCS7_F_PKCS7_ADD_ATTRIB_SMIMECAP);
        }
    }




    static if(!is(typeof(PKCS7_F_PKCS7_ADD_CERTIFICATE))) {
        private enum enumMixinStr_PKCS7_F_PKCS7_ADD_CERTIFICATE = `enum PKCS7_F_PKCS7_ADD_CERTIFICATE = 100;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS7_F_PKCS7_ADD_CERTIFICATE); }))) {
            mixin(enumMixinStr_PKCS7_F_PKCS7_ADD_CERTIFICATE);
        }
    }




    static if(!is(typeof(PKCS7_F_PKCS7_ADD_CRL))) {
        private enum enumMixinStr_PKCS7_F_PKCS7_ADD_CRL = `enum PKCS7_F_PKCS7_ADD_CRL = 101;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS7_F_PKCS7_ADD_CRL); }))) {
            mixin(enumMixinStr_PKCS7_F_PKCS7_ADD_CRL);
        }
    }




    static if(!is(typeof(PKCS7_F_PKCS7_ADD_RECIPIENT_INFO))) {
        private enum enumMixinStr_PKCS7_F_PKCS7_ADD_RECIPIENT_INFO = `enum PKCS7_F_PKCS7_ADD_RECIPIENT_INFO = 102;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS7_F_PKCS7_ADD_RECIPIENT_INFO); }))) {
            mixin(enumMixinStr_PKCS7_F_PKCS7_ADD_RECIPIENT_INFO);
        }
    }




    static if(!is(typeof(PKCS7_F_PKCS7_ADD_SIGNATURE))) {
        private enum enumMixinStr_PKCS7_F_PKCS7_ADD_SIGNATURE = `enum PKCS7_F_PKCS7_ADD_SIGNATURE = 131;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS7_F_PKCS7_ADD_SIGNATURE); }))) {
            mixin(enumMixinStr_PKCS7_F_PKCS7_ADD_SIGNATURE);
        }
    }




    static if(!is(typeof(PKCS7_F_PKCS7_ADD_SIGNER))) {
        private enum enumMixinStr_PKCS7_F_PKCS7_ADD_SIGNER = `enum PKCS7_F_PKCS7_ADD_SIGNER = 103;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS7_F_PKCS7_ADD_SIGNER); }))) {
            mixin(enumMixinStr_PKCS7_F_PKCS7_ADD_SIGNER);
        }
    }




    static if(!is(typeof(PKCS7_F_PKCS7_BIO_ADD_DIGEST))) {
        private enum enumMixinStr_PKCS7_F_PKCS7_BIO_ADD_DIGEST = `enum PKCS7_F_PKCS7_BIO_ADD_DIGEST = 125;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS7_F_PKCS7_BIO_ADD_DIGEST); }))) {
            mixin(enumMixinStr_PKCS7_F_PKCS7_BIO_ADD_DIGEST);
        }
    }




    static if(!is(typeof(PKCS7_F_PKCS7_COPY_EXISTING_DIGEST))) {
        private enum enumMixinStr_PKCS7_F_PKCS7_COPY_EXISTING_DIGEST = `enum PKCS7_F_PKCS7_COPY_EXISTING_DIGEST = 138;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS7_F_PKCS7_COPY_EXISTING_DIGEST); }))) {
            mixin(enumMixinStr_PKCS7_F_PKCS7_COPY_EXISTING_DIGEST);
        }
    }




    static if(!is(typeof(PKCS7_F_PKCS7_CTRL))) {
        private enum enumMixinStr_PKCS7_F_PKCS7_CTRL = `enum PKCS7_F_PKCS7_CTRL = 104;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS7_F_PKCS7_CTRL); }))) {
            mixin(enumMixinStr_PKCS7_F_PKCS7_CTRL);
        }
    }




    static if(!is(typeof(PKCS7_F_PKCS7_DATADECODE))) {
        private enum enumMixinStr_PKCS7_F_PKCS7_DATADECODE = `enum PKCS7_F_PKCS7_DATADECODE = 112;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS7_F_PKCS7_DATADECODE); }))) {
            mixin(enumMixinStr_PKCS7_F_PKCS7_DATADECODE);
        }
    }




    static if(!is(typeof(PKCS7_F_PKCS7_DATAFINAL))) {
        private enum enumMixinStr_PKCS7_F_PKCS7_DATAFINAL = `enum PKCS7_F_PKCS7_DATAFINAL = 128;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS7_F_PKCS7_DATAFINAL); }))) {
            mixin(enumMixinStr_PKCS7_F_PKCS7_DATAFINAL);
        }
    }




    static if(!is(typeof(PKCS7_F_PKCS7_DATAINIT))) {
        private enum enumMixinStr_PKCS7_F_PKCS7_DATAINIT = `enum PKCS7_F_PKCS7_DATAINIT = 105;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS7_F_PKCS7_DATAINIT); }))) {
            mixin(enumMixinStr_PKCS7_F_PKCS7_DATAINIT);
        }
    }




    static if(!is(typeof(PKCS7_F_PKCS7_DATAVERIFY))) {
        private enum enumMixinStr_PKCS7_F_PKCS7_DATAVERIFY = `enum PKCS7_F_PKCS7_DATAVERIFY = 107;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS7_F_PKCS7_DATAVERIFY); }))) {
            mixin(enumMixinStr_PKCS7_F_PKCS7_DATAVERIFY);
        }
    }




    static if(!is(typeof(PKCS7_F_PKCS7_DECRYPT))) {
        private enum enumMixinStr_PKCS7_F_PKCS7_DECRYPT = `enum PKCS7_F_PKCS7_DECRYPT = 114;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS7_F_PKCS7_DECRYPT); }))) {
            mixin(enumMixinStr_PKCS7_F_PKCS7_DECRYPT);
        }
    }




    static if(!is(typeof(PKCS7_F_PKCS7_DECRYPT_RINFO))) {
        private enum enumMixinStr_PKCS7_F_PKCS7_DECRYPT_RINFO = `enum PKCS7_F_PKCS7_DECRYPT_RINFO = 133;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS7_F_PKCS7_DECRYPT_RINFO); }))) {
            mixin(enumMixinStr_PKCS7_F_PKCS7_DECRYPT_RINFO);
        }
    }




    static if(!is(typeof(PKCS7_F_PKCS7_ENCODE_RINFO))) {
        private enum enumMixinStr_PKCS7_F_PKCS7_ENCODE_RINFO = `enum PKCS7_F_PKCS7_ENCODE_RINFO = 132;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS7_F_PKCS7_ENCODE_RINFO); }))) {
            mixin(enumMixinStr_PKCS7_F_PKCS7_ENCODE_RINFO);
        }
    }




    static if(!is(typeof(PKCS7_F_PKCS7_ENCRYPT))) {
        private enum enumMixinStr_PKCS7_F_PKCS7_ENCRYPT = `enum PKCS7_F_PKCS7_ENCRYPT = 115;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS7_F_PKCS7_ENCRYPT); }))) {
            mixin(enumMixinStr_PKCS7_F_PKCS7_ENCRYPT);
        }
    }




    static if(!is(typeof(PKCS7_F_PKCS7_FINAL))) {
        private enum enumMixinStr_PKCS7_F_PKCS7_FINAL = `enum PKCS7_F_PKCS7_FINAL = 134;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS7_F_PKCS7_FINAL); }))) {
            mixin(enumMixinStr_PKCS7_F_PKCS7_FINAL);
        }
    }




    static if(!is(typeof(PKCS7_F_PKCS7_FIND_DIGEST))) {
        private enum enumMixinStr_PKCS7_F_PKCS7_FIND_DIGEST = `enum PKCS7_F_PKCS7_FIND_DIGEST = 127;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS7_F_PKCS7_FIND_DIGEST); }))) {
            mixin(enumMixinStr_PKCS7_F_PKCS7_FIND_DIGEST);
        }
    }




    static if(!is(typeof(PKCS7_F_PKCS7_GET0_SIGNERS))) {
        private enum enumMixinStr_PKCS7_F_PKCS7_GET0_SIGNERS = `enum PKCS7_F_PKCS7_GET0_SIGNERS = 124;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS7_F_PKCS7_GET0_SIGNERS); }))) {
            mixin(enumMixinStr_PKCS7_F_PKCS7_GET0_SIGNERS);
        }
    }




    static if(!is(typeof(PKCS7_F_PKCS7_RECIP_INFO_SET))) {
        private enum enumMixinStr_PKCS7_F_PKCS7_RECIP_INFO_SET = `enum PKCS7_F_PKCS7_RECIP_INFO_SET = 130;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS7_F_PKCS7_RECIP_INFO_SET); }))) {
            mixin(enumMixinStr_PKCS7_F_PKCS7_RECIP_INFO_SET);
        }
    }




    static if(!is(typeof(PKCS7_F_PKCS7_SET_CIPHER))) {
        private enum enumMixinStr_PKCS7_F_PKCS7_SET_CIPHER = `enum PKCS7_F_PKCS7_SET_CIPHER = 108;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS7_F_PKCS7_SET_CIPHER); }))) {
            mixin(enumMixinStr_PKCS7_F_PKCS7_SET_CIPHER);
        }
    }




    static if(!is(typeof(PKCS7_F_PKCS7_SET_CONTENT))) {
        private enum enumMixinStr_PKCS7_F_PKCS7_SET_CONTENT = `enum PKCS7_F_PKCS7_SET_CONTENT = 109;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS7_F_PKCS7_SET_CONTENT); }))) {
            mixin(enumMixinStr_PKCS7_F_PKCS7_SET_CONTENT);
        }
    }




    static if(!is(typeof(PKCS7_F_PKCS7_SET_DIGEST))) {
        private enum enumMixinStr_PKCS7_F_PKCS7_SET_DIGEST = `enum PKCS7_F_PKCS7_SET_DIGEST = 126;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS7_F_PKCS7_SET_DIGEST); }))) {
            mixin(enumMixinStr_PKCS7_F_PKCS7_SET_DIGEST);
        }
    }




    static if(!is(typeof(PKCS7_F_PKCS7_SET_TYPE))) {
        private enum enumMixinStr_PKCS7_F_PKCS7_SET_TYPE = `enum PKCS7_F_PKCS7_SET_TYPE = 110;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS7_F_PKCS7_SET_TYPE); }))) {
            mixin(enumMixinStr_PKCS7_F_PKCS7_SET_TYPE);
        }
    }




    static if(!is(typeof(PKCS7_F_PKCS7_SIGN))) {
        private enum enumMixinStr_PKCS7_F_PKCS7_SIGN = `enum PKCS7_F_PKCS7_SIGN = 116;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS7_F_PKCS7_SIGN); }))) {
            mixin(enumMixinStr_PKCS7_F_PKCS7_SIGN);
        }
    }




    static if(!is(typeof(PKCS7_F_PKCS7_SIGNATUREVERIFY))) {
        private enum enumMixinStr_PKCS7_F_PKCS7_SIGNATUREVERIFY = `enum PKCS7_F_PKCS7_SIGNATUREVERIFY = 113;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS7_F_PKCS7_SIGNATUREVERIFY); }))) {
            mixin(enumMixinStr_PKCS7_F_PKCS7_SIGNATUREVERIFY);
        }
    }




    static if(!is(typeof(PKCS7_F_PKCS7_SIGNER_INFO_SET))) {
        private enum enumMixinStr_PKCS7_F_PKCS7_SIGNER_INFO_SET = `enum PKCS7_F_PKCS7_SIGNER_INFO_SET = 129;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS7_F_PKCS7_SIGNER_INFO_SET); }))) {
            mixin(enumMixinStr_PKCS7_F_PKCS7_SIGNER_INFO_SET);
        }
    }




    static if(!is(typeof(PKCS7_F_PKCS7_SIGNER_INFO_SIGN))) {
        private enum enumMixinStr_PKCS7_F_PKCS7_SIGNER_INFO_SIGN = `enum PKCS7_F_PKCS7_SIGNER_INFO_SIGN = 139;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS7_F_PKCS7_SIGNER_INFO_SIGN); }))) {
            mixin(enumMixinStr_PKCS7_F_PKCS7_SIGNER_INFO_SIGN);
        }
    }




    static if(!is(typeof(PKCS7_F_PKCS7_SIGN_ADD_SIGNER))) {
        private enum enumMixinStr_PKCS7_F_PKCS7_SIGN_ADD_SIGNER = `enum PKCS7_F_PKCS7_SIGN_ADD_SIGNER = 137;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS7_F_PKCS7_SIGN_ADD_SIGNER); }))) {
            mixin(enumMixinStr_PKCS7_F_PKCS7_SIGN_ADD_SIGNER);
        }
    }




    static if(!is(typeof(PKCS7_F_PKCS7_SIMPLE_SMIMECAP))) {
        private enum enumMixinStr_PKCS7_F_PKCS7_SIMPLE_SMIMECAP = `enum PKCS7_F_PKCS7_SIMPLE_SMIMECAP = 119;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS7_F_PKCS7_SIMPLE_SMIMECAP); }))) {
            mixin(enumMixinStr_PKCS7_F_PKCS7_SIMPLE_SMIMECAP);
        }
    }




    static if(!is(typeof(PKCS7_F_PKCS7_VERIFY))) {
        private enum enumMixinStr_PKCS7_F_PKCS7_VERIFY = `enum PKCS7_F_PKCS7_VERIFY = 117;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS7_F_PKCS7_VERIFY); }))) {
            mixin(enumMixinStr_PKCS7_F_PKCS7_VERIFY);
        }
    }




    static if(!is(typeof(PKCS7_R_CERTIFICATE_VERIFY_ERROR))) {
        private enum enumMixinStr_PKCS7_R_CERTIFICATE_VERIFY_ERROR = `enum PKCS7_R_CERTIFICATE_VERIFY_ERROR = 117;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS7_R_CERTIFICATE_VERIFY_ERROR); }))) {
            mixin(enumMixinStr_PKCS7_R_CERTIFICATE_VERIFY_ERROR);
        }
    }




    static if(!is(typeof(PKCS7_R_CIPHER_HAS_NO_OBJECT_IDENTIFIER))) {
        private enum enumMixinStr_PKCS7_R_CIPHER_HAS_NO_OBJECT_IDENTIFIER = `enum PKCS7_R_CIPHER_HAS_NO_OBJECT_IDENTIFIER = 144;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS7_R_CIPHER_HAS_NO_OBJECT_IDENTIFIER); }))) {
            mixin(enumMixinStr_PKCS7_R_CIPHER_HAS_NO_OBJECT_IDENTIFIER);
        }
    }




    static if(!is(typeof(PKCS7_R_CIPHER_NOT_INITIALIZED))) {
        private enum enumMixinStr_PKCS7_R_CIPHER_NOT_INITIALIZED = `enum PKCS7_R_CIPHER_NOT_INITIALIZED = 116;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS7_R_CIPHER_NOT_INITIALIZED); }))) {
            mixin(enumMixinStr_PKCS7_R_CIPHER_NOT_INITIALIZED);
        }
    }




    static if(!is(typeof(PKCS7_R_CONTENT_AND_DATA_PRESENT))) {
        private enum enumMixinStr_PKCS7_R_CONTENT_AND_DATA_PRESENT = `enum PKCS7_R_CONTENT_AND_DATA_PRESENT = 118;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS7_R_CONTENT_AND_DATA_PRESENT); }))) {
            mixin(enumMixinStr_PKCS7_R_CONTENT_AND_DATA_PRESENT);
        }
    }




    static if(!is(typeof(PKCS7_R_CTRL_ERROR))) {
        private enum enumMixinStr_PKCS7_R_CTRL_ERROR = `enum PKCS7_R_CTRL_ERROR = 152;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS7_R_CTRL_ERROR); }))) {
            mixin(enumMixinStr_PKCS7_R_CTRL_ERROR);
        }
    }




    static if(!is(typeof(PKCS7_R_DECRYPT_ERROR))) {
        private enum enumMixinStr_PKCS7_R_DECRYPT_ERROR = `enum PKCS7_R_DECRYPT_ERROR = 119;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS7_R_DECRYPT_ERROR); }))) {
            mixin(enumMixinStr_PKCS7_R_DECRYPT_ERROR);
        }
    }




    static if(!is(typeof(PKCS7_R_DIGEST_FAILURE))) {
        private enum enumMixinStr_PKCS7_R_DIGEST_FAILURE = `enum PKCS7_R_DIGEST_FAILURE = 101;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS7_R_DIGEST_FAILURE); }))) {
            mixin(enumMixinStr_PKCS7_R_DIGEST_FAILURE);
        }
    }




    static if(!is(typeof(PKCS7_R_ENCRYPTION_CTRL_FAILURE))) {
        private enum enumMixinStr_PKCS7_R_ENCRYPTION_CTRL_FAILURE = `enum PKCS7_R_ENCRYPTION_CTRL_FAILURE = 149;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS7_R_ENCRYPTION_CTRL_FAILURE); }))) {
            mixin(enumMixinStr_PKCS7_R_ENCRYPTION_CTRL_FAILURE);
        }
    }




    static if(!is(typeof(PKCS7_R_ENCRYPTION_NOT_SUPPORTED_FOR_THIS_KEY_TYPE))) {
        private enum enumMixinStr_PKCS7_R_ENCRYPTION_NOT_SUPPORTED_FOR_THIS_KEY_TYPE = `enum PKCS7_R_ENCRYPTION_NOT_SUPPORTED_FOR_THIS_KEY_TYPE = 150;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS7_R_ENCRYPTION_NOT_SUPPORTED_FOR_THIS_KEY_TYPE); }))) {
            mixin(enumMixinStr_PKCS7_R_ENCRYPTION_NOT_SUPPORTED_FOR_THIS_KEY_TYPE);
        }
    }




    static if(!is(typeof(PKCS7_R_ERROR_ADDING_RECIPIENT))) {
        private enum enumMixinStr_PKCS7_R_ERROR_ADDING_RECIPIENT = `enum PKCS7_R_ERROR_ADDING_RECIPIENT = 120;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS7_R_ERROR_ADDING_RECIPIENT); }))) {
            mixin(enumMixinStr_PKCS7_R_ERROR_ADDING_RECIPIENT);
        }
    }




    static if(!is(typeof(PKCS7_R_ERROR_SETTING_CIPHER))) {
        private enum enumMixinStr_PKCS7_R_ERROR_SETTING_CIPHER = `enum PKCS7_R_ERROR_SETTING_CIPHER = 121;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS7_R_ERROR_SETTING_CIPHER); }))) {
            mixin(enumMixinStr_PKCS7_R_ERROR_SETTING_CIPHER);
        }
    }




    static if(!is(typeof(PKCS7_R_INVALID_NULL_POINTER))) {
        private enum enumMixinStr_PKCS7_R_INVALID_NULL_POINTER = `enum PKCS7_R_INVALID_NULL_POINTER = 143;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS7_R_INVALID_NULL_POINTER); }))) {
            mixin(enumMixinStr_PKCS7_R_INVALID_NULL_POINTER);
        }
    }




    static if(!is(typeof(PKCS7_R_INVALID_SIGNED_DATA_TYPE))) {
        private enum enumMixinStr_PKCS7_R_INVALID_SIGNED_DATA_TYPE = `enum PKCS7_R_INVALID_SIGNED_DATA_TYPE = 155;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS7_R_INVALID_SIGNED_DATA_TYPE); }))) {
            mixin(enumMixinStr_PKCS7_R_INVALID_SIGNED_DATA_TYPE);
        }
    }




    static if(!is(typeof(PKCS7_R_NO_CONTENT))) {
        private enum enumMixinStr_PKCS7_R_NO_CONTENT = `enum PKCS7_R_NO_CONTENT = 122;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS7_R_NO_CONTENT); }))) {
            mixin(enumMixinStr_PKCS7_R_NO_CONTENT);
        }
    }




    static if(!is(typeof(PKCS7_R_NO_DEFAULT_DIGEST))) {
        private enum enumMixinStr_PKCS7_R_NO_DEFAULT_DIGEST = `enum PKCS7_R_NO_DEFAULT_DIGEST = 151;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS7_R_NO_DEFAULT_DIGEST); }))) {
            mixin(enumMixinStr_PKCS7_R_NO_DEFAULT_DIGEST);
        }
    }




    static if(!is(typeof(PKCS7_R_NO_MATCHING_DIGEST_TYPE_FOUND))) {
        private enum enumMixinStr_PKCS7_R_NO_MATCHING_DIGEST_TYPE_FOUND = `enum PKCS7_R_NO_MATCHING_DIGEST_TYPE_FOUND = 154;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS7_R_NO_MATCHING_DIGEST_TYPE_FOUND); }))) {
            mixin(enumMixinStr_PKCS7_R_NO_MATCHING_DIGEST_TYPE_FOUND);
        }
    }




    static if(!is(typeof(PKCS7_R_NO_RECIPIENT_MATCHES_CERTIFICATE))) {
        private enum enumMixinStr_PKCS7_R_NO_RECIPIENT_MATCHES_CERTIFICATE = `enum PKCS7_R_NO_RECIPIENT_MATCHES_CERTIFICATE = 115;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS7_R_NO_RECIPIENT_MATCHES_CERTIFICATE); }))) {
            mixin(enumMixinStr_PKCS7_R_NO_RECIPIENT_MATCHES_CERTIFICATE);
        }
    }




    static if(!is(typeof(PKCS7_R_NO_SIGNATURES_ON_DATA))) {
        private enum enumMixinStr_PKCS7_R_NO_SIGNATURES_ON_DATA = `enum PKCS7_R_NO_SIGNATURES_ON_DATA = 123;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS7_R_NO_SIGNATURES_ON_DATA); }))) {
            mixin(enumMixinStr_PKCS7_R_NO_SIGNATURES_ON_DATA);
        }
    }




    static if(!is(typeof(PKCS7_R_NO_SIGNERS))) {
        private enum enumMixinStr_PKCS7_R_NO_SIGNERS = `enum PKCS7_R_NO_SIGNERS = 142;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS7_R_NO_SIGNERS); }))) {
            mixin(enumMixinStr_PKCS7_R_NO_SIGNERS);
        }
    }




    static if(!is(typeof(PKCS7_R_OPERATION_NOT_SUPPORTED_ON_THIS_TYPE))) {
        private enum enumMixinStr_PKCS7_R_OPERATION_NOT_SUPPORTED_ON_THIS_TYPE = `enum PKCS7_R_OPERATION_NOT_SUPPORTED_ON_THIS_TYPE = 104;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS7_R_OPERATION_NOT_SUPPORTED_ON_THIS_TYPE); }))) {
            mixin(enumMixinStr_PKCS7_R_OPERATION_NOT_SUPPORTED_ON_THIS_TYPE);
        }
    }




    static if(!is(typeof(PKCS7_R_PKCS7_ADD_SIGNATURE_ERROR))) {
        private enum enumMixinStr_PKCS7_R_PKCS7_ADD_SIGNATURE_ERROR = `enum PKCS7_R_PKCS7_ADD_SIGNATURE_ERROR = 124;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS7_R_PKCS7_ADD_SIGNATURE_ERROR); }))) {
            mixin(enumMixinStr_PKCS7_R_PKCS7_ADD_SIGNATURE_ERROR);
        }
    }




    static if(!is(typeof(PKCS7_R_PKCS7_ADD_SIGNER_ERROR))) {
        private enum enumMixinStr_PKCS7_R_PKCS7_ADD_SIGNER_ERROR = `enum PKCS7_R_PKCS7_ADD_SIGNER_ERROR = 153;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS7_R_PKCS7_ADD_SIGNER_ERROR); }))) {
            mixin(enumMixinStr_PKCS7_R_PKCS7_ADD_SIGNER_ERROR);
        }
    }




    static if(!is(typeof(PKCS7_R_PKCS7_DATASIGN))) {
        private enum enumMixinStr_PKCS7_R_PKCS7_DATASIGN = `enum PKCS7_R_PKCS7_DATASIGN = 145;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS7_R_PKCS7_DATASIGN); }))) {
            mixin(enumMixinStr_PKCS7_R_PKCS7_DATASIGN);
        }
    }




    static if(!is(typeof(PKCS7_R_PRIVATE_KEY_DOES_NOT_MATCH_CERTIFICATE))) {
        private enum enumMixinStr_PKCS7_R_PRIVATE_KEY_DOES_NOT_MATCH_CERTIFICATE = `enum PKCS7_R_PRIVATE_KEY_DOES_NOT_MATCH_CERTIFICATE = 127;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS7_R_PRIVATE_KEY_DOES_NOT_MATCH_CERTIFICATE); }))) {
            mixin(enumMixinStr_PKCS7_R_PRIVATE_KEY_DOES_NOT_MATCH_CERTIFICATE);
        }
    }




    static if(!is(typeof(PKCS7_R_SIGNATURE_FAILURE))) {
        private enum enumMixinStr_PKCS7_R_SIGNATURE_FAILURE = `enum PKCS7_R_SIGNATURE_FAILURE = 105;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS7_R_SIGNATURE_FAILURE); }))) {
            mixin(enumMixinStr_PKCS7_R_SIGNATURE_FAILURE);
        }
    }




    static if(!is(typeof(PKCS7_R_SIGNER_CERTIFICATE_NOT_FOUND))) {
        private enum enumMixinStr_PKCS7_R_SIGNER_CERTIFICATE_NOT_FOUND = `enum PKCS7_R_SIGNER_CERTIFICATE_NOT_FOUND = 128;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS7_R_SIGNER_CERTIFICATE_NOT_FOUND); }))) {
            mixin(enumMixinStr_PKCS7_R_SIGNER_CERTIFICATE_NOT_FOUND);
        }
    }




    static if(!is(typeof(PKCS7_R_SIGNING_CTRL_FAILURE))) {
        private enum enumMixinStr_PKCS7_R_SIGNING_CTRL_FAILURE = `enum PKCS7_R_SIGNING_CTRL_FAILURE = 147;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS7_R_SIGNING_CTRL_FAILURE); }))) {
            mixin(enumMixinStr_PKCS7_R_SIGNING_CTRL_FAILURE);
        }
    }




    static if(!is(typeof(PKCS7_R_SIGNING_NOT_SUPPORTED_FOR_THIS_KEY_TYPE))) {
        private enum enumMixinStr_PKCS7_R_SIGNING_NOT_SUPPORTED_FOR_THIS_KEY_TYPE = `enum PKCS7_R_SIGNING_NOT_SUPPORTED_FOR_THIS_KEY_TYPE = 148;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS7_R_SIGNING_NOT_SUPPORTED_FOR_THIS_KEY_TYPE); }))) {
            mixin(enumMixinStr_PKCS7_R_SIGNING_NOT_SUPPORTED_FOR_THIS_KEY_TYPE);
        }
    }




    static if(!is(typeof(PKCS7_R_SMIME_TEXT_ERROR))) {
        private enum enumMixinStr_PKCS7_R_SMIME_TEXT_ERROR = `enum PKCS7_R_SMIME_TEXT_ERROR = 129;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS7_R_SMIME_TEXT_ERROR); }))) {
            mixin(enumMixinStr_PKCS7_R_SMIME_TEXT_ERROR);
        }
    }




    static if(!is(typeof(PKCS7_R_UNABLE_TO_FIND_CERTIFICATE))) {
        private enum enumMixinStr_PKCS7_R_UNABLE_TO_FIND_CERTIFICATE = `enum PKCS7_R_UNABLE_TO_FIND_CERTIFICATE = 106;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS7_R_UNABLE_TO_FIND_CERTIFICATE); }))) {
            mixin(enumMixinStr_PKCS7_R_UNABLE_TO_FIND_CERTIFICATE);
        }
    }




    static if(!is(typeof(PKCS7_R_UNABLE_TO_FIND_MEM_BIO))) {
        private enum enumMixinStr_PKCS7_R_UNABLE_TO_FIND_MEM_BIO = `enum PKCS7_R_UNABLE_TO_FIND_MEM_BIO = 107;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS7_R_UNABLE_TO_FIND_MEM_BIO); }))) {
            mixin(enumMixinStr_PKCS7_R_UNABLE_TO_FIND_MEM_BIO);
        }
    }




    static if(!is(typeof(PKCS7_R_UNABLE_TO_FIND_MESSAGE_DIGEST))) {
        private enum enumMixinStr_PKCS7_R_UNABLE_TO_FIND_MESSAGE_DIGEST = `enum PKCS7_R_UNABLE_TO_FIND_MESSAGE_DIGEST = 108;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS7_R_UNABLE_TO_FIND_MESSAGE_DIGEST); }))) {
            mixin(enumMixinStr_PKCS7_R_UNABLE_TO_FIND_MESSAGE_DIGEST);
        }
    }




    static if(!is(typeof(PKCS7_R_UNKNOWN_DIGEST_TYPE))) {
        private enum enumMixinStr_PKCS7_R_UNKNOWN_DIGEST_TYPE = `enum PKCS7_R_UNKNOWN_DIGEST_TYPE = 109;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS7_R_UNKNOWN_DIGEST_TYPE); }))) {
            mixin(enumMixinStr_PKCS7_R_UNKNOWN_DIGEST_TYPE);
        }
    }




    static if(!is(typeof(PKCS7_R_UNKNOWN_OPERATION))) {
        private enum enumMixinStr_PKCS7_R_UNKNOWN_OPERATION = `enum PKCS7_R_UNKNOWN_OPERATION = 110;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS7_R_UNKNOWN_OPERATION); }))) {
            mixin(enumMixinStr_PKCS7_R_UNKNOWN_OPERATION);
        }
    }




    static if(!is(typeof(PKCS7_R_UNSUPPORTED_CIPHER_TYPE))) {
        private enum enumMixinStr_PKCS7_R_UNSUPPORTED_CIPHER_TYPE = `enum PKCS7_R_UNSUPPORTED_CIPHER_TYPE = 111;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS7_R_UNSUPPORTED_CIPHER_TYPE); }))) {
            mixin(enumMixinStr_PKCS7_R_UNSUPPORTED_CIPHER_TYPE);
        }
    }




    static if(!is(typeof(PKCS7_R_UNSUPPORTED_CONTENT_TYPE))) {
        private enum enumMixinStr_PKCS7_R_UNSUPPORTED_CONTENT_TYPE = `enum PKCS7_R_UNSUPPORTED_CONTENT_TYPE = 112;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS7_R_UNSUPPORTED_CONTENT_TYPE); }))) {
            mixin(enumMixinStr_PKCS7_R_UNSUPPORTED_CONTENT_TYPE);
        }
    }




    static if(!is(typeof(PKCS7_R_WRONG_CONTENT_TYPE))) {
        private enum enumMixinStr_PKCS7_R_WRONG_CONTENT_TYPE = `enum PKCS7_R_WRONG_CONTENT_TYPE = 113;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS7_R_WRONG_CONTENT_TYPE); }))) {
            mixin(enumMixinStr_PKCS7_R_WRONG_CONTENT_TYPE);
        }
    }




    static if(!is(typeof(PKCS7_R_WRONG_PKCS7_TYPE))) {
        private enum enumMixinStr_PKCS7_R_WRONG_PKCS7_TYPE = `enum PKCS7_R_WRONG_PKCS7_TYPE = 114;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS7_R_WRONG_PKCS7_TYPE); }))) {
            mixin(enumMixinStr_PKCS7_R_WRONG_PKCS7_TYPE);
        }
    }






    static if(!is(typeof(TLS1_CK_ADH_WITH_AES_128_GCM_SHA256))) {
        private enum enumMixinStr_TLS1_CK_ADH_WITH_AES_128_GCM_SHA256 = `enum TLS1_CK_ADH_WITH_AES_128_GCM_SHA256 = 0x030000A6;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_ADH_WITH_AES_128_GCM_SHA256); }))) {
            mixin(enumMixinStr_TLS1_CK_ADH_WITH_AES_128_GCM_SHA256);
        }
    }




    static if(!is(typeof(TLS1_CK_DH_DSS_WITH_AES_256_GCM_SHA384))) {
        private enum enumMixinStr_TLS1_CK_DH_DSS_WITH_AES_256_GCM_SHA384 = `enum TLS1_CK_DH_DSS_WITH_AES_256_GCM_SHA384 = 0x030000A5;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_DH_DSS_WITH_AES_256_GCM_SHA384); }))) {
            mixin(enumMixinStr_TLS1_CK_DH_DSS_WITH_AES_256_GCM_SHA384);
        }
    }




    static if(!is(typeof(TLS1_CK_DH_DSS_WITH_AES_128_GCM_SHA256))) {
        private enum enumMixinStr_TLS1_CK_DH_DSS_WITH_AES_128_GCM_SHA256 = `enum TLS1_CK_DH_DSS_WITH_AES_128_GCM_SHA256 = 0x030000A4;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_DH_DSS_WITH_AES_128_GCM_SHA256); }))) {
            mixin(enumMixinStr_TLS1_CK_DH_DSS_WITH_AES_128_GCM_SHA256);
        }
    }




    static if(!is(typeof(TLS1_CK_DHE_DSS_WITH_AES_256_GCM_SHA384))) {
        private enum enumMixinStr_TLS1_CK_DHE_DSS_WITH_AES_256_GCM_SHA384 = `enum TLS1_CK_DHE_DSS_WITH_AES_256_GCM_SHA384 = 0x030000A3;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_DHE_DSS_WITH_AES_256_GCM_SHA384); }))) {
            mixin(enumMixinStr_TLS1_CK_DHE_DSS_WITH_AES_256_GCM_SHA384);
        }
    }




    static if(!is(typeof(TLS1_CK_DHE_DSS_WITH_AES_128_GCM_SHA256))) {
        private enum enumMixinStr_TLS1_CK_DHE_DSS_WITH_AES_128_GCM_SHA256 = `enum TLS1_CK_DHE_DSS_WITH_AES_128_GCM_SHA256 = 0x030000A2;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_DHE_DSS_WITH_AES_128_GCM_SHA256); }))) {
            mixin(enumMixinStr_TLS1_CK_DHE_DSS_WITH_AES_128_GCM_SHA256);
        }
    }




    static if(!is(typeof(TLS1_CK_DH_RSA_WITH_AES_256_GCM_SHA384))) {
        private enum enumMixinStr_TLS1_CK_DH_RSA_WITH_AES_256_GCM_SHA384 = `enum TLS1_CK_DH_RSA_WITH_AES_256_GCM_SHA384 = 0x030000A1;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_DH_RSA_WITH_AES_256_GCM_SHA384); }))) {
            mixin(enumMixinStr_TLS1_CK_DH_RSA_WITH_AES_256_GCM_SHA384);
        }
    }




    static if(!is(typeof(TLS1_CK_DH_RSA_WITH_AES_128_GCM_SHA256))) {
        private enum enumMixinStr_TLS1_CK_DH_RSA_WITH_AES_128_GCM_SHA256 = `enum TLS1_CK_DH_RSA_WITH_AES_128_GCM_SHA256 = 0x030000A0;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_DH_RSA_WITH_AES_128_GCM_SHA256); }))) {
            mixin(enumMixinStr_TLS1_CK_DH_RSA_WITH_AES_128_GCM_SHA256);
        }
    }




    static if(!is(typeof(TLS1_CK_DHE_RSA_WITH_AES_256_GCM_SHA384))) {
        private enum enumMixinStr_TLS1_CK_DHE_RSA_WITH_AES_256_GCM_SHA384 = `enum TLS1_CK_DHE_RSA_WITH_AES_256_GCM_SHA384 = 0x0300009F;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_DHE_RSA_WITH_AES_256_GCM_SHA384); }))) {
            mixin(enumMixinStr_TLS1_CK_DHE_RSA_WITH_AES_256_GCM_SHA384);
        }
    }




    static if(!is(typeof(TLS1_CK_DHE_RSA_WITH_AES_128_GCM_SHA256))) {
        private enum enumMixinStr_TLS1_CK_DHE_RSA_WITH_AES_128_GCM_SHA256 = `enum TLS1_CK_DHE_RSA_WITH_AES_128_GCM_SHA256 = 0x0300009E;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_DHE_RSA_WITH_AES_128_GCM_SHA256); }))) {
            mixin(enumMixinStr_TLS1_CK_DHE_RSA_WITH_AES_128_GCM_SHA256);
        }
    }






    static if(!is(typeof(TLS1_CK_RSA_WITH_AES_256_GCM_SHA384))) {
        private enum enumMixinStr_TLS1_CK_RSA_WITH_AES_256_GCM_SHA384 = `enum TLS1_CK_RSA_WITH_AES_256_GCM_SHA384 = 0x0300009D;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_RSA_WITH_AES_256_GCM_SHA384); }))) {
            mixin(enumMixinStr_TLS1_CK_RSA_WITH_AES_256_GCM_SHA384);
        }
    }




    static if(!is(typeof(TLS1_CK_RSA_WITH_AES_128_GCM_SHA256))) {
        private enum enumMixinStr_TLS1_CK_RSA_WITH_AES_128_GCM_SHA256 = `enum TLS1_CK_RSA_WITH_AES_128_GCM_SHA256 = 0x0300009C;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_RSA_WITH_AES_128_GCM_SHA256); }))) {
            mixin(enumMixinStr_TLS1_CK_RSA_WITH_AES_128_GCM_SHA256);
        }
    }




    static if(!is(typeof(TLS1_CK_ADH_WITH_SEED_SHA))) {
        private enum enumMixinStr_TLS1_CK_ADH_WITH_SEED_SHA = `enum TLS1_CK_ADH_WITH_SEED_SHA = 0x0300009B;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_ADH_WITH_SEED_SHA); }))) {
            mixin(enumMixinStr_TLS1_CK_ADH_WITH_SEED_SHA);
        }
    }




    static if(!is(typeof(TLS1_CK_DHE_RSA_WITH_SEED_SHA))) {
        private enum enumMixinStr_TLS1_CK_DHE_RSA_WITH_SEED_SHA = `enum TLS1_CK_DHE_RSA_WITH_SEED_SHA = 0x0300009A;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_DHE_RSA_WITH_SEED_SHA); }))) {
            mixin(enumMixinStr_TLS1_CK_DHE_RSA_WITH_SEED_SHA);
        }
    }




    static if(!is(typeof(TLS1_CK_DHE_DSS_WITH_SEED_SHA))) {
        private enum enumMixinStr_TLS1_CK_DHE_DSS_WITH_SEED_SHA = `enum TLS1_CK_DHE_DSS_WITH_SEED_SHA = 0x03000099;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_DHE_DSS_WITH_SEED_SHA); }))) {
            mixin(enumMixinStr_TLS1_CK_DHE_DSS_WITH_SEED_SHA);
        }
    }




    static if(!is(typeof(TLS1_CK_DH_RSA_WITH_SEED_SHA))) {
        private enum enumMixinStr_TLS1_CK_DH_RSA_WITH_SEED_SHA = `enum TLS1_CK_DH_RSA_WITH_SEED_SHA = 0x03000098;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_DH_RSA_WITH_SEED_SHA); }))) {
            mixin(enumMixinStr_TLS1_CK_DH_RSA_WITH_SEED_SHA);
        }
    }




    static if(!is(typeof(TLS1_CK_DH_DSS_WITH_SEED_SHA))) {
        private enum enumMixinStr_TLS1_CK_DH_DSS_WITH_SEED_SHA = `enum TLS1_CK_DH_DSS_WITH_SEED_SHA = 0x03000097;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_DH_DSS_WITH_SEED_SHA); }))) {
            mixin(enumMixinStr_TLS1_CK_DH_DSS_WITH_SEED_SHA);
        }
    }




    static if(!is(typeof(TLS1_CK_RSA_WITH_SEED_SHA))) {
        private enum enumMixinStr_TLS1_CK_RSA_WITH_SEED_SHA = `enum TLS1_CK_RSA_WITH_SEED_SHA = 0x03000096;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_RSA_WITH_SEED_SHA); }))) {
            mixin(enumMixinStr_TLS1_CK_RSA_WITH_SEED_SHA);
        }
    }




    static if(!is(typeof(TLS1_CK_ADH_WITH_CAMELLIA_256_CBC_SHA))) {
        private enum enumMixinStr_TLS1_CK_ADH_WITH_CAMELLIA_256_CBC_SHA = `enum TLS1_CK_ADH_WITH_CAMELLIA_256_CBC_SHA = 0x03000089;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_ADH_WITH_CAMELLIA_256_CBC_SHA); }))) {
            mixin(enumMixinStr_TLS1_CK_ADH_WITH_CAMELLIA_256_CBC_SHA);
        }
    }




    static if(!is(typeof(TLS1_CK_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA))) {
        private enum enumMixinStr_TLS1_CK_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA = `enum TLS1_CK_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA = 0x03000088;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA); }))) {
            mixin(enumMixinStr_TLS1_CK_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA);
        }
    }




    static if(!is(typeof(TLS1_CK_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA))) {
        private enum enumMixinStr_TLS1_CK_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA = `enum TLS1_CK_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA = 0x03000087;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA); }))) {
            mixin(enumMixinStr_TLS1_CK_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA);
        }
    }




    static if(!is(typeof(TLS1_CK_DH_RSA_WITH_CAMELLIA_256_CBC_SHA))) {
        private enum enumMixinStr_TLS1_CK_DH_RSA_WITH_CAMELLIA_256_CBC_SHA = `enum TLS1_CK_DH_RSA_WITH_CAMELLIA_256_CBC_SHA = 0x03000086;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_DH_RSA_WITH_CAMELLIA_256_CBC_SHA); }))) {
            mixin(enumMixinStr_TLS1_CK_DH_RSA_WITH_CAMELLIA_256_CBC_SHA);
        }
    }




    static if(!is(typeof(TLS1_CK_DH_DSS_WITH_CAMELLIA_256_CBC_SHA))) {
        private enum enumMixinStr_TLS1_CK_DH_DSS_WITH_CAMELLIA_256_CBC_SHA = `enum TLS1_CK_DH_DSS_WITH_CAMELLIA_256_CBC_SHA = 0x03000085;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_DH_DSS_WITH_CAMELLIA_256_CBC_SHA); }))) {
            mixin(enumMixinStr_TLS1_CK_DH_DSS_WITH_CAMELLIA_256_CBC_SHA);
        }
    }






    static if(!is(typeof(TLS1_CK_RSA_WITH_CAMELLIA_256_CBC_SHA))) {
        private enum enumMixinStr_TLS1_CK_RSA_WITH_CAMELLIA_256_CBC_SHA = `enum TLS1_CK_RSA_WITH_CAMELLIA_256_CBC_SHA = 0x03000084;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_RSA_WITH_CAMELLIA_256_CBC_SHA); }))) {
            mixin(enumMixinStr_TLS1_CK_RSA_WITH_CAMELLIA_256_CBC_SHA);
        }
    }




    static if(!is(typeof(TLS1_CK_ADH_WITH_AES_256_SHA256))) {
        private enum enumMixinStr_TLS1_CK_ADH_WITH_AES_256_SHA256 = `enum TLS1_CK_ADH_WITH_AES_256_SHA256 = 0x0300006D;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_ADH_WITH_AES_256_SHA256); }))) {
            mixin(enumMixinStr_TLS1_CK_ADH_WITH_AES_256_SHA256);
        }
    }




    static if(!is(typeof(RAND_F_DATA_COLLECT_METHOD))) {
        private enum enumMixinStr_RAND_F_DATA_COLLECT_METHOD = `enum RAND_F_DATA_COLLECT_METHOD = 127;`;
        static if(is(typeof({ mixin(enumMixinStr_RAND_F_DATA_COLLECT_METHOD); }))) {
            mixin(enumMixinStr_RAND_F_DATA_COLLECT_METHOD);
        }
    }




    static if(!is(typeof(RAND_F_DRBG_BYTES))) {
        private enum enumMixinStr_RAND_F_DRBG_BYTES = `enum RAND_F_DRBG_BYTES = 101;`;
        static if(is(typeof({ mixin(enumMixinStr_RAND_F_DRBG_BYTES); }))) {
            mixin(enumMixinStr_RAND_F_DRBG_BYTES);
        }
    }




    static if(!is(typeof(RAND_F_DRBG_GET_ENTROPY))) {
        private enum enumMixinStr_RAND_F_DRBG_GET_ENTROPY = `enum RAND_F_DRBG_GET_ENTROPY = 105;`;
        static if(is(typeof({ mixin(enumMixinStr_RAND_F_DRBG_GET_ENTROPY); }))) {
            mixin(enumMixinStr_RAND_F_DRBG_GET_ENTROPY);
        }
    }




    static if(!is(typeof(RAND_F_DRBG_SETUP))) {
        private enum enumMixinStr_RAND_F_DRBG_SETUP = `enum RAND_F_DRBG_SETUP = 117;`;
        static if(is(typeof({ mixin(enumMixinStr_RAND_F_DRBG_SETUP); }))) {
            mixin(enumMixinStr_RAND_F_DRBG_SETUP);
        }
    }




    static if(!is(typeof(RAND_F_GET_ENTROPY))) {
        private enum enumMixinStr_RAND_F_GET_ENTROPY = `enum RAND_F_GET_ENTROPY = 106;`;
        static if(is(typeof({ mixin(enumMixinStr_RAND_F_GET_ENTROPY); }))) {
            mixin(enumMixinStr_RAND_F_GET_ENTROPY);
        }
    }




    static if(!is(typeof(RAND_F_RAND_BYTES))) {
        private enum enumMixinStr_RAND_F_RAND_BYTES = `enum RAND_F_RAND_BYTES = 100;`;
        static if(is(typeof({ mixin(enumMixinStr_RAND_F_RAND_BYTES); }))) {
            mixin(enumMixinStr_RAND_F_RAND_BYTES);
        }
    }




    static if(!is(typeof(RAND_F_RAND_DRBG_ENABLE_LOCKING))) {
        private enum enumMixinStr_RAND_F_RAND_DRBG_ENABLE_LOCKING = `enum RAND_F_RAND_DRBG_ENABLE_LOCKING = 119;`;
        static if(is(typeof({ mixin(enumMixinStr_RAND_F_RAND_DRBG_ENABLE_LOCKING); }))) {
            mixin(enumMixinStr_RAND_F_RAND_DRBG_ENABLE_LOCKING);
        }
    }




    static if(!is(typeof(RAND_F_RAND_DRBG_GENERATE))) {
        private enum enumMixinStr_RAND_F_RAND_DRBG_GENERATE = `enum RAND_F_RAND_DRBG_GENERATE = 107;`;
        static if(is(typeof({ mixin(enumMixinStr_RAND_F_RAND_DRBG_GENERATE); }))) {
            mixin(enumMixinStr_RAND_F_RAND_DRBG_GENERATE);
        }
    }




    static if(!is(typeof(RAND_F_RAND_DRBG_GET_ENTROPY))) {
        private enum enumMixinStr_RAND_F_RAND_DRBG_GET_ENTROPY = `enum RAND_F_RAND_DRBG_GET_ENTROPY = 120;`;
        static if(is(typeof({ mixin(enumMixinStr_RAND_F_RAND_DRBG_GET_ENTROPY); }))) {
            mixin(enumMixinStr_RAND_F_RAND_DRBG_GET_ENTROPY);
        }
    }




    static if(!is(typeof(RAND_F_RAND_DRBG_GET_NONCE))) {
        private enum enumMixinStr_RAND_F_RAND_DRBG_GET_NONCE = `enum RAND_F_RAND_DRBG_GET_NONCE = 123;`;
        static if(is(typeof({ mixin(enumMixinStr_RAND_F_RAND_DRBG_GET_NONCE); }))) {
            mixin(enumMixinStr_RAND_F_RAND_DRBG_GET_NONCE);
        }
    }




    static if(!is(typeof(RAND_F_RAND_DRBG_INSTANTIATE))) {
        private enum enumMixinStr_RAND_F_RAND_DRBG_INSTANTIATE = `enum RAND_F_RAND_DRBG_INSTANTIATE = 108;`;
        static if(is(typeof({ mixin(enumMixinStr_RAND_F_RAND_DRBG_INSTANTIATE); }))) {
            mixin(enumMixinStr_RAND_F_RAND_DRBG_INSTANTIATE);
        }
    }




    static if(!is(typeof(RAND_F_RAND_DRBG_NEW))) {
        private enum enumMixinStr_RAND_F_RAND_DRBG_NEW = `enum RAND_F_RAND_DRBG_NEW = 109;`;
        static if(is(typeof({ mixin(enumMixinStr_RAND_F_RAND_DRBG_NEW); }))) {
            mixin(enumMixinStr_RAND_F_RAND_DRBG_NEW);
        }
    }




    static if(!is(typeof(RAND_F_RAND_DRBG_RESEED))) {
        private enum enumMixinStr_RAND_F_RAND_DRBG_RESEED = `enum RAND_F_RAND_DRBG_RESEED = 110;`;
        static if(is(typeof({ mixin(enumMixinStr_RAND_F_RAND_DRBG_RESEED); }))) {
            mixin(enumMixinStr_RAND_F_RAND_DRBG_RESEED);
        }
    }




    static if(!is(typeof(RAND_F_RAND_DRBG_RESTART))) {
        private enum enumMixinStr_RAND_F_RAND_DRBG_RESTART = `enum RAND_F_RAND_DRBG_RESTART = 102;`;
        static if(is(typeof({ mixin(enumMixinStr_RAND_F_RAND_DRBG_RESTART); }))) {
            mixin(enumMixinStr_RAND_F_RAND_DRBG_RESTART);
        }
    }




    static if(!is(typeof(RAND_F_RAND_DRBG_SET))) {
        private enum enumMixinStr_RAND_F_RAND_DRBG_SET = `enum RAND_F_RAND_DRBG_SET = 104;`;
        static if(is(typeof({ mixin(enumMixinStr_RAND_F_RAND_DRBG_SET); }))) {
            mixin(enumMixinStr_RAND_F_RAND_DRBG_SET);
        }
    }




    static if(!is(typeof(RAND_F_RAND_DRBG_SET_DEFAULTS))) {
        private enum enumMixinStr_RAND_F_RAND_DRBG_SET_DEFAULTS = `enum RAND_F_RAND_DRBG_SET_DEFAULTS = 121;`;
        static if(is(typeof({ mixin(enumMixinStr_RAND_F_RAND_DRBG_SET_DEFAULTS); }))) {
            mixin(enumMixinStr_RAND_F_RAND_DRBG_SET_DEFAULTS);
        }
    }




    static if(!is(typeof(RAND_F_RAND_DRBG_UNINSTANTIATE))) {
        private enum enumMixinStr_RAND_F_RAND_DRBG_UNINSTANTIATE = `enum RAND_F_RAND_DRBG_UNINSTANTIATE = 118;`;
        static if(is(typeof({ mixin(enumMixinStr_RAND_F_RAND_DRBG_UNINSTANTIATE); }))) {
            mixin(enumMixinStr_RAND_F_RAND_DRBG_UNINSTANTIATE);
        }
    }




    static if(!is(typeof(RAND_F_RAND_LOAD_FILE))) {
        private enum enumMixinStr_RAND_F_RAND_LOAD_FILE = `enum RAND_F_RAND_LOAD_FILE = 111;`;
        static if(is(typeof({ mixin(enumMixinStr_RAND_F_RAND_LOAD_FILE); }))) {
            mixin(enumMixinStr_RAND_F_RAND_LOAD_FILE);
        }
    }




    static if(!is(typeof(RAND_F_RAND_POOL_ACQUIRE_ENTROPY))) {
        private enum enumMixinStr_RAND_F_RAND_POOL_ACQUIRE_ENTROPY = `enum RAND_F_RAND_POOL_ACQUIRE_ENTROPY = 122;`;
        static if(is(typeof({ mixin(enumMixinStr_RAND_F_RAND_POOL_ACQUIRE_ENTROPY); }))) {
            mixin(enumMixinStr_RAND_F_RAND_POOL_ACQUIRE_ENTROPY);
        }
    }




    static if(!is(typeof(RAND_F_RAND_POOL_ADD))) {
        private enum enumMixinStr_RAND_F_RAND_POOL_ADD = `enum RAND_F_RAND_POOL_ADD = 103;`;
        static if(is(typeof({ mixin(enumMixinStr_RAND_F_RAND_POOL_ADD); }))) {
            mixin(enumMixinStr_RAND_F_RAND_POOL_ADD);
        }
    }




    static if(!is(typeof(RAND_F_RAND_POOL_ADD_BEGIN))) {
        private enum enumMixinStr_RAND_F_RAND_POOL_ADD_BEGIN = `enum RAND_F_RAND_POOL_ADD_BEGIN = 113;`;
        static if(is(typeof({ mixin(enumMixinStr_RAND_F_RAND_POOL_ADD_BEGIN); }))) {
            mixin(enumMixinStr_RAND_F_RAND_POOL_ADD_BEGIN);
        }
    }




    static if(!is(typeof(RAND_F_RAND_POOL_ADD_END))) {
        private enum enumMixinStr_RAND_F_RAND_POOL_ADD_END = `enum RAND_F_RAND_POOL_ADD_END = 114;`;
        static if(is(typeof({ mixin(enumMixinStr_RAND_F_RAND_POOL_ADD_END); }))) {
            mixin(enumMixinStr_RAND_F_RAND_POOL_ADD_END);
        }
    }




    static if(!is(typeof(RAND_F_RAND_POOL_ATTACH))) {
        private enum enumMixinStr_RAND_F_RAND_POOL_ATTACH = `enum RAND_F_RAND_POOL_ATTACH = 124;`;
        static if(is(typeof({ mixin(enumMixinStr_RAND_F_RAND_POOL_ATTACH); }))) {
            mixin(enumMixinStr_RAND_F_RAND_POOL_ATTACH);
        }
    }




    static if(!is(typeof(RAND_F_RAND_POOL_BYTES_NEEDED))) {
        private enum enumMixinStr_RAND_F_RAND_POOL_BYTES_NEEDED = `enum RAND_F_RAND_POOL_BYTES_NEEDED = 115;`;
        static if(is(typeof({ mixin(enumMixinStr_RAND_F_RAND_POOL_BYTES_NEEDED); }))) {
            mixin(enumMixinStr_RAND_F_RAND_POOL_BYTES_NEEDED);
        }
    }




    static if(!is(typeof(RAND_F_RAND_POOL_GROW))) {
        private enum enumMixinStr_RAND_F_RAND_POOL_GROW = `enum RAND_F_RAND_POOL_GROW = 125;`;
        static if(is(typeof({ mixin(enumMixinStr_RAND_F_RAND_POOL_GROW); }))) {
            mixin(enumMixinStr_RAND_F_RAND_POOL_GROW);
        }
    }




    static if(!is(typeof(RAND_F_RAND_POOL_NEW))) {
        private enum enumMixinStr_RAND_F_RAND_POOL_NEW = `enum RAND_F_RAND_POOL_NEW = 116;`;
        static if(is(typeof({ mixin(enumMixinStr_RAND_F_RAND_POOL_NEW); }))) {
            mixin(enumMixinStr_RAND_F_RAND_POOL_NEW);
        }
    }




    static if(!is(typeof(RAND_F_RAND_PSEUDO_BYTES))) {
        private enum enumMixinStr_RAND_F_RAND_PSEUDO_BYTES = `enum RAND_F_RAND_PSEUDO_BYTES = 126;`;
        static if(is(typeof({ mixin(enumMixinStr_RAND_F_RAND_PSEUDO_BYTES); }))) {
            mixin(enumMixinStr_RAND_F_RAND_PSEUDO_BYTES);
        }
    }




    static if(!is(typeof(RAND_F_RAND_WRITE_FILE))) {
        private enum enumMixinStr_RAND_F_RAND_WRITE_FILE = `enum RAND_F_RAND_WRITE_FILE = 112;`;
        static if(is(typeof({ mixin(enumMixinStr_RAND_F_RAND_WRITE_FILE); }))) {
            mixin(enumMixinStr_RAND_F_RAND_WRITE_FILE);
        }
    }




    static if(!is(typeof(RAND_R_ADDITIONAL_INPUT_TOO_LONG))) {
        private enum enumMixinStr_RAND_R_ADDITIONAL_INPUT_TOO_LONG = `enum RAND_R_ADDITIONAL_INPUT_TOO_LONG = 102;`;
        static if(is(typeof({ mixin(enumMixinStr_RAND_R_ADDITIONAL_INPUT_TOO_LONG); }))) {
            mixin(enumMixinStr_RAND_R_ADDITIONAL_INPUT_TOO_LONG);
        }
    }




    static if(!is(typeof(RAND_R_ALREADY_INSTANTIATED))) {
        private enum enumMixinStr_RAND_R_ALREADY_INSTANTIATED = `enum RAND_R_ALREADY_INSTANTIATED = 103;`;
        static if(is(typeof({ mixin(enumMixinStr_RAND_R_ALREADY_INSTANTIATED); }))) {
            mixin(enumMixinStr_RAND_R_ALREADY_INSTANTIATED);
        }
    }




    static if(!is(typeof(RAND_R_ARGUMENT_OUT_OF_RANGE))) {
        private enum enumMixinStr_RAND_R_ARGUMENT_OUT_OF_RANGE = `enum RAND_R_ARGUMENT_OUT_OF_RANGE = 105;`;
        static if(is(typeof({ mixin(enumMixinStr_RAND_R_ARGUMENT_OUT_OF_RANGE); }))) {
            mixin(enumMixinStr_RAND_R_ARGUMENT_OUT_OF_RANGE);
        }
    }




    static if(!is(typeof(RAND_R_CANNOT_OPEN_FILE))) {
        private enum enumMixinStr_RAND_R_CANNOT_OPEN_FILE = `enum RAND_R_CANNOT_OPEN_FILE = 121;`;
        static if(is(typeof({ mixin(enumMixinStr_RAND_R_CANNOT_OPEN_FILE); }))) {
            mixin(enumMixinStr_RAND_R_CANNOT_OPEN_FILE);
        }
    }




    static if(!is(typeof(RAND_R_DRBG_ALREADY_INITIALIZED))) {
        private enum enumMixinStr_RAND_R_DRBG_ALREADY_INITIALIZED = `enum RAND_R_DRBG_ALREADY_INITIALIZED = 129;`;
        static if(is(typeof({ mixin(enumMixinStr_RAND_R_DRBG_ALREADY_INITIALIZED); }))) {
            mixin(enumMixinStr_RAND_R_DRBG_ALREADY_INITIALIZED);
        }
    }




    static if(!is(typeof(RAND_R_DRBG_NOT_INITIALISED))) {
        private enum enumMixinStr_RAND_R_DRBG_NOT_INITIALISED = `enum RAND_R_DRBG_NOT_INITIALISED = 104;`;
        static if(is(typeof({ mixin(enumMixinStr_RAND_R_DRBG_NOT_INITIALISED); }))) {
            mixin(enumMixinStr_RAND_R_DRBG_NOT_INITIALISED);
        }
    }




    static if(!is(typeof(RAND_R_ENTROPY_INPUT_TOO_LONG))) {
        private enum enumMixinStr_RAND_R_ENTROPY_INPUT_TOO_LONG = `enum RAND_R_ENTROPY_INPUT_TOO_LONG = 106;`;
        static if(is(typeof({ mixin(enumMixinStr_RAND_R_ENTROPY_INPUT_TOO_LONG); }))) {
            mixin(enumMixinStr_RAND_R_ENTROPY_INPUT_TOO_LONG);
        }
    }




    static if(!is(typeof(RAND_R_ENTROPY_OUT_OF_RANGE))) {
        private enum enumMixinStr_RAND_R_ENTROPY_OUT_OF_RANGE = `enum RAND_R_ENTROPY_OUT_OF_RANGE = 124;`;
        static if(is(typeof({ mixin(enumMixinStr_RAND_R_ENTROPY_OUT_OF_RANGE); }))) {
            mixin(enumMixinStr_RAND_R_ENTROPY_OUT_OF_RANGE);
        }
    }




    static if(!is(typeof(RAND_R_ERROR_ENTROPY_POOL_WAS_IGNORED))) {
        private enum enumMixinStr_RAND_R_ERROR_ENTROPY_POOL_WAS_IGNORED = `enum RAND_R_ERROR_ENTROPY_POOL_WAS_IGNORED = 127;`;
        static if(is(typeof({ mixin(enumMixinStr_RAND_R_ERROR_ENTROPY_POOL_WAS_IGNORED); }))) {
            mixin(enumMixinStr_RAND_R_ERROR_ENTROPY_POOL_WAS_IGNORED);
        }
    }




    static if(!is(typeof(RAND_R_ERROR_INITIALISING_DRBG))) {
        private enum enumMixinStr_RAND_R_ERROR_INITIALISING_DRBG = `enum RAND_R_ERROR_INITIALISING_DRBG = 107;`;
        static if(is(typeof({ mixin(enumMixinStr_RAND_R_ERROR_INITIALISING_DRBG); }))) {
            mixin(enumMixinStr_RAND_R_ERROR_INITIALISING_DRBG);
        }
    }




    static if(!is(typeof(RAND_R_ERROR_INSTANTIATING_DRBG))) {
        private enum enumMixinStr_RAND_R_ERROR_INSTANTIATING_DRBG = `enum RAND_R_ERROR_INSTANTIATING_DRBG = 108;`;
        static if(is(typeof({ mixin(enumMixinStr_RAND_R_ERROR_INSTANTIATING_DRBG); }))) {
            mixin(enumMixinStr_RAND_R_ERROR_INSTANTIATING_DRBG);
        }
    }




    static if(!is(typeof(RAND_R_ERROR_RETRIEVING_ADDITIONAL_INPUT))) {
        private enum enumMixinStr_RAND_R_ERROR_RETRIEVING_ADDITIONAL_INPUT = `enum RAND_R_ERROR_RETRIEVING_ADDITIONAL_INPUT = 109;`;
        static if(is(typeof({ mixin(enumMixinStr_RAND_R_ERROR_RETRIEVING_ADDITIONAL_INPUT); }))) {
            mixin(enumMixinStr_RAND_R_ERROR_RETRIEVING_ADDITIONAL_INPUT);
        }
    }




    static if(!is(typeof(RAND_R_ERROR_RETRIEVING_ENTROPY))) {
        private enum enumMixinStr_RAND_R_ERROR_RETRIEVING_ENTROPY = `enum RAND_R_ERROR_RETRIEVING_ENTROPY = 110;`;
        static if(is(typeof({ mixin(enumMixinStr_RAND_R_ERROR_RETRIEVING_ENTROPY); }))) {
            mixin(enumMixinStr_RAND_R_ERROR_RETRIEVING_ENTROPY);
        }
    }




    static if(!is(typeof(RAND_R_ERROR_RETRIEVING_NONCE))) {
        private enum enumMixinStr_RAND_R_ERROR_RETRIEVING_NONCE = `enum RAND_R_ERROR_RETRIEVING_NONCE = 111;`;
        static if(is(typeof({ mixin(enumMixinStr_RAND_R_ERROR_RETRIEVING_NONCE); }))) {
            mixin(enumMixinStr_RAND_R_ERROR_RETRIEVING_NONCE);
        }
    }




    static if(!is(typeof(RAND_R_FAILED_TO_CREATE_LOCK))) {
        private enum enumMixinStr_RAND_R_FAILED_TO_CREATE_LOCK = `enum RAND_R_FAILED_TO_CREATE_LOCK = 126;`;
        static if(is(typeof({ mixin(enumMixinStr_RAND_R_FAILED_TO_CREATE_LOCK); }))) {
            mixin(enumMixinStr_RAND_R_FAILED_TO_CREATE_LOCK);
        }
    }




    static if(!is(typeof(RAND_R_FUNC_NOT_IMPLEMENTED))) {
        private enum enumMixinStr_RAND_R_FUNC_NOT_IMPLEMENTED = `enum RAND_R_FUNC_NOT_IMPLEMENTED = 101;`;
        static if(is(typeof({ mixin(enumMixinStr_RAND_R_FUNC_NOT_IMPLEMENTED); }))) {
            mixin(enumMixinStr_RAND_R_FUNC_NOT_IMPLEMENTED);
        }
    }




    static if(!is(typeof(RAND_R_FWRITE_ERROR))) {
        private enum enumMixinStr_RAND_R_FWRITE_ERROR = `enum RAND_R_FWRITE_ERROR = 123;`;
        static if(is(typeof({ mixin(enumMixinStr_RAND_R_FWRITE_ERROR); }))) {
            mixin(enumMixinStr_RAND_R_FWRITE_ERROR);
        }
    }




    static if(!is(typeof(RAND_R_GENERATE_ERROR))) {
        private enum enumMixinStr_RAND_R_GENERATE_ERROR = `enum RAND_R_GENERATE_ERROR = 112;`;
        static if(is(typeof({ mixin(enumMixinStr_RAND_R_GENERATE_ERROR); }))) {
            mixin(enumMixinStr_RAND_R_GENERATE_ERROR);
        }
    }




    static if(!is(typeof(RAND_R_INTERNAL_ERROR))) {
        private enum enumMixinStr_RAND_R_INTERNAL_ERROR = `enum RAND_R_INTERNAL_ERROR = 113;`;
        static if(is(typeof({ mixin(enumMixinStr_RAND_R_INTERNAL_ERROR); }))) {
            mixin(enumMixinStr_RAND_R_INTERNAL_ERROR);
        }
    }




    static if(!is(typeof(RAND_R_IN_ERROR_STATE))) {
        private enum enumMixinStr_RAND_R_IN_ERROR_STATE = `enum RAND_R_IN_ERROR_STATE = 114;`;
        static if(is(typeof({ mixin(enumMixinStr_RAND_R_IN_ERROR_STATE); }))) {
            mixin(enumMixinStr_RAND_R_IN_ERROR_STATE);
        }
    }




    static if(!is(typeof(RAND_R_NOT_A_REGULAR_FILE))) {
        private enum enumMixinStr_RAND_R_NOT_A_REGULAR_FILE = `enum RAND_R_NOT_A_REGULAR_FILE = 122;`;
        static if(is(typeof({ mixin(enumMixinStr_RAND_R_NOT_A_REGULAR_FILE); }))) {
            mixin(enumMixinStr_RAND_R_NOT_A_REGULAR_FILE);
        }
    }




    static if(!is(typeof(RAND_R_NOT_INSTANTIATED))) {
        private enum enumMixinStr_RAND_R_NOT_INSTANTIATED = `enum RAND_R_NOT_INSTANTIATED = 115;`;
        static if(is(typeof({ mixin(enumMixinStr_RAND_R_NOT_INSTANTIATED); }))) {
            mixin(enumMixinStr_RAND_R_NOT_INSTANTIATED);
        }
    }




    static if(!is(typeof(RAND_R_NO_DRBG_IMPLEMENTATION_SELECTED))) {
        private enum enumMixinStr_RAND_R_NO_DRBG_IMPLEMENTATION_SELECTED = `enum RAND_R_NO_DRBG_IMPLEMENTATION_SELECTED = 128;`;
        static if(is(typeof({ mixin(enumMixinStr_RAND_R_NO_DRBG_IMPLEMENTATION_SELECTED); }))) {
            mixin(enumMixinStr_RAND_R_NO_DRBG_IMPLEMENTATION_SELECTED);
        }
    }




    static if(!is(typeof(RAND_R_PARENT_LOCKING_NOT_ENABLED))) {
        private enum enumMixinStr_RAND_R_PARENT_LOCKING_NOT_ENABLED = `enum RAND_R_PARENT_LOCKING_NOT_ENABLED = 130;`;
        static if(is(typeof({ mixin(enumMixinStr_RAND_R_PARENT_LOCKING_NOT_ENABLED); }))) {
            mixin(enumMixinStr_RAND_R_PARENT_LOCKING_NOT_ENABLED);
        }
    }




    static if(!is(typeof(RAND_R_PARENT_STRENGTH_TOO_WEAK))) {
        private enum enumMixinStr_RAND_R_PARENT_STRENGTH_TOO_WEAK = `enum RAND_R_PARENT_STRENGTH_TOO_WEAK = 131;`;
        static if(is(typeof({ mixin(enumMixinStr_RAND_R_PARENT_STRENGTH_TOO_WEAK); }))) {
            mixin(enumMixinStr_RAND_R_PARENT_STRENGTH_TOO_WEAK);
        }
    }




    static if(!is(typeof(RAND_R_PERSONALISATION_STRING_TOO_LONG))) {
        private enum enumMixinStr_RAND_R_PERSONALISATION_STRING_TOO_LONG = `enum RAND_R_PERSONALISATION_STRING_TOO_LONG = 116;`;
        static if(is(typeof({ mixin(enumMixinStr_RAND_R_PERSONALISATION_STRING_TOO_LONG); }))) {
            mixin(enumMixinStr_RAND_R_PERSONALISATION_STRING_TOO_LONG);
        }
    }




    static if(!is(typeof(RAND_R_PREDICTION_RESISTANCE_NOT_SUPPORTED))) {
        private enum enumMixinStr_RAND_R_PREDICTION_RESISTANCE_NOT_SUPPORTED = `enum RAND_R_PREDICTION_RESISTANCE_NOT_SUPPORTED = 133;`;
        static if(is(typeof({ mixin(enumMixinStr_RAND_R_PREDICTION_RESISTANCE_NOT_SUPPORTED); }))) {
            mixin(enumMixinStr_RAND_R_PREDICTION_RESISTANCE_NOT_SUPPORTED);
        }
    }




    static if(!is(typeof(RAND_R_PRNG_NOT_SEEDED))) {
        private enum enumMixinStr_RAND_R_PRNG_NOT_SEEDED = `enum RAND_R_PRNG_NOT_SEEDED = 100;`;
        static if(is(typeof({ mixin(enumMixinStr_RAND_R_PRNG_NOT_SEEDED); }))) {
            mixin(enumMixinStr_RAND_R_PRNG_NOT_SEEDED);
        }
    }




    static if(!is(typeof(RAND_R_RANDOM_POOL_OVERFLOW))) {
        private enum enumMixinStr_RAND_R_RANDOM_POOL_OVERFLOW = `enum RAND_R_RANDOM_POOL_OVERFLOW = 125;`;
        static if(is(typeof({ mixin(enumMixinStr_RAND_R_RANDOM_POOL_OVERFLOW); }))) {
            mixin(enumMixinStr_RAND_R_RANDOM_POOL_OVERFLOW);
        }
    }




    static if(!is(typeof(RAND_R_RANDOM_POOL_UNDERFLOW))) {
        private enum enumMixinStr_RAND_R_RANDOM_POOL_UNDERFLOW = `enum RAND_R_RANDOM_POOL_UNDERFLOW = 134;`;
        static if(is(typeof({ mixin(enumMixinStr_RAND_R_RANDOM_POOL_UNDERFLOW); }))) {
            mixin(enumMixinStr_RAND_R_RANDOM_POOL_UNDERFLOW);
        }
    }




    static if(!is(typeof(RAND_R_REQUEST_TOO_LARGE_FOR_DRBG))) {
        private enum enumMixinStr_RAND_R_REQUEST_TOO_LARGE_FOR_DRBG = `enum RAND_R_REQUEST_TOO_LARGE_FOR_DRBG = 117;`;
        static if(is(typeof({ mixin(enumMixinStr_RAND_R_REQUEST_TOO_LARGE_FOR_DRBG); }))) {
            mixin(enumMixinStr_RAND_R_REQUEST_TOO_LARGE_FOR_DRBG);
        }
    }




    static if(!is(typeof(RAND_R_RESEED_ERROR))) {
        private enum enumMixinStr_RAND_R_RESEED_ERROR = `enum RAND_R_RESEED_ERROR = 118;`;
        static if(is(typeof({ mixin(enumMixinStr_RAND_R_RESEED_ERROR); }))) {
            mixin(enumMixinStr_RAND_R_RESEED_ERROR);
        }
    }




    static if(!is(typeof(RAND_R_SELFTEST_FAILURE))) {
        private enum enumMixinStr_RAND_R_SELFTEST_FAILURE = `enum RAND_R_SELFTEST_FAILURE = 119;`;
        static if(is(typeof({ mixin(enumMixinStr_RAND_R_SELFTEST_FAILURE); }))) {
            mixin(enumMixinStr_RAND_R_SELFTEST_FAILURE);
        }
    }




    static if(!is(typeof(RAND_R_TOO_LITTLE_NONCE_REQUESTED))) {
        private enum enumMixinStr_RAND_R_TOO_LITTLE_NONCE_REQUESTED = `enum RAND_R_TOO_LITTLE_NONCE_REQUESTED = 135;`;
        static if(is(typeof({ mixin(enumMixinStr_RAND_R_TOO_LITTLE_NONCE_REQUESTED); }))) {
            mixin(enumMixinStr_RAND_R_TOO_LITTLE_NONCE_REQUESTED);
        }
    }




    static if(!is(typeof(RAND_R_TOO_MUCH_NONCE_REQUESTED))) {
        private enum enumMixinStr_RAND_R_TOO_MUCH_NONCE_REQUESTED = `enum RAND_R_TOO_MUCH_NONCE_REQUESTED = 136;`;
        static if(is(typeof({ mixin(enumMixinStr_RAND_R_TOO_MUCH_NONCE_REQUESTED); }))) {
            mixin(enumMixinStr_RAND_R_TOO_MUCH_NONCE_REQUESTED);
        }
    }




    static if(!is(typeof(RAND_R_UNSUPPORTED_DRBG_FLAGS))) {
        private enum enumMixinStr_RAND_R_UNSUPPORTED_DRBG_FLAGS = `enum RAND_R_UNSUPPORTED_DRBG_FLAGS = 132;`;
        static if(is(typeof({ mixin(enumMixinStr_RAND_R_UNSUPPORTED_DRBG_FLAGS); }))) {
            mixin(enumMixinStr_RAND_R_UNSUPPORTED_DRBG_FLAGS);
        }
    }




    static if(!is(typeof(RAND_R_UNSUPPORTED_DRBG_TYPE))) {
        private enum enumMixinStr_RAND_R_UNSUPPORTED_DRBG_TYPE = `enum RAND_R_UNSUPPORTED_DRBG_TYPE = 120;`;
        static if(is(typeof({ mixin(enumMixinStr_RAND_R_UNSUPPORTED_DRBG_TYPE); }))) {
            mixin(enumMixinStr_RAND_R_UNSUPPORTED_DRBG_TYPE);
        }
    }






    static if(!is(typeof(TLS1_CK_ADH_WITH_AES_128_SHA256))) {
        private enum enumMixinStr_TLS1_CK_ADH_WITH_AES_128_SHA256 = `enum TLS1_CK_ADH_WITH_AES_128_SHA256 = 0x0300006C;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_ADH_WITH_AES_128_SHA256); }))) {
            mixin(enumMixinStr_TLS1_CK_ADH_WITH_AES_128_SHA256);
        }
    }




    static if(!is(typeof(TLS1_CK_DHE_RSA_WITH_AES_256_SHA256))) {
        private enum enumMixinStr_TLS1_CK_DHE_RSA_WITH_AES_256_SHA256 = `enum TLS1_CK_DHE_RSA_WITH_AES_256_SHA256 = 0x0300006B;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_DHE_RSA_WITH_AES_256_SHA256); }))) {
            mixin(enumMixinStr_TLS1_CK_DHE_RSA_WITH_AES_256_SHA256);
        }
    }




    static if(!is(typeof(TLS1_CK_DHE_DSS_WITH_AES_256_SHA256))) {
        private enum enumMixinStr_TLS1_CK_DHE_DSS_WITH_AES_256_SHA256 = `enum TLS1_CK_DHE_DSS_WITH_AES_256_SHA256 = 0x0300006A;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_DHE_DSS_WITH_AES_256_SHA256); }))) {
            mixin(enumMixinStr_TLS1_CK_DHE_DSS_WITH_AES_256_SHA256);
        }
    }




    static if(!is(typeof(TLS1_CK_DH_RSA_WITH_AES_256_SHA256))) {
        private enum enumMixinStr_TLS1_CK_DH_RSA_WITH_AES_256_SHA256 = `enum TLS1_CK_DH_RSA_WITH_AES_256_SHA256 = 0x03000069;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_DH_RSA_WITH_AES_256_SHA256); }))) {
            mixin(enumMixinStr_TLS1_CK_DH_RSA_WITH_AES_256_SHA256);
        }
    }




    static if(!is(typeof(TLS1_CK_DH_DSS_WITH_AES_256_SHA256))) {
        private enum enumMixinStr_TLS1_CK_DH_DSS_WITH_AES_256_SHA256 = `enum TLS1_CK_DH_DSS_WITH_AES_256_SHA256 = 0x03000068;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_DH_DSS_WITH_AES_256_SHA256); }))) {
            mixin(enumMixinStr_TLS1_CK_DH_DSS_WITH_AES_256_SHA256);
        }
    }




    static if(!is(typeof(TLS1_CK_DHE_RSA_WITH_AES_128_SHA256))) {
        private enum enumMixinStr_TLS1_CK_DHE_RSA_WITH_AES_128_SHA256 = `enum TLS1_CK_DHE_RSA_WITH_AES_128_SHA256 = 0x03000067;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_DHE_RSA_WITH_AES_128_SHA256); }))) {
            mixin(enumMixinStr_TLS1_CK_DHE_RSA_WITH_AES_128_SHA256);
        }
    }




    static if(!is(typeof(TLS1_CK_ADH_WITH_CAMELLIA_128_CBC_SHA))) {
        private enum enumMixinStr_TLS1_CK_ADH_WITH_CAMELLIA_128_CBC_SHA = `enum TLS1_CK_ADH_WITH_CAMELLIA_128_CBC_SHA = 0x03000046;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_ADH_WITH_CAMELLIA_128_CBC_SHA); }))) {
            mixin(enumMixinStr_TLS1_CK_ADH_WITH_CAMELLIA_128_CBC_SHA);
        }
    }




    static if(!is(typeof(TLS1_CK_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA))) {
        private enum enumMixinStr_TLS1_CK_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA = `enum TLS1_CK_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA = 0x03000045;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA); }))) {
            mixin(enumMixinStr_TLS1_CK_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA);
        }
    }




    static if(!is(typeof(OPENSSL_RSA_MAX_MODULUS_BITS))) {
        private enum enumMixinStr_OPENSSL_RSA_MAX_MODULUS_BITS = `enum OPENSSL_RSA_MAX_MODULUS_BITS = 16384;`;
        static if(is(typeof({ mixin(enumMixinStr_OPENSSL_RSA_MAX_MODULUS_BITS); }))) {
            mixin(enumMixinStr_OPENSSL_RSA_MAX_MODULUS_BITS);
        }
    }




    static if(!is(typeof(OPENSSL_RSA_FIPS_MIN_MODULUS_BITS))) {
        private enum enumMixinStr_OPENSSL_RSA_FIPS_MIN_MODULUS_BITS = `enum OPENSSL_RSA_FIPS_MIN_MODULUS_BITS = 1024;`;
        static if(is(typeof({ mixin(enumMixinStr_OPENSSL_RSA_FIPS_MIN_MODULUS_BITS); }))) {
            mixin(enumMixinStr_OPENSSL_RSA_FIPS_MIN_MODULUS_BITS);
        }
    }




    static if(!is(typeof(OPENSSL_RSA_SMALL_MODULUS_BITS))) {
        private enum enumMixinStr_OPENSSL_RSA_SMALL_MODULUS_BITS = `enum OPENSSL_RSA_SMALL_MODULUS_BITS = 3072;`;
        static if(is(typeof({ mixin(enumMixinStr_OPENSSL_RSA_SMALL_MODULUS_BITS); }))) {
            mixin(enumMixinStr_OPENSSL_RSA_SMALL_MODULUS_BITS);
        }
    }




    static if(!is(typeof(OPENSSL_RSA_MAX_PUBEXP_BITS))) {
        private enum enumMixinStr_OPENSSL_RSA_MAX_PUBEXP_BITS = `enum OPENSSL_RSA_MAX_PUBEXP_BITS = 64;`;
        static if(is(typeof({ mixin(enumMixinStr_OPENSSL_RSA_MAX_PUBEXP_BITS); }))) {
            mixin(enumMixinStr_OPENSSL_RSA_MAX_PUBEXP_BITS);
        }
    }




    static if(!is(typeof(RSA_3))) {
        private enum enumMixinStr_RSA_3 = `enum RSA_3 = 0x3L;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_3); }))) {
            mixin(enumMixinStr_RSA_3);
        }
    }




    static if(!is(typeof(RSA_F4))) {
        private enum enumMixinStr_RSA_F4 = `enum RSA_F4 = 0x10001L;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_F4); }))) {
            mixin(enumMixinStr_RSA_F4);
        }
    }




    static if(!is(typeof(RSA_ASN1_VERSION_DEFAULT))) {
        private enum enumMixinStr_RSA_ASN1_VERSION_DEFAULT = `enum RSA_ASN1_VERSION_DEFAULT = 0;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_ASN1_VERSION_DEFAULT); }))) {
            mixin(enumMixinStr_RSA_ASN1_VERSION_DEFAULT);
        }
    }




    static if(!is(typeof(RSA_ASN1_VERSION_MULTI))) {
        private enum enumMixinStr_RSA_ASN1_VERSION_MULTI = `enum RSA_ASN1_VERSION_MULTI = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_ASN1_VERSION_MULTI); }))) {
            mixin(enumMixinStr_RSA_ASN1_VERSION_MULTI);
        }
    }




    static if(!is(typeof(RSA_DEFAULT_PRIME_NUM))) {
        private enum enumMixinStr_RSA_DEFAULT_PRIME_NUM = `enum RSA_DEFAULT_PRIME_NUM = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_DEFAULT_PRIME_NUM); }))) {
            mixin(enumMixinStr_RSA_DEFAULT_PRIME_NUM);
        }
    }




    static if(!is(typeof(RSA_METHOD_FLAG_NO_CHECK))) {
        private enum enumMixinStr_RSA_METHOD_FLAG_NO_CHECK = `enum RSA_METHOD_FLAG_NO_CHECK = 0x0001;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_METHOD_FLAG_NO_CHECK); }))) {
            mixin(enumMixinStr_RSA_METHOD_FLAG_NO_CHECK);
        }
    }




    static if(!is(typeof(RSA_FLAG_CACHE_PUBLIC))) {
        private enum enumMixinStr_RSA_FLAG_CACHE_PUBLIC = `enum RSA_FLAG_CACHE_PUBLIC = 0x0002;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_FLAG_CACHE_PUBLIC); }))) {
            mixin(enumMixinStr_RSA_FLAG_CACHE_PUBLIC);
        }
    }




    static if(!is(typeof(RSA_FLAG_CACHE_PRIVATE))) {
        private enum enumMixinStr_RSA_FLAG_CACHE_PRIVATE = `enum RSA_FLAG_CACHE_PRIVATE = 0x0004;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_FLAG_CACHE_PRIVATE); }))) {
            mixin(enumMixinStr_RSA_FLAG_CACHE_PRIVATE);
        }
    }




    static if(!is(typeof(RSA_FLAG_BLINDING))) {
        private enum enumMixinStr_RSA_FLAG_BLINDING = `enum RSA_FLAG_BLINDING = 0x0008;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_FLAG_BLINDING); }))) {
            mixin(enumMixinStr_RSA_FLAG_BLINDING);
        }
    }




    static if(!is(typeof(RSA_FLAG_THREAD_SAFE))) {
        private enum enumMixinStr_RSA_FLAG_THREAD_SAFE = `enum RSA_FLAG_THREAD_SAFE = 0x0010;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_FLAG_THREAD_SAFE); }))) {
            mixin(enumMixinStr_RSA_FLAG_THREAD_SAFE);
        }
    }




    static if(!is(typeof(RSA_FLAG_EXT_PKEY))) {
        private enum enumMixinStr_RSA_FLAG_EXT_PKEY = `enum RSA_FLAG_EXT_PKEY = 0x0020;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_FLAG_EXT_PKEY); }))) {
            mixin(enumMixinStr_RSA_FLAG_EXT_PKEY);
        }
    }




    static if(!is(typeof(RSA_FLAG_NO_BLINDING))) {
        private enum enumMixinStr_RSA_FLAG_NO_BLINDING = `enum RSA_FLAG_NO_BLINDING = 0x0080;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_FLAG_NO_BLINDING); }))) {
            mixin(enumMixinStr_RSA_FLAG_NO_BLINDING);
        }
    }




    static if(!is(typeof(TLS1_CK_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA))) {
        private enum enumMixinStr_TLS1_CK_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA = `enum TLS1_CK_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA = 0x03000044;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA); }))) {
            mixin(enumMixinStr_TLS1_CK_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA);
        }
    }




    static if(!is(typeof(RSA_FLAG_NO_CONSTTIME))) {
        private enum enumMixinStr_RSA_FLAG_NO_CONSTTIME = `enum RSA_FLAG_NO_CONSTTIME = 0x0000;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_FLAG_NO_CONSTTIME); }))) {
            mixin(enumMixinStr_RSA_FLAG_NO_CONSTTIME);
        }
    }




    static if(!is(typeof(TLS1_CK_DH_RSA_WITH_CAMELLIA_128_CBC_SHA))) {
        private enum enumMixinStr_TLS1_CK_DH_RSA_WITH_CAMELLIA_128_CBC_SHA = `enum TLS1_CK_DH_RSA_WITH_CAMELLIA_128_CBC_SHA = 0x03000043;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_DH_RSA_WITH_CAMELLIA_128_CBC_SHA); }))) {
            mixin(enumMixinStr_TLS1_CK_DH_RSA_WITH_CAMELLIA_128_CBC_SHA);
        }
    }




    static if(!is(typeof(RSA_FLAG_NO_EXP_CONSTTIME))) {
        private enum enumMixinStr_RSA_FLAG_NO_EXP_CONSTTIME = `enum RSA_FLAG_NO_EXP_CONSTTIME = 0x0000;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_FLAG_NO_EXP_CONSTTIME); }))) {
            mixin(enumMixinStr_RSA_FLAG_NO_EXP_CONSTTIME);
        }
    }
    static if(!is(typeof(RSA_PSS_SALTLEN_DIGEST))) {
        private enum enumMixinStr_RSA_PSS_SALTLEN_DIGEST = `enum RSA_PSS_SALTLEN_DIGEST = - 1;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_PSS_SALTLEN_DIGEST); }))) {
            mixin(enumMixinStr_RSA_PSS_SALTLEN_DIGEST);
        }
    }




    static if(!is(typeof(RSA_PSS_SALTLEN_AUTO))) {
        private enum enumMixinStr_RSA_PSS_SALTLEN_AUTO = `enum RSA_PSS_SALTLEN_AUTO = - 2;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_PSS_SALTLEN_AUTO); }))) {
            mixin(enumMixinStr_RSA_PSS_SALTLEN_AUTO);
        }
    }




    static if(!is(typeof(RSA_PSS_SALTLEN_MAX))) {
        private enum enumMixinStr_RSA_PSS_SALTLEN_MAX = `enum RSA_PSS_SALTLEN_MAX = - 3;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_PSS_SALTLEN_MAX); }))) {
            mixin(enumMixinStr_RSA_PSS_SALTLEN_MAX);
        }
    }




    static if(!is(typeof(RSA_PSS_SALTLEN_MAX_SIGN))) {
        private enum enumMixinStr_RSA_PSS_SALTLEN_MAX_SIGN = `enum RSA_PSS_SALTLEN_MAX_SIGN = - 2;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_PSS_SALTLEN_MAX_SIGN); }))) {
            mixin(enumMixinStr_RSA_PSS_SALTLEN_MAX_SIGN);
        }
    }
    static if(!is(typeof(EVP_PKEY_CTRL_RSA_PADDING))) {
        private enum enumMixinStr_EVP_PKEY_CTRL_RSA_PADDING = `enum EVP_PKEY_CTRL_RSA_PADDING = ( 0x1000 + 1 );`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_PKEY_CTRL_RSA_PADDING); }))) {
            mixin(enumMixinStr_EVP_PKEY_CTRL_RSA_PADDING);
        }
    }




    static if(!is(typeof(EVP_PKEY_CTRL_RSA_PSS_SALTLEN))) {
        private enum enumMixinStr_EVP_PKEY_CTRL_RSA_PSS_SALTLEN = `enum EVP_PKEY_CTRL_RSA_PSS_SALTLEN = ( 0x1000 + 2 );`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_PKEY_CTRL_RSA_PSS_SALTLEN); }))) {
            mixin(enumMixinStr_EVP_PKEY_CTRL_RSA_PSS_SALTLEN);
        }
    }




    static if(!is(typeof(EVP_PKEY_CTRL_RSA_KEYGEN_BITS))) {
        private enum enumMixinStr_EVP_PKEY_CTRL_RSA_KEYGEN_BITS = `enum EVP_PKEY_CTRL_RSA_KEYGEN_BITS = ( 0x1000 + 3 );`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_PKEY_CTRL_RSA_KEYGEN_BITS); }))) {
            mixin(enumMixinStr_EVP_PKEY_CTRL_RSA_KEYGEN_BITS);
        }
    }




    static if(!is(typeof(EVP_PKEY_CTRL_RSA_KEYGEN_PUBEXP))) {
        private enum enumMixinStr_EVP_PKEY_CTRL_RSA_KEYGEN_PUBEXP = `enum EVP_PKEY_CTRL_RSA_KEYGEN_PUBEXP = ( 0x1000 + 4 );`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_PKEY_CTRL_RSA_KEYGEN_PUBEXP); }))) {
            mixin(enumMixinStr_EVP_PKEY_CTRL_RSA_KEYGEN_PUBEXP);
        }
    }




    static if(!is(typeof(EVP_PKEY_CTRL_RSA_MGF1_MD))) {
        private enum enumMixinStr_EVP_PKEY_CTRL_RSA_MGF1_MD = `enum EVP_PKEY_CTRL_RSA_MGF1_MD = ( 0x1000 + 5 );`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_PKEY_CTRL_RSA_MGF1_MD); }))) {
            mixin(enumMixinStr_EVP_PKEY_CTRL_RSA_MGF1_MD);
        }
    }




    static if(!is(typeof(EVP_PKEY_CTRL_GET_RSA_PADDING))) {
        private enum enumMixinStr_EVP_PKEY_CTRL_GET_RSA_PADDING = `enum EVP_PKEY_CTRL_GET_RSA_PADDING = ( 0x1000 + 6 );`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_PKEY_CTRL_GET_RSA_PADDING); }))) {
            mixin(enumMixinStr_EVP_PKEY_CTRL_GET_RSA_PADDING);
        }
    }




    static if(!is(typeof(EVP_PKEY_CTRL_GET_RSA_PSS_SALTLEN))) {
        private enum enumMixinStr_EVP_PKEY_CTRL_GET_RSA_PSS_SALTLEN = `enum EVP_PKEY_CTRL_GET_RSA_PSS_SALTLEN = ( 0x1000 + 7 );`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_PKEY_CTRL_GET_RSA_PSS_SALTLEN); }))) {
            mixin(enumMixinStr_EVP_PKEY_CTRL_GET_RSA_PSS_SALTLEN);
        }
    }




    static if(!is(typeof(EVP_PKEY_CTRL_GET_RSA_MGF1_MD))) {
        private enum enumMixinStr_EVP_PKEY_CTRL_GET_RSA_MGF1_MD = `enum EVP_PKEY_CTRL_GET_RSA_MGF1_MD = ( 0x1000 + 8 );`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_PKEY_CTRL_GET_RSA_MGF1_MD); }))) {
            mixin(enumMixinStr_EVP_PKEY_CTRL_GET_RSA_MGF1_MD);
        }
    }




    static if(!is(typeof(EVP_PKEY_CTRL_RSA_OAEP_MD))) {
        private enum enumMixinStr_EVP_PKEY_CTRL_RSA_OAEP_MD = `enum EVP_PKEY_CTRL_RSA_OAEP_MD = ( 0x1000 + 9 );`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_PKEY_CTRL_RSA_OAEP_MD); }))) {
            mixin(enumMixinStr_EVP_PKEY_CTRL_RSA_OAEP_MD);
        }
    }




    static if(!is(typeof(EVP_PKEY_CTRL_RSA_OAEP_LABEL))) {
        private enum enumMixinStr_EVP_PKEY_CTRL_RSA_OAEP_LABEL = `enum EVP_PKEY_CTRL_RSA_OAEP_LABEL = ( 0x1000 + 10 );`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_PKEY_CTRL_RSA_OAEP_LABEL); }))) {
            mixin(enumMixinStr_EVP_PKEY_CTRL_RSA_OAEP_LABEL);
        }
    }




    static if(!is(typeof(EVP_PKEY_CTRL_GET_RSA_OAEP_MD))) {
        private enum enumMixinStr_EVP_PKEY_CTRL_GET_RSA_OAEP_MD = `enum EVP_PKEY_CTRL_GET_RSA_OAEP_MD = ( 0x1000 + 11 );`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_PKEY_CTRL_GET_RSA_OAEP_MD); }))) {
            mixin(enumMixinStr_EVP_PKEY_CTRL_GET_RSA_OAEP_MD);
        }
    }




    static if(!is(typeof(EVP_PKEY_CTRL_GET_RSA_OAEP_LABEL))) {
        private enum enumMixinStr_EVP_PKEY_CTRL_GET_RSA_OAEP_LABEL = `enum EVP_PKEY_CTRL_GET_RSA_OAEP_LABEL = ( 0x1000 + 12 );`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_PKEY_CTRL_GET_RSA_OAEP_LABEL); }))) {
            mixin(enumMixinStr_EVP_PKEY_CTRL_GET_RSA_OAEP_LABEL);
        }
    }




    static if(!is(typeof(EVP_PKEY_CTRL_RSA_KEYGEN_PRIMES))) {
        private enum enumMixinStr_EVP_PKEY_CTRL_RSA_KEYGEN_PRIMES = `enum EVP_PKEY_CTRL_RSA_KEYGEN_PRIMES = ( 0x1000 + 13 );`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_PKEY_CTRL_RSA_KEYGEN_PRIMES); }))) {
            mixin(enumMixinStr_EVP_PKEY_CTRL_RSA_KEYGEN_PRIMES);
        }
    }




    static if(!is(typeof(RSA_PKCS1_PADDING))) {
        private enum enumMixinStr_RSA_PKCS1_PADDING = `enum RSA_PKCS1_PADDING = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_PKCS1_PADDING); }))) {
            mixin(enumMixinStr_RSA_PKCS1_PADDING);
        }
    }




    static if(!is(typeof(RSA_SSLV23_PADDING))) {
        private enum enumMixinStr_RSA_SSLV23_PADDING = `enum RSA_SSLV23_PADDING = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_SSLV23_PADDING); }))) {
            mixin(enumMixinStr_RSA_SSLV23_PADDING);
        }
    }




    static if(!is(typeof(RSA_NO_PADDING))) {
        private enum enumMixinStr_RSA_NO_PADDING = `enum RSA_NO_PADDING = 3;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_NO_PADDING); }))) {
            mixin(enumMixinStr_RSA_NO_PADDING);
        }
    }




    static if(!is(typeof(RSA_PKCS1_OAEP_PADDING))) {
        private enum enumMixinStr_RSA_PKCS1_OAEP_PADDING = `enum RSA_PKCS1_OAEP_PADDING = 4;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_PKCS1_OAEP_PADDING); }))) {
            mixin(enumMixinStr_RSA_PKCS1_OAEP_PADDING);
        }
    }




    static if(!is(typeof(RSA_X931_PADDING))) {
        private enum enumMixinStr_RSA_X931_PADDING = `enum RSA_X931_PADDING = 5;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_X931_PADDING); }))) {
            mixin(enumMixinStr_RSA_X931_PADDING);
        }
    }




    static if(!is(typeof(RSA_PKCS1_PSS_PADDING))) {
        private enum enumMixinStr_RSA_PKCS1_PSS_PADDING = `enum RSA_PKCS1_PSS_PADDING = 6;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_PKCS1_PSS_PADDING); }))) {
            mixin(enumMixinStr_RSA_PKCS1_PSS_PADDING);
        }
    }




    static if(!is(typeof(RSA_PKCS1_PADDING_SIZE))) {
        private enum enumMixinStr_RSA_PKCS1_PADDING_SIZE = `enum RSA_PKCS1_PADDING_SIZE = 11;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_PKCS1_PADDING_SIZE); }))) {
            mixin(enumMixinStr_RSA_PKCS1_PADDING_SIZE);
        }
    }
    static if(!is(typeof(TLS1_CK_DH_DSS_WITH_CAMELLIA_128_CBC_SHA))) {
        private enum enumMixinStr_TLS1_CK_DH_DSS_WITH_CAMELLIA_128_CBC_SHA = `enum TLS1_CK_DH_DSS_WITH_CAMELLIA_128_CBC_SHA = 0x03000042;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_DH_DSS_WITH_CAMELLIA_128_CBC_SHA); }))) {
            mixin(enumMixinStr_TLS1_CK_DH_DSS_WITH_CAMELLIA_128_CBC_SHA);
        }
    }




    static if(!is(typeof(TLS1_CK_RSA_WITH_CAMELLIA_128_CBC_SHA))) {
        private enum enumMixinStr_TLS1_CK_RSA_WITH_CAMELLIA_128_CBC_SHA = `enum TLS1_CK_RSA_WITH_CAMELLIA_128_CBC_SHA = 0x03000041;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_RSA_WITH_CAMELLIA_128_CBC_SHA); }))) {
            mixin(enumMixinStr_TLS1_CK_RSA_WITH_CAMELLIA_128_CBC_SHA);
        }
    }




    static if(!is(typeof(TLS1_CK_DHE_DSS_WITH_AES_128_SHA256))) {
        private enum enumMixinStr_TLS1_CK_DHE_DSS_WITH_AES_128_SHA256 = `enum TLS1_CK_DHE_DSS_WITH_AES_128_SHA256 = 0x03000040;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_DHE_DSS_WITH_AES_128_SHA256); }))) {
            mixin(enumMixinStr_TLS1_CK_DHE_DSS_WITH_AES_128_SHA256);
        }
    }




    static if(!is(typeof(TLS1_CK_DH_RSA_WITH_AES_128_SHA256))) {
        private enum enumMixinStr_TLS1_CK_DH_RSA_WITH_AES_128_SHA256 = `enum TLS1_CK_DH_RSA_WITH_AES_128_SHA256 = 0x0300003F;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_DH_RSA_WITH_AES_128_SHA256); }))) {
            mixin(enumMixinStr_TLS1_CK_DH_RSA_WITH_AES_128_SHA256);
        }
    }




    static if(!is(typeof(TLS1_CK_DH_DSS_WITH_AES_128_SHA256))) {
        private enum enumMixinStr_TLS1_CK_DH_DSS_WITH_AES_128_SHA256 = `enum TLS1_CK_DH_DSS_WITH_AES_128_SHA256 = 0x0300003E;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_DH_DSS_WITH_AES_128_SHA256); }))) {
            mixin(enumMixinStr_TLS1_CK_DH_DSS_WITH_AES_128_SHA256);
        }
    }




    static if(!is(typeof(TLS1_CK_RSA_WITH_AES_256_SHA256))) {
        private enum enumMixinStr_TLS1_CK_RSA_WITH_AES_256_SHA256 = `enum TLS1_CK_RSA_WITH_AES_256_SHA256 = 0x0300003D;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_RSA_WITH_AES_256_SHA256); }))) {
            mixin(enumMixinStr_TLS1_CK_RSA_WITH_AES_256_SHA256);
        }
    }




    static if(!is(typeof(TLS1_CK_RSA_WITH_AES_128_SHA256))) {
        private enum enumMixinStr_TLS1_CK_RSA_WITH_AES_128_SHA256 = `enum TLS1_CK_RSA_WITH_AES_128_SHA256 = 0x0300003C;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_RSA_WITH_AES_128_SHA256); }))) {
            mixin(enumMixinStr_TLS1_CK_RSA_WITH_AES_128_SHA256);
        }
    }




    static if(!is(typeof(TLS1_CK_RSA_WITH_NULL_SHA256))) {
        private enum enumMixinStr_TLS1_CK_RSA_WITH_NULL_SHA256 = `enum TLS1_CK_RSA_WITH_NULL_SHA256 = 0x0300003B;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_RSA_WITH_NULL_SHA256); }))) {
            mixin(enumMixinStr_TLS1_CK_RSA_WITH_NULL_SHA256);
        }
    }




    static if(!is(typeof(TLS1_CK_ADH_WITH_AES_256_SHA))) {
        private enum enumMixinStr_TLS1_CK_ADH_WITH_AES_256_SHA = `enum TLS1_CK_ADH_WITH_AES_256_SHA = 0x0300003A;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_ADH_WITH_AES_256_SHA); }))) {
            mixin(enumMixinStr_TLS1_CK_ADH_WITH_AES_256_SHA);
        }
    }




    static if(!is(typeof(TLS1_CK_DHE_RSA_WITH_AES_256_SHA))) {
        private enum enumMixinStr_TLS1_CK_DHE_RSA_WITH_AES_256_SHA = `enum TLS1_CK_DHE_RSA_WITH_AES_256_SHA = 0x03000039;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_DHE_RSA_WITH_AES_256_SHA); }))) {
            mixin(enumMixinStr_TLS1_CK_DHE_RSA_WITH_AES_256_SHA);
        }
    }




    static if(!is(typeof(TLS1_CK_DHE_DSS_WITH_AES_256_SHA))) {
        private enum enumMixinStr_TLS1_CK_DHE_DSS_WITH_AES_256_SHA = `enum TLS1_CK_DHE_DSS_WITH_AES_256_SHA = 0x03000038;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_DHE_DSS_WITH_AES_256_SHA); }))) {
            mixin(enumMixinStr_TLS1_CK_DHE_DSS_WITH_AES_256_SHA);
        }
    }




    static if(!is(typeof(TLS1_CK_DH_RSA_WITH_AES_256_SHA))) {
        private enum enumMixinStr_TLS1_CK_DH_RSA_WITH_AES_256_SHA = `enum TLS1_CK_DH_RSA_WITH_AES_256_SHA = 0x03000037;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_DH_RSA_WITH_AES_256_SHA); }))) {
            mixin(enumMixinStr_TLS1_CK_DH_RSA_WITH_AES_256_SHA);
        }
    }




    static if(!is(typeof(TLS1_CK_DH_DSS_WITH_AES_256_SHA))) {
        private enum enumMixinStr_TLS1_CK_DH_DSS_WITH_AES_256_SHA = `enum TLS1_CK_DH_DSS_WITH_AES_256_SHA = 0x03000036;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_DH_DSS_WITH_AES_256_SHA); }))) {
            mixin(enumMixinStr_TLS1_CK_DH_DSS_WITH_AES_256_SHA);
        }
    }




    static if(!is(typeof(TLS1_CK_RSA_WITH_AES_256_SHA))) {
        private enum enumMixinStr_TLS1_CK_RSA_WITH_AES_256_SHA = `enum TLS1_CK_RSA_WITH_AES_256_SHA = 0x03000035;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_RSA_WITH_AES_256_SHA); }))) {
            mixin(enumMixinStr_TLS1_CK_RSA_WITH_AES_256_SHA);
        }
    }




    static if(!is(typeof(TLS1_CK_ADH_WITH_AES_128_SHA))) {
        private enum enumMixinStr_TLS1_CK_ADH_WITH_AES_128_SHA = `enum TLS1_CK_ADH_WITH_AES_128_SHA = 0x03000034;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_ADH_WITH_AES_128_SHA); }))) {
            mixin(enumMixinStr_TLS1_CK_ADH_WITH_AES_128_SHA);
        }
    }




    static if(!is(typeof(TLS1_CK_DHE_RSA_WITH_AES_128_SHA))) {
        private enum enumMixinStr_TLS1_CK_DHE_RSA_WITH_AES_128_SHA = `enum TLS1_CK_DHE_RSA_WITH_AES_128_SHA = 0x03000033;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_DHE_RSA_WITH_AES_128_SHA); }))) {
            mixin(enumMixinStr_TLS1_CK_DHE_RSA_WITH_AES_128_SHA);
        }
    }




    static if(!is(typeof(TLS1_CK_DHE_DSS_WITH_AES_128_SHA))) {
        private enum enumMixinStr_TLS1_CK_DHE_DSS_WITH_AES_128_SHA = `enum TLS1_CK_DHE_DSS_WITH_AES_128_SHA = 0x03000032;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_DHE_DSS_WITH_AES_128_SHA); }))) {
            mixin(enumMixinStr_TLS1_CK_DHE_DSS_WITH_AES_128_SHA);
        }
    }




    static if(!is(typeof(TLS1_CK_DH_RSA_WITH_AES_128_SHA))) {
        private enum enumMixinStr_TLS1_CK_DH_RSA_WITH_AES_128_SHA = `enum TLS1_CK_DH_RSA_WITH_AES_128_SHA = 0x03000031;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_DH_RSA_WITH_AES_128_SHA); }))) {
            mixin(enumMixinStr_TLS1_CK_DH_RSA_WITH_AES_128_SHA);
        }
    }




    static if(!is(typeof(TLS1_CK_DH_DSS_WITH_AES_128_SHA))) {
        private enum enumMixinStr_TLS1_CK_DH_DSS_WITH_AES_128_SHA = `enum TLS1_CK_DH_DSS_WITH_AES_128_SHA = 0x03000030;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_DH_DSS_WITH_AES_128_SHA); }))) {
            mixin(enumMixinStr_TLS1_CK_DH_DSS_WITH_AES_128_SHA);
        }
    }




    static if(!is(typeof(TLS1_CK_RSA_WITH_AES_128_SHA))) {
        private enum enumMixinStr_TLS1_CK_RSA_WITH_AES_128_SHA = `enum TLS1_CK_RSA_WITH_AES_128_SHA = 0x0300002F;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_RSA_WITH_AES_128_SHA); }))) {
            mixin(enumMixinStr_TLS1_CK_RSA_WITH_AES_128_SHA);
        }
    }




    static if(!is(typeof(TLS1_CK_RSA_PSK_WITH_NULL_SHA))) {
        private enum enumMixinStr_TLS1_CK_RSA_PSK_WITH_NULL_SHA = `enum TLS1_CK_RSA_PSK_WITH_NULL_SHA = 0x0300002E;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_RSA_PSK_WITH_NULL_SHA); }))) {
            mixin(enumMixinStr_TLS1_CK_RSA_PSK_WITH_NULL_SHA);
        }
    }




    static if(!is(typeof(TLS1_CK_DHE_PSK_WITH_NULL_SHA))) {
        private enum enumMixinStr_TLS1_CK_DHE_PSK_WITH_NULL_SHA = `enum TLS1_CK_DHE_PSK_WITH_NULL_SHA = 0x0300002D;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_DHE_PSK_WITH_NULL_SHA); }))) {
            mixin(enumMixinStr_TLS1_CK_DHE_PSK_WITH_NULL_SHA);
        }
    }




    static if(!is(typeof(TLS1_CK_PSK_WITH_NULL_SHA))) {
        private enum enumMixinStr_TLS1_CK_PSK_WITH_NULL_SHA = `enum TLS1_CK_PSK_WITH_NULL_SHA = 0x0300002C;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_PSK_WITH_NULL_SHA); }))) {
            mixin(enumMixinStr_TLS1_CK_PSK_WITH_NULL_SHA);
        }
    }




    static if(!is(typeof(TLS1_CK_RSA_PSK_WITH_NULL_SHA384))) {
        private enum enumMixinStr_TLS1_CK_RSA_PSK_WITH_NULL_SHA384 = `enum TLS1_CK_RSA_PSK_WITH_NULL_SHA384 = 0x030000B9;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_RSA_PSK_WITH_NULL_SHA384); }))) {
            mixin(enumMixinStr_TLS1_CK_RSA_PSK_WITH_NULL_SHA384);
        }
    }




    static if(!is(typeof(TLS1_CK_RSA_PSK_WITH_NULL_SHA256))) {
        private enum enumMixinStr_TLS1_CK_RSA_PSK_WITH_NULL_SHA256 = `enum TLS1_CK_RSA_PSK_WITH_NULL_SHA256 = 0x030000B8;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_RSA_PSK_WITH_NULL_SHA256); }))) {
            mixin(enumMixinStr_TLS1_CK_RSA_PSK_WITH_NULL_SHA256);
        }
    }




    static if(!is(typeof(TLS1_CK_RSA_PSK_WITH_AES_256_CBC_SHA384))) {
        private enum enumMixinStr_TLS1_CK_RSA_PSK_WITH_AES_256_CBC_SHA384 = `enum TLS1_CK_RSA_PSK_WITH_AES_256_CBC_SHA384 = 0x030000B7;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_RSA_PSK_WITH_AES_256_CBC_SHA384); }))) {
            mixin(enumMixinStr_TLS1_CK_RSA_PSK_WITH_AES_256_CBC_SHA384);
        }
    }




    static if(!is(typeof(TLS1_CK_RSA_PSK_WITH_AES_128_CBC_SHA256))) {
        private enum enumMixinStr_TLS1_CK_RSA_PSK_WITH_AES_128_CBC_SHA256 = `enum TLS1_CK_RSA_PSK_WITH_AES_128_CBC_SHA256 = 0x030000B6;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_RSA_PSK_WITH_AES_128_CBC_SHA256); }))) {
            mixin(enumMixinStr_TLS1_CK_RSA_PSK_WITH_AES_128_CBC_SHA256);
        }
    }




    static if(!is(typeof(TLS1_CK_DHE_PSK_WITH_NULL_SHA384))) {
        private enum enumMixinStr_TLS1_CK_DHE_PSK_WITH_NULL_SHA384 = `enum TLS1_CK_DHE_PSK_WITH_NULL_SHA384 = 0x030000B5;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_DHE_PSK_WITH_NULL_SHA384); }))) {
            mixin(enumMixinStr_TLS1_CK_DHE_PSK_WITH_NULL_SHA384);
        }
    }




    static if(!is(typeof(TLS1_CK_DHE_PSK_WITH_NULL_SHA256))) {
        private enum enumMixinStr_TLS1_CK_DHE_PSK_WITH_NULL_SHA256 = `enum TLS1_CK_DHE_PSK_WITH_NULL_SHA256 = 0x030000B4;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_DHE_PSK_WITH_NULL_SHA256); }))) {
            mixin(enumMixinStr_TLS1_CK_DHE_PSK_WITH_NULL_SHA256);
        }
    }




    static if(!is(typeof(TLS1_CK_DHE_PSK_WITH_AES_256_CBC_SHA384))) {
        private enum enumMixinStr_TLS1_CK_DHE_PSK_WITH_AES_256_CBC_SHA384 = `enum TLS1_CK_DHE_PSK_WITH_AES_256_CBC_SHA384 = 0x030000B3;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_DHE_PSK_WITH_AES_256_CBC_SHA384); }))) {
            mixin(enumMixinStr_TLS1_CK_DHE_PSK_WITH_AES_256_CBC_SHA384);
        }
    }




    static if(!is(typeof(TLS1_CK_DHE_PSK_WITH_AES_128_CBC_SHA256))) {
        private enum enumMixinStr_TLS1_CK_DHE_PSK_WITH_AES_128_CBC_SHA256 = `enum TLS1_CK_DHE_PSK_WITH_AES_128_CBC_SHA256 = 0x030000B2;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_DHE_PSK_WITH_AES_128_CBC_SHA256); }))) {
            mixin(enumMixinStr_TLS1_CK_DHE_PSK_WITH_AES_128_CBC_SHA256);
        }
    }




    static if(!is(typeof(TLS1_CK_PSK_WITH_NULL_SHA384))) {
        private enum enumMixinStr_TLS1_CK_PSK_WITH_NULL_SHA384 = `enum TLS1_CK_PSK_WITH_NULL_SHA384 = 0x030000B1;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_PSK_WITH_NULL_SHA384); }))) {
            mixin(enumMixinStr_TLS1_CK_PSK_WITH_NULL_SHA384);
        }
    }




    static if(!is(typeof(TLS1_CK_PSK_WITH_NULL_SHA256))) {
        private enum enumMixinStr_TLS1_CK_PSK_WITH_NULL_SHA256 = `enum TLS1_CK_PSK_WITH_NULL_SHA256 = 0x030000B0;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_PSK_WITH_NULL_SHA256); }))) {
            mixin(enumMixinStr_TLS1_CK_PSK_WITH_NULL_SHA256);
        }
    }




    static if(!is(typeof(TLS1_CK_PSK_WITH_AES_256_CBC_SHA384))) {
        private enum enumMixinStr_TLS1_CK_PSK_WITH_AES_256_CBC_SHA384 = `enum TLS1_CK_PSK_WITH_AES_256_CBC_SHA384 = 0x030000AF;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_PSK_WITH_AES_256_CBC_SHA384); }))) {
            mixin(enumMixinStr_TLS1_CK_PSK_WITH_AES_256_CBC_SHA384);
        }
    }




    static if(!is(typeof(TLS1_CK_PSK_WITH_AES_128_CBC_SHA256))) {
        private enum enumMixinStr_TLS1_CK_PSK_WITH_AES_128_CBC_SHA256 = `enum TLS1_CK_PSK_WITH_AES_128_CBC_SHA256 = 0x030000AE;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_PSK_WITH_AES_128_CBC_SHA256); }))) {
            mixin(enumMixinStr_TLS1_CK_PSK_WITH_AES_128_CBC_SHA256);
        }
    }




    static if(!is(typeof(TLS1_CK_RSA_PSK_WITH_AES_256_GCM_SHA384))) {
        private enum enumMixinStr_TLS1_CK_RSA_PSK_WITH_AES_256_GCM_SHA384 = `enum TLS1_CK_RSA_PSK_WITH_AES_256_GCM_SHA384 = 0x030000AD;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_RSA_PSK_WITH_AES_256_GCM_SHA384); }))) {
            mixin(enumMixinStr_TLS1_CK_RSA_PSK_WITH_AES_256_GCM_SHA384);
        }
    }




    static if(!is(typeof(TLS1_CK_RSA_PSK_WITH_AES_128_GCM_SHA256))) {
        private enum enumMixinStr_TLS1_CK_RSA_PSK_WITH_AES_128_GCM_SHA256 = `enum TLS1_CK_RSA_PSK_WITH_AES_128_GCM_SHA256 = 0x030000AC;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_RSA_PSK_WITH_AES_128_GCM_SHA256); }))) {
            mixin(enumMixinStr_TLS1_CK_RSA_PSK_WITH_AES_128_GCM_SHA256);
        }
    }




    static if(!is(typeof(TLS1_CK_DHE_PSK_WITH_AES_256_GCM_SHA384))) {
        private enum enumMixinStr_TLS1_CK_DHE_PSK_WITH_AES_256_GCM_SHA384 = `enum TLS1_CK_DHE_PSK_WITH_AES_256_GCM_SHA384 = 0x030000AB;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_DHE_PSK_WITH_AES_256_GCM_SHA384); }))) {
            mixin(enumMixinStr_TLS1_CK_DHE_PSK_WITH_AES_256_GCM_SHA384);
        }
    }




    static if(!is(typeof(TLS1_CK_DHE_PSK_WITH_AES_128_GCM_SHA256))) {
        private enum enumMixinStr_TLS1_CK_DHE_PSK_WITH_AES_128_GCM_SHA256 = `enum TLS1_CK_DHE_PSK_WITH_AES_128_GCM_SHA256 = 0x030000AA;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_DHE_PSK_WITH_AES_128_GCM_SHA256); }))) {
            mixin(enumMixinStr_TLS1_CK_DHE_PSK_WITH_AES_128_GCM_SHA256);
        }
    }




    static if(!is(typeof(TLS1_CK_PSK_WITH_AES_256_GCM_SHA384))) {
        private enum enumMixinStr_TLS1_CK_PSK_WITH_AES_256_GCM_SHA384 = `enum TLS1_CK_PSK_WITH_AES_256_GCM_SHA384 = 0x030000A9;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_PSK_WITH_AES_256_GCM_SHA384); }))) {
            mixin(enumMixinStr_TLS1_CK_PSK_WITH_AES_256_GCM_SHA384);
        }
    }




    static if(!is(typeof(TLS1_CK_PSK_WITH_AES_128_GCM_SHA256))) {
        private enum enumMixinStr_TLS1_CK_PSK_WITH_AES_128_GCM_SHA256 = `enum TLS1_CK_PSK_WITH_AES_128_GCM_SHA256 = 0x030000A8;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_PSK_WITH_AES_128_GCM_SHA256); }))) {
            mixin(enumMixinStr_TLS1_CK_PSK_WITH_AES_128_GCM_SHA256);
        }
    }




    static if(!is(typeof(TLS1_CK_RSA_PSK_WITH_AES_256_CBC_SHA))) {
        private enum enumMixinStr_TLS1_CK_RSA_PSK_WITH_AES_256_CBC_SHA = `enum TLS1_CK_RSA_PSK_WITH_AES_256_CBC_SHA = 0x03000095;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_RSA_PSK_WITH_AES_256_CBC_SHA); }))) {
            mixin(enumMixinStr_TLS1_CK_RSA_PSK_WITH_AES_256_CBC_SHA);
        }
    }




    static if(!is(typeof(TLS1_CK_RSA_PSK_WITH_AES_128_CBC_SHA))) {
        private enum enumMixinStr_TLS1_CK_RSA_PSK_WITH_AES_128_CBC_SHA = `enum TLS1_CK_RSA_PSK_WITH_AES_128_CBC_SHA = 0x03000094;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_RSA_PSK_WITH_AES_128_CBC_SHA); }))) {
            mixin(enumMixinStr_TLS1_CK_RSA_PSK_WITH_AES_128_CBC_SHA);
        }
    }




    static if(!is(typeof(TLS1_CK_RSA_PSK_WITH_3DES_EDE_CBC_SHA))) {
        private enum enumMixinStr_TLS1_CK_RSA_PSK_WITH_3DES_EDE_CBC_SHA = `enum TLS1_CK_RSA_PSK_WITH_3DES_EDE_CBC_SHA = 0x03000093;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_RSA_PSK_WITH_3DES_EDE_CBC_SHA); }))) {
            mixin(enumMixinStr_TLS1_CK_RSA_PSK_WITH_3DES_EDE_CBC_SHA);
        }
    }




    static if(!is(typeof(TLS1_CK_RSA_PSK_WITH_RC4_128_SHA))) {
        private enum enumMixinStr_TLS1_CK_RSA_PSK_WITH_RC4_128_SHA = `enum TLS1_CK_RSA_PSK_WITH_RC4_128_SHA = 0x03000092;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_RSA_PSK_WITH_RC4_128_SHA); }))) {
            mixin(enumMixinStr_TLS1_CK_RSA_PSK_WITH_RC4_128_SHA);
        }
    }




    static if(!is(typeof(TLS1_CK_DHE_PSK_WITH_AES_256_CBC_SHA))) {
        private enum enumMixinStr_TLS1_CK_DHE_PSK_WITH_AES_256_CBC_SHA = `enum TLS1_CK_DHE_PSK_WITH_AES_256_CBC_SHA = 0x03000091;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_DHE_PSK_WITH_AES_256_CBC_SHA); }))) {
            mixin(enumMixinStr_TLS1_CK_DHE_PSK_WITH_AES_256_CBC_SHA);
        }
    }




    static if(!is(typeof(TLS1_CK_DHE_PSK_WITH_AES_128_CBC_SHA))) {
        private enum enumMixinStr_TLS1_CK_DHE_PSK_WITH_AES_128_CBC_SHA = `enum TLS1_CK_DHE_PSK_WITH_AES_128_CBC_SHA = 0x03000090;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_DHE_PSK_WITH_AES_128_CBC_SHA); }))) {
            mixin(enumMixinStr_TLS1_CK_DHE_PSK_WITH_AES_128_CBC_SHA);
        }
    }




    static if(!is(typeof(TLS1_CK_DHE_PSK_WITH_3DES_EDE_CBC_SHA))) {
        private enum enumMixinStr_TLS1_CK_DHE_PSK_WITH_3DES_EDE_CBC_SHA = `enum TLS1_CK_DHE_PSK_WITH_3DES_EDE_CBC_SHA = 0x0300008F;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_DHE_PSK_WITH_3DES_EDE_CBC_SHA); }))) {
            mixin(enumMixinStr_TLS1_CK_DHE_PSK_WITH_3DES_EDE_CBC_SHA);
        }
    }




    static if(!is(typeof(TLS1_CK_DHE_PSK_WITH_RC4_128_SHA))) {
        private enum enumMixinStr_TLS1_CK_DHE_PSK_WITH_RC4_128_SHA = `enum TLS1_CK_DHE_PSK_WITH_RC4_128_SHA = 0x0300008E;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_DHE_PSK_WITH_RC4_128_SHA); }))) {
            mixin(enumMixinStr_TLS1_CK_DHE_PSK_WITH_RC4_128_SHA);
        }
    }




    static if(!is(typeof(TLS1_CK_PSK_WITH_AES_256_CBC_SHA))) {
        private enum enumMixinStr_TLS1_CK_PSK_WITH_AES_256_CBC_SHA = `enum TLS1_CK_PSK_WITH_AES_256_CBC_SHA = 0x0300008D;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_PSK_WITH_AES_256_CBC_SHA); }))) {
            mixin(enumMixinStr_TLS1_CK_PSK_WITH_AES_256_CBC_SHA);
        }
    }




    static if(!is(typeof(TLS1_CK_PSK_WITH_AES_128_CBC_SHA))) {
        private enum enumMixinStr_TLS1_CK_PSK_WITH_AES_128_CBC_SHA = `enum TLS1_CK_PSK_WITH_AES_128_CBC_SHA = 0x0300008C;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_PSK_WITH_AES_128_CBC_SHA); }))) {
            mixin(enumMixinStr_TLS1_CK_PSK_WITH_AES_128_CBC_SHA);
        }
    }




    static if(!is(typeof(TLS1_CK_PSK_WITH_3DES_EDE_CBC_SHA))) {
        private enum enumMixinStr_TLS1_CK_PSK_WITH_3DES_EDE_CBC_SHA = `enum TLS1_CK_PSK_WITH_3DES_EDE_CBC_SHA = 0x0300008B;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_PSK_WITH_3DES_EDE_CBC_SHA); }))) {
            mixin(enumMixinStr_TLS1_CK_PSK_WITH_3DES_EDE_CBC_SHA);
        }
    }




    static if(!is(typeof(TLS1_CK_PSK_WITH_RC4_128_SHA))) {
        private enum enumMixinStr_TLS1_CK_PSK_WITH_RC4_128_SHA = `enum TLS1_CK_PSK_WITH_RC4_128_SHA = 0x0300008A;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_CK_PSK_WITH_RC4_128_SHA); }))) {
            mixin(enumMixinStr_TLS1_CK_PSK_WITH_RC4_128_SHA);
        }
    }
    static if(!is(typeof(SSL_TLSEXT_ERR_NOACK))) {
        private enum enumMixinStr_SSL_TLSEXT_ERR_NOACK = `enum SSL_TLSEXT_ERR_NOACK = 3;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_TLSEXT_ERR_NOACK); }))) {
            mixin(enumMixinStr_SSL_TLSEXT_ERR_NOACK);
        }
    }




    static if(!is(typeof(SSL_TLSEXT_ERR_ALERT_FATAL))) {
        private enum enumMixinStr_SSL_TLSEXT_ERR_ALERT_FATAL = `enum SSL_TLSEXT_ERR_ALERT_FATAL = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_TLSEXT_ERR_ALERT_FATAL); }))) {
            mixin(enumMixinStr_SSL_TLSEXT_ERR_ALERT_FATAL);
        }
    }




    static if(!is(typeof(SSL_TLSEXT_ERR_ALERT_WARNING))) {
        private enum enumMixinStr_SSL_TLSEXT_ERR_ALERT_WARNING = `enum SSL_TLSEXT_ERR_ALERT_WARNING = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_TLSEXT_ERR_ALERT_WARNING); }))) {
            mixin(enumMixinStr_SSL_TLSEXT_ERR_ALERT_WARNING);
        }
    }




    static if(!is(typeof(SSL_TLSEXT_ERR_OK))) {
        private enum enumMixinStr_SSL_TLSEXT_ERR_OK = `enum SSL_TLSEXT_ERR_OK = 0;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_TLSEXT_ERR_OK); }))) {
            mixin(enumMixinStr_SSL_TLSEXT_ERR_OK);
        }
    }
    static if(!is(typeof(TLSEXT_MAXLEN_host_name))) {
        private enum enumMixinStr_TLSEXT_MAXLEN_host_name = `enum TLSEXT_MAXLEN_host_name = 255;`;
        static if(is(typeof({ mixin(enumMixinStr_TLSEXT_MAXLEN_host_name); }))) {
            mixin(enumMixinStr_TLSEXT_MAXLEN_host_name);
        }
    }




    static if(!is(typeof(TLSEXT_curve_P_384))) {
        private enum enumMixinStr_TLSEXT_curve_P_384 = `enum TLSEXT_curve_P_384 = 24;`;
        static if(is(typeof({ mixin(enumMixinStr_TLSEXT_curve_P_384); }))) {
            mixin(enumMixinStr_TLSEXT_curve_P_384);
        }
    }




    static if(!is(typeof(TLSEXT_curve_P_256))) {
        private enum enumMixinStr_TLSEXT_curve_P_256 = `enum TLSEXT_curve_P_256 = 23;`;
        static if(is(typeof({ mixin(enumMixinStr_TLSEXT_curve_P_256); }))) {
            mixin(enumMixinStr_TLSEXT_curve_P_256);
        }
    }




    static if(!is(typeof(TLSEXT_nid_unknown))) {
        private enum enumMixinStr_TLSEXT_nid_unknown = `enum TLSEXT_nid_unknown = 0x1000000;`;
        static if(is(typeof({ mixin(enumMixinStr_TLSEXT_nid_unknown); }))) {
            mixin(enumMixinStr_TLSEXT_nid_unknown);
        }
    }




    static if(!is(typeof(TLSEXT_hash_num))) {
        private enum enumMixinStr_TLSEXT_hash_num = `enum TLSEXT_hash_num = 10;`;
        static if(is(typeof({ mixin(enumMixinStr_TLSEXT_hash_num); }))) {
            mixin(enumMixinStr_TLSEXT_hash_num);
        }
    }




    static if(!is(typeof(TLSEXT_hash_gostr34112012_512))) {
        private enum enumMixinStr_TLSEXT_hash_gostr34112012_512 = `enum TLSEXT_hash_gostr34112012_512 = 239;`;
        static if(is(typeof({ mixin(enumMixinStr_TLSEXT_hash_gostr34112012_512); }))) {
            mixin(enumMixinStr_TLSEXT_hash_gostr34112012_512);
        }
    }




    static if(!is(typeof(TLSEXT_hash_gostr34112012_256))) {
        private enum enumMixinStr_TLSEXT_hash_gostr34112012_256 = `enum TLSEXT_hash_gostr34112012_256 = 238;`;
        static if(is(typeof({ mixin(enumMixinStr_TLSEXT_hash_gostr34112012_256); }))) {
            mixin(enumMixinStr_TLSEXT_hash_gostr34112012_256);
        }
    }




    static if(!is(typeof(TLSEXT_hash_gostr3411))) {
        private enum enumMixinStr_TLSEXT_hash_gostr3411 = `enum TLSEXT_hash_gostr3411 = 237;`;
        static if(is(typeof({ mixin(enumMixinStr_TLSEXT_hash_gostr3411); }))) {
            mixin(enumMixinStr_TLSEXT_hash_gostr3411);
        }
    }




    static if(!is(typeof(TLSEXT_hash_sha512))) {
        private enum enumMixinStr_TLSEXT_hash_sha512 = `enum TLSEXT_hash_sha512 = 6;`;
        static if(is(typeof({ mixin(enumMixinStr_TLSEXT_hash_sha512); }))) {
            mixin(enumMixinStr_TLSEXT_hash_sha512);
        }
    }




    static if(!is(typeof(TLSEXT_hash_sha384))) {
        private enum enumMixinStr_TLSEXT_hash_sha384 = `enum TLSEXT_hash_sha384 = 5;`;
        static if(is(typeof({ mixin(enumMixinStr_TLSEXT_hash_sha384); }))) {
            mixin(enumMixinStr_TLSEXT_hash_sha384);
        }
    }




    static if(!is(typeof(TLSEXT_hash_sha256))) {
        private enum enumMixinStr_TLSEXT_hash_sha256 = `enum TLSEXT_hash_sha256 = 4;`;
        static if(is(typeof({ mixin(enumMixinStr_TLSEXT_hash_sha256); }))) {
            mixin(enumMixinStr_TLSEXT_hash_sha256);
        }
    }




    static if(!is(typeof(TLSEXT_hash_sha224))) {
        private enum enumMixinStr_TLSEXT_hash_sha224 = `enum TLSEXT_hash_sha224 = 3;`;
        static if(is(typeof({ mixin(enumMixinStr_TLSEXT_hash_sha224); }))) {
            mixin(enumMixinStr_TLSEXT_hash_sha224);
        }
    }




    static if(!is(typeof(TLSEXT_hash_sha1))) {
        private enum enumMixinStr_TLSEXT_hash_sha1 = `enum TLSEXT_hash_sha1 = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_TLSEXT_hash_sha1); }))) {
            mixin(enumMixinStr_TLSEXT_hash_sha1);
        }
    }




    static if(!is(typeof(TLSEXT_hash_md5))) {
        private enum enumMixinStr_TLSEXT_hash_md5 = `enum TLSEXT_hash_md5 = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_TLSEXT_hash_md5); }))) {
            mixin(enumMixinStr_TLSEXT_hash_md5);
        }
    }




    static if(!is(typeof(TLSEXT_hash_none))) {
        private enum enumMixinStr_TLSEXT_hash_none = `enum TLSEXT_hash_none = 0;`;
        static if(is(typeof({ mixin(enumMixinStr_TLSEXT_hash_none); }))) {
            mixin(enumMixinStr_TLSEXT_hash_none);
        }
    }




    static if(!is(typeof(TLSEXT_signature_num))) {
        private enum enumMixinStr_TLSEXT_signature_num = `enum TLSEXT_signature_num = 7;`;
        static if(is(typeof({ mixin(enumMixinStr_TLSEXT_signature_num); }))) {
            mixin(enumMixinStr_TLSEXT_signature_num);
        }
    }




    static if(!is(typeof(TLSEXT_signature_gostr34102012_512))) {
        private enum enumMixinStr_TLSEXT_signature_gostr34102012_512 = `enum TLSEXT_signature_gostr34102012_512 = 239;`;
        static if(is(typeof({ mixin(enumMixinStr_TLSEXT_signature_gostr34102012_512); }))) {
            mixin(enumMixinStr_TLSEXT_signature_gostr34102012_512);
        }
    }




    static if(!is(typeof(TLSEXT_signature_gostr34102012_256))) {
        private enum enumMixinStr_TLSEXT_signature_gostr34102012_256 = `enum TLSEXT_signature_gostr34102012_256 = 238;`;
        static if(is(typeof({ mixin(enumMixinStr_TLSEXT_signature_gostr34102012_256); }))) {
            mixin(enumMixinStr_TLSEXT_signature_gostr34102012_256);
        }
    }




    static if(!is(typeof(TLSEXT_signature_gostr34102001))) {
        private enum enumMixinStr_TLSEXT_signature_gostr34102001 = `enum TLSEXT_signature_gostr34102001 = 237;`;
        static if(is(typeof({ mixin(enumMixinStr_TLSEXT_signature_gostr34102001); }))) {
            mixin(enumMixinStr_TLSEXT_signature_gostr34102001);
        }
    }




    static if(!is(typeof(TLSEXT_signature_ecdsa))) {
        private enum enumMixinStr_TLSEXT_signature_ecdsa = `enum TLSEXT_signature_ecdsa = 3;`;
        static if(is(typeof({ mixin(enumMixinStr_TLSEXT_signature_ecdsa); }))) {
            mixin(enumMixinStr_TLSEXT_signature_ecdsa);
        }
    }




    static if(!is(typeof(TLSEXT_signature_dsa))) {
        private enum enumMixinStr_TLSEXT_signature_dsa = `enum TLSEXT_signature_dsa = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_TLSEXT_signature_dsa); }))) {
            mixin(enumMixinStr_TLSEXT_signature_dsa);
        }
    }




    static if(!is(typeof(TLSEXT_signature_rsa))) {
        private enum enumMixinStr_TLSEXT_signature_rsa = `enum TLSEXT_signature_rsa = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_TLSEXT_signature_rsa); }))) {
            mixin(enumMixinStr_TLSEXT_signature_rsa);
        }
    }




    static if(!is(typeof(TLSEXT_signature_anonymous))) {
        private enum enumMixinStr_TLSEXT_signature_anonymous = `enum TLSEXT_signature_anonymous = 0;`;
        static if(is(typeof({ mixin(enumMixinStr_TLSEXT_signature_anonymous); }))) {
            mixin(enumMixinStr_TLSEXT_signature_anonymous);
        }
    }






    static if(!is(typeof(TLSEXT_ECPOINTFORMAT_last))) {
        private enum enumMixinStr_TLSEXT_ECPOINTFORMAT_last = `enum TLSEXT_ECPOINTFORMAT_last = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_TLSEXT_ECPOINTFORMAT_last); }))) {
            mixin(enumMixinStr_TLSEXT_ECPOINTFORMAT_last);
        }
    }




    static if(!is(typeof(TLSEXT_ECPOINTFORMAT_ansiX962_compressed_char2))) {
        private enum enumMixinStr_TLSEXT_ECPOINTFORMAT_ansiX962_compressed_char2 = `enum TLSEXT_ECPOINTFORMAT_ansiX962_compressed_char2 = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_TLSEXT_ECPOINTFORMAT_ansiX962_compressed_char2); }))) {
            mixin(enumMixinStr_TLSEXT_ECPOINTFORMAT_ansiX962_compressed_char2);
        }
    }




    static if(!is(typeof(TLSEXT_ECPOINTFORMAT_ansiX962_compressed_prime))) {
        private enum enumMixinStr_TLSEXT_ECPOINTFORMAT_ansiX962_compressed_prime = `enum TLSEXT_ECPOINTFORMAT_ansiX962_compressed_prime = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_TLSEXT_ECPOINTFORMAT_ansiX962_compressed_prime); }))) {
            mixin(enumMixinStr_TLSEXT_ECPOINTFORMAT_ansiX962_compressed_prime);
        }
    }




    static if(!is(typeof(TLSEXT_ECPOINTFORMAT_uncompressed))) {
        private enum enumMixinStr_TLSEXT_ECPOINTFORMAT_uncompressed = `enum TLSEXT_ECPOINTFORMAT_uncompressed = 0;`;
        static if(is(typeof({ mixin(enumMixinStr_TLSEXT_ECPOINTFORMAT_uncompressed); }))) {
            mixin(enumMixinStr_TLSEXT_ECPOINTFORMAT_uncompressed);
        }
    }




    static if(!is(typeof(RSA_FLAG_FIPS_METHOD))) {
        private enum enumMixinStr_RSA_FLAG_FIPS_METHOD = `enum RSA_FLAG_FIPS_METHOD = 0x0400;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_FLAG_FIPS_METHOD); }))) {
            mixin(enumMixinStr_RSA_FLAG_FIPS_METHOD);
        }
    }




    static if(!is(typeof(RSA_FLAG_NON_FIPS_ALLOW))) {
        private enum enumMixinStr_RSA_FLAG_NON_FIPS_ALLOW = `enum RSA_FLAG_NON_FIPS_ALLOW = 0x0400;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_FLAG_NON_FIPS_ALLOW); }))) {
            mixin(enumMixinStr_RSA_FLAG_NON_FIPS_ALLOW);
        }
    }




    static if(!is(typeof(RSA_FLAG_CHECKED))) {
        private enum enumMixinStr_RSA_FLAG_CHECKED = `enum RSA_FLAG_CHECKED = 0x0800;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_FLAG_CHECKED); }))) {
            mixin(enumMixinStr_RSA_FLAG_CHECKED);
        }
    }




    static if(!is(typeof(TLSEXT_ECPOINTFORMAT_first))) {
        private enum enumMixinStr_TLSEXT_ECPOINTFORMAT_first = `enum TLSEXT_ECPOINTFORMAT_first = 0;`;
        static if(is(typeof({ mixin(enumMixinStr_TLSEXT_ECPOINTFORMAT_first); }))) {
            mixin(enumMixinStr_TLSEXT_ECPOINTFORMAT_first);
        }
    }




    static if(!is(typeof(TLSEXT_STATUSTYPE_ocsp))) {
        private enum enumMixinStr_TLSEXT_STATUSTYPE_ocsp = `enum TLSEXT_STATUSTYPE_ocsp = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_TLSEXT_STATUSTYPE_ocsp); }))) {
            mixin(enumMixinStr_TLSEXT_STATUSTYPE_ocsp);
        }
    }




    static if(!is(typeof(TLSEXT_NAMETYPE_host_name))) {
        private enum enumMixinStr_TLSEXT_NAMETYPE_host_name = `enum TLSEXT_NAMETYPE_host_name = 0;`;
        static if(is(typeof({ mixin(enumMixinStr_TLSEXT_NAMETYPE_host_name); }))) {
            mixin(enumMixinStr_TLSEXT_NAMETYPE_host_name);
        }
    }




    static if(!is(typeof(TLSEXT_TYPE_next_proto_neg))) {
        private enum enumMixinStr_TLSEXT_TYPE_next_proto_neg = `enum TLSEXT_TYPE_next_proto_neg = 13172;`;
        static if(is(typeof({ mixin(enumMixinStr_TLSEXT_TYPE_next_proto_neg); }))) {
            mixin(enumMixinStr_TLSEXT_TYPE_next_proto_neg);
        }
    }




    static if(!is(typeof(TLSEXT_TYPE_renegotiate))) {
        private enum enumMixinStr_TLSEXT_TYPE_renegotiate = `enum TLSEXT_TYPE_renegotiate = 0xff01;`;
        static if(is(typeof({ mixin(enumMixinStr_TLSEXT_TYPE_renegotiate); }))) {
            mixin(enumMixinStr_TLSEXT_TYPE_renegotiate);
        }
    }




    static if(!is(typeof(TLSEXT_TYPE_session_ticket))) {
        private enum enumMixinStr_TLSEXT_TYPE_session_ticket = `enum TLSEXT_TYPE_session_ticket = 35;`;
        static if(is(typeof({ mixin(enumMixinStr_TLSEXT_TYPE_session_ticket); }))) {
            mixin(enumMixinStr_TLSEXT_TYPE_session_ticket);
        }
    }




    static if(!is(typeof(TLSEXT_TYPE_extended_master_secret))) {
        private enum enumMixinStr_TLSEXT_TYPE_extended_master_secret = `enum TLSEXT_TYPE_extended_master_secret = 23;`;
        static if(is(typeof({ mixin(enumMixinStr_TLSEXT_TYPE_extended_master_secret); }))) {
            mixin(enumMixinStr_TLSEXT_TYPE_extended_master_secret);
        }
    }




    static if(!is(typeof(TLSEXT_TYPE_encrypt_then_mac))) {
        private enum enumMixinStr_TLSEXT_TYPE_encrypt_then_mac = `enum TLSEXT_TYPE_encrypt_then_mac = 22;`;
        static if(is(typeof({ mixin(enumMixinStr_TLSEXT_TYPE_encrypt_then_mac); }))) {
            mixin(enumMixinStr_TLSEXT_TYPE_encrypt_then_mac);
        }
    }




    static if(!is(typeof(TLSEXT_TYPE_padding))) {
        private enum enumMixinStr_TLSEXT_TYPE_padding = `enum TLSEXT_TYPE_padding = 21;`;
        static if(is(typeof({ mixin(enumMixinStr_TLSEXT_TYPE_padding); }))) {
            mixin(enumMixinStr_TLSEXT_TYPE_padding);
        }
    }




    static if(!is(typeof(TLSEXT_TYPE_signed_certificate_timestamp))) {
        private enum enumMixinStr_TLSEXT_TYPE_signed_certificate_timestamp = `enum TLSEXT_TYPE_signed_certificate_timestamp = 18;`;
        static if(is(typeof({ mixin(enumMixinStr_TLSEXT_TYPE_signed_certificate_timestamp); }))) {
            mixin(enumMixinStr_TLSEXT_TYPE_signed_certificate_timestamp);
        }
    }




    static if(!is(typeof(TLSEXT_TYPE_application_layer_protocol_negotiation))) {
        private enum enumMixinStr_TLSEXT_TYPE_application_layer_protocol_negotiation = `enum TLSEXT_TYPE_application_layer_protocol_negotiation = 16;`;
        static if(is(typeof({ mixin(enumMixinStr_TLSEXT_TYPE_application_layer_protocol_negotiation); }))) {
            mixin(enumMixinStr_TLSEXT_TYPE_application_layer_protocol_negotiation);
        }
    }




    static if(!is(typeof(TLSEXT_TYPE_heartbeat))) {
        private enum enumMixinStr_TLSEXT_TYPE_heartbeat = `enum TLSEXT_TYPE_heartbeat = 15;`;
        static if(is(typeof({ mixin(enumMixinStr_TLSEXT_TYPE_heartbeat); }))) {
            mixin(enumMixinStr_TLSEXT_TYPE_heartbeat);
        }
    }




    static if(!is(typeof(TLSEXT_TYPE_use_srtp))) {
        private enum enumMixinStr_TLSEXT_TYPE_use_srtp = `enum TLSEXT_TYPE_use_srtp = 14;`;
        static if(is(typeof({ mixin(enumMixinStr_TLSEXT_TYPE_use_srtp); }))) {
            mixin(enumMixinStr_TLSEXT_TYPE_use_srtp);
        }
    }




    static if(!is(typeof(TLSEXT_TYPE_signature_algorithms))) {
        private enum enumMixinStr_TLSEXT_TYPE_signature_algorithms = `enum TLSEXT_TYPE_signature_algorithms = 13;`;
        static if(is(typeof({ mixin(enumMixinStr_TLSEXT_TYPE_signature_algorithms); }))) {
            mixin(enumMixinStr_TLSEXT_TYPE_signature_algorithms);
        }
    }




    static if(!is(typeof(TLSEXT_TYPE_srp))) {
        private enum enumMixinStr_TLSEXT_TYPE_srp = `enum TLSEXT_TYPE_srp = 12;`;
        static if(is(typeof({ mixin(enumMixinStr_TLSEXT_TYPE_srp); }))) {
            mixin(enumMixinStr_TLSEXT_TYPE_srp);
        }
    }




    static if(!is(typeof(TLSEXT_TYPE_ec_point_formats))) {
        private enum enumMixinStr_TLSEXT_TYPE_ec_point_formats = `enum TLSEXT_TYPE_ec_point_formats = 11;`;
        static if(is(typeof({ mixin(enumMixinStr_TLSEXT_TYPE_ec_point_formats); }))) {
            mixin(enumMixinStr_TLSEXT_TYPE_ec_point_formats);
        }
    }




    static if(!is(typeof(TLSEXT_TYPE_elliptic_curves))) {
        private enum enumMixinStr_TLSEXT_TYPE_elliptic_curves = `enum TLSEXT_TYPE_elliptic_curves = 10;`;
        static if(is(typeof({ mixin(enumMixinStr_TLSEXT_TYPE_elliptic_curves); }))) {
            mixin(enumMixinStr_TLSEXT_TYPE_elliptic_curves);
        }
    }




    static if(!is(typeof(TLSEXT_TYPE_cert_type))) {
        private enum enumMixinStr_TLSEXT_TYPE_cert_type = `enum TLSEXT_TYPE_cert_type = 9;`;
        static if(is(typeof({ mixin(enumMixinStr_TLSEXT_TYPE_cert_type); }))) {
            mixin(enumMixinStr_TLSEXT_TYPE_cert_type);
        }
    }




    static if(!is(typeof(TLSEXT_TYPE_server_authz))) {
        private enum enumMixinStr_TLSEXT_TYPE_server_authz = `enum TLSEXT_TYPE_server_authz = 8;`;
        static if(is(typeof({ mixin(enumMixinStr_TLSEXT_TYPE_server_authz); }))) {
            mixin(enumMixinStr_TLSEXT_TYPE_server_authz);
        }
    }




    static if(!is(typeof(TLSEXT_TYPE_client_authz))) {
        private enum enumMixinStr_TLSEXT_TYPE_client_authz = `enum TLSEXT_TYPE_client_authz = 7;`;
        static if(is(typeof({ mixin(enumMixinStr_TLSEXT_TYPE_client_authz); }))) {
            mixin(enumMixinStr_TLSEXT_TYPE_client_authz);
        }
    }




    static if(!is(typeof(TLSEXT_TYPE_user_mapping))) {
        private enum enumMixinStr_TLSEXT_TYPE_user_mapping = `enum TLSEXT_TYPE_user_mapping = 6;`;
        static if(is(typeof({ mixin(enumMixinStr_TLSEXT_TYPE_user_mapping); }))) {
            mixin(enumMixinStr_TLSEXT_TYPE_user_mapping);
        }
    }




    static if(!is(typeof(TLSEXT_TYPE_status_request))) {
        private enum enumMixinStr_TLSEXT_TYPE_status_request = `enum TLSEXT_TYPE_status_request = 5;`;
        static if(is(typeof({ mixin(enumMixinStr_TLSEXT_TYPE_status_request); }))) {
            mixin(enumMixinStr_TLSEXT_TYPE_status_request);
        }
    }




    static if(!is(typeof(TLSEXT_TYPE_truncated_hmac))) {
        private enum enumMixinStr_TLSEXT_TYPE_truncated_hmac = `enum TLSEXT_TYPE_truncated_hmac = 4;`;
        static if(is(typeof({ mixin(enumMixinStr_TLSEXT_TYPE_truncated_hmac); }))) {
            mixin(enumMixinStr_TLSEXT_TYPE_truncated_hmac);
        }
    }




    static if(!is(typeof(TLSEXT_TYPE_trusted_ca_keys))) {
        private enum enumMixinStr_TLSEXT_TYPE_trusted_ca_keys = `enum TLSEXT_TYPE_trusted_ca_keys = 3;`;
        static if(is(typeof({ mixin(enumMixinStr_TLSEXT_TYPE_trusted_ca_keys); }))) {
            mixin(enumMixinStr_TLSEXT_TYPE_trusted_ca_keys);
        }
    }




    static if(!is(typeof(TLSEXT_TYPE_client_certificate_url))) {
        private enum enumMixinStr_TLSEXT_TYPE_client_certificate_url = `enum TLSEXT_TYPE_client_certificate_url = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_TLSEXT_TYPE_client_certificate_url); }))) {
            mixin(enumMixinStr_TLSEXT_TYPE_client_certificate_url);
        }
    }




    static if(!is(typeof(TLSEXT_TYPE_max_fragment_length))) {
        private enum enumMixinStr_TLSEXT_TYPE_max_fragment_length = `enum TLSEXT_TYPE_max_fragment_length = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_TLSEXT_TYPE_max_fragment_length); }))) {
            mixin(enumMixinStr_TLSEXT_TYPE_max_fragment_length);
        }
    }




    static if(!is(typeof(TLSEXT_TYPE_server_name))) {
        private enum enumMixinStr_TLSEXT_TYPE_server_name = `enum TLSEXT_TYPE_server_name = 0;`;
        static if(is(typeof({ mixin(enumMixinStr_TLSEXT_TYPE_server_name); }))) {
            mixin(enumMixinStr_TLSEXT_TYPE_server_name);
        }
    }




    static if(!is(typeof(TLS1_AD_NO_APPLICATION_PROTOCOL))) {
        private enum enumMixinStr_TLS1_AD_NO_APPLICATION_PROTOCOL = `enum TLS1_AD_NO_APPLICATION_PROTOCOL = 120;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_AD_NO_APPLICATION_PROTOCOL); }))) {
            mixin(enumMixinStr_TLS1_AD_NO_APPLICATION_PROTOCOL);
        }
    }




    static if(!is(typeof(TLS1_AD_UNKNOWN_PSK_IDENTITY))) {
        private enum enumMixinStr_TLS1_AD_UNKNOWN_PSK_IDENTITY = `enum TLS1_AD_UNKNOWN_PSK_IDENTITY = 115;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_AD_UNKNOWN_PSK_IDENTITY); }))) {
            mixin(enumMixinStr_TLS1_AD_UNKNOWN_PSK_IDENTITY);
        }
    }




    static if(!is(typeof(TLS1_AD_BAD_CERTIFICATE_HASH_VALUE))) {
        private enum enumMixinStr_TLS1_AD_BAD_CERTIFICATE_HASH_VALUE = `enum TLS1_AD_BAD_CERTIFICATE_HASH_VALUE = 114;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_AD_BAD_CERTIFICATE_HASH_VALUE); }))) {
            mixin(enumMixinStr_TLS1_AD_BAD_CERTIFICATE_HASH_VALUE);
        }
    }




    static if(!is(typeof(TLS1_AD_BAD_CERTIFICATE_STATUS_RESPONSE))) {
        private enum enumMixinStr_TLS1_AD_BAD_CERTIFICATE_STATUS_RESPONSE = `enum TLS1_AD_BAD_CERTIFICATE_STATUS_RESPONSE = 113;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_AD_BAD_CERTIFICATE_STATUS_RESPONSE); }))) {
            mixin(enumMixinStr_TLS1_AD_BAD_CERTIFICATE_STATUS_RESPONSE);
        }
    }




    static if(!is(typeof(TLS1_AD_UNRECOGNIZED_NAME))) {
        private enum enumMixinStr_TLS1_AD_UNRECOGNIZED_NAME = `enum TLS1_AD_UNRECOGNIZED_NAME = 112;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_AD_UNRECOGNIZED_NAME); }))) {
            mixin(enumMixinStr_TLS1_AD_UNRECOGNIZED_NAME);
        }
    }




    static if(!is(typeof(TLS1_AD_CERTIFICATE_UNOBTAINABLE))) {
        private enum enumMixinStr_TLS1_AD_CERTIFICATE_UNOBTAINABLE = `enum TLS1_AD_CERTIFICATE_UNOBTAINABLE = 111;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_AD_CERTIFICATE_UNOBTAINABLE); }))) {
            mixin(enumMixinStr_TLS1_AD_CERTIFICATE_UNOBTAINABLE);
        }
    }






    static if(!is(typeof(TLS1_AD_UNSUPPORTED_EXTENSION))) {
        private enum enumMixinStr_TLS1_AD_UNSUPPORTED_EXTENSION = `enum TLS1_AD_UNSUPPORTED_EXTENSION = 110;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_AD_UNSUPPORTED_EXTENSION); }))) {
            mixin(enumMixinStr_TLS1_AD_UNSUPPORTED_EXTENSION);
        }
    }




    static if(!is(typeof(TLS1_AD_NO_RENEGOTIATION))) {
        private enum enumMixinStr_TLS1_AD_NO_RENEGOTIATION = `enum TLS1_AD_NO_RENEGOTIATION = 100;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_AD_NO_RENEGOTIATION); }))) {
            mixin(enumMixinStr_TLS1_AD_NO_RENEGOTIATION);
        }
    }




    static if(!is(typeof(RSA_F_CHECK_PADDING_MD))) {
        private enum enumMixinStr_RSA_F_CHECK_PADDING_MD = `enum RSA_F_CHECK_PADDING_MD = 140;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_F_CHECK_PADDING_MD); }))) {
            mixin(enumMixinStr_RSA_F_CHECK_PADDING_MD);
        }
    }




    static if(!is(typeof(RSA_F_ENCODE_PKCS1))) {
        private enum enumMixinStr_RSA_F_ENCODE_PKCS1 = `enum RSA_F_ENCODE_PKCS1 = 146;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_F_ENCODE_PKCS1); }))) {
            mixin(enumMixinStr_RSA_F_ENCODE_PKCS1);
        }
    }




    static if(!is(typeof(RSA_F_INT_RSA_VERIFY))) {
        private enum enumMixinStr_RSA_F_INT_RSA_VERIFY = `enum RSA_F_INT_RSA_VERIFY = 145;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_F_INT_RSA_VERIFY); }))) {
            mixin(enumMixinStr_RSA_F_INT_RSA_VERIFY);
        }
    }




    static if(!is(typeof(RSA_F_OLD_RSA_PRIV_DECODE))) {
        private enum enumMixinStr_RSA_F_OLD_RSA_PRIV_DECODE = `enum RSA_F_OLD_RSA_PRIV_DECODE = 147;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_F_OLD_RSA_PRIV_DECODE); }))) {
            mixin(enumMixinStr_RSA_F_OLD_RSA_PRIV_DECODE);
        }
    }




    static if(!is(typeof(RSA_F_PKEY_PSS_INIT))) {
        private enum enumMixinStr_RSA_F_PKEY_PSS_INIT = `enum RSA_F_PKEY_PSS_INIT = 165;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_F_PKEY_PSS_INIT); }))) {
            mixin(enumMixinStr_RSA_F_PKEY_PSS_INIT);
        }
    }




    static if(!is(typeof(RSA_F_PKEY_RSA_CTRL))) {
        private enum enumMixinStr_RSA_F_PKEY_RSA_CTRL = `enum RSA_F_PKEY_RSA_CTRL = 143;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_F_PKEY_RSA_CTRL); }))) {
            mixin(enumMixinStr_RSA_F_PKEY_RSA_CTRL);
        }
    }




    static if(!is(typeof(RSA_F_PKEY_RSA_CTRL_STR))) {
        private enum enumMixinStr_RSA_F_PKEY_RSA_CTRL_STR = `enum RSA_F_PKEY_RSA_CTRL_STR = 144;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_F_PKEY_RSA_CTRL_STR); }))) {
            mixin(enumMixinStr_RSA_F_PKEY_RSA_CTRL_STR);
        }
    }




    static if(!is(typeof(RSA_F_PKEY_RSA_SIGN))) {
        private enum enumMixinStr_RSA_F_PKEY_RSA_SIGN = `enum RSA_F_PKEY_RSA_SIGN = 142;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_F_PKEY_RSA_SIGN); }))) {
            mixin(enumMixinStr_RSA_F_PKEY_RSA_SIGN);
        }
    }




    static if(!is(typeof(RSA_F_PKEY_RSA_VERIFY))) {
        private enum enumMixinStr_RSA_F_PKEY_RSA_VERIFY = `enum RSA_F_PKEY_RSA_VERIFY = 149;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_F_PKEY_RSA_VERIFY); }))) {
            mixin(enumMixinStr_RSA_F_PKEY_RSA_VERIFY);
        }
    }




    static if(!is(typeof(RSA_F_PKEY_RSA_VERIFYRECOVER))) {
        private enum enumMixinStr_RSA_F_PKEY_RSA_VERIFYRECOVER = `enum RSA_F_PKEY_RSA_VERIFYRECOVER = 141;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_F_PKEY_RSA_VERIFYRECOVER); }))) {
            mixin(enumMixinStr_RSA_F_PKEY_RSA_VERIFYRECOVER);
        }
    }




    static if(!is(typeof(RSA_F_RSA_ALGOR_TO_MD))) {
        private enum enumMixinStr_RSA_F_RSA_ALGOR_TO_MD = `enum RSA_F_RSA_ALGOR_TO_MD = 156;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_F_RSA_ALGOR_TO_MD); }))) {
            mixin(enumMixinStr_RSA_F_RSA_ALGOR_TO_MD);
        }
    }




    static if(!is(typeof(RSA_F_RSA_BUILTIN_KEYGEN))) {
        private enum enumMixinStr_RSA_F_RSA_BUILTIN_KEYGEN = `enum RSA_F_RSA_BUILTIN_KEYGEN = 129;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_F_RSA_BUILTIN_KEYGEN); }))) {
            mixin(enumMixinStr_RSA_F_RSA_BUILTIN_KEYGEN);
        }
    }




    static if(!is(typeof(RSA_F_RSA_CHECK_KEY))) {
        private enum enumMixinStr_RSA_F_RSA_CHECK_KEY = `enum RSA_F_RSA_CHECK_KEY = 123;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_F_RSA_CHECK_KEY); }))) {
            mixin(enumMixinStr_RSA_F_RSA_CHECK_KEY);
        }
    }




    static if(!is(typeof(RSA_F_RSA_CHECK_KEY_EX))) {
        private enum enumMixinStr_RSA_F_RSA_CHECK_KEY_EX = `enum RSA_F_RSA_CHECK_KEY_EX = 160;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_F_RSA_CHECK_KEY_EX); }))) {
            mixin(enumMixinStr_RSA_F_RSA_CHECK_KEY_EX);
        }
    }




    static if(!is(typeof(RSA_F_RSA_CMS_DECRYPT))) {
        private enum enumMixinStr_RSA_F_RSA_CMS_DECRYPT = `enum RSA_F_RSA_CMS_DECRYPT = 159;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_F_RSA_CMS_DECRYPT); }))) {
            mixin(enumMixinStr_RSA_F_RSA_CMS_DECRYPT);
        }
    }




    static if(!is(typeof(RSA_F_RSA_CMS_VERIFY))) {
        private enum enumMixinStr_RSA_F_RSA_CMS_VERIFY = `enum RSA_F_RSA_CMS_VERIFY = 158;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_F_RSA_CMS_VERIFY); }))) {
            mixin(enumMixinStr_RSA_F_RSA_CMS_VERIFY);
        }
    }




    static if(!is(typeof(RSA_F_RSA_ITEM_VERIFY))) {
        private enum enumMixinStr_RSA_F_RSA_ITEM_VERIFY = `enum RSA_F_RSA_ITEM_VERIFY = 148;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_F_RSA_ITEM_VERIFY); }))) {
            mixin(enumMixinStr_RSA_F_RSA_ITEM_VERIFY);
        }
    }




    static if(!is(typeof(RSA_F_RSA_METH_DUP))) {
        private enum enumMixinStr_RSA_F_RSA_METH_DUP = `enum RSA_F_RSA_METH_DUP = 161;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_F_RSA_METH_DUP); }))) {
            mixin(enumMixinStr_RSA_F_RSA_METH_DUP);
        }
    }




    static if(!is(typeof(RSA_F_RSA_METH_NEW))) {
        private enum enumMixinStr_RSA_F_RSA_METH_NEW = `enum RSA_F_RSA_METH_NEW = 162;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_F_RSA_METH_NEW); }))) {
            mixin(enumMixinStr_RSA_F_RSA_METH_NEW);
        }
    }




    static if(!is(typeof(RSA_F_RSA_METH_SET1_NAME))) {
        private enum enumMixinStr_RSA_F_RSA_METH_SET1_NAME = `enum RSA_F_RSA_METH_SET1_NAME = 163;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_F_RSA_METH_SET1_NAME); }))) {
            mixin(enumMixinStr_RSA_F_RSA_METH_SET1_NAME);
        }
    }




    static if(!is(typeof(RSA_F_RSA_MGF1_TO_MD))) {
        private enum enumMixinStr_RSA_F_RSA_MGF1_TO_MD = `enum RSA_F_RSA_MGF1_TO_MD = 157;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_F_RSA_MGF1_TO_MD); }))) {
            mixin(enumMixinStr_RSA_F_RSA_MGF1_TO_MD);
        }
    }




    static if(!is(typeof(RSA_F_RSA_MULTIP_INFO_NEW))) {
        private enum enumMixinStr_RSA_F_RSA_MULTIP_INFO_NEW = `enum RSA_F_RSA_MULTIP_INFO_NEW = 166;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_F_RSA_MULTIP_INFO_NEW); }))) {
            mixin(enumMixinStr_RSA_F_RSA_MULTIP_INFO_NEW);
        }
    }




    static if(!is(typeof(RSA_F_RSA_NEW_METHOD))) {
        private enum enumMixinStr_RSA_F_RSA_NEW_METHOD = `enum RSA_F_RSA_NEW_METHOD = 106;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_F_RSA_NEW_METHOD); }))) {
            mixin(enumMixinStr_RSA_F_RSA_NEW_METHOD);
        }
    }




    static if(!is(typeof(RSA_F_RSA_NULL))) {
        private enum enumMixinStr_RSA_F_RSA_NULL = `enum RSA_F_RSA_NULL = 124;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_F_RSA_NULL); }))) {
            mixin(enumMixinStr_RSA_F_RSA_NULL);
        }
    }




    static if(!is(typeof(RSA_F_RSA_NULL_PRIVATE_DECRYPT))) {
        private enum enumMixinStr_RSA_F_RSA_NULL_PRIVATE_DECRYPT = `enum RSA_F_RSA_NULL_PRIVATE_DECRYPT = 132;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_F_RSA_NULL_PRIVATE_DECRYPT); }))) {
            mixin(enumMixinStr_RSA_F_RSA_NULL_PRIVATE_DECRYPT);
        }
    }




    static if(!is(typeof(RSA_F_RSA_NULL_PRIVATE_ENCRYPT))) {
        private enum enumMixinStr_RSA_F_RSA_NULL_PRIVATE_ENCRYPT = `enum RSA_F_RSA_NULL_PRIVATE_ENCRYPT = 133;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_F_RSA_NULL_PRIVATE_ENCRYPT); }))) {
            mixin(enumMixinStr_RSA_F_RSA_NULL_PRIVATE_ENCRYPT);
        }
    }




    static if(!is(typeof(RSA_F_RSA_NULL_PUBLIC_DECRYPT))) {
        private enum enumMixinStr_RSA_F_RSA_NULL_PUBLIC_DECRYPT = `enum RSA_F_RSA_NULL_PUBLIC_DECRYPT = 134;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_F_RSA_NULL_PUBLIC_DECRYPT); }))) {
            mixin(enumMixinStr_RSA_F_RSA_NULL_PUBLIC_DECRYPT);
        }
    }




    static if(!is(typeof(RSA_F_RSA_NULL_PUBLIC_ENCRYPT))) {
        private enum enumMixinStr_RSA_F_RSA_NULL_PUBLIC_ENCRYPT = `enum RSA_F_RSA_NULL_PUBLIC_ENCRYPT = 135;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_F_RSA_NULL_PUBLIC_ENCRYPT); }))) {
            mixin(enumMixinStr_RSA_F_RSA_NULL_PUBLIC_ENCRYPT);
        }
    }




    static if(!is(typeof(RSA_F_RSA_OSSL_PRIVATE_DECRYPT))) {
        private enum enumMixinStr_RSA_F_RSA_OSSL_PRIVATE_DECRYPT = `enum RSA_F_RSA_OSSL_PRIVATE_DECRYPT = 101;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_F_RSA_OSSL_PRIVATE_DECRYPT); }))) {
            mixin(enumMixinStr_RSA_F_RSA_OSSL_PRIVATE_DECRYPT);
        }
    }




    static if(!is(typeof(RSA_F_RSA_OSSL_PRIVATE_ENCRYPT))) {
        private enum enumMixinStr_RSA_F_RSA_OSSL_PRIVATE_ENCRYPT = `enum RSA_F_RSA_OSSL_PRIVATE_ENCRYPT = 102;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_F_RSA_OSSL_PRIVATE_ENCRYPT); }))) {
            mixin(enumMixinStr_RSA_F_RSA_OSSL_PRIVATE_ENCRYPT);
        }
    }




    static if(!is(typeof(RSA_F_RSA_OSSL_PUBLIC_DECRYPT))) {
        private enum enumMixinStr_RSA_F_RSA_OSSL_PUBLIC_DECRYPT = `enum RSA_F_RSA_OSSL_PUBLIC_DECRYPT = 103;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_F_RSA_OSSL_PUBLIC_DECRYPT); }))) {
            mixin(enumMixinStr_RSA_F_RSA_OSSL_PUBLIC_DECRYPT);
        }
    }




    static if(!is(typeof(RSA_F_RSA_OSSL_PUBLIC_ENCRYPT))) {
        private enum enumMixinStr_RSA_F_RSA_OSSL_PUBLIC_ENCRYPT = `enum RSA_F_RSA_OSSL_PUBLIC_ENCRYPT = 104;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_F_RSA_OSSL_PUBLIC_ENCRYPT); }))) {
            mixin(enumMixinStr_RSA_F_RSA_OSSL_PUBLIC_ENCRYPT);
        }
    }




    static if(!is(typeof(RSA_F_RSA_PADDING_ADD_NONE))) {
        private enum enumMixinStr_RSA_F_RSA_PADDING_ADD_NONE = `enum RSA_F_RSA_PADDING_ADD_NONE = 107;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_F_RSA_PADDING_ADD_NONE); }))) {
            mixin(enumMixinStr_RSA_F_RSA_PADDING_ADD_NONE);
        }
    }




    static if(!is(typeof(RSA_F_RSA_PADDING_ADD_PKCS1_OAEP))) {
        private enum enumMixinStr_RSA_F_RSA_PADDING_ADD_PKCS1_OAEP = `enum RSA_F_RSA_PADDING_ADD_PKCS1_OAEP = 121;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_F_RSA_PADDING_ADD_PKCS1_OAEP); }))) {
            mixin(enumMixinStr_RSA_F_RSA_PADDING_ADD_PKCS1_OAEP);
        }
    }




    static if(!is(typeof(RSA_F_RSA_PADDING_ADD_PKCS1_OAEP_MGF1))) {
        private enum enumMixinStr_RSA_F_RSA_PADDING_ADD_PKCS1_OAEP_MGF1 = `enum RSA_F_RSA_PADDING_ADD_PKCS1_OAEP_MGF1 = 154;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_F_RSA_PADDING_ADD_PKCS1_OAEP_MGF1); }))) {
            mixin(enumMixinStr_RSA_F_RSA_PADDING_ADD_PKCS1_OAEP_MGF1);
        }
    }




    static if(!is(typeof(RSA_F_RSA_PADDING_ADD_PKCS1_PSS))) {
        private enum enumMixinStr_RSA_F_RSA_PADDING_ADD_PKCS1_PSS = `enum RSA_F_RSA_PADDING_ADD_PKCS1_PSS = 125;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_F_RSA_PADDING_ADD_PKCS1_PSS); }))) {
            mixin(enumMixinStr_RSA_F_RSA_PADDING_ADD_PKCS1_PSS);
        }
    }




    static if(!is(typeof(RSA_F_RSA_PADDING_ADD_PKCS1_PSS_MGF1))) {
        private enum enumMixinStr_RSA_F_RSA_PADDING_ADD_PKCS1_PSS_MGF1 = `enum RSA_F_RSA_PADDING_ADD_PKCS1_PSS_MGF1 = 152;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_F_RSA_PADDING_ADD_PKCS1_PSS_MGF1); }))) {
            mixin(enumMixinStr_RSA_F_RSA_PADDING_ADD_PKCS1_PSS_MGF1);
        }
    }




    static if(!is(typeof(RSA_F_RSA_PADDING_ADD_PKCS1_TYPE_1))) {
        private enum enumMixinStr_RSA_F_RSA_PADDING_ADD_PKCS1_TYPE_1 = `enum RSA_F_RSA_PADDING_ADD_PKCS1_TYPE_1 = 108;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_F_RSA_PADDING_ADD_PKCS1_TYPE_1); }))) {
            mixin(enumMixinStr_RSA_F_RSA_PADDING_ADD_PKCS1_TYPE_1);
        }
    }




    static if(!is(typeof(RSA_F_RSA_PADDING_ADD_PKCS1_TYPE_2))) {
        private enum enumMixinStr_RSA_F_RSA_PADDING_ADD_PKCS1_TYPE_2 = `enum RSA_F_RSA_PADDING_ADD_PKCS1_TYPE_2 = 109;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_F_RSA_PADDING_ADD_PKCS1_TYPE_2); }))) {
            mixin(enumMixinStr_RSA_F_RSA_PADDING_ADD_PKCS1_TYPE_2);
        }
    }




    static if(!is(typeof(RSA_F_RSA_PADDING_ADD_SSLV23))) {
        private enum enumMixinStr_RSA_F_RSA_PADDING_ADD_SSLV23 = `enum RSA_F_RSA_PADDING_ADD_SSLV23 = 110;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_F_RSA_PADDING_ADD_SSLV23); }))) {
            mixin(enumMixinStr_RSA_F_RSA_PADDING_ADD_SSLV23);
        }
    }




    static if(!is(typeof(RSA_F_RSA_PADDING_ADD_X931))) {
        private enum enumMixinStr_RSA_F_RSA_PADDING_ADD_X931 = `enum RSA_F_RSA_PADDING_ADD_X931 = 127;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_F_RSA_PADDING_ADD_X931); }))) {
            mixin(enumMixinStr_RSA_F_RSA_PADDING_ADD_X931);
        }
    }




    static if(!is(typeof(RSA_F_RSA_PADDING_CHECK_NONE))) {
        private enum enumMixinStr_RSA_F_RSA_PADDING_CHECK_NONE = `enum RSA_F_RSA_PADDING_CHECK_NONE = 111;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_F_RSA_PADDING_CHECK_NONE); }))) {
            mixin(enumMixinStr_RSA_F_RSA_PADDING_CHECK_NONE);
        }
    }




    static if(!is(typeof(RSA_F_RSA_PADDING_CHECK_PKCS1_OAEP))) {
        private enum enumMixinStr_RSA_F_RSA_PADDING_CHECK_PKCS1_OAEP = `enum RSA_F_RSA_PADDING_CHECK_PKCS1_OAEP = 122;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_F_RSA_PADDING_CHECK_PKCS1_OAEP); }))) {
            mixin(enumMixinStr_RSA_F_RSA_PADDING_CHECK_PKCS1_OAEP);
        }
    }




    static if(!is(typeof(RSA_F_RSA_PADDING_CHECK_PKCS1_OAEP_MGF1))) {
        private enum enumMixinStr_RSA_F_RSA_PADDING_CHECK_PKCS1_OAEP_MGF1 = `enum RSA_F_RSA_PADDING_CHECK_PKCS1_OAEP_MGF1 = 153;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_F_RSA_PADDING_CHECK_PKCS1_OAEP_MGF1); }))) {
            mixin(enumMixinStr_RSA_F_RSA_PADDING_CHECK_PKCS1_OAEP_MGF1);
        }
    }




    static if(!is(typeof(RSA_F_RSA_PADDING_CHECK_PKCS1_TYPE_1))) {
        private enum enumMixinStr_RSA_F_RSA_PADDING_CHECK_PKCS1_TYPE_1 = `enum RSA_F_RSA_PADDING_CHECK_PKCS1_TYPE_1 = 112;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_F_RSA_PADDING_CHECK_PKCS1_TYPE_1); }))) {
            mixin(enumMixinStr_RSA_F_RSA_PADDING_CHECK_PKCS1_TYPE_1);
        }
    }




    static if(!is(typeof(RSA_F_RSA_PADDING_CHECK_PKCS1_TYPE_2))) {
        private enum enumMixinStr_RSA_F_RSA_PADDING_CHECK_PKCS1_TYPE_2 = `enum RSA_F_RSA_PADDING_CHECK_PKCS1_TYPE_2 = 113;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_F_RSA_PADDING_CHECK_PKCS1_TYPE_2); }))) {
            mixin(enumMixinStr_RSA_F_RSA_PADDING_CHECK_PKCS1_TYPE_2);
        }
    }




    static if(!is(typeof(RSA_F_RSA_PADDING_CHECK_SSLV23))) {
        private enum enumMixinStr_RSA_F_RSA_PADDING_CHECK_SSLV23 = `enum RSA_F_RSA_PADDING_CHECK_SSLV23 = 114;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_F_RSA_PADDING_CHECK_SSLV23); }))) {
            mixin(enumMixinStr_RSA_F_RSA_PADDING_CHECK_SSLV23);
        }
    }




    static if(!is(typeof(RSA_F_RSA_PADDING_CHECK_X931))) {
        private enum enumMixinStr_RSA_F_RSA_PADDING_CHECK_X931 = `enum RSA_F_RSA_PADDING_CHECK_X931 = 128;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_F_RSA_PADDING_CHECK_X931); }))) {
            mixin(enumMixinStr_RSA_F_RSA_PADDING_CHECK_X931);
        }
    }




    static if(!is(typeof(RSA_F_RSA_PARAM_DECODE))) {
        private enum enumMixinStr_RSA_F_RSA_PARAM_DECODE = `enum RSA_F_RSA_PARAM_DECODE = 164;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_F_RSA_PARAM_DECODE); }))) {
            mixin(enumMixinStr_RSA_F_RSA_PARAM_DECODE);
        }
    }




    static if(!is(typeof(RSA_F_RSA_PRINT))) {
        private enum enumMixinStr_RSA_F_RSA_PRINT = `enum RSA_F_RSA_PRINT = 115;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_F_RSA_PRINT); }))) {
            mixin(enumMixinStr_RSA_F_RSA_PRINT);
        }
    }




    static if(!is(typeof(RSA_F_RSA_PRINT_FP))) {
        private enum enumMixinStr_RSA_F_RSA_PRINT_FP = `enum RSA_F_RSA_PRINT_FP = 116;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_F_RSA_PRINT_FP); }))) {
            mixin(enumMixinStr_RSA_F_RSA_PRINT_FP);
        }
    }




    static if(!is(typeof(RSA_F_RSA_PRIV_DECODE))) {
        private enum enumMixinStr_RSA_F_RSA_PRIV_DECODE = `enum RSA_F_RSA_PRIV_DECODE = 150;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_F_RSA_PRIV_DECODE); }))) {
            mixin(enumMixinStr_RSA_F_RSA_PRIV_DECODE);
        }
    }




    static if(!is(typeof(RSA_F_RSA_PRIV_ENCODE))) {
        private enum enumMixinStr_RSA_F_RSA_PRIV_ENCODE = `enum RSA_F_RSA_PRIV_ENCODE = 138;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_F_RSA_PRIV_ENCODE); }))) {
            mixin(enumMixinStr_RSA_F_RSA_PRIV_ENCODE);
        }
    }




    static if(!is(typeof(RSA_F_RSA_PSS_GET_PARAM))) {
        private enum enumMixinStr_RSA_F_RSA_PSS_GET_PARAM = `enum RSA_F_RSA_PSS_GET_PARAM = 151;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_F_RSA_PSS_GET_PARAM); }))) {
            mixin(enumMixinStr_RSA_F_RSA_PSS_GET_PARAM);
        }
    }




    static if(!is(typeof(RSA_F_RSA_PSS_TO_CTX))) {
        private enum enumMixinStr_RSA_F_RSA_PSS_TO_CTX = `enum RSA_F_RSA_PSS_TO_CTX = 155;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_F_RSA_PSS_TO_CTX); }))) {
            mixin(enumMixinStr_RSA_F_RSA_PSS_TO_CTX);
        }
    }




    static if(!is(typeof(RSA_F_RSA_PUB_DECODE))) {
        private enum enumMixinStr_RSA_F_RSA_PUB_DECODE = `enum RSA_F_RSA_PUB_DECODE = 139;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_F_RSA_PUB_DECODE); }))) {
            mixin(enumMixinStr_RSA_F_RSA_PUB_DECODE);
        }
    }




    static if(!is(typeof(RSA_F_RSA_SETUP_BLINDING))) {
        private enum enumMixinStr_RSA_F_RSA_SETUP_BLINDING = `enum RSA_F_RSA_SETUP_BLINDING = 136;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_F_RSA_SETUP_BLINDING); }))) {
            mixin(enumMixinStr_RSA_F_RSA_SETUP_BLINDING);
        }
    }




    static if(!is(typeof(RSA_F_RSA_SIGN))) {
        private enum enumMixinStr_RSA_F_RSA_SIGN = `enum RSA_F_RSA_SIGN = 117;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_F_RSA_SIGN); }))) {
            mixin(enumMixinStr_RSA_F_RSA_SIGN);
        }
    }




    static if(!is(typeof(RSA_F_RSA_SIGN_ASN1_OCTET_STRING))) {
        private enum enumMixinStr_RSA_F_RSA_SIGN_ASN1_OCTET_STRING = `enum RSA_F_RSA_SIGN_ASN1_OCTET_STRING = 118;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_F_RSA_SIGN_ASN1_OCTET_STRING); }))) {
            mixin(enumMixinStr_RSA_F_RSA_SIGN_ASN1_OCTET_STRING);
        }
    }




    static if(!is(typeof(RSA_F_RSA_VERIFY))) {
        private enum enumMixinStr_RSA_F_RSA_VERIFY = `enum RSA_F_RSA_VERIFY = 119;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_F_RSA_VERIFY); }))) {
            mixin(enumMixinStr_RSA_F_RSA_VERIFY);
        }
    }




    static if(!is(typeof(RSA_F_RSA_VERIFY_ASN1_OCTET_STRING))) {
        private enum enumMixinStr_RSA_F_RSA_VERIFY_ASN1_OCTET_STRING = `enum RSA_F_RSA_VERIFY_ASN1_OCTET_STRING = 120;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_F_RSA_VERIFY_ASN1_OCTET_STRING); }))) {
            mixin(enumMixinStr_RSA_F_RSA_VERIFY_ASN1_OCTET_STRING);
        }
    }




    static if(!is(typeof(RSA_F_RSA_VERIFY_PKCS1_PSS_MGF1))) {
        private enum enumMixinStr_RSA_F_RSA_VERIFY_PKCS1_PSS_MGF1 = `enum RSA_F_RSA_VERIFY_PKCS1_PSS_MGF1 = 126;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_F_RSA_VERIFY_PKCS1_PSS_MGF1); }))) {
            mixin(enumMixinStr_RSA_F_RSA_VERIFY_PKCS1_PSS_MGF1);
        }
    }




    static if(!is(typeof(RSA_F_SETUP_TBUF))) {
        private enum enumMixinStr_RSA_F_SETUP_TBUF = `enum RSA_F_SETUP_TBUF = 167;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_F_SETUP_TBUF); }))) {
            mixin(enumMixinStr_RSA_F_SETUP_TBUF);
        }
    }




    static if(!is(typeof(RSA_R_ALGORITHM_MISMATCH))) {
        private enum enumMixinStr_RSA_R_ALGORITHM_MISMATCH = `enum RSA_R_ALGORITHM_MISMATCH = 100;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_R_ALGORITHM_MISMATCH); }))) {
            mixin(enumMixinStr_RSA_R_ALGORITHM_MISMATCH);
        }
    }




    static if(!is(typeof(RSA_R_BAD_E_VALUE))) {
        private enum enumMixinStr_RSA_R_BAD_E_VALUE = `enum RSA_R_BAD_E_VALUE = 101;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_R_BAD_E_VALUE); }))) {
            mixin(enumMixinStr_RSA_R_BAD_E_VALUE);
        }
    }




    static if(!is(typeof(RSA_R_BAD_FIXED_HEADER_DECRYPT))) {
        private enum enumMixinStr_RSA_R_BAD_FIXED_HEADER_DECRYPT = `enum RSA_R_BAD_FIXED_HEADER_DECRYPT = 102;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_R_BAD_FIXED_HEADER_DECRYPT); }))) {
            mixin(enumMixinStr_RSA_R_BAD_FIXED_HEADER_DECRYPT);
        }
    }




    static if(!is(typeof(RSA_R_BAD_PAD_BYTE_COUNT))) {
        private enum enumMixinStr_RSA_R_BAD_PAD_BYTE_COUNT = `enum RSA_R_BAD_PAD_BYTE_COUNT = 103;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_R_BAD_PAD_BYTE_COUNT); }))) {
            mixin(enumMixinStr_RSA_R_BAD_PAD_BYTE_COUNT);
        }
    }




    static if(!is(typeof(RSA_R_BAD_SIGNATURE))) {
        private enum enumMixinStr_RSA_R_BAD_SIGNATURE = `enum RSA_R_BAD_SIGNATURE = 104;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_R_BAD_SIGNATURE); }))) {
            mixin(enumMixinStr_RSA_R_BAD_SIGNATURE);
        }
    }




    static if(!is(typeof(RSA_R_BLOCK_TYPE_IS_NOT_01))) {
        private enum enumMixinStr_RSA_R_BLOCK_TYPE_IS_NOT_01 = `enum RSA_R_BLOCK_TYPE_IS_NOT_01 = 106;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_R_BLOCK_TYPE_IS_NOT_01); }))) {
            mixin(enumMixinStr_RSA_R_BLOCK_TYPE_IS_NOT_01);
        }
    }




    static if(!is(typeof(RSA_R_BLOCK_TYPE_IS_NOT_02))) {
        private enum enumMixinStr_RSA_R_BLOCK_TYPE_IS_NOT_02 = `enum RSA_R_BLOCK_TYPE_IS_NOT_02 = 107;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_R_BLOCK_TYPE_IS_NOT_02); }))) {
            mixin(enumMixinStr_RSA_R_BLOCK_TYPE_IS_NOT_02);
        }
    }




    static if(!is(typeof(RSA_R_DATA_GREATER_THAN_MOD_LEN))) {
        private enum enumMixinStr_RSA_R_DATA_GREATER_THAN_MOD_LEN = `enum RSA_R_DATA_GREATER_THAN_MOD_LEN = 108;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_R_DATA_GREATER_THAN_MOD_LEN); }))) {
            mixin(enumMixinStr_RSA_R_DATA_GREATER_THAN_MOD_LEN);
        }
    }




    static if(!is(typeof(RSA_R_DATA_TOO_LARGE))) {
        private enum enumMixinStr_RSA_R_DATA_TOO_LARGE = `enum RSA_R_DATA_TOO_LARGE = 109;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_R_DATA_TOO_LARGE); }))) {
            mixin(enumMixinStr_RSA_R_DATA_TOO_LARGE);
        }
    }




    static if(!is(typeof(RSA_R_DATA_TOO_LARGE_FOR_KEY_SIZE))) {
        private enum enumMixinStr_RSA_R_DATA_TOO_LARGE_FOR_KEY_SIZE = `enum RSA_R_DATA_TOO_LARGE_FOR_KEY_SIZE = 110;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_R_DATA_TOO_LARGE_FOR_KEY_SIZE); }))) {
            mixin(enumMixinStr_RSA_R_DATA_TOO_LARGE_FOR_KEY_SIZE);
        }
    }




    static if(!is(typeof(RSA_R_DATA_TOO_LARGE_FOR_MODULUS))) {
        private enum enumMixinStr_RSA_R_DATA_TOO_LARGE_FOR_MODULUS = `enum RSA_R_DATA_TOO_LARGE_FOR_MODULUS = 132;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_R_DATA_TOO_LARGE_FOR_MODULUS); }))) {
            mixin(enumMixinStr_RSA_R_DATA_TOO_LARGE_FOR_MODULUS);
        }
    }




    static if(!is(typeof(RSA_R_DATA_TOO_SMALL))) {
        private enum enumMixinStr_RSA_R_DATA_TOO_SMALL = `enum RSA_R_DATA_TOO_SMALL = 111;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_R_DATA_TOO_SMALL); }))) {
            mixin(enumMixinStr_RSA_R_DATA_TOO_SMALL);
        }
    }




    static if(!is(typeof(RSA_R_DATA_TOO_SMALL_FOR_KEY_SIZE))) {
        private enum enumMixinStr_RSA_R_DATA_TOO_SMALL_FOR_KEY_SIZE = `enum RSA_R_DATA_TOO_SMALL_FOR_KEY_SIZE = 122;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_R_DATA_TOO_SMALL_FOR_KEY_SIZE); }))) {
            mixin(enumMixinStr_RSA_R_DATA_TOO_SMALL_FOR_KEY_SIZE);
        }
    }




    static if(!is(typeof(RSA_R_DIGEST_DOES_NOT_MATCH))) {
        private enum enumMixinStr_RSA_R_DIGEST_DOES_NOT_MATCH = `enum RSA_R_DIGEST_DOES_NOT_MATCH = 158;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_R_DIGEST_DOES_NOT_MATCH); }))) {
            mixin(enumMixinStr_RSA_R_DIGEST_DOES_NOT_MATCH);
        }
    }




    static if(!is(typeof(RSA_R_DIGEST_NOT_ALLOWED))) {
        private enum enumMixinStr_RSA_R_DIGEST_NOT_ALLOWED = `enum RSA_R_DIGEST_NOT_ALLOWED = 145;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_R_DIGEST_NOT_ALLOWED); }))) {
            mixin(enumMixinStr_RSA_R_DIGEST_NOT_ALLOWED);
        }
    }




    static if(!is(typeof(RSA_R_DIGEST_TOO_BIG_FOR_RSA_KEY))) {
        private enum enumMixinStr_RSA_R_DIGEST_TOO_BIG_FOR_RSA_KEY = `enum RSA_R_DIGEST_TOO_BIG_FOR_RSA_KEY = 112;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_R_DIGEST_TOO_BIG_FOR_RSA_KEY); }))) {
            mixin(enumMixinStr_RSA_R_DIGEST_TOO_BIG_FOR_RSA_KEY);
        }
    }




    static if(!is(typeof(RSA_R_DMP1_NOT_CONGRUENT_TO_D))) {
        private enum enumMixinStr_RSA_R_DMP1_NOT_CONGRUENT_TO_D = `enum RSA_R_DMP1_NOT_CONGRUENT_TO_D = 124;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_R_DMP1_NOT_CONGRUENT_TO_D); }))) {
            mixin(enumMixinStr_RSA_R_DMP1_NOT_CONGRUENT_TO_D);
        }
    }




    static if(!is(typeof(RSA_R_DMQ1_NOT_CONGRUENT_TO_D))) {
        private enum enumMixinStr_RSA_R_DMQ1_NOT_CONGRUENT_TO_D = `enum RSA_R_DMQ1_NOT_CONGRUENT_TO_D = 125;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_R_DMQ1_NOT_CONGRUENT_TO_D); }))) {
            mixin(enumMixinStr_RSA_R_DMQ1_NOT_CONGRUENT_TO_D);
        }
    }




    static if(!is(typeof(RSA_R_D_E_NOT_CONGRUENT_TO_1))) {
        private enum enumMixinStr_RSA_R_D_E_NOT_CONGRUENT_TO_1 = `enum RSA_R_D_E_NOT_CONGRUENT_TO_1 = 123;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_R_D_E_NOT_CONGRUENT_TO_1); }))) {
            mixin(enumMixinStr_RSA_R_D_E_NOT_CONGRUENT_TO_1);
        }
    }




    static if(!is(typeof(RSA_R_FIRST_OCTET_INVALID))) {
        private enum enumMixinStr_RSA_R_FIRST_OCTET_INVALID = `enum RSA_R_FIRST_OCTET_INVALID = 133;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_R_FIRST_OCTET_INVALID); }))) {
            mixin(enumMixinStr_RSA_R_FIRST_OCTET_INVALID);
        }
    }




    static if(!is(typeof(RSA_R_ILLEGAL_OR_UNSUPPORTED_PADDING_MODE))) {
        private enum enumMixinStr_RSA_R_ILLEGAL_OR_UNSUPPORTED_PADDING_MODE = `enum RSA_R_ILLEGAL_OR_UNSUPPORTED_PADDING_MODE = 144;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_R_ILLEGAL_OR_UNSUPPORTED_PADDING_MODE); }))) {
            mixin(enumMixinStr_RSA_R_ILLEGAL_OR_UNSUPPORTED_PADDING_MODE);
        }
    }




    static if(!is(typeof(RSA_R_INVALID_DIGEST))) {
        private enum enumMixinStr_RSA_R_INVALID_DIGEST = `enum RSA_R_INVALID_DIGEST = 157;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_R_INVALID_DIGEST); }))) {
            mixin(enumMixinStr_RSA_R_INVALID_DIGEST);
        }
    }




    static if(!is(typeof(RSA_R_INVALID_DIGEST_LENGTH))) {
        private enum enumMixinStr_RSA_R_INVALID_DIGEST_LENGTH = `enum RSA_R_INVALID_DIGEST_LENGTH = 143;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_R_INVALID_DIGEST_LENGTH); }))) {
            mixin(enumMixinStr_RSA_R_INVALID_DIGEST_LENGTH);
        }
    }




    static if(!is(typeof(RSA_R_INVALID_HEADER))) {
        private enum enumMixinStr_RSA_R_INVALID_HEADER = `enum RSA_R_INVALID_HEADER = 137;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_R_INVALID_HEADER); }))) {
            mixin(enumMixinStr_RSA_R_INVALID_HEADER);
        }
    }




    static if(!is(typeof(RSA_R_INVALID_LABEL))) {
        private enum enumMixinStr_RSA_R_INVALID_LABEL = `enum RSA_R_INVALID_LABEL = 160;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_R_INVALID_LABEL); }))) {
            mixin(enumMixinStr_RSA_R_INVALID_LABEL);
        }
    }




    static if(!is(typeof(RSA_R_INVALID_MESSAGE_LENGTH))) {
        private enum enumMixinStr_RSA_R_INVALID_MESSAGE_LENGTH = `enum RSA_R_INVALID_MESSAGE_LENGTH = 131;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_R_INVALID_MESSAGE_LENGTH); }))) {
            mixin(enumMixinStr_RSA_R_INVALID_MESSAGE_LENGTH);
        }
    }




    static if(!is(typeof(RSA_R_INVALID_MGF1_MD))) {
        private enum enumMixinStr_RSA_R_INVALID_MGF1_MD = `enum RSA_R_INVALID_MGF1_MD = 156;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_R_INVALID_MGF1_MD); }))) {
            mixin(enumMixinStr_RSA_R_INVALID_MGF1_MD);
        }
    }




    static if(!is(typeof(RSA_R_INVALID_MULTI_PRIME_KEY))) {
        private enum enumMixinStr_RSA_R_INVALID_MULTI_PRIME_KEY = `enum RSA_R_INVALID_MULTI_PRIME_KEY = 167;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_R_INVALID_MULTI_PRIME_KEY); }))) {
            mixin(enumMixinStr_RSA_R_INVALID_MULTI_PRIME_KEY);
        }
    }




    static if(!is(typeof(RSA_R_INVALID_OAEP_PARAMETERS))) {
        private enum enumMixinStr_RSA_R_INVALID_OAEP_PARAMETERS = `enum RSA_R_INVALID_OAEP_PARAMETERS = 161;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_R_INVALID_OAEP_PARAMETERS); }))) {
            mixin(enumMixinStr_RSA_R_INVALID_OAEP_PARAMETERS);
        }
    }




    static if(!is(typeof(RSA_R_INVALID_PADDING))) {
        private enum enumMixinStr_RSA_R_INVALID_PADDING = `enum RSA_R_INVALID_PADDING = 138;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_R_INVALID_PADDING); }))) {
            mixin(enumMixinStr_RSA_R_INVALID_PADDING);
        }
    }




    static if(!is(typeof(RSA_R_INVALID_PADDING_MODE))) {
        private enum enumMixinStr_RSA_R_INVALID_PADDING_MODE = `enum RSA_R_INVALID_PADDING_MODE = 141;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_R_INVALID_PADDING_MODE); }))) {
            mixin(enumMixinStr_RSA_R_INVALID_PADDING_MODE);
        }
    }




    static if(!is(typeof(RSA_R_INVALID_PSS_PARAMETERS))) {
        private enum enumMixinStr_RSA_R_INVALID_PSS_PARAMETERS = `enum RSA_R_INVALID_PSS_PARAMETERS = 149;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_R_INVALID_PSS_PARAMETERS); }))) {
            mixin(enumMixinStr_RSA_R_INVALID_PSS_PARAMETERS);
        }
    }




    static if(!is(typeof(RSA_R_INVALID_PSS_SALTLEN))) {
        private enum enumMixinStr_RSA_R_INVALID_PSS_SALTLEN = `enum RSA_R_INVALID_PSS_SALTLEN = 146;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_R_INVALID_PSS_SALTLEN); }))) {
            mixin(enumMixinStr_RSA_R_INVALID_PSS_SALTLEN);
        }
    }




    static if(!is(typeof(RSA_R_INVALID_SALT_LENGTH))) {
        private enum enumMixinStr_RSA_R_INVALID_SALT_LENGTH = `enum RSA_R_INVALID_SALT_LENGTH = 150;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_R_INVALID_SALT_LENGTH); }))) {
            mixin(enumMixinStr_RSA_R_INVALID_SALT_LENGTH);
        }
    }




    static if(!is(typeof(RSA_R_INVALID_TRAILER))) {
        private enum enumMixinStr_RSA_R_INVALID_TRAILER = `enum RSA_R_INVALID_TRAILER = 139;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_R_INVALID_TRAILER); }))) {
            mixin(enumMixinStr_RSA_R_INVALID_TRAILER);
        }
    }




    static if(!is(typeof(RSA_R_INVALID_X931_DIGEST))) {
        private enum enumMixinStr_RSA_R_INVALID_X931_DIGEST = `enum RSA_R_INVALID_X931_DIGEST = 142;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_R_INVALID_X931_DIGEST); }))) {
            mixin(enumMixinStr_RSA_R_INVALID_X931_DIGEST);
        }
    }




    static if(!is(typeof(RSA_R_IQMP_NOT_INVERSE_OF_Q))) {
        private enum enumMixinStr_RSA_R_IQMP_NOT_INVERSE_OF_Q = `enum RSA_R_IQMP_NOT_INVERSE_OF_Q = 126;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_R_IQMP_NOT_INVERSE_OF_Q); }))) {
            mixin(enumMixinStr_RSA_R_IQMP_NOT_INVERSE_OF_Q);
        }
    }




    static if(!is(typeof(RSA_R_KEY_PRIME_NUM_INVALID))) {
        private enum enumMixinStr_RSA_R_KEY_PRIME_NUM_INVALID = `enum RSA_R_KEY_PRIME_NUM_INVALID = 165;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_R_KEY_PRIME_NUM_INVALID); }))) {
            mixin(enumMixinStr_RSA_R_KEY_PRIME_NUM_INVALID);
        }
    }




    static if(!is(typeof(RSA_R_KEY_SIZE_TOO_SMALL))) {
        private enum enumMixinStr_RSA_R_KEY_SIZE_TOO_SMALL = `enum RSA_R_KEY_SIZE_TOO_SMALL = 120;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_R_KEY_SIZE_TOO_SMALL); }))) {
            mixin(enumMixinStr_RSA_R_KEY_SIZE_TOO_SMALL);
        }
    }




    static if(!is(typeof(RSA_R_LAST_OCTET_INVALID))) {
        private enum enumMixinStr_RSA_R_LAST_OCTET_INVALID = `enum RSA_R_LAST_OCTET_INVALID = 134;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_R_LAST_OCTET_INVALID); }))) {
            mixin(enumMixinStr_RSA_R_LAST_OCTET_INVALID);
        }
    }




    static if(!is(typeof(RSA_R_MISSING_PRIVATE_KEY))) {
        private enum enumMixinStr_RSA_R_MISSING_PRIVATE_KEY = `enum RSA_R_MISSING_PRIVATE_KEY = 179;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_R_MISSING_PRIVATE_KEY); }))) {
            mixin(enumMixinStr_RSA_R_MISSING_PRIVATE_KEY);
        }
    }




    static if(!is(typeof(RSA_R_MGF1_DIGEST_NOT_ALLOWED))) {
        private enum enumMixinStr_RSA_R_MGF1_DIGEST_NOT_ALLOWED = `enum RSA_R_MGF1_DIGEST_NOT_ALLOWED = 152;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_R_MGF1_DIGEST_NOT_ALLOWED); }))) {
            mixin(enumMixinStr_RSA_R_MGF1_DIGEST_NOT_ALLOWED);
        }
    }




    static if(!is(typeof(RSA_R_MODULUS_TOO_LARGE))) {
        private enum enumMixinStr_RSA_R_MODULUS_TOO_LARGE = `enum RSA_R_MODULUS_TOO_LARGE = 105;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_R_MODULUS_TOO_LARGE); }))) {
            mixin(enumMixinStr_RSA_R_MODULUS_TOO_LARGE);
        }
    }




    static if(!is(typeof(RSA_R_MP_COEFFICIENT_NOT_INVERSE_OF_R))) {
        private enum enumMixinStr_RSA_R_MP_COEFFICIENT_NOT_INVERSE_OF_R = `enum RSA_R_MP_COEFFICIENT_NOT_INVERSE_OF_R = 168;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_R_MP_COEFFICIENT_NOT_INVERSE_OF_R); }))) {
            mixin(enumMixinStr_RSA_R_MP_COEFFICIENT_NOT_INVERSE_OF_R);
        }
    }




    static if(!is(typeof(RSA_R_MP_EXPONENT_NOT_CONGRUENT_TO_D))) {
        private enum enumMixinStr_RSA_R_MP_EXPONENT_NOT_CONGRUENT_TO_D = `enum RSA_R_MP_EXPONENT_NOT_CONGRUENT_TO_D = 169;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_R_MP_EXPONENT_NOT_CONGRUENT_TO_D); }))) {
            mixin(enumMixinStr_RSA_R_MP_EXPONENT_NOT_CONGRUENT_TO_D);
        }
    }




    static if(!is(typeof(RSA_R_MP_R_NOT_PRIME))) {
        private enum enumMixinStr_RSA_R_MP_R_NOT_PRIME = `enum RSA_R_MP_R_NOT_PRIME = 170;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_R_MP_R_NOT_PRIME); }))) {
            mixin(enumMixinStr_RSA_R_MP_R_NOT_PRIME);
        }
    }




    static if(!is(typeof(RSA_R_NO_PUBLIC_EXPONENT))) {
        private enum enumMixinStr_RSA_R_NO_PUBLIC_EXPONENT = `enum RSA_R_NO_PUBLIC_EXPONENT = 140;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_R_NO_PUBLIC_EXPONENT); }))) {
            mixin(enumMixinStr_RSA_R_NO_PUBLIC_EXPONENT);
        }
    }




    static if(!is(typeof(RSA_R_NULL_BEFORE_BLOCK_MISSING))) {
        private enum enumMixinStr_RSA_R_NULL_BEFORE_BLOCK_MISSING = `enum RSA_R_NULL_BEFORE_BLOCK_MISSING = 113;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_R_NULL_BEFORE_BLOCK_MISSING); }))) {
            mixin(enumMixinStr_RSA_R_NULL_BEFORE_BLOCK_MISSING);
        }
    }




    static if(!is(typeof(RSA_R_N_DOES_NOT_EQUAL_PRODUCT_OF_PRIMES))) {
        private enum enumMixinStr_RSA_R_N_DOES_NOT_EQUAL_PRODUCT_OF_PRIMES = `enum RSA_R_N_DOES_NOT_EQUAL_PRODUCT_OF_PRIMES = 172;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_R_N_DOES_NOT_EQUAL_PRODUCT_OF_PRIMES); }))) {
            mixin(enumMixinStr_RSA_R_N_DOES_NOT_EQUAL_PRODUCT_OF_PRIMES);
        }
    }




    static if(!is(typeof(RSA_R_N_DOES_NOT_EQUAL_P_Q))) {
        private enum enumMixinStr_RSA_R_N_DOES_NOT_EQUAL_P_Q = `enum RSA_R_N_DOES_NOT_EQUAL_P_Q = 127;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_R_N_DOES_NOT_EQUAL_P_Q); }))) {
            mixin(enumMixinStr_RSA_R_N_DOES_NOT_EQUAL_P_Q);
        }
    }




    static if(!is(typeof(RSA_R_OAEP_DECODING_ERROR))) {
        private enum enumMixinStr_RSA_R_OAEP_DECODING_ERROR = `enum RSA_R_OAEP_DECODING_ERROR = 121;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_R_OAEP_DECODING_ERROR); }))) {
            mixin(enumMixinStr_RSA_R_OAEP_DECODING_ERROR);
        }
    }




    static if(!is(typeof(RSA_R_OPERATION_NOT_SUPPORTED_FOR_THIS_KEYTYPE))) {
        private enum enumMixinStr_RSA_R_OPERATION_NOT_SUPPORTED_FOR_THIS_KEYTYPE = `enum RSA_R_OPERATION_NOT_SUPPORTED_FOR_THIS_KEYTYPE = 148;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_R_OPERATION_NOT_SUPPORTED_FOR_THIS_KEYTYPE); }))) {
            mixin(enumMixinStr_RSA_R_OPERATION_NOT_SUPPORTED_FOR_THIS_KEYTYPE);
        }
    }




    static if(!is(typeof(RSA_R_PADDING_CHECK_FAILED))) {
        private enum enumMixinStr_RSA_R_PADDING_CHECK_FAILED = `enum RSA_R_PADDING_CHECK_FAILED = 114;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_R_PADDING_CHECK_FAILED); }))) {
            mixin(enumMixinStr_RSA_R_PADDING_CHECK_FAILED);
        }
    }




    static if(!is(typeof(RSA_R_PKCS_DECODING_ERROR))) {
        private enum enumMixinStr_RSA_R_PKCS_DECODING_ERROR = `enum RSA_R_PKCS_DECODING_ERROR = 159;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_R_PKCS_DECODING_ERROR); }))) {
            mixin(enumMixinStr_RSA_R_PKCS_DECODING_ERROR);
        }
    }




    static if(!is(typeof(RSA_R_PSS_SALTLEN_TOO_SMALL))) {
        private enum enumMixinStr_RSA_R_PSS_SALTLEN_TOO_SMALL = `enum RSA_R_PSS_SALTLEN_TOO_SMALL = 164;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_R_PSS_SALTLEN_TOO_SMALL); }))) {
            mixin(enumMixinStr_RSA_R_PSS_SALTLEN_TOO_SMALL);
        }
    }




    static if(!is(typeof(RSA_R_P_NOT_PRIME))) {
        private enum enumMixinStr_RSA_R_P_NOT_PRIME = `enum RSA_R_P_NOT_PRIME = 128;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_R_P_NOT_PRIME); }))) {
            mixin(enumMixinStr_RSA_R_P_NOT_PRIME);
        }
    }




    static if(!is(typeof(RSA_R_Q_NOT_PRIME))) {
        private enum enumMixinStr_RSA_R_Q_NOT_PRIME = `enum RSA_R_Q_NOT_PRIME = 129;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_R_Q_NOT_PRIME); }))) {
            mixin(enumMixinStr_RSA_R_Q_NOT_PRIME);
        }
    }




    static if(!is(typeof(RSA_R_RSA_OPERATIONS_NOT_SUPPORTED))) {
        private enum enumMixinStr_RSA_R_RSA_OPERATIONS_NOT_SUPPORTED = `enum RSA_R_RSA_OPERATIONS_NOT_SUPPORTED = 130;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_R_RSA_OPERATIONS_NOT_SUPPORTED); }))) {
            mixin(enumMixinStr_RSA_R_RSA_OPERATIONS_NOT_SUPPORTED);
        }
    }




    static if(!is(typeof(RSA_R_SLEN_CHECK_FAILED))) {
        private enum enumMixinStr_RSA_R_SLEN_CHECK_FAILED = `enum RSA_R_SLEN_CHECK_FAILED = 136;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_R_SLEN_CHECK_FAILED); }))) {
            mixin(enumMixinStr_RSA_R_SLEN_CHECK_FAILED);
        }
    }




    static if(!is(typeof(RSA_R_SLEN_RECOVERY_FAILED))) {
        private enum enumMixinStr_RSA_R_SLEN_RECOVERY_FAILED = `enum RSA_R_SLEN_RECOVERY_FAILED = 135;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_R_SLEN_RECOVERY_FAILED); }))) {
            mixin(enumMixinStr_RSA_R_SLEN_RECOVERY_FAILED);
        }
    }




    static if(!is(typeof(RSA_R_SSLV3_ROLLBACK_ATTACK))) {
        private enum enumMixinStr_RSA_R_SSLV3_ROLLBACK_ATTACK = `enum RSA_R_SSLV3_ROLLBACK_ATTACK = 115;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_R_SSLV3_ROLLBACK_ATTACK); }))) {
            mixin(enumMixinStr_RSA_R_SSLV3_ROLLBACK_ATTACK);
        }
    }




    static if(!is(typeof(RSA_R_THE_ASN1_OBJECT_IDENTIFIER_IS_NOT_KNOWN_FOR_THIS_MD))) {
        private enum enumMixinStr_RSA_R_THE_ASN1_OBJECT_IDENTIFIER_IS_NOT_KNOWN_FOR_THIS_MD = `enum RSA_R_THE_ASN1_OBJECT_IDENTIFIER_IS_NOT_KNOWN_FOR_THIS_MD = 116;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_R_THE_ASN1_OBJECT_IDENTIFIER_IS_NOT_KNOWN_FOR_THIS_MD); }))) {
            mixin(enumMixinStr_RSA_R_THE_ASN1_OBJECT_IDENTIFIER_IS_NOT_KNOWN_FOR_THIS_MD);
        }
    }




    static if(!is(typeof(RSA_R_UNKNOWN_ALGORITHM_TYPE))) {
        private enum enumMixinStr_RSA_R_UNKNOWN_ALGORITHM_TYPE = `enum RSA_R_UNKNOWN_ALGORITHM_TYPE = 117;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_R_UNKNOWN_ALGORITHM_TYPE); }))) {
            mixin(enumMixinStr_RSA_R_UNKNOWN_ALGORITHM_TYPE);
        }
    }




    static if(!is(typeof(RSA_R_UNKNOWN_DIGEST))) {
        private enum enumMixinStr_RSA_R_UNKNOWN_DIGEST = `enum RSA_R_UNKNOWN_DIGEST = 166;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_R_UNKNOWN_DIGEST); }))) {
            mixin(enumMixinStr_RSA_R_UNKNOWN_DIGEST);
        }
    }




    static if(!is(typeof(RSA_R_UNKNOWN_MASK_DIGEST))) {
        private enum enumMixinStr_RSA_R_UNKNOWN_MASK_DIGEST = `enum RSA_R_UNKNOWN_MASK_DIGEST = 151;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_R_UNKNOWN_MASK_DIGEST); }))) {
            mixin(enumMixinStr_RSA_R_UNKNOWN_MASK_DIGEST);
        }
    }




    static if(!is(typeof(RSA_R_UNKNOWN_PADDING_TYPE))) {
        private enum enumMixinStr_RSA_R_UNKNOWN_PADDING_TYPE = `enum RSA_R_UNKNOWN_PADDING_TYPE = 118;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_R_UNKNOWN_PADDING_TYPE); }))) {
            mixin(enumMixinStr_RSA_R_UNKNOWN_PADDING_TYPE);
        }
    }




    static if(!is(typeof(RSA_R_UNSUPPORTED_ENCRYPTION_TYPE))) {
        private enum enumMixinStr_RSA_R_UNSUPPORTED_ENCRYPTION_TYPE = `enum RSA_R_UNSUPPORTED_ENCRYPTION_TYPE = 162;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_R_UNSUPPORTED_ENCRYPTION_TYPE); }))) {
            mixin(enumMixinStr_RSA_R_UNSUPPORTED_ENCRYPTION_TYPE);
        }
    }




    static if(!is(typeof(RSA_R_UNSUPPORTED_LABEL_SOURCE))) {
        private enum enumMixinStr_RSA_R_UNSUPPORTED_LABEL_SOURCE = `enum RSA_R_UNSUPPORTED_LABEL_SOURCE = 163;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_R_UNSUPPORTED_LABEL_SOURCE); }))) {
            mixin(enumMixinStr_RSA_R_UNSUPPORTED_LABEL_SOURCE);
        }
    }




    static if(!is(typeof(RSA_R_UNSUPPORTED_MASK_ALGORITHM))) {
        private enum enumMixinStr_RSA_R_UNSUPPORTED_MASK_ALGORITHM = `enum RSA_R_UNSUPPORTED_MASK_ALGORITHM = 153;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_R_UNSUPPORTED_MASK_ALGORITHM); }))) {
            mixin(enumMixinStr_RSA_R_UNSUPPORTED_MASK_ALGORITHM);
        }
    }




    static if(!is(typeof(RSA_R_UNSUPPORTED_MASK_PARAMETER))) {
        private enum enumMixinStr_RSA_R_UNSUPPORTED_MASK_PARAMETER = `enum RSA_R_UNSUPPORTED_MASK_PARAMETER = 154;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_R_UNSUPPORTED_MASK_PARAMETER); }))) {
            mixin(enumMixinStr_RSA_R_UNSUPPORTED_MASK_PARAMETER);
        }
    }




    static if(!is(typeof(RSA_R_UNSUPPORTED_SIGNATURE_TYPE))) {
        private enum enumMixinStr_RSA_R_UNSUPPORTED_SIGNATURE_TYPE = `enum RSA_R_UNSUPPORTED_SIGNATURE_TYPE = 155;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_R_UNSUPPORTED_SIGNATURE_TYPE); }))) {
            mixin(enumMixinStr_RSA_R_UNSUPPORTED_SIGNATURE_TYPE);
        }
    }




    static if(!is(typeof(RSA_R_VALUE_MISSING))) {
        private enum enumMixinStr_RSA_R_VALUE_MISSING = `enum RSA_R_VALUE_MISSING = 147;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_R_VALUE_MISSING); }))) {
            mixin(enumMixinStr_RSA_R_VALUE_MISSING);
        }
    }




    static if(!is(typeof(RSA_R_WRONG_SIGNATURE_LENGTH))) {
        private enum enumMixinStr_RSA_R_WRONG_SIGNATURE_LENGTH = `enum RSA_R_WRONG_SIGNATURE_LENGTH = 119;`;
        static if(is(typeof({ mixin(enumMixinStr_RSA_R_WRONG_SIGNATURE_LENGTH); }))) {
            mixin(enumMixinStr_RSA_R_WRONG_SIGNATURE_LENGTH);
        }
    }






    static if(!is(typeof(TLS1_AD_USER_CANCELLED))) {
        private enum enumMixinStr_TLS1_AD_USER_CANCELLED = `enum TLS1_AD_USER_CANCELLED = 90;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_AD_USER_CANCELLED); }))) {
            mixin(enumMixinStr_TLS1_AD_USER_CANCELLED);
        }
    }




    static if(!is(typeof(TLS1_AD_INAPPROPRIATE_FALLBACK))) {
        private enum enumMixinStr_TLS1_AD_INAPPROPRIATE_FALLBACK = `enum TLS1_AD_INAPPROPRIATE_FALLBACK = 86;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_AD_INAPPROPRIATE_FALLBACK); }))) {
            mixin(enumMixinStr_TLS1_AD_INAPPROPRIATE_FALLBACK);
        }
    }
    static if(!is(typeof(TLS1_AD_INTERNAL_ERROR))) {
        private enum enumMixinStr_TLS1_AD_INTERNAL_ERROR = `enum TLS1_AD_INTERNAL_ERROR = 80;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_AD_INTERNAL_ERROR); }))) {
            mixin(enumMixinStr_TLS1_AD_INTERNAL_ERROR);
        }
    }




    static if(!is(typeof(TLS1_AD_INSUFFICIENT_SECURITY))) {
        private enum enumMixinStr_TLS1_AD_INSUFFICIENT_SECURITY = `enum TLS1_AD_INSUFFICIENT_SECURITY = 71;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_AD_INSUFFICIENT_SECURITY); }))) {
            mixin(enumMixinStr_TLS1_AD_INSUFFICIENT_SECURITY);
        }
    }




    static if(!is(typeof(TLS1_AD_PROTOCOL_VERSION))) {
        private enum enumMixinStr_TLS1_AD_PROTOCOL_VERSION = `enum TLS1_AD_PROTOCOL_VERSION = 70;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_AD_PROTOCOL_VERSION); }))) {
            mixin(enumMixinStr_TLS1_AD_PROTOCOL_VERSION);
        }
    }




    static if(!is(typeof(TLS1_AD_EXPORT_RESTRICTION))) {
        private enum enumMixinStr_TLS1_AD_EXPORT_RESTRICTION = `enum TLS1_AD_EXPORT_RESTRICTION = 60;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_AD_EXPORT_RESTRICTION); }))) {
            mixin(enumMixinStr_TLS1_AD_EXPORT_RESTRICTION);
        }
    }




    static if(!is(typeof(TLS1_AD_DECRYPT_ERROR))) {
        private enum enumMixinStr_TLS1_AD_DECRYPT_ERROR = `enum TLS1_AD_DECRYPT_ERROR = 51;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_AD_DECRYPT_ERROR); }))) {
            mixin(enumMixinStr_TLS1_AD_DECRYPT_ERROR);
        }
    }




    static if(!is(typeof(TLS1_AD_DECODE_ERROR))) {
        private enum enumMixinStr_TLS1_AD_DECODE_ERROR = `enum TLS1_AD_DECODE_ERROR = 50;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_AD_DECODE_ERROR); }))) {
            mixin(enumMixinStr_TLS1_AD_DECODE_ERROR);
        }
    }




    static if(!is(typeof(TLS1_AD_ACCESS_DENIED))) {
        private enum enumMixinStr_TLS1_AD_ACCESS_DENIED = `enum TLS1_AD_ACCESS_DENIED = 49;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_AD_ACCESS_DENIED); }))) {
            mixin(enumMixinStr_TLS1_AD_ACCESS_DENIED);
        }
    }




    static if(!is(typeof(TLS1_AD_UNKNOWN_CA))) {
        private enum enumMixinStr_TLS1_AD_UNKNOWN_CA = `enum TLS1_AD_UNKNOWN_CA = 48;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_AD_UNKNOWN_CA); }))) {
            mixin(enumMixinStr_TLS1_AD_UNKNOWN_CA);
        }
    }




    static if(!is(typeof(TLS1_AD_RECORD_OVERFLOW))) {
        private enum enumMixinStr_TLS1_AD_RECORD_OVERFLOW = `enum TLS1_AD_RECORD_OVERFLOW = 22;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_AD_RECORD_OVERFLOW); }))) {
            mixin(enumMixinStr_TLS1_AD_RECORD_OVERFLOW);
        }
    }




    static if(!is(typeof(TLS1_AD_DECRYPTION_FAILED))) {
        private enum enumMixinStr_TLS1_AD_DECRYPTION_FAILED = `enum TLS1_AD_DECRYPTION_FAILED = 21;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_AD_DECRYPTION_FAILED); }))) {
            mixin(enumMixinStr_TLS1_AD_DECRYPTION_FAILED);
        }
    }
    static if(!is(typeof(TLS1_2_VERSION_MINOR))) {
        private enum enumMixinStr_TLS1_2_VERSION_MINOR = `enum TLS1_2_VERSION_MINOR = 0x03;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_2_VERSION_MINOR); }))) {
            mixin(enumMixinStr_TLS1_2_VERSION_MINOR);
        }
    }




    static if(!is(typeof(TLS1_2_VERSION_MAJOR))) {
        private enum enumMixinStr_TLS1_2_VERSION_MAJOR = `enum TLS1_2_VERSION_MAJOR = 0x03;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_2_VERSION_MAJOR); }))) {
            mixin(enumMixinStr_TLS1_2_VERSION_MAJOR);
        }
    }




    static if(!is(typeof(TLS1_1_VERSION_MINOR))) {
        private enum enumMixinStr_TLS1_1_VERSION_MINOR = `enum TLS1_1_VERSION_MINOR = 0x02;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_1_VERSION_MINOR); }))) {
            mixin(enumMixinStr_TLS1_1_VERSION_MINOR);
        }
    }




    static if(!is(typeof(TLS1_1_VERSION_MAJOR))) {
        private enum enumMixinStr_TLS1_1_VERSION_MAJOR = `enum TLS1_1_VERSION_MAJOR = 0x03;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_1_VERSION_MAJOR); }))) {
            mixin(enumMixinStr_TLS1_1_VERSION_MAJOR);
        }
    }




    static if(!is(typeof(TLS1_VERSION_MINOR))) {
        private enum enumMixinStr_TLS1_VERSION_MINOR = `enum TLS1_VERSION_MINOR = 0x01;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_VERSION_MINOR); }))) {
            mixin(enumMixinStr_TLS1_VERSION_MINOR);
        }
    }




    static if(!is(typeof(TLS1_VERSION_MAJOR))) {
        private enum enumMixinStr_TLS1_VERSION_MAJOR = `enum TLS1_VERSION_MAJOR = 0x03;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_VERSION_MAJOR); }))) {
            mixin(enumMixinStr_TLS1_VERSION_MAJOR);
        }
    }




    static if(!is(typeof(TLS_ANY_VERSION))) {
        private enum enumMixinStr_TLS_ANY_VERSION = `enum TLS_ANY_VERSION = 0x10000;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS_ANY_VERSION); }))) {
            mixin(enumMixinStr_TLS_ANY_VERSION);
        }
    }




    static if(!is(typeof(TLS_MAX_VERSION))) {
        private enum enumMixinStr_TLS_MAX_VERSION = `enum TLS_MAX_VERSION = TLS1_2_VERSION;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS_MAX_VERSION); }))) {
            mixin(enumMixinStr_TLS_MAX_VERSION);
        }
    }




    static if(!is(typeof(TLS1_2_VERSION))) {
        private enum enumMixinStr_TLS1_2_VERSION = `enum TLS1_2_VERSION = 0x0303;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_2_VERSION); }))) {
            mixin(enumMixinStr_TLS1_2_VERSION);
        }
    }




    static if(!is(typeof(TLS1_1_VERSION))) {
        private enum enumMixinStr_TLS1_1_VERSION = `enum TLS1_1_VERSION = 0x0302;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_1_VERSION); }))) {
            mixin(enumMixinStr_TLS1_1_VERSION);
        }
    }




    static if(!is(typeof(TLS1_VERSION))) {
        private enum enumMixinStr_TLS1_VERSION = `enum TLS1_VERSION = 0x0301;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_VERSION); }))) {
            mixin(enumMixinStr_TLS1_VERSION);
        }
    }




    static if(!is(typeof(OPENSSL_TLS_SECURITY_LEVEL))) {
        private enum enumMixinStr_OPENSSL_TLS_SECURITY_LEVEL = `enum OPENSSL_TLS_SECURITY_LEVEL = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_OPENSSL_TLS_SECURITY_LEVEL); }))) {
            mixin(enumMixinStr_OPENSSL_TLS_SECURITY_LEVEL);
        }
    }






    static if(!is(typeof(SSL3_CHANGE_CIPHER_SERVER_WRITE))) {
        private enum enumMixinStr_SSL3_CHANGE_CIPHER_SERVER_WRITE = `enum SSL3_CHANGE_CIPHER_SERVER_WRITE = ( SSL3_CC_SERVER | SSL3_CC_WRITE );`;
        static if(is(typeof({ mixin(enumMixinStr_SSL3_CHANGE_CIPHER_SERVER_WRITE); }))) {
            mixin(enumMixinStr_SSL3_CHANGE_CIPHER_SERVER_WRITE);
        }
    }




    static if(!is(typeof(SSL3_CHANGE_CIPHER_CLIENT_READ))) {
        private enum enumMixinStr_SSL3_CHANGE_CIPHER_CLIENT_READ = `enum SSL3_CHANGE_CIPHER_CLIENT_READ = ( SSL3_CC_CLIENT | SSL3_CC_READ );`;
        static if(is(typeof({ mixin(enumMixinStr_SSL3_CHANGE_CIPHER_CLIENT_READ); }))) {
            mixin(enumMixinStr_SSL3_CHANGE_CIPHER_CLIENT_READ);
        }
    }




    static if(!is(typeof(SSL3_CHANGE_CIPHER_SERVER_READ))) {
        private enum enumMixinStr_SSL3_CHANGE_CIPHER_SERVER_READ = `enum SSL3_CHANGE_CIPHER_SERVER_READ = ( SSL3_CC_SERVER | SSL3_CC_READ );`;
        static if(is(typeof({ mixin(enumMixinStr_SSL3_CHANGE_CIPHER_SERVER_READ); }))) {
            mixin(enumMixinStr_SSL3_CHANGE_CIPHER_SERVER_READ);
        }
    }




    static if(!is(typeof(SSL3_CHANGE_CIPHER_CLIENT_WRITE))) {
        private enum enumMixinStr_SSL3_CHANGE_CIPHER_CLIENT_WRITE = `enum SSL3_CHANGE_CIPHER_CLIENT_WRITE = ( SSL3_CC_CLIENT | SSL3_CC_WRITE );`;
        static if(is(typeof({ mixin(enumMixinStr_SSL3_CHANGE_CIPHER_CLIENT_WRITE); }))) {
            mixin(enumMixinStr_SSL3_CHANGE_CIPHER_CLIENT_WRITE);
        }
    }




    static if(!is(typeof(SSL3_CC_SERVER))) {
        private enum enumMixinStr_SSL3_CC_SERVER = `enum SSL3_CC_SERVER = 0x20;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL3_CC_SERVER); }))) {
            mixin(enumMixinStr_SSL3_CC_SERVER);
        }
    }




    static if(!is(typeof(SSL3_CC_CLIENT))) {
        private enum enumMixinStr_SSL3_CC_CLIENT = `enum SSL3_CC_CLIENT = 0x10;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL3_CC_CLIENT); }))) {
            mixin(enumMixinStr_SSL3_CC_CLIENT);
        }
    }




    static if(!is(typeof(SSL3_CC_WRITE))) {
        private enum enumMixinStr_SSL3_CC_WRITE = `enum SSL3_CC_WRITE = 0x02;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL3_CC_WRITE); }))) {
            mixin(enumMixinStr_SSL3_CC_WRITE);
        }
    }




    static if(!is(typeof(SSL3_CC_READ))) {
        private enum enumMixinStr_SSL3_CC_READ = `enum SSL3_CC_READ = 0x01;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL3_CC_READ); }))) {
            mixin(enumMixinStr_SSL3_CC_READ);
        }
    }




    static if(!is(typeof(SSL3_MT_CCS))) {
        private enum enumMixinStr_SSL3_MT_CCS = `enum SSL3_MT_CCS = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL3_MT_CCS); }))) {
            mixin(enumMixinStr_SSL3_MT_CCS);
        }
    }




    static if(!is(typeof(SSL3_MT_CHANGE_CIPHER_SPEC))) {
        private enum enumMixinStr_SSL3_MT_CHANGE_CIPHER_SPEC = `enum SSL3_MT_CHANGE_CIPHER_SPEC = 0x0101;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL3_MT_CHANGE_CIPHER_SPEC); }))) {
            mixin(enumMixinStr_SSL3_MT_CHANGE_CIPHER_SPEC);
        }
    }




    static if(!is(typeof(DTLS1_MT_HELLO_VERIFY_REQUEST))) {
        private enum enumMixinStr_DTLS1_MT_HELLO_VERIFY_REQUEST = `enum DTLS1_MT_HELLO_VERIFY_REQUEST = 3;`;
        static if(is(typeof({ mixin(enumMixinStr_DTLS1_MT_HELLO_VERIFY_REQUEST); }))) {
            mixin(enumMixinStr_DTLS1_MT_HELLO_VERIFY_REQUEST);
        }
    }




    static if(!is(typeof(SSL3_MT_NEXT_PROTO))) {
        private enum enumMixinStr_SSL3_MT_NEXT_PROTO = `enum SSL3_MT_NEXT_PROTO = 67;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL3_MT_NEXT_PROTO); }))) {
            mixin(enumMixinStr_SSL3_MT_NEXT_PROTO);
        }
    }




    static if(!is(typeof(SSL3_MT_CERTIFICATE_STATUS))) {
        private enum enumMixinStr_SSL3_MT_CERTIFICATE_STATUS = `enum SSL3_MT_CERTIFICATE_STATUS = 22;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL3_MT_CERTIFICATE_STATUS); }))) {
            mixin(enumMixinStr_SSL3_MT_CERTIFICATE_STATUS);
        }
    }




    static if(!is(typeof(SSL3_MT_FINISHED))) {
        private enum enumMixinStr_SSL3_MT_FINISHED = `enum SSL3_MT_FINISHED = 20;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL3_MT_FINISHED); }))) {
            mixin(enumMixinStr_SSL3_MT_FINISHED);
        }
    }




    static if(!is(typeof(SSL3_MT_CLIENT_KEY_EXCHANGE))) {
        private enum enumMixinStr_SSL3_MT_CLIENT_KEY_EXCHANGE = `enum SSL3_MT_CLIENT_KEY_EXCHANGE = 16;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL3_MT_CLIENT_KEY_EXCHANGE); }))) {
            mixin(enumMixinStr_SSL3_MT_CLIENT_KEY_EXCHANGE);
        }
    }




    static if(!is(typeof(SSL3_MT_CERTIFICATE_VERIFY))) {
        private enum enumMixinStr_SSL3_MT_CERTIFICATE_VERIFY = `enum SSL3_MT_CERTIFICATE_VERIFY = 15;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL3_MT_CERTIFICATE_VERIFY); }))) {
            mixin(enumMixinStr_SSL3_MT_CERTIFICATE_VERIFY);
        }
    }




    static if(!is(typeof(SSL3_MT_SERVER_DONE))) {
        private enum enumMixinStr_SSL3_MT_SERVER_DONE = `enum SSL3_MT_SERVER_DONE = 14;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL3_MT_SERVER_DONE); }))) {
            mixin(enumMixinStr_SSL3_MT_SERVER_DONE);
        }
    }




    static if(!is(typeof(SSL3_MT_CERTIFICATE_REQUEST))) {
        private enum enumMixinStr_SSL3_MT_CERTIFICATE_REQUEST = `enum SSL3_MT_CERTIFICATE_REQUEST = 13;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL3_MT_CERTIFICATE_REQUEST); }))) {
            mixin(enumMixinStr_SSL3_MT_CERTIFICATE_REQUEST);
        }
    }




    static if(!is(typeof(SSL3_MT_SERVER_KEY_EXCHANGE))) {
        private enum enumMixinStr_SSL3_MT_SERVER_KEY_EXCHANGE = `enum SSL3_MT_SERVER_KEY_EXCHANGE = 12;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL3_MT_SERVER_KEY_EXCHANGE); }))) {
            mixin(enumMixinStr_SSL3_MT_SERVER_KEY_EXCHANGE);
        }
    }




    static if(!is(typeof(SSL3_MT_CERTIFICATE))) {
        private enum enumMixinStr_SSL3_MT_CERTIFICATE = `enum SSL3_MT_CERTIFICATE = 11;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL3_MT_CERTIFICATE); }))) {
            mixin(enumMixinStr_SSL3_MT_CERTIFICATE);
        }
    }




    static if(!is(typeof(SSL3_MT_NEWSESSION_TICKET))) {
        private enum enumMixinStr_SSL3_MT_NEWSESSION_TICKET = `enum SSL3_MT_NEWSESSION_TICKET = 4;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL3_MT_NEWSESSION_TICKET); }))) {
            mixin(enumMixinStr_SSL3_MT_NEWSESSION_TICKET);
        }
    }




    static if(!is(typeof(SSL3_MT_SERVER_HELLO))) {
        private enum enumMixinStr_SSL3_MT_SERVER_HELLO = `enum SSL3_MT_SERVER_HELLO = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL3_MT_SERVER_HELLO); }))) {
            mixin(enumMixinStr_SSL3_MT_SERVER_HELLO);
        }
    }




    static if(!is(typeof(SSL3_MT_CLIENT_HELLO))) {
        private enum enumMixinStr_SSL3_MT_CLIENT_HELLO = `enum SSL3_MT_CLIENT_HELLO = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL3_MT_CLIENT_HELLO); }))) {
            mixin(enumMixinStr_SSL3_MT_CLIENT_HELLO);
        }
    }




    static if(!is(typeof(SSL3_MT_HELLO_REQUEST))) {
        private enum enumMixinStr_SSL3_MT_HELLO_REQUEST = `enum SSL3_MT_HELLO_REQUEST = 0;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL3_MT_HELLO_REQUEST); }))) {
            mixin(enumMixinStr_SSL3_MT_HELLO_REQUEST);
        }
    }




    static if(!is(typeof(TLS1_FLAGS_RECEIVED_EXTMS))) {
        private enum enumMixinStr_TLS1_FLAGS_RECEIVED_EXTMS = `enum TLS1_FLAGS_RECEIVED_EXTMS = 0x0200;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_FLAGS_RECEIVED_EXTMS); }))) {
            mixin(enumMixinStr_TLS1_FLAGS_RECEIVED_EXTMS);
        }
    }




    static if(!is(typeof(TLS1_FLAGS_ENCRYPT_THEN_MAC))) {
        private enum enumMixinStr_TLS1_FLAGS_ENCRYPT_THEN_MAC = `enum TLS1_FLAGS_ENCRYPT_THEN_MAC = 0x0100;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_FLAGS_ENCRYPT_THEN_MAC); }))) {
            mixin(enumMixinStr_TLS1_FLAGS_ENCRYPT_THEN_MAC);
        }
    }




    static if(!is(typeof(TLS1_FLAGS_SKIP_CERT_VERIFY))) {
        private enum enumMixinStr_TLS1_FLAGS_SKIP_CERT_VERIFY = `enum TLS1_FLAGS_SKIP_CERT_VERIFY = 0x0010;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_FLAGS_SKIP_CERT_VERIFY); }))) {
            mixin(enumMixinStr_TLS1_FLAGS_SKIP_CERT_VERIFY);
        }
    }




    static if(!is(typeof(TLS1_FLAGS_TLS_PADDING_BUG))) {
        private enum enumMixinStr_TLS1_FLAGS_TLS_PADDING_BUG = `enum TLS1_FLAGS_TLS_PADDING_BUG = 0x0;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_FLAGS_TLS_PADDING_BUG); }))) {
            mixin(enumMixinStr_TLS1_FLAGS_TLS_PADDING_BUG);
        }
    }




    static if(!is(typeof(SSL3_FLAGS_NO_RENEGOTIATE_CIPHERS))) {
        private enum enumMixinStr_SSL3_FLAGS_NO_RENEGOTIATE_CIPHERS = `enum SSL3_FLAGS_NO_RENEGOTIATE_CIPHERS = 0x0001;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL3_FLAGS_NO_RENEGOTIATE_CIPHERS); }))) {
            mixin(enumMixinStr_SSL3_FLAGS_NO_RENEGOTIATE_CIPHERS);
        }
    }




    static if(!is(typeof(SSL3_CT_NUMBER))) {
        private enum enumMixinStr_SSL3_CT_NUMBER = `enum SSL3_CT_NUMBER = 9;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL3_CT_NUMBER); }))) {
            mixin(enumMixinStr_SSL3_CT_NUMBER);
        }
    }




    static if(!is(typeof(SSL3_CT_FORTEZZA_DMS))) {
        private enum enumMixinStr_SSL3_CT_FORTEZZA_DMS = `enum SSL3_CT_FORTEZZA_DMS = 20;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL3_CT_FORTEZZA_DMS); }))) {
            mixin(enumMixinStr_SSL3_CT_FORTEZZA_DMS);
        }
    }




    static if(!is(typeof(SSL3_CT_DSS_EPHEMERAL_DH))) {
        private enum enumMixinStr_SSL3_CT_DSS_EPHEMERAL_DH = `enum SSL3_CT_DSS_EPHEMERAL_DH = 6;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL3_CT_DSS_EPHEMERAL_DH); }))) {
            mixin(enumMixinStr_SSL3_CT_DSS_EPHEMERAL_DH);
        }
    }




    static if(!is(typeof(SSL3_CT_RSA_EPHEMERAL_DH))) {
        private enum enumMixinStr_SSL3_CT_RSA_EPHEMERAL_DH = `enum SSL3_CT_RSA_EPHEMERAL_DH = 5;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL3_CT_RSA_EPHEMERAL_DH); }))) {
            mixin(enumMixinStr_SSL3_CT_RSA_EPHEMERAL_DH);
        }
    }




    static if(!is(typeof(SSL3_CT_DSS_FIXED_DH))) {
        private enum enumMixinStr_SSL3_CT_DSS_FIXED_DH = `enum SSL3_CT_DSS_FIXED_DH = 4;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL3_CT_DSS_FIXED_DH); }))) {
            mixin(enumMixinStr_SSL3_CT_DSS_FIXED_DH);
        }
    }




    static if(!is(typeof(SSL3_CT_RSA_FIXED_DH))) {
        private enum enumMixinStr_SSL3_CT_RSA_FIXED_DH = `enum SSL3_CT_RSA_FIXED_DH = 3;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL3_CT_RSA_FIXED_DH); }))) {
            mixin(enumMixinStr_SSL3_CT_RSA_FIXED_DH);
        }
    }




    static if(!is(typeof(SSL3_CT_DSS_SIGN))) {
        private enum enumMixinStr_SSL3_CT_DSS_SIGN = `enum SSL3_CT_DSS_SIGN = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL3_CT_DSS_SIGN); }))) {
            mixin(enumMixinStr_SSL3_CT_DSS_SIGN);
        }
    }




    static if(!is(typeof(SSL3_CT_RSA_SIGN))) {
        private enum enumMixinStr_SSL3_CT_RSA_SIGN = `enum SSL3_CT_RSA_SIGN = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL3_CT_RSA_SIGN); }))) {
            mixin(enumMixinStr_SSL3_CT_RSA_SIGN);
        }
    }




    static if(!is(typeof(TLS1_HB_RESPONSE))) {
        private enum enumMixinStr_TLS1_HB_RESPONSE = `enum TLS1_HB_RESPONSE = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_HB_RESPONSE); }))) {
            mixin(enumMixinStr_TLS1_HB_RESPONSE);
        }
    }




    static if(!is(typeof(TLS1_HB_REQUEST))) {
        private enum enumMixinStr_TLS1_HB_REQUEST = `enum TLS1_HB_REQUEST = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_HB_REQUEST); }))) {
            mixin(enumMixinStr_TLS1_HB_REQUEST);
        }
    }




    static if(!is(typeof(SSL3_AD_ILLEGAL_PARAMETER))) {
        private enum enumMixinStr_SSL3_AD_ILLEGAL_PARAMETER = `enum SSL3_AD_ILLEGAL_PARAMETER = 47;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL3_AD_ILLEGAL_PARAMETER); }))) {
            mixin(enumMixinStr_SSL3_AD_ILLEGAL_PARAMETER);
        }
    }




    static if(!is(typeof(SSL3_AD_CERTIFICATE_UNKNOWN))) {
        private enum enumMixinStr_SSL3_AD_CERTIFICATE_UNKNOWN = `enum SSL3_AD_CERTIFICATE_UNKNOWN = 46;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL3_AD_CERTIFICATE_UNKNOWN); }))) {
            mixin(enumMixinStr_SSL3_AD_CERTIFICATE_UNKNOWN);
        }
    }




    static if(!is(typeof(SSL3_AD_CERTIFICATE_EXPIRED))) {
        private enum enumMixinStr_SSL3_AD_CERTIFICATE_EXPIRED = `enum SSL3_AD_CERTIFICATE_EXPIRED = 45;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL3_AD_CERTIFICATE_EXPIRED); }))) {
            mixin(enumMixinStr_SSL3_AD_CERTIFICATE_EXPIRED);
        }
    }




    static if(!is(typeof(SSL3_AD_CERTIFICATE_REVOKED))) {
        private enum enumMixinStr_SSL3_AD_CERTIFICATE_REVOKED = `enum SSL3_AD_CERTIFICATE_REVOKED = 44;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL3_AD_CERTIFICATE_REVOKED); }))) {
            mixin(enumMixinStr_SSL3_AD_CERTIFICATE_REVOKED);
        }
    }




    static if(!is(typeof(SSL3_AD_UNSUPPORTED_CERTIFICATE))) {
        private enum enumMixinStr_SSL3_AD_UNSUPPORTED_CERTIFICATE = `enum SSL3_AD_UNSUPPORTED_CERTIFICATE = 43;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL3_AD_UNSUPPORTED_CERTIFICATE); }))) {
            mixin(enumMixinStr_SSL3_AD_UNSUPPORTED_CERTIFICATE);
        }
    }




    static if(!is(typeof(SSL3_AD_BAD_CERTIFICATE))) {
        private enum enumMixinStr_SSL3_AD_BAD_CERTIFICATE = `enum SSL3_AD_BAD_CERTIFICATE = 42;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL3_AD_BAD_CERTIFICATE); }))) {
            mixin(enumMixinStr_SSL3_AD_BAD_CERTIFICATE);
        }
    }




    static if(!is(typeof(SSL3_AD_NO_CERTIFICATE))) {
        private enum enumMixinStr_SSL3_AD_NO_CERTIFICATE = `enum SSL3_AD_NO_CERTIFICATE = 41;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL3_AD_NO_CERTIFICATE); }))) {
            mixin(enumMixinStr_SSL3_AD_NO_CERTIFICATE);
        }
    }




    static if(!is(typeof(SSL3_AD_HANDSHAKE_FAILURE))) {
        private enum enumMixinStr_SSL3_AD_HANDSHAKE_FAILURE = `enum SSL3_AD_HANDSHAKE_FAILURE = 40;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL3_AD_HANDSHAKE_FAILURE); }))) {
            mixin(enumMixinStr_SSL3_AD_HANDSHAKE_FAILURE);
        }
    }




    static if(!is(typeof(SSL3_AD_DECOMPRESSION_FAILURE))) {
        private enum enumMixinStr_SSL3_AD_DECOMPRESSION_FAILURE = `enum SSL3_AD_DECOMPRESSION_FAILURE = 30;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL3_AD_DECOMPRESSION_FAILURE); }))) {
            mixin(enumMixinStr_SSL3_AD_DECOMPRESSION_FAILURE);
        }
    }




    static if(!is(typeof(SSL3_AD_BAD_RECORD_MAC))) {
        private enum enumMixinStr_SSL3_AD_BAD_RECORD_MAC = `enum SSL3_AD_BAD_RECORD_MAC = 20;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL3_AD_BAD_RECORD_MAC); }))) {
            mixin(enumMixinStr_SSL3_AD_BAD_RECORD_MAC);
        }
    }




    static if(!is(typeof(SSL3_AD_UNEXPECTED_MESSAGE))) {
        private enum enumMixinStr_SSL3_AD_UNEXPECTED_MESSAGE = `enum SSL3_AD_UNEXPECTED_MESSAGE = 10;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL3_AD_UNEXPECTED_MESSAGE); }))) {
            mixin(enumMixinStr_SSL3_AD_UNEXPECTED_MESSAGE);
        }
    }




    static if(!is(typeof(SSL3_AD_CLOSE_NOTIFY))) {
        private enum enumMixinStr_SSL3_AD_CLOSE_NOTIFY = `enum SSL3_AD_CLOSE_NOTIFY = 0;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL3_AD_CLOSE_NOTIFY); }))) {
            mixin(enumMixinStr_SSL3_AD_CLOSE_NOTIFY);
        }
    }




    static if(!is(typeof(SSL3_AL_FATAL))) {
        private enum enumMixinStr_SSL3_AL_FATAL = `enum SSL3_AL_FATAL = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL3_AL_FATAL); }))) {
            mixin(enumMixinStr_SSL3_AL_FATAL);
        }
    }




    static if(!is(typeof(SSL3_AL_WARNING))) {
        private enum enumMixinStr_SSL3_AL_WARNING = `enum SSL3_AL_WARNING = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL3_AL_WARNING); }))) {
            mixin(enumMixinStr_SSL3_AL_WARNING);
        }
    }




    static if(!is(typeof(SSL3_RT_HEADER))) {
        private enum enumMixinStr_SSL3_RT_HEADER = `enum SSL3_RT_HEADER = 0x100;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL3_RT_HEADER); }))) {
            mixin(enumMixinStr_SSL3_RT_HEADER);
        }
    }




    static if(!is(typeof(TLS1_RT_CRYPTO_FIXED_IV))) {
        private enum enumMixinStr_TLS1_RT_CRYPTO_FIXED_IV = `enum TLS1_RT_CRYPTO_FIXED_IV = ( TLS1_RT_CRYPTO | 0x8 );`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_RT_CRYPTO_FIXED_IV); }))) {
            mixin(enumMixinStr_TLS1_RT_CRYPTO_FIXED_IV);
        }
    }




    static if(!is(typeof(TLS1_RT_CRYPTO_IV))) {
        private enum enumMixinStr_TLS1_RT_CRYPTO_IV = `enum TLS1_RT_CRYPTO_IV = ( TLS1_RT_CRYPTO | 0x7 );`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_RT_CRYPTO_IV); }))) {
            mixin(enumMixinStr_TLS1_RT_CRYPTO_IV);
        }
    }




    static if(!is(typeof(TLS1_RT_CRYPTO_KEY))) {
        private enum enumMixinStr_TLS1_RT_CRYPTO_KEY = `enum TLS1_RT_CRYPTO_KEY = ( TLS1_RT_CRYPTO | 0x6 );`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_RT_CRYPTO_KEY); }))) {
            mixin(enumMixinStr_TLS1_RT_CRYPTO_KEY);
        }
    }




    static if(!is(typeof(TLS1_RT_CRYPTO_MAC))) {
        private enum enumMixinStr_TLS1_RT_CRYPTO_MAC = `enum TLS1_RT_CRYPTO_MAC = ( TLS1_RT_CRYPTO | 0x5 );`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_RT_CRYPTO_MAC); }))) {
            mixin(enumMixinStr_TLS1_RT_CRYPTO_MAC);
        }
    }




    static if(!is(typeof(TLS1_RT_CRYPTO_WRITE))) {
        private enum enumMixinStr_TLS1_RT_CRYPTO_WRITE = `enum TLS1_RT_CRYPTO_WRITE = 0x0100;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_RT_CRYPTO_WRITE); }))) {
            mixin(enumMixinStr_TLS1_RT_CRYPTO_WRITE);
        }
    }




    static if(!is(typeof(TLS1_RT_CRYPTO_READ))) {
        private enum enumMixinStr_TLS1_RT_CRYPTO_READ = `enum TLS1_RT_CRYPTO_READ = 0x0000;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_RT_CRYPTO_READ); }))) {
            mixin(enumMixinStr_TLS1_RT_CRYPTO_READ);
        }
    }




    static if(!is(typeof(TLS1_RT_CRYPTO_MASTER))) {
        private enum enumMixinStr_TLS1_RT_CRYPTO_MASTER = `enum TLS1_RT_CRYPTO_MASTER = ( TLS1_RT_CRYPTO | 0x4 );`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_RT_CRYPTO_MASTER); }))) {
            mixin(enumMixinStr_TLS1_RT_CRYPTO_MASTER);
        }
    }




    static if(!is(typeof(TLS1_RT_CRYPTO_SERVER_RANDOM))) {
        private enum enumMixinStr_TLS1_RT_CRYPTO_SERVER_RANDOM = `enum TLS1_RT_CRYPTO_SERVER_RANDOM = ( TLS1_RT_CRYPTO | 0x3 );`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_RT_CRYPTO_SERVER_RANDOM); }))) {
            mixin(enumMixinStr_TLS1_RT_CRYPTO_SERVER_RANDOM);
        }
    }




    static if(!is(typeof(TLS1_RT_CRYPTO_CLIENT_RANDOM))) {
        private enum enumMixinStr_TLS1_RT_CRYPTO_CLIENT_RANDOM = `enum TLS1_RT_CRYPTO_CLIENT_RANDOM = ( TLS1_RT_CRYPTO | 0x2 );`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_RT_CRYPTO_CLIENT_RANDOM); }))) {
            mixin(enumMixinStr_TLS1_RT_CRYPTO_CLIENT_RANDOM);
        }
    }




    static if(!is(typeof(TLS1_RT_CRYPTO_PREMASTER))) {
        private enum enumMixinStr_TLS1_RT_CRYPTO_PREMASTER = `enum TLS1_RT_CRYPTO_PREMASTER = ( TLS1_RT_CRYPTO | 0x1 );`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_RT_CRYPTO_PREMASTER); }))) {
            mixin(enumMixinStr_TLS1_RT_CRYPTO_PREMASTER);
        }
    }




    static if(!is(typeof(TLS1_RT_CRYPTO))) {
        private enum enumMixinStr_TLS1_RT_CRYPTO = `enum TLS1_RT_CRYPTO = 0x1000;`;
        static if(is(typeof({ mixin(enumMixinStr_TLS1_RT_CRYPTO); }))) {
            mixin(enumMixinStr_TLS1_RT_CRYPTO);
        }
    }






    static if(!is(typeof(DTLS1_RT_HEARTBEAT))) {
        private enum enumMixinStr_DTLS1_RT_HEARTBEAT = `enum DTLS1_RT_HEARTBEAT = 24;`;
        static if(is(typeof({ mixin(enumMixinStr_DTLS1_RT_HEARTBEAT); }))) {
            mixin(enumMixinStr_DTLS1_RT_HEARTBEAT);
        }
    }




    static if(!is(typeof(SSL3_RT_APPLICATION_DATA))) {
        private enum enumMixinStr_SSL3_RT_APPLICATION_DATA = `enum SSL3_RT_APPLICATION_DATA = 23;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL3_RT_APPLICATION_DATA); }))) {
            mixin(enumMixinStr_SSL3_RT_APPLICATION_DATA);
        }
    }




    static if(!is(typeof(SHA_LONG))) {
        private enum enumMixinStr_SHA_LONG = `enum SHA_LONG = unsigned int;`;
        static if(is(typeof({ mixin(enumMixinStr_SHA_LONG); }))) {
            mixin(enumMixinStr_SHA_LONG);
        }
    }




    static if(!is(typeof(SHA_LBLOCK))) {
        private enum enumMixinStr_SHA_LBLOCK = `enum SHA_LBLOCK = 16;`;
        static if(is(typeof({ mixin(enumMixinStr_SHA_LBLOCK); }))) {
            mixin(enumMixinStr_SHA_LBLOCK);
        }
    }




    static if(!is(typeof(SHA_CBLOCK))) {
        private enum enumMixinStr_SHA_CBLOCK = `enum SHA_CBLOCK = ( 16 * 4 );`;
        static if(is(typeof({ mixin(enumMixinStr_SHA_CBLOCK); }))) {
            mixin(enumMixinStr_SHA_CBLOCK);
        }
    }




    static if(!is(typeof(SHA_LAST_BLOCK))) {
        private enum enumMixinStr_SHA_LAST_BLOCK = `enum SHA_LAST_BLOCK = ( ( 16 * 4 ) - 8 );`;
        static if(is(typeof({ mixin(enumMixinStr_SHA_LAST_BLOCK); }))) {
            mixin(enumMixinStr_SHA_LAST_BLOCK);
        }
    }




    static if(!is(typeof(SHA_DIGEST_LENGTH))) {
        private enum enumMixinStr_SHA_DIGEST_LENGTH = `enum SHA_DIGEST_LENGTH = 20;`;
        static if(is(typeof({ mixin(enumMixinStr_SHA_DIGEST_LENGTH); }))) {
            mixin(enumMixinStr_SHA_DIGEST_LENGTH);
        }
    }




    static if(!is(typeof(SSL3_RT_HANDSHAKE))) {
        private enum enumMixinStr_SSL3_RT_HANDSHAKE = `enum SSL3_RT_HANDSHAKE = 22;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL3_RT_HANDSHAKE); }))) {
            mixin(enumMixinStr_SSL3_RT_HANDSHAKE);
        }
    }




    static if(!is(typeof(SSL3_RT_ALERT))) {
        private enum enumMixinStr_SSL3_RT_ALERT = `enum SSL3_RT_ALERT = 21;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL3_RT_ALERT); }))) {
            mixin(enumMixinStr_SSL3_RT_ALERT);
        }
    }




    static if(!is(typeof(SSL3_RT_CHANGE_CIPHER_SPEC))) {
        private enum enumMixinStr_SSL3_RT_CHANGE_CIPHER_SPEC = `enum SSL3_RT_CHANGE_CIPHER_SPEC = 20;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL3_RT_CHANGE_CIPHER_SPEC); }))) {
            mixin(enumMixinStr_SSL3_RT_CHANGE_CIPHER_SPEC);
        }
    }




    static if(!is(typeof(SSL3_VERSION_MINOR))) {
        private enum enumMixinStr_SSL3_VERSION_MINOR = `enum SSL3_VERSION_MINOR = 0x00;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL3_VERSION_MINOR); }))) {
            mixin(enumMixinStr_SSL3_VERSION_MINOR);
        }
    }




    static if(!is(typeof(SSL3_VERSION_MAJOR))) {
        private enum enumMixinStr_SSL3_VERSION_MAJOR = `enum SSL3_VERSION_MAJOR = 0x03;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL3_VERSION_MAJOR); }))) {
            mixin(enumMixinStr_SSL3_VERSION_MAJOR);
        }
    }




    static if(!is(typeof(SSL3_VERSION))) {
        private enum enumMixinStr_SSL3_VERSION = `enum SSL3_VERSION = 0x0300;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL3_VERSION); }))) {
            mixin(enumMixinStr_SSL3_VERSION);
        }
    }




    static if(!is(typeof(SSL3_MD_SERVER_FINISHED_CONST))) {
        private enum enumMixinStr_SSL3_MD_SERVER_FINISHED_CONST = `enum SSL3_MD_SERVER_FINISHED_CONST = "\x53\x52\x56\x52";`;
        static if(is(typeof({ mixin(enumMixinStr_SSL3_MD_SERVER_FINISHED_CONST); }))) {
            mixin(enumMixinStr_SSL3_MD_SERVER_FINISHED_CONST);
        }
    }




    static if(!is(typeof(SSL3_MD_CLIENT_FINISHED_CONST))) {
        private enum enumMixinStr_SSL3_MD_CLIENT_FINISHED_CONST = `enum SSL3_MD_CLIENT_FINISHED_CONST = "\x43\x4C\x4E\x54";`;
        static if(is(typeof({ mixin(enumMixinStr_SSL3_MD_CLIENT_FINISHED_CONST); }))) {
            mixin(enumMixinStr_SSL3_MD_CLIENT_FINISHED_CONST);
        }
    }




    static if(!is(typeof(SSL3_RT_MAX_PACKET_SIZE))) {
        private enum enumMixinStr_SSL3_RT_MAX_PACKET_SIZE = `enum SSL3_RT_MAX_PACKET_SIZE = ( SSL3_RT_MAX_ENCRYPTED_LENGTH + SSL3_RT_HEADER_LENGTH );`;
        static if(is(typeof({ mixin(enumMixinStr_SSL3_RT_MAX_PACKET_SIZE); }))) {
            mixin(enumMixinStr_SSL3_RT_MAX_PACKET_SIZE);
        }
    }




    static if(!is(typeof(SSL3_RT_MAX_ENCRYPTED_LENGTH))) {
        private enum enumMixinStr_SSL3_RT_MAX_ENCRYPTED_LENGTH = `enum SSL3_RT_MAX_ENCRYPTED_LENGTH = ( SSL3_RT_MAX_ENCRYPTED_OVERHEAD + SSL3_RT_MAX_COMPRESSED_LENGTH );`;
        static if(is(typeof({ mixin(enumMixinStr_SSL3_RT_MAX_ENCRYPTED_LENGTH); }))) {
            mixin(enumMixinStr_SSL3_RT_MAX_ENCRYPTED_LENGTH);
        }
    }




    static if(!is(typeof(SSL3_RT_MAX_COMPRESSED_LENGTH))) {
        private enum enumMixinStr_SSL3_RT_MAX_COMPRESSED_LENGTH = `enum SSL3_RT_MAX_COMPRESSED_LENGTH = ( SSL3_RT_MAX_PLAIN_LENGTH + SSL3_RT_MAX_COMPRESSED_OVERHEAD );`;
        static if(is(typeof({ mixin(enumMixinStr_SSL3_RT_MAX_COMPRESSED_LENGTH); }))) {
            mixin(enumMixinStr_SSL3_RT_MAX_COMPRESSED_LENGTH);
        }
    }




    static if(!is(typeof(SHA256_CBLOCK))) {
        private enum enumMixinStr_SHA256_CBLOCK = `enum SHA256_CBLOCK = ( 16 * 4 );`;
        static if(is(typeof({ mixin(enumMixinStr_SHA256_CBLOCK); }))) {
            mixin(enumMixinStr_SHA256_CBLOCK);
        }
    }




    static if(!is(typeof(SSL3_RT_SEND_MAX_ENCRYPTED_OVERHEAD))) {
        private enum enumMixinStr_SSL3_RT_SEND_MAX_ENCRYPTED_OVERHEAD = `enum SSL3_RT_SEND_MAX_ENCRYPTED_OVERHEAD = ( SSL_RT_MAX_CIPHER_BLOCK_SIZE + SSL3_RT_MAX_MD_SIZE );`;
        static if(is(typeof({ mixin(enumMixinStr_SSL3_RT_SEND_MAX_ENCRYPTED_OVERHEAD); }))) {
            mixin(enumMixinStr_SSL3_RT_SEND_MAX_ENCRYPTED_OVERHEAD);
        }
    }




    static if(!is(typeof(SSL3_RT_MAX_ENCRYPTED_OVERHEAD))) {
        private enum enumMixinStr_SSL3_RT_MAX_ENCRYPTED_OVERHEAD = `enum SSL3_RT_MAX_ENCRYPTED_OVERHEAD = ( 256 + SSL3_RT_MAX_MD_SIZE );`;
        static if(is(typeof({ mixin(enumMixinStr_SSL3_RT_MAX_ENCRYPTED_OVERHEAD); }))) {
            mixin(enumMixinStr_SSL3_RT_MAX_ENCRYPTED_OVERHEAD);
        }
    }




    static if(!is(typeof(SSL3_RT_MAX_COMPRESSED_OVERHEAD))) {
        private enum enumMixinStr_SSL3_RT_MAX_COMPRESSED_OVERHEAD = `enum SSL3_RT_MAX_COMPRESSED_OVERHEAD = 1024;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL3_RT_MAX_COMPRESSED_OVERHEAD); }))) {
            mixin(enumMixinStr_SSL3_RT_MAX_COMPRESSED_OVERHEAD);
        }
    }




    static if(!is(typeof(SSL3_RT_MAX_PLAIN_LENGTH))) {
        private enum enumMixinStr_SSL3_RT_MAX_PLAIN_LENGTH = `enum SSL3_RT_MAX_PLAIN_LENGTH = 16384;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL3_RT_MAX_PLAIN_LENGTH); }))) {
            mixin(enumMixinStr_SSL3_RT_MAX_PLAIN_LENGTH);
        }
    }




    static if(!is(typeof(SSL3_RT_MAX_EXTRA))) {
        private enum enumMixinStr_SSL3_RT_MAX_EXTRA = `enum SSL3_RT_MAX_EXTRA = ( 16384 );`;
        static if(is(typeof({ mixin(enumMixinStr_SSL3_RT_MAX_EXTRA); }))) {
            mixin(enumMixinStr_SSL3_RT_MAX_EXTRA);
        }
    }




    static if(!is(typeof(SSL_RT_MAX_CIPHER_BLOCK_SIZE))) {
        private enum enumMixinStr_SSL_RT_MAX_CIPHER_BLOCK_SIZE = `enum SSL_RT_MAX_CIPHER_BLOCK_SIZE = 16;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_RT_MAX_CIPHER_BLOCK_SIZE); }))) {
            mixin(enumMixinStr_SSL_RT_MAX_CIPHER_BLOCK_SIZE);
        }
    }




    static if(!is(typeof(SSL3_RT_MAX_MD_SIZE))) {
        private enum enumMixinStr_SSL3_RT_MAX_MD_SIZE = `enum SSL3_RT_MAX_MD_SIZE = 64;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL3_RT_MAX_MD_SIZE); }))) {
            mixin(enumMixinStr_SSL3_RT_MAX_MD_SIZE);
        }
    }




    static if(!is(typeof(SSL3_ALIGN_PAYLOAD))) {
        private enum enumMixinStr_SSL3_ALIGN_PAYLOAD = `enum SSL3_ALIGN_PAYLOAD = 8;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL3_ALIGN_PAYLOAD); }))) {
            mixin(enumMixinStr_SSL3_ALIGN_PAYLOAD);
        }
    }




    static if(!is(typeof(SSL3_HM_HEADER_LENGTH))) {
        private enum enumMixinStr_SSL3_HM_HEADER_LENGTH = `enum SSL3_HM_HEADER_LENGTH = 4;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL3_HM_HEADER_LENGTH); }))) {
            mixin(enumMixinStr_SSL3_HM_HEADER_LENGTH);
        }
    }




    static if(!is(typeof(SSL3_RT_HEADER_LENGTH))) {
        private enum enumMixinStr_SSL3_RT_HEADER_LENGTH = `enum SSL3_RT_HEADER_LENGTH = 5;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL3_RT_HEADER_LENGTH); }))) {
            mixin(enumMixinStr_SSL3_RT_HEADER_LENGTH);
        }
    }




    static if(!is(typeof(SSL3_SESSION_ID_SIZE))) {
        private enum enumMixinStr_SSL3_SESSION_ID_SIZE = `enum SSL3_SESSION_ID_SIZE = 32;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL3_SESSION_ID_SIZE); }))) {
            mixin(enumMixinStr_SSL3_SESSION_ID_SIZE);
        }
    }




    static if(!is(typeof(SSL3_RANDOM_SIZE))) {
        private enum enumMixinStr_SSL3_RANDOM_SIZE = `enum SSL3_RANDOM_SIZE = 32;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL3_RANDOM_SIZE); }))) {
            mixin(enumMixinStr_SSL3_RANDOM_SIZE);
        }
    }




    static if(!is(typeof(SSL3_MASTER_SECRET_SIZE))) {
        private enum enumMixinStr_SSL3_MASTER_SECRET_SIZE = `enum SSL3_MASTER_SECRET_SIZE = 48;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL3_MASTER_SECRET_SIZE); }))) {
            mixin(enumMixinStr_SSL3_MASTER_SECRET_SIZE);
        }
    }




    static if(!is(typeof(SSL3_MAX_SSL_SESSION_ID_LENGTH))) {
        private enum enumMixinStr_SSL3_MAX_SSL_SESSION_ID_LENGTH = `enum SSL3_MAX_SSL_SESSION_ID_LENGTH = 32;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL3_MAX_SSL_SESSION_ID_LENGTH); }))) {
            mixin(enumMixinStr_SSL3_MAX_SSL_SESSION_ID_LENGTH);
        }
    }




    static if(!is(typeof(SSL3_SSL_SESSION_ID_LENGTH))) {
        private enum enumMixinStr_SSL3_SSL_SESSION_ID_LENGTH = `enum SSL3_SSL_SESSION_ID_LENGTH = 32;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL3_SSL_SESSION_ID_LENGTH); }))) {
            mixin(enumMixinStr_SSL3_SSL_SESSION_ID_LENGTH);
        }
    }




    static if(!is(typeof(SHA224_DIGEST_LENGTH))) {
        private enum enumMixinStr_SHA224_DIGEST_LENGTH = `enum SHA224_DIGEST_LENGTH = 28;`;
        static if(is(typeof({ mixin(enumMixinStr_SHA224_DIGEST_LENGTH); }))) {
            mixin(enumMixinStr_SHA224_DIGEST_LENGTH);
        }
    }




    static if(!is(typeof(SHA256_DIGEST_LENGTH))) {
        private enum enumMixinStr_SHA256_DIGEST_LENGTH = `enum SHA256_DIGEST_LENGTH = 32;`;
        static if(is(typeof({ mixin(enumMixinStr_SHA256_DIGEST_LENGTH); }))) {
            mixin(enumMixinStr_SHA256_DIGEST_LENGTH);
        }
    }




    static if(!is(typeof(SHA384_DIGEST_LENGTH))) {
        private enum enumMixinStr_SHA384_DIGEST_LENGTH = `enum SHA384_DIGEST_LENGTH = 48;`;
        static if(is(typeof({ mixin(enumMixinStr_SHA384_DIGEST_LENGTH); }))) {
            mixin(enumMixinStr_SHA384_DIGEST_LENGTH);
        }
    }




    static if(!is(typeof(SHA512_DIGEST_LENGTH))) {
        private enum enumMixinStr_SHA512_DIGEST_LENGTH = `enum SHA512_DIGEST_LENGTH = 64;`;
        static if(is(typeof({ mixin(enumMixinStr_SHA512_DIGEST_LENGTH); }))) {
            mixin(enumMixinStr_SHA512_DIGEST_LENGTH);
        }
    }




    static if(!is(typeof(SHA512_CBLOCK))) {
        private enum enumMixinStr_SHA512_CBLOCK = `enum SHA512_CBLOCK = ( 16 * 8 );`;
        static if(is(typeof({ mixin(enumMixinStr_SHA512_CBLOCK); }))) {
            mixin(enumMixinStr_SHA512_CBLOCK);
        }
    }




    static if(!is(typeof(SHA_LONG64))) {
        private enum enumMixinStr_SHA_LONG64 = `enum SHA_LONG64 = unsigned long long;`;
        static if(is(typeof({ mixin(enumMixinStr_SHA_LONG64); }))) {
            mixin(enumMixinStr_SHA_LONG64);
        }
    }






    static if(!is(typeof(SSL3_TXT_ADH_DES_192_CBC_SHA))) {
        private enum enumMixinStr_SSL3_TXT_ADH_DES_192_CBC_SHA = `enum SSL3_TXT_ADH_DES_192_CBC_SHA = "ADH-DES-CBC3-SHA";`;
        static if(is(typeof({ mixin(enumMixinStr_SSL3_TXT_ADH_DES_192_CBC_SHA); }))) {
            mixin(enumMixinStr_SSL3_TXT_ADH_DES_192_CBC_SHA);
        }
    }




    static if(!is(typeof(SSL3_TXT_ADH_DES_64_CBC_SHA))) {
        private enum enumMixinStr_SSL3_TXT_ADH_DES_64_CBC_SHA = `enum SSL3_TXT_ADH_DES_64_CBC_SHA = "ADH-DES-CBC-SHA";`;
        static if(is(typeof({ mixin(enumMixinStr_SSL3_TXT_ADH_DES_64_CBC_SHA); }))) {
            mixin(enumMixinStr_SSL3_TXT_ADH_DES_64_CBC_SHA);
        }
    }




    static if(!is(typeof(SSL3_TXT_ADH_DES_40_CBC_SHA))) {
        private enum enumMixinStr_SSL3_TXT_ADH_DES_40_CBC_SHA = `enum SSL3_TXT_ADH_DES_40_CBC_SHA = "EXP-ADH-DES-CBC-SHA";`;
        static if(is(typeof({ mixin(enumMixinStr_SSL3_TXT_ADH_DES_40_CBC_SHA); }))) {
            mixin(enumMixinStr_SSL3_TXT_ADH_DES_40_CBC_SHA);
        }
    }




    static if(!is(typeof(SSL3_TXT_ADH_RC4_128_MD5))) {
        private enum enumMixinStr_SSL3_TXT_ADH_RC4_128_MD5 = `enum SSL3_TXT_ADH_RC4_128_MD5 = "ADH-RC4-MD5";`;
        static if(is(typeof({ mixin(enumMixinStr_SSL3_TXT_ADH_RC4_128_MD5); }))) {
            mixin(enumMixinStr_SSL3_TXT_ADH_RC4_128_MD5);
        }
    }




    static if(!is(typeof(SSL3_TXT_ADH_RC4_40_MD5))) {
        private enum enumMixinStr_SSL3_TXT_ADH_RC4_40_MD5 = `enum SSL3_TXT_ADH_RC4_40_MD5 = "EXP-ADH-RC4-MD5";`;
        static if(is(typeof({ mixin(enumMixinStr_SSL3_TXT_ADH_RC4_40_MD5); }))) {
            mixin(enumMixinStr_SSL3_TXT_ADH_RC4_40_MD5);
        }
    }




    static if(!is(typeof(SSL3_TXT_EDH_RSA_DES_192_CBC3_SHA))) {
        private enum enumMixinStr_SSL3_TXT_EDH_RSA_DES_192_CBC3_SHA = `enum SSL3_TXT_EDH_RSA_DES_192_CBC3_SHA = "EDH-RSA-DES-CBC3-SHA";`;
        static if(is(typeof({ mixin(enumMixinStr_SSL3_TXT_EDH_RSA_DES_192_CBC3_SHA); }))) {
            mixin(enumMixinStr_SSL3_TXT_EDH_RSA_DES_192_CBC3_SHA);
        }
    }




    static if(!is(typeof(SSL3_TXT_EDH_RSA_DES_64_CBC_SHA))) {
        private enum enumMixinStr_SSL3_TXT_EDH_RSA_DES_64_CBC_SHA = `enum SSL3_TXT_EDH_RSA_DES_64_CBC_SHA = "EDH-RSA-DES-CBC-SHA";`;
        static if(is(typeof({ mixin(enumMixinStr_SSL3_TXT_EDH_RSA_DES_64_CBC_SHA); }))) {
            mixin(enumMixinStr_SSL3_TXT_EDH_RSA_DES_64_CBC_SHA);
        }
    }




    static if(!is(typeof(SSL3_TXT_EDH_RSA_DES_40_CBC_SHA))) {
        private enum enumMixinStr_SSL3_TXT_EDH_RSA_DES_40_CBC_SHA = `enum SSL3_TXT_EDH_RSA_DES_40_CBC_SHA = "EXP-EDH-RSA-DES-CBC-SHA";`;
        static if(is(typeof({ mixin(enumMixinStr_SSL3_TXT_EDH_RSA_DES_40_CBC_SHA); }))) {
            mixin(enumMixinStr_SSL3_TXT_EDH_RSA_DES_40_CBC_SHA);
        }
    }




    static if(!is(typeof(SSL3_TXT_EDH_DSS_DES_192_CBC3_SHA))) {
        private enum enumMixinStr_SSL3_TXT_EDH_DSS_DES_192_CBC3_SHA = `enum SSL3_TXT_EDH_DSS_DES_192_CBC3_SHA = "EDH-DSS-DES-CBC3-SHA";`;
        static if(is(typeof({ mixin(enumMixinStr_SSL3_TXT_EDH_DSS_DES_192_CBC3_SHA); }))) {
            mixin(enumMixinStr_SSL3_TXT_EDH_DSS_DES_192_CBC3_SHA);
        }
    }




    static if(!is(typeof(SSL3_TXT_EDH_DSS_DES_64_CBC_SHA))) {
        private enum enumMixinStr_SSL3_TXT_EDH_DSS_DES_64_CBC_SHA = `enum SSL3_TXT_EDH_DSS_DES_64_CBC_SHA = "EDH-DSS-DES-CBC-SHA";`;
        static if(is(typeof({ mixin(enumMixinStr_SSL3_TXT_EDH_DSS_DES_64_CBC_SHA); }))) {
            mixin(enumMixinStr_SSL3_TXT_EDH_DSS_DES_64_CBC_SHA);
        }
    }




    static if(!is(typeof(SSL3_TXT_EDH_DSS_DES_40_CBC_SHA))) {
        private enum enumMixinStr_SSL3_TXT_EDH_DSS_DES_40_CBC_SHA = `enum SSL3_TXT_EDH_DSS_DES_40_CBC_SHA = "EXP-EDH-DSS-DES-CBC-SHA";`;
        static if(is(typeof({ mixin(enumMixinStr_SSL3_TXT_EDH_DSS_DES_40_CBC_SHA); }))) {
            mixin(enumMixinStr_SSL3_TXT_EDH_DSS_DES_40_CBC_SHA);
        }
    }




    static if(!is(typeof(SSL3_TXT_DHE_RSA_DES_192_CBC3_SHA))) {
        private enum enumMixinStr_SSL3_TXT_DHE_RSA_DES_192_CBC3_SHA = `enum SSL3_TXT_DHE_RSA_DES_192_CBC3_SHA = "DHE-RSA-DES-CBC3-SHA";`;
        static if(is(typeof({ mixin(enumMixinStr_SSL3_TXT_DHE_RSA_DES_192_CBC3_SHA); }))) {
            mixin(enumMixinStr_SSL3_TXT_DHE_RSA_DES_192_CBC3_SHA);
        }
    }




    static if(!is(typeof(SSL3_TXT_DHE_RSA_DES_64_CBC_SHA))) {
        private enum enumMixinStr_SSL3_TXT_DHE_RSA_DES_64_CBC_SHA = `enum SSL3_TXT_DHE_RSA_DES_64_CBC_SHA = "DHE-RSA-DES-CBC-SHA";`;
        static if(is(typeof({ mixin(enumMixinStr_SSL3_TXT_DHE_RSA_DES_64_CBC_SHA); }))) {
            mixin(enumMixinStr_SSL3_TXT_DHE_RSA_DES_64_CBC_SHA);
        }
    }




    static if(!is(typeof(SSL3_TXT_DHE_RSA_DES_40_CBC_SHA))) {
        private enum enumMixinStr_SSL3_TXT_DHE_RSA_DES_40_CBC_SHA = `enum SSL3_TXT_DHE_RSA_DES_40_CBC_SHA = "EXP-DHE-RSA-DES-CBC-SHA";`;
        static if(is(typeof({ mixin(enumMixinStr_SSL3_TXT_DHE_RSA_DES_40_CBC_SHA); }))) {
            mixin(enumMixinStr_SSL3_TXT_DHE_RSA_DES_40_CBC_SHA);
        }
    }




    static if(!is(typeof(SSL3_TXT_DHE_DSS_DES_192_CBC3_SHA))) {
        private enum enumMixinStr_SSL3_TXT_DHE_DSS_DES_192_CBC3_SHA = `enum SSL3_TXT_DHE_DSS_DES_192_CBC3_SHA = "DHE-DSS-DES-CBC3-SHA";`;
        static if(is(typeof({ mixin(enumMixinStr_SSL3_TXT_DHE_DSS_DES_192_CBC3_SHA); }))) {
            mixin(enumMixinStr_SSL3_TXT_DHE_DSS_DES_192_CBC3_SHA);
        }
    }




    static if(!is(typeof(SSL3_TXT_DHE_DSS_DES_64_CBC_SHA))) {
        private enum enumMixinStr_SSL3_TXT_DHE_DSS_DES_64_CBC_SHA = `enum SSL3_TXT_DHE_DSS_DES_64_CBC_SHA = "DHE-DSS-DES-CBC-SHA";`;
        static if(is(typeof({ mixin(enumMixinStr_SSL3_TXT_DHE_DSS_DES_64_CBC_SHA); }))) {
            mixin(enumMixinStr_SSL3_TXT_DHE_DSS_DES_64_CBC_SHA);
        }
    }






    static if(!is(typeof(SSL3_TXT_DHE_DSS_DES_40_CBC_SHA))) {
        private enum enumMixinStr_SSL3_TXT_DHE_DSS_DES_40_CBC_SHA = `enum SSL3_TXT_DHE_DSS_DES_40_CBC_SHA = "EXP-DHE-DSS-DES-CBC-SHA";`;
        static if(is(typeof({ mixin(enumMixinStr_SSL3_TXT_DHE_DSS_DES_40_CBC_SHA); }))) {
            mixin(enumMixinStr_SSL3_TXT_DHE_DSS_DES_40_CBC_SHA);
        }
    }




    static if(!is(typeof(SRTP_AES128_CM_SHA1_80))) {
        private enum enumMixinStr_SRTP_AES128_CM_SHA1_80 = `enum SRTP_AES128_CM_SHA1_80 = 0x0001;`;
        static if(is(typeof({ mixin(enumMixinStr_SRTP_AES128_CM_SHA1_80); }))) {
            mixin(enumMixinStr_SRTP_AES128_CM_SHA1_80);
        }
    }




    static if(!is(typeof(SRTP_AES128_CM_SHA1_32))) {
        private enum enumMixinStr_SRTP_AES128_CM_SHA1_32 = `enum SRTP_AES128_CM_SHA1_32 = 0x0002;`;
        static if(is(typeof({ mixin(enumMixinStr_SRTP_AES128_CM_SHA1_32); }))) {
            mixin(enumMixinStr_SRTP_AES128_CM_SHA1_32);
        }
    }




    static if(!is(typeof(SRTP_AES128_F8_SHA1_80))) {
        private enum enumMixinStr_SRTP_AES128_F8_SHA1_80 = `enum SRTP_AES128_F8_SHA1_80 = 0x0003;`;
        static if(is(typeof({ mixin(enumMixinStr_SRTP_AES128_F8_SHA1_80); }))) {
            mixin(enumMixinStr_SRTP_AES128_F8_SHA1_80);
        }
    }




    static if(!is(typeof(SRTP_AES128_F8_SHA1_32))) {
        private enum enumMixinStr_SRTP_AES128_F8_SHA1_32 = `enum SRTP_AES128_F8_SHA1_32 = 0x0004;`;
        static if(is(typeof({ mixin(enumMixinStr_SRTP_AES128_F8_SHA1_32); }))) {
            mixin(enumMixinStr_SRTP_AES128_F8_SHA1_32);
        }
    }




    static if(!is(typeof(SRTP_NULL_SHA1_80))) {
        private enum enumMixinStr_SRTP_NULL_SHA1_80 = `enum SRTP_NULL_SHA1_80 = 0x0005;`;
        static if(is(typeof({ mixin(enumMixinStr_SRTP_NULL_SHA1_80); }))) {
            mixin(enumMixinStr_SRTP_NULL_SHA1_80);
        }
    }




    static if(!is(typeof(SRTP_NULL_SHA1_32))) {
        private enum enumMixinStr_SRTP_NULL_SHA1_32 = `enum SRTP_NULL_SHA1_32 = 0x0006;`;
        static if(is(typeof({ mixin(enumMixinStr_SRTP_NULL_SHA1_32); }))) {
            mixin(enumMixinStr_SRTP_NULL_SHA1_32);
        }
    }




    static if(!is(typeof(SRTP_AEAD_AES_128_GCM))) {
        private enum enumMixinStr_SRTP_AEAD_AES_128_GCM = `enum SRTP_AEAD_AES_128_GCM = 0x0007;`;
        static if(is(typeof({ mixin(enumMixinStr_SRTP_AEAD_AES_128_GCM); }))) {
            mixin(enumMixinStr_SRTP_AEAD_AES_128_GCM);
        }
    }




    static if(!is(typeof(SRTP_AEAD_AES_256_GCM))) {
        private enum enumMixinStr_SRTP_AEAD_AES_256_GCM = `enum SRTP_AEAD_AES_256_GCM = 0x0008;`;
        static if(is(typeof({ mixin(enumMixinStr_SRTP_AEAD_AES_256_GCM); }))) {
            mixin(enumMixinStr_SRTP_AEAD_AES_256_GCM);
        }
    }




    static if(!is(typeof(SSL3_TXT_DH_RSA_DES_192_CBC3_SHA))) {
        private enum enumMixinStr_SSL3_TXT_DH_RSA_DES_192_CBC3_SHA = `enum SSL3_TXT_DH_RSA_DES_192_CBC3_SHA = "DH-RSA-DES-CBC3-SHA";`;
        static if(is(typeof({ mixin(enumMixinStr_SSL3_TXT_DH_RSA_DES_192_CBC3_SHA); }))) {
            mixin(enumMixinStr_SSL3_TXT_DH_RSA_DES_192_CBC3_SHA);
        }
    }




    static if(!is(typeof(SSL3_TXT_DH_RSA_DES_64_CBC_SHA))) {
        private enum enumMixinStr_SSL3_TXT_DH_RSA_DES_64_CBC_SHA = `enum SSL3_TXT_DH_RSA_DES_64_CBC_SHA = "DH-RSA-DES-CBC-SHA";`;
        static if(is(typeof({ mixin(enumMixinStr_SSL3_TXT_DH_RSA_DES_64_CBC_SHA); }))) {
            mixin(enumMixinStr_SSL3_TXT_DH_RSA_DES_64_CBC_SHA);
        }
    }




    static if(!is(typeof(SSL3_TXT_DH_RSA_DES_40_CBC_SHA))) {
        private enum enumMixinStr_SSL3_TXT_DH_RSA_DES_40_CBC_SHA = `enum SSL3_TXT_DH_RSA_DES_40_CBC_SHA = "EXP-DH-RSA-DES-CBC-SHA";`;
        static if(is(typeof({ mixin(enumMixinStr_SSL3_TXT_DH_RSA_DES_40_CBC_SHA); }))) {
            mixin(enumMixinStr_SSL3_TXT_DH_RSA_DES_40_CBC_SHA);
        }
    }




    static if(!is(typeof(SSL3_TXT_DH_DSS_DES_192_CBC3_SHA))) {
        private enum enumMixinStr_SSL3_TXT_DH_DSS_DES_192_CBC3_SHA = `enum SSL3_TXT_DH_DSS_DES_192_CBC3_SHA = "DH-DSS-DES-CBC3-SHA";`;
        static if(is(typeof({ mixin(enumMixinStr_SSL3_TXT_DH_DSS_DES_192_CBC3_SHA); }))) {
            mixin(enumMixinStr_SSL3_TXT_DH_DSS_DES_192_CBC3_SHA);
        }
    }




    static if(!is(typeof(SSL3_TXT_DH_DSS_DES_64_CBC_SHA))) {
        private enum enumMixinStr_SSL3_TXT_DH_DSS_DES_64_CBC_SHA = `enum SSL3_TXT_DH_DSS_DES_64_CBC_SHA = "DH-DSS-DES-CBC-SHA";`;
        static if(is(typeof({ mixin(enumMixinStr_SSL3_TXT_DH_DSS_DES_64_CBC_SHA); }))) {
            mixin(enumMixinStr_SSL3_TXT_DH_DSS_DES_64_CBC_SHA);
        }
    }




    static if(!is(typeof(SSL3_TXT_DH_DSS_DES_40_CBC_SHA))) {
        private enum enumMixinStr_SSL3_TXT_DH_DSS_DES_40_CBC_SHA = `enum SSL3_TXT_DH_DSS_DES_40_CBC_SHA = "EXP-DH-DSS-DES-CBC-SHA";`;
        static if(is(typeof({ mixin(enumMixinStr_SSL3_TXT_DH_DSS_DES_40_CBC_SHA); }))) {
            mixin(enumMixinStr_SSL3_TXT_DH_DSS_DES_40_CBC_SHA);
        }
    }




    static if(!is(typeof(SSL3_TXT_RSA_DES_192_CBC3_SHA))) {
        private enum enumMixinStr_SSL3_TXT_RSA_DES_192_CBC3_SHA = `enum SSL3_TXT_RSA_DES_192_CBC3_SHA = "DES-CBC3-SHA";`;
        static if(is(typeof({ mixin(enumMixinStr_SSL3_TXT_RSA_DES_192_CBC3_SHA); }))) {
            mixin(enumMixinStr_SSL3_TXT_RSA_DES_192_CBC3_SHA);
        }
    }




    static if(!is(typeof(SSL3_TXT_RSA_DES_64_CBC_SHA))) {
        private enum enumMixinStr_SSL3_TXT_RSA_DES_64_CBC_SHA = `enum SSL3_TXT_RSA_DES_64_CBC_SHA = "DES-CBC-SHA";`;
        static if(is(typeof({ mixin(enumMixinStr_SSL3_TXT_RSA_DES_64_CBC_SHA); }))) {
            mixin(enumMixinStr_SSL3_TXT_RSA_DES_64_CBC_SHA);
        }
    }




    static if(!is(typeof(SSL3_TXT_RSA_DES_40_CBC_SHA))) {
        private enum enumMixinStr_SSL3_TXT_RSA_DES_40_CBC_SHA = `enum SSL3_TXT_RSA_DES_40_CBC_SHA = "EXP-DES-CBC-SHA";`;
        static if(is(typeof({ mixin(enumMixinStr_SSL3_TXT_RSA_DES_40_CBC_SHA); }))) {
            mixin(enumMixinStr_SSL3_TXT_RSA_DES_40_CBC_SHA);
        }
    }




    static if(!is(typeof(SSL3_TXT_RSA_IDEA_128_SHA))) {
        private enum enumMixinStr_SSL3_TXT_RSA_IDEA_128_SHA = `enum SSL3_TXT_RSA_IDEA_128_SHA = "IDEA-CBC-SHA";`;
        static if(is(typeof({ mixin(enumMixinStr_SSL3_TXT_RSA_IDEA_128_SHA); }))) {
            mixin(enumMixinStr_SSL3_TXT_RSA_IDEA_128_SHA);
        }
    }






    static if(!is(typeof(SSL3_TXT_RSA_RC2_40_MD5))) {
        private enum enumMixinStr_SSL3_TXT_RSA_RC2_40_MD5 = `enum SSL3_TXT_RSA_RC2_40_MD5 = "EXP-RC2-CBC-MD5";`;
        static if(is(typeof({ mixin(enumMixinStr_SSL3_TXT_RSA_RC2_40_MD5); }))) {
            mixin(enumMixinStr_SSL3_TXT_RSA_RC2_40_MD5);
        }
    }




    static if(!is(typeof(SSL3_TXT_RSA_RC4_128_SHA))) {
        private enum enumMixinStr_SSL3_TXT_RSA_RC4_128_SHA = `enum SSL3_TXT_RSA_RC4_128_SHA = "RC4-SHA";`;
        static if(is(typeof({ mixin(enumMixinStr_SSL3_TXT_RSA_RC4_128_SHA); }))) {
            mixin(enumMixinStr_SSL3_TXT_RSA_RC4_128_SHA);
        }
    }




    static if(!is(typeof(SSL3_TXT_RSA_RC4_128_MD5))) {
        private enum enumMixinStr_SSL3_TXT_RSA_RC4_128_MD5 = `enum SSL3_TXT_RSA_RC4_128_MD5 = "RC4-MD5";`;
        static if(is(typeof({ mixin(enumMixinStr_SSL3_TXT_RSA_RC4_128_MD5); }))) {
            mixin(enumMixinStr_SSL3_TXT_RSA_RC4_128_MD5);
        }
    }




    static if(!is(typeof(SSL3_TXT_RSA_RC4_40_MD5))) {
        private enum enumMixinStr_SSL3_TXT_RSA_RC4_40_MD5 = `enum SSL3_TXT_RSA_RC4_40_MD5 = "EXP-RC4-MD5";`;
        static if(is(typeof({ mixin(enumMixinStr_SSL3_TXT_RSA_RC4_40_MD5); }))) {
            mixin(enumMixinStr_SSL3_TXT_RSA_RC4_40_MD5);
        }
    }




    static if(!is(typeof(SSL3_TXT_RSA_NULL_SHA))) {
        private enum enumMixinStr_SSL3_TXT_RSA_NULL_SHA = `enum SSL3_TXT_RSA_NULL_SHA = "NULL-SHA";`;
        static if(is(typeof({ mixin(enumMixinStr_SSL3_TXT_RSA_NULL_SHA); }))) {
            mixin(enumMixinStr_SSL3_TXT_RSA_NULL_SHA);
        }
    }




    static if(!is(typeof(SSL3_TXT_RSA_NULL_MD5))) {
        private enum enumMixinStr_SSL3_TXT_RSA_NULL_MD5 = `enum SSL3_TXT_RSA_NULL_MD5 = "NULL-MD5";`;
        static if(is(typeof({ mixin(enumMixinStr_SSL3_TXT_RSA_NULL_MD5); }))) {
            mixin(enumMixinStr_SSL3_TXT_RSA_NULL_MD5);
        }
    }




    static if(!is(typeof(SSL3_CK_ADH_DES_192_CBC_SHA))) {
        private enum enumMixinStr_SSL3_CK_ADH_DES_192_CBC_SHA = `enum SSL3_CK_ADH_DES_192_CBC_SHA = 0x0300001B;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL3_CK_ADH_DES_192_CBC_SHA); }))) {
            mixin(enumMixinStr_SSL3_CK_ADH_DES_192_CBC_SHA);
        }
    }




    static if(!is(typeof(SSL3_CK_ADH_DES_64_CBC_SHA))) {
        private enum enumMixinStr_SSL3_CK_ADH_DES_64_CBC_SHA = `enum SSL3_CK_ADH_DES_64_CBC_SHA = 0x0300001A;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL3_CK_ADH_DES_64_CBC_SHA); }))) {
            mixin(enumMixinStr_SSL3_CK_ADH_DES_64_CBC_SHA);
        }
    }




    static if(!is(typeof(SSL3_CK_ADH_DES_40_CBC_SHA))) {
        private enum enumMixinStr_SSL3_CK_ADH_DES_40_CBC_SHA = `enum SSL3_CK_ADH_DES_40_CBC_SHA = 0x03000019;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL3_CK_ADH_DES_40_CBC_SHA); }))) {
            mixin(enumMixinStr_SSL3_CK_ADH_DES_40_CBC_SHA);
        }
    }




    static if(!is(typeof(SSL3_CK_ADH_RC4_128_MD5))) {
        private enum enumMixinStr_SSL3_CK_ADH_RC4_128_MD5 = `enum SSL3_CK_ADH_RC4_128_MD5 = 0x03000018;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL3_CK_ADH_RC4_128_MD5); }))) {
            mixin(enumMixinStr_SSL3_CK_ADH_RC4_128_MD5);
        }
    }




    static if(!is(typeof(SSL3_CK_ADH_RC4_40_MD5))) {
        private enum enumMixinStr_SSL3_CK_ADH_RC4_40_MD5 = `enum SSL3_CK_ADH_RC4_40_MD5 = 0x03000017;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL3_CK_ADH_RC4_40_MD5); }))) {
            mixin(enumMixinStr_SSL3_CK_ADH_RC4_40_MD5);
        }
    }




    static if(!is(typeof(SSL3_CK_EDH_RSA_DES_192_CBC3_SHA))) {
        private enum enumMixinStr_SSL3_CK_EDH_RSA_DES_192_CBC3_SHA = `enum SSL3_CK_EDH_RSA_DES_192_CBC3_SHA = SSL3_CK_DHE_RSA_DES_192_CBC3_SHA;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL3_CK_EDH_RSA_DES_192_CBC3_SHA); }))) {
            mixin(enumMixinStr_SSL3_CK_EDH_RSA_DES_192_CBC3_SHA);
        }
    }




    static if(!is(typeof(SSL3_CK_DHE_RSA_DES_192_CBC3_SHA))) {
        private enum enumMixinStr_SSL3_CK_DHE_RSA_DES_192_CBC3_SHA = `enum SSL3_CK_DHE_RSA_DES_192_CBC3_SHA = 0x03000016;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL3_CK_DHE_RSA_DES_192_CBC3_SHA); }))) {
            mixin(enumMixinStr_SSL3_CK_DHE_RSA_DES_192_CBC3_SHA);
        }
    }




    static if(!is(typeof(SSL3_CK_EDH_RSA_DES_64_CBC_SHA))) {
        private enum enumMixinStr_SSL3_CK_EDH_RSA_DES_64_CBC_SHA = `enum SSL3_CK_EDH_RSA_DES_64_CBC_SHA = SSL3_CK_DHE_RSA_DES_64_CBC_SHA;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL3_CK_EDH_RSA_DES_64_CBC_SHA); }))) {
            mixin(enumMixinStr_SSL3_CK_EDH_RSA_DES_64_CBC_SHA);
        }
    }




    static if(!is(typeof(SSL3_CK_DHE_RSA_DES_64_CBC_SHA))) {
        private enum enumMixinStr_SSL3_CK_DHE_RSA_DES_64_CBC_SHA = `enum SSL3_CK_DHE_RSA_DES_64_CBC_SHA = 0x03000015;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL3_CK_DHE_RSA_DES_64_CBC_SHA); }))) {
            mixin(enumMixinStr_SSL3_CK_DHE_RSA_DES_64_CBC_SHA);
        }
    }




    static if(!is(typeof(SSL3_CK_EDH_RSA_DES_40_CBC_SHA))) {
        private enum enumMixinStr_SSL3_CK_EDH_RSA_DES_40_CBC_SHA = `enum SSL3_CK_EDH_RSA_DES_40_CBC_SHA = SSL3_CK_DHE_RSA_DES_40_CBC_SHA;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL3_CK_EDH_RSA_DES_40_CBC_SHA); }))) {
            mixin(enumMixinStr_SSL3_CK_EDH_RSA_DES_40_CBC_SHA);
        }
    }




    static if(!is(typeof(SSL_SESSION_ASN1_VERSION))) {
        private enum enumMixinStr_SSL_SESSION_ASN1_VERSION = `enum SSL_SESSION_ASN1_VERSION = 0x0001;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_SESSION_ASN1_VERSION); }))) {
            mixin(enumMixinStr_SSL_SESSION_ASN1_VERSION);
        }
    }




    static if(!is(typeof(SSL_MAX_SSL_SESSION_ID_LENGTH))) {
        private enum enumMixinStr_SSL_MAX_SSL_SESSION_ID_LENGTH = `enum SSL_MAX_SSL_SESSION_ID_LENGTH = 32;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_MAX_SSL_SESSION_ID_LENGTH); }))) {
            mixin(enumMixinStr_SSL_MAX_SSL_SESSION_ID_LENGTH);
        }
    }




    static if(!is(typeof(SSL_MAX_SID_CTX_LENGTH))) {
        private enum enumMixinStr_SSL_MAX_SID_CTX_LENGTH = `enum SSL_MAX_SID_CTX_LENGTH = 32;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_MAX_SID_CTX_LENGTH); }))) {
            mixin(enumMixinStr_SSL_MAX_SID_CTX_LENGTH);
        }
    }




    static if(!is(typeof(SSL_MIN_RSA_MODULUS_LENGTH_IN_BYTES))) {
        private enum enumMixinStr_SSL_MIN_RSA_MODULUS_LENGTH_IN_BYTES = `enum SSL_MIN_RSA_MODULUS_LENGTH_IN_BYTES = ( 512 / 8 );`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_MIN_RSA_MODULUS_LENGTH_IN_BYTES); }))) {
            mixin(enumMixinStr_SSL_MIN_RSA_MODULUS_LENGTH_IN_BYTES);
        }
    }




    static if(!is(typeof(SSL_MAX_KEY_ARG_LENGTH))) {
        private enum enumMixinStr_SSL_MAX_KEY_ARG_LENGTH = `enum SSL_MAX_KEY_ARG_LENGTH = 8;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_MAX_KEY_ARG_LENGTH); }))) {
            mixin(enumMixinStr_SSL_MAX_KEY_ARG_LENGTH);
        }
    }




    static if(!is(typeof(SSL_MAX_MASTER_KEY_LENGTH))) {
        private enum enumMixinStr_SSL_MAX_MASTER_KEY_LENGTH = `enum SSL_MAX_MASTER_KEY_LENGTH = 48;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_MAX_MASTER_KEY_LENGTH); }))) {
            mixin(enumMixinStr_SSL_MAX_MASTER_KEY_LENGTH);
        }
    }




    static if(!is(typeof(SSL_MAX_PIPELINES))) {
        private enum enumMixinStr_SSL_MAX_PIPELINES = `enum SSL_MAX_PIPELINES = 32;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_MAX_PIPELINES); }))) {
            mixin(enumMixinStr_SSL_MAX_PIPELINES);
        }
    }




    static if(!is(typeof(SSL_TXT_LOW))) {
        private enum enumMixinStr_SSL_TXT_LOW = `enum SSL_TXT_LOW = "LOW";`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_TXT_LOW); }))) {
            mixin(enumMixinStr_SSL_TXT_LOW);
        }
    }




    static if(!is(typeof(SSL_TXT_MEDIUM))) {
        private enum enumMixinStr_SSL_TXT_MEDIUM = `enum SSL_TXT_MEDIUM = "MEDIUM";`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_TXT_MEDIUM); }))) {
            mixin(enumMixinStr_SSL_TXT_MEDIUM);
        }
    }




    static if(!is(typeof(SSL_TXT_HIGH))) {
        private enum enumMixinStr_SSL_TXT_HIGH = `enum SSL_TXT_HIGH = "HIGH";`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_TXT_HIGH); }))) {
            mixin(enumMixinStr_SSL_TXT_HIGH);
        }
    }




    static if(!is(typeof(SSL_TXT_FIPS))) {
        private enum enumMixinStr_SSL_TXT_FIPS = `enum SSL_TXT_FIPS = "FIPS";`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_TXT_FIPS); }))) {
            mixin(enumMixinStr_SSL_TXT_FIPS);
        }
    }




    static if(!is(typeof(SSL_TXT_aNULL))) {
        private enum enumMixinStr_SSL_TXT_aNULL = `enum SSL_TXT_aNULL = "aNULL";`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_TXT_aNULL); }))) {
            mixin(enumMixinStr_SSL_TXT_aNULL);
        }
    }




    static if(!is(typeof(SSL_TXT_eNULL))) {
        private enum enumMixinStr_SSL_TXT_eNULL = `enum SSL_TXT_eNULL = "eNULL";`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_TXT_eNULL); }))) {
            mixin(enumMixinStr_SSL_TXT_eNULL);
        }
    }




    static if(!is(typeof(SSL_TXT_NULL))) {
        private enum enumMixinStr_SSL_TXT_NULL = `enum SSL_TXT_NULL = "NULL";`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_TXT_NULL); }))) {
            mixin(enumMixinStr_SSL_TXT_NULL);
        }
    }




    static if(!is(typeof(SSL_TXT_kRSA))) {
        private enum enumMixinStr_SSL_TXT_kRSA = `enum SSL_TXT_kRSA = "kRSA";`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_TXT_kRSA); }))) {
            mixin(enumMixinStr_SSL_TXT_kRSA);
        }
    }




    static if(!is(typeof(SSL_TXT_kDHr))) {
        private enum enumMixinStr_SSL_TXT_kDHr = `enum SSL_TXT_kDHr = "kDHr";`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_TXT_kDHr); }))) {
            mixin(enumMixinStr_SSL_TXT_kDHr);
        }
    }




    static if(!is(typeof(SSL_TXT_kDHd))) {
        private enum enumMixinStr_SSL_TXT_kDHd = `enum SSL_TXT_kDHd = "kDHd";`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_TXT_kDHd); }))) {
            mixin(enumMixinStr_SSL_TXT_kDHd);
        }
    }




    static if(!is(typeof(SSL_TXT_kDH))) {
        private enum enumMixinStr_SSL_TXT_kDH = `enum SSL_TXT_kDH = "kDH";`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_TXT_kDH); }))) {
            mixin(enumMixinStr_SSL_TXT_kDH);
        }
    }




    static if(!is(typeof(SSL_TXT_kEDH))) {
        private enum enumMixinStr_SSL_TXT_kEDH = `enum SSL_TXT_kEDH = "kEDH";`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_TXT_kEDH); }))) {
            mixin(enumMixinStr_SSL_TXT_kEDH);
        }
    }




    static if(!is(typeof(SSL_TXT_kDHE))) {
        private enum enumMixinStr_SSL_TXT_kDHE = `enum SSL_TXT_kDHE = "kDHE";`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_TXT_kDHE); }))) {
            mixin(enumMixinStr_SSL_TXT_kDHE);
        }
    }




    static if(!is(typeof(SSL_TXT_kECDHr))) {
        private enum enumMixinStr_SSL_TXT_kECDHr = `enum SSL_TXT_kECDHr = "kECDHr";`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_TXT_kECDHr); }))) {
            mixin(enumMixinStr_SSL_TXT_kECDHr);
        }
    }




    static if(!is(typeof(SSL_TXT_kECDHe))) {
        private enum enumMixinStr_SSL_TXT_kECDHe = `enum SSL_TXT_kECDHe = "kECDHe";`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_TXT_kECDHe); }))) {
            mixin(enumMixinStr_SSL_TXT_kECDHe);
        }
    }




    static if(!is(typeof(SSL_TXT_kECDH))) {
        private enum enumMixinStr_SSL_TXT_kECDH = `enum SSL_TXT_kECDH = "kECDH";`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_TXT_kECDH); }))) {
            mixin(enumMixinStr_SSL_TXT_kECDH);
        }
    }




    static if(!is(typeof(SSL_TXT_kEECDH))) {
        private enum enumMixinStr_SSL_TXT_kEECDH = `enum SSL_TXT_kEECDH = "kEECDH";`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_TXT_kEECDH); }))) {
            mixin(enumMixinStr_SSL_TXT_kEECDH);
        }
    }




    static if(!is(typeof(SSL_TXT_kECDHE))) {
        private enum enumMixinStr_SSL_TXT_kECDHE = `enum SSL_TXT_kECDHE = "kECDHE";`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_TXT_kECDHE); }))) {
            mixin(enumMixinStr_SSL_TXT_kECDHE);
        }
    }




    static if(!is(typeof(SSL_TXT_kPSK))) {
        private enum enumMixinStr_SSL_TXT_kPSK = `enum SSL_TXT_kPSK = "kPSK";`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_TXT_kPSK); }))) {
            mixin(enumMixinStr_SSL_TXT_kPSK);
        }
    }




    static if(!is(typeof(SSL_TXT_kRSAPSK))) {
        private enum enumMixinStr_SSL_TXT_kRSAPSK = `enum SSL_TXT_kRSAPSK = "kRSAPSK";`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_TXT_kRSAPSK); }))) {
            mixin(enumMixinStr_SSL_TXT_kRSAPSK);
        }
    }




    static if(!is(typeof(SSL_TXT_kECDHEPSK))) {
        private enum enumMixinStr_SSL_TXT_kECDHEPSK = `enum SSL_TXT_kECDHEPSK = "kECDHEPSK";`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_TXT_kECDHEPSK); }))) {
            mixin(enumMixinStr_SSL_TXT_kECDHEPSK);
        }
    }




    static if(!is(typeof(SSL_TXT_kDHEPSK))) {
        private enum enumMixinStr_SSL_TXT_kDHEPSK = `enum SSL_TXT_kDHEPSK = "kDHEPSK";`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_TXT_kDHEPSK); }))) {
            mixin(enumMixinStr_SSL_TXT_kDHEPSK);
        }
    }




    static if(!is(typeof(SSL_TXT_kGOST))) {
        private enum enumMixinStr_SSL_TXT_kGOST = `enum SSL_TXT_kGOST = "kGOST";`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_TXT_kGOST); }))) {
            mixin(enumMixinStr_SSL_TXT_kGOST);
        }
    }




    static if(!is(typeof(SSL_TXT_kSRP))) {
        private enum enumMixinStr_SSL_TXT_kSRP = `enum SSL_TXT_kSRP = "kSRP";`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_TXT_kSRP); }))) {
            mixin(enumMixinStr_SSL_TXT_kSRP);
        }
    }




    static if(!is(typeof(SSL_TXT_aRSA))) {
        private enum enumMixinStr_SSL_TXT_aRSA = `enum SSL_TXT_aRSA = "aRSA";`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_TXT_aRSA); }))) {
            mixin(enumMixinStr_SSL_TXT_aRSA);
        }
    }




    static if(!is(typeof(SSL_TXT_aDSS))) {
        private enum enumMixinStr_SSL_TXT_aDSS = `enum SSL_TXT_aDSS = "aDSS";`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_TXT_aDSS); }))) {
            mixin(enumMixinStr_SSL_TXT_aDSS);
        }
    }




    static if(!is(typeof(SSL_TXT_aDH))) {
        private enum enumMixinStr_SSL_TXT_aDH = `enum SSL_TXT_aDH = "aDH";`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_TXT_aDH); }))) {
            mixin(enumMixinStr_SSL_TXT_aDH);
        }
    }




    static if(!is(typeof(SSL_TXT_aECDH))) {
        private enum enumMixinStr_SSL_TXT_aECDH = `enum SSL_TXT_aECDH = "aECDH";`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_TXT_aECDH); }))) {
            mixin(enumMixinStr_SSL_TXT_aECDH);
        }
    }




    static if(!is(typeof(SSL_TXT_aECDSA))) {
        private enum enumMixinStr_SSL_TXT_aECDSA = `enum SSL_TXT_aECDSA = "aECDSA";`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_TXT_aECDSA); }))) {
            mixin(enumMixinStr_SSL_TXT_aECDSA);
        }
    }




    static if(!is(typeof(SSL_TXT_aPSK))) {
        private enum enumMixinStr_SSL_TXT_aPSK = `enum SSL_TXT_aPSK = "aPSK";`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_TXT_aPSK); }))) {
            mixin(enumMixinStr_SSL_TXT_aPSK);
        }
    }




    static if(!is(typeof(SSL_TXT_aGOST94))) {
        private enum enumMixinStr_SSL_TXT_aGOST94 = `enum SSL_TXT_aGOST94 = "aGOST94";`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_TXT_aGOST94); }))) {
            mixin(enumMixinStr_SSL_TXT_aGOST94);
        }
    }




    static if(!is(typeof(SSL_TXT_aGOST01))) {
        private enum enumMixinStr_SSL_TXT_aGOST01 = `enum SSL_TXT_aGOST01 = "aGOST01";`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_TXT_aGOST01); }))) {
            mixin(enumMixinStr_SSL_TXT_aGOST01);
        }
    }




    static if(!is(typeof(SSL_TXT_aGOST12))) {
        private enum enumMixinStr_SSL_TXT_aGOST12 = `enum SSL_TXT_aGOST12 = "aGOST12";`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_TXT_aGOST12); }))) {
            mixin(enumMixinStr_SSL_TXT_aGOST12);
        }
    }




    static if(!is(typeof(SSL_TXT_aGOST))) {
        private enum enumMixinStr_SSL_TXT_aGOST = `enum SSL_TXT_aGOST = "aGOST";`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_TXT_aGOST); }))) {
            mixin(enumMixinStr_SSL_TXT_aGOST);
        }
    }




    static if(!is(typeof(SSL_TXT_aSRP))) {
        private enum enumMixinStr_SSL_TXT_aSRP = `enum SSL_TXT_aSRP = "aSRP";`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_TXT_aSRP); }))) {
            mixin(enumMixinStr_SSL_TXT_aSRP);
        }
    }




    static if(!is(typeof(SSL_TXT_DSS))) {
        private enum enumMixinStr_SSL_TXT_DSS = `enum SSL_TXT_DSS = "DSS";`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_TXT_DSS); }))) {
            mixin(enumMixinStr_SSL_TXT_DSS);
        }
    }




    static if(!is(typeof(SSL_TXT_DH))) {
        private enum enumMixinStr_SSL_TXT_DH = `enum SSL_TXT_DH = "DH";`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_TXT_DH); }))) {
            mixin(enumMixinStr_SSL_TXT_DH);
        }
    }




    static if(!is(typeof(SSL_TXT_DHE))) {
        private enum enumMixinStr_SSL_TXT_DHE = `enum SSL_TXT_DHE = "DHE";`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_TXT_DHE); }))) {
            mixin(enumMixinStr_SSL_TXT_DHE);
        }
    }




    static if(!is(typeof(SSL_TXT_EDH))) {
        private enum enumMixinStr_SSL_TXT_EDH = `enum SSL_TXT_EDH = "EDH";`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_TXT_EDH); }))) {
            mixin(enumMixinStr_SSL_TXT_EDH);
        }
    }




    static if(!is(typeof(SSL_TXT_ADH))) {
        private enum enumMixinStr_SSL_TXT_ADH = `enum SSL_TXT_ADH = "ADH";`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_TXT_ADH); }))) {
            mixin(enumMixinStr_SSL_TXT_ADH);
        }
    }




    static if(!is(typeof(SSL_TXT_RSA))) {
        private enum enumMixinStr_SSL_TXT_RSA = `enum SSL_TXT_RSA = "RSA";`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_TXT_RSA); }))) {
            mixin(enumMixinStr_SSL_TXT_RSA);
        }
    }




    static if(!is(typeof(SSL_TXT_ECDH))) {
        private enum enumMixinStr_SSL_TXT_ECDH = `enum SSL_TXT_ECDH = "ECDH";`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_TXT_ECDH); }))) {
            mixin(enumMixinStr_SSL_TXT_ECDH);
        }
    }




    static if(!is(typeof(SSL_TXT_EECDH))) {
        private enum enumMixinStr_SSL_TXT_EECDH = `enum SSL_TXT_EECDH = "EECDH";`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_TXT_EECDH); }))) {
            mixin(enumMixinStr_SSL_TXT_EECDH);
        }
    }




    static if(!is(typeof(SSL_TXT_ECDHE))) {
        private enum enumMixinStr_SSL_TXT_ECDHE = `enum SSL_TXT_ECDHE = "ECDHE";`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_TXT_ECDHE); }))) {
            mixin(enumMixinStr_SSL_TXT_ECDHE);
        }
    }




    static if(!is(typeof(SSL_TXT_AECDH))) {
        private enum enumMixinStr_SSL_TXT_AECDH = `enum SSL_TXT_AECDH = "AECDH";`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_TXT_AECDH); }))) {
            mixin(enumMixinStr_SSL_TXT_AECDH);
        }
    }




    static if(!is(typeof(SSL_TXT_ECDSA))) {
        private enum enumMixinStr_SSL_TXT_ECDSA = `enum SSL_TXT_ECDSA = "ECDSA";`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_TXT_ECDSA); }))) {
            mixin(enumMixinStr_SSL_TXT_ECDSA);
        }
    }




    static if(!is(typeof(SSL_TXT_PSK))) {
        private enum enumMixinStr_SSL_TXT_PSK = `enum SSL_TXT_PSK = "PSK";`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_TXT_PSK); }))) {
            mixin(enumMixinStr_SSL_TXT_PSK);
        }
    }




    static if(!is(typeof(SSL_TXT_SRP))) {
        private enum enumMixinStr_SSL_TXT_SRP = `enum SSL_TXT_SRP = "SRP";`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_TXT_SRP); }))) {
            mixin(enumMixinStr_SSL_TXT_SRP);
        }
    }




    static if(!is(typeof(SSL_TXT_DES))) {
        private enum enumMixinStr_SSL_TXT_DES = `enum SSL_TXT_DES = "DES";`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_TXT_DES); }))) {
            mixin(enumMixinStr_SSL_TXT_DES);
        }
    }




    static if(!is(typeof(SSL_TXT_3DES))) {
        private enum enumMixinStr_SSL_TXT_3DES = `enum SSL_TXT_3DES = "3DES";`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_TXT_3DES); }))) {
            mixin(enumMixinStr_SSL_TXT_3DES);
        }
    }




    static if(!is(typeof(SSL_TXT_RC4))) {
        private enum enumMixinStr_SSL_TXT_RC4 = `enum SSL_TXT_RC4 = "RC4";`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_TXT_RC4); }))) {
            mixin(enumMixinStr_SSL_TXT_RC4);
        }
    }




    static if(!is(typeof(SSL_TXT_RC2))) {
        private enum enumMixinStr_SSL_TXT_RC2 = `enum SSL_TXT_RC2 = "RC2";`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_TXT_RC2); }))) {
            mixin(enumMixinStr_SSL_TXT_RC2);
        }
    }




    static if(!is(typeof(SSL_TXT_IDEA))) {
        private enum enumMixinStr_SSL_TXT_IDEA = `enum SSL_TXT_IDEA = "IDEA";`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_TXT_IDEA); }))) {
            mixin(enumMixinStr_SSL_TXT_IDEA);
        }
    }




    static if(!is(typeof(SSL_TXT_SEED))) {
        private enum enumMixinStr_SSL_TXT_SEED = `enum SSL_TXT_SEED = "SEED";`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_TXT_SEED); }))) {
            mixin(enumMixinStr_SSL_TXT_SEED);
        }
    }




    static if(!is(typeof(SSL_TXT_AES128))) {
        private enum enumMixinStr_SSL_TXT_AES128 = `enum SSL_TXT_AES128 = "AES128";`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_TXT_AES128); }))) {
            mixin(enumMixinStr_SSL_TXT_AES128);
        }
    }




    static if(!is(typeof(SSL_TXT_AES256))) {
        private enum enumMixinStr_SSL_TXT_AES256 = `enum SSL_TXT_AES256 = "AES256";`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_TXT_AES256); }))) {
            mixin(enumMixinStr_SSL_TXT_AES256);
        }
    }




    static if(!is(typeof(SSL_TXT_AES))) {
        private enum enumMixinStr_SSL_TXT_AES = `enum SSL_TXT_AES = "AES";`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_TXT_AES); }))) {
            mixin(enumMixinStr_SSL_TXT_AES);
        }
    }




    static if(!is(typeof(SSL_TXT_AES_GCM))) {
        private enum enumMixinStr_SSL_TXT_AES_GCM = `enum SSL_TXT_AES_GCM = "AESGCM";`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_TXT_AES_GCM); }))) {
            mixin(enumMixinStr_SSL_TXT_AES_GCM);
        }
    }




    static if(!is(typeof(SSL_TXT_AES_CCM))) {
        private enum enumMixinStr_SSL_TXT_AES_CCM = `enum SSL_TXT_AES_CCM = "AESCCM";`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_TXT_AES_CCM); }))) {
            mixin(enumMixinStr_SSL_TXT_AES_CCM);
        }
    }




    static if(!is(typeof(SSL_TXT_AES_CCM_8))) {
        private enum enumMixinStr_SSL_TXT_AES_CCM_8 = `enum SSL_TXT_AES_CCM_8 = "AESCCM8";`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_TXT_AES_CCM_8); }))) {
            mixin(enumMixinStr_SSL_TXT_AES_CCM_8);
        }
    }




    static if(!is(typeof(SSL_TXT_CAMELLIA128))) {
        private enum enumMixinStr_SSL_TXT_CAMELLIA128 = `enum SSL_TXT_CAMELLIA128 = "CAMELLIA128";`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_TXT_CAMELLIA128); }))) {
            mixin(enumMixinStr_SSL_TXT_CAMELLIA128);
        }
    }




    static if(!is(typeof(SSL_TXT_CAMELLIA256))) {
        private enum enumMixinStr_SSL_TXT_CAMELLIA256 = `enum SSL_TXT_CAMELLIA256 = "CAMELLIA256";`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_TXT_CAMELLIA256); }))) {
            mixin(enumMixinStr_SSL_TXT_CAMELLIA256);
        }
    }




    static if(!is(typeof(SSL_TXT_CAMELLIA))) {
        private enum enumMixinStr_SSL_TXT_CAMELLIA = `enum SSL_TXT_CAMELLIA = "CAMELLIA";`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_TXT_CAMELLIA); }))) {
            mixin(enumMixinStr_SSL_TXT_CAMELLIA);
        }
    }




    static if(!is(typeof(SSL_TXT_CHACHA20))) {
        private enum enumMixinStr_SSL_TXT_CHACHA20 = `enum SSL_TXT_CHACHA20 = "CHACHA20";`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_TXT_CHACHA20); }))) {
            mixin(enumMixinStr_SSL_TXT_CHACHA20);
        }
    }




    static if(!is(typeof(SSL_TXT_GOST))) {
        private enum enumMixinStr_SSL_TXT_GOST = `enum SSL_TXT_GOST = "GOST89";`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_TXT_GOST); }))) {
            mixin(enumMixinStr_SSL_TXT_GOST);
        }
    }




    static if(!is(typeof(SSL_TXT_ARIA))) {
        private enum enumMixinStr_SSL_TXT_ARIA = `enum SSL_TXT_ARIA = "ARIA";`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_TXT_ARIA); }))) {
            mixin(enumMixinStr_SSL_TXT_ARIA);
        }
    }




    static if(!is(typeof(SSL_TXT_ARIA_GCM))) {
        private enum enumMixinStr_SSL_TXT_ARIA_GCM = `enum SSL_TXT_ARIA_GCM = "ARIAGCM";`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_TXT_ARIA_GCM); }))) {
            mixin(enumMixinStr_SSL_TXT_ARIA_GCM);
        }
    }




    static if(!is(typeof(SSL_TXT_ARIA128))) {
        private enum enumMixinStr_SSL_TXT_ARIA128 = `enum SSL_TXT_ARIA128 = "ARIA128";`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_TXT_ARIA128); }))) {
            mixin(enumMixinStr_SSL_TXT_ARIA128);
        }
    }




    static if(!is(typeof(SSL_TXT_ARIA256))) {
        private enum enumMixinStr_SSL_TXT_ARIA256 = `enum SSL_TXT_ARIA256 = "ARIA256";`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_TXT_ARIA256); }))) {
            mixin(enumMixinStr_SSL_TXT_ARIA256);
        }
    }




    static if(!is(typeof(SSL_TXT_MD5))) {
        private enum enumMixinStr_SSL_TXT_MD5 = `enum SSL_TXT_MD5 = "MD5";`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_TXT_MD5); }))) {
            mixin(enumMixinStr_SSL_TXT_MD5);
        }
    }




    static if(!is(typeof(SSL_TXT_SHA1))) {
        private enum enumMixinStr_SSL_TXT_SHA1 = `enum SSL_TXT_SHA1 = "SHA1";`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_TXT_SHA1); }))) {
            mixin(enumMixinStr_SSL_TXT_SHA1);
        }
    }




    static if(!is(typeof(SSL_TXT_SHA))) {
        private enum enumMixinStr_SSL_TXT_SHA = `enum SSL_TXT_SHA = "SHA";`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_TXT_SHA); }))) {
            mixin(enumMixinStr_SSL_TXT_SHA);
        }
    }




    static if(!is(typeof(SSL_TXT_GOST94))) {
        private enum enumMixinStr_SSL_TXT_GOST94 = `enum SSL_TXT_GOST94 = "GOST94";`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_TXT_GOST94); }))) {
            mixin(enumMixinStr_SSL_TXT_GOST94);
        }
    }




    static if(!is(typeof(SSL_TXT_GOST89MAC))) {
        private enum enumMixinStr_SSL_TXT_GOST89MAC = `enum SSL_TXT_GOST89MAC = "GOST89MAC";`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_TXT_GOST89MAC); }))) {
            mixin(enumMixinStr_SSL_TXT_GOST89MAC);
        }
    }




    static if(!is(typeof(SSL_TXT_GOST12))) {
        private enum enumMixinStr_SSL_TXT_GOST12 = `enum SSL_TXT_GOST12 = "GOST12";`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_TXT_GOST12); }))) {
            mixin(enumMixinStr_SSL_TXT_GOST12);
        }
    }




    static if(!is(typeof(SSL_TXT_GOST89MAC12))) {
        private enum enumMixinStr_SSL_TXT_GOST89MAC12 = `enum SSL_TXT_GOST89MAC12 = "GOST89MAC12";`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_TXT_GOST89MAC12); }))) {
            mixin(enumMixinStr_SSL_TXT_GOST89MAC12);
        }
    }




    static if(!is(typeof(SSL_TXT_SHA256))) {
        private enum enumMixinStr_SSL_TXT_SHA256 = `enum SSL_TXT_SHA256 = "SHA256";`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_TXT_SHA256); }))) {
            mixin(enumMixinStr_SSL_TXT_SHA256);
        }
    }




    static if(!is(typeof(SSL_TXT_SHA384))) {
        private enum enumMixinStr_SSL_TXT_SHA384 = `enum SSL_TXT_SHA384 = "SHA384";`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_TXT_SHA384); }))) {
            mixin(enumMixinStr_SSL_TXT_SHA384);
        }
    }




    static if(!is(typeof(SSL_TXT_SSLV3))) {
        private enum enumMixinStr_SSL_TXT_SSLV3 = `enum SSL_TXT_SSLV3 = "SSLv3";`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_TXT_SSLV3); }))) {
            mixin(enumMixinStr_SSL_TXT_SSLV3);
        }
    }




    static if(!is(typeof(SSL_TXT_TLSV1))) {
        private enum enumMixinStr_SSL_TXT_TLSV1 = `enum SSL_TXT_TLSV1 = "TLSv1";`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_TXT_TLSV1); }))) {
            mixin(enumMixinStr_SSL_TXT_TLSV1);
        }
    }




    static if(!is(typeof(SSL_TXT_TLSV1_1))) {
        private enum enumMixinStr_SSL_TXT_TLSV1_1 = `enum SSL_TXT_TLSV1_1 = "TLSv1.1";`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_TXT_TLSV1_1); }))) {
            mixin(enumMixinStr_SSL_TXT_TLSV1_1);
        }
    }




    static if(!is(typeof(SSL_TXT_TLSV1_2))) {
        private enum enumMixinStr_SSL_TXT_TLSV1_2 = `enum SSL_TXT_TLSV1_2 = "TLSv1.2";`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_TXT_TLSV1_2); }))) {
            mixin(enumMixinStr_SSL_TXT_TLSV1_2);
        }
    }




    static if(!is(typeof(SSL_TXT_ALL))) {
        private enum enumMixinStr_SSL_TXT_ALL = `enum SSL_TXT_ALL = "ALL";`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_TXT_ALL); }))) {
            mixin(enumMixinStr_SSL_TXT_ALL);
        }
    }




    static if(!is(typeof(SSL_TXT_CMPALL))) {
        private enum enumMixinStr_SSL_TXT_CMPALL = `enum SSL_TXT_CMPALL = "COMPLEMENTOFALL";`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_TXT_CMPALL); }))) {
            mixin(enumMixinStr_SSL_TXT_CMPALL);
        }
    }




    static if(!is(typeof(SSL_TXT_CMPDEF))) {
        private enum enumMixinStr_SSL_TXT_CMPDEF = `enum SSL_TXT_CMPDEF = "COMPLEMENTOFDEFAULT";`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_TXT_CMPDEF); }))) {
            mixin(enumMixinStr_SSL_TXT_CMPDEF);
        }
    }




    static if(!is(typeof(SSL_DEFAULT_CIPHER_LIST))) {
        private enum enumMixinStr_SSL_DEFAULT_CIPHER_LIST = `enum SSL_DEFAULT_CIPHER_LIST = "ALL:!COMPLEMENTOFDEFAULT:!eNULL";`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_DEFAULT_CIPHER_LIST); }))) {
            mixin(enumMixinStr_SSL_DEFAULT_CIPHER_LIST);
        }
    }




    static if(!is(typeof(TLS_DEFAULT_CIPHERSUITES))) {
        private enum enumMixinStr_TLS_DEFAULT_CIPHERSUITES = `enum TLS_DEFAULT_CIPHERSUITES = "TLS_AES_256_GCM_SHA384:" "TLS_CHACHA20_POLY1305_SHA256:" "TLS_AES_128_GCM_SHA256";`;
        static if(is(typeof({ mixin(enumMixinStr_TLS_DEFAULT_CIPHERSUITES); }))) {
            mixin(enumMixinStr_TLS_DEFAULT_CIPHERSUITES);
        }
    }




    static if(!is(typeof(SSL_SENT_SHUTDOWN))) {
        private enum enumMixinStr_SSL_SENT_SHUTDOWN = `enum SSL_SENT_SHUTDOWN = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_SENT_SHUTDOWN); }))) {
            mixin(enumMixinStr_SSL_SENT_SHUTDOWN);
        }
    }




    static if(!is(typeof(SSL_RECEIVED_SHUTDOWN))) {
        private enum enumMixinStr_SSL_RECEIVED_SHUTDOWN = `enum SSL_RECEIVED_SHUTDOWN = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_RECEIVED_SHUTDOWN); }))) {
            mixin(enumMixinStr_SSL_RECEIVED_SHUTDOWN);
        }
    }




    static if(!is(typeof(SSL_FILETYPE_ASN1))) {
        private enum enumMixinStr_SSL_FILETYPE_ASN1 = `enum SSL_FILETYPE_ASN1 = X509_FILETYPE_ASN1;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_FILETYPE_ASN1); }))) {
            mixin(enumMixinStr_SSL_FILETYPE_ASN1);
        }
    }




    static if(!is(typeof(SSL_FILETYPE_PEM))) {
        private enum enumMixinStr_SSL_FILETYPE_PEM = `enum SSL_FILETYPE_PEM = X509_FILETYPE_PEM;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_FILETYPE_PEM); }))) {
            mixin(enumMixinStr_SSL_FILETYPE_PEM);
        }
    }




    static if(!is(typeof(SSL3_CK_DHE_RSA_DES_40_CBC_SHA))) {
        private enum enumMixinStr_SSL3_CK_DHE_RSA_DES_40_CBC_SHA = `enum SSL3_CK_DHE_RSA_DES_40_CBC_SHA = 0x03000014;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL3_CK_DHE_RSA_DES_40_CBC_SHA); }))) {
            mixin(enumMixinStr_SSL3_CK_DHE_RSA_DES_40_CBC_SHA);
        }
    }




    static if(!is(typeof(SSL3_CK_EDH_DSS_DES_192_CBC3_SHA))) {
        private enum enumMixinStr_SSL3_CK_EDH_DSS_DES_192_CBC3_SHA = `enum SSL3_CK_EDH_DSS_DES_192_CBC3_SHA = SSL3_CK_DHE_DSS_DES_192_CBC3_SHA;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL3_CK_EDH_DSS_DES_192_CBC3_SHA); }))) {
            mixin(enumMixinStr_SSL3_CK_EDH_DSS_DES_192_CBC3_SHA);
        }
    }




    static if(!is(typeof(SSL3_CK_DHE_DSS_DES_192_CBC3_SHA))) {
        private enum enumMixinStr_SSL3_CK_DHE_DSS_DES_192_CBC3_SHA = `enum SSL3_CK_DHE_DSS_DES_192_CBC3_SHA = 0x03000013;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL3_CK_DHE_DSS_DES_192_CBC3_SHA); }))) {
            mixin(enumMixinStr_SSL3_CK_DHE_DSS_DES_192_CBC3_SHA);
        }
    }




    static if(!is(typeof(SSL3_CK_EDH_DSS_DES_64_CBC_SHA))) {
        private enum enumMixinStr_SSL3_CK_EDH_DSS_DES_64_CBC_SHA = `enum SSL3_CK_EDH_DSS_DES_64_CBC_SHA = SSL3_CK_DHE_DSS_DES_64_CBC_SHA;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL3_CK_EDH_DSS_DES_64_CBC_SHA); }))) {
            mixin(enumMixinStr_SSL3_CK_EDH_DSS_DES_64_CBC_SHA);
        }
    }




    static if(!is(typeof(SSL3_CK_DHE_DSS_DES_64_CBC_SHA))) {
        private enum enumMixinStr_SSL3_CK_DHE_DSS_DES_64_CBC_SHA = `enum SSL3_CK_DHE_DSS_DES_64_CBC_SHA = 0x03000012;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL3_CK_DHE_DSS_DES_64_CBC_SHA); }))) {
            mixin(enumMixinStr_SSL3_CK_DHE_DSS_DES_64_CBC_SHA);
        }
    }




    static if(!is(typeof(SSL3_CK_EDH_DSS_DES_40_CBC_SHA))) {
        private enum enumMixinStr_SSL3_CK_EDH_DSS_DES_40_CBC_SHA = `enum SSL3_CK_EDH_DSS_DES_40_CBC_SHA = SSL3_CK_DHE_DSS_DES_40_CBC_SHA;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL3_CK_EDH_DSS_DES_40_CBC_SHA); }))) {
            mixin(enumMixinStr_SSL3_CK_EDH_DSS_DES_40_CBC_SHA);
        }
    }




    static if(!is(typeof(SSL3_CK_DHE_DSS_DES_40_CBC_SHA))) {
        private enum enumMixinStr_SSL3_CK_DHE_DSS_DES_40_CBC_SHA = `enum SSL3_CK_DHE_DSS_DES_40_CBC_SHA = 0x03000011;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL3_CK_DHE_DSS_DES_40_CBC_SHA); }))) {
            mixin(enumMixinStr_SSL3_CK_DHE_DSS_DES_40_CBC_SHA);
        }
    }




    static if(!is(typeof(SSL3_CK_DH_RSA_DES_192_CBC3_SHA))) {
        private enum enumMixinStr_SSL3_CK_DH_RSA_DES_192_CBC3_SHA = `enum SSL3_CK_DH_RSA_DES_192_CBC3_SHA = 0x03000010;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL3_CK_DH_RSA_DES_192_CBC3_SHA); }))) {
            mixin(enumMixinStr_SSL3_CK_DH_RSA_DES_192_CBC3_SHA);
        }
    }




    static if(!is(typeof(SSL3_CK_DH_RSA_DES_64_CBC_SHA))) {
        private enum enumMixinStr_SSL3_CK_DH_RSA_DES_64_CBC_SHA = `enum SSL3_CK_DH_RSA_DES_64_CBC_SHA = 0x0300000F;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL3_CK_DH_RSA_DES_64_CBC_SHA); }))) {
            mixin(enumMixinStr_SSL3_CK_DH_RSA_DES_64_CBC_SHA);
        }
    }




    static if(!is(typeof(SSL3_CK_DH_RSA_DES_40_CBC_SHA))) {
        private enum enumMixinStr_SSL3_CK_DH_RSA_DES_40_CBC_SHA = `enum SSL3_CK_DH_RSA_DES_40_CBC_SHA = 0x0300000E;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL3_CK_DH_RSA_DES_40_CBC_SHA); }))) {
            mixin(enumMixinStr_SSL3_CK_DH_RSA_DES_40_CBC_SHA);
        }
    }




    static if(!is(typeof(SSL3_CK_DH_DSS_DES_192_CBC3_SHA))) {
        private enum enumMixinStr_SSL3_CK_DH_DSS_DES_192_CBC3_SHA = `enum SSL3_CK_DH_DSS_DES_192_CBC3_SHA = 0x0300000D;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL3_CK_DH_DSS_DES_192_CBC3_SHA); }))) {
            mixin(enumMixinStr_SSL3_CK_DH_DSS_DES_192_CBC3_SHA);
        }
    }




    static if(!is(typeof(SSL3_CK_DH_DSS_DES_64_CBC_SHA))) {
        private enum enumMixinStr_SSL3_CK_DH_DSS_DES_64_CBC_SHA = `enum SSL3_CK_DH_DSS_DES_64_CBC_SHA = 0x0300000C;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL3_CK_DH_DSS_DES_64_CBC_SHA); }))) {
            mixin(enumMixinStr_SSL3_CK_DH_DSS_DES_64_CBC_SHA);
        }
    }




    static if(!is(typeof(SSL3_CK_DH_DSS_DES_40_CBC_SHA))) {
        private enum enumMixinStr_SSL3_CK_DH_DSS_DES_40_CBC_SHA = `enum SSL3_CK_DH_DSS_DES_40_CBC_SHA = 0x0300000B;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL3_CK_DH_DSS_DES_40_CBC_SHA); }))) {
            mixin(enumMixinStr_SSL3_CK_DH_DSS_DES_40_CBC_SHA);
        }
    }




    static if(!is(typeof(SSL3_CK_RSA_DES_192_CBC3_SHA))) {
        private enum enumMixinStr_SSL3_CK_RSA_DES_192_CBC3_SHA = `enum SSL3_CK_RSA_DES_192_CBC3_SHA = 0x0300000A;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL3_CK_RSA_DES_192_CBC3_SHA); }))) {
            mixin(enumMixinStr_SSL3_CK_RSA_DES_192_CBC3_SHA);
        }
    }




    static if(!is(typeof(SSL3_CK_RSA_DES_64_CBC_SHA))) {
        private enum enumMixinStr_SSL3_CK_RSA_DES_64_CBC_SHA = `enum SSL3_CK_RSA_DES_64_CBC_SHA = 0x03000009;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL3_CK_RSA_DES_64_CBC_SHA); }))) {
            mixin(enumMixinStr_SSL3_CK_RSA_DES_64_CBC_SHA);
        }
    }




    static if(!is(typeof(SSL3_CK_RSA_DES_40_CBC_SHA))) {
        private enum enumMixinStr_SSL3_CK_RSA_DES_40_CBC_SHA = `enum SSL3_CK_RSA_DES_40_CBC_SHA = 0x03000008;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL3_CK_RSA_DES_40_CBC_SHA); }))) {
            mixin(enumMixinStr_SSL3_CK_RSA_DES_40_CBC_SHA);
        }
    }




    static if(!is(typeof(SSL3_CK_RSA_IDEA_128_SHA))) {
        private enum enumMixinStr_SSL3_CK_RSA_IDEA_128_SHA = `enum SSL3_CK_RSA_IDEA_128_SHA = 0x03000007;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL3_CK_RSA_IDEA_128_SHA); }))) {
            mixin(enumMixinStr_SSL3_CK_RSA_IDEA_128_SHA);
        }
    }




    static if(!is(typeof(SSL3_CK_RSA_RC2_40_MD5))) {
        private enum enumMixinStr_SSL3_CK_RSA_RC2_40_MD5 = `enum SSL3_CK_RSA_RC2_40_MD5 = 0x03000006;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL3_CK_RSA_RC2_40_MD5); }))) {
            mixin(enumMixinStr_SSL3_CK_RSA_RC2_40_MD5);
        }
    }




    static if(!is(typeof(SSL3_CK_RSA_RC4_128_SHA))) {
        private enum enumMixinStr_SSL3_CK_RSA_RC4_128_SHA = `enum SSL3_CK_RSA_RC4_128_SHA = 0x03000005;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL3_CK_RSA_RC4_128_SHA); }))) {
            mixin(enumMixinStr_SSL3_CK_RSA_RC4_128_SHA);
        }
    }




    static if(!is(typeof(SSL3_CK_RSA_RC4_128_MD5))) {
        private enum enumMixinStr_SSL3_CK_RSA_RC4_128_MD5 = `enum SSL3_CK_RSA_RC4_128_MD5 = 0x03000004;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL3_CK_RSA_RC4_128_MD5); }))) {
            mixin(enumMixinStr_SSL3_CK_RSA_RC4_128_MD5);
        }
    }




    static if(!is(typeof(SSL3_CK_RSA_RC4_40_MD5))) {
        private enum enumMixinStr_SSL3_CK_RSA_RC4_40_MD5 = `enum SSL3_CK_RSA_RC4_40_MD5 = 0x03000003;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL3_CK_RSA_RC4_40_MD5); }))) {
            mixin(enumMixinStr_SSL3_CK_RSA_RC4_40_MD5);
        }
    }




    static if(!is(typeof(SSL3_CK_RSA_NULL_SHA))) {
        private enum enumMixinStr_SSL3_CK_RSA_NULL_SHA = `enum SSL3_CK_RSA_NULL_SHA = 0x03000002;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL3_CK_RSA_NULL_SHA); }))) {
            mixin(enumMixinStr_SSL3_CK_RSA_NULL_SHA);
        }
    }




    static if(!is(typeof(SSL3_CK_RSA_NULL_MD5))) {
        private enum enumMixinStr_SSL3_CK_RSA_NULL_MD5 = `enum SSL3_CK_RSA_NULL_MD5 = 0x03000001;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL3_CK_RSA_NULL_MD5); }))) {
            mixin(enumMixinStr_SSL3_CK_RSA_NULL_MD5);
        }
    }




    static if(!is(typeof(SSL3_CK_FALLBACK_SCSV))) {
        private enum enumMixinStr_SSL3_CK_FALLBACK_SCSV = `enum SSL3_CK_FALLBACK_SCSV = 0x03005600;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL3_CK_FALLBACK_SCSV); }))) {
            mixin(enumMixinStr_SSL3_CK_FALLBACK_SCSV);
        }
    }




    static if(!is(typeof(SSL3_CK_SCSV))) {
        private enum enumMixinStr_SSL3_CK_SCSV = `enum SSL3_CK_SCSV = 0x030000FF;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL3_CK_SCSV); }))) {
            mixin(enumMixinStr_SSL3_CK_SCSV);
        }
    }






    static if(!is(typeof(SRP_MINIMAL_N))) {
        private enum enumMixinStr_SRP_MINIMAL_N = `enum SRP_MINIMAL_N = 1024;`;
        static if(is(typeof({ mixin(enumMixinStr_SRP_MINIMAL_N); }))) {
            mixin(enumMixinStr_SRP_MINIMAL_N);
        }
    }




    static if(!is(typeof(DB_SRP_MODIF))) {
        private enum enumMixinStr_DB_SRP_MODIF = `enum DB_SRP_MODIF = 'v';`;
        static if(is(typeof({ mixin(enumMixinStr_DB_SRP_MODIF); }))) {
            mixin(enumMixinStr_DB_SRP_MODIF);
        }
    }




    static if(!is(typeof(DB_SRP_REVOKED))) {
        private enum enumMixinStr_DB_SRP_REVOKED = `enum DB_SRP_REVOKED = 'R';`;
        static if(is(typeof({ mixin(enumMixinStr_DB_SRP_REVOKED); }))) {
            mixin(enumMixinStr_DB_SRP_REVOKED);
        }
    }




    static if(!is(typeof(DB_SRP_VALID))) {
        private enum enumMixinStr_DB_SRP_VALID = `enum DB_SRP_VALID = 'V';`;
        static if(is(typeof({ mixin(enumMixinStr_DB_SRP_VALID); }))) {
            mixin(enumMixinStr_DB_SRP_VALID);
        }
    }




    static if(!is(typeof(DB_SRP_INDEX))) {
        private enum enumMixinStr_DB_SRP_INDEX = `enum DB_SRP_INDEX = 'I';`;
        static if(is(typeof({ mixin(enumMixinStr_DB_SRP_INDEX); }))) {
            mixin(enumMixinStr_DB_SRP_INDEX);
        }
    }




    static if(!is(typeof(DB_NUMBER))) {
        private enum enumMixinStr_DB_NUMBER = `enum DB_NUMBER = 6;`;
        static if(is(typeof({ mixin(enumMixinStr_DB_NUMBER); }))) {
            mixin(enumMixinStr_DB_NUMBER);
        }
    }




    static if(!is(typeof(DB_srpinfo))) {
        private enum enumMixinStr_DB_srpinfo = `enum DB_srpinfo = 5;`;
        static if(is(typeof({ mixin(enumMixinStr_DB_srpinfo); }))) {
            mixin(enumMixinStr_DB_srpinfo);
        }
    }




    static if(!is(typeof(DB_srpgN))) {
        private enum enumMixinStr_DB_srpgN = `enum DB_srpgN = 4;`;
        static if(is(typeof({ mixin(enumMixinStr_DB_srpgN); }))) {
            mixin(enumMixinStr_DB_srpgN);
        }
    }




    static if(!is(typeof(DB_srpid))) {
        private enum enumMixinStr_DB_srpid = `enum DB_srpid = 3;`;
        static if(is(typeof({ mixin(enumMixinStr_DB_srpid); }))) {
            mixin(enumMixinStr_DB_srpid);
        }
    }




    static if(!is(typeof(DB_srpsalt))) {
        private enum enumMixinStr_DB_srpsalt = `enum DB_srpsalt = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_DB_srpsalt); }))) {
            mixin(enumMixinStr_DB_srpsalt);
        }
    }




    static if(!is(typeof(DB_srpverifier))) {
        private enum enumMixinStr_DB_srpverifier = `enum DB_srpverifier = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_DB_srpverifier); }))) {
            mixin(enumMixinStr_DB_srpverifier);
        }
    }




    static if(!is(typeof(DB_srptype))) {
        private enum enumMixinStr_DB_srptype = `enum DB_srptype = 0;`;
        static if(is(typeof({ mixin(enumMixinStr_DB_srptype); }))) {
            mixin(enumMixinStr_DB_srptype);
        }
    }




    static if(!is(typeof(SRP_ERR_MEMORY))) {
        private enum enumMixinStr_SRP_ERR_MEMORY = `enum SRP_ERR_MEMORY = 4;`;
        static if(is(typeof({ mixin(enumMixinStr_SRP_ERR_MEMORY); }))) {
            mixin(enumMixinStr_SRP_ERR_MEMORY);
        }
    }




    static if(!is(typeof(SRP_ERR_OPEN_FILE))) {
        private enum enumMixinStr_SRP_ERR_OPEN_FILE = `enum SRP_ERR_OPEN_FILE = 3;`;
        static if(is(typeof({ mixin(enumMixinStr_SRP_ERR_OPEN_FILE); }))) {
            mixin(enumMixinStr_SRP_ERR_OPEN_FILE);
        }
    }




    static if(!is(typeof(SRP_ERR_VBASE_BN_LIB))) {
        private enum enumMixinStr_SRP_ERR_VBASE_BN_LIB = `enum SRP_ERR_VBASE_BN_LIB = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_SRP_ERR_VBASE_BN_LIB); }))) {
            mixin(enumMixinStr_SRP_ERR_VBASE_BN_LIB);
        }
    }




    static if(!is(typeof(SRP_ERR_VBASE_INCOMPLETE_FILE))) {
        private enum enumMixinStr_SRP_ERR_VBASE_INCOMPLETE_FILE = `enum SRP_ERR_VBASE_INCOMPLETE_FILE = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_SRP_ERR_VBASE_INCOMPLETE_FILE); }))) {
            mixin(enumMixinStr_SRP_ERR_VBASE_INCOMPLETE_FILE);
        }
    }




    static if(!is(typeof(SRP_NO_ERROR))) {
        private enum enumMixinStr_SRP_NO_ERROR = `enum SRP_NO_ERROR = 0;`;
        static if(is(typeof({ mixin(enumMixinStr_SRP_NO_ERROR); }))) {
            mixin(enumMixinStr_SRP_NO_ERROR);
        }
    }






    static if(!is(typeof(SEED_KEY_LENGTH))) {
        private enum enumMixinStr_SEED_KEY_LENGTH = `enum SEED_KEY_LENGTH = 16;`;
        static if(is(typeof({ mixin(enumMixinStr_SEED_KEY_LENGTH); }))) {
            mixin(enumMixinStr_SEED_KEY_LENGTH);
        }
    }




    static if(!is(typeof(SEED_BLOCK_SIZE))) {
        private enum enumMixinStr_SEED_BLOCK_SIZE = `enum SEED_BLOCK_SIZE = 16;`;
        static if(is(typeof({ mixin(enumMixinStr_SEED_BLOCK_SIZE); }))) {
            mixin(enumMixinStr_SEED_BLOCK_SIZE);
        }
    }






    static if(!is(typeof(RIPEMD160_DIGEST_LENGTH))) {
        private enum enumMixinStr_RIPEMD160_DIGEST_LENGTH = `enum RIPEMD160_DIGEST_LENGTH = 20;`;
        static if(is(typeof({ mixin(enumMixinStr_RIPEMD160_DIGEST_LENGTH); }))) {
            mixin(enumMixinStr_RIPEMD160_DIGEST_LENGTH);
        }
    }




    static if(!is(typeof(RIPEMD160_LBLOCK))) {
        private enum enumMixinStr_RIPEMD160_LBLOCK = `enum RIPEMD160_LBLOCK = ( RIPEMD160_CBLOCK / 4 );`;
        static if(is(typeof({ mixin(enumMixinStr_RIPEMD160_LBLOCK); }))) {
            mixin(enumMixinStr_RIPEMD160_LBLOCK);
        }
    }




    static if(!is(typeof(RIPEMD160_CBLOCK))) {
        private enum enumMixinStr_RIPEMD160_CBLOCK = `enum RIPEMD160_CBLOCK = 64;`;
        static if(is(typeof({ mixin(enumMixinStr_RIPEMD160_CBLOCK); }))) {
            mixin(enumMixinStr_RIPEMD160_CBLOCK);
        }
    }




    static if(!is(typeof(RIPEMD160_LONG))) {
        private enum enumMixinStr_RIPEMD160_LONG = `enum RIPEMD160_LONG = unsigned int;`;
        static if(is(typeof({ mixin(enumMixinStr_RIPEMD160_LONG); }))) {
            mixin(enumMixinStr_RIPEMD160_LONG);
        }
    }
    static if(!is(typeof(SSL_EXT_TLS_ONLY))) {
        private enum enumMixinStr_SSL_EXT_TLS_ONLY = `enum SSL_EXT_TLS_ONLY = 0x0001;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_EXT_TLS_ONLY); }))) {
            mixin(enumMixinStr_SSL_EXT_TLS_ONLY);
        }
    }




    static if(!is(typeof(SSL_EXT_DTLS_ONLY))) {
        private enum enumMixinStr_SSL_EXT_DTLS_ONLY = `enum SSL_EXT_DTLS_ONLY = 0x0002;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_EXT_DTLS_ONLY); }))) {
            mixin(enumMixinStr_SSL_EXT_DTLS_ONLY);
        }
    }




    static if(!is(typeof(SSL_EXT_TLS_IMPLEMENTATION_ONLY))) {
        private enum enumMixinStr_SSL_EXT_TLS_IMPLEMENTATION_ONLY = `enum SSL_EXT_TLS_IMPLEMENTATION_ONLY = 0x0004;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_EXT_TLS_IMPLEMENTATION_ONLY); }))) {
            mixin(enumMixinStr_SSL_EXT_TLS_IMPLEMENTATION_ONLY);
        }
    }




    static if(!is(typeof(SSL_EXT_SSL3_ALLOWED))) {
        private enum enumMixinStr_SSL_EXT_SSL3_ALLOWED = `enum SSL_EXT_SSL3_ALLOWED = 0x0008;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_EXT_SSL3_ALLOWED); }))) {
            mixin(enumMixinStr_SSL_EXT_SSL3_ALLOWED);
        }
    }




    static if(!is(typeof(SSL_EXT_TLS1_2_AND_BELOW_ONLY))) {
        private enum enumMixinStr_SSL_EXT_TLS1_2_AND_BELOW_ONLY = `enum SSL_EXT_TLS1_2_AND_BELOW_ONLY = 0x0010;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_EXT_TLS1_2_AND_BELOW_ONLY); }))) {
            mixin(enumMixinStr_SSL_EXT_TLS1_2_AND_BELOW_ONLY);
        }
    }




    static if(!is(typeof(SSL_EXT_TLS1_3_ONLY))) {
        private enum enumMixinStr_SSL_EXT_TLS1_3_ONLY = `enum SSL_EXT_TLS1_3_ONLY = 0x0020;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_EXT_TLS1_3_ONLY); }))) {
            mixin(enumMixinStr_SSL_EXT_TLS1_3_ONLY);
        }
    }




    static if(!is(typeof(SSL_EXT_IGNORE_ON_RESUMPTION))) {
        private enum enumMixinStr_SSL_EXT_IGNORE_ON_RESUMPTION = `enum SSL_EXT_IGNORE_ON_RESUMPTION = 0x0040;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_EXT_IGNORE_ON_RESUMPTION); }))) {
            mixin(enumMixinStr_SSL_EXT_IGNORE_ON_RESUMPTION);
        }
    }




    static if(!is(typeof(SSL_EXT_CLIENT_HELLO))) {
        private enum enumMixinStr_SSL_EXT_CLIENT_HELLO = `enum SSL_EXT_CLIENT_HELLO = 0x0080;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_EXT_CLIENT_HELLO); }))) {
            mixin(enumMixinStr_SSL_EXT_CLIENT_HELLO);
        }
    }




    static if(!is(typeof(SSL_EXT_TLS1_2_SERVER_HELLO))) {
        private enum enumMixinStr_SSL_EXT_TLS1_2_SERVER_HELLO = `enum SSL_EXT_TLS1_2_SERVER_HELLO = 0x0100;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_EXT_TLS1_2_SERVER_HELLO); }))) {
            mixin(enumMixinStr_SSL_EXT_TLS1_2_SERVER_HELLO);
        }
    }




    static if(!is(typeof(SSL_EXT_TLS1_3_SERVER_HELLO))) {
        private enum enumMixinStr_SSL_EXT_TLS1_3_SERVER_HELLO = `enum SSL_EXT_TLS1_3_SERVER_HELLO = 0x0200;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_EXT_TLS1_3_SERVER_HELLO); }))) {
            mixin(enumMixinStr_SSL_EXT_TLS1_3_SERVER_HELLO);
        }
    }




    static if(!is(typeof(SSL_EXT_TLS1_3_ENCRYPTED_EXTENSIONS))) {
        private enum enumMixinStr_SSL_EXT_TLS1_3_ENCRYPTED_EXTENSIONS = `enum SSL_EXT_TLS1_3_ENCRYPTED_EXTENSIONS = 0x0400;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_EXT_TLS1_3_ENCRYPTED_EXTENSIONS); }))) {
            mixin(enumMixinStr_SSL_EXT_TLS1_3_ENCRYPTED_EXTENSIONS);
        }
    }




    static if(!is(typeof(SSL_EXT_TLS1_3_HELLO_RETRY_REQUEST))) {
        private enum enumMixinStr_SSL_EXT_TLS1_3_HELLO_RETRY_REQUEST = `enum SSL_EXT_TLS1_3_HELLO_RETRY_REQUEST = 0x0800;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_EXT_TLS1_3_HELLO_RETRY_REQUEST); }))) {
            mixin(enumMixinStr_SSL_EXT_TLS1_3_HELLO_RETRY_REQUEST);
        }
    }




    static if(!is(typeof(SSL_EXT_TLS1_3_CERTIFICATE))) {
        private enum enumMixinStr_SSL_EXT_TLS1_3_CERTIFICATE = `enum SSL_EXT_TLS1_3_CERTIFICATE = 0x1000;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_EXT_TLS1_3_CERTIFICATE); }))) {
            mixin(enumMixinStr_SSL_EXT_TLS1_3_CERTIFICATE);
        }
    }




    static if(!is(typeof(SSL_EXT_TLS1_3_NEW_SESSION_TICKET))) {
        private enum enumMixinStr_SSL_EXT_TLS1_3_NEW_SESSION_TICKET = `enum SSL_EXT_TLS1_3_NEW_SESSION_TICKET = 0x2000;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_EXT_TLS1_3_NEW_SESSION_TICKET); }))) {
            mixin(enumMixinStr_SSL_EXT_TLS1_3_NEW_SESSION_TICKET);
        }
    }




    static if(!is(typeof(SSL_EXT_TLS1_3_CERTIFICATE_REQUEST))) {
        private enum enumMixinStr_SSL_EXT_TLS1_3_CERTIFICATE_REQUEST = `enum SSL_EXT_TLS1_3_CERTIFICATE_REQUEST = 0x4000;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_EXT_TLS1_3_CERTIFICATE_REQUEST); }))) {
            mixin(enumMixinStr_SSL_EXT_TLS1_3_CERTIFICATE_REQUEST);
        }
    }




    static if(!is(typeof(RC2_KEY_LENGTH))) {
        private enum enumMixinStr_RC2_KEY_LENGTH = `enum RC2_KEY_LENGTH = 16;`;
        static if(is(typeof({ mixin(enumMixinStr_RC2_KEY_LENGTH); }))) {
            mixin(enumMixinStr_RC2_KEY_LENGTH);
        }
    }




    static if(!is(typeof(RC2_BLOCK))) {
        private enum enumMixinStr_RC2_BLOCK = `enum RC2_BLOCK = 8;`;
        static if(is(typeof({ mixin(enumMixinStr_RC2_BLOCK); }))) {
            mixin(enumMixinStr_RC2_BLOCK);
        }
    }




    static if(!is(typeof(RC2_DECRYPT))) {
        private enum enumMixinStr_RC2_DECRYPT = `enum RC2_DECRYPT = 0;`;
        static if(is(typeof({ mixin(enumMixinStr_RC2_DECRYPT); }))) {
            mixin(enumMixinStr_RC2_DECRYPT);
        }
    }




    static if(!is(typeof(RC2_ENCRYPT))) {
        private enum enumMixinStr_RC2_ENCRYPT = `enum RC2_ENCRYPT = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_RC2_ENCRYPT); }))) {
            mixin(enumMixinStr_RC2_ENCRYPT);
        }
    }






    static if(!is(typeof(PKCS12_R_UNSUPPORTED_PKCS12_MODE))) {
        private enum enumMixinStr_PKCS12_R_UNSUPPORTED_PKCS12_MODE = `enum PKCS12_R_UNSUPPORTED_PKCS12_MODE = 119;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS12_R_UNSUPPORTED_PKCS12_MODE); }))) {
            mixin(enumMixinStr_PKCS12_R_UNSUPPORTED_PKCS12_MODE);
        }
    }




    static if(!is(typeof(PKCS12_R_UNKNOWN_DIGEST_ALGORITHM))) {
        private enum enumMixinStr_PKCS12_R_UNKNOWN_DIGEST_ALGORITHM = `enum PKCS12_R_UNKNOWN_DIGEST_ALGORITHM = 118;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS12_R_UNKNOWN_DIGEST_ALGORITHM); }))) {
            mixin(enumMixinStr_PKCS12_R_UNKNOWN_DIGEST_ALGORITHM);
        }
    }




    static if(!is(typeof(SSL_OP_LEGACY_SERVER_CONNECT))) {
        private enum enumMixinStr_SSL_OP_LEGACY_SERVER_CONNECT = `enum SSL_OP_LEGACY_SERVER_CONNECT = 0x00000004U;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_OP_LEGACY_SERVER_CONNECT); }))) {
            mixin(enumMixinStr_SSL_OP_LEGACY_SERVER_CONNECT);
        }
    }




    static if(!is(typeof(SSL_OP_TLSEXT_PADDING))) {
        private enum enumMixinStr_SSL_OP_TLSEXT_PADDING = `enum SSL_OP_TLSEXT_PADDING = 0x00000010U;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_OP_TLSEXT_PADDING); }))) {
            mixin(enumMixinStr_SSL_OP_TLSEXT_PADDING);
        }
    }




    static if(!is(typeof(SSL_OP_SAFARI_ECDHE_ECDSA_BUG))) {
        private enum enumMixinStr_SSL_OP_SAFARI_ECDHE_ECDSA_BUG = `enum SSL_OP_SAFARI_ECDHE_ECDSA_BUG = 0x00000040U;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_OP_SAFARI_ECDHE_ECDSA_BUG); }))) {
            mixin(enumMixinStr_SSL_OP_SAFARI_ECDHE_ECDSA_BUG);
        }
    }




    static if(!is(typeof(SSL_OP_ALLOW_NO_DHE_KEX))) {
        private enum enumMixinStr_SSL_OP_ALLOW_NO_DHE_KEX = `enum SSL_OP_ALLOW_NO_DHE_KEX = 0x00000400U;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_OP_ALLOW_NO_DHE_KEX); }))) {
            mixin(enumMixinStr_SSL_OP_ALLOW_NO_DHE_KEX);
        }
    }




    static if(!is(typeof(SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS))) {
        private enum enumMixinStr_SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS = `enum SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS = 0x00000800U;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS); }))) {
            mixin(enumMixinStr_SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS);
        }
    }




    static if(!is(typeof(SSL_OP_NO_QUERY_MTU))) {
        private enum enumMixinStr_SSL_OP_NO_QUERY_MTU = `enum SSL_OP_NO_QUERY_MTU = 0x00001000U;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_OP_NO_QUERY_MTU); }))) {
            mixin(enumMixinStr_SSL_OP_NO_QUERY_MTU);
        }
    }




    static if(!is(typeof(SSL_OP_COOKIE_EXCHANGE))) {
        private enum enumMixinStr_SSL_OP_COOKIE_EXCHANGE = `enum SSL_OP_COOKIE_EXCHANGE = 0x00002000U;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_OP_COOKIE_EXCHANGE); }))) {
            mixin(enumMixinStr_SSL_OP_COOKIE_EXCHANGE);
        }
    }




    static if(!is(typeof(SSL_OP_NO_TICKET))) {
        private enum enumMixinStr_SSL_OP_NO_TICKET = `enum SSL_OP_NO_TICKET = 0x00004000U;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_OP_NO_TICKET); }))) {
            mixin(enumMixinStr_SSL_OP_NO_TICKET);
        }
    }




    static if(!is(typeof(SSL_OP_CISCO_ANYCONNECT))) {
        private enum enumMixinStr_SSL_OP_CISCO_ANYCONNECT = `enum SSL_OP_CISCO_ANYCONNECT = 0x00008000U;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_OP_CISCO_ANYCONNECT); }))) {
            mixin(enumMixinStr_SSL_OP_CISCO_ANYCONNECT);
        }
    }




    static if(!is(typeof(SSL_OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION))) {
        private enum enumMixinStr_SSL_OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION = `enum SSL_OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION = 0x00010000U;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION); }))) {
            mixin(enumMixinStr_SSL_OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION);
        }
    }




    static if(!is(typeof(SSL_OP_NO_COMPRESSION))) {
        private enum enumMixinStr_SSL_OP_NO_COMPRESSION = `enum SSL_OP_NO_COMPRESSION = 0x00020000U;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_OP_NO_COMPRESSION); }))) {
            mixin(enumMixinStr_SSL_OP_NO_COMPRESSION);
        }
    }




    static if(!is(typeof(SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION))) {
        private enum enumMixinStr_SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION = `enum SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION = 0x00040000U;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION); }))) {
            mixin(enumMixinStr_SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION);
        }
    }




    static if(!is(typeof(SSL_OP_NO_ENCRYPT_THEN_MAC))) {
        private enum enumMixinStr_SSL_OP_NO_ENCRYPT_THEN_MAC = `enum SSL_OP_NO_ENCRYPT_THEN_MAC = 0x00080000U;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_OP_NO_ENCRYPT_THEN_MAC); }))) {
            mixin(enumMixinStr_SSL_OP_NO_ENCRYPT_THEN_MAC);
        }
    }




    static if(!is(typeof(SSL_OP_ENABLE_MIDDLEBOX_COMPAT))) {
        private enum enumMixinStr_SSL_OP_ENABLE_MIDDLEBOX_COMPAT = `enum SSL_OP_ENABLE_MIDDLEBOX_COMPAT = 0x00100000U;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_OP_ENABLE_MIDDLEBOX_COMPAT); }))) {
            mixin(enumMixinStr_SSL_OP_ENABLE_MIDDLEBOX_COMPAT);
        }
    }




    static if(!is(typeof(SSL_OP_PRIORITIZE_CHACHA))) {
        private enum enumMixinStr_SSL_OP_PRIORITIZE_CHACHA = `enum SSL_OP_PRIORITIZE_CHACHA = 0x00200000U;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_OP_PRIORITIZE_CHACHA); }))) {
            mixin(enumMixinStr_SSL_OP_PRIORITIZE_CHACHA);
        }
    }




    static if(!is(typeof(SSL_OP_CIPHER_SERVER_PREFERENCE))) {
        private enum enumMixinStr_SSL_OP_CIPHER_SERVER_PREFERENCE = `enum SSL_OP_CIPHER_SERVER_PREFERENCE = 0x00400000U;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_OP_CIPHER_SERVER_PREFERENCE); }))) {
            mixin(enumMixinStr_SSL_OP_CIPHER_SERVER_PREFERENCE);
        }
    }




    static if(!is(typeof(SSL_OP_TLS_ROLLBACK_BUG))) {
        private enum enumMixinStr_SSL_OP_TLS_ROLLBACK_BUG = `enum SSL_OP_TLS_ROLLBACK_BUG = 0x00800000U;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_OP_TLS_ROLLBACK_BUG); }))) {
            mixin(enumMixinStr_SSL_OP_TLS_ROLLBACK_BUG);
        }
    }




    static if(!is(typeof(SSL_OP_NO_ANTI_REPLAY))) {
        private enum enumMixinStr_SSL_OP_NO_ANTI_REPLAY = `enum SSL_OP_NO_ANTI_REPLAY = 0x01000000U;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_OP_NO_ANTI_REPLAY); }))) {
            mixin(enumMixinStr_SSL_OP_NO_ANTI_REPLAY);
        }
    }




    static if(!is(typeof(SSL_OP_NO_SSLv3))) {
        private enum enumMixinStr_SSL_OP_NO_SSLv3 = `enum SSL_OP_NO_SSLv3 = 0x02000000U;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_OP_NO_SSLv3); }))) {
            mixin(enumMixinStr_SSL_OP_NO_SSLv3);
        }
    }




    static if(!is(typeof(SSL_OP_NO_TLSv1))) {
        private enum enumMixinStr_SSL_OP_NO_TLSv1 = `enum SSL_OP_NO_TLSv1 = 0x04000000U;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_OP_NO_TLSv1); }))) {
            mixin(enumMixinStr_SSL_OP_NO_TLSv1);
        }
    }




    static if(!is(typeof(SSL_OP_NO_TLSv1_2))) {
        private enum enumMixinStr_SSL_OP_NO_TLSv1_2 = `enum SSL_OP_NO_TLSv1_2 = 0x08000000U;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_OP_NO_TLSv1_2); }))) {
            mixin(enumMixinStr_SSL_OP_NO_TLSv1_2);
        }
    }




    static if(!is(typeof(SSL_OP_NO_TLSv1_1))) {
        private enum enumMixinStr_SSL_OP_NO_TLSv1_1 = `enum SSL_OP_NO_TLSv1_1 = 0x10000000U;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_OP_NO_TLSv1_1); }))) {
            mixin(enumMixinStr_SSL_OP_NO_TLSv1_1);
        }
    }




    static if(!is(typeof(SSL_OP_NO_TLSv1_3))) {
        private enum enumMixinStr_SSL_OP_NO_TLSv1_3 = `enum SSL_OP_NO_TLSv1_3 = 0x20000000U;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_OP_NO_TLSv1_3); }))) {
            mixin(enumMixinStr_SSL_OP_NO_TLSv1_3);
        }
    }




    static if(!is(typeof(SSL_OP_NO_DTLSv1))) {
        private enum enumMixinStr_SSL_OP_NO_DTLSv1 = `enum SSL_OP_NO_DTLSv1 = 0x04000000U;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_OP_NO_DTLSv1); }))) {
            mixin(enumMixinStr_SSL_OP_NO_DTLSv1);
        }
    }




    static if(!is(typeof(SSL_OP_NO_DTLSv1_2))) {
        private enum enumMixinStr_SSL_OP_NO_DTLSv1_2 = `enum SSL_OP_NO_DTLSv1_2 = 0x08000000U;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_OP_NO_DTLSv1_2); }))) {
            mixin(enumMixinStr_SSL_OP_NO_DTLSv1_2);
        }
    }




    static if(!is(typeof(SSL_OP_NO_SSL_MASK))) {
        private enum enumMixinStr_SSL_OP_NO_SSL_MASK = `enum SSL_OP_NO_SSL_MASK = ( 0x02000000U | 0x04000000U | 0x10000000U | 0x08000000U | 0x20000000U );`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_OP_NO_SSL_MASK); }))) {
            mixin(enumMixinStr_SSL_OP_NO_SSL_MASK);
        }
    }




    static if(!is(typeof(SSL_OP_NO_DTLS_MASK))) {
        private enum enumMixinStr_SSL_OP_NO_DTLS_MASK = `enum SSL_OP_NO_DTLS_MASK = ( 0x04000000U | 0x08000000U );`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_OP_NO_DTLS_MASK); }))) {
            mixin(enumMixinStr_SSL_OP_NO_DTLS_MASK);
        }
    }




    static if(!is(typeof(SSL_OP_NO_RENEGOTIATION))) {
        private enum enumMixinStr_SSL_OP_NO_RENEGOTIATION = `enum SSL_OP_NO_RENEGOTIATION = 0x40000000U;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_OP_NO_RENEGOTIATION); }))) {
            mixin(enumMixinStr_SSL_OP_NO_RENEGOTIATION);
        }
    }




    static if(!is(typeof(SSL_OP_CRYPTOPRO_TLSEXT_BUG))) {
        private enum enumMixinStr_SSL_OP_CRYPTOPRO_TLSEXT_BUG = `enum SSL_OP_CRYPTOPRO_TLSEXT_BUG = 0x80000000U;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_OP_CRYPTOPRO_TLSEXT_BUG); }))) {
            mixin(enumMixinStr_SSL_OP_CRYPTOPRO_TLSEXT_BUG);
        }
    }




    static if(!is(typeof(SSL_OP_ALL))) {
        private enum enumMixinStr_SSL_OP_ALL = `enum SSL_OP_ALL = ( 0x80000000U | 0x00000800U | 0x00000004U | 0x00000010U | 0x00000040U );`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_OP_ALL); }))) {
            mixin(enumMixinStr_SSL_OP_ALL);
        }
    }




    static if(!is(typeof(SSL_OP_MICROSOFT_SESS_ID_BUG))) {
        private enum enumMixinStr_SSL_OP_MICROSOFT_SESS_ID_BUG = `enum SSL_OP_MICROSOFT_SESS_ID_BUG = 0x0;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_OP_MICROSOFT_SESS_ID_BUG); }))) {
            mixin(enumMixinStr_SSL_OP_MICROSOFT_SESS_ID_BUG);
        }
    }




    static if(!is(typeof(SSL_OP_NETSCAPE_CHALLENGE_BUG))) {
        private enum enumMixinStr_SSL_OP_NETSCAPE_CHALLENGE_BUG = `enum SSL_OP_NETSCAPE_CHALLENGE_BUG = 0x0;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_OP_NETSCAPE_CHALLENGE_BUG); }))) {
            mixin(enumMixinStr_SSL_OP_NETSCAPE_CHALLENGE_BUG);
        }
    }




    static if(!is(typeof(SSL_OP_NETSCAPE_REUSE_CIPHER_CHANGE_BUG))) {
        private enum enumMixinStr_SSL_OP_NETSCAPE_REUSE_CIPHER_CHANGE_BUG = `enum SSL_OP_NETSCAPE_REUSE_CIPHER_CHANGE_BUG = 0x0;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_OP_NETSCAPE_REUSE_CIPHER_CHANGE_BUG); }))) {
            mixin(enumMixinStr_SSL_OP_NETSCAPE_REUSE_CIPHER_CHANGE_BUG);
        }
    }




    static if(!is(typeof(SSL_OP_SSLREF2_REUSE_CERT_TYPE_BUG))) {
        private enum enumMixinStr_SSL_OP_SSLREF2_REUSE_CERT_TYPE_BUG = `enum SSL_OP_SSLREF2_REUSE_CERT_TYPE_BUG = 0x0;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_OP_SSLREF2_REUSE_CERT_TYPE_BUG); }))) {
            mixin(enumMixinStr_SSL_OP_SSLREF2_REUSE_CERT_TYPE_BUG);
        }
    }




    static if(!is(typeof(SSL_OP_MICROSOFT_BIG_SSLV3_BUFFER))) {
        private enum enumMixinStr_SSL_OP_MICROSOFT_BIG_SSLV3_BUFFER = `enum SSL_OP_MICROSOFT_BIG_SSLV3_BUFFER = 0x0;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_OP_MICROSOFT_BIG_SSLV3_BUFFER); }))) {
            mixin(enumMixinStr_SSL_OP_MICROSOFT_BIG_SSLV3_BUFFER);
        }
    }




    static if(!is(typeof(SSL_OP_MSIE_SSLV2_RSA_PADDING))) {
        private enum enumMixinStr_SSL_OP_MSIE_SSLV2_RSA_PADDING = `enum SSL_OP_MSIE_SSLV2_RSA_PADDING = 0x0;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_OP_MSIE_SSLV2_RSA_PADDING); }))) {
            mixin(enumMixinStr_SSL_OP_MSIE_SSLV2_RSA_PADDING);
        }
    }




    static if(!is(typeof(SSL_OP_SSLEAY_080_CLIENT_DH_BUG))) {
        private enum enumMixinStr_SSL_OP_SSLEAY_080_CLIENT_DH_BUG = `enum SSL_OP_SSLEAY_080_CLIENT_DH_BUG = 0x0;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_OP_SSLEAY_080_CLIENT_DH_BUG); }))) {
            mixin(enumMixinStr_SSL_OP_SSLEAY_080_CLIENT_DH_BUG);
        }
    }




    static if(!is(typeof(SSL_OP_TLS_D5_BUG))) {
        private enum enumMixinStr_SSL_OP_TLS_D5_BUG = `enum SSL_OP_TLS_D5_BUG = 0x0;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_OP_TLS_D5_BUG); }))) {
            mixin(enumMixinStr_SSL_OP_TLS_D5_BUG);
        }
    }




    static if(!is(typeof(SSL_OP_TLS_BLOCK_PADDING_BUG))) {
        private enum enumMixinStr_SSL_OP_TLS_BLOCK_PADDING_BUG = `enum SSL_OP_TLS_BLOCK_PADDING_BUG = 0x0;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_OP_TLS_BLOCK_PADDING_BUG); }))) {
            mixin(enumMixinStr_SSL_OP_TLS_BLOCK_PADDING_BUG);
        }
    }




    static if(!is(typeof(SSL_OP_SINGLE_ECDH_USE))) {
        private enum enumMixinStr_SSL_OP_SINGLE_ECDH_USE = `enum SSL_OP_SINGLE_ECDH_USE = 0x0;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_OP_SINGLE_ECDH_USE); }))) {
            mixin(enumMixinStr_SSL_OP_SINGLE_ECDH_USE);
        }
    }




    static if(!is(typeof(SSL_OP_SINGLE_DH_USE))) {
        private enum enumMixinStr_SSL_OP_SINGLE_DH_USE = `enum SSL_OP_SINGLE_DH_USE = 0x0;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_OP_SINGLE_DH_USE); }))) {
            mixin(enumMixinStr_SSL_OP_SINGLE_DH_USE);
        }
    }




    static if(!is(typeof(SSL_OP_EPHEMERAL_RSA))) {
        private enum enumMixinStr_SSL_OP_EPHEMERAL_RSA = `enum SSL_OP_EPHEMERAL_RSA = 0x0;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_OP_EPHEMERAL_RSA); }))) {
            mixin(enumMixinStr_SSL_OP_EPHEMERAL_RSA);
        }
    }




    static if(!is(typeof(SSL_OP_NO_SSLv2))) {
        private enum enumMixinStr_SSL_OP_NO_SSLv2 = `enum SSL_OP_NO_SSLv2 = 0x0;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_OP_NO_SSLv2); }))) {
            mixin(enumMixinStr_SSL_OP_NO_SSLv2);
        }
    }




    static if(!is(typeof(SSL_OP_PKCS1_CHECK_1))) {
        private enum enumMixinStr_SSL_OP_PKCS1_CHECK_1 = `enum SSL_OP_PKCS1_CHECK_1 = 0x0;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_OP_PKCS1_CHECK_1); }))) {
            mixin(enumMixinStr_SSL_OP_PKCS1_CHECK_1);
        }
    }




    static if(!is(typeof(SSL_OP_PKCS1_CHECK_2))) {
        private enum enumMixinStr_SSL_OP_PKCS1_CHECK_2 = `enum SSL_OP_PKCS1_CHECK_2 = 0x0;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_OP_PKCS1_CHECK_2); }))) {
            mixin(enumMixinStr_SSL_OP_PKCS1_CHECK_2);
        }
    }




    static if(!is(typeof(SSL_OP_NETSCAPE_CA_DN_BUG))) {
        private enum enumMixinStr_SSL_OP_NETSCAPE_CA_DN_BUG = `enum SSL_OP_NETSCAPE_CA_DN_BUG = 0x0;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_OP_NETSCAPE_CA_DN_BUG); }))) {
            mixin(enumMixinStr_SSL_OP_NETSCAPE_CA_DN_BUG);
        }
    }




    static if(!is(typeof(SSL_OP_NETSCAPE_DEMO_CIPHER_CHANGE_BUG))) {
        private enum enumMixinStr_SSL_OP_NETSCAPE_DEMO_CIPHER_CHANGE_BUG = `enum SSL_OP_NETSCAPE_DEMO_CIPHER_CHANGE_BUG = 0x0;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_OP_NETSCAPE_DEMO_CIPHER_CHANGE_BUG); }))) {
            mixin(enumMixinStr_SSL_OP_NETSCAPE_DEMO_CIPHER_CHANGE_BUG);
        }
    }




    static if(!is(typeof(SSL_MODE_ENABLE_PARTIAL_WRITE))) {
        private enum enumMixinStr_SSL_MODE_ENABLE_PARTIAL_WRITE = `enum SSL_MODE_ENABLE_PARTIAL_WRITE = 0x00000001U;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_MODE_ENABLE_PARTIAL_WRITE); }))) {
            mixin(enumMixinStr_SSL_MODE_ENABLE_PARTIAL_WRITE);
        }
    }




    static if(!is(typeof(SSL_MODE_ACCEPT_MOVING_WRITE_BUFFER))) {
        private enum enumMixinStr_SSL_MODE_ACCEPT_MOVING_WRITE_BUFFER = `enum SSL_MODE_ACCEPT_MOVING_WRITE_BUFFER = 0x00000002U;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_MODE_ACCEPT_MOVING_WRITE_BUFFER); }))) {
            mixin(enumMixinStr_SSL_MODE_ACCEPT_MOVING_WRITE_BUFFER);
        }
    }




    static if(!is(typeof(SSL_MODE_AUTO_RETRY))) {
        private enum enumMixinStr_SSL_MODE_AUTO_RETRY = `enum SSL_MODE_AUTO_RETRY = 0x00000004U;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_MODE_AUTO_RETRY); }))) {
            mixin(enumMixinStr_SSL_MODE_AUTO_RETRY);
        }
    }




    static if(!is(typeof(SSL_MODE_NO_AUTO_CHAIN))) {
        private enum enumMixinStr_SSL_MODE_NO_AUTO_CHAIN = `enum SSL_MODE_NO_AUTO_CHAIN = 0x00000008U;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_MODE_NO_AUTO_CHAIN); }))) {
            mixin(enumMixinStr_SSL_MODE_NO_AUTO_CHAIN);
        }
    }




    static if(!is(typeof(SSL_MODE_RELEASE_BUFFERS))) {
        private enum enumMixinStr_SSL_MODE_RELEASE_BUFFERS = `enum SSL_MODE_RELEASE_BUFFERS = 0x00000010U;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_MODE_RELEASE_BUFFERS); }))) {
            mixin(enumMixinStr_SSL_MODE_RELEASE_BUFFERS);
        }
    }




    static if(!is(typeof(SSL_MODE_SEND_CLIENTHELLO_TIME))) {
        private enum enumMixinStr_SSL_MODE_SEND_CLIENTHELLO_TIME = `enum SSL_MODE_SEND_CLIENTHELLO_TIME = 0x00000020U;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_MODE_SEND_CLIENTHELLO_TIME); }))) {
            mixin(enumMixinStr_SSL_MODE_SEND_CLIENTHELLO_TIME);
        }
    }




    static if(!is(typeof(SSL_MODE_SEND_SERVERHELLO_TIME))) {
        private enum enumMixinStr_SSL_MODE_SEND_SERVERHELLO_TIME = `enum SSL_MODE_SEND_SERVERHELLO_TIME = 0x00000040U;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_MODE_SEND_SERVERHELLO_TIME); }))) {
            mixin(enumMixinStr_SSL_MODE_SEND_SERVERHELLO_TIME);
        }
    }




    static if(!is(typeof(SSL_MODE_SEND_FALLBACK_SCSV))) {
        private enum enumMixinStr_SSL_MODE_SEND_FALLBACK_SCSV = `enum SSL_MODE_SEND_FALLBACK_SCSV = 0x00000080U;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_MODE_SEND_FALLBACK_SCSV); }))) {
            mixin(enumMixinStr_SSL_MODE_SEND_FALLBACK_SCSV);
        }
    }




    static if(!is(typeof(SSL_MODE_ASYNC))) {
        private enum enumMixinStr_SSL_MODE_ASYNC = `enum SSL_MODE_ASYNC = 0x00000100U;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_MODE_ASYNC); }))) {
            mixin(enumMixinStr_SSL_MODE_ASYNC);
        }
    }




    static if(!is(typeof(SSL_MODE_DTLS_SCTP_LABEL_LENGTH_BUG))) {
        private enum enumMixinStr_SSL_MODE_DTLS_SCTP_LABEL_LENGTH_BUG = `enum SSL_MODE_DTLS_SCTP_LABEL_LENGTH_BUG = 0x00000400U;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_MODE_DTLS_SCTP_LABEL_LENGTH_BUG); }))) {
            mixin(enumMixinStr_SSL_MODE_DTLS_SCTP_LABEL_LENGTH_BUG);
        }
    }




    static if(!is(typeof(SSL_CERT_FLAG_TLS_STRICT))) {
        private enum enumMixinStr_SSL_CERT_FLAG_TLS_STRICT = `enum SSL_CERT_FLAG_TLS_STRICT = 0x00000001U;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CERT_FLAG_TLS_STRICT); }))) {
            mixin(enumMixinStr_SSL_CERT_FLAG_TLS_STRICT);
        }
    }




    static if(!is(typeof(SSL_CERT_FLAG_SUITEB_128_LOS_ONLY))) {
        private enum enumMixinStr_SSL_CERT_FLAG_SUITEB_128_LOS_ONLY = `enum SSL_CERT_FLAG_SUITEB_128_LOS_ONLY = 0x10000;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CERT_FLAG_SUITEB_128_LOS_ONLY); }))) {
            mixin(enumMixinStr_SSL_CERT_FLAG_SUITEB_128_LOS_ONLY);
        }
    }




    static if(!is(typeof(SSL_CERT_FLAG_SUITEB_192_LOS))) {
        private enum enumMixinStr_SSL_CERT_FLAG_SUITEB_192_LOS = `enum SSL_CERT_FLAG_SUITEB_192_LOS = 0x20000;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CERT_FLAG_SUITEB_192_LOS); }))) {
            mixin(enumMixinStr_SSL_CERT_FLAG_SUITEB_192_LOS);
        }
    }




    static if(!is(typeof(SSL_CERT_FLAG_SUITEB_128_LOS))) {
        private enum enumMixinStr_SSL_CERT_FLAG_SUITEB_128_LOS = `enum SSL_CERT_FLAG_SUITEB_128_LOS = 0x30000;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CERT_FLAG_SUITEB_128_LOS); }))) {
            mixin(enumMixinStr_SSL_CERT_FLAG_SUITEB_128_LOS);
        }
    }




    static if(!is(typeof(SSL_CERT_FLAG_BROKEN_PROTOCOL))) {
        private enum enumMixinStr_SSL_CERT_FLAG_BROKEN_PROTOCOL = `enum SSL_CERT_FLAG_BROKEN_PROTOCOL = 0x10000000;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CERT_FLAG_BROKEN_PROTOCOL); }))) {
            mixin(enumMixinStr_SSL_CERT_FLAG_BROKEN_PROTOCOL);
        }
    }




    static if(!is(typeof(SSL_BUILD_CHAIN_FLAG_UNTRUSTED))) {
        private enum enumMixinStr_SSL_BUILD_CHAIN_FLAG_UNTRUSTED = `enum SSL_BUILD_CHAIN_FLAG_UNTRUSTED = 0x1;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_BUILD_CHAIN_FLAG_UNTRUSTED); }))) {
            mixin(enumMixinStr_SSL_BUILD_CHAIN_FLAG_UNTRUSTED);
        }
    }




    static if(!is(typeof(SSL_BUILD_CHAIN_FLAG_NO_ROOT))) {
        private enum enumMixinStr_SSL_BUILD_CHAIN_FLAG_NO_ROOT = `enum SSL_BUILD_CHAIN_FLAG_NO_ROOT = 0x2;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_BUILD_CHAIN_FLAG_NO_ROOT); }))) {
            mixin(enumMixinStr_SSL_BUILD_CHAIN_FLAG_NO_ROOT);
        }
    }




    static if(!is(typeof(SSL_BUILD_CHAIN_FLAG_CHECK))) {
        private enum enumMixinStr_SSL_BUILD_CHAIN_FLAG_CHECK = `enum SSL_BUILD_CHAIN_FLAG_CHECK = 0x4;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_BUILD_CHAIN_FLAG_CHECK); }))) {
            mixin(enumMixinStr_SSL_BUILD_CHAIN_FLAG_CHECK);
        }
    }




    static if(!is(typeof(SSL_BUILD_CHAIN_FLAG_IGNORE_ERROR))) {
        private enum enumMixinStr_SSL_BUILD_CHAIN_FLAG_IGNORE_ERROR = `enum SSL_BUILD_CHAIN_FLAG_IGNORE_ERROR = 0x8;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_BUILD_CHAIN_FLAG_IGNORE_ERROR); }))) {
            mixin(enumMixinStr_SSL_BUILD_CHAIN_FLAG_IGNORE_ERROR);
        }
    }




    static if(!is(typeof(SSL_BUILD_CHAIN_FLAG_CLEAR_ERROR))) {
        private enum enumMixinStr_SSL_BUILD_CHAIN_FLAG_CLEAR_ERROR = `enum SSL_BUILD_CHAIN_FLAG_CLEAR_ERROR = 0x10;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_BUILD_CHAIN_FLAG_CLEAR_ERROR); }))) {
            mixin(enumMixinStr_SSL_BUILD_CHAIN_FLAG_CLEAR_ERROR);
        }
    }




    static if(!is(typeof(CERT_PKEY_VALID))) {
        private enum enumMixinStr_CERT_PKEY_VALID = `enum CERT_PKEY_VALID = 0x1;`;
        static if(is(typeof({ mixin(enumMixinStr_CERT_PKEY_VALID); }))) {
            mixin(enumMixinStr_CERT_PKEY_VALID);
        }
    }




    static if(!is(typeof(CERT_PKEY_SIGN))) {
        private enum enumMixinStr_CERT_PKEY_SIGN = `enum CERT_PKEY_SIGN = 0x2;`;
        static if(is(typeof({ mixin(enumMixinStr_CERT_PKEY_SIGN); }))) {
            mixin(enumMixinStr_CERT_PKEY_SIGN);
        }
    }




    static if(!is(typeof(CERT_PKEY_EE_SIGNATURE))) {
        private enum enumMixinStr_CERT_PKEY_EE_SIGNATURE = `enum CERT_PKEY_EE_SIGNATURE = 0x10;`;
        static if(is(typeof({ mixin(enumMixinStr_CERT_PKEY_EE_SIGNATURE); }))) {
            mixin(enumMixinStr_CERT_PKEY_EE_SIGNATURE);
        }
    }




    static if(!is(typeof(CERT_PKEY_CA_SIGNATURE))) {
        private enum enumMixinStr_CERT_PKEY_CA_SIGNATURE = `enum CERT_PKEY_CA_SIGNATURE = 0x20;`;
        static if(is(typeof({ mixin(enumMixinStr_CERT_PKEY_CA_SIGNATURE); }))) {
            mixin(enumMixinStr_CERT_PKEY_CA_SIGNATURE);
        }
    }




    static if(!is(typeof(CERT_PKEY_EE_PARAM))) {
        private enum enumMixinStr_CERT_PKEY_EE_PARAM = `enum CERT_PKEY_EE_PARAM = 0x40;`;
        static if(is(typeof({ mixin(enumMixinStr_CERT_PKEY_EE_PARAM); }))) {
            mixin(enumMixinStr_CERT_PKEY_EE_PARAM);
        }
    }




    static if(!is(typeof(CERT_PKEY_CA_PARAM))) {
        private enum enumMixinStr_CERT_PKEY_CA_PARAM = `enum CERT_PKEY_CA_PARAM = 0x80;`;
        static if(is(typeof({ mixin(enumMixinStr_CERT_PKEY_CA_PARAM); }))) {
            mixin(enumMixinStr_CERT_PKEY_CA_PARAM);
        }
    }




    static if(!is(typeof(CERT_PKEY_EXPLICIT_SIGN))) {
        private enum enumMixinStr_CERT_PKEY_EXPLICIT_SIGN = `enum CERT_PKEY_EXPLICIT_SIGN = 0x100;`;
        static if(is(typeof({ mixin(enumMixinStr_CERT_PKEY_EXPLICIT_SIGN); }))) {
            mixin(enumMixinStr_CERT_PKEY_EXPLICIT_SIGN);
        }
    }




    static if(!is(typeof(CERT_PKEY_ISSUER_NAME))) {
        private enum enumMixinStr_CERT_PKEY_ISSUER_NAME = `enum CERT_PKEY_ISSUER_NAME = 0x200;`;
        static if(is(typeof({ mixin(enumMixinStr_CERT_PKEY_ISSUER_NAME); }))) {
            mixin(enumMixinStr_CERT_PKEY_ISSUER_NAME);
        }
    }




    static if(!is(typeof(CERT_PKEY_CERT_TYPE))) {
        private enum enumMixinStr_CERT_PKEY_CERT_TYPE = `enum CERT_PKEY_CERT_TYPE = 0x400;`;
        static if(is(typeof({ mixin(enumMixinStr_CERT_PKEY_CERT_TYPE); }))) {
            mixin(enumMixinStr_CERT_PKEY_CERT_TYPE);
        }
    }




    static if(!is(typeof(CERT_PKEY_SUITEB))) {
        private enum enumMixinStr_CERT_PKEY_SUITEB = `enum CERT_PKEY_SUITEB = 0x800;`;
        static if(is(typeof({ mixin(enumMixinStr_CERT_PKEY_SUITEB); }))) {
            mixin(enumMixinStr_CERT_PKEY_SUITEB);
        }
    }




    static if(!is(typeof(SSL_CONF_FLAG_CMDLINE))) {
        private enum enumMixinStr_SSL_CONF_FLAG_CMDLINE = `enum SSL_CONF_FLAG_CMDLINE = 0x1;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CONF_FLAG_CMDLINE); }))) {
            mixin(enumMixinStr_SSL_CONF_FLAG_CMDLINE);
        }
    }




    static if(!is(typeof(SSL_CONF_FLAG_FILE))) {
        private enum enumMixinStr_SSL_CONF_FLAG_FILE = `enum SSL_CONF_FLAG_FILE = 0x2;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CONF_FLAG_FILE); }))) {
            mixin(enumMixinStr_SSL_CONF_FLAG_FILE);
        }
    }




    static if(!is(typeof(SSL_CONF_FLAG_CLIENT))) {
        private enum enumMixinStr_SSL_CONF_FLAG_CLIENT = `enum SSL_CONF_FLAG_CLIENT = 0x4;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CONF_FLAG_CLIENT); }))) {
            mixin(enumMixinStr_SSL_CONF_FLAG_CLIENT);
        }
    }




    static if(!is(typeof(SSL_CONF_FLAG_SERVER))) {
        private enum enumMixinStr_SSL_CONF_FLAG_SERVER = `enum SSL_CONF_FLAG_SERVER = 0x8;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CONF_FLAG_SERVER); }))) {
            mixin(enumMixinStr_SSL_CONF_FLAG_SERVER);
        }
    }




    static if(!is(typeof(SSL_CONF_FLAG_SHOW_ERRORS))) {
        private enum enumMixinStr_SSL_CONF_FLAG_SHOW_ERRORS = `enum SSL_CONF_FLAG_SHOW_ERRORS = 0x10;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CONF_FLAG_SHOW_ERRORS); }))) {
            mixin(enumMixinStr_SSL_CONF_FLAG_SHOW_ERRORS);
        }
    }




    static if(!is(typeof(SSL_CONF_FLAG_CERTIFICATE))) {
        private enum enumMixinStr_SSL_CONF_FLAG_CERTIFICATE = `enum SSL_CONF_FLAG_CERTIFICATE = 0x20;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CONF_FLAG_CERTIFICATE); }))) {
            mixin(enumMixinStr_SSL_CONF_FLAG_CERTIFICATE);
        }
    }




    static if(!is(typeof(SSL_CONF_FLAG_REQUIRE_PRIVATE))) {
        private enum enumMixinStr_SSL_CONF_FLAG_REQUIRE_PRIVATE = `enum SSL_CONF_FLAG_REQUIRE_PRIVATE = 0x40;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CONF_FLAG_REQUIRE_PRIVATE); }))) {
            mixin(enumMixinStr_SSL_CONF_FLAG_REQUIRE_PRIVATE);
        }
    }




    static if(!is(typeof(SSL_CONF_TYPE_UNKNOWN))) {
        private enum enumMixinStr_SSL_CONF_TYPE_UNKNOWN = `enum SSL_CONF_TYPE_UNKNOWN = 0x0;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CONF_TYPE_UNKNOWN); }))) {
            mixin(enumMixinStr_SSL_CONF_TYPE_UNKNOWN);
        }
    }




    static if(!is(typeof(SSL_CONF_TYPE_STRING))) {
        private enum enumMixinStr_SSL_CONF_TYPE_STRING = `enum SSL_CONF_TYPE_STRING = 0x1;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CONF_TYPE_STRING); }))) {
            mixin(enumMixinStr_SSL_CONF_TYPE_STRING);
        }
    }




    static if(!is(typeof(SSL_CONF_TYPE_FILE))) {
        private enum enumMixinStr_SSL_CONF_TYPE_FILE = `enum SSL_CONF_TYPE_FILE = 0x2;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CONF_TYPE_FILE); }))) {
            mixin(enumMixinStr_SSL_CONF_TYPE_FILE);
        }
    }




    static if(!is(typeof(SSL_CONF_TYPE_DIR))) {
        private enum enumMixinStr_SSL_CONF_TYPE_DIR = `enum SSL_CONF_TYPE_DIR = 0x3;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CONF_TYPE_DIR); }))) {
            mixin(enumMixinStr_SSL_CONF_TYPE_DIR);
        }
    }




    static if(!is(typeof(SSL_CONF_TYPE_NONE))) {
        private enum enumMixinStr_SSL_CONF_TYPE_NONE = `enum SSL_CONF_TYPE_NONE = 0x4;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CONF_TYPE_NONE); }))) {
            mixin(enumMixinStr_SSL_CONF_TYPE_NONE);
        }
    }




    static if(!is(typeof(SSL_COOKIE_LENGTH))) {
        private enum enumMixinStr_SSL_COOKIE_LENGTH = `enum SSL_COOKIE_LENGTH = 4096;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_COOKIE_LENGTH); }))) {
            mixin(enumMixinStr_SSL_COOKIE_LENGTH);
        }
    }




    static if(!is(typeof(PKCS12_R_PKCS12_PBE_CRYPT_ERROR))) {
        private enum enumMixinStr_PKCS12_R_PKCS12_PBE_CRYPT_ERROR = `enum PKCS12_R_PKCS12_PBE_CRYPT_ERROR = 117;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS12_R_PKCS12_PBE_CRYPT_ERROR); }))) {
            mixin(enumMixinStr_PKCS12_R_PKCS12_PBE_CRYPT_ERROR);
        }
    }




    static if(!is(typeof(PKCS12_R_PKCS12_CIPHERFINAL_ERROR))) {
        private enum enumMixinStr_PKCS12_R_PKCS12_CIPHERFINAL_ERROR = `enum PKCS12_R_PKCS12_CIPHERFINAL_ERROR = 116;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS12_R_PKCS12_CIPHERFINAL_ERROR); }))) {
            mixin(enumMixinStr_PKCS12_R_PKCS12_CIPHERFINAL_ERROR);
        }
    }




    static if(!is(typeof(PKCS12_R_PKCS12_ALGOR_CIPHERINIT_ERROR))) {
        private enum enumMixinStr_PKCS12_R_PKCS12_ALGOR_CIPHERINIT_ERROR = `enum PKCS12_R_PKCS12_ALGOR_CIPHERINIT_ERROR = 115;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS12_R_PKCS12_ALGOR_CIPHERINIT_ERROR); }))) {
            mixin(enumMixinStr_PKCS12_R_PKCS12_ALGOR_CIPHERINIT_ERROR);
        }
    }




    static if(!is(typeof(PKCS12_R_PARSE_ERROR))) {
        private enum enumMixinStr_PKCS12_R_PARSE_ERROR = `enum PKCS12_R_PARSE_ERROR = 114;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS12_R_PARSE_ERROR); }))) {
            mixin(enumMixinStr_PKCS12_R_PARSE_ERROR);
        }
    }




    static if(!is(typeof(PKCS12_R_MAC_VERIFY_FAILURE))) {
        private enum enumMixinStr_PKCS12_R_MAC_VERIFY_FAILURE = `enum PKCS12_R_MAC_VERIFY_FAILURE = 113;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS12_R_MAC_VERIFY_FAILURE); }))) {
            mixin(enumMixinStr_PKCS12_R_MAC_VERIFY_FAILURE);
        }
    }




    static if(!is(typeof(PKCS12_R_MAC_STRING_SET_ERROR))) {
        private enum enumMixinStr_PKCS12_R_MAC_STRING_SET_ERROR = `enum PKCS12_R_MAC_STRING_SET_ERROR = 111;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS12_R_MAC_STRING_SET_ERROR); }))) {
            mixin(enumMixinStr_PKCS12_R_MAC_STRING_SET_ERROR);
        }
    }
    static if(!is(typeof(PKCS12_R_MAC_SETUP_ERROR))) {
        private enum enumMixinStr_PKCS12_R_MAC_SETUP_ERROR = `enum PKCS12_R_MAC_SETUP_ERROR = 110;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS12_R_MAC_SETUP_ERROR); }))) {
            mixin(enumMixinStr_PKCS12_R_MAC_SETUP_ERROR);
        }
    }
    static if(!is(typeof(PKCS12_R_MAC_GENERATION_ERROR))) {
        private enum enumMixinStr_PKCS12_R_MAC_GENERATION_ERROR = `enum PKCS12_R_MAC_GENERATION_ERROR = 109;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS12_R_MAC_GENERATION_ERROR); }))) {
            mixin(enumMixinStr_PKCS12_R_MAC_GENERATION_ERROR);
        }
    }




    static if(!is(typeof(PKCS12_R_MAC_ABSENT))) {
        private enum enumMixinStr_PKCS12_R_MAC_ABSENT = `enum PKCS12_R_MAC_ABSENT = 108;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS12_R_MAC_ABSENT); }))) {
            mixin(enumMixinStr_PKCS12_R_MAC_ABSENT);
        }
    }
    static if(!is(typeof(PKCS12_R_KEY_GEN_ERROR))) {
        private enum enumMixinStr_PKCS12_R_KEY_GEN_ERROR = `enum PKCS12_R_KEY_GEN_ERROR = 107;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS12_R_KEY_GEN_ERROR); }))) {
            mixin(enumMixinStr_PKCS12_R_KEY_GEN_ERROR);
        }
    }




    static if(!is(typeof(PKCS12_R_IV_GEN_ERROR))) {
        private enum enumMixinStr_PKCS12_R_IV_GEN_ERROR = `enum PKCS12_R_IV_GEN_ERROR = 106;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS12_R_IV_GEN_ERROR); }))) {
            mixin(enumMixinStr_PKCS12_R_IV_GEN_ERROR);
        }
    }




    static if(!is(typeof(PKCS12_R_INVALID_NULL_PKCS12_POINTER))) {
        private enum enumMixinStr_PKCS12_R_INVALID_NULL_PKCS12_POINTER = `enum PKCS12_R_INVALID_NULL_PKCS12_POINTER = 105;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS12_R_INVALID_NULL_PKCS12_POINTER); }))) {
            mixin(enumMixinStr_PKCS12_R_INVALID_NULL_PKCS12_POINTER);
        }
    }




    static if(!is(typeof(PKCS12_R_INVALID_NULL_ARGUMENT))) {
        private enum enumMixinStr_PKCS12_R_INVALID_NULL_ARGUMENT = `enum PKCS12_R_INVALID_NULL_ARGUMENT = 104;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS12_R_INVALID_NULL_ARGUMENT); }))) {
            mixin(enumMixinStr_PKCS12_R_INVALID_NULL_ARGUMENT);
        }
    }




    static if(!is(typeof(PKCS12_R_ERROR_SETTING_ENCRYPTED_DATA_TYPE))) {
        private enum enumMixinStr_PKCS12_R_ERROR_SETTING_ENCRYPTED_DATA_TYPE = `enum PKCS12_R_ERROR_SETTING_ENCRYPTED_DATA_TYPE = 120;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS12_R_ERROR_SETTING_ENCRYPTED_DATA_TYPE); }))) {
            mixin(enumMixinStr_PKCS12_R_ERROR_SETTING_ENCRYPTED_DATA_TYPE);
        }
    }




    static if(!is(typeof(PKCS12_R_ENCRYPT_ERROR))) {
        private enum enumMixinStr_PKCS12_R_ENCRYPT_ERROR = `enum PKCS12_R_ENCRYPT_ERROR = 103;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS12_R_ENCRYPT_ERROR); }))) {
            mixin(enumMixinStr_PKCS12_R_ENCRYPT_ERROR);
        }
    }




    static if(!is(typeof(PKCS12_R_ENCODE_ERROR))) {
        private enum enumMixinStr_PKCS12_R_ENCODE_ERROR = `enum PKCS12_R_ENCODE_ERROR = 102;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS12_R_ENCODE_ERROR); }))) {
            mixin(enumMixinStr_PKCS12_R_ENCODE_ERROR);
        }
    }




    static if(!is(typeof(PKCS12_R_DECODE_ERROR))) {
        private enum enumMixinStr_PKCS12_R_DECODE_ERROR = `enum PKCS12_R_DECODE_ERROR = 101;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS12_R_DECODE_ERROR); }))) {
            mixin(enumMixinStr_PKCS12_R_DECODE_ERROR);
        }
    }




    static if(!is(typeof(PKCS12_R_CONTENT_TYPE_NOT_DATA))) {
        private enum enumMixinStr_PKCS12_R_CONTENT_TYPE_NOT_DATA = `enum PKCS12_R_CONTENT_TYPE_NOT_DATA = 121;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS12_R_CONTENT_TYPE_NOT_DATA); }))) {
            mixin(enumMixinStr_PKCS12_R_CONTENT_TYPE_NOT_DATA);
        }
    }




    static if(!is(typeof(PKCS12_R_CANT_PACK_STRUCTURE))) {
        private enum enumMixinStr_PKCS12_R_CANT_PACK_STRUCTURE = `enum PKCS12_R_CANT_PACK_STRUCTURE = 100;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS12_R_CANT_PACK_STRUCTURE); }))) {
            mixin(enumMixinStr_PKCS12_R_CANT_PACK_STRUCTURE);
        }
    }




    static if(!is(typeof(SSL_MAX_CERT_LIST_DEFAULT))) {
        private enum enumMixinStr_SSL_MAX_CERT_LIST_DEFAULT = `enum SSL_MAX_CERT_LIST_DEFAULT = 1024 * 100;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_MAX_CERT_LIST_DEFAULT); }))) {
            mixin(enumMixinStr_SSL_MAX_CERT_LIST_DEFAULT);
        }
    }




    static if(!is(typeof(SSL_SESSION_CACHE_MAX_SIZE_DEFAULT))) {
        private enum enumMixinStr_SSL_SESSION_CACHE_MAX_SIZE_DEFAULT = `enum SSL_SESSION_CACHE_MAX_SIZE_DEFAULT = ( 1024 * 20 );`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_SESSION_CACHE_MAX_SIZE_DEFAULT); }))) {
            mixin(enumMixinStr_SSL_SESSION_CACHE_MAX_SIZE_DEFAULT);
        }
    }




    static if(!is(typeof(PKCS12_F_PKCS8_SET0_PBE))) {
        private enum enumMixinStr_PKCS12_F_PKCS8_SET0_PBE = `enum PKCS12_F_PKCS8_SET0_PBE = 132;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS12_F_PKCS8_SET0_PBE); }))) {
            mixin(enumMixinStr_PKCS12_F_PKCS8_SET0_PBE);
        }
    }




    static if(!is(typeof(SSL_SESS_CACHE_OFF))) {
        private enum enumMixinStr_SSL_SESS_CACHE_OFF = `enum SSL_SESS_CACHE_OFF = 0x0000;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_SESS_CACHE_OFF); }))) {
            mixin(enumMixinStr_SSL_SESS_CACHE_OFF);
        }
    }




    static if(!is(typeof(SSL_SESS_CACHE_CLIENT))) {
        private enum enumMixinStr_SSL_SESS_CACHE_CLIENT = `enum SSL_SESS_CACHE_CLIENT = 0x0001;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_SESS_CACHE_CLIENT); }))) {
            mixin(enumMixinStr_SSL_SESS_CACHE_CLIENT);
        }
    }




    static if(!is(typeof(SSL_SESS_CACHE_SERVER))) {
        private enum enumMixinStr_SSL_SESS_CACHE_SERVER = `enum SSL_SESS_CACHE_SERVER = 0x0002;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_SESS_CACHE_SERVER); }))) {
            mixin(enumMixinStr_SSL_SESS_CACHE_SERVER);
        }
    }




    static if(!is(typeof(SSL_SESS_CACHE_BOTH))) {
        private enum enumMixinStr_SSL_SESS_CACHE_BOTH = `enum SSL_SESS_CACHE_BOTH = ( 0x0001 | 0x0002 );`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_SESS_CACHE_BOTH); }))) {
            mixin(enumMixinStr_SSL_SESS_CACHE_BOTH);
        }
    }




    static if(!is(typeof(SSL_SESS_CACHE_NO_AUTO_CLEAR))) {
        private enum enumMixinStr_SSL_SESS_CACHE_NO_AUTO_CLEAR = `enum SSL_SESS_CACHE_NO_AUTO_CLEAR = 0x0080;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_SESS_CACHE_NO_AUTO_CLEAR); }))) {
            mixin(enumMixinStr_SSL_SESS_CACHE_NO_AUTO_CLEAR);
        }
    }




    static if(!is(typeof(SSL_SESS_CACHE_NO_INTERNAL_LOOKUP))) {
        private enum enumMixinStr_SSL_SESS_CACHE_NO_INTERNAL_LOOKUP = `enum SSL_SESS_CACHE_NO_INTERNAL_LOOKUP = 0x0100;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_SESS_CACHE_NO_INTERNAL_LOOKUP); }))) {
            mixin(enumMixinStr_SSL_SESS_CACHE_NO_INTERNAL_LOOKUP);
        }
    }




    static if(!is(typeof(SSL_SESS_CACHE_NO_INTERNAL_STORE))) {
        private enum enumMixinStr_SSL_SESS_CACHE_NO_INTERNAL_STORE = `enum SSL_SESS_CACHE_NO_INTERNAL_STORE = 0x0200;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_SESS_CACHE_NO_INTERNAL_STORE); }))) {
            mixin(enumMixinStr_SSL_SESS_CACHE_NO_INTERNAL_STORE);
        }
    }




    static if(!is(typeof(SSL_SESS_CACHE_NO_INTERNAL))) {
        private enum enumMixinStr_SSL_SESS_CACHE_NO_INTERNAL = `enum SSL_SESS_CACHE_NO_INTERNAL = ( 0x0100 | 0x0200 );`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_SESS_CACHE_NO_INTERNAL); }))) {
            mixin(enumMixinStr_SSL_SESS_CACHE_NO_INTERNAL);
        }
    }




    static if(!is(typeof(PKCS12_F_PKCS8_ENCRYPT))) {
        private enum enumMixinStr_PKCS12_F_PKCS8_ENCRYPT = `enum PKCS12_F_PKCS8_ENCRYPT = 125;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS12_F_PKCS8_ENCRYPT); }))) {
            mixin(enumMixinStr_PKCS12_F_PKCS8_ENCRYPT);
        }
    }




    static if(!is(typeof(PKCS12_F_PKCS12_VERIFY_MAC))) {
        private enum enumMixinStr_PKCS12_F_PKCS12_VERIFY_MAC = `enum PKCS12_F_PKCS12_VERIFY_MAC = 126;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS12_F_PKCS12_VERIFY_MAC); }))) {
            mixin(enumMixinStr_PKCS12_F_PKCS12_VERIFY_MAC);
        }
    }




    static if(!is(typeof(PKCS12_F_PKCS12_UNPACK_P7DATA))) {
        private enum enumMixinStr_PKCS12_F_PKCS12_UNPACK_P7DATA = `enum PKCS12_F_PKCS12_UNPACK_P7DATA = 131;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS12_F_PKCS12_UNPACK_P7DATA); }))) {
            mixin(enumMixinStr_PKCS12_F_PKCS12_UNPACK_P7DATA);
        }
    }
    static if(!is(typeof(PKCS12_F_PKCS12_UNPACK_AUTHSAFES))) {
        private enum enumMixinStr_PKCS12_F_PKCS12_UNPACK_AUTHSAFES = `enum PKCS12_F_PKCS12_UNPACK_AUTHSAFES = 130;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS12_F_PKCS12_UNPACK_AUTHSAFES); }))) {
            mixin(enumMixinStr_PKCS12_F_PKCS12_UNPACK_AUTHSAFES);
        }
    }




    static if(!is(typeof(PKCS12_F_PKCS12_SET_MAC))) {
        private enum enumMixinStr_PKCS12_F_PKCS12_SET_MAC = `enum PKCS12_F_PKCS12_SET_MAC = 123;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS12_F_PKCS12_SET_MAC); }))) {
            mixin(enumMixinStr_PKCS12_F_PKCS12_SET_MAC);
        }
    }




    static if(!is(typeof(PKCS12_F_PKCS12_SETUP_MAC))) {
        private enum enumMixinStr_PKCS12_F_PKCS12_SETUP_MAC = `enum PKCS12_F_PKCS12_SETUP_MAC = 122;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS12_F_PKCS12_SETUP_MAC); }))) {
            mixin(enumMixinStr_PKCS12_F_PKCS12_SETUP_MAC);
        }
    }




    static if(!is(typeof(PKCS12_F_PKCS12_SAFEBAG_CREATE_PKCS8_ENCRYPT))) {
        private enum enumMixinStr_PKCS12_F_PKCS12_SAFEBAG_CREATE_PKCS8_ENCRYPT = `enum PKCS12_F_PKCS12_SAFEBAG_CREATE_PKCS8_ENCRYPT = 133;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS12_F_PKCS12_SAFEBAG_CREATE_PKCS8_ENCRYPT); }))) {
            mixin(enumMixinStr_PKCS12_F_PKCS12_SAFEBAG_CREATE_PKCS8_ENCRYPT);
        }
    }




    static if(!is(typeof(PKCS12_F_PKCS12_SAFEBAG_CREATE0_PKCS8))) {
        private enum enumMixinStr_PKCS12_F_PKCS12_SAFEBAG_CREATE0_PKCS8 = `enum PKCS12_F_PKCS12_SAFEBAG_CREATE0_PKCS8 = 113;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS12_F_PKCS12_SAFEBAG_CREATE0_PKCS8); }))) {
            mixin(enumMixinStr_PKCS12_F_PKCS12_SAFEBAG_CREATE0_PKCS8);
        }
    }




    static if(!is(typeof(PKCS12_F_PKCS12_SAFEBAG_CREATE0_P8INF))) {
        private enum enumMixinStr_PKCS12_F_PKCS12_SAFEBAG_CREATE0_P8INF = `enum PKCS12_F_PKCS12_SAFEBAG_CREATE0_P8INF = 112;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS12_F_PKCS12_SAFEBAG_CREATE0_P8INF); }))) {
            mixin(enumMixinStr_PKCS12_F_PKCS12_SAFEBAG_CREATE0_P8INF);
        }
    }




    static if(!is(typeof(PKCS12_F_PKCS12_PBE_KEYIVGEN))) {
        private enum enumMixinStr_PKCS12_F_PKCS12_PBE_KEYIVGEN = `enum PKCS12_F_PKCS12_PBE_KEYIVGEN = 120;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS12_F_PKCS12_PBE_KEYIVGEN); }))) {
            mixin(enumMixinStr_PKCS12_F_PKCS12_PBE_KEYIVGEN);
        }
    }




    static if(!is(typeof(PKCS12_F_PKCS12_PBE_CRYPT))) {
        private enum enumMixinStr_PKCS12_F_PKCS12_PBE_CRYPT = `enum PKCS12_F_PKCS12_PBE_CRYPT = 119;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS12_F_PKCS12_PBE_CRYPT); }))) {
            mixin(enumMixinStr_PKCS12_F_PKCS12_PBE_CRYPT);
        }
    }




    static if(!is(typeof(PKCS12_F_PKCS12_PARSE))) {
        private enum enumMixinStr_PKCS12_F_PKCS12_PARSE = `enum PKCS12_F_PKCS12_PARSE = 118;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS12_F_PKCS12_PARSE); }))) {
            mixin(enumMixinStr_PKCS12_F_PKCS12_PARSE);
        }
    }




    static if(!is(typeof(PKCS12_F_PKCS12_PACK_P7ENCDATA))) {
        private enum enumMixinStr_PKCS12_F_PKCS12_PACK_P7ENCDATA = `enum PKCS12_F_PKCS12_PACK_P7ENCDATA = 115;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS12_F_PKCS12_PACK_P7ENCDATA); }))) {
            mixin(enumMixinStr_PKCS12_F_PKCS12_PACK_P7ENCDATA);
        }
    }




    static if(!is(typeof(PKCS12_F_PKCS12_PACK_P7DATA))) {
        private enum enumMixinStr_PKCS12_F_PKCS12_PACK_P7DATA = `enum PKCS12_F_PKCS12_PACK_P7DATA = 114;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS12_F_PKCS12_PACK_P7DATA); }))) {
            mixin(enumMixinStr_PKCS12_F_PKCS12_PACK_P7DATA);
        }
    }




    static if(!is(typeof(PKCS12_F_PKCS12_NEWPASS))) {
        private enum enumMixinStr_PKCS12_F_PKCS12_NEWPASS = `enum PKCS12_F_PKCS12_NEWPASS = 128;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS12_F_PKCS12_NEWPASS); }))) {
            mixin(enumMixinStr_PKCS12_F_PKCS12_NEWPASS);
        }
    }




    static if(!is(typeof(PKCS12_F_PKCS12_KEY_GEN_UTF8))) {
        private enum enumMixinStr_PKCS12_F_PKCS12_KEY_GEN_UTF8 = `enum PKCS12_F_PKCS12_KEY_GEN_UTF8 = 116;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS12_F_PKCS12_KEY_GEN_UTF8); }))) {
            mixin(enumMixinStr_PKCS12_F_PKCS12_KEY_GEN_UTF8);
        }
    }




    static if(!is(typeof(PKCS12_F_PKCS12_KEY_GEN_UNI))) {
        private enum enumMixinStr_PKCS12_F_PKCS12_KEY_GEN_UNI = `enum PKCS12_F_PKCS12_KEY_GEN_UNI = 111;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS12_F_PKCS12_KEY_GEN_UNI); }))) {
            mixin(enumMixinStr_PKCS12_F_PKCS12_KEY_GEN_UNI);
        }
    }




    static if(!is(typeof(PKCS12_F_PKCS12_KEY_GEN_ASC))) {
        private enum enumMixinStr_PKCS12_F_PKCS12_KEY_GEN_ASC = `enum PKCS12_F_PKCS12_KEY_GEN_ASC = 110;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS12_F_PKCS12_KEY_GEN_ASC); }))) {
            mixin(enumMixinStr_PKCS12_F_PKCS12_KEY_GEN_ASC);
        }
    }




    static if(!is(typeof(PKCS12_F_PKCS12_ITEM_PACK_SAFEBAG))) {
        private enum enumMixinStr_PKCS12_F_PKCS12_ITEM_PACK_SAFEBAG = `enum PKCS12_F_PKCS12_ITEM_PACK_SAFEBAG = 117;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS12_F_PKCS12_ITEM_PACK_SAFEBAG); }))) {
            mixin(enumMixinStr_PKCS12_F_PKCS12_ITEM_PACK_SAFEBAG);
        }
    }




    static if(!is(typeof(PKCS12_F_PKCS12_ITEM_I2D_ENCRYPT))) {
        private enum enumMixinStr_PKCS12_F_PKCS12_ITEM_I2D_ENCRYPT = `enum PKCS12_F_PKCS12_ITEM_I2D_ENCRYPT = 108;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS12_F_PKCS12_ITEM_I2D_ENCRYPT); }))) {
            mixin(enumMixinStr_PKCS12_F_PKCS12_ITEM_I2D_ENCRYPT);
        }
    }




    static if(!is(typeof(PKCS12_F_PKCS12_ITEM_DECRYPT_D2I))) {
        private enum enumMixinStr_PKCS12_F_PKCS12_ITEM_DECRYPT_D2I = `enum PKCS12_F_PKCS12_ITEM_DECRYPT_D2I = 106;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS12_F_PKCS12_ITEM_DECRYPT_D2I); }))) {
            mixin(enumMixinStr_PKCS12_F_PKCS12_ITEM_DECRYPT_D2I);
        }
    }




    static if(!is(typeof(SSL_CTX_set_npn_advertised_cb))) {
        private enum enumMixinStr_SSL_CTX_set_npn_advertised_cb = `enum SSL_CTX_set_npn_advertised_cb = SSL_CTX_set_next_protos_advertised_cb;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CTX_set_npn_advertised_cb); }))) {
            mixin(enumMixinStr_SSL_CTX_set_npn_advertised_cb);
        }
    }




    static if(!is(typeof(PKCS12_F_PKCS12_INIT))) {
        private enum enumMixinStr_PKCS12_F_PKCS12_INIT = `enum PKCS12_F_PKCS12_INIT = 109;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS12_F_PKCS12_INIT); }))) {
            mixin(enumMixinStr_PKCS12_F_PKCS12_INIT);
        }
    }




    static if(!is(typeof(PKCS12_F_PKCS12_GEN_MAC))) {
        private enum enumMixinStr_PKCS12_F_PKCS12_GEN_MAC = `enum PKCS12_F_PKCS12_GEN_MAC = 107;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS12_F_PKCS12_GEN_MAC); }))) {
            mixin(enumMixinStr_PKCS12_F_PKCS12_GEN_MAC);
        }
    }




    static if(!is(typeof(SSL_CTX_set_npn_select_cb))) {
        private enum enumMixinStr_SSL_CTX_set_npn_select_cb = `enum SSL_CTX_set_npn_select_cb = SSL_CTX_set_next_proto_select_cb;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CTX_set_npn_select_cb); }))) {
            mixin(enumMixinStr_SSL_CTX_set_npn_select_cb);
        }
    }




    static if(!is(typeof(PKCS12_F_PKCS12_CREATE))) {
        private enum enumMixinStr_PKCS12_F_PKCS12_CREATE = `enum PKCS12_F_PKCS12_CREATE = 105;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS12_F_PKCS12_CREATE); }))) {
            mixin(enumMixinStr_PKCS12_F_PKCS12_CREATE);
        }
    }




    static if(!is(typeof(SSL_get0_npn_negotiated))) {
        private enum enumMixinStr_SSL_get0_npn_negotiated = `enum SSL_get0_npn_negotiated = SSL_get0_next_proto_negotiated;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_get0_npn_negotiated); }))) {
            mixin(enumMixinStr_SSL_get0_npn_negotiated);
        }
    }




    static if(!is(typeof(PKCS12_MAKE_SHKEYBAG))) {
        private enum enumMixinStr_PKCS12_MAKE_SHKEYBAG = `enum PKCS12_MAKE_SHKEYBAG = PKCS12_SAFEBAG_create_pkcs8_encrypt;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS12_MAKE_SHKEYBAG); }))) {
            mixin(enumMixinStr_PKCS12_MAKE_SHKEYBAG);
        }
    }




    static if(!is(typeof(PKCS12_MAKE_KEYBAG))) {
        private enum enumMixinStr_PKCS12_MAKE_KEYBAG = `enum PKCS12_MAKE_KEYBAG = PKCS12_SAFEBAG_create0_p8inf;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS12_MAKE_KEYBAG); }))) {
            mixin(enumMixinStr_PKCS12_MAKE_KEYBAG);
        }
    }




    static if(!is(typeof(OPENSSL_NPN_UNSUPPORTED))) {
        private enum enumMixinStr_OPENSSL_NPN_UNSUPPORTED = `enum OPENSSL_NPN_UNSUPPORTED = 0;`;
        static if(is(typeof({ mixin(enumMixinStr_OPENSSL_NPN_UNSUPPORTED); }))) {
            mixin(enumMixinStr_OPENSSL_NPN_UNSUPPORTED);
        }
    }




    static if(!is(typeof(OPENSSL_NPN_NEGOTIATED))) {
        private enum enumMixinStr_OPENSSL_NPN_NEGOTIATED = `enum OPENSSL_NPN_NEGOTIATED = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_OPENSSL_NPN_NEGOTIATED); }))) {
            mixin(enumMixinStr_OPENSSL_NPN_NEGOTIATED);
        }
    }




    static if(!is(typeof(OPENSSL_NPN_NO_OVERLAP))) {
        private enum enumMixinStr_OPENSSL_NPN_NO_OVERLAP = `enum OPENSSL_NPN_NO_OVERLAP = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_OPENSSL_NPN_NO_OVERLAP); }))) {
            mixin(enumMixinStr_OPENSSL_NPN_NO_OVERLAP);
        }
    }




    static if(!is(typeof(PKCS12_x509crl2certbag))) {
        private enum enumMixinStr_PKCS12_x509crl2certbag = `enum PKCS12_x509crl2certbag = PKCS12_SAFEBAG_create_crl;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS12_x509crl2certbag); }))) {
            mixin(enumMixinStr_PKCS12_x509crl2certbag);
        }
    }




    static if(!is(typeof(PKCS12_x5092certbag))) {
        private enum enumMixinStr_PKCS12_x5092certbag = `enum PKCS12_x5092certbag = PKCS12_SAFEBAG_create_cert;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS12_x5092certbag); }))) {
            mixin(enumMixinStr_PKCS12_x5092certbag);
        }
    }




    static if(!is(typeof(PKCS12_cert_bag_type))) {
        private enum enumMixinStr_PKCS12_cert_bag_type = `enum PKCS12_cert_bag_type = PKCS12_SAFEBAG_get_bag_nid;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS12_cert_bag_type); }))) {
            mixin(enumMixinStr_PKCS12_cert_bag_type);
        }
    }




    static if(!is(typeof(PKCS12_bag_type))) {
        private enum enumMixinStr_PKCS12_bag_type = `enum PKCS12_bag_type = PKCS12_SAFEBAG_get_nid;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS12_bag_type); }))) {
            mixin(enumMixinStr_PKCS12_bag_type);
        }
    }




    static if(!is(typeof(PKCS12_certbag2scrl))) {
        private enum enumMixinStr_PKCS12_certbag2scrl = `enum PKCS12_certbag2scrl = PKCS12_SAFEBAG_get1_crl;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS12_certbag2scrl); }))) {
            mixin(enumMixinStr_PKCS12_certbag2scrl);
        }
    }




    static if(!is(typeof(PKCS12_certbag2x509))) {
        private enum enumMixinStr_PKCS12_certbag2x509 = `enum PKCS12_certbag2x509 = PKCS12_SAFEBAG_get1_cert;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS12_certbag2x509); }))) {
            mixin(enumMixinStr_PKCS12_certbag2x509);
        }
    }




    static if(!is(typeof(M_PKCS12_crl_bag_type))) {
        private enum enumMixinStr_M_PKCS12_crl_bag_type = `enum M_PKCS12_crl_bag_type = PKCS12_SAFEBAG_get_bag_nid;`;
        static if(is(typeof({ mixin(enumMixinStr_M_PKCS12_crl_bag_type); }))) {
            mixin(enumMixinStr_M_PKCS12_crl_bag_type);
        }
    }




    static if(!is(typeof(PSK_MAX_IDENTITY_LEN))) {
        private enum enumMixinStr_PSK_MAX_IDENTITY_LEN = `enum PSK_MAX_IDENTITY_LEN = 128;`;
        static if(is(typeof({ mixin(enumMixinStr_PSK_MAX_IDENTITY_LEN); }))) {
            mixin(enumMixinStr_PSK_MAX_IDENTITY_LEN);
        }
    }




    static if(!is(typeof(PSK_MAX_PSK_LEN))) {
        private enum enumMixinStr_PSK_MAX_PSK_LEN = `enum PSK_MAX_PSK_LEN = 256;`;
        static if(is(typeof({ mixin(enumMixinStr_PSK_MAX_PSK_LEN); }))) {
            mixin(enumMixinStr_PSK_MAX_PSK_LEN);
        }
    }




    static if(!is(typeof(M_PKCS12_cert_bag_type))) {
        private enum enumMixinStr_M_PKCS12_cert_bag_type = `enum M_PKCS12_cert_bag_type = PKCS12_SAFEBAG_get_bag_nid;`;
        static if(is(typeof({ mixin(enumMixinStr_M_PKCS12_cert_bag_type); }))) {
            mixin(enumMixinStr_M_PKCS12_cert_bag_type);
        }
    }




    static if(!is(typeof(M_PKCS12_bag_type))) {
        private enum enumMixinStr_M_PKCS12_bag_type = `enum M_PKCS12_bag_type = PKCS12_SAFEBAG_get_nid;`;
        static if(is(typeof({ mixin(enumMixinStr_M_PKCS12_bag_type); }))) {
            mixin(enumMixinStr_M_PKCS12_bag_type);
        }
    }




    static if(!is(typeof(PKCS12_OK))) {
        private enum enumMixinStr_PKCS12_OK = `enum PKCS12_OK = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS12_OK); }))) {
            mixin(enumMixinStr_PKCS12_OK);
        }
    }




    static if(!is(typeof(PKCS12_ERROR))) {
        private enum enumMixinStr_PKCS12_ERROR = `enum PKCS12_ERROR = 0;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS12_ERROR); }))) {
            mixin(enumMixinStr_PKCS12_ERROR);
        }
    }




    static if(!is(typeof(KEY_SIG))) {
        private enum enumMixinStr_KEY_SIG = `enum KEY_SIG = 0x80;`;
        static if(is(typeof({ mixin(enumMixinStr_KEY_SIG); }))) {
            mixin(enumMixinStr_KEY_SIG);
        }
    }




    static if(!is(typeof(KEY_EX))) {
        private enum enumMixinStr_KEY_EX = `enum KEY_EX = 0x10;`;
        static if(is(typeof({ mixin(enumMixinStr_KEY_EX); }))) {
            mixin(enumMixinStr_KEY_EX);
        }
    }




    static if(!is(typeof(PKCS12_add_friendlyname))) {
        private enum enumMixinStr_PKCS12_add_friendlyname = `enum PKCS12_add_friendlyname = PKCS12_add_friendlyname_utf8;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS12_add_friendlyname); }))) {
            mixin(enumMixinStr_PKCS12_add_friendlyname);
        }
    }




    static if(!is(typeof(PKCS12_key_gen))) {
        private enum enumMixinStr_PKCS12_key_gen = `enum PKCS12_key_gen = PKCS12_key_gen_utf8;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS12_key_gen); }))) {
            mixin(enumMixinStr_PKCS12_key_gen);
        }
    }




    static if(!is(typeof(PKCS12_SALT_LEN))) {
        private enum enumMixinStr_PKCS12_SALT_LEN = `enum PKCS12_SALT_LEN = 8;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS12_SALT_LEN); }))) {
            mixin(enumMixinStr_PKCS12_SALT_LEN);
        }
    }




    static if(!is(typeof(PKCS12_MAC_KEY_LENGTH))) {
        private enum enumMixinStr_PKCS12_MAC_KEY_LENGTH = `enum PKCS12_MAC_KEY_LENGTH = 20;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS12_MAC_KEY_LENGTH); }))) {
            mixin(enumMixinStr_PKCS12_MAC_KEY_LENGTH);
        }
    }




    static if(!is(typeof(PKCS12_DEFAULT_ITER))) {
        private enum enumMixinStr_PKCS12_DEFAULT_ITER = `enum PKCS12_DEFAULT_ITER = 2048;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS12_DEFAULT_ITER); }))) {
            mixin(enumMixinStr_PKCS12_DEFAULT_ITER);
        }
    }




    static if(!is(typeof(PKCS12_MAC_ID))) {
        private enum enumMixinStr_PKCS12_MAC_ID = `enum PKCS12_MAC_ID = 3;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS12_MAC_ID); }))) {
            mixin(enumMixinStr_PKCS12_MAC_ID);
        }
    }




    static if(!is(typeof(PKCS12_IV_ID))) {
        private enum enumMixinStr_PKCS12_IV_ID = `enum PKCS12_IV_ID = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS12_IV_ID); }))) {
            mixin(enumMixinStr_PKCS12_IV_ID);
        }
    }




    static if(!is(typeof(PKCS12_KEY_ID))) {
        private enum enumMixinStr_PKCS12_KEY_ID = `enum PKCS12_KEY_ID = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_PKCS12_KEY_ID); }))) {
            mixin(enumMixinStr_PKCS12_KEY_ID);
        }
    }






    static if(!is(typeof(OCSP_R_UNSUPPORTED_REQUESTORNAME_TYPE))) {
        private enum enumMixinStr_OCSP_R_UNSUPPORTED_REQUESTORNAME_TYPE = `enum OCSP_R_UNSUPPORTED_REQUESTORNAME_TYPE = 129;`;
        static if(is(typeof({ mixin(enumMixinStr_OCSP_R_UNSUPPORTED_REQUESTORNAME_TYPE); }))) {
            mixin(enumMixinStr_OCSP_R_UNSUPPORTED_REQUESTORNAME_TYPE);
        }
    }




    static if(!is(typeof(OCSP_R_UNKNOWN_NID))) {
        private enum enumMixinStr_OCSP_R_UNKNOWN_NID = `enum OCSP_R_UNKNOWN_NID = 120;`;
        static if(is(typeof({ mixin(enumMixinStr_OCSP_R_UNKNOWN_NID); }))) {
            mixin(enumMixinStr_OCSP_R_UNKNOWN_NID);
        }
    }




    static if(!is(typeof(OCSP_R_UNKNOWN_MESSAGE_DIGEST))) {
        private enum enumMixinStr_OCSP_R_UNKNOWN_MESSAGE_DIGEST = `enum OCSP_R_UNKNOWN_MESSAGE_DIGEST = 119;`;
        static if(is(typeof({ mixin(enumMixinStr_OCSP_R_UNKNOWN_MESSAGE_DIGEST); }))) {
            mixin(enumMixinStr_OCSP_R_UNKNOWN_MESSAGE_DIGEST);
        }
    }




    static if(!is(typeof(OCSP_R_STATUS_TOO_OLD))) {
        private enum enumMixinStr_OCSP_R_STATUS_TOO_OLD = `enum OCSP_R_STATUS_TOO_OLD = 127;`;
        static if(is(typeof({ mixin(enumMixinStr_OCSP_R_STATUS_TOO_OLD); }))) {
            mixin(enumMixinStr_OCSP_R_STATUS_TOO_OLD);
        }
    }




    static if(!is(typeof(OCSP_R_STATUS_NOT_YET_VALID))) {
        private enum enumMixinStr_OCSP_R_STATUS_NOT_YET_VALID = `enum OCSP_R_STATUS_NOT_YET_VALID = 126;`;
        static if(is(typeof({ mixin(enumMixinStr_OCSP_R_STATUS_NOT_YET_VALID); }))) {
            mixin(enumMixinStr_OCSP_R_STATUS_NOT_YET_VALID);
        }
    }




    static if(!is(typeof(OCSP_R_STATUS_EXPIRED))) {
        private enum enumMixinStr_OCSP_R_STATUS_EXPIRED = `enum OCSP_R_STATUS_EXPIRED = 125;`;
        static if(is(typeof({ mixin(enumMixinStr_OCSP_R_STATUS_EXPIRED); }))) {
            mixin(enumMixinStr_OCSP_R_STATUS_EXPIRED);
        }
    }




    static if(!is(typeof(OCSP_R_SIGNER_CERTIFICATE_NOT_FOUND))) {
        private enum enumMixinStr_OCSP_R_SIGNER_CERTIFICATE_NOT_FOUND = `enum OCSP_R_SIGNER_CERTIFICATE_NOT_FOUND = 118;`;
        static if(is(typeof({ mixin(enumMixinStr_OCSP_R_SIGNER_CERTIFICATE_NOT_FOUND); }))) {
            mixin(enumMixinStr_OCSP_R_SIGNER_CERTIFICATE_NOT_FOUND);
        }
    }




    static if(!is(typeof(OCSP_R_SIGNATURE_FAILURE))) {
        private enum enumMixinStr_OCSP_R_SIGNATURE_FAILURE = `enum OCSP_R_SIGNATURE_FAILURE = 117;`;
        static if(is(typeof({ mixin(enumMixinStr_OCSP_R_SIGNATURE_FAILURE); }))) {
            mixin(enumMixinStr_OCSP_R_SIGNATURE_FAILURE);
        }
    }




    static if(!is(typeof(OCSP_R_SERVER_RESPONSE_PARSE_ERROR))) {
        private enum enumMixinStr_OCSP_R_SERVER_RESPONSE_PARSE_ERROR = `enum OCSP_R_SERVER_RESPONSE_PARSE_ERROR = 115;`;
        static if(is(typeof({ mixin(enumMixinStr_OCSP_R_SERVER_RESPONSE_PARSE_ERROR); }))) {
            mixin(enumMixinStr_OCSP_R_SERVER_RESPONSE_PARSE_ERROR);
        }
    }




    static if(!is(typeof(OCSP_R_SERVER_RESPONSE_ERROR))) {
        private enum enumMixinStr_OCSP_R_SERVER_RESPONSE_ERROR = `enum OCSP_R_SERVER_RESPONSE_ERROR = 114;`;
        static if(is(typeof({ mixin(enumMixinStr_OCSP_R_SERVER_RESPONSE_ERROR); }))) {
            mixin(enumMixinStr_OCSP_R_SERVER_RESPONSE_ERROR);
        }
    }




    static if(!is(typeof(OCSP_R_ROOT_CA_NOT_TRUSTED))) {
        private enum enumMixinStr_OCSP_R_ROOT_CA_NOT_TRUSTED = `enum OCSP_R_ROOT_CA_NOT_TRUSTED = 112;`;
        static if(is(typeof({ mixin(enumMixinStr_OCSP_R_ROOT_CA_NOT_TRUSTED); }))) {
            mixin(enumMixinStr_OCSP_R_ROOT_CA_NOT_TRUSTED);
        }
    }




    static if(!is(typeof(OCSP_R_RESPONSE_CONTAINS_NO_REVOCATION_DATA))) {
        private enum enumMixinStr_OCSP_R_RESPONSE_CONTAINS_NO_REVOCATION_DATA = `enum OCSP_R_RESPONSE_CONTAINS_NO_REVOCATION_DATA = 111;`;
        static if(is(typeof({ mixin(enumMixinStr_OCSP_R_RESPONSE_CONTAINS_NO_REVOCATION_DATA); }))) {
            mixin(enumMixinStr_OCSP_R_RESPONSE_CONTAINS_NO_REVOCATION_DATA);
        }
    }




    static if(!is(typeof(OCSP_R_REQUEST_NOT_SIGNED))) {
        private enum enumMixinStr_OCSP_R_REQUEST_NOT_SIGNED = `enum OCSP_R_REQUEST_NOT_SIGNED = 128;`;
        static if(is(typeof({ mixin(enumMixinStr_OCSP_R_REQUEST_NOT_SIGNED); }))) {
            mixin(enumMixinStr_OCSP_R_REQUEST_NOT_SIGNED);
        }
    }




    static if(!is(typeof(SSL_NOTHING))) {
        private enum enumMixinStr_SSL_NOTHING = `enum SSL_NOTHING = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_NOTHING); }))) {
            mixin(enumMixinStr_SSL_NOTHING);
        }
    }




    static if(!is(typeof(SSL_WRITING))) {
        private enum enumMixinStr_SSL_WRITING = `enum SSL_WRITING = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_WRITING); }))) {
            mixin(enumMixinStr_SSL_WRITING);
        }
    }




    static if(!is(typeof(SSL_READING))) {
        private enum enumMixinStr_SSL_READING = `enum SSL_READING = 3;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_READING); }))) {
            mixin(enumMixinStr_SSL_READING);
        }
    }




    static if(!is(typeof(SSL_X509_LOOKUP))) {
        private enum enumMixinStr_SSL_X509_LOOKUP = `enum SSL_X509_LOOKUP = 4;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_X509_LOOKUP); }))) {
            mixin(enumMixinStr_SSL_X509_LOOKUP);
        }
    }




    static if(!is(typeof(SSL_ASYNC_PAUSED))) {
        private enum enumMixinStr_SSL_ASYNC_PAUSED = `enum SSL_ASYNC_PAUSED = 5;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_ASYNC_PAUSED); }))) {
            mixin(enumMixinStr_SSL_ASYNC_PAUSED);
        }
    }




    static if(!is(typeof(SSL_ASYNC_NO_JOBS))) {
        private enum enumMixinStr_SSL_ASYNC_NO_JOBS = `enum SSL_ASYNC_NO_JOBS = 6;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_ASYNC_NO_JOBS); }))) {
            mixin(enumMixinStr_SSL_ASYNC_NO_JOBS);
        }
    }




    static if(!is(typeof(SSL_CLIENT_HELLO_CB))) {
        private enum enumMixinStr_SSL_CLIENT_HELLO_CB = `enum SSL_CLIENT_HELLO_CB = 7;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CLIENT_HELLO_CB); }))) {
            mixin(enumMixinStr_SSL_CLIENT_HELLO_CB);
        }
    }
    static if(!is(typeof(SSL_MAC_FLAG_READ_MAC_STREAM))) {
        private enum enumMixinStr_SSL_MAC_FLAG_READ_MAC_STREAM = `enum SSL_MAC_FLAG_READ_MAC_STREAM = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_MAC_FLAG_READ_MAC_STREAM); }))) {
            mixin(enumMixinStr_SSL_MAC_FLAG_READ_MAC_STREAM);
        }
    }




    static if(!is(typeof(SSL_MAC_FLAG_WRITE_MAC_STREAM))) {
        private enum enumMixinStr_SSL_MAC_FLAG_WRITE_MAC_STREAM = `enum SSL_MAC_FLAG_WRITE_MAC_STREAM = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_MAC_FLAG_WRITE_MAC_STREAM); }))) {
            mixin(enumMixinStr_SSL_MAC_FLAG_WRITE_MAC_STREAM);
        }
    }




    static if(!is(typeof(OCSP_R_PRIVATE_KEY_DOES_NOT_MATCH_CERTIFICATE))) {
        private enum enumMixinStr_OCSP_R_PRIVATE_KEY_DOES_NOT_MATCH_CERTIFICATE = `enum OCSP_R_PRIVATE_KEY_DOES_NOT_MATCH_CERTIFICATE = 110;`;
        static if(is(typeof({ mixin(enumMixinStr_OCSP_R_PRIVATE_KEY_DOES_NOT_MATCH_CERTIFICATE); }))) {
            mixin(enumMixinStr_OCSP_R_PRIVATE_KEY_DOES_NOT_MATCH_CERTIFICATE);
        }
    }




    static if(!is(typeof(OCSP_R_NO_SIGNER_KEY))) {
        private enum enumMixinStr_OCSP_R_NO_SIGNER_KEY = `enum OCSP_R_NO_SIGNER_KEY = 130;`;
        static if(is(typeof({ mixin(enumMixinStr_OCSP_R_NO_SIGNER_KEY); }))) {
            mixin(enumMixinStr_OCSP_R_NO_SIGNER_KEY);
        }
    }




    static if(!is(typeof(OCSP_R_NO_REVOKED_TIME))) {
        private enum enumMixinStr_OCSP_R_NO_REVOKED_TIME = `enum OCSP_R_NO_REVOKED_TIME = 109;`;
        static if(is(typeof({ mixin(enumMixinStr_OCSP_R_NO_REVOKED_TIME); }))) {
            mixin(enumMixinStr_OCSP_R_NO_REVOKED_TIME);
        }
    }




    static if(!is(typeof(OCSP_R_NO_RESPONSE_DATA))) {
        private enum enumMixinStr_OCSP_R_NO_RESPONSE_DATA = `enum OCSP_R_NO_RESPONSE_DATA = 108;`;
        static if(is(typeof({ mixin(enumMixinStr_OCSP_R_NO_RESPONSE_DATA); }))) {
            mixin(enumMixinStr_OCSP_R_NO_RESPONSE_DATA);
        }
    }




    static if(!is(typeof(OCSP_R_NO_CERTIFICATES_IN_CHAIN))) {
        private enum enumMixinStr_OCSP_R_NO_CERTIFICATES_IN_CHAIN = `enum OCSP_R_NO_CERTIFICATES_IN_CHAIN = 105;`;
        static if(is(typeof({ mixin(enumMixinStr_OCSP_R_NO_CERTIFICATES_IN_CHAIN); }))) {
            mixin(enumMixinStr_OCSP_R_NO_CERTIFICATES_IN_CHAIN);
        }
    }




    static if(!is(typeof(OCSP_R_NOT_BASIC_RESPONSE))) {
        private enum enumMixinStr_OCSP_R_NOT_BASIC_RESPONSE = `enum OCSP_R_NOT_BASIC_RESPONSE = 104;`;
        static if(is(typeof({ mixin(enumMixinStr_OCSP_R_NOT_BASIC_RESPONSE); }))) {
            mixin(enumMixinStr_OCSP_R_NOT_BASIC_RESPONSE);
        }
    }




    static if(!is(typeof(OCSP_R_NEXTUPDATE_BEFORE_THISUPDATE))) {
        private enum enumMixinStr_OCSP_R_NEXTUPDATE_BEFORE_THISUPDATE = `enum OCSP_R_NEXTUPDATE_BEFORE_THISUPDATE = 124;`;
        static if(is(typeof({ mixin(enumMixinStr_OCSP_R_NEXTUPDATE_BEFORE_THISUPDATE); }))) {
            mixin(enumMixinStr_OCSP_R_NEXTUPDATE_BEFORE_THISUPDATE);
        }
    }




    static if(!is(typeof(OCSP_R_MISSING_OCSPSIGNING_USAGE))) {
        private enum enumMixinStr_OCSP_R_MISSING_OCSPSIGNING_USAGE = `enum OCSP_R_MISSING_OCSPSIGNING_USAGE = 103;`;
        static if(is(typeof({ mixin(enumMixinStr_OCSP_R_MISSING_OCSPSIGNING_USAGE); }))) {
            mixin(enumMixinStr_OCSP_R_MISSING_OCSPSIGNING_USAGE);
        }
    }




    static if(!is(typeof(OCSP_R_ERROR_PARSING_URL))) {
        private enum enumMixinStr_OCSP_R_ERROR_PARSING_URL = `enum OCSP_R_ERROR_PARSING_URL = 121;`;
        static if(is(typeof({ mixin(enumMixinStr_OCSP_R_ERROR_PARSING_URL); }))) {
            mixin(enumMixinStr_OCSP_R_ERROR_PARSING_URL);
        }
    }




    static if(!is(typeof(OCSP_R_ERROR_IN_THISUPDATE_FIELD))) {
        private enum enumMixinStr_OCSP_R_ERROR_IN_THISUPDATE_FIELD = `enum OCSP_R_ERROR_IN_THISUPDATE_FIELD = 123;`;
        static if(is(typeof({ mixin(enumMixinStr_OCSP_R_ERROR_IN_THISUPDATE_FIELD); }))) {
            mixin(enumMixinStr_OCSP_R_ERROR_IN_THISUPDATE_FIELD);
        }
    }




    static if(!is(typeof(OCSP_R_ERROR_IN_NEXTUPDATE_FIELD))) {
        private enum enumMixinStr_OCSP_R_ERROR_IN_NEXTUPDATE_FIELD = `enum OCSP_R_ERROR_IN_NEXTUPDATE_FIELD = 122;`;
        static if(is(typeof({ mixin(enumMixinStr_OCSP_R_ERROR_IN_NEXTUPDATE_FIELD); }))) {
            mixin(enumMixinStr_OCSP_R_ERROR_IN_NEXTUPDATE_FIELD);
        }
    }




    static if(!is(typeof(OCSP_R_DIGEST_ERR))) {
        private enum enumMixinStr_OCSP_R_DIGEST_ERR = `enum OCSP_R_DIGEST_ERR = 102;`;
        static if(is(typeof({ mixin(enumMixinStr_OCSP_R_DIGEST_ERR); }))) {
            mixin(enumMixinStr_OCSP_R_DIGEST_ERR);
        }
    }




    static if(!is(typeof(OCSP_R_CERTIFICATE_VERIFY_ERROR))) {
        private enum enumMixinStr_OCSP_R_CERTIFICATE_VERIFY_ERROR = `enum OCSP_R_CERTIFICATE_VERIFY_ERROR = 101;`;
        static if(is(typeof({ mixin(enumMixinStr_OCSP_R_CERTIFICATE_VERIFY_ERROR); }))) {
            mixin(enumMixinStr_OCSP_R_CERTIFICATE_VERIFY_ERROR);
        }
    }




    static if(!is(typeof(OCSP_F_PARSE_HTTP_LINE1))) {
        private enum enumMixinStr_OCSP_F_PARSE_HTTP_LINE1 = `enum OCSP_F_PARSE_HTTP_LINE1 = 118;`;
        static if(is(typeof({ mixin(enumMixinStr_OCSP_F_PARSE_HTTP_LINE1); }))) {
            mixin(enumMixinStr_OCSP_F_PARSE_HTTP_LINE1);
        }
    }




    static if(!is(typeof(OCSP_F_OCSP_RESPONSE_GET1_BASIC))) {
        private enum enumMixinStr_OCSP_F_OCSP_RESPONSE_GET1_BASIC = `enum OCSP_F_OCSP_RESPONSE_GET1_BASIC = 111;`;
        static if(is(typeof({ mixin(enumMixinStr_OCSP_F_OCSP_RESPONSE_GET1_BASIC); }))) {
            mixin(enumMixinStr_OCSP_F_OCSP_RESPONSE_GET1_BASIC);
        }
    }




    static if(!is(typeof(OCSP_F_OCSP_REQUEST_VERIFY))) {
        private enum enumMixinStr_OCSP_F_OCSP_REQUEST_VERIFY = `enum OCSP_F_OCSP_REQUEST_VERIFY = 116;`;
        static if(is(typeof({ mixin(enumMixinStr_OCSP_F_OCSP_REQUEST_VERIFY); }))) {
            mixin(enumMixinStr_OCSP_F_OCSP_REQUEST_VERIFY);
        }
    }




    static if(!is(typeof(OCSP_F_OCSP_REQUEST_SIGN))) {
        private enum enumMixinStr_OCSP_F_OCSP_REQUEST_SIGN = `enum OCSP_F_OCSP_REQUEST_SIGN = 110;`;
        static if(is(typeof({ mixin(enumMixinStr_OCSP_F_OCSP_REQUEST_SIGN); }))) {
            mixin(enumMixinStr_OCSP_F_OCSP_REQUEST_SIGN);
        }
    }




    static if(!is(typeof(OCSP_F_OCSP_PARSE_URL))) {
        private enum enumMixinStr_OCSP_F_OCSP_PARSE_URL = `enum OCSP_F_OCSP_PARSE_URL = 114;`;
        static if(is(typeof({ mixin(enumMixinStr_OCSP_F_OCSP_PARSE_URL); }))) {
            mixin(enumMixinStr_OCSP_F_OCSP_PARSE_URL);
        }
    }




    static if(!is(typeof(OCSP_F_OCSP_MATCH_ISSUERID))) {
        private enum enumMixinStr_OCSP_F_OCSP_MATCH_ISSUERID = `enum OCSP_F_OCSP_MATCH_ISSUERID = 109;`;
        static if(is(typeof({ mixin(enumMixinStr_OCSP_F_OCSP_MATCH_ISSUERID); }))) {
            mixin(enumMixinStr_OCSP_F_OCSP_MATCH_ISSUERID);
        }
    }




    static if(!is(typeof(OCSP_F_OCSP_CHECK_VALIDITY))) {
        private enum enumMixinStr_OCSP_F_OCSP_CHECK_VALIDITY = `enum OCSP_F_OCSP_CHECK_VALIDITY = 115;`;
        static if(is(typeof({ mixin(enumMixinStr_OCSP_F_OCSP_CHECK_VALIDITY); }))) {
            mixin(enumMixinStr_OCSP_F_OCSP_CHECK_VALIDITY);
        }
    }




    static if(!is(typeof(OCSP_F_OCSP_CHECK_ISSUER))) {
        private enum enumMixinStr_OCSP_F_OCSP_CHECK_ISSUER = `enum OCSP_F_OCSP_CHECK_ISSUER = 108;`;
        static if(is(typeof({ mixin(enumMixinStr_OCSP_F_OCSP_CHECK_ISSUER); }))) {
            mixin(enumMixinStr_OCSP_F_OCSP_CHECK_ISSUER);
        }
    }




    static if(!is(typeof(OCSP_F_OCSP_CHECK_IDS))) {
        private enum enumMixinStr_OCSP_F_OCSP_CHECK_IDS = `enum OCSP_F_OCSP_CHECK_IDS = 107;`;
        static if(is(typeof({ mixin(enumMixinStr_OCSP_F_OCSP_CHECK_IDS); }))) {
            mixin(enumMixinStr_OCSP_F_OCSP_CHECK_IDS);
        }
    }




    static if(!is(typeof(OCSP_F_OCSP_CHECK_DELEGATED))) {
        private enum enumMixinStr_OCSP_F_OCSP_CHECK_DELEGATED = `enum OCSP_F_OCSP_CHECK_DELEGATED = 106;`;
        static if(is(typeof({ mixin(enumMixinStr_OCSP_F_OCSP_CHECK_DELEGATED); }))) {
            mixin(enumMixinStr_OCSP_F_OCSP_CHECK_DELEGATED);
        }
    }




    static if(!is(typeof(OCSP_F_OCSP_CERT_ID_NEW))) {
        private enum enumMixinStr_OCSP_F_OCSP_CERT_ID_NEW = `enum OCSP_F_OCSP_CERT_ID_NEW = 101;`;
        static if(is(typeof({ mixin(enumMixinStr_OCSP_F_OCSP_CERT_ID_NEW); }))) {
            mixin(enumMixinStr_OCSP_F_OCSP_CERT_ID_NEW);
        }
    }




    static if(!is(typeof(OCSP_F_OCSP_BASIC_VERIFY))) {
        private enum enumMixinStr_OCSP_F_OCSP_BASIC_VERIFY = `enum OCSP_F_OCSP_BASIC_VERIFY = 105;`;
        static if(is(typeof({ mixin(enumMixinStr_OCSP_F_OCSP_BASIC_VERIFY); }))) {
            mixin(enumMixinStr_OCSP_F_OCSP_BASIC_VERIFY);
        }
    }




    static if(!is(typeof(OCSP_F_OCSP_BASIC_SIGN))) {
        private enum enumMixinStr_OCSP_F_OCSP_BASIC_SIGN = `enum OCSP_F_OCSP_BASIC_SIGN = 104;`;
        static if(is(typeof({ mixin(enumMixinStr_OCSP_F_OCSP_BASIC_SIGN); }))) {
            mixin(enumMixinStr_OCSP_F_OCSP_BASIC_SIGN);
        }
    }




    static if(!is(typeof(OCSP_F_OCSP_BASIC_ADD1_STATUS))) {
        private enum enumMixinStr_OCSP_F_OCSP_BASIC_ADD1_STATUS = `enum OCSP_F_OCSP_BASIC_ADD1_STATUS = 103;`;
        static if(is(typeof({ mixin(enumMixinStr_OCSP_F_OCSP_BASIC_ADD1_STATUS); }))) {
            mixin(enumMixinStr_OCSP_F_OCSP_BASIC_ADD1_STATUS);
        }
    }




    static if(!is(typeof(OCSP_F_D2I_OCSP_NONCE))) {
        private enum enumMixinStr_OCSP_F_D2I_OCSP_NONCE = `enum OCSP_F_D2I_OCSP_NONCE = 102;`;
        static if(is(typeof({ mixin(enumMixinStr_OCSP_F_D2I_OCSP_NONCE); }))) {
            mixin(enumMixinStr_OCSP_F_D2I_OCSP_NONCE);
        }
    }
    static if(!is(typeof(PEM_STRING_OCSP_RESPONSE))) {
        private enum enumMixinStr_PEM_STRING_OCSP_RESPONSE = `enum PEM_STRING_OCSP_RESPONSE = "OCSP RESPONSE";`;
        static if(is(typeof({ mixin(enumMixinStr_PEM_STRING_OCSP_RESPONSE); }))) {
            mixin(enumMixinStr_PEM_STRING_OCSP_RESPONSE);
        }
    }




    static if(!is(typeof(PEM_STRING_OCSP_REQUEST))) {
        private enum enumMixinStr_PEM_STRING_OCSP_REQUEST = `enum PEM_STRING_OCSP_REQUEST = "OCSP REQUEST";`;
        static if(is(typeof({ mixin(enumMixinStr_PEM_STRING_OCSP_REQUEST); }))) {
            mixin(enumMixinStr_PEM_STRING_OCSP_REQUEST);
        }
    }




    static if(!is(typeof(V_OCSP_CERTSTATUS_UNKNOWN))) {
        private enum enumMixinStr_V_OCSP_CERTSTATUS_UNKNOWN = `enum V_OCSP_CERTSTATUS_UNKNOWN = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_V_OCSP_CERTSTATUS_UNKNOWN); }))) {
            mixin(enumMixinStr_V_OCSP_CERTSTATUS_UNKNOWN);
        }
    }




    static if(!is(typeof(V_OCSP_CERTSTATUS_REVOKED))) {
        private enum enumMixinStr_V_OCSP_CERTSTATUS_REVOKED = `enum V_OCSP_CERTSTATUS_REVOKED = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_V_OCSP_CERTSTATUS_REVOKED); }))) {
            mixin(enumMixinStr_V_OCSP_CERTSTATUS_REVOKED);
        }
    }




    static if(!is(typeof(V_OCSP_CERTSTATUS_GOOD))) {
        private enum enumMixinStr_V_OCSP_CERTSTATUS_GOOD = `enum V_OCSP_CERTSTATUS_GOOD = 0;`;
        static if(is(typeof({ mixin(enumMixinStr_V_OCSP_CERTSTATUS_GOOD); }))) {
            mixin(enumMixinStr_V_OCSP_CERTSTATUS_GOOD);
        }
    }




    static if(!is(typeof(V_OCSP_RESPID_KEY))) {
        private enum enumMixinStr_V_OCSP_RESPID_KEY = `enum V_OCSP_RESPID_KEY = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_V_OCSP_RESPID_KEY); }))) {
            mixin(enumMixinStr_V_OCSP_RESPID_KEY);
        }
    }




    static if(!is(typeof(V_OCSP_RESPID_NAME))) {
        private enum enumMixinStr_V_OCSP_RESPID_NAME = `enum V_OCSP_RESPID_NAME = 0;`;
        static if(is(typeof({ mixin(enumMixinStr_V_OCSP_RESPID_NAME); }))) {
            mixin(enumMixinStr_V_OCSP_RESPID_NAME);
        }
    }




    static if(!is(typeof(OCSP_RESPONSE_STATUS_UNAUTHORIZED))) {
        private enum enumMixinStr_OCSP_RESPONSE_STATUS_UNAUTHORIZED = `enum OCSP_RESPONSE_STATUS_UNAUTHORIZED = 6;`;
        static if(is(typeof({ mixin(enumMixinStr_OCSP_RESPONSE_STATUS_UNAUTHORIZED); }))) {
            mixin(enumMixinStr_OCSP_RESPONSE_STATUS_UNAUTHORIZED);
        }
    }




    static if(!is(typeof(OCSP_RESPONSE_STATUS_SIGREQUIRED))) {
        private enum enumMixinStr_OCSP_RESPONSE_STATUS_SIGREQUIRED = `enum OCSP_RESPONSE_STATUS_SIGREQUIRED = 5;`;
        static if(is(typeof({ mixin(enumMixinStr_OCSP_RESPONSE_STATUS_SIGREQUIRED); }))) {
            mixin(enumMixinStr_OCSP_RESPONSE_STATUS_SIGREQUIRED);
        }
    }




    static if(!is(typeof(OCSP_RESPONSE_STATUS_TRYLATER))) {
        private enum enumMixinStr_OCSP_RESPONSE_STATUS_TRYLATER = `enum OCSP_RESPONSE_STATUS_TRYLATER = 3;`;
        static if(is(typeof({ mixin(enumMixinStr_OCSP_RESPONSE_STATUS_TRYLATER); }))) {
            mixin(enumMixinStr_OCSP_RESPONSE_STATUS_TRYLATER);
        }
    }




    static if(!is(typeof(OCSP_RESPONSE_STATUS_INTERNALERROR))) {
        private enum enumMixinStr_OCSP_RESPONSE_STATUS_INTERNALERROR = `enum OCSP_RESPONSE_STATUS_INTERNALERROR = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_OCSP_RESPONSE_STATUS_INTERNALERROR); }))) {
            mixin(enumMixinStr_OCSP_RESPONSE_STATUS_INTERNALERROR);
        }
    }




    static if(!is(typeof(OCSP_RESPONSE_STATUS_MALFORMEDREQUEST))) {
        private enum enumMixinStr_OCSP_RESPONSE_STATUS_MALFORMEDREQUEST = `enum OCSP_RESPONSE_STATUS_MALFORMEDREQUEST = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_OCSP_RESPONSE_STATUS_MALFORMEDREQUEST); }))) {
            mixin(enumMixinStr_OCSP_RESPONSE_STATUS_MALFORMEDREQUEST);
        }
    }




    static if(!is(typeof(OCSP_RESPONSE_STATUS_SUCCESSFUL))) {
        private enum enumMixinStr_OCSP_RESPONSE_STATUS_SUCCESSFUL = `enum OCSP_RESPONSE_STATUS_SUCCESSFUL = 0;`;
        static if(is(typeof({ mixin(enumMixinStr_OCSP_RESPONSE_STATUS_SUCCESSFUL); }))) {
            mixin(enumMixinStr_OCSP_RESPONSE_STATUS_SUCCESSFUL);
        }
    }




    static if(!is(typeof(OCSP_NOTIME))) {
        private enum enumMixinStr_OCSP_NOTIME = `enum OCSP_NOTIME = 0x800;`;
        static if(is(typeof({ mixin(enumMixinStr_OCSP_NOTIME); }))) {
            mixin(enumMixinStr_OCSP_NOTIME);
        }
    }




    static if(!is(typeof(OCSP_RESPID_KEY))) {
        private enum enumMixinStr_OCSP_RESPID_KEY = `enum OCSP_RESPID_KEY = 0x400;`;
        static if(is(typeof({ mixin(enumMixinStr_OCSP_RESPID_KEY); }))) {
            mixin(enumMixinStr_OCSP_RESPID_KEY);
        }
    }




    static if(!is(typeof(OCSP_TRUSTOTHER))) {
        private enum enumMixinStr_OCSP_TRUSTOTHER = `enum OCSP_TRUSTOTHER = 0x200;`;
        static if(is(typeof({ mixin(enumMixinStr_OCSP_TRUSTOTHER); }))) {
            mixin(enumMixinStr_OCSP_TRUSTOTHER);
        }
    }




    static if(!is(typeof(OCSP_NOCHECKS))) {
        private enum enumMixinStr_OCSP_NOCHECKS = `enum OCSP_NOCHECKS = 0x100;`;
        static if(is(typeof({ mixin(enumMixinStr_OCSP_NOCHECKS); }))) {
            mixin(enumMixinStr_OCSP_NOCHECKS);
        }
    }




    static if(!is(typeof(OCSP_NODELEGATED))) {
        private enum enumMixinStr_OCSP_NODELEGATED = `enum OCSP_NODELEGATED = 0x80;`;
        static if(is(typeof({ mixin(enumMixinStr_OCSP_NODELEGATED); }))) {
            mixin(enumMixinStr_OCSP_NODELEGATED);
        }
    }




    static if(!is(typeof(OCSP_NOCASIGN))) {
        private enum enumMixinStr_OCSP_NOCASIGN = `enum OCSP_NOCASIGN = 0x40;`;
        static if(is(typeof({ mixin(enumMixinStr_OCSP_NOCASIGN); }))) {
            mixin(enumMixinStr_OCSP_NOCASIGN);
        }
    }




    static if(!is(typeof(OCSP_NOEXPLICIT))) {
        private enum enumMixinStr_OCSP_NOEXPLICIT = `enum OCSP_NOEXPLICIT = 0x20;`;
        static if(is(typeof({ mixin(enumMixinStr_OCSP_NOEXPLICIT); }))) {
            mixin(enumMixinStr_OCSP_NOEXPLICIT);
        }
    }




    static if(!is(typeof(OCSP_NOVERIFY))) {
        private enum enumMixinStr_OCSP_NOVERIFY = `enum OCSP_NOVERIFY = 0x10;`;
        static if(is(typeof({ mixin(enumMixinStr_OCSP_NOVERIFY); }))) {
            mixin(enumMixinStr_OCSP_NOVERIFY);
        }
    }




    static if(!is(typeof(OCSP_NOCHAIN))) {
        private enum enumMixinStr_OCSP_NOCHAIN = `enum OCSP_NOCHAIN = 0x8;`;
        static if(is(typeof({ mixin(enumMixinStr_OCSP_NOCHAIN); }))) {
            mixin(enumMixinStr_OCSP_NOCHAIN);
        }
    }




    static if(!is(typeof(OCSP_NOSIGS))) {
        private enum enumMixinStr_OCSP_NOSIGS = `enum OCSP_NOSIGS = 0x4;`;
        static if(is(typeof({ mixin(enumMixinStr_OCSP_NOSIGS); }))) {
            mixin(enumMixinStr_OCSP_NOSIGS);
        }
    }




    static if(!is(typeof(OCSP_NOINTERN))) {
        private enum enumMixinStr_OCSP_NOINTERN = `enum OCSP_NOINTERN = 0x2;`;
        static if(is(typeof({ mixin(enumMixinStr_OCSP_NOINTERN); }))) {
            mixin(enumMixinStr_OCSP_NOINTERN);
        }
    }




    static if(!is(typeof(OCSP_NOCERTS))) {
        private enum enumMixinStr_OCSP_NOCERTS = `enum OCSP_NOCERTS = 0x1;`;
        static if(is(typeof({ mixin(enumMixinStr_OCSP_NOCERTS); }))) {
            mixin(enumMixinStr_OCSP_NOCERTS);
        }
    }




    static if(!is(typeof(OCSP_DEFAULT_NONCE_LENGTH))) {
        private enum enumMixinStr_OCSP_DEFAULT_NONCE_LENGTH = `enum OCSP_DEFAULT_NONCE_LENGTH = 16;`;
        static if(is(typeof({ mixin(enumMixinStr_OCSP_DEFAULT_NONCE_LENGTH); }))) {
            mixin(enumMixinStr_OCSP_DEFAULT_NONCE_LENGTH);
        }
    }




    static if(!is(typeof(OCSP_REVOKED_STATUS_REMOVEFROMCRL))) {
        private enum enumMixinStr_OCSP_REVOKED_STATUS_REMOVEFROMCRL = `enum OCSP_REVOKED_STATUS_REMOVEFROMCRL = 8;`;
        static if(is(typeof({ mixin(enumMixinStr_OCSP_REVOKED_STATUS_REMOVEFROMCRL); }))) {
            mixin(enumMixinStr_OCSP_REVOKED_STATUS_REMOVEFROMCRL);
        }
    }




    static if(!is(typeof(OCSP_REVOKED_STATUS_CERTIFICATEHOLD))) {
        private enum enumMixinStr_OCSP_REVOKED_STATUS_CERTIFICATEHOLD = `enum OCSP_REVOKED_STATUS_CERTIFICATEHOLD = 6;`;
        static if(is(typeof({ mixin(enumMixinStr_OCSP_REVOKED_STATUS_CERTIFICATEHOLD); }))) {
            mixin(enumMixinStr_OCSP_REVOKED_STATUS_CERTIFICATEHOLD);
        }
    }




    static if(!is(typeof(OCSP_REVOKED_STATUS_CESSATIONOFOPERATION))) {
        private enum enumMixinStr_OCSP_REVOKED_STATUS_CESSATIONOFOPERATION = `enum OCSP_REVOKED_STATUS_CESSATIONOFOPERATION = 5;`;
        static if(is(typeof({ mixin(enumMixinStr_OCSP_REVOKED_STATUS_CESSATIONOFOPERATION); }))) {
            mixin(enumMixinStr_OCSP_REVOKED_STATUS_CESSATIONOFOPERATION);
        }
    }




    static if(!is(typeof(OCSP_REVOKED_STATUS_SUPERSEDED))) {
        private enum enumMixinStr_OCSP_REVOKED_STATUS_SUPERSEDED = `enum OCSP_REVOKED_STATUS_SUPERSEDED = 4;`;
        static if(is(typeof({ mixin(enumMixinStr_OCSP_REVOKED_STATUS_SUPERSEDED); }))) {
            mixin(enumMixinStr_OCSP_REVOKED_STATUS_SUPERSEDED);
        }
    }
    static if(!is(typeof(OCSP_REVOKED_STATUS_AFFILIATIONCHANGED))) {
        private enum enumMixinStr_OCSP_REVOKED_STATUS_AFFILIATIONCHANGED = `enum OCSP_REVOKED_STATUS_AFFILIATIONCHANGED = 3;`;
        static if(is(typeof({ mixin(enumMixinStr_OCSP_REVOKED_STATUS_AFFILIATIONCHANGED); }))) {
            mixin(enumMixinStr_OCSP_REVOKED_STATUS_AFFILIATIONCHANGED);
        }
    }




    static if(!is(typeof(OCSP_REVOKED_STATUS_CACOMPROMISE))) {
        private enum enumMixinStr_OCSP_REVOKED_STATUS_CACOMPROMISE = `enum OCSP_REVOKED_STATUS_CACOMPROMISE = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_OCSP_REVOKED_STATUS_CACOMPROMISE); }))) {
            mixin(enumMixinStr_OCSP_REVOKED_STATUS_CACOMPROMISE);
        }
    }




    static if(!is(typeof(SSL_KEY_UPDATE_NONE))) {
        private enum enumMixinStr_SSL_KEY_UPDATE_NONE = `enum SSL_KEY_UPDATE_NONE = - 1;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_KEY_UPDATE_NONE); }))) {
            mixin(enumMixinStr_SSL_KEY_UPDATE_NONE);
        }
    }




    static if(!is(typeof(SSL_KEY_UPDATE_NOT_REQUESTED))) {
        private enum enumMixinStr_SSL_KEY_UPDATE_NOT_REQUESTED = `enum SSL_KEY_UPDATE_NOT_REQUESTED = 0;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_KEY_UPDATE_NOT_REQUESTED); }))) {
            mixin(enumMixinStr_SSL_KEY_UPDATE_NOT_REQUESTED);
        }
    }




    static if(!is(typeof(SSL_KEY_UPDATE_REQUESTED))) {
        private enum enumMixinStr_SSL_KEY_UPDATE_REQUESTED = `enum SSL_KEY_UPDATE_REQUESTED = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_KEY_UPDATE_REQUESTED); }))) {
            mixin(enumMixinStr_SSL_KEY_UPDATE_REQUESTED);
        }
    }




    static if(!is(typeof(OCSP_REVOKED_STATUS_KEYCOMPROMISE))) {
        private enum enumMixinStr_OCSP_REVOKED_STATUS_KEYCOMPROMISE = `enum OCSP_REVOKED_STATUS_KEYCOMPROMISE = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_OCSP_REVOKED_STATUS_KEYCOMPROMISE); }))) {
            mixin(enumMixinStr_OCSP_REVOKED_STATUS_KEYCOMPROMISE);
        }
    }




    static if(!is(typeof(OCSP_REVOKED_STATUS_UNSPECIFIED))) {
        private enum enumMixinStr_OCSP_REVOKED_STATUS_UNSPECIFIED = `enum OCSP_REVOKED_STATUS_UNSPECIFIED = 0;`;
        static if(is(typeof({ mixin(enumMixinStr_OCSP_REVOKED_STATUS_UNSPECIFIED); }))) {
            mixin(enumMixinStr_OCSP_REVOKED_STATUS_UNSPECIFIED);
        }
    }




    static if(!is(typeof(SSL_ST_CONNECT))) {
        private enum enumMixinStr_SSL_ST_CONNECT = `enum SSL_ST_CONNECT = 0x1000;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_ST_CONNECT); }))) {
            mixin(enumMixinStr_SSL_ST_CONNECT);
        }
    }




    static if(!is(typeof(SSL_ST_ACCEPT))) {
        private enum enumMixinStr_SSL_ST_ACCEPT = `enum SSL_ST_ACCEPT = 0x2000;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_ST_ACCEPT); }))) {
            mixin(enumMixinStr_SSL_ST_ACCEPT);
        }
    }




    static if(!is(typeof(SSL_ST_MASK))) {
        private enum enumMixinStr_SSL_ST_MASK = `enum SSL_ST_MASK = 0x0FFF;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_ST_MASK); }))) {
            mixin(enumMixinStr_SSL_ST_MASK);
        }
    }




    static if(!is(typeof(SSL_CB_LOOP))) {
        private enum enumMixinStr_SSL_CB_LOOP = `enum SSL_CB_LOOP = 0x01;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CB_LOOP); }))) {
            mixin(enumMixinStr_SSL_CB_LOOP);
        }
    }




    static if(!is(typeof(SSL_CB_EXIT))) {
        private enum enumMixinStr_SSL_CB_EXIT = `enum SSL_CB_EXIT = 0x02;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CB_EXIT); }))) {
            mixin(enumMixinStr_SSL_CB_EXIT);
        }
    }




    static if(!is(typeof(SSL_CB_READ))) {
        private enum enumMixinStr_SSL_CB_READ = `enum SSL_CB_READ = 0x04;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CB_READ); }))) {
            mixin(enumMixinStr_SSL_CB_READ);
        }
    }




    static if(!is(typeof(SSL_CB_WRITE))) {
        private enum enumMixinStr_SSL_CB_WRITE = `enum SSL_CB_WRITE = 0x08;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CB_WRITE); }))) {
            mixin(enumMixinStr_SSL_CB_WRITE);
        }
    }




    static if(!is(typeof(SSL_CB_ALERT))) {
        private enum enumMixinStr_SSL_CB_ALERT = `enum SSL_CB_ALERT = 0x4000;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CB_ALERT); }))) {
            mixin(enumMixinStr_SSL_CB_ALERT);
        }
    }




    static if(!is(typeof(SSL_CB_READ_ALERT))) {
        private enum enumMixinStr_SSL_CB_READ_ALERT = `enum SSL_CB_READ_ALERT = ( 0x4000 | 0x04 );`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CB_READ_ALERT); }))) {
            mixin(enumMixinStr_SSL_CB_READ_ALERT);
        }
    }




    static if(!is(typeof(SSL_CB_WRITE_ALERT))) {
        private enum enumMixinStr_SSL_CB_WRITE_ALERT = `enum SSL_CB_WRITE_ALERT = ( 0x4000 | 0x08 );`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CB_WRITE_ALERT); }))) {
            mixin(enumMixinStr_SSL_CB_WRITE_ALERT);
        }
    }




    static if(!is(typeof(SSL_CB_ACCEPT_LOOP))) {
        private enum enumMixinStr_SSL_CB_ACCEPT_LOOP = `enum SSL_CB_ACCEPT_LOOP = ( 0x2000 | 0x01 );`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CB_ACCEPT_LOOP); }))) {
            mixin(enumMixinStr_SSL_CB_ACCEPT_LOOP);
        }
    }




    static if(!is(typeof(SSL_CB_ACCEPT_EXIT))) {
        private enum enumMixinStr_SSL_CB_ACCEPT_EXIT = `enum SSL_CB_ACCEPT_EXIT = ( 0x2000 | 0x02 );`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CB_ACCEPT_EXIT); }))) {
            mixin(enumMixinStr_SSL_CB_ACCEPT_EXIT);
        }
    }




    static if(!is(typeof(SSL_CB_CONNECT_LOOP))) {
        private enum enumMixinStr_SSL_CB_CONNECT_LOOP = `enum SSL_CB_CONNECT_LOOP = ( 0x1000 | 0x01 );`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CB_CONNECT_LOOP); }))) {
            mixin(enumMixinStr_SSL_CB_CONNECT_LOOP);
        }
    }




    static if(!is(typeof(SSL_CB_CONNECT_EXIT))) {
        private enum enumMixinStr_SSL_CB_CONNECT_EXIT = `enum SSL_CB_CONNECT_EXIT = ( 0x1000 | 0x02 );`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CB_CONNECT_EXIT); }))) {
            mixin(enumMixinStr_SSL_CB_CONNECT_EXIT);
        }
    }




    static if(!is(typeof(SSL_CB_HANDSHAKE_START))) {
        private enum enumMixinStr_SSL_CB_HANDSHAKE_START = `enum SSL_CB_HANDSHAKE_START = 0x10;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CB_HANDSHAKE_START); }))) {
            mixin(enumMixinStr_SSL_CB_HANDSHAKE_START);
        }
    }




    static if(!is(typeof(SSL_CB_HANDSHAKE_DONE))) {
        private enum enumMixinStr_SSL_CB_HANDSHAKE_DONE = `enum SSL_CB_HANDSHAKE_DONE = 0x20;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CB_HANDSHAKE_DONE); }))) {
            mixin(enumMixinStr_SSL_CB_HANDSHAKE_DONE);
        }
    }
    static if(!is(typeof(OCSP_REVOKED_STATUS_NOSTATUS))) {
        private enum enumMixinStr_OCSP_REVOKED_STATUS_NOSTATUS = `enum OCSP_REVOKED_STATUS_NOSTATUS = - 1;`;
        static if(is(typeof({ mixin(enumMixinStr_OCSP_REVOKED_STATUS_NOSTATUS); }))) {
            mixin(enumMixinStr_OCSP_REVOKED_STATUS_NOSTATUS);
        }
    }






    static if(!is(typeof(SSL_ST_READ_HEADER))) {
        private enum enumMixinStr_SSL_ST_READ_HEADER = `enum SSL_ST_READ_HEADER = 0xF0;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_ST_READ_HEADER); }))) {
            mixin(enumMixinStr_SSL_ST_READ_HEADER);
        }
    }




    static if(!is(typeof(SSL_ST_READ_BODY))) {
        private enum enumMixinStr_SSL_ST_READ_BODY = `enum SSL_ST_READ_BODY = 0xF1;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_ST_READ_BODY); }))) {
            mixin(enumMixinStr_SSL_ST_READ_BODY);
        }
    }




    static if(!is(typeof(SSL_ST_READ_DONE))) {
        private enum enumMixinStr_SSL_ST_READ_DONE = `enum SSL_ST_READ_DONE = 0xF2;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_ST_READ_DONE); }))) {
            mixin(enumMixinStr_SSL_ST_READ_DONE);
        }
    }




    static if(!is(typeof(SSL_VERIFY_NONE))) {
        private enum enumMixinStr_SSL_VERIFY_NONE = `enum SSL_VERIFY_NONE = 0x00;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_VERIFY_NONE); }))) {
            mixin(enumMixinStr_SSL_VERIFY_NONE);
        }
    }




    static if(!is(typeof(SSL_VERIFY_PEER))) {
        private enum enumMixinStr_SSL_VERIFY_PEER = `enum SSL_VERIFY_PEER = 0x01;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_VERIFY_PEER); }))) {
            mixin(enumMixinStr_SSL_VERIFY_PEER);
        }
    }




    static if(!is(typeof(SSL_VERIFY_FAIL_IF_NO_PEER_CERT))) {
        private enum enumMixinStr_SSL_VERIFY_FAIL_IF_NO_PEER_CERT = `enum SSL_VERIFY_FAIL_IF_NO_PEER_CERT = 0x02;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_VERIFY_FAIL_IF_NO_PEER_CERT); }))) {
            mixin(enumMixinStr_SSL_VERIFY_FAIL_IF_NO_PEER_CERT);
        }
    }




    static if(!is(typeof(SSL_VERIFY_CLIENT_ONCE))) {
        private enum enumMixinStr_SSL_VERIFY_CLIENT_ONCE = `enum SSL_VERIFY_CLIENT_ONCE = 0x04;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_VERIFY_CLIENT_ONCE); }))) {
            mixin(enumMixinStr_SSL_VERIFY_CLIENT_ONCE);
        }
    }




    static if(!is(typeof(SSL_VERIFY_POST_HANDSHAKE))) {
        private enum enumMixinStr_SSL_VERIFY_POST_HANDSHAKE = `enum SSL_VERIFY_POST_HANDSHAKE = 0x08;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_VERIFY_POST_HANDSHAKE); }))) {
            mixin(enumMixinStr_SSL_VERIFY_POST_HANDSHAKE);
        }
    }
    static if(!is(typeof(SSL_AD_REASON_OFFSET))) {
        private enum enumMixinStr_SSL_AD_REASON_OFFSET = `enum SSL_AD_REASON_OFFSET = 1000;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_AD_REASON_OFFSET); }))) {
            mixin(enumMixinStr_SSL_AD_REASON_OFFSET);
        }
    }




    static if(!is(typeof(SSL_AD_CLOSE_NOTIFY))) {
        private enum enumMixinStr_SSL_AD_CLOSE_NOTIFY = `enum SSL_AD_CLOSE_NOTIFY = 0;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_AD_CLOSE_NOTIFY); }))) {
            mixin(enumMixinStr_SSL_AD_CLOSE_NOTIFY);
        }
    }




    static if(!is(typeof(SSL_AD_UNEXPECTED_MESSAGE))) {
        private enum enumMixinStr_SSL_AD_UNEXPECTED_MESSAGE = `enum SSL_AD_UNEXPECTED_MESSAGE = 10;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_AD_UNEXPECTED_MESSAGE); }))) {
            mixin(enumMixinStr_SSL_AD_UNEXPECTED_MESSAGE);
        }
    }




    static if(!is(typeof(SSL_AD_BAD_RECORD_MAC))) {
        private enum enumMixinStr_SSL_AD_BAD_RECORD_MAC = `enum SSL_AD_BAD_RECORD_MAC = 20;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_AD_BAD_RECORD_MAC); }))) {
            mixin(enumMixinStr_SSL_AD_BAD_RECORD_MAC);
        }
    }




    static if(!is(typeof(SSL_AD_DECRYPTION_FAILED))) {
        private enum enumMixinStr_SSL_AD_DECRYPTION_FAILED = `enum SSL_AD_DECRYPTION_FAILED = 21;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_AD_DECRYPTION_FAILED); }))) {
            mixin(enumMixinStr_SSL_AD_DECRYPTION_FAILED);
        }
    }




    static if(!is(typeof(SSL_AD_RECORD_OVERFLOW))) {
        private enum enumMixinStr_SSL_AD_RECORD_OVERFLOW = `enum SSL_AD_RECORD_OVERFLOW = 22;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_AD_RECORD_OVERFLOW); }))) {
            mixin(enumMixinStr_SSL_AD_RECORD_OVERFLOW);
        }
    }




    static if(!is(typeof(SSL_AD_DECOMPRESSION_FAILURE))) {
        private enum enumMixinStr_SSL_AD_DECOMPRESSION_FAILURE = `enum SSL_AD_DECOMPRESSION_FAILURE = 30;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_AD_DECOMPRESSION_FAILURE); }))) {
            mixin(enumMixinStr_SSL_AD_DECOMPRESSION_FAILURE);
        }
    }




    static if(!is(typeof(SSL_AD_HANDSHAKE_FAILURE))) {
        private enum enumMixinStr_SSL_AD_HANDSHAKE_FAILURE = `enum SSL_AD_HANDSHAKE_FAILURE = 40;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_AD_HANDSHAKE_FAILURE); }))) {
            mixin(enumMixinStr_SSL_AD_HANDSHAKE_FAILURE);
        }
    }




    static if(!is(typeof(SSL_AD_NO_CERTIFICATE))) {
        private enum enumMixinStr_SSL_AD_NO_CERTIFICATE = `enum SSL_AD_NO_CERTIFICATE = 41;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_AD_NO_CERTIFICATE); }))) {
            mixin(enumMixinStr_SSL_AD_NO_CERTIFICATE);
        }
    }




    static if(!is(typeof(SSL_AD_BAD_CERTIFICATE))) {
        private enum enumMixinStr_SSL_AD_BAD_CERTIFICATE = `enum SSL_AD_BAD_CERTIFICATE = 42;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_AD_BAD_CERTIFICATE); }))) {
            mixin(enumMixinStr_SSL_AD_BAD_CERTIFICATE);
        }
    }




    static if(!is(typeof(SSL_AD_UNSUPPORTED_CERTIFICATE))) {
        private enum enumMixinStr_SSL_AD_UNSUPPORTED_CERTIFICATE = `enum SSL_AD_UNSUPPORTED_CERTIFICATE = 43;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_AD_UNSUPPORTED_CERTIFICATE); }))) {
            mixin(enumMixinStr_SSL_AD_UNSUPPORTED_CERTIFICATE);
        }
    }




    static if(!is(typeof(SSL_AD_CERTIFICATE_REVOKED))) {
        private enum enumMixinStr_SSL_AD_CERTIFICATE_REVOKED = `enum SSL_AD_CERTIFICATE_REVOKED = 44;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_AD_CERTIFICATE_REVOKED); }))) {
            mixin(enumMixinStr_SSL_AD_CERTIFICATE_REVOKED);
        }
    }




    static if(!is(typeof(SSL_AD_CERTIFICATE_EXPIRED))) {
        private enum enumMixinStr_SSL_AD_CERTIFICATE_EXPIRED = `enum SSL_AD_CERTIFICATE_EXPIRED = 45;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_AD_CERTIFICATE_EXPIRED); }))) {
            mixin(enumMixinStr_SSL_AD_CERTIFICATE_EXPIRED);
        }
    }




    static if(!is(typeof(SSL_AD_CERTIFICATE_UNKNOWN))) {
        private enum enumMixinStr_SSL_AD_CERTIFICATE_UNKNOWN = `enum SSL_AD_CERTIFICATE_UNKNOWN = 46;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_AD_CERTIFICATE_UNKNOWN); }))) {
            mixin(enumMixinStr_SSL_AD_CERTIFICATE_UNKNOWN);
        }
    }




    static if(!is(typeof(SSL_AD_ILLEGAL_PARAMETER))) {
        private enum enumMixinStr_SSL_AD_ILLEGAL_PARAMETER = `enum SSL_AD_ILLEGAL_PARAMETER = 47;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_AD_ILLEGAL_PARAMETER); }))) {
            mixin(enumMixinStr_SSL_AD_ILLEGAL_PARAMETER);
        }
    }




    static if(!is(typeof(SSL_AD_UNKNOWN_CA))) {
        private enum enumMixinStr_SSL_AD_UNKNOWN_CA = `enum SSL_AD_UNKNOWN_CA = 48;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_AD_UNKNOWN_CA); }))) {
            mixin(enumMixinStr_SSL_AD_UNKNOWN_CA);
        }
    }




    static if(!is(typeof(SSL_AD_ACCESS_DENIED))) {
        private enum enumMixinStr_SSL_AD_ACCESS_DENIED = `enum SSL_AD_ACCESS_DENIED = 49;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_AD_ACCESS_DENIED); }))) {
            mixin(enumMixinStr_SSL_AD_ACCESS_DENIED);
        }
    }




    static if(!is(typeof(SSL_AD_DECODE_ERROR))) {
        private enum enumMixinStr_SSL_AD_DECODE_ERROR = `enum SSL_AD_DECODE_ERROR = 50;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_AD_DECODE_ERROR); }))) {
            mixin(enumMixinStr_SSL_AD_DECODE_ERROR);
        }
    }




    static if(!is(typeof(SSL_AD_DECRYPT_ERROR))) {
        private enum enumMixinStr_SSL_AD_DECRYPT_ERROR = `enum SSL_AD_DECRYPT_ERROR = 51;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_AD_DECRYPT_ERROR); }))) {
            mixin(enumMixinStr_SSL_AD_DECRYPT_ERROR);
        }
    }




    static if(!is(typeof(SSL_AD_EXPORT_RESTRICTION))) {
        private enum enumMixinStr_SSL_AD_EXPORT_RESTRICTION = `enum SSL_AD_EXPORT_RESTRICTION = 60;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_AD_EXPORT_RESTRICTION); }))) {
            mixin(enumMixinStr_SSL_AD_EXPORT_RESTRICTION);
        }
    }




    static if(!is(typeof(SSL_AD_PROTOCOL_VERSION))) {
        private enum enumMixinStr_SSL_AD_PROTOCOL_VERSION = `enum SSL_AD_PROTOCOL_VERSION = 70;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_AD_PROTOCOL_VERSION); }))) {
            mixin(enumMixinStr_SSL_AD_PROTOCOL_VERSION);
        }
    }




    static if(!is(typeof(SSL_AD_INSUFFICIENT_SECURITY))) {
        private enum enumMixinStr_SSL_AD_INSUFFICIENT_SECURITY = `enum SSL_AD_INSUFFICIENT_SECURITY = 71;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_AD_INSUFFICIENT_SECURITY); }))) {
            mixin(enumMixinStr_SSL_AD_INSUFFICIENT_SECURITY);
        }
    }




    static if(!is(typeof(SSL_AD_INTERNAL_ERROR))) {
        private enum enumMixinStr_SSL_AD_INTERNAL_ERROR = `enum SSL_AD_INTERNAL_ERROR = 80;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_AD_INTERNAL_ERROR); }))) {
            mixin(enumMixinStr_SSL_AD_INTERNAL_ERROR);
        }
    }




    static if(!is(typeof(SSL_AD_USER_CANCELLED))) {
        private enum enumMixinStr_SSL_AD_USER_CANCELLED = `enum SSL_AD_USER_CANCELLED = 90;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_AD_USER_CANCELLED); }))) {
            mixin(enumMixinStr_SSL_AD_USER_CANCELLED);
        }
    }




    static if(!is(typeof(SSL_AD_NO_RENEGOTIATION))) {
        private enum enumMixinStr_SSL_AD_NO_RENEGOTIATION = `enum SSL_AD_NO_RENEGOTIATION = 100;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_AD_NO_RENEGOTIATION); }))) {
            mixin(enumMixinStr_SSL_AD_NO_RENEGOTIATION);
        }
    }




    static if(!is(typeof(SSL_AD_MISSING_EXTENSION))) {
        private enum enumMixinStr_SSL_AD_MISSING_EXTENSION = `enum SSL_AD_MISSING_EXTENSION = TLS13_AD_MISSING_EXTENSION;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_AD_MISSING_EXTENSION); }))) {
            mixin(enumMixinStr_SSL_AD_MISSING_EXTENSION);
        }
    }




    static if(!is(typeof(SSL_AD_CERTIFICATE_REQUIRED))) {
        private enum enumMixinStr_SSL_AD_CERTIFICATE_REQUIRED = `enum SSL_AD_CERTIFICATE_REQUIRED = TLS13_AD_CERTIFICATE_REQUIRED;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_AD_CERTIFICATE_REQUIRED); }))) {
            mixin(enumMixinStr_SSL_AD_CERTIFICATE_REQUIRED);
        }
    }




    static if(!is(typeof(SSL_AD_UNSUPPORTED_EXTENSION))) {
        private enum enumMixinStr_SSL_AD_UNSUPPORTED_EXTENSION = `enum SSL_AD_UNSUPPORTED_EXTENSION = 110;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_AD_UNSUPPORTED_EXTENSION); }))) {
            mixin(enumMixinStr_SSL_AD_UNSUPPORTED_EXTENSION);
        }
    }




    static if(!is(typeof(SSL_AD_CERTIFICATE_UNOBTAINABLE))) {
        private enum enumMixinStr_SSL_AD_CERTIFICATE_UNOBTAINABLE = `enum SSL_AD_CERTIFICATE_UNOBTAINABLE = 111;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_AD_CERTIFICATE_UNOBTAINABLE); }))) {
            mixin(enumMixinStr_SSL_AD_CERTIFICATE_UNOBTAINABLE);
        }
    }




    static if(!is(typeof(SSL_AD_UNRECOGNIZED_NAME))) {
        private enum enumMixinStr_SSL_AD_UNRECOGNIZED_NAME = `enum SSL_AD_UNRECOGNIZED_NAME = 112;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_AD_UNRECOGNIZED_NAME); }))) {
            mixin(enumMixinStr_SSL_AD_UNRECOGNIZED_NAME);
        }
    }




    static if(!is(typeof(SSL_AD_BAD_CERTIFICATE_STATUS_RESPONSE))) {
        private enum enumMixinStr_SSL_AD_BAD_CERTIFICATE_STATUS_RESPONSE = `enum SSL_AD_BAD_CERTIFICATE_STATUS_RESPONSE = 113;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_AD_BAD_CERTIFICATE_STATUS_RESPONSE); }))) {
            mixin(enumMixinStr_SSL_AD_BAD_CERTIFICATE_STATUS_RESPONSE);
        }
    }




    static if(!is(typeof(SSL_AD_BAD_CERTIFICATE_HASH_VALUE))) {
        private enum enumMixinStr_SSL_AD_BAD_CERTIFICATE_HASH_VALUE = `enum SSL_AD_BAD_CERTIFICATE_HASH_VALUE = 114;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_AD_BAD_CERTIFICATE_HASH_VALUE); }))) {
            mixin(enumMixinStr_SSL_AD_BAD_CERTIFICATE_HASH_VALUE);
        }
    }




    static if(!is(typeof(SSL_AD_UNKNOWN_PSK_IDENTITY))) {
        private enum enumMixinStr_SSL_AD_UNKNOWN_PSK_IDENTITY = `enum SSL_AD_UNKNOWN_PSK_IDENTITY = 115;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_AD_UNKNOWN_PSK_IDENTITY); }))) {
            mixin(enumMixinStr_SSL_AD_UNKNOWN_PSK_IDENTITY);
        }
    }




    static if(!is(typeof(SSL_AD_INAPPROPRIATE_FALLBACK))) {
        private enum enumMixinStr_SSL_AD_INAPPROPRIATE_FALLBACK = `enum SSL_AD_INAPPROPRIATE_FALLBACK = 86;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_AD_INAPPROPRIATE_FALLBACK); }))) {
            mixin(enumMixinStr_SSL_AD_INAPPROPRIATE_FALLBACK);
        }
    }




    static if(!is(typeof(SSL_AD_NO_APPLICATION_PROTOCOL))) {
        private enum enumMixinStr_SSL_AD_NO_APPLICATION_PROTOCOL = `enum SSL_AD_NO_APPLICATION_PROTOCOL = 120;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_AD_NO_APPLICATION_PROTOCOL); }))) {
            mixin(enumMixinStr_SSL_AD_NO_APPLICATION_PROTOCOL);
        }
    }




    static if(!is(typeof(SSL_ERROR_NONE))) {
        private enum enumMixinStr_SSL_ERROR_NONE = `enum SSL_ERROR_NONE = 0;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_ERROR_NONE); }))) {
            mixin(enumMixinStr_SSL_ERROR_NONE);
        }
    }




    static if(!is(typeof(SSL_ERROR_SSL))) {
        private enum enumMixinStr_SSL_ERROR_SSL = `enum SSL_ERROR_SSL = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_ERROR_SSL); }))) {
            mixin(enumMixinStr_SSL_ERROR_SSL);
        }
    }




    static if(!is(typeof(SSL_ERROR_WANT_READ))) {
        private enum enumMixinStr_SSL_ERROR_WANT_READ = `enum SSL_ERROR_WANT_READ = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_ERROR_WANT_READ); }))) {
            mixin(enumMixinStr_SSL_ERROR_WANT_READ);
        }
    }




    static if(!is(typeof(SSL_ERROR_WANT_WRITE))) {
        private enum enumMixinStr_SSL_ERROR_WANT_WRITE = `enum SSL_ERROR_WANT_WRITE = 3;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_ERROR_WANT_WRITE); }))) {
            mixin(enumMixinStr_SSL_ERROR_WANT_WRITE);
        }
    }




    static if(!is(typeof(SSL_ERROR_WANT_X509_LOOKUP))) {
        private enum enumMixinStr_SSL_ERROR_WANT_X509_LOOKUP = `enum SSL_ERROR_WANT_X509_LOOKUP = 4;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_ERROR_WANT_X509_LOOKUP); }))) {
            mixin(enumMixinStr_SSL_ERROR_WANT_X509_LOOKUP);
        }
    }




    static if(!is(typeof(SSL_ERROR_SYSCALL))) {
        private enum enumMixinStr_SSL_ERROR_SYSCALL = `enum SSL_ERROR_SYSCALL = 5;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_ERROR_SYSCALL); }))) {
            mixin(enumMixinStr_SSL_ERROR_SYSCALL);
        }
    }




    static if(!is(typeof(SSL_ERROR_ZERO_RETURN))) {
        private enum enumMixinStr_SSL_ERROR_ZERO_RETURN = `enum SSL_ERROR_ZERO_RETURN = 6;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_ERROR_ZERO_RETURN); }))) {
            mixin(enumMixinStr_SSL_ERROR_ZERO_RETURN);
        }
    }




    static if(!is(typeof(SSL_ERROR_WANT_CONNECT))) {
        private enum enumMixinStr_SSL_ERROR_WANT_CONNECT = `enum SSL_ERROR_WANT_CONNECT = 7;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_ERROR_WANT_CONNECT); }))) {
            mixin(enumMixinStr_SSL_ERROR_WANT_CONNECT);
        }
    }




    static if(!is(typeof(SSL_ERROR_WANT_ACCEPT))) {
        private enum enumMixinStr_SSL_ERROR_WANT_ACCEPT = `enum SSL_ERROR_WANT_ACCEPT = 8;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_ERROR_WANT_ACCEPT); }))) {
            mixin(enumMixinStr_SSL_ERROR_WANT_ACCEPT);
        }
    }




    static if(!is(typeof(SSL_ERROR_WANT_ASYNC))) {
        private enum enumMixinStr_SSL_ERROR_WANT_ASYNC = `enum SSL_ERROR_WANT_ASYNC = 9;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_ERROR_WANT_ASYNC); }))) {
            mixin(enumMixinStr_SSL_ERROR_WANT_ASYNC);
        }
    }




    static if(!is(typeof(SSL_ERROR_WANT_ASYNC_JOB))) {
        private enum enumMixinStr_SSL_ERROR_WANT_ASYNC_JOB = `enum SSL_ERROR_WANT_ASYNC_JOB = 10;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_ERROR_WANT_ASYNC_JOB); }))) {
            mixin(enumMixinStr_SSL_ERROR_WANT_ASYNC_JOB);
        }
    }




    static if(!is(typeof(SSL_ERROR_WANT_CLIENT_HELLO_CB))) {
        private enum enumMixinStr_SSL_ERROR_WANT_CLIENT_HELLO_CB = `enum SSL_ERROR_WANT_CLIENT_HELLO_CB = 11;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_ERROR_WANT_CLIENT_HELLO_CB); }))) {
            mixin(enumMixinStr_SSL_ERROR_WANT_CLIENT_HELLO_CB);
        }
    }




    static if(!is(typeof(SSL_CTRL_SET_TMP_DH))) {
        private enum enumMixinStr_SSL_CTRL_SET_TMP_DH = `enum SSL_CTRL_SET_TMP_DH = 3;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CTRL_SET_TMP_DH); }))) {
            mixin(enumMixinStr_SSL_CTRL_SET_TMP_DH);
        }
    }




    static if(!is(typeof(SSL_CTRL_SET_TMP_ECDH))) {
        private enum enumMixinStr_SSL_CTRL_SET_TMP_ECDH = `enum SSL_CTRL_SET_TMP_ECDH = 4;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CTRL_SET_TMP_ECDH); }))) {
            mixin(enumMixinStr_SSL_CTRL_SET_TMP_ECDH);
        }
    }




    static if(!is(typeof(SSL_CTRL_SET_TMP_DH_CB))) {
        private enum enumMixinStr_SSL_CTRL_SET_TMP_DH_CB = `enum SSL_CTRL_SET_TMP_DH_CB = 6;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CTRL_SET_TMP_DH_CB); }))) {
            mixin(enumMixinStr_SSL_CTRL_SET_TMP_DH_CB);
        }
    }




    static if(!is(typeof(SSL_CTRL_GET_CLIENT_CERT_REQUEST))) {
        private enum enumMixinStr_SSL_CTRL_GET_CLIENT_CERT_REQUEST = `enum SSL_CTRL_GET_CLIENT_CERT_REQUEST = 9;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CTRL_GET_CLIENT_CERT_REQUEST); }))) {
            mixin(enumMixinStr_SSL_CTRL_GET_CLIENT_CERT_REQUEST);
        }
    }




    static if(!is(typeof(SSL_CTRL_GET_NUM_RENEGOTIATIONS))) {
        private enum enumMixinStr_SSL_CTRL_GET_NUM_RENEGOTIATIONS = `enum SSL_CTRL_GET_NUM_RENEGOTIATIONS = 10;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CTRL_GET_NUM_RENEGOTIATIONS); }))) {
            mixin(enumMixinStr_SSL_CTRL_GET_NUM_RENEGOTIATIONS);
        }
    }




    static if(!is(typeof(SSL_CTRL_CLEAR_NUM_RENEGOTIATIONS))) {
        private enum enumMixinStr_SSL_CTRL_CLEAR_NUM_RENEGOTIATIONS = `enum SSL_CTRL_CLEAR_NUM_RENEGOTIATIONS = 11;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CTRL_CLEAR_NUM_RENEGOTIATIONS); }))) {
            mixin(enumMixinStr_SSL_CTRL_CLEAR_NUM_RENEGOTIATIONS);
        }
    }




    static if(!is(typeof(SSL_CTRL_GET_TOTAL_RENEGOTIATIONS))) {
        private enum enumMixinStr_SSL_CTRL_GET_TOTAL_RENEGOTIATIONS = `enum SSL_CTRL_GET_TOTAL_RENEGOTIATIONS = 12;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CTRL_GET_TOTAL_RENEGOTIATIONS); }))) {
            mixin(enumMixinStr_SSL_CTRL_GET_TOTAL_RENEGOTIATIONS);
        }
    }




    static if(!is(typeof(SSL_CTRL_GET_FLAGS))) {
        private enum enumMixinStr_SSL_CTRL_GET_FLAGS = `enum SSL_CTRL_GET_FLAGS = 13;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CTRL_GET_FLAGS); }))) {
            mixin(enumMixinStr_SSL_CTRL_GET_FLAGS);
        }
    }




    static if(!is(typeof(SSL_CTRL_EXTRA_CHAIN_CERT))) {
        private enum enumMixinStr_SSL_CTRL_EXTRA_CHAIN_CERT = `enum SSL_CTRL_EXTRA_CHAIN_CERT = 14;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CTRL_EXTRA_CHAIN_CERT); }))) {
            mixin(enumMixinStr_SSL_CTRL_EXTRA_CHAIN_CERT);
        }
    }




    static if(!is(typeof(SSL_CTRL_SET_MSG_CALLBACK))) {
        private enum enumMixinStr_SSL_CTRL_SET_MSG_CALLBACK = `enum SSL_CTRL_SET_MSG_CALLBACK = 15;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CTRL_SET_MSG_CALLBACK); }))) {
            mixin(enumMixinStr_SSL_CTRL_SET_MSG_CALLBACK);
        }
    }




    static if(!is(typeof(SSL_CTRL_SET_MSG_CALLBACK_ARG))) {
        private enum enumMixinStr_SSL_CTRL_SET_MSG_CALLBACK_ARG = `enum SSL_CTRL_SET_MSG_CALLBACK_ARG = 16;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CTRL_SET_MSG_CALLBACK_ARG); }))) {
            mixin(enumMixinStr_SSL_CTRL_SET_MSG_CALLBACK_ARG);
        }
    }




    static if(!is(typeof(SSL_CTRL_SET_MTU))) {
        private enum enumMixinStr_SSL_CTRL_SET_MTU = `enum SSL_CTRL_SET_MTU = 17;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CTRL_SET_MTU); }))) {
            mixin(enumMixinStr_SSL_CTRL_SET_MTU);
        }
    }




    static if(!is(typeof(SSL_CTRL_SESS_NUMBER))) {
        private enum enumMixinStr_SSL_CTRL_SESS_NUMBER = `enum SSL_CTRL_SESS_NUMBER = 20;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CTRL_SESS_NUMBER); }))) {
            mixin(enumMixinStr_SSL_CTRL_SESS_NUMBER);
        }
    }




    static if(!is(typeof(SSL_CTRL_SESS_CONNECT))) {
        private enum enumMixinStr_SSL_CTRL_SESS_CONNECT = `enum SSL_CTRL_SESS_CONNECT = 21;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CTRL_SESS_CONNECT); }))) {
            mixin(enumMixinStr_SSL_CTRL_SESS_CONNECT);
        }
    }




    static if(!is(typeof(SSL_CTRL_SESS_CONNECT_GOOD))) {
        private enum enumMixinStr_SSL_CTRL_SESS_CONNECT_GOOD = `enum SSL_CTRL_SESS_CONNECT_GOOD = 22;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CTRL_SESS_CONNECT_GOOD); }))) {
            mixin(enumMixinStr_SSL_CTRL_SESS_CONNECT_GOOD);
        }
    }




    static if(!is(typeof(SSL_CTRL_SESS_CONNECT_RENEGOTIATE))) {
        private enum enumMixinStr_SSL_CTRL_SESS_CONNECT_RENEGOTIATE = `enum SSL_CTRL_SESS_CONNECT_RENEGOTIATE = 23;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CTRL_SESS_CONNECT_RENEGOTIATE); }))) {
            mixin(enumMixinStr_SSL_CTRL_SESS_CONNECT_RENEGOTIATE);
        }
    }




    static if(!is(typeof(SSL_CTRL_SESS_ACCEPT))) {
        private enum enumMixinStr_SSL_CTRL_SESS_ACCEPT = `enum SSL_CTRL_SESS_ACCEPT = 24;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CTRL_SESS_ACCEPT); }))) {
            mixin(enumMixinStr_SSL_CTRL_SESS_ACCEPT);
        }
    }




    static if(!is(typeof(SSL_CTRL_SESS_ACCEPT_GOOD))) {
        private enum enumMixinStr_SSL_CTRL_SESS_ACCEPT_GOOD = `enum SSL_CTRL_SESS_ACCEPT_GOOD = 25;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CTRL_SESS_ACCEPT_GOOD); }))) {
            mixin(enumMixinStr_SSL_CTRL_SESS_ACCEPT_GOOD);
        }
    }




    static if(!is(typeof(SSL_CTRL_SESS_ACCEPT_RENEGOTIATE))) {
        private enum enumMixinStr_SSL_CTRL_SESS_ACCEPT_RENEGOTIATE = `enum SSL_CTRL_SESS_ACCEPT_RENEGOTIATE = 26;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CTRL_SESS_ACCEPT_RENEGOTIATE); }))) {
            mixin(enumMixinStr_SSL_CTRL_SESS_ACCEPT_RENEGOTIATE);
        }
    }




    static if(!is(typeof(SSL_CTRL_SESS_HIT))) {
        private enum enumMixinStr_SSL_CTRL_SESS_HIT = `enum SSL_CTRL_SESS_HIT = 27;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CTRL_SESS_HIT); }))) {
            mixin(enumMixinStr_SSL_CTRL_SESS_HIT);
        }
    }




    static if(!is(typeof(SSL_CTRL_SESS_CB_HIT))) {
        private enum enumMixinStr_SSL_CTRL_SESS_CB_HIT = `enum SSL_CTRL_SESS_CB_HIT = 28;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CTRL_SESS_CB_HIT); }))) {
            mixin(enumMixinStr_SSL_CTRL_SESS_CB_HIT);
        }
    }




    static if(!is(typeof(SSL_CTRL_SESS_MISSES))) {
        private enum enumMixinStr_SSL_CTRL_SESS_MISSES = `enum SSL_CTRL_SESS_MISSES = 29;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CTRL_SESS_MISSES); }))) {
            mixin(enumMixinStr_SSL_CTRL_SESS_MISSES);
        }
    }




    static if(!is(typeof(SSL_CTRL_SESS_TIMEOUTS))) {
        private enum enumMixinStr_SSL_CTRL_SESS_TIMEOUTS = `enum SSL_CTRL_SESS_TIMEOUTS = 30;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CTRL_SESS_TIMEOUTS); }))) {
            mixin(enumMixinStr_SSL_CTRL_SESS_TIMEOUTS);
        }
    }




    static if(!is(typeof(SSL_CTRL_SESS_CACHE_FULL))) {
        private enum enumMixinStr_SSL_CTRL_SESS_CACHE_FULL = `enum SSL_CTRL_SESS_CACHE_FULL = 31;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CTRL_SESS_CACHE_FULL); }))) {
            mixin(enumMixinStr_SSL_CTRL_SESS_CACHE_FULL);
        }
    }




    static if(!is(typeof(SSL_CTRL_MODE))) {
        private enum enumMixinStr_SSL_CTRL_MODE = `enum SSL_CTRL_MODE = 33;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CTRL_MODE); }))) {
            mixin(enumMixinStr_SSL_CTRL_MODE);
        }
    }




    static if(!is(typeof(SSL_CTRL_GET_READ_AHEAD))) {
        private enum enumMixinStr_SSL_CTRL_GET_READ_AHEAD = `enum SSL_CTRL_GET_READ_AHEAD = 40;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CTRL_GET_READ_AHEAD); }))) {
            mixin(enumMixinStr_SSL_CTRL_GET_READ_AHEAD);
        }
    }




    static if(!is(typeof(SSL_CTRL_SET_READ_AHEAD))) {
        private enum enumMixinStr_SSL_CTRL_SET_READ_AHEAD = `enum SSL_CTRL_SET_READ_AHEAD = 41;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CTRL_SET_READ_AHEAD); }))) {
            mixin(enumMixinStr_SSL_CTRL_SET_READ_AHEAD);
        }
    }




    static if(!is(typeof(SSL_CTRL_SET_SESS_CACHE_SIZE))) {
        private enum enumMixinStr_SSL_CTRL_SET_SESS_CACHE_SIZE = `enum SSL_CTRL_SET_SESS_CACHE_SIZE = 42;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CTRL_SET_SESS_CACHE_SIZE); }))) {
            mixin(enumMixinStr_SSL_CTRL_SET_SESS_CACHE_SIZE);
        }
    }




    static if(!is(typeof(SSL_CTRL_GET_SESS_CACHE_SIZE))) {
        private enum enumMixinStr_SSL_CTRL_GET_SESS_CACHE_SIZE = `enum SSL_CTRL_GET_SESS_CACHE_SIZE = 43;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CTRL_GET_SESS_CACHE_SIZE); }))) {
            mixin(enumMixinStr_SSL_CTRL_GET_SESS_CACHE_SIZE);
        }
    }




    static if(!is(typeof(SSL_CTRL_SET_SESS_CACHE_MODE))) {
        private enum enumMixinStr_SSL_CTRL_SET_SESS_CACHE_MODE = `enum SSL_CTRL_SET_SESS_CACHE_MODE = 44;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CTRL_SET_SESS_CACHE_MODE); }))) {
            mixin(enumMixinStr_SSL_CTRL_SET_SESS_CACHE_MODE);
        }
    }




    static if(!is(typeof(SSL_CTRL_GET_SESS_CACHE_MODE))) {
        private enum enumMixinStr_SSL_CTRL_GET_SESS_CACHE_MODE = `enum SSL_CTRL_GET_SESS_CACHE_MODE = 45;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CTRL_GET_SESS_CACHE_MODE); }))) {
            mixin(enumMixinStr_SSL_CTRL_GET_SESS_CACHE_MODE);
        }
    }




    static if(!is(typeof(SSL_CTRL_GET_MAX_CERT_LIST))) {
        private enum enumMixinStr_SSL_CTRL_GET_MAX_CERT_LIST = `enum SSL_CTRL_GET_MAX_CERT_LIST = 50;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CTRL_GET_MAX_CERT_LIST); }))) {
            mixin(enumMixinStr_SSL_CTRL_GET_MAX_CERT_LIST);
        }
    }




    static if(!is(typeof(SSL_CTRL_SET_MAX_CERT_LIST))) {
        private enum enumMixinStr_SSL_CTRL_SET_MAX_CERT_LIST = `enum SSL_CTRL_SET_MAX_CERT_LIST = 51;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CTRL_SET_MAX_CERT_LIST); }))) {
            mixin(enumMixinStr_SSL_CTRL_SET_MAX_CERT_LIST);
        }
    }




    static if(!is(typeof(SSL_CTRL_SET_MAX_SEND_FRAGMENT))) {
        private enum enumMixinStr_SSL_CTRL_SET_MAX_SEND_FRAGMENT = `enum SSL_CTRL_SET_MAX_SEND_FRAGMENT = 52;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CTRL_SET_MAX_SEND_FRAGMENT); }))) {
            mixin(enumMixinStr_SSL_CTRL_SET_MAX_SEND_FRAGMENT);
        }
    }




    static if(!is(typeof(SSL_CTRL_SET_TLSEXT_SERVERNAME_CB))) {
        private enum enumMixinStr_SSL_CTRL_SET_TLSEXT_SERVERNAME_CB = `enum SSL_CTRL_SET_TLSEXT_SERVERNAME_CB = 53;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CTRL_SET_TLSEXT_SERVERNAME_CB); }))) {
            mixin(enumMixinStr_SSL_CTRL_SET_TLSEXT_SERVERNAME_CB);
        }
    }




    static if(!is(typeof(SSL_CTRL_SET_TLSEXT_SERVERNAME_ARG))) {
        private enum enumMixinStr_SSL_CTRL_SET_TLSEXT_SERVERNAME_ARG = `enum SSL_CTRL_SET_TLSEXT_SERVERNAME_ARG = 54;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CTRL_SET_TLSEXT_SERVERNAME_ARG); }))) {
            mixin(enumMixinStr_SSL_CTRL_SET_TLSEXT_SERVERNAME_ARG);
        }
    }




    static if(!is(typeof(SSL_CTRL_SET_TLSEXT_HOSTNAME))) {
        private enum enumMixinStr_SSL_CTRL_SET_TLSEXT_HOSTNAME = `enum SSL_CTRL_SET_TLSEXT_HOSTNAME = 55;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CTRL_SET_TLSEXT_HOSTNAME); }))) {
            mixin(enumMixinStr_SSL_CTRL_SET_TLSEXT_HOSTNAME);
        }
    }




    static if(!is(typeof(SSL_CTRL_SET_TLSEXT_DEBUG_CB))) {
        private enum enumMixinStr_SSL_CTRL_SET_TLSEXT_DEBUG_CB = `enum SSL_CTRL_SET_TLSEXT_DEBUG_CB = 56;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CTRL_SET_TLSEXT_DEBUG_CB); }))) {
            mixin(enumMixinStr_SSL_CTRL_SET_TLSEXT_DEBUG_CB);
        }
    }




    static if(!is(typeof(SSL_CTRL_SET_TLSEXT_DEBUG_ARG))) {
        private enum enumMixinStr_SSL_CTRL_SET_TLSEXT_DEBUG_ARG = `enum SSL_CTRL_SET_TLSEXT_DEBUG_ARG = 57;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CTRL_SET_TLSEXT_DEBUG_ARG); }))) {
            mixin(enumMixinStr_SSL_CTRL_SET_TLSEXT_DEBUG_ARG);
        }
    }




    static if(!is(typeof(SSL_CTRL_GET_TLSEXT_TICKET_KEYS))) {
        private enum enumMixinStr_SSL_CTRL_GET_TLSEXT_TICKET_KEYS = `enum SSL_CTRL_GET_TLSEXT_TICKET_KEYS = 58;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CTRL_GET_TLSEXT_TICKET_KEYS); }))) {
            mixin(enumMixinStr_SSL_CTRL_GET_TLSEXT_TICKET_KEYS);
        }
    }




    static if(!is(typeof(SSL_CTRL_SET_TLSEXT_TICKET_KEYS))) {
        private enum enumMixinStr_SSL_CTRL_SET_TLSEXT_TICKET_KEYS = `enum SSL_CTRL_SET_TLSEXT_TICKET_KEYS = 59;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CTRL_SET_TLSEXT_TICKET_KEYS); }))) {
            mixin(enumMixinStr_SSL_CTRL_SET_TLSEXT_TICKET_KEYS);
        }
    }




    static if(!is(typeof(SSL_CTRL_SET_TLSEXT_STATUS_REQ_CB))) {
        private enum enumMixinStr_SSL_CTRL_SET_TLSEXT_STATUS_REQ_CB = `enum SSL_CTRL_SET_TLSEXT_STATUS_REQ_CB = 63;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CTRL_SET_TLSEXT_STATUS_REQ_CB); }))) {
            mixin(enumMixinStr_SSL_CTRL_SET_TLSEXT_STATUS_REQ_CB);
        }
    }




    static if(!is(typeof(SSL_CTRL_SET_TLSEXT_STATUS_REQ_CB_ARG))) {
        private enum enumMixinStr_SSL_CTRL_SET_TLSEXT_STATUS_REQ_CB_ARG = `enum SSL_CTRL_SET_TLSEXT_STATUS_REQ_CB_ARG = 64;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CTRL_SET_TLSEXT_STATUS_REQ_CB_ARG); }))) {
            mixin(enumMixinStr_SSL_CTRL_SET_TLSEXT_STATUS_REQ_CB_ARG);
        }
    }




    static if(!is(typeof(SSL_CTRL_SET_TLSEXT_STATUS_REQ_TYPE))) {
        private enum enumMixinStr_SSL_CTRL_SET_TLSEXT_STATUS_REQ_TYPE = `enum SSL_CTRL_SET_TLSEXT_STATUS_REQ_TYPE = 65;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CTRL_SET_TLSEXT_STATUS_REQ_TYPE); }))) {
            mixin(enumMixinStr_SSL_CTRL_SET_TLSEXT_STATUS_REQ_TYPE);
        }
    }




    static if(!is(typeof(SSL_CTRL_GET_TLSEXT_STATUS_REQ_EXTS))) {
        private enum enumMixinStr_SSL_CTRL_GET_TLSEXT_STATUS_REQ_EXTS = `enum SSL_CTRL_GET_TLSEXT_STATUS_REQ_EXTS = 66;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CTRL_GET_TLSEXT_STATUS_REQ_EXTS); }))) {
            mixin(enumMixinStr_SSL_CTRL_GET_TLSEXT_STATUS_REQ_EXTS);
        }
    }




    static if(!is(typeof(SSL_CTRL_SET_TLSEXT_STATUS_REQ_EXTS))) {
        private enum enumMixinStr_SSL_CTRL_SET_TLSEXT_STATUS_REQ_EXTS = `enum SSL_CTRL_SET_TLSEXT_STATUS_REQ_EXTS = 67;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CTRL_SET_TLSEXT_STATUS_REQ_EXTS); }))) {
            mixin(enumMixinStr_SSL_CTRL_SET_TLSEXT_STATUS_REQ_EXTS);
        }
    }




    static if(!is(typeof(SSL_CTRL_GET_TLSEXT_STATUS_REQ_IDS))) {
        private enum enumMixinStr_SSL_CTRL_GET_TLSEXT_STATUS_REQ_IDS = `enum SSL_CTRL_GET_TLSEXT_STATUS_REQ_IDS = 68;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CTRL_GET_TLSEXT_STATUS_REQ_IDS); }))) {
            mixin(enumMixinStr_SSL_CTRL_GET_TLSEXT_STATUS_REQ_IDS);
        }
    }




    static if(!is(typeof(SSL_CTRL_SET_TLSEXT_STATUS_REQ_IDS))) {
        private enum enumMixinStr_SSL_CTRL_SET_TLSEXT_STATUS_REQ_IDS = `enum SSL_CTRL_SET_TLSEXT_STATUS_REQ_IDS = 69;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CTRL_SET_TLSEXT_STATUS_REQ_IDS); }))) {
            mixin(enumMixinStr_SSL_CTRL_SET_TLSEXT_STATUS_REQ_IDS);
        }
    }




    static if(!is(typeof(SSL_CTRL_GET_TLSEXT_STATUS_REQ_OCSP_RESP))) {
        private enum enumMixinStr_SSL_CTRL_GET_TLSEXT_STATUS_REQ_OCSP_RESP = `enum SSL_CTRL_GET_TLSEXT_STATUS_REQ_OCSP_RESP = 70;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CTRL_GET_TLSEXT_STATUS_REQ_OCSP_RESP); }))) {
            mixin(enumMixinStr_SSL_CTRL_GET_TLSEXT_STATUS_REQ_OCSP_RESP);
        }
    }




    static if(!is(typeof(SSL_CTRL_SET_TLSEXT_STATUS_REQ_OCSP_RESP))) {
        private enum enumMixinStr_SSL_CTRL_SET_TLSEXT_STATUS_REQ_OCSP_RESP = `enum SSL_CTRL_SET_TLSEXT_STATUS_REQ_OCSP_RESP = 71;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CTRL_SET_TLSEXT_STATUS_REQ_OCSP_RESP); }))) {
            mixin(enumMixinStr_SSL_CTRL_SET_TLSEXT_STATUS_REQ_OCSP_RESP);
        }
    }




    static if(!is(typeof(SSL_CTRL_SET_TLSEXT_TICKET_KEY_CB))) {
        private enum enumMixinStr_SSL_CTRL_SET_TLSEXT_TICKET_KEY_CB = `enum SSL_CTRL_SET_TLSEXT_TICKET_KEY_CB = 72;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CTRL_SET_TLSEXT_TICKET_KEY_CB); }))) {
            mixin(enumMixinStr_SSL_CTRL_SET_TLSEXT_TICKET_KEY_CB);
        }
    }




    static if(!is(typeof(SSL_CTRL_SET_TLS_EXT_SRP_USERNAME_CB))) {
        private enum enumMixinStr_SSL_CTRL_SET_TLS_EXT_SRP_USERNAME_CB = `enum SSL_CTRL_SET_TLS_EXT_SRP_USERNAME_CB = 75;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CTRL_SET_TLS_EXT_SRP_USERNAME_CB); }))) {
            mixin(enumMixinStr_SSL_CTRL_SET_TLS_EXT_SRP_USERNAME_CB);
        }
    }




    static if(!is(typeof(SSL_CTRL_SET_SRP_VERIFY_PARAM_CB))) {
        private enum enumMixinStr_SSL_CTRL_SET_SRP_VERIFY_PARAM_CB = `enum SSL_CTRL_SET_SRP_VERIFY_PARAM_CB = 76;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CTRL_SET_SRP_VERIFY_PARAM_CB); }))) {
            mixin(enumMixinStr_SSL_CTRL_SET_SRP_VERIFY_PARAM_CB);
        }
    }




    static if(!is(typeof(SSL_CTRL_SET_SRP_GIVE_CLIENT_PWD_CB))) {
        private enum enumMixinStr_SSL_CTRL_SET_SRP_GIVE_CLIENT_PWD_CB = `enum SSL_CTRL_SET_SRP_GIVE_CLIENT_PWD_CB = 77;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CTRL_SET_SRP_GIVE_CLIENT_PWD_CB); }))) {
            mixin(enumMixinStr_SSL_CTRL_SET_SRP_GIVE_CLIENT_PWD_CB);
        }
    }




    static if(!is(typeof(SSL_CTRL_SET_SRP_ARG))) {
        private enum enumMixinStr_SSL_CTRL_SET_SRP_ARG = `enum SSL_CTRL_SET_SRP_ARG = 78;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CTRL_SET_SRP_ARG); }))) {
            mixin(enumMixinStr_SSL_CTRL_SET_SRP_ARG);
        }
    }




    static if(!is(typeof(SSL_CTRL_SET_TLS_EXT_SRP_USERNAME))) {
        private enum enumMixinStr_SSL_CTRL_SET_TLS_EXT_SRP_USERNAME = `enum SSL_CTRL_SET_TLS_EXT_SRP_USERNAME = 79;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CTRL_SET_TLS_EXT_SRP_USERNAME); }))) {
            mixin(enumMixinStr_SSL_CTRL_SET_TLS_EXT_SRP_USERNAME);
        }
    }




    static if(!is(typeof(SSL_CTRL_SET_TLS_EXT_SRP_STRENGTH))) {
        private enum enumMixinStr_SSL_CTRL_SET_TLS_EXT_SRP_STRENGTH = `enum SSL_CTRL_SET_TLS_EXT_SRP_STRENGTH = 80;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CTRL_SET_TLS_EXT_SRP_STRENGTH); }))) {
            mixin(enumMixinStr_SSL_CTRL_SET_TLS_EXT_SRP_STRENGTH);
        }
    }




    static if(!is(typeof(SSL_CTRL_SET_TLS_EXT_SRP_PASSWORD))) {
        private enum enumMixinStr_SSL_CTRL_SET_TLS_EXT_SRP_PASSWORD = `enum SSL_CTRL_SET_TLS_EXT_SRP_PASSWORD = 81;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CTRL_SET_TLS_EXT_SRP_PASSWORD); }))) {
            mixin(enumMixinStr_SSL_CTRL_SET_TLS_EXT_SRP_PASSWORD);
        }
    }




    static if(!is(typeof(DTLS_CTRL_GET_TIMEOUT))) {
        private enum enumMixinStr_DTLS_CTRL_GET_TIMEOUT = `enum DTLS_CTRL_GET_TIMEOUT = 73;`;
        static if(is(typeof({ mixin(enumMixinStr_DTLS_CTRL_GET_TIMEOUT); }))) {
            mixin(enumMixinStr_DTLS_CTRL_GET_TIMEOUT);
        }
    }




    static if(!is(typeof(DTLS_CTRL_HANDLE_TIMEOUT))) {
        private enum enumMixinStr_DTLS_CTRL_HANDLE_TIMEOUT = `enum DTLS_CTRL_HANDLE_TIMEOUT = 74;`;
        static if(is(typeof({ mixin(enumMixinStr_DTLS_CTRL_HANDLE_TIMEOUT); }))) {
            mixin(enumMixinStr_DTLS_CTRL_HANDLE_TIMEOUT);
        }
    }




    static if(!is(typeof(SSL_CTRL_GET_RI_SUPPORT))) {
        private enum enumMixinStr_SSL_CTRL_GET_RI_SUPPORT = `enum SSL_CTRL_GET_RI_SUPPORT = 76;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CTRL_GET_RI_SUPPORT); }))) {
            mixin(enumMixinStr_SSL_CTRL_GET_RI_SUPPORT);
        }
    }




    static if(!is(typeof(SSL_CTRL_CLEAR_MODE))) {
        private enum enumMixinStr_SSL_CTRL_CLEAR_MODE = `enum SSL_CTRL_CLEAR_MODE = 78;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CTRL_CLEAR_MODE); }))) {
            mixin(enumMixinStr_SSL_CTRL_CLEAR_MODE);
        }
    }




    static if(!is(typeof(SSL_CTRL_SET_NOT_RESUMABLE_SESS_CB))) {
        private enum enumMixinStr_SSL_CTRL_SET_NOT_RESUMABLE_SESS_CB = `enum SSL_CTRL_SET_NOT_RESUMABLE_SESS_CB = 79;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CTRL_SET_NOT_RESUMABLE_SESS_CB); }))) {
            mixin(enumMixinStr_SSL_CTRL_SET_NOT_RESUMABLE_SESS_CB);
        }
    }




    static if(!is(typeof(SSL_CTRL_GET_EXTRA_CHAIN_CERTS))) {
        private enum enumMixinStr_SSL_CTRL_GET_EXTRA_CHAIN_CERTS = `enum SSL_CTRL_GET_EXTRA_CHAIN_CERTS = 82;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CTRL_GET_EXTRA_CHAIN_CERTS); }))) {
            mixin(enumMixinStr_SSL_CTRL_GET_EXTRA_CHAIN_CERTS);
        }
    }




    static if(!is(typeof(SSL_CTRL_CLEAR_EXTRA_CHAIN_CERTS))) {
        private enum enumMixinStr_SSL_CTRL_CLEAR_EXTRA_CHAIN_CERTS = `enum SSL_CTRL_CLEAR_EXTRA_CHAIN_CERTS = 83;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CTRL_CLEAR_EXTRA_CHAIN_CERTS); }))) {
            mixin(enumMixinStr_SSL_CTRL_CLEAR_EXTRA_CHAIN_CERTS);
        }
    }




    static if(!is(typeof(SSL_CTRL_CHAIN))) {
        private enum enumMixinStr_SSL_CTRL_CHAIN = `enum SSL_CTRL_CHAIN = 88;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CTRL_CHAIN); }))) {
            mixin(enumMixinStr_SSL_CTRL_CHAIN);
        }
    }




    static if(!is(typeof(SSL_CTRL_CHAIN_CERT))) {
        private enum enumMixinStr_SSL_CTRL_CHAIN_CERT = `enum SSL_CTRL_CHAIN_CERT = 89;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CTRL_CHAIN_CERT); }))) {
            mixin(enumMixinStr_SSL_CTRL_CHAIN_CERT);
        }
    }




    static if(!is(typeof(SSL_CTRL_GET_GROUPS))) {
        private enum enumMixinStr_SSL_CTRL_GET_GROUPS = `enum SSL_CTRL_GET_GROUPS = 90;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CTRL_GET_GROUPS); }))) {
            mixin(enumMixinStr_SSL_CTRL_GET_GROUPS);
        }
    }




    static if(!is(typeof(SSL_CTRL_SET_GROUPS))) {
        private enum enumMixinStr_SSL_CTRL_SET_GROUPS = `enum SSL_CTRL_SET_GROUPS = 91;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CTRL_SET_GROUPS); }))) {
            mixin(enumMixinStr_SSL_CTRL_SET_GROUPS);
        }
    }




    static if(!is(typeof(SSL_CTRL_SET_GROUPS_LIST))) {
        private enum enumMixinStr_SSL_CTRL_SET_GROUPS_LIST = `enum SSL_CTRL_SET_GROUPS_LIST = 92;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CTRL_SET_GROUPS_LIST); }))) {
            mixin(enumMixinStr_SSL_CTRL_SET_GROUPS_LIST);
        }
    }




    static if(!is(typeof(SSL_CTRL_GET_SHARED_GROUP))) {
        private enum enumMixinStr_SSL_CTRL_GET_SHARED_GROUP = `enum SSL_CTRL_GET_SHARED_GROUP = 93;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CTRL_GET_SHARED_GROUP); }))) {
            mixin(enumMixinStr_SSL_CTRL_GET_SHARED_GROUP);
        }
    }




    static if(!is(typeof(SSL_CTRL_SET_SIGALGS))) {
        private enum enumMixinStr_SSL_CTRL_SET_SIGALGS = `enum SSL_CTRL_SET_SIGALGS = 97;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CTRL_SET_SIGALGS); }))) {
            mixin(enumMixinStr_SSL_CTRL_SET_SIGALGS);
        }
    }




    static if(!is(typeof(SSL_CTRL_SET_SIGALGS_LIST))) {
        private enum enumMixinStr_SSL_CTRL_SET_SIGALGS_LIST = `enum SSL_CTRL_SET_SIGALGS_LIST = 98;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CTRL_SET_SIGALGS_LIST); }))) {
            mixin(enumMixinStr_SSL_CTRL_SET_SIGALGS_LIST);
        }
    }




    static if(!is(typeof(SSL_CTRL_CERT_FLAGS))) {
        private enum enumMixinStr_SSL_CTRL_CERT_FLAGS = `enum SSL_CTRL_CERT_FLAGS = 99;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CTRL_CERT_FLAGS); }))) {
            mixin(enumMixinStr_SSL_CTRL_CERT_FLAGS);
        }
    }




    static if(!is(typeof(SSL_CTRL_CLEAR_CERT_FLAGS))) {
        private enum enumMixinStr_SSL_CTRL_CLEAR_CERT_FLAGS = `enum SSL_CTRL_CLEAR_CERT_FLAGS = 100;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CTRL_CLEAR_CERT_FLAGS); }))) {
            mixin(enumMixinStr_SSL_CTRL_CLEAR_CERT_FLAGS);
        }
    }




    static if(!is(typeof(SSL_CTRL_SET_CLIENT_SIGALGS))) {
        private enum enumMixinStr_SSL_CTRL_SET_CLIENT_SIGALGS = `enum SSL_CTRL_SET_CLIENT_SIGALGS = 101;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CTRL_SET_CLIENT_SIGALGS); }))) {
            mixin(enumMixinStr_SSL_CTRL_SET_CLIENT_SIGALGS);
        }
    }




    static if(!is(typeof(SSL_CTRL_SET_CLIENT_SIGALGS_LIST))) {
        private enum enumMixinStr_SSL_CTRL_SET_CLIENT_SIGALGS_LIST = `enum SSL_CTRL_SET_CLIENT_SIGALGS_LIST = 102;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CTRL_SET_CLIENT_SIGALGS_LIST); }))) {
            mixin(enumMixinStr_SSL_CTRL_SET_CLIENT_SIGALGS_LIST);
        }
    }




    static if(!is(typeof(SSL_CTRL_GET_CLIENT_CERT_TYPES))) {
        private enum enumMixinStr_SSL_CTRL_GET_CLIENT_CERT_TYPES = `enum SSL_CTRL_GET_CLIENT_CERT_TYPES = 103;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CTRL_GET_CLIENT_CERT_TYPES); }))) {
            mixin(enumMixinStr_SSL_CTRL_GET_CLIENT_CERT_TYPES);
        }
    }




    static if(!is(typeof(SSL_CTRL_SET_CLIENT_CERT_TYPES))) {
        private enum enumMixinStr_SSL_CTRL_SET_CLIENT_CERT_TYPES = `enum SSL_CTRL_SET_CLIENT_CERT_TYPES = 104;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CTRL_SET_CLIENT_CERT_TYPES); }))) {
            mixin(enumMixinStr_SSL_CTRL_SET_CLIENT_CERT_TYPES);
        }
    }




    static if(!is(typeof(SSL_CTRL_BUILD_CERT_CHAIN))) {
        private enum enumMixinStr_SSL_CTRL_BUILD_CERT_CHAIN = `enum SSL_CTRL_BUILD_CERT_CHAIN = 105;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CTRL_BUILD_CERT_CHAIN); }))) {
            mixin(enumMixinStr_SSL_CTRL_BUILD_CERT_CHAIN);
        }
    }




    static if(!is(typeof(SSL_CTRL_SET_VERIFY_CERT_STORE))) {
        private enum enumMixinStr_SSL_CTRL_SET_VERIFY_CERT_STORE = `enum SSL_CTRL_SET_VERIFY_CERT_STORE = 106;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CTRL_SET_VERIFY_CERT_STORE); }))) {
            mixin(enumMixinStr_SSL_CTRL_SET_VERIFY_CERT_STORE);
        }
    }




    static if(!is(typeof(SSL_CTRL_SET_CHAIN_CERT_STORE))) {
        private enum enumMixinStr_SSL_CTRL_SET_CHAIN_CERT_STORE = `enum SSL_CTRL_SET_CHAIN_CERT_STORE = 107;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CTRL_SET_CHAIN_CERT_STORE); }))) {
            mixin(enumMixinStr_SSL_CTRL_SET_CHAIN_CERT_STORE);
        }
    }




    static if(!is(typeof(SSL_CTRL_GET_PEER_SIGNATURE_NID))) {
        private enum enumMixinStr_SSL_CTRL_GET_PEER_SIGNATURE_NID = `enum SSL_CTRL_GET_PEER_SIGNATURE_NID = 108;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CTRL_GET_PEER_SIGNATURE_NID); }))) {
            mixin(enumMixinStr_SSL_CTRL_GET_PEER_SIGNATURE_NID);
        }
    }




    static if(!is(typeof(SSL_CTRL_GET_PEER_TMP_KEY))) {
        private enum enumMixinStr_SSL_CTRL_GET_PEER_TMP_KEY = `enum SSL_CTRL_GET_PEER_TMP_KEY = 109;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CTRL_GET_PEER_TMP_KEY); }))) {
            mixin(enumMixinStr_SSL_CTRL_GET_PEER_TMP_KEY);
        }
    }




    static if(!is(typeof(SSL_CTRL_GET_RAW_CIPHERLIST))) {
        private enum enumMixinStr_SSL_CTRL_GET_RAW_CIPHERLIST = `enum SSL_CTRL_GET_RAW_CIPHERLIST = 110;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CTRL_GET_RAW_CIPHERLIST); }))) {
            mixin(enumMixinStr_SSL_CTRL_GET_RAW_CIPHERLIST);
        }
    }




    static if(!is(typeof(SSL_CTRL_GET_EC_POINT_FORMATS))) {
        private enum enumMixinStr_SSL_CTRL_GET_EC_POINT_FORMATS = `enum SSL_CTRL_GET_EC_POINT_FORMATS = 111;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CTRL_GET_EC_POINT_FORMATS); }))) {
            mixin(enumMixinStr_SSL_CTRL_GET_EC_POINT_FORMATS);
        }
    }




    static if(!is(typeof(SSL_CTRL_GET_CHAIN_CERTS))) {
        private enum enumMixinStr_SSL_CTRL_GET_CHAIN_CERTS = `enum SSL_CTRL_GET_CHAIN_CERTS = 115;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CTRL_GET_CHAIN_CERTS); }))) {
            mixin(enumMixinStr_SSL_CTRL_GET_CHAIN_CERTS);
        }
    }




    static if(!is(typeof(SSL_CTRL_SELECT_CURRENT_CERT))) {
        private enum enumMixinStr_SSL_CTRL_SELECT_CURRENT_CERT = `enum SSL_CTRL_SELECT_CURRENT_CERT = 116;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CTRL_SELECT_CURRENT_CERT); }))) {
            mixin(enumMixinStr_SSL_CTRL_SELECT_CURRENT_CERT);
        }
    }




    static if(!is(typeof(SSL_CTRL_SET_CURRENT_CERT))) {
        private enum enumMixinStr_SSL_CTRL_SET_CURRENT_CERT = `enum SSL_CTRL_SET_CURRENT_CERT = 117;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CTRL_SET_CURRENT_CERT); }))) {
            mixin(enumMixinStr_SSL_CTRL_SET_CURRENT_CERT);
        }
    }




    static if(!is(typeof(SSL_CTRL_SET_DH_AUTO))) {
        private enum enumMixinStr_SSL_CTRL_SET_DH_AUTO = `enum SSL_CTRL_SET_DH_AUTO = 118;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CTRL_SET_DH_AUTO); }))) {
            mixin(enumMixinStr_SSL_CTRL_SET_DH_AUTO);
        }
    }




    static if(!is(typeof(DTLS_CTRL_SET_LINK_MTU))) {
        private enum enumMixinStr_DTLS_CTRL_SET_LINK_MTU = `enum DTLS_CTRL_SET_LINK_MTU = 120;`;
        static if(is(typeof({ mixin(enumMixinStr_DTLS_CTRL_SET_LINK_MTU); }))) {
            mixin(enumMixinStr_DTLS_CTRL_SET_LINK_MTU);
        }
    }




    static if(!is(typeof(DTLS_CTRL_GET_LINK_MIN_MTU))) {
        private enum enumMixinStr_DTLS_CTRL_GET_LINK_MIN_MTU = `enum DTLS_CTRL_GET_LINK_MIN_MTU = 121;`;
        static if(is(typeof({ mixin(enumMixinStr_DTLS_CTRL_GET_LINK_MIN_MTU); }))) {
            mixin(enumMixinStr_DTLS_CTRL_GET_LINK_MIN_MTU);
        }
    }




    static if(!is(typeof(SSL_CTRL_GET_EXTMS_SUPPORT))) {
        private enum enumMixinStr_SSL_CTRL_GET_EXTMS_SUPPORT = `enum SSL_CTRL_GET_EXTMS_SUPPORT = 122;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CTRL_GET_EXTMS_SUPPORT); }))) {
            mixin(enumMixinStr_SSL_CTRL_GET_EXTMS_SUPPORT);
        }
    }




    static if(!is(typeof(SSL_CTRL_SET_MIN_PROTO_VERSION))) {
        private enum enumMixinStr_SSL_CTRL_SET_MIN_PROTO_VERSION = `enum SSL_CTRL_SET_MIN_PROTO_VERSION = 123;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CTRL_SET_MIN_PROTO_VERSION); }))) {
            mixin(enumMixinStr_SSL_CTRL_SET_MIN_PROTO_VERSION);
        }
    }




    static if(!is(typeof(SSL_CTRL_SET_MAX_PROTO_VERSION))) {
        private enum enumMixinStr_SSL_CTRL_SET_MAX_PROTO_VERSION = `enum SSL_CTRL_SET_MAX_PROTO_VERSION = 124;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CTRL_SET_MAX_PROTO_VERSION); }))) {
            mixin(enumMixinStr_SSL_CTRL_SET_MAX_PROTO_VERSION);
        }
    }




    static if(!is(typeof(SSL_CTRL_SET_SPLIT_SEND_FRAGMENT))) {
        private enum enumMixinStr_SSL_CTRL_SET_SPLIT_SEND_FRAGMENT = `enum SSL_CTRL_SET_SPLIT_SEND_FRAGMENT = 125;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CTRL_SET_SPLIT_SEND_FRAGMENT); }))) {
            mixin(enumMixinStr_SSL_CTRL_SET_SPLIT_SEND_FRAGMENT);
        }
    }




    static if(!is(typeof(SSL_CTRL_SET_MAX_PIPELINES))) {
        private enum enumMixinStr_SSL_CTRL_SET_MAX_PIPELINES = `enum SSL_CTRL_SET_MAX_PIPELINES = 126;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CTRL_SET_MAX_PIPELINES); }))) {
            mixin(enumMixinStr_SSL_CTRL_SET_MAX_PIPELINES);
        }
    }




    static if(!is(typeof(SSL_CTRL_GET_TLSEXT_STATUS_REQ_TYPE))) {
        private enum enumMixinStr_SSL_CTRL_GET_TLSEXT_STATUS_REQ_TYPE = `enum SSL_CTRL_GET_TLSEXT_STATUS_REQ_TYPE = 127;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CTRL_GET_TLSEXT_STATUS_REQ_TYPE); }))) {
            mixin(enumMixinStr_SSL_CTRL_GET_TLSEXT_STATUS_REQ_TYPE);
        }
    }




    static if(!is(typeof(SSL_CTRL_GET_TLSEXT_STATUS_REQ_CB))) {
        private enum enumMixinStr_SSL_CTRL_GET_TLSEXT_STATUS_REQ_CB = `enum SSL_CTRL_GET_TLSEXT_STATUS_REQ_CB = 128;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CTRL_GET_TLSEXT_STATUS_REQ_CB); }))) {
            mixin(enumMixinStr_SSL_CTRL_GET_TLSEXT_STATUS_REQ_CB);
        }
    }




    static if(!is(typeof(SSL_CTRL_GET_TLSEXT_STATUS_REQ_CB_ARG))) {
        private enum enumMixinStr_SSL_CTRL_GET_TLSEXT_STATUS_REQ_CB_ARG = `enum SSL_CTRL_GET_TLSEXT_STATUS_REQ_CB_ARG = 129;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CTRL_GET_TLSEXT_STATUS_REQ_CB_ARG); }))) {
            mixin(enumMixinStr_SSL_CTRL_GET_TLSEXT_STATUS_REQ_CB_ARG);
        }
    }




    static if(!is(typeof(SSL_CTRL_GET_MIN_PROTO_VERSION))) {
        private enum enumMixinStr_SSL_CTRL_GET_MIN_PROTO_VERSION = `enum SSL_CTRL_GET_MIN_PROTO_VERSION = 130;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CTRL_GET_MIN_PROTO_VERSION); }))) {
            mixin(enumMixinStr_SSL_CTRL_GET_MIN_PROTO_VERSION);
        }
    }




    static if(!is(typeof(SSL_CTRL_GET_MAX_PROTO_VERSION))) {
        private enum enumMixinStr_SSL_CTRL_GET_MAX_PROTO_VERSION = `enum SSL_CTRL_GET_MAX_PROTO_VERSION = 131;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CTRL_GET_MAX_PROTO_VERSION); }))) {
            mixin(enumMixinStr_SSL_CTRL_GET_MAX_PROTO_VERSION);
        }
    }




    static if(!is(typeof(SSL_CTRL_GET_SIGNATURE_NID))) {
        private enum enumMixinStr_SSL_CTRL_GET_SIGNATURE_NID = `enum SSL_CTRL_GET_SIGNATURE_NID = 132;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CTRL_GET_SIGNATURE_NID); }))) {
            mixin(enumMixinStr_SSL_CTRL_GET_SIGNATURE_NID);
        }
    }




    static if(!is(typeof(SSL_CTRL_GET_TMP_KEY))) {
        private enum enumMixinStr_SSL_CTRL_GET_TMP_KEY = `enum SSL_CTRL_GET_TMP_KEY = 133;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CTRL_GET_TMP_KEY); }))) {
            mixin(enumMixinStr_SSL_CTRL_GET_TMP_KEY);
        }
    }




    static if(!is(typeof(SSL_CERT_SET_FIRST))) {
        private enum enumMixinStr_SSL_CERT_SET_FIRST = `enum SSL_CERT_SET_FIRST = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CERT_SET_FIRST); }))) {
            mixin(enumMixinStr_SSL_CERT_SET_FIRST);
        }
    }




    static if(!is(typeof(SSL_CERT_SET_NEXT))) {
        private enum enumMixinStr_SSL_CERT_SET_NEXT = `enum SSL_CERT_SET_NEXT = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CERT_SET_NEXT); }))) {
            mixin(enumMixinStr_SSL_CERT_SET_NEXT);
        }
    }




    static if(!is(typeof(SSL_CERT_SET_SERVER))) {
        private enum enumMixinStr_SSL_CERT_SET_SERVER = `enum SSL_CERT_SET_SERVER = 3;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CERT_SET_SERVER); }))) {
            mixin(enumMixinStr_SSL_CERT_SET_SERVER);
        }
    }
    static if(!is(typeof(SSL_CTRL_GET_SERVER_TMP_KEY))) {
        private enum enumMixinStr_SSL_CTRL_GET_SERVER_TMP_KEY = `enum SSL_CTRL_GET_SERVER_TMP_KEY = 109;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CTRL_GET_SERVER_TMP_KEY); }))) {
            mixin(enumMixinStr_SSL_CTRL_GET_SERVER_TMP_KEY);
        }
    }






    static if(!is(typeof(SSL_CTRL_GET_CURVES))) {
        private enum enumMixinStr_SSL_CTRL_GET_CURVES = `enum SSL_CTRL_GET_CURVES = 90;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CTRL_GET_CURVES); }))) {
            mixin(enumMixinStr_SSL_CTRL_GET_CURVES);
        }
    }




    static if(!is(typeof(SSL_CTRL_SET_CURVES))) {
        private enum enumMixinStr_SSL_CTRL_SET_CURVES = `enum SSL_CTRL_SET_CURVES = 91;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CTRL_SET_CURVES); }))) {
            mixin(enumMixinStr_SSL_CTRL_SET_CURVES);
        }
    }




    static if(!is(typeof(SSL_CTRL_SET_CURVES_LIST))) {
        private enum enumMixinStr_SSL_CTRL_SET_CURVES_LIST = `enum SSL_CTRL_SET_CURVES_LIST = 92;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CTRL_SET_CURVES_LIST); }))) {
            mixin(enumMixinStr_SSL_CTRL_SET_CURVES_LIST);
        }
    }




    static if(!is(typeof(SSL_CTRL_GET_SHARED_CURVE))) {
        private enum enumMixinStr_SSL_CTRL_GET_SHARED_CURVE = `enum SSL_CTRL_GET_SHARED_CURVE = 93;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CTRL_GET_SHARED_CURVE); }))) {
            mixin(enumMixinStr_SSL_CTRL_GET_SHARED_CURVE);
        }
    }




    static if(!is(typeof(SSL_get1_curves))) {
        private enum enumMixinStr_SSL_get1_curves = `enum SSL_get1_curves = SSL_get1_groups;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_get1_curves); }))) {
            mixin(enumMixinStr_SSL_get1_curves);
        }
    }




    static if(!is(typeof(SSL_CTX_set1_curves))) {
        private enum enumMixinStr_SSL_CTX_set1_curves = `enum SSL_CTX_set1_curves = SSL_CTX_set1_groups;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CTX_set1_curves); }))) {
            mixin(enumMixinStr_SSL_CTX_set1_curves);
        }
    }




    static if(!is(typeof(SSL_CTX_set1_curves_list))) {
        private enum enumMixinStr_SSL_CTX_set1_curves_list = `enum SSL_CTX_set1_curves_list = SSL_CTX_set1_groups_list;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CTX_set1_curves_list); }))) {
            mixin(enumMixinStr_SSL_CTX_set1_curves_list);
        }
    }




    static if(!is(typeof(SSL_set1_curves))) {
        private enum enumMixinStr_SSL_set1_curves = `enum SSL_set1_curves = SSL_set1_groups;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_set1_curves); }))) {
            mixin(enumMixinStr_SSL_set1_curves);
        }
    }




    static if(!is(typeof(SSL_set1_curves_list))) {
        private enum enumMixinStr_SSL_set1_curves_list = `enum SSL_set1_curves_list = SSL_set1_groups_list;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_set1_curves_list); }))) {
            mixin(enumMixinStr_SSL_set1_curves_list);
        }
    }




    static if(!is(typeof(SSL_get_shared_curve))) {
        private enum enumMixinStr_SSL_get_shared_curve = `enum SSL_get_shared_curve = SSL_get_shared_group;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_get_shared_curve); }))) {
            mixin(enumMixinStr_SSL_get_shared_curve);
        }
    }
    static if(!is(typeof(SSL_SERVERINFOV1))) {
        private enum enumMixinStr_SSL_SERVERINFOV1 = `enum SSL_SERVERINFOV1 = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_SERVERINFOV1); }))) {
            mixin(enumMixinStr_SSL_SERVERINFOV1);
        }
    }




    static if(!is(typeof(SSL_SERVERINFOV2))) {
        private enum enumMixinStr_SSL_SERVERINFOV2 = `enum SSL_SERVERINFOV2 = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_SERVERINFOV2); }))) {
            mixin(enumMixinStr_SSL_SERVERINFOV2);
        }
    }






    static if(!is(typeof(SSL_CLIENT_HELLO_SUCCESS))) {
        private enum enumMixinStr_SSL_CLIENT_HELLO_SUCCESS = `enum SSL_CLIENT_HELLO_SUCCESS = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CLIENT_HELLO_SUCCESS); }))) {
            mixin(enumMixinStr_SSL_CLIENT_HELLO_SUCCESS);
        }
    }




    static if(!is(typeof(SSL_CLIENT_HELLO_ERROR))) {
        private enum enumMixinStr_SSL_CLIENT_HELLO_ERROR = `enum SSL_CLIENT_HELLO_ERROR = 0;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CLIENT_HELLO_ERROR); }))) {
            mixin(enumMixinStr_SSL_CLIENT_HELLO_ERROR);
        }
    }




    static if(!is(typeof(SSL_CLIENT_HELLO_RETRY))) {
        private enum enumMixinStr_SSL_CLIENT_HELLO_RETRY = `enum SSL_CLIENT_HELLO_RETRY = ( - 1 );`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_CLIENT_HELLO_RETRY); }))) {
            mixin(enumMixinStr_SSL_CLIENT_HELLO_RETRY);
        }
    }




    static if(!is(typeof(SSL_READ_EARLY_DATA_ERROR))) {
        private enum enumMixinStr_SSL_READ_EARLY_DATA_ERROR = `enum SSL_READ_EARLY_DATA_ERROR = 0;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_READ_EARLY_DATA_ERROR); }))) {
            mixin(enumMixinStr_SSL_READ_EARLY_DATA_ERROR);
        }
    }




    static if(!is(typeof(SSL_READ_EARLY_DATA_SUCCESS))) {
        private enum enumMixinStr_SSL_READ_EARLY_DATA_SUCCESS = `enum SSL_READ_EARLY_DATA_SUCCESS = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_READ_EARLY_DATA_SUCCESS); }))) {
            mixin(enumMixinStr_SSL_READ_EARLY_DATA_SUCCESS);
        }
    }




    static if(!is(typeof(SSL_READ_EARLY_DATA_FINISH))) {
        private enum enumMixinStr_SSL_READ_EARLY_DATA_FINISH = `enum SSL_READ_EARLY_DATA_FINISH = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_READ_EARLY_DATA_FINISH); }))) {
            mixin(enumMixinStr_SSL_READ_EARLY_DATA_FINISH);
        }
    }




    static if(!is(typeof(SSL_EARLY_DATA_NOT_SENT))) {
        private enum enumMixinStr_SSL_EARLY_DATA_NOT_SENT = `enum SSL_EARLY_DATA_NOT_SENT = 0;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_EARLY_DATA_NOT_SENT); }))) {
            mixin(enumMixinStr_SSL_EARLY_DATA_NOT_SENT);
        }
    }




    static if(!is(typeof(SSL_EARLY_DATA_REJECTED))) {
        private enum enumMixinStr_SSL_EARLY_DATA_REJECTED = `enum SSL_EARLY_DATA_REJECTED = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_EARLY_DATA_REJECTED); }))) {
            mixin(enumMixinStr_SSL_EARLY_DATA_REJECTED);
        }
    }




    static if(!is(typeof(SSL_EARLY_DATA_ACCEPTED))) {
        private enum enumMixinStr_SSL_EARLY_DATA_ACCEPTED = `enum SSL_EARLY_DATA_ACCEPTED = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_EARLY_DATA_ACCEPTED); }))) {
            mixin(enumMixinStr_SSL_EARLY_DATA_ACCEPTED);
        }
    }




    static if(!is(typeof(SSLv23_method))) {
        private enum enumMixinStr_SSLv23_method = `enum SSLv23_method = TLS_method;`;
        static if(is(typeof({ mixin(enumMixinStr_SSLv23_method); }))) {
            mixin(enumMixinStr_SSLv23_method);
        }
    }




    static if(!is(typeof(SSLv23_server_method))) {
        private enum enumMixinStr_SSLv23_server_method = `enum SSLv23_server_method = TLS_server_method;`;
        static if(is(typeof({ mixin(enumMixinStr_SSLv23_server_method); }))) {
            mixin(enumMixinStr_SSLv23_server_method);
        }
    }




    static if(!is(typeof(SSLv23_client_method))) {
        private enum enumMixinStr_SSLv23_client_method = `enum SSLv23_client_method = TLS_client_method;`;
        static if(is(typeof({ mixin(enumMixinStr_SSLv23_client_method); }))) {
            mixin(enumMixinStr_SSLv23_client_method);
        }
    }






    static if(!is(typeof(SSL_get0_session))) {
        private enum enumMixinStr_SSL_get0_session = `enum SSL_get0_session = SSL_get_session;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_get0_session); }))) {
            mixin(enumMixinStr_SSL_get0_session);
        }
    }
    static if(!is(typeof(SSL_SECOP_OTHER_TYPE))) {
        private enum enumMixinStr_SSL_SECOP_OTHER_TYPE = `enum SSL_SECOP_OTHER_TYPE = 0xffff0000;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_SECOP_OTHER_TYPE); }))) {
            mixin(enumMixinStr_SSL_SECOP_OTHER_TYPE);
        }
    }




    static if(!is(typeof(SSL_SECOP_OTHER_NONE))) {
        private enum enumMixinStr_SSL_SECOP_OTHER_NONE = `enum SSL_SECOP_OTHER_NONE = 0;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_SECOP_OTHER_NONE); }))) {
            mixin(enumMixinStr_SSL_SECOP_OTHER_NONE);
        }
    }




    static if(!is(typeof(SSL_SECOP_OTHER_CIPHER))) {
        private enum enumMixinStr_SSL_SECOP_OTHER_CIPHER = `enum SSL_SECOP_OTHER_CIPHER = ( 1 << 16 );`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_SECOP_OTHER_CIPHER); }))) {
            mixin(enumMixinStr_SSL_SECOP_OTHER_CIPHER);
        }
    }




    static if(!is(typeof(SSL_SECOP_OTHER_CURVE))) {
        private enum enumMixinStr_SSL_SECOP_OTHER_CURVE = `enum SSL_SECOP_OTHER_CURVE = ( 2 << 16 );`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_SECOP_OTHER_CURVE); }))) {
            mixin(enumMixinStr_SSL_SECOP_OTHER_CURVE);
        }
    }




    static if(!is(typeof(SSL_SECOP_OTHER_DH))) {
        private enum enumMixinStr_SSL_SECOP_OTHER_DH = `enum SSL_SECOP_OTHER_DH = ( 3 << 16 );`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_SECOP_OTHER_DH); }))) {
            mixin(enumMixinStr_SSL_SECOP_OTHER_DH);
        }
    }




    static if(!is(typeof(SSL_SECOP_OTHER_PKEY))) {
        private enum enumMixinStr_SSL_SECOP_OTHER_PKEY = `enum SSL_SECOP_OTHER_PKEY = ( 4 << 16 );`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_SECOP_OTHER_PKEY); }))) {
            mixin(enumMixinStr_SSL_SECOP_OTHER_PKEY);
        }
    }




    static if(!is(typeof(SSL_SECOP_OTHER_SIGALG))) {
        private enum enumMixinStr_SSL_SECOP_OTHER_SIGALG = `enum SSL_SECOP_OTHER_SIGALG = ( 5 << 16 );`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_SECOP_OTHER_SIGALG); }))) {
            mixin(enumMixinStr_SSL_SECOP_OTHER_SIGALG);
        }
    }




    static if(!is(typeof(SSL_SECOP_OTHER_CERT))) {
        private enum enumMixinStr_SSL_SECOP_OTHER_CERT = `enum SSL_SECOP_OTHER_CERT = ( 6 << 16 );`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_SECOP_OTHER_CERT); }))) {
            mixin(enumMixinStr_SSL_SECOP_OTHER_CERT);
        }
    }




    static if(!is(typeof(SSL_SECOP_PEER))) {
        private enum enumMixinStr_SSL_SECOP_PEER = `enum SSL_SECOP_PEER = 0x1000;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_SECOP_PEER); }))) {
            mixin(enumMixinStr_SSL_SECOP_PEER);
        }
    }




    static if(!is(typeof(SSL_SECOP_CIPHER_SUPPORTED))) {
        private enum enumMixinStr_SSL_SECOP_CIPHER_SUPPORTED = `enum SSL_SECOP_CIPHER_SUPPORTED = ( 1 | ( 1 << 16 ) );`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_SECOP_CIPHER_SUPPORTED); }))) {
            mixin(enumMixinStr_SSL_SECOP_CIPHER_SUPPORTED);
        }
    }




    static if(!is(typeof(SSL_SECOP_CIPHER_SHARED))) {
        private enum enumMixinStr_SSL_SECOP_CIPHER_SHARED = `enum SSL_SECOP_CIPHER_SHARED = ( 2 | ( 1 << 16 ) );`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_SECOP_CIPHER_SHARED); }))) {
            mixin(enumMixinStr_SSL_SECOP_CIPHER_SHARED);
        }
    }




    static if(!is(typeof(SSL_SECOP_CIPHER_CHECK))) {
        private enum enumMixinStr_SSL_SECOP_CIPHER_CHECK = `enum SSL_SECOP_CIPHER_CHECK = ( 3 | ( 1 << 16 ) );`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_SECOP_CIPHER_CHECK); }))) {
            mixin(enumMixinStr_SSL_SECOP_CIPHER_CHECK);
        }
    }




    static if(!is(typeof(SSL_SECOP_CURVE_SUPPORTED))) {
        private enum enumMixinStr_SSL_SECOP_CURVE_SUPPORTED = `enum SSL_SECOP_CURVE_SUPPORTED = ( 4 | ( 2 << 16 ) );`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_SECOP_CURVE_SUPPORTED); }))) {
            mixin(enumMixinStr_SSL_SECOP_CURVE_SUPPORTED);
        }
    }




    static if(!is(typeof(SSL_SECOP_CURVE_SHARED))) {
        private enum enumMixinStr_SSL_SECOP_CURVE_SHARED = `enum SSL_SECOP_CURVE_SHARED = ( 5 | ( 2 << 16 ) );`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_SECOP_CURVE_SHARED); }))) {
            mixin(enumMixinStr_SSL_SECOP_CURVE_SHARED);
        }
    }




    static if(!is(typeof(SSL_SECOP_CURVE_CHECK))) {
        private enum enumMixinStr_SSL_SECOP_CURVE_CHECK = `enum SSL_SECOP_CURVE_CHECK = ( 6 | ( 2 << 16 ) );`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_SECOP_CURVE_CHECK); }))) {
            mixin(enumMixinStr_SSL_SECOP_CURVE_CHECK);
        }
    }




    static if(!is(typeof(SSL_SECOP_TMP_DH))) {
        private enum enumMixinStr_SSL_SECOP_TMP_DH = `enum SSL_SECOP_TMP_DH = ( 7 | ( 4 << 16 ) );`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_SECOP_TMP_DH); }))) {
            mixin(enumMixinStr_SSL_SECOP_TMP_DH);
        }
    }




    static if(!is(typeof(SSL_SECOP_VERSION))) {
        private enum enumMixinStr_SSL_SECOP_VERSION = `enum SSL_SECOP_VERSION = ( 9 | 0 );`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_SECOP_VERSION); }))) {
            mixin(enumMixinStr_SSL_SECOP_VERSION);
        }
    }




    static if(!is(typeof(SSL_SECOP_TICKET))) {
        private enum enumMixinStr_SSL_SECOP_TICKET = `enum SSL_SECOP_TICKET = ( 10 | 0 );`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_SECOP_TICKET); }))) {
            mixin(enumMixinStr_SSL_SECOP_TICKET);
        }
    }




    static if(!is(typeof(SSL_SECOP_SIGALG_SUPPORTED))) {
        private enum enumMixinStr_SSL_SECOP_SIGALG_SUPPORTED = `enum SSL_SECOP_SIGALG_SUPPORTED = ( 11 | ( 5 << 16 ) );`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_SECOP_SIGALG_SUPPORTED); }))) {
            mixin(enumMixinStr_SSL_SECOP_SIGALG_SUPPORTED);
        }
    }




    static if(!is(typeof(SSL_SECOP_SIGALG_SHARED))) {
        private enum enumMixinStr_SSL_SECOP_SIGALG_SHARED = `enum SSL_SECOP_SIGALG_SHARED = ( 12 | ( 5 << 16 ) );`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_SECOP_SIGALG_SHARED); }))) {
            mixin(enumMixinStr_SSL_SECOP_SIGALG_SHARED);
        }
    }




    static if(!is(typeof(SSL_SECOP_SIGALG_CHECK))) {
        private enum enumMixinStr_SSL_SECOP_SIGALG_CHECK = `enum SSL_SECOP_SIGALG_CHECK = ( 13 | ( 5 << 16 ) );`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_SECOP_SIGALG_CHECK); }))) {
            mixin(enumMixinStr_SSL_SECOP_SIGALG_CHECK);
        }
    }




    static if(!is(typeof(SSL_SECOP_SIGALG_MASK))) {
        private enum enumMixinStr_SSL_SECOP_SIGALG_MASK = `enum SSL_SECOP_SIGALG_MASK = ( 14 | ( 5 << 16 ) );`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_SECOP_SIGALG_MASK); }))) {
            mixin(enumMixinStr_SSL_SECOP_SIGALG_MASK);
        }
    }




    static if(!is(typeof(SSL_SECOP_COMPRESSION))) {
        private enum enumMixinStr_SSL_SECOP_COMPRESSION = `enum SSL_SECOP_COMPRESSION = ( 15 | 0 );`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_SECOP_COMPRESSION); }))) {
            mixin(enumMixinStr_SSL_SECOP_COMPRESSION);
        }
    }




    static if(!is(typeof(SSL_SECOP_EE_KEY))) {
        private enum enumMixinStr_SSL_SECOP_EE_KEY = `enum SSL_SECOP_EE_KEY = ( 16 | ( 6 << 16 ) );`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_SECOP_EE_KEY); }))) {
            mixin(enumMixinStr_SSL_SECOP_EE_KEY);
        }
    }




    static if(!is(typeof(SSL_SECOP_CA_KEY))) {
        private enum enumMixinStr_SSL_SECOP_CA_KEY = `enum SSL_SECOP_CA_KEY = ( 17 | ( 6 << 16 ) );`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_SECOP_CA_KEY); }))) {
            mixin(enumMixinStr_SSL_SECOP_CA_KEY);
        }
    }




    static if(!is(typeof(SSL_SECOP_CA_MD))) {
        private enum enumMixinStr_SSL_SECOP_CA_MD = `enum SSL_SECOP_CA_MD = ( 18 | ( 6 << 16 ) );`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_SECOP_CA_MD); }))) {
            mixin(enumMixinStr_SSL_SECOP_CA_MD);
        }
    }




    static if(!is(typeof(SSL_SECOP_PEER_EE_KEY))) {
        private enum enumMixinStr_SSL_SECOP_PEER_EE_KEY = `enum SSL_SECOP_PEER_EE_KEY = ( ( 16 | ( 6 << 16 ) ) | 0x1000 );`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_SECOP_PEER_EE_KEY); }))) {
            mixin(enumMixinStr_SSL_SECOP_PEER_EE_KEY);
        }
    }




    static if(!is(typeof(SSL_SECOP_PEER_CA_KEY))) {
        private enum enumMixinStr_SSL_SECOP_PEER_CA_KEY = `enum SSL_SECOP_PEER_CA_KEY = ( ( 17 | ( 6 << 16 ) ) | 0x1000 );`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_SECOP_PEER_CA_KEY); }))) {
            mixin(enumMixinStr_SSL_SECOP_PEER_CA_KEY);
        }
    }




    static if(!is(typeof(SSL_SECOP_PEER_CA_MD))) {
        private enum enumMixinStr_SSL_SECOP_PEER_CA_MD = `enum SSL_SECOP_PEER_CA_MD = ( ( 18 | ( 6 << 16 ) ) | 0x1000 );`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_SECOP_PEER_CA_MD); }))) {
            mixin(enumMixinStr_SSL_SECOP_PEER_CA_MD);
        }
    }




    static if(!is(typeof(OPENSSL_INIT_NO_LOAD_SSL_STRINGS))) {
        private enum enumMixinStr_OPENSSL_INIT_NO_LOAD_SSL_STRINGS = `enum OPENSSL_INIT_NO_LOAD_SSL_STRINGS = 0x00100000L;`;
        static if(is(typeof({ mixin(enumMixinStr_OPENSSL_INIT_NO_LOAD_SSL_STRINGS); }))) {
            mixin(enumMixinStr_OPENSSL_INIT_NO_LOAD_SSL_STRINGS);
        }
    }




    static if(!is(typeof(OPENSSL_INIT_LOAD_SSL_STRINGS))) {
        private enum enumMixinStr_OPENSSL_INIT_LOAD_SSL_STRINGS = `enum OPENSSL_INIT_LOAD_SSL_STRINGS = 0x00200000L;`;
        static if(is(typeof({ mixin(enumMixinStr_OPENSSL_INIT_LOAD_SSL_STRINGS); }))) {
            mixin(enumMixinStr_OPENSSL_INIT_LOAD_SSL_STRINGS);
        }
    }




    static if(!is(typeof(OPENSSL_INIT_SSL_DEFAULT))) {
        private enum enumMixinStr_OPENSSL_INIT_SSL_DEFAULT = `enum OPENSSL_INIT_SSL_DEFAULT = ( 0x00200000L | 0x00000002L );`;
        static if(is(typeof({ mixin(enumMixinStr_OPENSSL_INIT_SSL_DEFAULT); }))) {
            mixin(enumMixinStr_OPENSSL_INIT_SSL_DEFAULT);
        }
    }




    static if(!is(typeof(SSL_TICKET_FATAL_ERR_MALLOC))) {
        private enum enumMixinStr_SSL_TICKET_FATAL_ERR_MALLOC = `enum SSL_TICKET_FATAL_ERR_MALLOC = 0;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_TICKET_FATAL_ERR_MALLOC); }))) {
            mixin(enumMixinStr_SSL_TICKET_FATAL_ERR_MALLOC);
        }
    }




    static if(!is(typeof(SSL_TICKET_FATAL_ERR_OTHER))) {
        private enum enumMixinStr_SSL_TICKET_FATAL_ERR_OTHER = `enum SSL_TICKET_FATAL_ERR_OTHER = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_TICKET_FATAL_ERR_OTHER); }))) {
            mixin(enumMixinStr_SSL_TICKET_FATAL_ERR_OTHER);
        }
    }




    static if(!is(typeof(SSL_TICKET_NONE))) {
        private enum enumMixinStr_SSL_TICKET_NONE = `enum SSL_TICKET_NONE = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_TICKET_NONE); }))) {
            mixin(enumMixinStr_SSL_TICKET_NONE);
        }
    }




    static if(!is(typeof(SSL_TICKET_EMPTY))) {
        private enum enumMixinStr_SSL_TICKET_EMPTY = `enum SSL_TICKET_EMPTY = 3;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_TICKET_EMPTY); }))) {
            mixin(enumMixinStr_SSL_TICKET_EMPTY);
        }
    }




    static if(!is(typeof(SSL_TICKET_NO_DECRYPT))) {
        private enum enumMixinStr_SSL_TICKET_NO_DECRYPT = `enum SSL_TICKET_NO_DECRYPT = 4;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_TICKET_NO_DECRYPT); }))) {
            mixin(enumMixinStr_SSL_TICKET_NO_DECRYPT);
        }
    }




    static if(!is(typeof(SSL_TICKET_SUCCESS))) {
        private enum enumMixinStr_SSL_TICKET_SUCCESS = `enum SSL_TICKET_SUCCESS = 5;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_TICKET_SUCCESS); }))) {
            mixin(enumMixinStr_SSL_TICKET_SUCCESS);
        }
    }




    static if(!is(typeof(SSL_TICKET_SUCCESS_RENEW))) {
        private enum enumMixinStr_SSL_TICKET_SUCCESS_RENEW = `enum SSL_TICKET_SUCCESS_RENEW = 6;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_TICKET_SUCCESS_RENEW); }))) {
            mixin(enumMixinStr_SSL_TICKET_SUCCESS_RENEW);
        }
    }




    static if(!is(typeof(SSL_TICKET_RETURN_ABORT))) {
        private enum enumMixinStr_SSL_TICKET_RETURN_ABORT = `enum SSL_TICKET_RETURN_ABORT = 0;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_TICKET_RETURN_ABORT); }))) {
            mixin(enumMixinStr_SSL_TICKET_RETURN_ABORT);
        }
    }




    static if(!is(typeof(SSL_TICKET_RETURN_IGNORE))) {
        private enum enumMixinStr_SSL_TICKET_RETURN_IGNORE = `enum SSL_TICKET_RETURN_IGNORE = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_TICKET_RETURN_IGNORE); }))) {
            mixin(enumMixinStr_SSL_TICKET_RETURN_IGNORE);
        }
    }




    static if(!is(typeof(SSL_TICKET_RETURN_IGNORE_RENEW))) {
        private enum enumMixinStr_SSL_TICKET_RETURN_IGNORE_RENEW = `enum SSL_TICKET_RETURN_IGNORE_RENEW = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_TICKET_RETURN_IGNORE_RENEW); }))) {
            mixin(enumMixinStr_SSL_TICKET_RETURN_IGNORE_RENEW);
        }
    }




    static if(!is(typeof(SSL_TICKET_RETURN_USE))) {
        private enum enumMixinStr_SSL_TICKET_RETURN_USE = `enum SSL_TICKET_RETURN_USE = 3;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_TICKET_RETURN_USE); }))) {
            mixin(enumMixinStr_SSL_TICKET_RETURN_USE);
        }
    }




    static if(!is(typeof(SSL_TICKET_RETURN_USE_RENEW))) {
        private enum enumMixinStr_SSL_TICKET_RETURN_USE_RENEW = `enum SSL_TICKET_RETURN_USE_RENEW = 4;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_TICKET_RETURN_USE_RENEW); }))) {
            mixin(enumMixinStr_SSL_TICKET_RETURN_USE_RENEW);
        }
    }






    static if(!is(typeof(SSL2_VERSION))) {
        private enum enumMixinStr_SSL2_VERSION = `enum SSL2_VERSION = 0x0002;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL2_VERSION); }))) {
            mixin(enumMixinStr_SSL2_VERSION);
        }
    }




    static if(!is(typeof(SSL2_MT_CLIENT_HELLO))) {
        private enum enumMixinStr_SSL2_MT_CLIENT_HELLO = `enum SSL2_MT_CLIENT_HELLO = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL2_MT_CLIENT_HELLO); }))) {
            mixin(enumMixinStr_SSL2_MT_CLIENT_HELLO);
        }
    }






    static if(!is(typeof(SSL_F_ADD_CLIENT_KEY_SHARE_EXT))) {
        private enum enumMixinStr_SSL_F_ADD_CLIENT_KEY_SHARE_EXT = `enum SSL_F_ADD_CLIENT_KEY_SHARE_EXT = 438;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_ADD_CLIENT_KEY_SHARE_EXT); }))) {
            mixin(enumMixinStr_SSL_F_ADD_CLIENT_KEY_SHARE_EXT);
        }
    }




    static if(!is(typeof(SSL_F_ADD_KEY_SHARE))) {
        private enum enumMixinStr_SSL_F_ADD_KEY_SHARE = `enum SSL_F_ADD_KEY_SHARE = 512;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_ADD_KEY_SHARE); }))) {
            mixin(enumMixinStr_SSL_F_ADD_KEY_SHARE);
        }
    }




    static if(!is(typeof(SSL_F_BYTES_TO_CIPHER_LIST))) {
        private enum enumMixinStr_SSL_F_BYTES_TO_CIPHER_LIST = `enum SSL_F_BYTES_TO_CIPHER_LIST = 519;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_BYTES_TO_CIPHER_LIST); }))) {
            mixin(enumMixinStr_SSL_F_BYTES_TO_CIPHER_LIST);
        }
    }




    static if(!is(typeof(SSL_F_CHECK_SUITEB_CIPHER_LIST))) {
        private enum enumMixinStr_SSL_F_CHECK_SUITEB_CIPHER_LIST = `enum SSL_F_CHECK_SUITEB_CIPHER_LIST = 331;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_CHECK_SUITEB_CIPHER_LIST); }))) {
            mixin(enumMixinStr_SSL_F_CHECK_SUITEB_CIPHER_LIST);
        }
    }




    static if(!is(typeof(SSL_F_CIPHERSUITE_CB))) {
        private enum enumMixinStr_SSL_F_CIPHERSUITE_CB = `enum SSL_F_CIPHERSUITE_CB = 622;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_CIPHERSUITE_CB); }))) {
            mixin(enumMixinStr_SSL_F_CIPHERSUITE_CB);
        }
    }




    static if(!is(typeof(SSL_F_CONSTRUCT_CA_NAMES))) {
        private enum enumMixinStr_SSL_F_CONSTRUCT_CA_NAMES = `enum SSL_F_CONSTRUCT_CA_NAMES = 552;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_CONSTRUCT_CA_NAMES); }))) {
            mixin(enumMixinStr_SSL_F_CONSTRUCT_CA_NAMES);
        }
    }




    static if(!is(typeof(SSL_F_CONSTRUCT_KEY_EXCHANGE_TBS))) {
        private enum enumMixinStr_SSL_F_CONSTRUCT_KEY_EXCHANGE_TBS = `enum SSL_F_CONSTRUCT_KEY_EXCHANGE_TBS = 553;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_CONSTRUCT_KEY_EXCHANGE_TBS); }))) {
            mixin(enumMixinStr_SSL_F_CONSTRUCT_KEY_EXCHANGE_TBS);
        }
    }




    static if(!is(typeof(SSL_F_CONSTRUCT_STATEFUL_TICKET))) {
        private enum enumMixinStr_SSL_F_CONSTRUCT_STATEFUL_TICKET = `enum SSL_F_CONSTRUCT_STATEFUL_TICKET = 636;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_CONSTRUCT_STATEFUL_TICKET); }))) {
            mixin(enumMixinStr_SSL_F_CONSTRUCT_STATEFUL_TICKET);
        }
    }




    static if(!is(typeof(SSL_F_CONSTRUCT_STATELESS_TICKET))) {
        private enum enumMixinStr_SSL_F_CONSTRUCT_STATELESS_TICKET = `enum SSL_F_CONSTRUCT_STATELESS_TICKET = 637;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_CONSTRUCT_STATELESS_TICKET); }))) {
            mixin(enumMixinStr_SSL_F_CONSTRUCT_STATELESS_TICKET);
        }
    }




    static if(!is(typeof(SSL_F_CREATE_SYNTHETIC_MESSAGE_HASH))) {
        private enum enumMixinStr_SSL_F_CREATE_SYNTHETIC_MESSAGE_HASH = `enum SSL_F_CREATE_SYNTHETIC_MESSAGE_HASH = 539;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_CREATE_SYNTHETIC_MESSAGE_HASH); }))) {
            mixin(enumMixinStr_SSL_F_CREATE_SYNTHETIC_MESSAGE_HASH);
        }
    }




    static if(!is(typeof(SSL_F_CREATE_TICKET_PREQUEL))) {
        private enum enumMixinStr_SSL_F_CREATE_TICKET_PREQUEL = `enum SSL_F_CREATE_TICKET_PREQUEL = 638;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_CREATE_TICKET_PREQUEL); }))) {
            mixin(enumMixinStr_SSL_F_CREATE_TICKET_PREQUEL);
        }
    }




    static if(!is(typeof(SSL_F_CT_MOVE_SCTS))) {
        private enum enumMixinStr_SSL_F_CT_MOVE_SCTS = `enum SSL_F_CT_MOVE_SCTS = 345;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_CT_MOVE_SCTS); }))) {
            mixin(enumMixinStr_SSL_F_CT_MOVE_SCTS);
        }
    }




    static if(!is(typeof(SSL_F_CT_STRICT))) {
        private enum enumMixinStr_SSL_F_CT_STRICT = `enum SSL_F_CT_STRICT = 349;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_CT_STRICT); }))) {
            mixin(enumMixinStr_SSL_F_CT_STRICT);
        }
    }




    static if(!is(typeof(SSL_F_CUSTOM_EXT_ADD))) {
        private enum enumMixinStr_SSL_F_CUSTOM_EXT_ADD = `enum SSL_F_CUSTOM_EXT_ADD = 554;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_CUSTOM_EXT_ADD); }))) {
            mixin(enumMixinStr_SSL_F_CUSTOM_EXT_ADD);
        }
    }




    static if(!is(typeof(SSL_F_CUSTOM_EXT_PARSE))) {
        private enum enumMixinStr_SSL_F_CUSTOM_EXT_PARSE = `enum SSL_F_CUSTOM_EXT_PARSE = 555;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_CUSTOM_EXT_PARSE); }))) {
            mixin(enumMixinStr_SSL_F_CUSTOM_EXT_PARSE);
        }
    }




    static if(!is(typeof(SSL_F_D2I_SSL_SESSION))) {
        private enum enumMixinStr_SSL_F_D2I_SSL_SESSION = `enum SSL_F_D2I_SSL_SESSION = 103;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_D2I_SSL_SESSION); }))) {
            mixin(enumMixinStr_SSL_F_D2I_SSL_SESSION);
        }
    }




    static if(!is(typeof(SSL_F_DANE_CTX_ENABLE))) {
        private enum enumMixinStr_SSL_F_DANE_CTX_ENABLE = `enum SSL_F_DANE_CTX_ENABLE = 347;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_DANE_CTX_ENABLE); }))) {
            mixin(enumMixinStr_SSL_F_DANE_CTX_ENABLE);
        }
    }




    static if(!is(typeof(SSL_F_DANE_MTYPE_SET))) {
        private enum enumMixinStr_SSL_F_DANE_MTYPE_SET = `enum SSL_F_DANE_MTYPE_SET = 393;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_DANE_MTYPE_SET); }))) {
            mixin(enumMixinStr_SSL_F_DANE_MTYPE_SET);
        }
    }




    static if(!is(typeof(SSL_F_DANE_TLSA_ADD))) {
        private enum enumMixinStr_SSL_F_DANE_TLSA_ADD = `enum SSL_F_DANE_TLSA_ADD = 394;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_DANE_TLSA_ADD); }))) {
            mixin(enumMixinStr_SSL_F_DANE_TLSA_ADD);
        }
    }




    static if(!is(typeof(SSL_F_DERIVE_SECRET_KEY_AND_IV))) {
        private enum enumMixinStr_SSL_F_DERIVE_SECRET_KEY_AND_IV = `enum SSL_F_DERIVE_SECRET_KEY_AND_IV = 514;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_DERIVE_SECRET_KEY_AND_IV); }))) {
            mixin(enumMixinStr_SSL_F_DERIVE_SECRET_KEY_AND_IV);
        }
    }




    static if(!is(typeof(SSL_F_DO_DTLS1_WRITE))) {
        private enum enumMixinStr_SSL_F_DO_DTLS1_WRITE = `enum SSL_F_DO_DTLS1_WRITE = 245;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_DO_DTLS1_WRITE); }))) {
            mixin(enumMixinStr_SSL_F_DO_DTLS1_WRITE);
        }
    }




    static if(!is(typeof(SSL_F_DO_SSL3_WRITE))) {
        private enum enumMixinStr_SSL_F_DO_SSL3_WRITE = `enum SSL_F_DO_SSL3_WRITE = 104;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_DO_SSL3_WRITE); }))) {
            mixin(enumMixinStr_SSL_F_DO_SSL3_WRITE);
        }
    }




    static if(!is(typeof(SSL_F_DTLS1_BUFFER_RECORD))) {
        private enum enumMixinStr_SSL_F_DTLS1_BUFFER_RECORD = `enum SSL_F_DTLS1_BUFFER_RECORD = 247;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_DTLS1_BUFFER_RECORD); }))) {
            mixin(enumMixinStr_SSL_F_DTLS1_BUFFER_RECORD);
        }
    }




    static if(!is(typeof(SSL_F_DTLS1_CHECK_TIMEOUT_NUM))) {
        private enum enumMixinStr_SSL_F_DTLS1_CHECK_TIMEOUT_NUM = `enum SSL_F_DTLS1_CHECK_TIMEOUT_NUM = 318;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_DTLS1_CHECK_TIMEOUT_NUM); }))) {
            mixin(enumMixinStr_SSL_F_DTLS1_CHECK_TIMEOUT_NUM);
        }
    }




    static if(!is(typeof(SSL_F_DTLS1_HEARTBEAT))) {
        private enum enumMixinStr_SSL_F_DTLS1_HEARTBEAT = `enum SSL_F_DTLS1_HEARTBEAT = 305;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_DTLS1_HEARTBEAT); }))) {
            mixin(enumMixinStr_SSL_F_DTLS1_HEARTBEAT);
        }
    }




    static if(!is(typeof(SSL_F_DTLS1_HM_FRAGMENT_NEW))) {
        private enum enumMixinStr_SSL_F_DTLS1_HM_FRAGMENT_NEW = `enum SSL_F_DTLS1_HM_FRAGMENT_NEW = 623;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_DTLS1_HM_FRAGMENT_NEW); }))) {
            mixin(enumMixinStr_SSL_F_DTLS1_HM_FRAGMENT_NEW);
        }
    }




    static if(!is(typeof(SSL_F_DTLS1_PREPROCESS_FRAGMENT))) {
        private enum enumMixinStr_SSL_F_DTLS1_PREPROCESS_FRAGMENT = `enum SSL_F_DTLS1_PREPROCESS_FRAGMENT = 288;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_DTLS1_PREPROCESS_FRAGMENT); }))) {
            mixin(enumMixinStr_SSL_F_DTLS1_PREPROCESS_FRAGMENT);
        }
    }




    static if(!is(typeof(SSL_F_DTLS1_PROCESS_BUFFERED_RECORDS))) {
        private enum enumMixinStr_SSL_F_DTLS1_PROCESS_BUFFERED_RECORDS = `enum SSL_F_DTLS1_PROCESS_BUFFERED_RECORDS = 424;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_DTLS1_PROCESS_BUFFERED_RECORDS); }))) {
            mixin(enumMixinStr_SSL_F_DTLS1_PROCESS_BUFFERED_RECORDS);
        }
    }




    static if(!is(typeof(SSL_F_DTLS1_PROCESS_RECORD))) {
        private enum enumMixinStr_SSL_F_DTLS1_PROCESS_RECORD = `enum SSL_F_DTLS1_PROCESS_RECORD = 257;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_DTLS1_PROCESS_RECORD); }))) {
            mixin(enumMixinStr_SSL_F_DTLS1_PROCESS_RECORD);
        }
    }




    static if(!is(typeof(SSL_F_DTLS1_READ_BYTES))) {
        private enum enumMixinStr_SSL_F_DTLS1_READ_BYTES = `enum SSL_F_DTLS1_READ_BYTES = 258;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_DTLS1_READ_BYTES); }))) {
            mixin(enumMixinStr_SSL_F_DTLS1_READ_BYTES);
        }
    }




    static if(!is(typeof(SSL_F_DTLS1_READ_FAILED))) {
        private enum enumMixinStr_SSL_F_DTLS1_READ_FAILED = `enum SSL_F_DTLS1_READ_FAILED = 339;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_DTLS1_READ_FAILED); }))) {
            mixin(enumMixinStr_SSL_F_DTLS1_READ_FAILED);
        }
    }




    static if(!is(typeof(SSL_F_DTLS1_RETRANSMIT_MESSAGE))) {
        private enum enumMixinStr_SSL_F_DTLS1_RETRANSMIT_MESSAGE = `enum SSL_F_DTLS1_RETRANSMIT_MESSAGE = 390;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_DTLS1_RETRANSMIT_MESSAGE); }))) {
            mixin(enumMixinStr_SSL_F_DTLS1_RETRANSMIT_MESSAGE);
        }
    }




    static if(!is(typeof(SSL_F_DTLS1_WRITE_APP_DATA_BYTES))) {
        private enum enumMixinStr_SSL_F_DTLS1_WRITE_APP_DATA_BYTES = `enum SSL_F_DTLS1_WRITE_APP_DATA_BYTES = 268;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_DTLS1_WRITE_APP_DATA_BYTES); }))) {
            mixin(enumMixinStr_SSL_F_DTLS1_WRITE_APP_DATA_BYTES);
        }
    }




    static if(!is(typeof(SSL_F_DTLS1_WRITE_BYTES))) {
        private enum enumMixinStr_SSL_F_DTLS1_WRITE_BYTES = `enum SSL_F_DTLS1_WRITE_BYTES = 545;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_DTLS1_WRITE_BYTES); }))) {
            mixin(enumMixinStr_SSL_F_DTLS1_WRITE_BYTES);
        }
    }




    static if(!is(typeof(SSL_F_DTLSV1_LISTEN))) {
        private enum enumMixinStr_SSL_F_DTLSV1_LISTEN = `enum SSL_F_DTLSV1_LISTEN = 350;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_DTLSV1_LISTEN); }))) {
            mixin(enumMixinStr_SSL_F_DTLSV1_LISTEN);
        }
    }




    static if(!is(typeof(SSL_F_DTLS_CONSTRUCT_CHANGE_CIPHER_SPEC))) {
        private enum enumMixinStr_SSL_F_DTLS_CONSTRUCT_CHANGE_CIPHER_SPEC = `enum SSL_F_DTLS_CONSTRUCT_CHANGE_CIPHER_SPEC = 371;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_DTLS_CONSTRUCT_CHANGE_CIPHER_SPEC); }))) {
            mixin(enumMixinStr_SSL_F_DTLS_CONSTRUCT_CHANGE_CIPHER_SPEC);
        }
    }




    static if(!is(typeof(SSL_F_DTLS_CONSTRUCT_HELLO_VERIFY_REQUEST))) {
        private enum enumMixinStr_SSL_F_DTLS_CONSTRUCT_HELLO_VERIFY_REQUEST = `enum SSL_F_DTLS_CONSTRUCT_HELLO_VERIFY_REQUEST = 385;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_DTLS_CONSTRUCT_HELLO_VERIFY_REQUEST); }))) {
            mixin(enumMixinStr_SSL_F_DTLS_CONSTRUCT_HELLO_VERIFY_REQUEST);
        }
    }




    static if(!is(typeof(SSL_F_DTLS_GET_REASSEMBLED_MESSAGE))) {
        private enum enumMixinStr_SSL_F_DTLS_GET_REASSEMBLED_MESSAGE = `enum SSL_F_DTLS_GET_REASSEMBLED_MESSAGE = 370;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_DTLS_GET_REASSEMBLED_MESSAGE); }))) {
            mixin(enumMixinStr_SSL_F_DTLS_GET_REASSEMBLED_MESSAGE);
        }
    }




    static if(!is(typeof(SSL_F_DTLS_PROCESS_HELLO_VERIFY))) {
        private enum enumMixinStr_SSL_F_DTLS_PROCESS_HELLO_VERIFY = `enum SSL_F_DTLS_PROCESS_HELLO_VERIFY = 386;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_DTLS_PROCESS_HELLO_VERIFY); }))) {
            mixin(enumMixinStr_SSL_F_DTLS_PROCESS_HELLO_VERIFY);
        }
    }




    static if(!is(typeof(SSL_F_DTLS_RECORD_LAYER_NEW))) {
        private enum enumMixinStr_SSL_F_DTLS_RECORD_LAYER_NEW = `enum SSL_F_DTLS_RECORD_LAYER_NEW = 635;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_DTLS_RECORD_LAYER_NEW); }))) {
            mixin(enumMixinStr_SSL_F_DTLS_RECORD_LAYER_NEW);
        }
    }




    static if(!is(typeof(SSL_F_DTLS_WAIT_FOR_DRY))) {
        private enum enumMixinStr_SSL_F_DTLS_WAIT_FOR_DRY = `enum SSL_F_DTLS_WAIT_FOR_DRY = 592;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_DTLS_WAIT_FOR_DRY); }))) {
            mixin(enumMixinStr_SSL_F_DTLS_WAIT_FOR_DRY);
        }
    }




    static if(!is(typeof(SSL_F_EARLY_DATA_COUNT_OK))) {
        private enum enumMixinStr_SSL_F_EARLY_DATA_COUNT_OK = `enum SSL_F_EARLY_DATA_COUNT_OK = 532;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_EARLY_DATA_COUNT_OK); }))) {
            mixin(enumMixinStr_SSL_F_EARLY_DATA_COUNT_OK);
        }
    }




    static if(!is(typeof(SSL_F_FINAL_EARLY_DATA))) {
        private enum enumMixinStr_SSL_F_FINAL_EARLY_DATA = `enum SSL_F_FINAL_EARLY_DATA = 556;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_FINAL_EARLY_DATA); }))) {
            mixin(enumMixinStr_SSL_F_FINAL_EARLY_DATA);
        }
    }




    static if(!is(typeof(SSL_F_FINAL_EC_PT_FORMATS))) {
        private enum enumMixinStr_SSL_F_FINAL_EC_PT_FORMATS = `enum SSL_F_FINAL_EC_PT_FORMATS = 485;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_FINAL_EC_PT_FORMATS); }))) {
            mixin(enumMixinStr_SSL_F_FINAL_EC_PT_FORMATS);
        }
    }




    static if(!is(typeof(SSL_F_FINAL_EMS))) {
        private enum enumMixinStr_SSL_F_FINAL_EMS = `enum SSL_F_FINAL_EMS = 486;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_FINAL_EMS); }))) {
            mixin(enumMixinStr_SSL_F_FINAL_EMS);
        }
    }




    static if(!is(typeof(SSL_F_FINAL_KEY_SHARE))) {
        private enum enumMixinStr_SSL_F_FINAL_KEY_SHARE = `enum SSL_F_FINAL_KEY_SHARE = 503;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_FINAL_KEY_SHARE); }))) {
            mixin(enumMixinStr_SSL_F_FINAL_KEY_SHARE);
        }
    }




    static if(!is(typeof(SSL_F_FINAL_MAXFRAGMENTLEN))) {
        private enum enumMixinStr_SSL_F_FINAL_MAXFRAGMENTLEN = `enum SSL_F_FINAL_MAXFRAGMENTLEN = 557;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_FINAL_MAXFRAGMENTLEN); }))) {
            mixin(enumMixinStr_SSL_F_FINAL_MAXFRAGMENTLEN);
        }
    }




    static if(!is(typeof(SSL_F_FINAL_RENEGOTIATE))) {
        private enum enumMixinStr_SSL_F_FINAL_RENEGOTIATE = `enum SSL_F_FINAL_RENEGOTIATE = 483;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_FINAL_RENEGOTIATE); }))) {
            mixin(enumMixinStr_SSL_F_FINAL_RENEGOTIATE);
        }
    }




    static if(!is(typeof(SSL_F_FINAL_SERVER_NAME))) {
        private enum enumMixinStr_SSL_F_FINAL_SERVER_NAME = `enum SSL_F_FINAL_SERVER_NAME = 558;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_FINAL_SERVER_NAME); }))) {
            mixin(enumMixinStr_SSL_F_FINAL_SERVER_NAME);
        }
    }




    static if(!is(typeof(SSL_F_FINAL_SIG_ALGS))) {
        private enum enumMixinStr_SSL_F_FINAL_SIG_ALGS = `enum SSL_F_FINAL_SIG_ALGS = 497;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_FINAL_SIG_ALGS); }))) {
            mixin(enumMixinStr_SSL_F_FINAL_SIG_ALGS);
        }
    }




    static if(!is(typeof(SSL_F_GET_CERT_VERIFY_TBS_DATA))) {
        private enum enumMixinStr_SSL_F_GET_CERT_VERIFY_TBS_DATA = `enum SSL_F_GET_CERT_VERIFY_TBS_DATA = 588;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_GET_CERT_VERIFY_TBS_DATA); }))) {
            mixin(enumMixinStr_SSL_F_GET_CERT_VERIFY_TBS_DATA);
        }
    }




    static if(!is(typeof(SSL_F_NSS_KEYLOG_INT))) {
        private enum enumMixinStr_SSL_F_NSS_KEYLOG_INT = `enum SSL_F_NSS_KEYLOG_INT = 500;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_NSS_KEYLOG_INT); }))) {
            mixin(enumMixinStr_SSL_F_NSS_KEYLOG_INT);
        }
    }




    static if(!is(typeof(SSL_F_OPENSSL_INIT_SSL))) {
        private enum enumMixinStr_SSL_F_OPENSSL_INIT_SSL = `enum SSL_F_OPENSSL_INIT_SSL = 342;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_OPENSSL_INIT_SSL); }))) {
            mixin(enumMixinStr_SSL_F_OPENSSL_INIT_SSL);
        }
    }




    static if(!is(typeof(SSL_F_OSSL_STATEM_CLIENT13_READ_TRANSITION))) {
        private enum enumMixinStr_SSL_F_OSSL_STATEM_CLIENT13_READ_TRANSITION = `enum SSL_F_OSSL_STATEM_CLIENT13_READ_TRANSITION = 436;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_OSSL_STATEM_CLIENT13_READ_TRANSITION); }))) {
            mixin(enumMixinStr_SSL_F_OSSL_STATEM_CLIENT13_READ_TRANSITION);
        }
    }




    static if(!is(typeof(SSL_F_OSSL_STATEM_CLIENT13_WRITE_TRANSITION))) {
        private enum enumMixinStr_SSL_F_OSSL_STATEM_CLIENT13_WRITE_TRANSITION = `enum SSL_F_OSSL_STATEM_CLIENT13_WRITE_TRANSITION = 598;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_OSSL_STATEM_CLIENT13_WRITE_TRANSITION); }))) {
            mixin(enumMixinStr_SSL_F_OSSL_STATEM_CLIENT13_WRITE_TRANSITION);
        }
    }




    static if(!is(typeof(SSL_F_OSSL_STATEM_CLIENT_CONSTRUCT_MESSAGE))) {
        private enum enumMixinStr_SSL_F_OSSL_STATEM_CLIENT_CONSTRUCT_MESSAGE = `enum SSL_F_OSSL_STATEM_CLIENT_CONSTRUCT_MESSAGE = 430;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_OSSL_STATEM_CLIENT_CONSTRUCT_MESSAGE); }))) {
            mixin(enumMixinStr_SSL_F_OSSL_STATEM_CLIENT_CONSTRUCT_MESSAGE);
        }
    }




    static if(!is(typeof(SSL_F_OSSL_STATEM_CLIENT_POST_PROCESS_MESSAGE))) {
        private enum enumMixinStr_SSL_F_OSSL_STATEM_CLIENT_POST_PROCESS_MESSAGE = `enum SSL_F_OSSL_STATEM_CLIENT_POST_PROCESS_MESSAGE = 593;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_OSSL_STATEM_CLIENT_POST_PROCESS_MESSAGE); }))) {
            mixin(enumMixinStr_SSL_F_OSSL_STATEM_CLIENT_POST_PROCESS_MESSAGE);
        }
    }




    static if(!is(typeof(SSL_F_OSSL_STATEM_CLIENT_PROCESS_MESSAGE))) {
        private enum enumMixinStr_SSL_F_OSSL_STATEM_CLIENT_PROCESS_MESSAGE = `enum SSL_F_OSSL_STATEM_CLIENT_PROCESS_MESSAGE = 594;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_OSSL_STATEM_CLIENT_PROCESS_MESSAGE); }))) {
            mixin(enumMixinStr_SSL_F_OSSL_STATEM_CLIENT_PROCESS_MESSAGE);
        }
    }




    static if(!is(typeof(SSL_F_OSSL_STATEM_CLIENT_READ_TRANSITION))) {
        private enum enumMixinStr_SSL_F_OSSL_STATEM_CLIENT_READ_TRANSITION = `enum SSL_F_OSSL_STATEM_CLIENT_READ_TRANSITION = 417;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_OSSL_STATEM_CLIENT_READ_TRANSITION); }))) {
            mixin(enumMixinStr_SSL_F_OSSL_STATEM_CLIENT_READ_TRANSITION);
        }
    }




    static if(!is(typeof(SSL_F_OSSL_STATEM_CLIENT_WRITE_TRANSITION))) {
        private enum enumMixinStr_SSL_F_OSSL_STATEM_CLIENT_WRITE_TRANSITION = `enum SSL_F_OSSL_STATEM_CLIENT_WRITE_TRANSITION = 599;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_OSSL_STATEM_CLIENT_WRITE_TRANSITION); }))) {
            mixin(enumMixinStr_SSL_F_OSSL_STATEM_CLIENT_WRITE_TRANSITION);
        }
    }




    static if(!is(typeof(SSL_F_OSSL_STATEM_SERVER13_READ_TRANSITION))) {
        private enum enumMixinStr_SSL_F_OSSL_STATEM_SERVER13_READ_TRANSITION = `enum SSL_F_OSSL_STATEM_SERVER13_READ_TRANSITION = 437;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_OSSL_STATEM_SERVER13_READ_TRANSITION); }))) {
            mixin(enumMixinStr_SSL_F_OSSL_STATEM_SERVER13_READ_TRANSITION);
        }
    }




    static if(!is(typeof(SSL_F_OSSL_STATEM_SERVER13_WRITE_TRANSITION))) {
        private enum enumMixinStr_SSL_F_OSSL_STATEM_SERVER13_WRITE_TRANSITION = `enum SSL_F_OSSL_STATEM_SERVER13_WRITE_TRANSITION = 600;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_OSSL_STATEM_SERVER13_WRITE_TRANSITION); }))) {
            mixin(enumMixinStr_SSL_F_OSSL_STATEM_SERVER13_WRITE_TRANSITION);
        }
    }




    static if(!is(typeof(SSL_F_OSSL_STATEM_SERVER_CONSTRUCT_MESSAGE))) {
        private enum enumMixinStr_SSL_F_OSSL_STATEM_SERVER_CONSTRUCT_MESSAGE = `enum SSL_F_OSSL_STATEM_SERVER_CONSTRUCT_MESSAGE = 431;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_OSSL_STATEM_SERVER_CONSTRUCT_MESSAGE); }))) {
            mixin(enumMixinStr_SSL_F_OSSL_STATEM_SERVER_CONSTRUCT_MESSAGE);
        }
    }




    static if(!is(typeof(SSL_F_OSSL_STATEM_SERVER_POST_PROCESS_MESSAGE))) {
        private enum enumMixinStr_SSL_F_OSSL_STATEM_SERVER_POST_PROCESS_MESSAGE = `enum SSL_F_OSSL_STATEM_SERVER_POST_PROCESS_MESSAGE = 601;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_OSSL_STATEM_SERVER_POST_PROCESS_MESSAGE); }))) {
            mixin(enumMixinStr_SSL_F_OSSL_STATEM_SERVER_POST_PROCESS_MESSAGE);
        }
    }




    static if(!is(typeof(SSL_F_OSSL_STATEM_SERVER_POST_WORK))) {
        private enum enumMixinStr_SSL_F_OSSL_STATEM_SERVER_POST_WORK = `enum SSL_F_OSSL_STATEM_SERVER_POST_WORK = 602;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_OSSL_STATEM_SERVER_POST_WORK); }))) {
            mixin(enumMixinStr_SSL_F_OSSL_STATEM_SERVER_POST_WORK);
        }
    }




    static if(!is(typeof(SSL_F_OSSL_STATEM_SERVER_PRE_WORK))) {
        private enum enumMixinStr_SSL_F_OSSL_STATEM_SERVER_PRE_WORK = `enum SSL_F_OSSL_STATEM_SERVER_PRE_WORK = 640;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_OSSL_STATEM_SERVER_PRE_WORK); }))) {
            mixin(enumMixinStr_SSL_F_OSSL_STATEM_SERVER_PRE_WORK);
        }
    }




    static if(!is(typeof(SSL_F_OSSL_STATEM_SERVER_PROCESS_MESSAGE))) {
        private enum enumMixinStr_SSL_F_OSSL_STATEM_SERVER_PROCESS_MESSAGE = `enum SSL_F_OSSL_STATEM_SERVER_PROCESS_MESSAGE = 603;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_OSSL_STATEM_SERVER_PROCESS_MESSAGE); }))) {
            mixin(enumMixinStr_SSL_F_OSSL_STATEM_SERVER_PROCESS_MESSAGE);
        }
    }




    static if(!is(typeof(SSL_F_OSSL_STATEM_SERVER_READ_TRANSITION))) {
        private enum enumMixinStr_SSL_F_OSSL_STATEM_SERVER_READ_TRANSITION = `enum SSL_F_OSSL_STATEM_SERVER_READ_TRANSITION = 418;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_OSSL_STATEM_SERVER_READ_TRANSITION); }))) {
            mixin(enumMixinStr_SSL_F_OSSL_STATEM_SERVER_READ_TRANSITION);
        }
    }




    static if(!is(typeof(SSL_F_OSSL_STATEM_SERVER_WRITE_TRANSITION))) {
        private enum enumMixinStr_SSL_F_OSSL_STATEM_SERVER_WRITE_TRANSITION = `enum SSL_F_OSSL_STATEM_SERVER_WRITE_TRANSITION = 604;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_OSSL_STATEM_SERVER_WRITE_TRANSITION); }))) {
            mixin(enumMixinStr_SSL_F_OSSL_STATEM_SERVER_WRITE_TRANSITION);
        }
    }




    static if(!is(typeof(SSL_F_PARSE_CA_NAMES))) {
        private enum enumMixinStr_SSL_F_PARSE_CA_NAMES = `enum SSL_F_PARSE_CA_NAMES = 541;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_PARSE_CA_NAMES); }))) {
            mixin(enumMixinStr_SSL_F_PARSE_CA_NAMES);
        }
    }




    static if(!is(typeof(SSL_F_PITEM_NEW))) {
        private enum enumMixinStr_SSL_F_PITEM_NEW = `enum SSL_F_PITEM_NEW = 624;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_PITEM_NEW); }))) {
            mixin(enumMixinStr_SSL_F_PITEM_NEW);
        }
    }




    static if(!is(typeof(SSL_F_PQUEUE_NEW))) {
        private enum enumMixinStr_SSL_F_PQUEUE_NEW = `enum SSL_F_PQUEUE_NEW = 625;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_PQUEUE_NEW); }))) {
            mixin(enumMixinStr_SSL_F_PQUEUE_NEW);
        }
    }




    static if(!is(typeof(SSL_F_PROCESS_KEY_SHARE_EXT))) {
        private enum enumMixinStr_SSL_F_PROCESS_KEY_SHARE_EXT = `enum SSL_F_PROCESS_KEY_SHARE_EXT = 439;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_PROCESS_KEY_SHARE_EXT); }))) {
            mixin(enumMixinStr_SSL_F_PROCESS_KEY_SHARE_EXT);
        }
    }




    static if(!is(typeof(SSL_F_READ_STATE_MACHINE))) {
        private enum enumMixinStr_SSL_F_READ_STATE_MACHINE = `enum SSL_F_READ_STATE_MACHINE = 352;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_READ_STATE_MACHINE); }))) {
            mixin(enumMixinStr_SSL_F_READ_STATE_MACHINE);
        }
    }




    static if(!is(typeof(SSL_F_SET_CLIENT_CIPHERSUITE))) {
        private enum enumMixinStr_SSL_F_SET_CLIENT_CIPHERSUITE = `enum SSL_F_SET_CLIENT_CIPHERSUITE = 540;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SET_CLIENT_CIPHERSUITE); }))) {
            mixin(enumMixinStr_SSL_F_SET_CLIENT_CIPHERSUITE);
        }
    }




    static if(!is(typeof(SSL_F_SRP_GENERATE_CLIENT_MASTER_SECRET))) {
        private enum enumMixinStr_SSL_F_SRP_GENERATE_CLIENT_MASTER_SECRET = `enum SSL_F_SRP_GENERATE_CLIENT_MASTER_SECRET = 595;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SRP_GENERATE_CLIENT_MASTER_SECRET); }))) {
            mixin(enumMixinStr_SSL_F_SRP_GENERATE_CLIENT_MASTER_SECRET);
        }
    }




    static if(!is(typeof(SSL_F_SRP_GENERATE_SERVER_MASTER_SECRET))) {
        private enum enumMixinStr_SSL_F_SRP_GENERATE_SERVER_MASTER_SECRET = `enum SSL_F_SRP_GENERATE_SERVER_MASTER_SECRET = 589;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SRP_GENERATE_SERVER_MASTER_SECRET); }))) {
            mixin(enumMixinStr_SSL_F_SRP_GENERATE_SERVER_MASTER_SECRET);
        }
    }




    static if(!is(typeof(SSL_F_SRP_VERIFY_SERVER_PARAM))) {
        private enum enumMixinStr_SSL_F_SRP_VERIFY_SERVER_PARAM = `enum SSL_F_SRP_VERIFY_SERVER_PARAM = 596;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SRP_VERIFY_SERVER_PARAM); }))) {
            mixin(enumMixinStr_SSL_F_SRP_VERIFY_SERVER_PARAM);
        }
    }




    static if(!is(typeof(SSL_F_SSL3_CHANGE_CIPHER_STATE))) {
        private enum enumMixinStr_SSL_F_SSL3_CHANGE_CIPHER_STATE = `enum SSL_F_SSL3_CHANGE_CIPHER_STATE = 129;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL3_CHANGE_CIPHER_STATE); }))) {
            mixin(enumMixinStr_SSL_F_SSL3_CHANGE_CIPHER_STATE);
        }
    }




    static if(!is(typeof(SSL_F_SSL3_CHECK_CERT_AND_ALGORITHM))) {
        private enum enumMixinStr_SSL_F_SSL3_CHECK_CERT_AND_ALGORITHM = `enum SSL_F_SSL3_CHECK_CERT_AND_ALGORITHM = 130;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL3_CHECK_CERT_AND_ALGORITHM); }))) {
            mixin(enumMixinStr_SSL_F_SSL3_CHECK_CERT_AND_ALGORITHM);
        }
    }




    static if(!is(typeof(SSL_F_SSL3_CTRL))) {
        private enum enumMixinStr_SSL_F_SSL3_CTRL = `enum SSL_F_SSL3_CTRL = 213;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL3_CTRL); }))) {
            mixin(enumMixinStr_SSL_F_SSL3_CTRL);
        }
    }




    static if(!is(typeof(SSL_F_SSL3_CTX_CTRL))) {
        private enum enumMixinStr_SSL_F_SSL3_CTX_CTRL = `enum SSL_F_SSL3_CTX_CTRL = 133;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL3_CTX_CTRL); }))) {
            mixin(enumMixinStr_SSL_F_SSL3_CTX_CTRL);
        }
    }




    static if(!is(typeof(SSL_F_SSL3_DIGEST_CACHED_RECORDS))) {
        private enum enumMixinStr_SSL_F_SSL3_DIGEST_CACHED_RECORDS = `enum SSL_F_SSL3_DIGEST_CACHED_RECORDS = 293;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL3_DIGEST_CACHED_RECORDS); }))) {
            mixin(enumMixinStr_SSL_F_SSL3_DIGEST_CACHED_RECORDS);
        }
    }




    static if(!is(typeof(SSL_F_SSL3_DO_CHANGE_CIPHER_SPEC))) {
        private enum enumMixinStr_SSL_F_SSL3_DO_CHANGE_CIPHER_SPEC = `enum SSL_F_SSL3_DO_CHANGE_CIPHER_SPEC = 292;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL3_DO_CHANGE_CIPHER_SPEC); }))) {
            mixin(enumMixinStr_SSL_F_SSL3_DO_CHANGE_CIPHER_SPEC);
        }
    }




    static if(!is(typeof(SSL_F_SSL3_ENC))) {
        private enum enumMixinStr_SSL_F_SSL3_ENC = `enum SSL_F_SSL3_ENC = 608;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL3_ENC); }))) {
            mixin(enumMixinStr_SSL_F_SSL3_ENC);
        }
    }




    static if(!is(typeof(SSL_F_SSL3_FINAL_FINISH_MAC))) {
        private enum enumMixinStr_SSL_F_SSL3_FINAL_FINISH_MAC = `enum SSL_F_SSL3_FINAL_FINISH_MAC = 285;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL3_FINAL_FINISH_MAC); }))) {
            mixin(enumMixinStr_SSL_F_SSL3_FINAL_FINISH_MAC);
        }
    }




    static if(!is(typeof(SSL_F_SSL3_FINISH_MAC))) {
        private enum enumMixinStr_SSL_F_SSL3_FINISH_MAC = `enum SSL_F_SSL3_FINISH_MAC = 587;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL3_FINISH_MAC); }))) {
            mixin(enumMixinStr_SSL_F_SSL3_FINISH_MAC);
        }
    }




    static if(!is(typeof(SSL_F_SSL3_GENERATE_KEY_BLOCK))) {
        private enum enumMixinStr_SSL_F_SSL3_GENERATE_KEY_BLOCK = `enum SSL_F_SSL3_GENERATE_KEY_BLOCK = 238;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL3_GENERATE_KEY_BLOCK); }))) {
            mixin(enumMixinStr_SSL_F_SSL3_GENERATE_KEY_BLOCK);
        }
    }




    static if(!is(typeof(SSL_F_SSL3_GENERATE_MASTER_SECRET))) {
        private enum enumMixinStr_SSL_F_SSL3_GENERATE_MASTER_SECRET = `enum SSL_F_SSL3_GENERATE_MASTER_SECRET = 388;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL3_GENERATE_MASTER_SECRET); }))) {
            mixin(enumMixinStr_SSL_F_SSL3_GENERATE_MASTER_SECRET);
        }
    }




    static if(!is(typeof(SSL_F_SSL3_GET_RECORD))) {
        private enum enumMixinStr_SSL_F_SSL3_GET_RECORD = `enum SSL_F_SSL3_GET_RECORD = 143;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL3_GET_RECORD); }))) {
            mixin(enumMixinStr_SSL_F_SSL3_GET_RECORD);
        }
    }




    static if(!is(typeof(SSL_F_SSL3_INIT_FINISHED_MAC))) {
        private enum enumMixinStr_SSL_F_SSL3_INIT_FINISHED_MAC = `enum SSL_F_SSL3_INIT_FINISHED_MAC = 397;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL3_INIT_FINISHED_MAC); }))) {
            mixin(enumMixinStr_SSL_F_SSL3_INIT_FINISHED_MAC);
        }
    }




    static if(!is(typeof(SSL_F_SSL3_OUTPUT_CERT_CHAIN))) {
        private enum enumMixinStr_SSL_F_SSL3_OUTPUT_CERT_CHAIN = `enum SSL_F_SSL3_OUTPUT_CERT_CHAIN = 147;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL3_OUTPUT_CERT_CHAIN); }))) {
            mixin(enumMixinStr_SSL_F_SSL3_OUTPUT_CERT_CHAIN);
        }
    }




    static if(!is(typeof(SSL_F_SSL3_READ_BYTES))) {
        private enum enumMixinStr_SSL_F_SSL3_READ_BYTES = `enum SSL_F_SSL3_READ_BYTES = 148;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL3_READ_BYTES); }))) {
            mixin(enumMixinStr_SSL_F_SSL3_READ_BYTES);
        }
    }




    static if(!is(typeof(SSL_F_SSL3_READ_N))) {
        private enum enumMixinStr_SSL_F_SSL3_READ_N = `enum SSL_F_SSL3_READ_N = 149;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL3_READ_N); }))) {
            mixin(enumMixinStr_SSL_F_SSL3_READ_N);
        }
    }




    static if(!is(typeof(SSL_F_SSL3_SETUP_KEY_BLOCK))) {
        private enum enumMixinStr_SSL_F_SSL3_SETUP_KEY_BLOCK = `enum SSL_F_SSL3_SETUP_KEY_BLOCK = 157;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL3_SETUP_KEY_BLOCK); }))) {
            mixin(enumMixinStr_SSL_F_SSL3_SETUP_KEY_BLOCK);
        }
    }




    static if(!is(typeof(SSL_F_SSL3_SETUP_READ_BUFFER))) {
        private enum enumMixinStr_SSL_F_SSL3_SETUP_READ_BUFFER = `enum SSL_F_SSL3_SETUP_READ_BUFFER = 156;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL3_SETUP_READ_BUFFER); }))) {
            mixin(enumMixinStr_SSL_F_SSL3_SETUP_READ_BUFFER);
        }
    }




    static if(!is(typeof(SSL_F_SSL3_SETUP_WRITE_BUFFER))) {
        private enum enumMixinStr_SSL_F_SSL3_SETUP_WRITE_BUFFER = `enum SSL_F_SSL3_SETUP_WRITE_BUFFER = 291;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL3_SETUP_WRITE_BUFFER); }))) {
            mixin(enumMixinStr_SSL_F_SSL3_SETUP_WRITE_BUFFER);
        }
    }




    static if(!is(typeof(SSL_F_SSL3_WRITE_BYTES))) {
        private enum enumMixinStr_SSL_F_SSL3_WRITE_BYTES = `enum SSL_F_SSL3_WRITE_BYTES = 158;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL3_WRITE_BYTES); }))) {
            mixin(enumMixinStr_SSL_F_SSL3_WRITE_BYTES);
        }
    }




    static if(!is(typeof(SSL_F_SSL3_WRITE_PENDING))) {
        private enum enumMixinStr_SSL_F_SSL3_WRITE_PENDING = `enum SSL_F_SSL3_WRITE_PENDING = 159;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL3_WRITE_PENDING); }))) {
            mixin(enumMixinStr_SSL_F_SSL3_WRITE_PENDING);
        }
    }




    static if(!is(typeof(SSL_F_SSL_ADD_CERT_CHAIN))) {
        private enum enumMixinStr_SSL_F_SSL_ADD_CERT_CHAIN = `enum SSL_F_SSL_ADD_CERT_CHAIN = 316;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL_ADD_CERT_CHAIN); }))) {
            mixin(enumMixinStr_SSL_F_SSL_ADD_CERT_CHAIN);
        }
    }




    static if(!is(typeof(SSL_F_SSL_ADD_CERT_TO_BUF))) {
        private enum enumMixinStr_SSL_F_SSL_ADD_CERT_TO_BUF = `enum SSL_F_SSL_ADD_CERT_TO_BUF = 319;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL_ADD_CERT_TO_BUF); }))) {
            mixin(enumMixinStr_SSL_F_SSL_ADD_CERT_TO_BUF);
        }
    }




    static if(!is(typeof(SSL_F_SSL_ADD_CERT_TO_WPACKET))) {
        private enum enumMixinStr_SSL_F_SSL_ADD_CERT_TO_WPACKET = `enum SSL_F_SSL_ADD_CERT_TO_WPACKET = 493;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL_ADD_CERT_TO_WPACKET); }))) {
            mixin(enumMixinStr_SSL_F_SSL_ADD_CERT_TO_WPACKET);
        }
    }




    static if(!is(typeof(SSL_F_SSL_ADD_CLIENTHELLO_RENEGOTIATE_EXT))) {
        private enum enumMixinStr_SSL_F_SSL_ADD_CLIENTHELLO_RENEGOTIATE_EXT = `enum SSL_F_SSL_ADD_CLIENTHELLO_RENEGOTIATE_EXT = 298;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL_ADD_CLIENTHELLO_RENEGOTIATE_EXT); }))) {
            mixin(enumMixinStr_SSL_F_SSL_ADD_CLIENTHELLO_RENEGOTIATE_EXT);
        }
    }




    static if(!is(typeof(SSL_F_SSL_ADD_CLIENTHELLO_TLSEXT))) {
        private enum enumMixinStr_SSL_F_SSL_ADD_CLIENTHELLO_TLSEXT = `enum SSL_F_SSL_ADD_CLIENTHELLO_TLSEXT = 277;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL_ADD_CLIENTHELLO_TLSEXT); }))) {
            mixin(enumMixinStr_SSL_F_SSL_ADD_CLIENTHELLO_TLSEXT);
        }
    }




    static if(!is(typeof(SSL_F_SSL_ADD_CLIENTHELLO_USE_SRTP_EXT))) {
        private enum enumMixinStr_SSL_F_SSL_ADD_CLIENTHELLO_USE_SRTP_EXT = `enum SSL_F_SSL_ADD_CLIENTHELLO_USE_SRTP_EXT = 307;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL_ADD_CLIENTHELLO_USE_SRTP_EXT); }))) {
            mixin(enumMixinStr_SSL_F_SSL_ADD_CLIENTHELLO_USE_SRTP_EXT);
        }
    }




    static if(!is(typeof(SSL_F_SSL_ADD_DIR_CERT_SUBJECTS_TO_STACK))) {
        private enum enumMixinStr_SSL_F_SSL_ADD_DIR_CERT_SUBJECTS_TO_STACK = `enum SSL_F_SSL_ADD_DIR_CERT_SUBJECTS_TO_STACK = 215;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL_ADD_DIR_CERT_SUBJECTS_TO_STACK); }))) {
            mixin(enumMixinStr_SSL_F_SSL_ADD_DIR_CERT_SUBJECTS_TO_STACK);
        }
    }




    static if(!is(typeof(SSL_F_SSL_ADD_FILE_CERT_SUBJECTS_TO_STACK))) {
        private enum enumMixinStr_SSL_F_SSL_ADD_FILE_CERT_SUBJECTS_TO_STACK = `enum SSL_F_SSL_ADD_FILE_CERT_SUBJECTS_TO_STACK = 216;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL_ADD_FILE_CERT_SUBJECTS_TO_STACK); }))) {
            mixin(enumMixinStr_SSL_F_SSL_ADD_FILE_CERT_SUBJECTS_TO_STACK);
        }
    }




    static if(!is(typeof(SSL_F_SSL_ADD_SERVERHELLO_RENEGOTIATE_EXT))) {
        private enum enumMixinStr_SSL_F_SSL_ADD_SERVERHELLO_RENEGOTIATE_EXT = `enum SSL_F_SSL_ADD_SERVERHELLO_RENEGOTIATE_EXT = 299;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL_ADD_SERVERHELLO_RENEGOTIATE_EXT); }))) {
            mixin(enumMixinStr_SSL_F_SSL_ADD_SERVERHELLO_RENEGOTIATE_EXT);
        }
    }




    static if(!is(typeof(SSL_F_SSL_ADD_SERVERHELLO_TLSEXT))) {
        private enum enumMixinStr_SSL_F_SSL_ADD_SERVERHELLO_TLSEXT = `enum SSL_F_SSL_ADD_SERVERHELLO_TLSEXT = 278;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL_ADD_SERVERHELLO_TLSEXT); }))) {
            mixin(enumMixinStr_SSL_F_SSL_ADD_SERVERHELLO_TLSEXT);
        }
    }




    static if(!is(typeof(SSL_F_SSL_ADD_SERVERHELLO_USE_SRTP_EXT))) {
        private enum enumMixinStr_SSL_F_SSL_ADD_SERVERHELLO_USE_SRTP_EXT = `enum SSL_F_SSL_ADD_SERVERHELLO_USE_SRTP_EXT = 308;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL_ADD_SERVERHELLO_USE_SRTP_EXT); }))) {
            mixin(enumMixinStr_SSL_F_SSL_ADD_SERVERHELLO_USE_SRTP_EXT);
        }
    }




    static if(!is(typeof(SSL_F_SSL_BAD_METHOD))) {
        private enum enumMixinStr_SSL_F_SSL_BAD_METHOD = `enum SSL_F_SSL_BAD_METHOD = 160;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL_BAD_METHOD); }))) {
            mixin(enumMixinStr_SSL_F_SSL_BAD_METHOD);
        }
    }




    static if(!is(typeof(SSL_F_SSL_BUILD_CERT_CHAIN))) {
        private enum enumMixinStr_SSL_F_SSL_BUILD_CERT_CHAIN = `enum SSL_F_SSL_BUILD_CERT_CHAIN = 332;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL_BUILD_CERT_CHAIN); }))) {
            mixin(enumMixinStr_SSL_F_SSL_BUILD_CERT_CHAIN);
        }
    }




    static if(!is(typeof(SSL_F_SSL_BYTES_TO_CIPHER_LIST))) {
        private enum enumMixinStr_SSL_F_SSL_BYTES_TO_CIPHER_LIST = `enum SSL_F_SSL_BYTES_TO_CIPHER_LIST = 161;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL_BYTES_TO_CIPHER_LIST); }))) {
            mixin(enumMixinStr_SSL_F_SSL_BYTES_TO_CIPHER_LIST);
        }
    }




    static if(!is(typeof(SSL_F_SSL_CACHE_CIPHERLIST))) {
        private enum enumMixinStr_SSL_F_SSL_CACHE_CIPHERLIST = `enum SSL_F_SSL_CACHE_CIPHERLIST = 520;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL_CACHE_CIPHERLIST); }))) {
            mixin(enumMixinStr_SSL_F_SSL_CACHE_CIPHERLIST);
        }
    }




    static if(!is(typeof(SSL_F_SSL_CERT_ADD0_CHAIN_CERT))) {
        private enum enumMixinStr_SSL_F_SSL_CERT_ADD0_CHAIN_CERT = `enum SSL_F_SSL_CERT_ADD0_CHAIN_CERT = 346;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL_CERT_ADD0_CHAIN_CERT); }))) {
            mixin(enumMixinStr_SSL_F_SSL_CERT_ADD0_CHAIN_CERT);
        }
    }




    static if(!is(typeof(SSL_F_SSL_CERT_DUP))) {
        private enum enumMixinStr_SSL_F_SSL_CERT_DUP = `enum SSL_F_SSL_CERT_DUP = 221;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL_CERT_DUP); }))) {
            mixin(enumMixinStr_SSL_F_SSL_CERT_DUP);
        }
    }




    static if(!is(typeof(SSL_F_SSL_CERT_NEW))) {
        private enum enumMixinStr_SSL_F_SSL_CERT_NEW = `enum SSL_F_SSL_CERT_NEW = 162;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL_CERT_NEW); }))) {
            mixin(enumMixinStr_SSL_F_SSL_CERT_NEW);
        }
    }




    static if(!is(typeof(SSL_F_SSL_CERT_SET0_CHAIN))) {
        private enum enumMixinStr_SSL_F_SSL_CERT_SET0_CHAIN = `enum SSL_F_SSL_CERT_SET0_CHAIN = 340;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL_CERT_SET0_CHAIN); }))) {
            mixin(enumMixinStr_SSL_F_SSL_CERT_SET0_CHAIN);
        }
    }




    static if(!is(typeof(SSL_F_SSL_CHECK_PRIVATE_KEY))) {
        private enum enumMixinStr_SSL_F_SSL_CHECK_PRIVATE_KEY = `enum SSL_F_SSL_CHECK_PRIVATE_KEY = 163;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL_CHECK_PRIVATE_KEY); }))) {
            mixin(enumMixinStr_SSL_F_SSL_CHECK_PRIVATE_KEY);
        }
    }




    static if(!is(typeof(SSL_F_SSL_CHECK_SERVERHELLO_TLSEXT))) {
        private enum enumMixinStr_SSL_F_SSL_CHECK_SERVERHELLO_TLSEXT = `enum SSL_F_SSL_CHECK_SERVERHELLO_TLSEXT = 280;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL_CHECK_SERVERHELLO_TLSEXT); }))) {
            mixin(enumMixinStr_SSL_F_SSL_CHECK_SERVERHELLO_TLSEXT);
        }
    }




    static if(!is(typeof(SSL_F_SSL_CHECK_SRP_EXT_CLIENTHELLO))) {
        private enum enumMixinStr_SSL_F_SSL_CHECK_SRP_EXT_CLIENTHELLO = `enum SSL_F_SSL_CHECK_SRP_EXT_CLIENTHELLO = 606;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL_CHECK_SRP_EXT_CLIENTHELLO); }))) {
            mixin(enumMixinStr_SSL_F_SSL_CHECK_SRP_EXT_CLIENTHELLO);
        }
    }




    static if(!is(typeof(SSL_F_SSL_CHECK_SRVR_ECC_CERT_AND_ALG))) {
        private enum enumMixinStr_SSL_F_SSL_CHECK_SRVR_ECC_CERT_AND_ALG = `enum SSL_F_SSL_CHECK_SRVR_ECC_CERT_AND_ALG = 279;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL_CHECK_SRVR_ECC_CERT_AND_ALG); }))) {
            mixin(enumMixinStr_SSL_F_SSL_CHECK_SRVR_ECC_CERT_AND_ALG);
        }
    }




    static if(!is(typeof(SSL_F_SSL_CHOOSE_CLIENT_VERSION))) {
        private enum enumMixinStr_SSL_F_SSL_CHOOSE_CLIENT_VERSION = `enum SSL_F_SSL_CHOOSE_CLIENT_VERSION = 607;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL_CHOOSE_CLIENT_VERSION); }))) {
            mixin(enumMixinStr_SSL_F_SSL_CHOOSE_CLIENT_VERSION);
        }
    }




    static if(!is(typeof(SSL_F_SSL_CIPHER_DESCRIPTION))) {
        private enum enumMixinStr_SSL_F_SSL_CIPHER_DESCRIPTION = `enum SSL_F_SSL_CIPHER_DESCRIPTION = 626;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL_CIPHER_DESCRIPTION); }))) {
            mixin(enumMixinStr_SSL_F_SSL_CIPHER_DESCRIPTION);
        }
    }




    static if(!is(typeof(SSL_F_SSL_CIPHER_LIST_TO_BYTES))) {
        private enum enumMixinStr_SSL_F_SSL_CIPHER_LIST_TO_BYTES = `enum SSL_F_SSL_CIPHER_LIST_TO_BYTES = 425;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL_CIPHER_LIST_TO_BYTES); }))) {
            mixin(enumMixinStr_SSL_F_SSL_CIPHER_LIST_TO_BYTES);
        }
    }




    static if(!is(typeof(SSL_F_SSL_CIPHER_PROCESS_RULESTR))) {
        private enum enumMixinStr_SSL_F_SSL_CIPHER_PROCESS_RULESTR = `enum SSL_F_SSL_CIPHER_PROCESS_RULESTR = 230;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL_CIPHER_PROCESS_RULESTR); }))) {
            mixin(enumMixinStr_SSL_F_SSL_CIPHER_PROCESS_RULESTR);
        }
    }




    static if(!is(typeof(SSL_F_SSL_CIPHER_STRENGTH_SORT))) {
        private enum enumMixinStr_SSL_F_SSL_CIPHER_STRENGTH_SORT = `enum SSL_F_SSL_CIPHER_STRENGTH_SORT = 231;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL_CIPHER_STRENGTH_SORT); }))) {
            mixin(enumMixinStr_SSL_F_SSL_CIPHER_STRENGTH_SORT);
        }
    }




    static if(!is(typeof(SSL_F_SSL_CLEAR))) {
        private enum enumMixinStr_SSL_F_SSL_CLEAR = `enum SSL_F_SSL_CLEAR = 164;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL_CLEAR); }))) {
            mixin(enumMixinStr_SSL_F_SSL_CLEAR);
        }
    }




    static if(!is(typeof(SSL_F_SSL_CLIENT_HELLO_GET1_EXTENSIONS_PRESENT))) {
        private enum enumMixinStr_SSL_F_SSL_CLIENT_HELLO_GET1_EXTENSIONS_PRESENT = `enum SSL_F_SSL_CLIENT_HELLO_GET1_EXTENSIONS_PRESENT = 627;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL_CLIENT_HELLO_GET1_EXTENSIONS_PRESENT); }))) {
            mixin(enumMixinStr_SSL_F_SSL_CLIENT_HELLO_GET1_EXTENSIONS_PRESENT);
        }
    }




    static if(!is(typeof(SSL_F_SSL_COMP_ADD_COMPRESSION_METHOD))) {
        private enum enumMixinStr_SSL_F_SSL_COMP_ADD_COMPRESSION_METHOD = `enum SSL_F_SSL_COMP_ADD_COMPRESSION_METHOD = 165;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL_COMP_ADD_COMPRESSION_METHOD); }))) {
            mixin(enumMixinStr_SSL_F_SSL_COMP_ADD_COMPRESSION_METHOD);
        }
    }




    static if(!is(typeof(SSL_F_SSL_CONF_CMD))) {
        private enum enumMixinStr_SSL_F_SSL_CONF_CMD = `enum SSL_F_SSL_CONF_CMD = 334;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL_CONF_CMD); }))) {
            mixin(enumMixinStr_SSL_F_SSL_CONF_CMD);
        }
    }




    static if(!is(typeof(SSL_F_SSL_CREATE_CIPHER_LIST))) {
        private enum enumMixinStr_SSL_F_SSL_CREATE_CIPHER_LIST = `enum SSL_F_SSL_CREATE_CIPHER_LIST = 166;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL_CREATE_CIPHER_LIST); }))) {
            mixin(enumMixinStr_SSL_F_SSL_CREATE_CIPHER_LIST);
        }
    }




    static if(!is(typeof(SSL_F_SSL_CTRL))) {
        private enum enumMixinStr_SSL_F_SSL_CTRL = `enum SSL_F_SSL_CTRL = 232;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL_CTRL); }))) {
            mixin(enumMixinStr_SSL_F_SSL_CTRL);
        }
    }




    static if(!is(typeof(SSL_F_SSL_CTX_CHECK_PRIVATE_KEY))) {
        private enum enumMixinStr_SSL_F_SSL_CTX_CHECK_PRIVATE_KEY = `enum SSL_F_SSL_CTX_CHECK_PRIVATE_KEY = 168;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL_CTX_CHECK_PRIVATE_KEY); }))) {
            mixin(enumMixinStr_SSL_F_SSL_CTX_CHECK_PRIVATE_KEY);
        }
    }




    static if(!is(typeof(SSL_F_SSL_CTX_ENABLE_CT))) {
        private enum enumMixinStr_SSL_F_SSL_CTX_ENABLE_CT = `enum SSL_F_SSL_CTX_ENABLE_CT = 398;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL_CTX_ENABLE_CT); }))) {
            mixin(enumMixinStr_SSL_F_SSL_CTX_ENABLE_CT);
        }
    }




    static if(!is(typeof(SSL_F_SSL_CTX_MAKE_PROFILES))) {
        private enum enumMixinStr_SSL_F_SSL_CTX_MAKE_PROFILES = `enum SSL_F_SSL_CTX_MAKE_PROFILES = 309;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL_CTX_MAKE_PROFILES); }))) {
            mixin(enumMixinStr_SSL_F_SSL_CTX_MAKE_PROFILES);
        }
    }




    static if(!is(typeof(SSL_F_SSL_CTX_NEW))) {
        private enum enumMixinStr_SSL_F_SSL_CTX_NEW = `enum SSL_F_SSL_CTX_NEW = 169;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL_CTX_NEW); }))) {
            mixin(enumMixinStr_SSL_F_SSL_CTX_NEW);
        }
    }




    static if(!is(typeof(SSL_F_SSL_CTX_SET_ALPN_PROTOS))) {
        private enum enumMixinStr_SSL_F_SSL_CTX_SET_ALPN_PROTOS = `enum SSL_F_SSL_CTX_SET_ALPN_PROTOS = 343;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL_CTX_SET_ALPN_PROTOS); }))) {
            mixin(enumMixinStr_SSL_F_SSL_CTX_SET_ALPN_PROTOS);
        }
    }




    static if(!is(typeof(SSL_F_SSL_CTX_SET_CIPHER_LIST))) {
        private enum enumMixinStr_SSL_F_SSL_CTX_SET_CIPHER_LIST = `enum SSL_F_SSL_CTX_SET_CIPHER_LIST = 269;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL_CTX_SET_CIPHER_LIST); }))) {
            mixin(enumMixinStr_SSL_F_SSL_CTX_SET_CIPHER_LIST);
        }
    }




    static if(!is(typeof(SSL_F_SSL_CTX_SET_CLIENT_CERT_ENGINE))) {
        private enum enumMixinStr_SSL_F_SSL_CTX_SET_CLIENT_CERT_ENGINE = `enum SSL_F_SSL_CTX_SET_CLIENT_CERT_ENGINE = 290;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL_CTX_SET_CLIENT_CERT_ENGINE); }))) {
            mixin(enumMixinStr_SSL_F_SSL_CTX_SET_CLIENT_CERT_ENGINE);
        }
    }




    static if(!is(typeof(SSL_F_SSL_CTX_SET_CT_VALIDATION_CALLBACK))) {
        private enum enumMixinStr_SSL_F_SSL_CTX_SET_CT_VALIDATION_CALLBACK = `enum SSL_F_SSL_CTX_SET_CT_VALIDATION_CALLBACK = 396;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL_CTX_SET_CT_VALIDATION_CALLBACK); }))) {
            mixin(enumMixinStr_SSL_F_SSL_CTX_SET_CT_VALIDATION_CALLBACK);
        }
    }




    static if(!is(typeof(SSL_F_SSL_CTX_SET_SESSION_ID_CONTEXT))) {
        private enum enumMixinStr_SSL_F_SSL_CTX_SET_SESSION_ID_CONTEXT = `enum SSL_F_SSL_CTX_SET_SESSION_ID_CONTEXT = 219;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL_CTX_SET_SESSION_ID_CONTEXT); }))) {
            mixin(enumMixinStr_SSL_F_SSL_CTX_SET_SESSION_ID_CONTEXT);
        }
    }




    static if(!is(typeof(SSL_F_SSL_CTX_SET_SSL_VERSION))) {
        private enum enumMixinStr_SSL_F_SSL_CTX_SET_SSL_VERSION = `enum SSL_F_SSL_CTX_SET_SSL_VERSION = 170;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL_CTX_SET_SSL_VERSION); }))) {
            mixin(enumMixinStr_SSL_F_SSL_CTX_SET_SSL_VERSION);
        }
    }




    static if(!is(typeof(SSL_F_SSL_CTX_SET_TLSEXT_MAX_FRAGMENT_LENGTH))) {
        private enum enumMixinStr_SSL_F_SSL_CTX_SET_TLSEXT_MAX_FRAGMENT_LENGTH = `enum SSL_F_SSL_CTX_SET_TLSEXT_MAX_FRAGMENT_LENGTH = 551;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL_CTX_SET_TLSEXT_MAX_FRAGMENT_LENGTH); }))) {
            mixin(enumMixinStr_SSL_F_SSL_CTX_SET_TLSEXT_MAX_FRAGMENT_LENGTH);
        }
    }




    static if(!is(typeof(SSL_F_SSL_CTX_USE_CERTIFICATE))) {
        private enum enumMixinStr_SSL_F_SSL_CTX_USE_CERTIFICATE = `enum SSL_F_SSL_CTX_USE_CERTIFICATE = 171;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL_CTX_USE_CERTIFICATE); }))) {
            mixin(enumMixinStr_SSL_F_SSL_CTX_USE_CERTIFICATE);
        }
    }




    static if(!is(typeof(SSL_F_SSL_CTX_USE_CERTIFICATE_ASN1))) {
        private enum enumMixinStr_SSL_F_SSL_CTX_USE_CERTIFICATE_ASN1 = `enum SSL_F_SSL_CTX_USE_CERTIFICATE_ASN1 = 172;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL_CTX_USE_CERTIFICATE_ASN1); }))) {
            mixin(enumMixinStr_SSL_F_SSL_CTX_USE_CERTIFICATE_ASN1);
        }
    }




    static if(!is(typeof(SSL_F_SSL_CTX_USE_CERTIFICATE_FILE))) {
        private enum enumMixinStr_SSL_F_SSL_CTX_USE_CERTIFICATE_FILE = `enum SSL_F_SSL_CTX_USE_CERTIFICATE_FILE = 173;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL_CTX_USE_CERTIFICATE_FILE); }))) {
            mixin(enumMixinStr_SSL_F_SSL_CTX_USE_CERTIFICATE_FILE);
        }
    }




    static if(!is(typeof(SSL_F_SSL_CTX_USE_PRIVATEKEY))) {
        private enum enumMixinStr_SSL_F_SSL_CTX_USE_PRIVATEKEY = `enum SSL_F_SSL_CTX_USE_PRIVATEKEY = 174;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL_CTX_USE_PRIVATEKEY); }))) {
            mixin(enumMixinStr_SSL_F_SSL_CTX_USE_PRIVATEKEY);
        }
    }




    static if(!is(typeof(SSL_F_SSL_CTX_USE_PRIVATEKEY_ASN1))) {
        private enum enumMixinStr_SSL_F_SSL_CTX_USE_PRIVATEKEY_ASN1 = `enum SSL_F_SSL_CTX_USE_PRIVATEKEY_ASN1 = 175;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL_CTX_USE_PRIVATEKEY_ASN1); }))) {
            mixin(enumMixinStr_SSL_F_SSL_CTX_USE_PRIVATEKEY_ASN1);
        }
    }




    static if(!is(typeof(SSL_F_SSL_CTX_USE_PRIVATEKEY_FILE))) {
        private enum enumMixinStr_SSL_F_SSL_CTX_USE_PRIVATEKEY_FILE = `enum SSL_F_SSL_CTX_USE_PRIVATEKEY_FILE = 176;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL_CTX_USE_PRIVATEKEY_FILE); }))) {
            mixin(enumMixinStr_SSL_F_SSL_CTX_USE_PRIVATEKEY_FILE);
        }
    }




    static if(!is(typeof(SSL_F_SSL_CTX_USE_PSK_IDENTITY_HINT))) {
        private enum enumMixinStr_SSL_F_SSL_CTX_USE_PSK_IDENTITY_HINT = `enum SSL_F_SSL_CTX_USE_PSK_IDENTITY_HINT = 272;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL_CTX_USE_PSK_IDENTITY_HINT); }))) {
            mixin(enumMixinStr_SSL_F_SSL_CTX_USE_PSK_IDENTITY_HINT);
        }
    }




    static if(!is(typeof(SSL_F_SSL_CTX_USE_RSAPRIVATEKEY))) {
        private enum enumMixinStr_SSL_F_SSL_CTX_USE_RSAPRIVATEKEY = `enum SSL_F_SSL_CTX_USE_RSAPRIVATEKEY = 177;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL_CTX_USE_RSAPRIVATEKEY); }))) {
            mixin(enumMixinStr_SSL_F_SSL_CTX_USE_RSAPRIVATEKEY);
        }
    }




    static if(!is(typeof(SSL_F_SSL_CTX_USE_RSAPRIVATEKEY_ASN1))) {
        private enum enumMixinStr_SSL_F_SSL_CTX_USE_RSAPRIVATEKEY_ASN1 = `enum SSL_F_SSL_CTX_USE_RSAPRIVATEKEY_ASN1 = 178;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL_CTX_USE_RSAPRIVATEKEY_ASN1); }))) {
            mixin(enumMixinStr_SSL_F_SSL_CTX_USE_RSAPRIVATEKEY_ASN1);
        }
    }




    static if(!is(typeof(SSL_F_SSL_CTX_USE_RSAPRIVATEKEY_FILE))) {
        private enum enumMixinStr_SSL_F_SSL_CTX_USE_RSAPRIVATEKEY_FILE = `enum SSL_F_SSL_CTX_USE_RSAPRIVATEKEY_FILE = 179;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL_CTX_USE_RSAPRIVATEKEY_FILE); }))) {
            mixin(enumMixinStr_SSL_F_SSL_CTX_USE_RSAPRIVATEKEY_FILE);
        }
    }




    static if(!is(typeof(SSL_F_SSL_CTX_USE_SERVERINFO))) {
        private enum enumMixinStr_SSL_F_SSL_CTX_USE_SERVERINFO = `enum SSL_F_SSL_CTX_USE_SERVERINFO = 336;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL_CTX_USE_SERVERINFO); }))) {
            mixin(enumMixinStr_SSL_F_SSL_CTX_USE_SERVERINFO);
        }
    }




    static if(!is(typeof(SSL_F_SSL_CTX_USE_SERVERINFO_EX))) {
        private enum enumMixinStr_SSL_F_SSL_CTX_USE_SERVERINFO_EX = `enum SSL_F_SSL_CTX_USE_SERVERINFO_EX = 543;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL_CTX_USE_SERVERINFO_EX); }))) {
            mixin(enumMixinStr_SSL_F_SSL_CTX_USE_SERVERINFO_EX);
        }
    }




    static if(!is(typeof(SSL_F_SSL_CTX_USE_SERVERINFO_FILE))) {
        private enum enumMixinStr_SSL_F_SSL_CTX_USE_SERVERINFO_FILE = `enum SSL_F_SSL_CTX_USE_SERVERINFO_FILE = 337;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL_CTX_USE_SERVERINFO_FILE); }))) {
            mixin(enumMixinStr_SSL_F_SSL_CTX_USE_SERVERINFO_FILE);
        }
    }




    static if(!is(typeof(SSL_F_SSL_DANE_DUP))) {
        private enum enumMixinStr_SSL_F_SSL_DANE_DUP = `enum SSL_F_SSL_DANE_DUP = 403;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL_DANE_DUP); }))) {
            mixin(enumMixinStr_SSL_F_SSL_DANE_DUP);
        }
    }




    static if(!is(typeof(SSL_F_SSL_DANE_ENABLE))) {
        private enum enumMixinStr_SSL_F_SSL_DANE_ENABLE = `enum SSL_F_SSL_DANE_ENABLE = 395;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL_DANE_ENABLE); }))) {
            mixin(enumMixinStr_SSL_F_SSL_DANE_ENABLE);
        }
    }




    static if(!is(typeof(SSL_F_SSL_DERIVE))) {
        private enum enumMixinStr_SSL_F_SSL_DERIVE = `enum SSL_F_SSL_DERIVE = 590;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL_DERIVE); }))) {
            mixin(enumMixinStr_SSL_F_SSL_DERIVE);
        }
    }




    static if(!is(typeof(SSL_F_SSL_DO_CONFIG))) {
        private enum enumMixinStr_SSL_F_SSL_DO_CONFIG = `enum SSL_F_SSL_DO_CONFIG = 391;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL_DO_CONFIG); }))) {
            mixin(enumMixinStr_SSL_F_SSL_DO_CONFIG);
        }
    }




    static if(!is(typeof(SSL_F_SSL_DO_HANDSHAKE))) {
        private enum enumMixinStr_SSL_F_SSL_DO_HANDSHAKE = `enum SSL_F_SSL_DO_HANDSHAKE = 180;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL_DO_HANDSHAKE); }))) {
            mixin(enumMixinStr_SSL_F_SSL_DO_HANDSHAKE);
        }
    }




    static if(!is(typeof(SSL_F_SSL_DUP_CA_LIST))) {
        private enum enumMixinStr_SSL_F_SSL_DUP_CA_LIST = `enum SSL_F_SSL_DUP_CA_LIST = 408;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL_DUP_CA_LIST); }))) {
            mixin(enumMixinStr_SSL_F_SSL_DUP_CA_LIST);
        }
    }




    static if(!is(typeof(SSL_F_SSL_ENABLE_CT))) {
        private enum enumMixinStr_SSL_F_SSL_ENABLE_CT = `enum SSL_F_SSL_ENABLE_CT = 402;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL_ENABLE_CT); }))) {
            mixin(enumMixinStr_SSL_F_SSL_ENABLE_CT);
        }
    }




    static if(!is(typeof(SSL_F_SSL_GENERATE_PKEY_GROUP))) {
        private enum enumMixinStr_SSL_F_SSL_GENERATE_PKEY_GROUP = `enum SSL_F_SSL_GENERATE_PKEY_GROUP = 559;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL_GENERATE_PKEY_GROUP); }))) {
            mixin(enumMixinStr_SSL_F_SSL_GENERATE_PKEY_GROUP);
        }
    }




    static if(!is(typeof(SSL_F_SSL_GENERATE_SESSION_ID))) {
        private enum enumMixinStr_SSL_F_SSL_GENERATE_SESSION_ID = `enum SSL_F_SSL_GENERATE_SESSION_ID = 547;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL_GENERATE_SESSION_ID); }))) {
            mixin(enumMixinStr_SSL_F_SSL_GENERATE_SESSION_ID);
        }
    }




    static if(!is(typeof(SSL_F_SSL_GET_NEW_SESSION))) {
        private enum enumMixinStr_SSL_F_SSL_GET_NEW_SESSION = `enum SSL_F_SSL_GET_NEW_SESSION = 181;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL_GET_NEW_SESSION); }))) {
            mixin(enumMixinStr_SSL_F_SSL_GET_NEW_SESSION);
        }
    }




    static if(!is(typeof(SSL_F_SSL_GET_PREV_SESSION))) {
        private enum enumMixinStr_SSL_F_SSL_GET_PREV_SESSION = `enum SSL_F_SSL_GET_PREV_SESSION = 217;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL_GET_PREV_SESSION); }))) {
            mixin(enumMixinStr_SSL_F_SSL_GET_PREV_SESSION);
        }
    }




    static if(!is(typeof(SSL_F_SSL_GET_SERVER_CERT_INDEX))) {
        private enum enumMixinStr_SSL_F_SSL_GET_SERVER_CERT_INDEX = `enum SSL_F_SSL_GET_SERVER_CERT_INDEX = 322;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL_GET_SERVER_CERT_INDEX); }))) {
            mixin(enumMixinStr_SSL_F_SSL_GET_SERVER_CERT_INDEX);
        }
    }




    static if(!is(typeof(SSL_F_SSL_GET_SIGN_PKEY))) {
        private enum enumMixinStr_SSL_F_SSL_GET_SIGN_PKEY = `enum SSL_F_SSL_GET_SIGN_PKEY = 183;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL_GET_SIGN_PKEY); }))) {
            mixin(enumMixinStr_SSL_F_SSL_GET_SIGN_PKEY);
        }
    }




    static if(!is(typeof(SSL_F_SSL_HANDSHAKE_HASH))) {
        private enum enumMixinStr_SSL_F_SSL_HANDSHAKE_HASH = `enum SSL_F_SSL_HANDSHAKE_HASH = 560;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL_HANDSHAKE_HASH); }))) {
            mixin(enumMixinStr_SSL_F_SSL_HANDSHAKE_HASH);
        }
    }




    static if(!is(typeof(SSL_F_SSL_INIT_WBIO_BUFFER))) {
        private enum enumMixinStr_SSL_F_SSL_INIT_WBIO_BUFFER = `enum SSL_F_SSL_INIT_WBIO_BUFFER = 184;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL_INIT_WBIO_BUFFER); }))) {
            mixin(enumMixinStr_SSL_F_SSL_INIT_WBIO_BUFFER);
        }
    }




    static if(!is(typeof(SSL_F_SSL_KEY_UPDATE))) {
        private enum enumMixinStr_SSL_F_SSL_KEY_UPDATE = `enum SSL_F_SSL_KEY_UPDATE = 515;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL_KEY_UPDATE); }))) {
            mixin(enumMixinStr_SSL_F_SSL_KEY_UPDATE);
        }
    }




    static if(!is(typeof(SSL_F_SSL_LOAD_CLIENT_CA_FILE))) {
        private enum enumMixinStr_SSL_F_SSL_LOAD_CLIENT_CA_FILE = `enum SSL_F_SSL_LOAD_CLIENT_CA_FILE = 185;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL_LOAD_CLIENT_CA_FILE); }))) {
            mixin(enumMixinStr_SSL_F_SSL_LOAD_CLIENT_CA_FILE);
        }
    }




    static if(!is(typeof(SSL_F_SSL_LOG_MASTER_SECRET))) {
        private enum enumMixinStr_SSL_F_SSL_LOG_MASTER_SECRET = `enum SSL_F_SSL_LOG_MASTER_SECRET = 498;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL_LOG_MASTER_SECRET); }))) {
            mixin(enumMixinStr_SSL_F_SSL_LOG_MASTER_SECRET);
        }
    }




    static if(!is(typeof(SSL_F_SSL_LOG_RSA_CLIENT_KEY_EXCHANGE))) {
        private enum enumMixinStr_SSL_F_SSL_LOG_RSA_CLIENT_KEY_EXCHANGE = `enum SSL_F_SSL_LOG_RSA_CLIENT_KEY_EXCHANGE = 499;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL_LOG_RSA_CLIENT_KEY_EXCHANGE); }))) {
            mixin(enumMixinStr_SSL_F_SSL_LOG_RSA_CLIENT_KEY_EXCHANGE);
        }
    }




    static if(!is(typeof(SSL_F_SSL_MODULE_INIT))) {
        private enum enumMixinStr_SSL_F_SSL_MODULE_INIT = `enum SSL_F_SSL_MODULE_INIT = 392;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL_MODULE_INIT); }))) {
            mixin(enumMixinStr_SSL_F_SSL_MODULE_INIT);
        }
    }




    static if(!is(typeof(SSL_F_SSL_NEW))) {
        private enum enumMixinStr_SSL_F_SSL_NEW = `enum SSL_F_SSL_NEW = 186;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL_NEW); }))) {
            mixin(enumMixinStr_SSL_F_SSL_NEW);
        }
    }




    static if(!is(typeof(SSL_F_SSL_NEXT_PROTO_VALIDATE))) {
        private enum enumMixinStr_SSL_F_SSL_NEXT_PROTO_VALIDATE = `enum SSL_F_SSL_NEXT_PROTO_VALIDATE = 565;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL_NEXT_PROTO_VALIDATE); }))) {
            mixin(enumMixinStr_SSL_F_SSL_NEXT_PROTO_VALIDATE);
        }
    }




    static if(!is(typeof(SSL_F_SSL_PARSE_CLIENTHELLO_RENEGOTIATE_EXT))) {
        private enum enumMixinStr_SSL_F_SSL_PARSE_CLIENTHELLO_RENEGOTIATE_EXT = `enum SSL_F_SSL_PARSE_CLIENTHELLO_RENEGOTIATE_EXT = 300;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL_PARSE_CLIENTHELLO_RENEGOTIATE_EXT); }))) {
            mixin(enumMixinStr_SSL_F_SSL_PARSE_CLIENTHELLO_RENEGOTIATE_EXT);
        }
    }




    static if(!is(typeof(SSL_F_SSL_PARSE_CLIENTHELLO_TLSEXT))) {
        private enum enumMixinStr_SSL_F_SSL_PARSE_CLIENTHELLO_TLSEXT = `enum SSL_F_SSL_PARSE_CLIENTHELLO_TLSEXT = 302;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL_PARSE_CLIENTHELLO_TLSEXT); }))) {
            mixin(enumMixinStr_SSL_F_SSL_PARSE_CLIENTHELLO_TLSEXT);
        }
    }




    static if(!is(typeof(SSL_F_SSL_PARSE_CLIENTHELLO_USE_SRTP_EXT))) {
        private enum enumMixinStr_SSL_F_SSL_PARSE_CLIENTHELLO_USE_SRTP_EXT = `enum SSL_F_SSL_PARSE_CLIENTHELLO_USE_SRTP_EXT = 310;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL_PARSE_CLIENTHELLO_USE_SRTP_EXT); }))) {
            mixin(enumMixinStr_SSL_F_SSL_PARSE_CLIENTHELLO_USE_SRTP_EXT);
        }
    }




    static if(!is(typeof(SSL_F_SSL_PARSE_SERVERHELLO_RENEGOTIATE_EXT))) {
        private enum enumMixinStr_SSL_F_SSL_PARSE_SERVERHELLO_RENEGOTIATE_EXT = `enum SSL_F_SSL_PARSE_SERVERHELLO_RENEGOTIATE_EXT = 301;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL_PARSE_SERVERHELLO_RENEGOTIATE_EXT); }))) {
            mixin(enumMixinStr_SSL_F_SSL_PARSE_SERVERHELLO_RENEGOTIATE_EXT);
        }
    }




    static if(!is(typeof(SSL_F_SSL_PARSE_SERVERHELLO_TLSEXT))) {
        private enum enumMixinStr_SSL_F_SSL_PARSE_SERVERHELLO_TLSEXT = `enum SSL_F_SSL_PARSE_SERVERHELLO_TLSEXT = 303;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL_PARSE_SERVERHELLO_TLSEXT); }))) {
            mixin(enumMixinStr_SSL_F_SSL_PARSE_SERVERHELLO_TLSEXT);
        }
    }




    static if(!is(typeof(SSL_F_SSL_PARSE_SERVERHELLO_USE_SRTP_EXT))) {
        private enum enumMixinStr_SSL_F_SSL_PARSE_SERVERHELLO_USE_SRTP_EXT = `enum SSL_F_SSL_PARSE_SERVERHELLO_USE_SRTP_EXT = 311;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL_PARSE_SERVERHELLO_USE_SRTP_EXT); }))) {
            mixin(enumMixinStr_SSL_F_SSL_PARSE_SERVERHELLO_USE_SRTP_EXT);
        }
    }




    static if(!is(typeof(SSL_F_SSL_PEEK))) {
        private enum enumMixinStr_SSL_F_SSL_PEEK = `enum SSL_F_SSL_PEEK = 270;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL_PEEK); }))) {
            mixin(enumMixinStr_SSL_F_SSL_PEEK);
        }
    }




    static if(!is(typeof(SSL_F_SSL_PEEK_EX))) {
        private enum enumMixinStr_SSL_F_SSL_PEEK_EX = `enum SSL_F_SSL_PEEK_EX = 432;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL_PEEK_EX); }))) {
            mixin(enumMixinStr_SSL_F_SSL_PEEK_EX);
        }
    }




    static if(!is(typeof(SSL_F_SSL_PEEK_INTERNAL))) {
        private enum enumMixinStr_SSL_F_SSL_PEEK_INTERNAL = `enum SSL_F_SSL_PEEK_INTERNAL = 522;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL_PEEK_INTERNAL); }))) {
            mixin(enumMixinStr_SSL_F_SSL_PEEK_INTERNAL);
        }
    }




    static if(!is(typeof(SSL_F_SSL_READ))) {
        private enum enumMixinStr_SSL_F_SSL_READ = `enum SSL_F_SSL_READ = 223;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL_READ); }))) {
            mixin(enumMixinStr_SSL_F_SSL_READ);
        }
    }




    static if(!is(typeof(SSL_F_SSL_READ_EARLY_DATA))) {
        private enum enumMixinStr_SSL_F_SSL_READ_EARLY_DATA = `enum SSL_F_SSL_READ_EARLY_DATA = 529;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL_READ_EARLY_DATA); }))) {
            mixin(enumMixinStr_SSL_F_SSL_READ_EARLY_DATA);
        }
    }




    static if(!is(typeof(SSL_F_SSL_READ_EX))) {
        private enum enumMixinStr_SSL_F_SSL_READ_EX = `enum SSL_F_SSL_READ_EX = 434;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL_READ_EX); }))) {
            mixin(enumMixinStr_SSL_F_SSL_READ_EX);
        }
    }




    static if(!is(typeof(SSL_F_SSL_READ_INTERNAL))) {
        private enum enumMixinStr_SSL_F_SSL_READ_INTERNAL = `enum SSL_F_SSL_READ_INTERNAL = 523;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL_READ_INTERNAL); }))) {
            mixin(enumMixinStr_SSL_F_SSL_READ_INTERNAL);
        }
    }




    static if(!is(typeof(SSL_F_SSL_RENEGOTIATE))) {
        private enum enumMixinStr_SSL_F_SSL_RENEGOTIATE = `enum SSL_F_SSL_RENEGOTIATE = 516;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL_RENEGOTIATE); }))) {
            mixin(enumMixinStr_SSL_F_SSL_RENEGOTIATE);
        }
    }




    static if(!is(typeof(SSL_F_SSL_RENEGOTIATE_ABBREVIATED))) {
        private enum enumMixinStr_SSL_F_SSL_RENEGOTIATE_ABBREVIATED = `enum SSL_F_SSL_RENEGOTIATE_ABBREVIATED = 546;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL_RENEGOTIATE_ABBREVIATED); }))) {
            mixin(enumMixinStr_SSL_F_SSL_RENEGOTIATE_ABBREVIATED);
        }
    }




    static if(!is(typeof(SSL_F_SSL_SCAN_CLIENTHELLO_TLSEXT))) {
        private enum enumMixinStr_SSL_F_SSL_SCAN_CLIENTHELLO_TLSEXT = `enum SSL_F_SSL_SCAN_CLIENTHELLO_TLSEXT = 320;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL_SCAN_CLIENTHELLO_TLSEXT); }))) {
            mixin(enumMixinStr_SSL_F_SSL_SCAN_CLIENTHELLO_TLSEXT);
        }
    }




    static if(!is(typeof(SSL_F_SSL_SCAN_SERVERHELLO_TLSEXT))) {
        private enum enumMixinStr_SSL_F_SSL_SCAN_SERVERHELLO_TLSEXT = `enum SSL_F_SSL_SCAN_SERVERHELLO_TLSEXT = 321;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL_SCAN_SERVERHELLO_TLSEXT); }))) {
            mixin(enumMixinStr_SSL_F_SSL_SCAN_SERVERHELLO_TLSEXT);
        }
    }




    static if(!is(typeof(SSL_F_SSL_SESSION_DUP))) {
        private enum enumMixinStr_SSL_F_SSL_SESSION_DUP = `enum SSL_F_SSL_SESSION_DUP = 348;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL_SESSION_DUP); }))) {
            mixin(enumMixinStr_SSL_F_SSL_SESSION_DUP);
        }
    }




    static if(!is(typeof(SSL_F_SSL_SESSION_NEW))) {
        private enum enumMixinStr_SSL_F_SSL_SESSION_NEW = `enum SSL_F_SSL_SESSION_NEW = 189;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL_SESSION_NEW); }))) {
            mixin(enumMixinStr_SSL_F_SSL_SESSION_NEW);
        }
    }




    static if(!is(typeof(SSL_F_SSL_SESSION_PRINT_FP))) {
        private enum enumMixinStr_SSL_F_SSL_SESSION_PRINT_FP = `enum SSL_F_SSL_SESSION_PRINT_FP = 190;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL_SESSION_PRINT_FP); }))) {
            mixin(enumMixinStr_SSL_F_SSL_SESSION_PRINT_FP);
        }
    }




    static if(!is(typeof(SSL_F_SSL_SESSION_SET1_ID))) {
        private enum enumMixinStr_SSL_F_SSL_SESSION_SET1_ID = `enum SSL_F_SSL_SESSION_SET1_ID = 423;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL_SESSION_SET1_ID); }))) {
            mixin(enumMixinStr_SSL_F_SSL_SESSION_SET1_ID);
        }
    }




    static if(!is(typeof(SSL_F_SSL_SESSION_SET1_ID_CONTEXT))) {
        private enum enumMixinStr_SSL_F_SSL_SESSION_SET1_ID_CONTEXT = `enum SSL_F_SSL_SESSION_SET1_ID_CONTEXT = 312;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL_SESSION_SET1_ID_CONTEXT); }))) {
            mixin(enumMixinStr_SSL_F_SSL_SESSION_SET1_ID_CONTEXT);
        }
    }




    static if(!is(typeof(SSL_F_SSL_SET_ALPN_PROTOS))) {
        private enum enumMixinStr_SSL_F_SSL_SET_ALPN_PROTOS = `enum SSL_F_SSL_SET_ALPN_PROTOS = 344;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL_SET_ALPN_PROTOS); }))) {
            mixin(enumMixinStr_SSL_F_SSL_SET_ALPN_PROTOS);
        }
    }




    static if(!is(typeof(SSL_F_SSL_SET_CERT))) {
        private enum enumMixinStr_SSL_F_SSL_SET_CERT = `enum SSL_F_SSL_SET_CERT = 191;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL_SET_CERT); }))) {
            mixin(enumMixinStr_SSL_F_SSL_SET_CERT);
        }
    }




    static if(!is(typeof(SSL_F_SSL_SET_CERT_AND_KEY))) {
        private enum enumMixinStr_SSL_F_SSL_SET_CERT_AND_KEY = `enum SSL_F_SSL_SET_CERT_AND_KEY = 621;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL_SET_CERT_AND_KEY); }))) {
            mixin(enumMixinStr_SSL_F_SSL_SET_CERT_AND_KEY);
        }
    }




    static if(!is(typeof(SSL_F_SSL_SET_CIPHER_LIST))) {
        private enum enumMixinStr_SSL_F_SSL_SET_CIPHER_LIST = `enum SSL_F_SSL_SET_CIPHER_LIST = 271;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL_SET_CIPHER_LIST); }))) {
            mixin(enumMixinStr_SSL_F_SSL_SET_CIPHER_LIST);
        }
    }




    static if(!is(typeof(SSL_F_SSL_SET_CT_VALIDATION_CALLBACK))) {
        private enum enumMixinStr_SSL_F_SSL_SET_CT_VALIDATION_CALLBACK = `enum SSL_F_SSL_SET_CT_VALIDATION_CALLBACK = 399;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL_SET_CT_VALIDATION_CALLBACK); }))) {
            mixin(enumMixinStr_SSL_F_SSL_SET_CT_VALIDATION_CALLBACK);
        }
    }




    static if(!is(typeof(SSL_F_SSL_SET_FD))) {
        private enum enumMixinStr_SSL_F_SSL_SET_FD = `enum SSL_F_SSL_SET_FD = 192;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL_SET_FD); }))) {
            mixin(enumMixinStr_SSL_F_SSL_SET_FD);
        }
    }




    static if(!is(typeof(SSL_F_SSL_SET_PKEY))) {
        private enum enumMixinStr_SSL_F_SSL_SET_PKEY = `enum SSL_F_SSL_SET_PKEY = 193;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL_SET_PKEY); }))) {
            mixin(enumMixinStr_SSL_F_SSL_SET_PKEY);
        }
    }




    static if(!is(typeof(SSL_F_SSL_SET_RFD))) {
        private enum enumMixinStr_SSL_F_SSL_SET_RFD = `enum SSL_F_SSL_SET_RFD = 194;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL_SET_RFD); }))) {
            mixin(enumMixinStr_SSL_F_SSL_SET_RFD);
        }
    }




    static if(!is(typeof(SSL_F_SSL_SET_SESSION))) {
        private enum enumMixinStr_SSL_F_SSL_SET_SESSION = `enum SSL_F_SSL_SET_SESSION = 195;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL_SET_SESSION); }))) {
            mixin(enumMixinStr_SSL_F_SSL_SET_SESSION);
        }
    }




    static if(!is(typeof(SSL_F_SSL_SET_SESSION_ID_CONTEXT))) {
        private enum enumMixinStr_SSL_F_SSL_SET_SESSION_ID_CONTEXT = `enum SSL_F_SSL_SET_SESSION_ID_CONTEXT = 218;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL_SET_SESSION_ID_CONTEXT); }))) {
            mixin(enumMixinStr_SSL_F_SSL_SET_SESSION_ID_CONTEXT);
        }
    }




    static if(!is(typeof(SSL_F_SSL_SET_SESSION_TICKET_EXT))) {
        private enum enumMixinStr_SSL_F_SSL_SET_SESSION_TICKET_EXT = `enum SSL_F_SSL_SET_SESSION_TICKET_EXT = 294;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL_SET_SESSION_TICKET_EXT); }))) {
            mixin(enumMixinStr_SSL_F_SSL_SET_SESSION_TICKET_EXT);
        }
    }




    static if(!is(typeof(SSL_F_SSL_SET_TLSEXT_MAX_FRAGMENT_LENGTH))) {
        private enum enumMixinStr_SSL_F_SSL_SET_TLSEXT_MAX_FRAGMENT_LENGTH = `enum SSL_F_SSL_SET_TLSEXT_MAX_FRAGMENT_LENGTH = 550;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL_SET_TLSEXT_MAX_FRAGMENT_LENGTH); }))) {
            mixin(enumMixinStr_SSL_F_SSL_SET_TLSEXT_MAX_FRAGMENT_LENGTH);
        }
    }




    static if(!is(typeof(SSL_F_SSL_SET_WFD))) {
        private enum enumMixinStr_SSL_F_SSL_SET_WFD = `enum SSL_F_SSL_SET_WFD = 196;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL_SET_WFD); }))) {
            mixin(enumMixinStr_SSL_F_SSL_SET_WFD);
        }
    }




    static if(!is(typeof(SSL_F_SSL_SHUTDOWN))) {
        private enum enumMixinStr_SSL_F_SSL_SHUTDOWN = `enum SSL_F_SSL_SHUTDOWN = 224;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL_SHUTDOWN); }))) {
            mixin(enumMixinStr_SSL_F_SSL_SHUTDOWN);
        }
    }




    static if(!is(typeof(SSL_F_SSL_SRP_CTX_INIT))) {
        private enum enumMixinStr_SSL_F_SSL_SRP_CTX_INIT = `enum SSL_F_SSL_SRP_CTX_INIT = 313;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL_SRP_CTX_INIT); }))) {
            mixin(enumMixinStr_SSL_F_SSL_SRP_CTX_INIT);
        }
    }




    static if(!is(typeof(SSL_F_SSL_START_ASYNC_JOB))) {
        private enum enumMixinStr_SSL_F_SSL_START_ASYNC_JOB = `enum SSL_F_SSL_START_ASYNC_JOB = 389;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL_START_ASYNC_JOB); }))) {
            mixin(enumMixinStr_SSL_F_SSL_START_ASYNC_JOB);
        }
    }




    static if(!is(typeof(SSL_F_SSL_UNDEFINED_FUNCTION))) {
        private enum enumMixinStr_SSL_F_SSL_UNDEFINED_FUNCTION = `enum SSL_F_SSL_UNDEFINED_FUNCTION = 197;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL_UNDEFINED_FUNCTION); }))) {
            mixin(enumMixinStr_SSL_F_SSL_UNDEFINED_FUNCTION);
        }
    }




    static if(!is(typeof(SSL_F_SSL_UNDEFINED_VOID_FUNCTION))) {
        private enum enumMixinStr_SSL_F_SSL_UNDEFINED_VOID_FUNCTION = `enum SSL_F_SSL_UNDEFINED_VOID_FUNCTION = 244;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL_UNDEFINED_VOID_FUNCTION); }))) {
            mixin(enumMixinStr_SSL_F_SSL_UNDEFINED_VOID_FUNCTION);
        }
    }




    static if(!is(typeof(SSL_F_SSL_USE_CERTIFICATE))) {
        private enum enumMixinStr_SSL_F_SSL_USE_CERTIFICATE = `enum SSL_F_SSL_USE_CERTIFICATE = 198;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL_USE_CERTIFICATE); }))) {
            mixin(enumMixinStr_SSL_F_SSL_USE_CERTIFICATE);
        }
    }




    static if(!is(typeof(SSL_F_SSL_USE_CERTIFICATE_ASN1))) {
        private enum enumMixinStr_SSL_F_SSL_USE_CERTIFICATE_ASN1 = `enum SSL_F_SSL_USE_CERTIFICATE_ASN1 = 199;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL_USE_CERTIFICATE_ASN1); }))) {
            mixin(enumMixinStr_SSL_F_SSL_USE_CERTIFICATE_ASN1);
        }
    }




    static if(!is(typeof(SSL_F_SSL_USE_CERTIFICATE_FILE))) {
        private enum enumMixinStr_SSL_F_SSL_USE_CERTIFICATE_FILE = `enum SSL_F_SSL_USE_CERTIFICATE_FILE = 200;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL_USE_CERTIFICATE_FILE); }))) {
            mixin(enumMixinStr_SSL_F_SSL_USE_CERTIFICATE_FILE);
        }
    }




    static if(!is(typeof(SSL_F_SSL_USE_PRIVATEKEY))) {
        private enum enumMixinStr_SSL_F_SSL_USE_PRIVATEKEY = `enum SSL_F_SSL_USE_PRIVATEKEY = 201;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL_USE_PRIVATEKEY); }))) {
            mixin(enumMixinStr_SSL_F_SSL_USE_PRIVATEKEY);
        }
    }




    static if(!is(typeof(SSL_F_SSL_USE_PRIVATEKEY_ASN1))) {
        private enum enumMixinStr_SSL_F_SSL_USE_PRIVATEKEY_ASN1 = `enum SSL_F_SSL_USE_PRIVATEKEY_ASN1 = 202;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL_USE_PRIVATEKEY_ASN1); }))) {
            mixin(enumMixinStr_SSL_F_SSL_USE_PRIVATEKEY_ASN1);
        }
    }




    static if(!is(typeof(SSL_F_SSL_USE_PRIVATEKEY_FILE))) {
        private enum enumMixinStr_SSL_F_SSL_USE_PRIVATEKEY_FILE = `enum SSL_F_SSL_USE_PRIVATEKEY_FILE = 203;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL_USE_PRIVATEKEY_FILE); }))) {
            mixin(enumMixinStr_SSL_F_SSL_USE_PRIVATEKEY_FILE);
        }
    }




    static if(!is(typeof(SSL_F_SSL_USE_PSK_IDENTITY_HINT))) {
        private enum enumMixinStr_SSL_F_SSL_USE_PSK_IDENTITY_HINT = `enum SSL_F_SSL_USE_PSK_IDENTITY_HINT = 273;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL_USE_PSK_IDENTITY_HINT); }))) {
            mixin(enumMixinStr_SSL_F_SSL_USE_PSK_IDENTITY_HINT);
        }
    }




    static if(!is(typeof(SSL_F_SSL_USE_RSAPRIVATEKEY))) {
        private enum enumMixinStr_SSL_F_SSL_USE_RSAPRIVATEKEY = `enum SSL_F_SSL_USE_RSAPRIVATEKEY = 204;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL_USE_RSAPRIVATEKEY); }))) {
            mixin(enumMixinStr_SSL_F_SSL_USE_RSAPRIVATEKEY);
        }
    }




    static if(!is(typeof(SSL_F_SSL_USE_RSAPRIVATEKEY_ASN1))) {
        private enum enumMixinStr_SSL_F_SSL_USE_RSAPRIVATEKEY_ASN1 = `enum SSL_F_SSL_USE_RSAPRIVATEKEY_ASN1 = 205;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL_USE_RSAPRIVATEKEY_ASN1); }))) {
            mixin(enumMixinStr_SSL_F_SSL_USE_RSAPRIVATEKEY_ASN1);
        }
    }




    static if(!is(typeof(SSL_F_SSL_USE_RSAPRIVATEKEY_FILE))) {
        private enum enumMixinStr_SSL_F_SSL_USE_RSAPRIVATEKEY_FILE = `enum SSL_F_SSL_USE_RSAPRIVATEKEY_FILE = 206;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL_USE_RSAPRIVATEKEY_FILE); }))) {
            mixin(enumMixinStr_SSL_F_SSL_USE_RSAPRIVATEKEY_FILE);
        }
    }




    static if(!is(typeof(SSL_F_SSL_VALIDATE_CT))) {
        private enum enumMixinStr_SSL_F_SSL_VALIDATE_CT = `enum SSL_F_SSL_VALIDATE_CT = 400;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL_VALIDATE_CT); }))) {
            mixin(enumMixinStr_SSL_F_SSL_VALIDATE_CT);
        }
    }




    static if(!is(typeof(SSL_F_SSL_VERIFY_CERT_CHAIN))) {
        private enum enumMixinStr_SSL_F_SSL_VERIFY_CERT_CHAIN = `enum SSL_F_SSL_VERIFY_CERT_CHAIN = 207;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL_VERIFY_CERT_CHAIN); }))) {
            mixin(enumMixinStr_SSL_F_SSL_VERIFY_CERT_CHAIN);
        }
    }




    static if(!is(typeof(SSL_F_SSL_VERIFY_CLIENT_POST_HANDSHAKE))) {
        private enum enumMixinStr_SSL_F_SSL_VERIFY_CLIENT_POST_HANDSHAKE = `enum SSL_F_SSL_VERIFY_CLIENT_POST_HANDSHAKE = 616;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL_VERIFY_CLIENT_POST_HANDSHAKE); }))) {
            mixin(enumMixinStr_SSL_F_SSL_VERIFY_CLIENT_POST_HANDSHAKE);
        }
    }




    static if(!is(typeof(SSL_F_SSL_WRITE))) {
        private enum enumMixinStr_SSL_F_SSL_WRITE = `enum SSL_F_SSL_WRITE = 208;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL_WRITE); }))) {
            mixin(enumMixinStr_SSL_F_SSL_WRITE);
        }
    }




    static if(!is(typeof(SSL_F_SSL_WRITE_EARLY_DATA))) {
        private enum enumMixinStr_SSL_F_SSL_WRITE_EARLY_DATA = `enum SSL_F_SSL_WRITE_EARLY_DATA = 526;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL_WRITE_EARLY_DATA); }))) {
            mixin(enumMixinStr_SSL_F_SSL_WRITE_EARLY_DATA);
        }
    }




    static if(!is(typeof(SSL_F_SSL_WRITE_EARLY_FINISH))) {
        private enum enumMixinStr_SSL_F_SSL_WRITE_EARLY_FINISH = `enum SSL_F_SSL_WRITE_EARLY_FINISH = 527;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL_WRITE_EARLY_FINISH); }))) {
            mixin(enumMixinStr_SSL_F_SSL_WRITE_EARLY_FINISH);
        }
    }




    static if(!is(typeof(SSL_F_SSL_WRITE_EX))) {
        private enum enumMixinStr_SSL_F_SSL_WRITE_EX = `enum SSL_F_SSL_WRITE_EX = 433;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL_WRITE_EX); }))) {
            mixin(enumMixinStr_SSL_F_SSL_WRITE_EX);
        }
    }




    static if(!is(typeof(SSL_F_SSL_WRITE_INTERNAL))) {
        private enum enumMixinStr_SSL_F_SSL_WRITE_INTERNAL = `enum SSL_F_SSL_WRITE_INTERNAL = 524;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_SSL_WRITE_INTERNAL); }))) {
            mixin(enumMixinStr_SSL_F_SSL_WRITE_INTERNAL);
        }
    }




    static if(!is(typeof(SSL_F_STATE_MACHINE))) {
        private enum enumMixinStr_SSL_F_STATE_MACHINE = `enum SSL_F_STATE_MACHINE = 353;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_STATE_MACHINE); }))) {
            mixin(enumMixinStr_SSL_F_STATE_MACHINE);
        }
    }




    static if(!is(typeof(SSL_F_TLS12_CHECK_PEER_SIGALG))) {
        private enum enumMixinStr_SSL_F_TLS12_CHECK_PEER_SIGALG = `enum SSL_F_TLS12_CHECK_PEER_SIGALG = 333;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS12_CHECK_PEER_SIGALG); }))) {
            mixin(enumMixinStr_SSL_F_TLS12_CHECK_PEER_SIGALG);
        }
    }




    static if(!is(typeof(SSL_F_TLS12_COPY_SIGALGS))) {
        private enum enumMixinStr_SSL_F_TLS12_COPY_SIGALGS = `enum SSL_F_TLS12_COPY_SIGALGS = 533;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS12_COPY_SIGALGS); }))) {
            mixin(enumMixinStr_SSL_F_TLS12_COPY_SIGALGS);
        }
    }




    static if(!is(typeof(SSL_F_TLS13_CHANGE_CIPHER_STATE))) {
        private enum enumMixinStr_SSL_F_TLS13_CHANGE_CIPHER_STATE = `enum SSL_F_TLS13_CHANGE_CIPHER_STATE = 440;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS13_CHANGE_CIPHER_STATE); }))) {
            mixin(enumMixinStr_SSL_F_TLS13_CHANGE_CIPHER_STATE);
        }
    }




    static if(!is(typeof(SSL_F_TLS13_ENC))) {
        private enum enumMixinStr_SSL_F_TLS13_ENC = `enum SSL_F_TLS13_ENC = 609;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS13_ENC); }))) {
            mixin(enumMixinStr_SSL_F_TLS13_ENC);
        }
    }




    static if(!is(typeof(SSL_F_TLS13_FINAL_FINISH_MAC))) {
        private enum enumMixinStr_SSL_F_TLS13_FINAL_FINISH_MAC = `enum SSL_F_TLS13_FINAL_FINISH_MAC = 605;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS13_FINAL_FINISH_MAC); }))) {
            mixin(enumMixinStr_SSL_F_TLS13_FINAL_FINISH_MAC);
        }
    }




    static if(!is(typeof(SSL_F_TLS13_GENERATE_SECRET))) {
        private enum enumMixinStr_SSL_F_TLS13_GENERATE_SECRET = `enum SSL_F_TLS13_GENERATE_SECRET = 591;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS13_GENERATE_SECRET); }))) {
            mixin(enumMixinStr_SSL_F_TLS13_GENERATE_SECRET);
        }
    }




    static if(!is(typeof(SSL_F_TLS13_HKDF_EXPAND))) {
        private enum enumMixinStr_SSL_F_TLS13_HKDF_EXPAND = `enum SSL_F_TLS13_HKDF_EXPAND = 561;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS13_HKDF_EXPAND); }))) {
            mixin(enumMixinStr_SSL_F_TLS13_HKDF_EXPAND);
        }
    }




    static if(!is(typeof(SSL_F_TLS13_RESTORE_HANDSHAKE_DIGEST_FOR_PHA))) {
        private enum enumMixinStr_SSL_F_TLS13_RESTORE_HANDSHAKE_DIGEST_FOR_PHA = `enum SSL_F_TLS13_RESTORE_HANDSHAKE_DIGEST_FOR_PHA = 617;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS13_RESTORE_HANDSHAKE_DIGEST_FOR_PHA); }))) {
            mixin(enumMixinStr_SSL_F_TLS13_RESTORE_HANDSHAKE_DIGEST_FOR_PHA);
        }
    }




    static if(!is(typeof(SSL_F_TLS13_SAVE_HANDSHAKE_DIGEST_FOR_PHA))) {
        private enum enumMixinStr_SSL_F_TLS13_SAVE_HANDSHAKE_DIGEST_FOR_PHA = `enum SSL_F_TLS13_SAVE_HANDSHAKE_DIGEST_FOR_PHA = 618;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS13_SAVE_HANDSHAKE_DIGEST_FOR_PHA); }))) {
            mixin(enumMixinStr_SSL_F_TLS13_SAVE_HANDSHAKE_DIGEST_FOR_PHA);
        }
    }




    static if(!is(typeof(SSL_F_TLS13_SETUP_KEY_BLOCK))) {
        private enum enumMixinStr_SSL_F_TLS13_SETUP_KEY_BLOCK = `enum SSL_F_TLS13_SETUP_KEY_BLOCK = 441;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS13_SETUP_KEY_BLOCK); }))) {
            mixin(enumMixinStr_SSL_F_TLS13_SETUP_KEY_BLOCK);
        }
    }




    static if(!is(typeof(SSL_F_TLS1_CHANGE_CIPHER_STATE))) {
        private enum enumMixinStr_SSL_F_TLS1_CHANGE_CIPHER_STATE = `enum SSL_F_TLS1_CHANGE_CIPHER_STATE = 209;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS1_CHANGE_CIPHER_STATE); }))) {
            mixin(enumMixinStr_SSL_F_TLS1_CHANGE_CIPHER_STATE);
        }
    }




    static if(!is(typeof(SSL_F_TLS1_CHECK_DUPLICATE_EXTENSIONS))) {
        private enum enumMixinStr_SSL_F_TLS1_CHECK_DUPLICATE_EXTENSIONS = `enum SSL_F_TLS1_CHECK_DUPLICATE_EXTENSIONS = 341;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS1_CHECK_DUPLICATE_EXTENSIONS); }))) {
            mixin(enumMixinStr_SSL_F_TLS1_CHECK_DUPLICATE_EXTENSIONS);
        }
    }




    static if(!is(typeof(SSL_F_TLS1_ENC))) {
        private enum enumMixinStr_SSL_F_TLS1_ENC = `enum SSL_F_TLS1_ENC = 401;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS1_ENC); }))) {
            mixin(enumMixinStr_SSL_F_TLS1_ENC);
        }
    }




    static if(!is(typeof(SSL_F_TLS1_EXPORT_KEYING_MATERIAL))) {
        private enum enumMixinStr_SSL_F_TLS1_EXPORT_KEYING_MATERIAL = `enum SSL_F_TLS1_EXPORT_KEYING_MATERIAL = 314;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS1_EXPORT_KEYING_MATERIAL); }))) {
            mixin(enumMixinStr_SSL_F_TLS1_EXPORT_KEYING_MATERIAL);
        }
    }




    static if(!is(typeof(SSL_F_TLS1_GET_CURVELIST))) {
        private enum enumMixinStr_SSL_F_TLS1_GET_CURVELIST = `enum SSL_F_TLS1_GET_CURVELIST = 338;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS1_GET_CURVELIST); }))) {
            mixin(enumMixinStr_SSL_F_TLS1_GET_CURVELIST);
        }
    }




    static if(!is(typeof(SSL_F_TLS1_PRF))) {
        private enum enumMixinStr_SSL_F_TLS1_PRF = `enum SSL_F_TLS1_PRF = 284;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS1_PRF); }))) {
            mixin(enumMixinStr_SSL_F_TLS1_PRF);
        }
    }




    static if(!is(typeof(SSL_F_TLS1_SAVE_U16))) {
        private enum enumMixinStr_SSL_F_TLS1_SAVE_U16 = `enum SSL_F_TLS1_SAVE_U16 = 628;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS1_SAVE_U16); }))) {
            mixin(enumMixinStr_SSL_F_TLS1_SAVE_U16);
        }
    }




    static if(!is(typeof(SSL_F_TLS1_SETUP_KEY_BLOCK))) {
        private enum enumMixinStr_SSL_F_TLS1_SETUP_KEY_BLOCK = `enum SSL_F_TLS1_SETUP_KEY_BLOCK = 211;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS1_SETUP_KEY_BLOCK); }))) {
            mixin(enumMixinStr_SSL_F_TLS1_SETUP_KEY_BLOCK);
        }
    }




    static if(!is(typeof(SSL_F_TLS1_SET_GROUPS))) {
        private enum enumMixinStr_SSL_F_TLS1_SET_GROUPS = `enum SSL_F_TLS1_SET_GROUPS = 629;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS1_SET_GROUPS); }))) {
            mixin(enumMixinStr_SSL_F_TLS1_SET_GROUPS);
        }
    }




    static if(!is(typeof(SSL_F_TLS1_SET_RAW_SIGALGS))) {
        private enum enumMixinStr_SSL_F_TLS1_SET_RAW_SIGALGS = `enum SSL_F_TLS1_SET_RAW_SIGALGS = 630;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS1_SET_RAW_SIGALGS); }))) {
            mixin(enumMixinStr_SSL_F_TLS1_SET_RAW_SIGALGS);
        }
    }




    static if(!is(typeof(SSL_F_TLS1_SET_SERVER_SIGALGS))) {
        private enum enumMixinStr_SSL_F_TLS1_SET_SERVER_SIGALGS = `enum SSL_F_TLS1_SET_SERVER_SIGALGS = 335;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS1_SET_SERVER_SIGALGS); }))) {
            mixin(enumMixinStr_SSL_F_TLS1_SET_SERVER_SIGALGS);
        }
    }




    static if(!is(typeof(SSL_F_TLS1_SET_SHARED_SIGALGS))) {
        private enum enumMixinStr_SSL_F_TLS1_SET_SHARED_SIGALGS = `enum SSL_F_TLS1_SET_SHARED_SIGALGS = 631;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS1_SET_SHARED_SIGALGS); }))) {
            mixin(enumMixinStr_SSL_F_TLS1_SET_SHARED_SIGALGS);
        }
    }




    static if(!is(typeof(SSL_F_TLS1_SET_SIGALGS))) {
        private enum enumMixinStr_SSL_F_TLS1_SET_SIGALGS = `enum SSL_F_TLS1_SET_SIGALGS = 632;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS1_SET_SIGALGS); }))) {
            mixin(enumMixinStr_SSL_F_TLS1_SET_SIGALGS);
        }
    }




    static if(!is(typeof(SSL_F_TLS_CHOOSE_SIGALG))) {
        private enum enumMixinStr_SSL_F_TLS_CHOOSE_SIGALG = `enum SSL_F_TLS_CHOOSE_SIGALG = 513;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_CHOOSE_SIGALG); }))) {
            mixin(enumMixinStr_SSL_F_TLS_CHOOSE_SIGALG);
        }
    }




    static if(!is(typeof(SSL_F_TLS_CLIENT_KEY_EXCHANGE_POST_WORK))) {
        private enum enumMixinStr_SSL_F_TLS_CLIENT_KEY_EXCHANGE_POST_WORK = `enum SSL_F_TLS_CLIENT_KEY_EXCHANGE_POST_WORK = 354;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_CLIENT_KEY_EXCHANGE_POST_WORK); }))) {
            mixin(enumMixinStr_SSL_F_TLS_CLIENT_KEY_EXCHANGE_POST_WORK);
        }
    }




    static if(!is(typeof(SSL_F_TLS_COLLECT_EXTENSIONS))) {
        private enum enumMixinStr_SSL_F_TLS_COLLECT_EXTENSIONS = `enum SSL_F_TLS_COLLECT_EXTENSIONS = 435;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_COLLECT_EXTENSIONS); }))) {
            mixin(enumMixinStr_SSL_F_TLS_COLLECT_EXTENSIONS);
        }
    }




    static if(!is(typeof(SSL_F_TLS_CONSTRUCT_CERTIFICATE_AUTHORITIES))) {
        private enum enumMixinStr_SSL_F_TLS_CONSTRUCT_CERTIFICATE_AUTHORITIES = `enum SSL_F_TLS_CONSTRUCT_CERTIFICATE_AUTHORITIES = 542;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_CERTIFICATE_AUTHORITIES); }))) {
            mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_CERTIFICATE_AUTHORITIES);
        }
    }




    static if(!is(typeof(SSL_F_TLS_CONSTRUCT_CERTIFICATE_REQUEST))) {
        private enum enumMixinStr_SSL_F_TLS_CONSTRUCT_CERTIFICATE_REQUEST = `enum SSL_F_TLS_CONSTRUCT_CERTIFICATE_REQUEST = 372;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_CERTIFICATE_REQUEST); }))) {
            mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_CERTIFICATE_REQUEST);
        }
    }




    static if(!is(typeof(SSL_F_TLS_CONSTRUCT_CERT_STATUS))) {
        private enum enumMixinStr_SSL_F_TLS_CONSTRUCT_CERT_STATUS = `enum SSL_F_TLS_CONSTRUCT_CERT_STATUS = 429;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_CERT_STATUS); }))) {
            mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_CERT_STATUS);
        }
    }




    static if(!is(typeof(SSL_F_TLS_CONSTRUCT_CERT_STATUS_BODY))) {
        private enum enumMixinStr_SSL_F_TLS_CONSTRUCT_CERT_STATUS_BODY = `enum SSL_F_TLS_CONSTRUCT_CERT_STATUS_BODY = 494;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_CERT_STATUS_BODY); }))) {
            mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_CERT_STATUS_BODY);
        }
    }




    static if(!is(typeof(SSL_F_TLS_CONSTRUCT_CERT_VERIFY))) {
        private enum enumMixinStr_SSL_F_TLS_CONSTRUCT_CERT_VERIFY = `enum SSL_F_TLS_CONSTRUCT_CERT_VERIFY = 496;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_CERT_VERIFY); }))) {
            mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_CERT_VERIFY);
        }
    }




    static if(!is(typeof(SSL_F_TLS_CONSTRUCT_CHANGE_CIPHER_SPEC))) {
        private enum enumMixinStr_SSL_F_TLS_CONSTRUCT_CHANGE_CIPHER_SPEC = `enum SSL_F_TLS_CONSTRUCT_CHANGE_CIPHER_SPEC = 427;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_CHANGE_CIPHER_SPEC); }))) {
            mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_CHANGE_CIPHER_SPEC);
        }
    }




    static if(!is(typeof(SSL_F_TLS_CONSTRUCT_CKE_DHE))) {
        private enum enumMixinStr_SSL_F_TLS_CONSTRUCT_CKE_DHE = `enum SSL_F_TLS_CONSTRUCT_CKE_DHE = 404;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_CKE_DHE); }))) {
            mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_CKE_DHE);
        }
    }




    static if(!is(typeof(SSL_F_TLS_CONSTRUCT_CKE_ECDHE))) {
        private enum enumMixinStr_SSL_F_TLS_CONSTRUCT_CKE_ECDHE = `enum SSL_F_TLS_CONSTRUCT_CKE_ECDHE = 405;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_CKE_ECDHE); }))) {
            mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_CKE_ECDHE);
        }
    }




    static if(!is(typeof(SSL_F_TLS_CONSTRUCT_CKE_GOST))) {
        private enum enumMixinStr_SSL_F_TLS_CONSTRUCT_CKE_GOST = `enum SSL_F_TLS_CONSTRUCT_CKE_GOST = 406;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_CKE_GOST); }))) {
            mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_CKE_GOST);
        }
    }




    static if(!is(typeof(SSL_F_TLS_CONSTRUCT_CKE_PSK_PREAMBLE))) {
        private enum enumMixinStr_SSL_F_TLS_CONSTRUCT_CKE_PSK_PREAMBLE = `enum SSL_F_TLS_CONSTRUCT_CKE_PSK_PREAMBLE = 407;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_CKE_PSK_PREAMBLE); }))) {
            mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_CKE_PSK_PREAMBLE);
        }
    }




    static if(!is(typeof(SSL_F_TLS_CONSTRUCT_CKE_RSA))) {
        private enum enumMixinStr_SSL_F_TLS_CONSTRUCT_CKE_RSA = `enum SSL_F_TLS_CONSTRUCT_CKE_RSA = 409;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_CKE_RSA); }))) {
            mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_CKE_RSA);
        }
    }




    static if(!is(typeof(SSL_F_TLS_CONSTRUCT_CKE_SRP))) {
        private enum enumMixinStr_SSL_F_TLS_CONSTRUCT_CKE_SRP = `enum SSL_F_TLS_CONSTRUCT_CKE_SRP = 410;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_CKE_SRP); }))) {
            mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_CKE_SRP);
        }
    }




    static if(!is(typeof(SSL_F_TLS_CONSTRUCT_CLIENT_CERTIFICATE))) {
        private enum enumMixinStr_SSL_F_TLS_CONSTRUCT_CLIENT_CERTIFICATE = `enum SSL_F_TLS_CONSTRUCT_CLIENT_CERTIFICATE = 484;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_CLIENT_CERTIFICATE); }))) {
            mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_CLIENT_CERTIFICATE);
        }
    }




    static if(!is(typeof(SSL_F_TLS_CONSTRUCT_CLIENT_HELLO))) {
        private enum enumMixinStr_SSL_F_TLS_CONSTRUCT_CLIENT_HELLO = `enum SSL_F_TLS_CONSTRUCT_CLIENT_HELLO = 487;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_CLIENT_HELLO); }))) {
            mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_CLIENT_HELLO);
        }
    }




    static if(!is(typeof(SSL_F_TLS_CONSTRUCT_CLIENT_KEY_EXCHANGE))) {
        private enum enumMixinStr_SSL_F_TLS_CONSTRUCT_CLIENT_KEY_EXCHANGE = `enum SSL_F_TLS_CONSTRUCT_CLIENT_KEY_EXCHANGE = 488;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_CLIENT_KEY_EXCHANGE); }))) {
            mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_CLIENT_KEY_EXCHANGE);
        }
    }




    static if(!is(typeof(SSL_F_TLS_CONSTRUCT_CLIENT_VERIFY))) {
        private enum enumMixinStr_SSL_F_TLS_CONSTRUCT_CLIENT_VERIFY = `enum SSL_F_TLS_CONSTRUCT_CLIENT_VERIFY = 489;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_CLIENT_VERIFY); }))) {
            mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_CLIENT_VERIFY);
        }
    }




    static if(!is(typeof(SSL_F_TLS_CONSTRUCT_CTOS_ALPN))) {
        private enum enumMixinStr_SSL_F_TLS_CONSTRUCT_CTOS_ALPN = `enum SSL_F_TLS_CONSTRUCT_CTOS_ALPN = 466;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_CTOS_ALPN); }))) {
            mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_CTOS_ALPN);
        }
    }




    static if(!is(typeof(SSL_F_TLS_CONSTRUCT_CTOS_CERTIFICATE))) {
        private enum enumMixinStr_SSL_F_TLS_CONSTRUCT_CTOS_CERTIFICATE = `enum SSL_F_TLS_CONSTRUCT_CTOS_CERTIFICATE = 355;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_CTOS_CERTIFICATE); }))) {
            mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_CTOS_CERTIFICATE);
        }
    }




    static if(!is(typeof(SSL_F_TLS_CONSTRUCT_CTOS_COOKIE))) {
        private enum enumMixinStr_SSL_F_TLS_CONSTRUCT_CTOS_COOKIE = `enum SSL_F_TLS_CONSTRUCT_CTOS_COOKIE = 535;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_CTOS_COOKIE); }))) {
            mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_CTOS_COOKIE);
        }
    }




    static if(!is(typeof(SSL_F_TLS_CONSTRUCT_CTOS_EARLY_DATA))) {
        private enum enumMixinStr_SSL_F_TLS_CONSTRUCT_CTOS_EARLY_DATA = `enum SSL_F_TLS_CONSTRUCT_CTOS_EARLY_DATA = 530;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_CTOS_EARLY_DATA); }))) {
            mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_CTOS_EARLY_DATA);
        }
    }




    static if(!is(typeof(SSL_F_TLS_CONSTRUCT_CTOS_EC_PT_FORMATS))) {
        private enum enumMixinStr_SSL_F_TLS_CONSTRUCT_CTOS_EC_PT_FORMATS = `enum SSL_F_TLS_CONSTRUCT_CTOS_EC_PT_FORMATS = 467;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_CTOS_EC_PT_FORMATS); }))) {
            mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_CTOS_EC_PT_FORMATS);
        }
    }




    static if(!is(typeof(SSL_F_TLS_CONSTRUCT_CTOS_EMS))) {
        private enum enumMixinStr_SSL_F_TLS_CONSTRUCT_CTOS_EMS = `enum SSL_F_TLS_CONSTRUCT_CTOS_EMS = 468;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_CTOS_EMS); }))) {
            mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_CTOS_EMS);
        }
    }




    static if(!is(typeof(SSL_F_TLS_CONSTRUCT_CTOS_ETM))) {
        private enum enumMixinStr_SSL_F_TLS_CONSTRUCT_CTOS_ETM = `enum SSL_F_TLS_CONSTRUCT_CTOS_ETM = 469;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_CTOS_ETM); }))) {
            mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_CTOS_ETM);
        }
    }




    static if(!is(typeof(SSL_F_TLS_CONSTRUCT_CTOS_HELLO))) {
        private enum enumMixinStr_SSL_F_TLS_CONSTRUCT_CTOS_HELLO = `enum SSL_F_TLS_CONSTRUCT_CTOS_HELLO = 356;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_CTOS_HELLO); }))) {
            mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_CTOS_HELLO);
        }
    }




    static if(!is(typeof(SSL_F_TLS_CONSTRUCT_CTOS_KEY_EXCHANGE))) {
        private enum enumMixinStr_SSL_F_TLS_CONSTRUCT_CTOS_KEY_EXCHANGE = `enum SSL_F_TLS_CONSTRUCT_CTOS_KEY_EXCHANGE = 357;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_CTOS_KEY_EXCHANGE); }))) {
            mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_CTOS_KEY_EXCHANGE);
        }
    }




    static if(!is(typeof(SSL_F_TLS_CONSTRUCT_CTOS_KEY_SHARE))) {
        private enum enumMixinStr_SSL_F_TLS_CONSTRUCT_CTOS_KEY_SHARE = `enum SSL_F_TLS_CONSTRUCT_CTOS_KEY_SHARE = 470;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_CTOS_KEY_SHARE); }))) {
            mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_CTOS_KEY_SHARE);
        }
    }




    static if(!is(typeof(SSL_F_TLS_CONSTRUCT_CTOS_MAXFRAGMENTLEN))) {
        private enum enumMixinStr_SSL_F_TLS_CONSTRUCT_CTOS_MAXFRAGMENTLEN = `enum SSL_F_TLS_CONSTRUCT_CTOS_MAXFRAGMENTLEN = 549;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_CTOS_MAXFRAGMENTLEN); }))) {
            mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_CTOS_MAXFRAGMENTLEN);
        }
    }




    static if(!is(typeof(SSL_F_TLS_CONSTRUCT_CTOS_NPN))) {
        private enum enumMixinStr_SSL_F_TLS_CONSTRUCT_CTOS_NPN = `enum SSL_F_TLS_CONSTRUCT_CTOS_NPN = 471;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_CTOS_NPN); }))) {
            mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_CTOS_NPN);
        }
    }




    static if(!is(typeof(SSL_F_TLS_CONSTRUCT_CTOS_PADDING))) {
        private enum enumMixinStr_SSL_F_TLS_CONSTRUCT_CTOS_PADDING = `enum SSL_F_TLS_CONSTRUCT_CTOS_PADDING = 472;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_CTOS_PADDING); }))) {
            mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_CTOS_PADDING);
        }
    }




    static if(!is(typeof(SSL_F_TLS_CONSTRUCT_CTOS_POST_HANDSHAKE_AUTH))) {
        private enum enumMixinStr_SSL_F_TLS_CONSTRUCT_CTOS_POST_HANDSHAKE_AUTH = `enum SSL_F_TLS_CONSTRUCT_CTOS_POST_HANDSHAKE_AUTH = 619;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_CTOS_POST_HANDSHAKE_AUTH); }))) {
            mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_CTOS_POST_HANDSHAKE_AUTH);
        }
    }




    static if(!is(typeof(SSL_F_TLS_CONSTRUCT_CTOS_PSK))) {
        private enum enumMixinStr_SSL_F_TLS_CONSTRUCT_CTOS_PSK = `enum SSL_F_TLS_CONSTRUCT_CTOS_PSK = 501;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_CTOS_PSK); }))) {
            mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_CTOS_PSK);
        }
    }




    static if(!is(typeof(SSL_F_TLS_CONSTRUCT_CTOS_PSK_KEX_MODES))) {
        private enum enumMixinStr_SSL_F_TLS_CONSTRUCT_CTOS_PSK_KEX_MODES = `enum SSL_F_TLS_CONSTRUCT_CTOS_PSK_KEX_MODES = 509;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_CTOS_PSK_KEX_MODES); }))) {
            mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_CTOS_PSK_KEX_MODES);
        }
    }




    static if(!is(typeof(SSL_F_TLS_CONSTRUCT_CTOS_RENEGOTIATE))) {
        private enum enumMixinStr_SSL_F_TLS_CONSTRUCT_CTOS_RENEGOTIATE = `enum SSL_F_TLS_CONSTRUCT_CTOS_RENEGOTIATE = 473;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_CTOS_RENEGOTIATE); }))) {
            mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_CTOS_RENEGOTIATE);
        }
    }




    static if(!is(typeof(SSL_F_TLS_CONSTRUCT_CTOS_SCT))) {
        private enum enumMixinStr_SSL_F_TLS_CONSTRUCT_CTOS_SCT = `enum SSL_F_TLS_CONSTRUCT_CTOS_SCT = 474;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_CTOS_SCT); }))) {
            mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_CTOS_SCT);
        }
    }




    static if(!is(typeof(SSL_F_TLS_CONSTRUCT_CTOS_SERVER_NAME))) {
        private enum enumMixinStr_SSL_F_TLS_CONSTRUCT_CTOS_SERVER_NAME = `enum SSL_F_TLS_CONSTRUCT_CTOS_SERVER_NAME = 475;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_CTOS_SERVER_NAME); }))) {
            mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_CTOS_SERVER_NAME);
        }
    }




    static if(!is(typeof(SSL_F_TLS_CONSTRUCT_CTOS_SESSION_TICKET))) {
        private enum enumMixinStr_SSL_F_TLS_CONSTRUCT_CTOS_SESSION_TICKET = `enum SSL_F_TLS_CONSTRUCT_CTOS_SESSION_TICKET = 476;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_CTOS_SESSION_TICKET); }))) {
            mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_CTOS_SESSION_TICKET);
        }
    }




    static if(!is(typeof(SSL_F_TLS_CONSTRUCT_CTOS_SIG_ALGS))) {
        private enum enumMixinStr_SSL_F_TLS_CONSTRUCT_CTOS_SIG_ALGS = `enum SSL_F_TLS_CONSTRUCT_CTOS_SIG_ALGS = 477;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_CTOS_SIG_ALGS); }))) {
            mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_CTOS_SIG_ALGS);
        }
    }




    static if(!is(typeof(SSL_F_TLS_CONSTRUCT_CTOS_SRP))) {
        private enum enumMixinStr_SSL_F_TLS_CONSTRUCT_CTOS_SRP = `enum SSL_F_TLS_CONSTRUCT_CTOS_SRP = 478;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_CTOS_SRP); }))) {
            mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_CTOS_SRP);
        }
    }




    static if(!is(typeof(SSL_F_TLS_CONSTRUCT_CTOS_STATUS_REQUEST))) {
        private enum enumMixinStr_SSL_F_TLS_CONSTRUCT_CTOS_STATUS_REQUEST = `enum SSL_F_TLS_CONSTRUCT_CTOS_STATUS_REQUEST = 479;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_CTOS_STATUS_REQUEST); }))) {
            mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_CTOS_STATUS_REQUEST);
        }
    }




    static if(!is(typeof(SSL_F_TLS_CONSTRUCT_CTOS_SUPPORTED_GROUPS))) {
        private enum enumMixinStr_SSL_F_TLS_CONSTRUCT_CTOS_SUPPORTED_GROUPS = `enum SSL_F_TLS_CONSTRUCT_CTOS_SUPPORTED_GROUPS = 480;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_CTOS_SUPPORTED_GROUPS); }))) {
            mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_CTOS_SUPPORTED_GROUPS);
        }
    }




    static if(!is(typeof(SSL_F_TLS_CONSTRUCT_CTOS_SUPPORTED_VERSIONS))) {
        private enum enumMixinStr_SSL_F_TLS_CONSTRUCT_CTOS_SUPPORTED_VERSIONS = `enum SSL_F_TLS_CONSTRUCT_CTOS_SUPPORTED_VERSIONS = 481;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_CTOS_SUPPORTED_VERSIONS); }))) {
            mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_CTOS_SUPPORTED_VERSIONS);
        }
    }




    static if(!is(typeof(SSL_F_TLS_CONSTRUCT_CTOS_USE_SRTP))) {
        private enum enumMixinStr_SSL_F_TLS_CONSTRUCT_CTOS_USE_SRTP = `enum SSL_F_TLS_CONSTRUCT_CTOS_USE_SRTP = 482;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_CTOS_USE_SRTP); }))) {
            mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_CTOS_USE_SRTP);
        }
    }




    static if(!is(typeof(SSL_F_TLS_CONSTRUCT_CTOS_VERIFY))) {
        private enum enumMixinStr_SSL_F_TLS_CONSTRUCT_CTOS_VERIFY = `enum SSL_F_TLS_CONSTRUCT_CTOS_VERIFY = 358;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_CTOS_VERIFY); }))) {
            mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_CTOS_VERIFY);
        }
    }




    static if(!is(typeof(SSL_F_TLS_CONSTRUCT_ENCRYPTED_EXTENSIONS))) {
        private enum enumMixinStr_SSL_F_TLS_CONSTRUCT_ENCRYPTED_EXTENSIONS = `enum SSL_F_TLS_CONSTRUCT_ENCRYPTED_EXTENSIONS = 443;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_ENCRYPTED_EXTENSIONS); }))) {
            mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_ENCRYPTED_EXTENSIONS);
        }
    }




    static if(!is(typeof(SSL_F_TLS_CONSTRUCT_END_OF_EARLY_DATA))) {
        private enum enumMixinStr_SSL_F_TLS_CONSTRUCT_END_OF_EARLY_DATA = `enum SSL_F_TLS_CONSTRUCT_END_OF_EARLY_DATA = 536;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_END_OF_EARLY_DATA); }))) {
            mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_END_OF_EARLY_DATA);
        }
    }




    static if(!is(typeof(SSL_F_TLS_CONSTRUCT_EXTENSIONS))) {
        private enum enumMixinStr_SSL_F_TLS_CONSTRUCT_EXTENSIONS = `enum SSL_F_TLS_CONSTRUCT_EXTENSIONS = 447;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_EXTENSIONS); }))) {
            mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_EXTENSIONS);
        }
    }




    static if(!is(typeof(SSL_F_TLS_CONSTRUCT_FINISHED))) {
        private enum enumMixinStr_SSL_F_TLS_CONSTRUCT_FINISHED = `enum SSL_F_TLS_CONSTRUCT_FINISHED = 359;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_FINISHED); }))) {
            mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_FINISHED);
        }
    }




    static if(!is(typeof(SSL_F_TLS_CONSTRUCT_HELLO_REQUEST))) {
        private enum enumMixinStr_SSL_F_TLS_CONSTRUCT_HELLO_REQUEST = `enum SSL_F_TLS_CONSTRUCT_HELLO_REQUEST = 373;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_HELLO_REQUEST); }))) {
            mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_HELLO_REQUEST);
        }
    }




    static if(!is(typeof(SSL_F_TLS_CONSTRUCT_HELLO_RETRY_REQUEST))) {
        private enum enumMixinStr_SSL_F_TLS_CONSTRUCT_HELLO_RETRY_REQUEST = `enum SSL_F_TLS_CONSTRUCT_HELLO_RETRY_REQUEST = 510;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_HELLO_RETRY_REQUEST); }))) {
            mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_HELLO_RETRY_REQUEST);
        }
    }




    static if(!is(typeof(SSL_F_TLS_CONSTRUCT_KEY_UPDATE))) {
        private enum enumMixinStr_SSL_F_TLS_CONSTRUCT_KEY_UPDATE = `enum SSL_F_TLS_CONSTRUCT_KEY_UPDATE = 517;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_KEY_UPDATE); }))) {
            mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_KEY_UPDATE);
        }
    }




    static if(!is(typeof(SSL_F_TLS_CONSTRUCT_NEW_SESSION_TICKET))) {
        private enum enumMixinStr_SSL_F_TLS_CONSTRUCT_NEW_SESSION_TICKET = `enum SSL_F_TLS_CONSTRUCT_NEW_SESSION_TICKET = 428;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_NEW_SESSION_TICKET); }))) {
            mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_NEW_SESSION_TICKET);
        }
    }




    static if(!is(typeof(SSL_F_TLS_CONSTRUCT_NEXT_PROTO))) {
        private enum enumMixinStr_SSL_F_TLS_CONSTRUCT_NEXT_PROTO = `enum SSL_F_TLS_CONSTRUCT_NEXT_PROTO = 426;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_NEXT_PROTO); }))) {
            mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_NEXT_PROTO);
        }
    }




    static if(!is(typeof(SSL_F_TLS_CONSTRUCT_SERVER_CERTIFICATE))) {
        private enum enumMixinStr_SSL_F_TLS_CONSTRUCT_SERVER_CERTIFICATE = `enum SSL_F_TLS_CONSTRUCT_SERVER_CERTIFICATE = 490;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_SERVER_CERTIFICATE); }))) {
            mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_SERVER_CERTIFICATE);
        }
    }




    static if(!is(typeof(SSL_F_TLS_CONSTRUCT_SERVER_HELLO))) {
        private enum enumMixinStr_SSL_F_TLS_CONSTRUCT_SERVER_HELLO = `enum SSL_F_TLS_CONSTRUCT_SERVER_HELLO = 491;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_SERVER_HELLO); }))) {
            mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_SERVER_HELLO);
        }
    }




    static if(!is(typeof(SSL_F_TLS_CONSTRUCT_SERVER_KEY_EXCHANGE))) {
        private enum enumMixinStr_SSL_F_TLS_CONSTRUCT_SERVER_KEY_EXCHANGE = `enum SSL_F_TLS_CONSTRUCT_SERVER_KEY_EXCHANGE = 492;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_SERVER_KEY_EXCHANGE); }))) {
            mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_SERVER_KEY_EXCHANGE);
        }
    }




    static if(!is(typeof(SSL_F_TLS_CONSTRUCT_STOC_ALPN))) {
        private enum enumMixinStr_SSL_F_TLS_CONSTRUCT_STOC_ALPN = `enum SSL_F_TLS_CONSTRUCT_STOC_ALPN = 451;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_STOC_ALPN); }))) {
            mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_STOC_ALPN);
        }
    }




    static if(!is(typeof(SSL_F_TLS_CONSTRUCT_STOC_CERTIFICATE))) {
        private enum enumMixinStr_SSL_F_TLS_CONSTRUCT_STOC_CERTIFICATE = `enum SSL_F_TLS_CONSTRUCT_STOC_CERTIFICATE = 374;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_STOC_CERTIFICATE); }))) {
            mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_STOC_CERTIFICATE);
        }
    }




    static if(!is(typeof(SSL_F_TLS_CONSTRUCT_STOC_COOKIE))) {
        private enum enumMixinStr_SSL_F_TLS_CONSTRUCT_STOC_COOKIE = `enum SSL_F_TLS_CONSTRUCT_STOC_COOKIE = 613;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_STOC_COOKIE); }))) {
            mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_STOC_COOKIE);
        }
    }




    static if(!is(typeof(SSL_F_TLS_CONSTRUCT_STOC_CRYPTOPRO_BUG))) {
        private enum enumMixinStr_SSL_F_TLS_CONSTRUCT_STOC_CRYPTOPRO_BUG = `enum SSL_F_TLS_CONSTRUCT_STOC_CRYPTOPRO_BUG = 452;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_STOC_CRYPTOPRO_BUG); }))) {
            mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_STOC_CRYPTOPRO_BUG);
        }
    }




    static if(!is(typeof(SSL_F_TLS_CONSTRUCT_STOC_DONE))) {
        private enum enumMixinStr_SSL_F_TLS_CONSTRUCT_STOC_DONE = `enum SSL_F_TLS_CONSTRUCT_STOC_DONE = 375;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_STOC_DONE); }))) {
            mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_STOC_DONE);
        }
    }




    static if(!is(typeof(SSL_F_TLS_CONSTRUCT_STOC_EARLY_DATA))) {
        private enum enumMixinStr_SSL_F_TLS_CONSTRUCT_STOC_EARLY_DATA = `enum SSL_F_TLS_CONSTRUCT_STOC_EARLY_DATA = 531;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_STOC_EARLY_DATA); }))) {
            mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_STOC_EARLY_DATA);
        }
    }




    static if(!is(typeof(SSL_F_TLS_CONSTRUCT_STOC_EARLY_DATA_INFO))) {
        private enum enumMixinStr_SSL_F_TLS_CONSTRUCT_STOC_EARLY_DATA_INFO = `enum SSL_F_TLS_CONSTRUCT_STOC_EARLY_DATA_INFO = 525;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_STOC_EARLY_DATA_INFO); }))) {
            mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_STOC_EARLY_DATA_INFO);
        }
    }




    static if(!is(typeof(SSL_F_TLS_CONSTRUCT_STOC_EC_PT_FORMATS))) {
        private enum enumMixinStr_SSL_F_TLS_CONSTRUCT_STOC_EC_PT_FORMATS = `enum SSL_F_TLS_CONSTRUCT_STOC_EC_PT_FORMATS = 453;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_STOC_EC_PT_FORMATS); }))) {
            mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_STOC_EC_PT_FORMATS);
        }
    }




    static if(!is(typeof(SSL_F_TLS_CONSTRUCT_STOC_EMS))) {
        private enum enumMixinStr_SSL_F_TLS_CONSTRUCT_STOC_EMS = `enum SSL_F_TLS_CONSTRUCT_STOC_EMS = 454;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_STOC_EMS); }))) {
            mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_STOC_EMS);
        }
    }




    static if(!is(typeof(SSL_F_TLS_CONSTRUCT_STOC_ETM))) {
        private enum enumMixinStr_SSL_F_TLS_CONSTRUCT_STOC_ETM = `enum SSL_F_TLS_CONSTRUCT_STOC_ETM = 455;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_STOC_ETM); }))) {
            mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_STOC_ETM);
        }
    }




    static if(!is(typeof(SSL_F_TLS_CONSTRUCT_STOC_HELLO))) {
        private enum enumMixinStr_SSL_F_TLS_CONSTRUCT_STOC_HELLO = `enum SSL_F_TLS_CONSTRUCT_STOC_HELLO = 376;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_STOC_HELLO); }))) {
            mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_STOC_HELLO);
        }
    }




    static if(!is(typeof(SSL_F_TLS_CONSTRUCT_STOC_KEY_EXCHANGE))) {
        private enum enumMixinStr_SSL_F_TLS_CONSTRUCT_STOC_KEY_EXCHANGE = `enum SSL_F_TLS_CONSTRUCT_STOC_KEY_EXCHANGE = 377;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_STOC_KEY_EXCHANGE); }))) {
            mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_STOC_KEY_EXCHANGE);
        }
    }




    static if(!is(typeof(SSL_F_TLS_CONSTRUCT_STOC_KEY_SHARE))) {
        private enum enumMixinStr_SSL_F_TLS_CONSTRUCT_STOC_KEY_SHARE = `enum SSL_F_TLS_CONSTRUCT_STOC_KEY_SHARE = 456;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_STOC_KEY_SHARE); }))) {
            mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_STOC_KEY_SHARE);
        }
    }




    static if(!is(typeof(SSL_F_TLS_CONSTRUCT_STOC_MAXFRAGMENTLEN))) {
        private enum enumMixinStr_SSL_F_TLS_CONSTRUCT_STOC_MAXFRAGMENTLEN = `enum SSL_F_TLS_CONSTRUCT_STOC_MAXFRAGMENTLEN = 548;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_STOC_MAXFRAGMENTLEN); }))) {
            mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_STOC_MAXFRAGMENTLEN);
        }
    }




    static if(!is(typeof(SSL_F_TLS_CONSTRUCT_STOC_NEXT_PROTO_NEG))) {
        private enum enumMixinStr_SSL_F_TLS_CONSTRUCT_STOC_NEXT_PROTO_NEG = `enum SSL_F_TLS_CONSTRUCT_STOC_NEXT_PROTO_NEG = 457;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_STOC_NEXT_PROTO_NEG); }))) {
            mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_STOC_NEXT_PROTO_NEG);
        }
    }




    static if(!is(typeof(SSL_F_TLS_CONSTRUCT_STOC_PSK))) {
        private enum enumMixinStr_SSL_F_TLS_CONSTRUCT_STOC_PSK = `enum SSL_F_TLS_CONSTRUCT_STOC_PSK = 504;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_STOC_PSK); }))) {
            mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_STOC_PSK);
        }
    }




    static if(!is(typeof(SSL_F_TLS_CONSTRUCT_STOC_RENEGOTIATE))) {
        private enum enumMixinStr_SSL_F_TLS_CONSTRUCT_STOC_RENEGOTIATE = `enum SSL_F_TLS_CONSTRUCT_STOC_RENEGOTIATE = 458;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_STOC_RENEGOTIATE); }))) {
            mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_STOC_RENEGOTIATE);
        }
    }




    static if(!is(typeof(SSL_F_TLS_CONSTRUCT_STOC_SERVER_NAME))) {
        private enum enumMixinStr_SSL_F_TLS_CONSTRUCT_STOC_SERVER_NAME = `enum SSL_F_TLS_CONSTRUCT_STOC_SERVER_NAME = 459;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_STOC_SERVER_NAME); }))) {
            mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_STOC_SERVER_NAME);
        }
    }




    static if(!is(typeof(SSL_F_TLS_CONSTRUCT_STOC_SESSION_TICKET))) {
        private enum enumMixinStr_SSL_F_TLS_CONSTRUCT_STOC_SESSION_TICKET = `enum SSL_F_TLS_CONSTRUCT_STOC_SESSION_TICKET = 460;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_STOC_SESSION_TICKET); }))) {
            mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_STOC_SESSION_TICKET);
        }
    }




    static if(!is(typeof(SSL_F_TLS_CONSTRUCT_STOC_STATUS_REQUEST))) {
        private enum enumMixinStr_SSL_F_TLS_CONSTRUCT_STOC_STATUS_REQUEST = `enum SSL_F_TLS_CONSTRUCT_STOC_STATUS_REQUEST = 461;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_STOC_STATUS_REQUEST); }))) {
            mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_STOC_STATUS_REQUEST);
        }
    }




    static if(!is(typeof(SSL_F_TLS_CONSTRUCT_STOC_SUPPORTED_GROUPS))) {
        private enum enumMixinStr_SSL_F_TLS_CONSTRUCT_STOC_SUPPORTED_GROUPS = `enum SSL_F_TLS_CONSTRUCT_STOC_SUPPORTED_GROUPS = 544;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_STOC_SUPPORTED_GROUPS); }))) {
            mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_STOC_SUPPORTED_GROUPS);
        }
    }




    static if(!is(typeof(SSL_F_TLS_CONSTRUCT_STOC_SUPPORTED_VERSIONS))) {
        private enum enumMixinStr_SSL_F_TLS_CONSTRUCT_STOC_SUPPORTED_VERSIONS = `enum SSL_F_TLS_CONSTRUCT_STOC_SUPPORTED_VERSIONS = 611;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_STOC_SUPPORTED_VERSIONS); }))) {
            mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_STOC_SUPPORTED_VERSIONS);
        }
    }




    static if(!is(typeof(SSL_F_TLS_CONSTRUCT_STOC_USE_SRTP))) {
        private enum enumMixinStr_SSL_F_TLS_CONSTRUCT_STOC_USE_SRTP = `enum SSL_F_TLS_CONSTRUCT_STOC_USE_SRTP = 462;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_STOC_USE_SRTP); }))) {
            mixin(enumMixinStr_SSL_F_TLS_CONSTRUCT_STOC_USE_SRTP);
        }
    }




    static if(!is(typeof(SSL_F_TLS_EARLY_POST_PROCESS_CLIENT_HELLO))) {
        private enum enumMixinStr_SSL_F_TLS_EARLY_POST_PROCESS_CLIENT_HELLO = `enum SSL_F_TLS_EARLY_POST_PROCESS_CLIENT_HELLO = 521;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_EARLY_POST_PROCESS_CLIENT_HELLO); }))) {
            mixin(enumMixinStr_SSL_F_TLS_EARLY_POST_PROCESS_CLIENT_HELLO);
        }
    }




    static if(!is(typeof(SSL_F_TLS_FINISH_HANDSHAKE))) {
        private enum enumMixinStr_SSL_F_TLS_FINISH_HANDSHAKE = `enum SSL_F_TLS_FINISH_HANDSHAKE = 597;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_FINISH_HANDSHAKE); }))) {
            mixin(enumMixinStr_SSL_F_TLS_FINISH_HANDSHAKE);
        }
    }




    static if(!is(typeof(SSL_F_TLS_GET_MESSAGE_BODY))) {
        private enum enumMixinStr_SSL_F_TLS_GET_MESSAGE_BODY = `enum SSL_F_TLS_GET_MESSAGE_BODY = 351;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_GET_MESSAGE_BODY); }))) {
            mixin(enumMixinStr_SSL_F_TLS_GET_MESSAGE_BODY);
        }
    }




    static if(!is(typeof(SSL_F_TLS_GET_MESSAGE_HEADER))) {
        private enum enumMixinStr_SSL_F_TLS_GET_MESSAGE_HEADER = `enum SSL_F_TLS_GET_MESSAGE_HEADER = 387;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_GET_MESSAGE_HEADER); }))) {
            mixin(enumMixinStr_SSL_F_TLS_GET_MESSAGE_HEADER);
        }
    }




    static if(!is(typeof(SSL_F_TLS_HANDLE_ALPN))) {
        private enum enumMixinStr_SSL_F_TLS_HANDLE_ALPN = `enum SSL_F_TLS_HANDLE_ALPN = 562;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_HANDLE_ALPN); }))) {
            mixin(enumMixinStr_SSL_F_TLS_HANDLE_ALPN);
        }
    }




    static if(!is(typeof(SSL_F_TLS_HANDLE_STATUS_REQUEST))) {
        private enum enumMixinStr_SSL_F_TLS_HANDLE_STATUS_REQUEST = `enum SSL_F_TLS_HANDLE_STATUS_REQUEST = 563;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_HANDLE_STATUS_REQUEST); }))) {
            mixin(enumMixinStr_SSL_F_TLS_HANDLE_STATUS_REQUEST);
        }
    }




    static if(!is(typeof(SSL_F_TLS_PARSE_CERTIFICATE_AUTHORITIES))) {
        private enum enumMixinStr_SSL_F_TLS_PARSE_CERTIFICATE_AUTHORITIES = `enum SSL_F_TLS_PARSE_CERTIFICATE_AUTHORITIES = 566;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_PARSE_CERTIFICATE_AUTHORITIES); }))) {
            mixin(enumMixinStr_SSL_F_TLS_PARSE_CERTIFICATE_AUTHORITIES);
        }
    }




    static if(!is(typeof(SSL_F_TLS_PARSE_CLIENTHELLO_TLSEXT))) {
        private enum enumMixinStr_SSL_F_TLS_PARSE_CLIENTHELLO_TLSEXT = `enum SSL_F_TLS_PARSE_CLIENTHELLO_TLSEXT = 449;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_PARSE_CLIENTHELLO_TLSEXT); }))) {
            mixin(enumMixinStr_SSL_F_TLS_PARSE_CLIENTHELLO_TLSEXT);
        }
    }




    static if(!is(typeof(SSL_F_TLS_PARSE_CTOS_ALPN))) {
        private enum enumMixinStr_SSL_F_TLS_PARSE_CTOS_ALPN = `enum SSL_F_TLS_PARSE_CTOS_ALPN = 567;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_PARSE_CTOS_ALPN); }))) {
            mixin(enumMixinStr_SSL_F_TLS_PARSE_CTOS_ALPN);
        }
    }




    static if(!is(typeof(SSL_F_TLS_PARSE_CTOS_COOKIE))) {
        private enum enumMixinStr_SSL_F_TLS_PARSE_CTOS_COOKIE = `enum SSL_F_TLS_PARSE_CTOS_COOKIE = 614;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_PARSE_CTOS_COOKIE); }))) {
            mixin(enumMixinStr_SSL_F_TLS_PARSE_CTOS_COOKIE);
        }
    }




    static if(!is(typeof(SSL_F_TLS_PARSE_CTOS_EARLY_DATA))) {
        private enum enumMixinStr_SSL_F_TLS_PARSE_CTOS_EARLY_DATA = `enum SSL_F_TLS_PARSE_CTOS_EARLY_DATA = 568;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_PARSE_CTOS_EARLY_DATA); }))) {
            mixin(enumMixinStr_SSL_F_TLS_PARSE_CTOS_EARLY_DATA);
        }
    }




    static if(!is(typeof(SSL_F_TLS_PARSE_CTOS_EC_PT_FORMATS))) {
        private enum enumMixinStr_SSL_F_TLS_PARSE_CTOS_EC_PT_FORMATS = `enum SSL_F_TLS_PARSE_CTOS_EC_PT_FORMATS = 569;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_PARSE_CTOS_EC_PT_FORMATS); }))) {
            mixin(enumMixinStr_SSL_F_TLS_PARSE_CTOS_EC_PT_FORMATS);
        }
    }




    static if(!is(typeof(SSL_F_TLS_PARSE_CTOS_EMS))) {
        private enum enumMixinStr_SSL_F_TLS_PARSE_CTOS_EMS = `enum SSL_F_TLS_PARSE_CTOS_EMS = 570;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_PARSE_CTOS_EMS); }))) {
            mixin(enumMixinStr_SSL_F_TLS_PARSE_CTOS_EMS);
        }
    }




    static if(!is(typeof(SSL_F_TLS_PARSE_CTOS_KEY_SHARE))) {
        private enum enumMixinStr_SSL_F_TLS_PARSE_CTOS_KEY_SHARE = `enum SSL_F_TLS_PARSE_CTOS_KEY_SHARE = 463;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_PARSE_CTOS_KEY_SHARE); }))) {
            mixin(enumMixinStr_SSL_F_TLS_PARSE_CTOS_KEY_SHARE);
        }
    }




    static if(!is(typeof(SSL_F_TLS_PARSE_CTOS_MAXFRAGMENTLEN))) {
        private enum enumMixinStr_SSL_F_TLS_PARSE_CTOS_MAXFRAGMENTLEN = `enum SSL_F_TLS_PARSE_CTOS_MAXFRAGMENTLEN = 571;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_PARSE_CTOS_MAXFRAGMENTLEN); }))) {
            mixin(enumMixinStr_SSL_F_TLS_PARSE_CTOS_MAXFRAGMENTLEN);
        }
    }




    static if(!is(typeof(SSL_F_TLS_PARSE_CTOS_POST_HANDSHAKE_AUTH))) {
        private enum enumMixinStr_SSL_F_TLS_PARSE_CTOS_POST_HANDSHAKE_AUTH = `enum SSL_F_TLS_PARSE_CTOS_POST_HANDSHAKE_AUTH = 620;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_PARSE_CTOS_POST_HANDSHAKE_AUTH); }))) {
            mixin(enumMixinStr_SSL_F_TLS_PARSE_CTOS_POST_HANDSHAKE_AUTH);
        }
    }




    static if(!is(typeof(SSL_F_TLS_PARSE_CTOS_PSK))) {
        private enum enumMixinStr_SSL_F_TLS_PARSE_CTOS_PSK = `enum SSL_F_TLS_PARSE_CTOS_PSK = 505;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_PARSE_CTOS_PSK); }))) {
            mixin(enumMixinStr_SSL_F_TLS_PARSE_CTOS_PSK);
        }
    }




    static if(!is(typeof(SSL_F_TLS_PARSE_CTOS_PSK_KEX_MODES))) {
        private enum enumMixinStr_SSL_F_TLS_PARSE_CTOS_PSK_KEX_MODES = `enum SSL_F_TLS_PARSE_CTOS_PSK_KEX_MODES = 572;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_PARSE_CTOS_PSK_KEX_MODES); }))) {
            mixin(enumMixinStr_SSL_F_TLS_PARSE_CTOS_PSK_KEX_MODES);
        }
    }




    static if(!is(typeof(SSL_F_TLS_PARSE_CTOS_RENEGOTIATE))) {
        private enum enumMixinStr_SSL_F_TLS_PARSE_CTOS_RENEGOTIATE = `enum SSL_F_TLS_PARSE_CTOS_RENEGOTIATE = 464;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_PARSE_CTOS_RENEGOTIATE); }))) {
            mixin(enumMixinStr_SSL_F_TLS_PARSE_CTOS_RENEGOTIATE);
        }
    }




    static if(!is(typeof(SSL_F_TLS_PARSE_CTOS_SERVER_NAME))) {
        private enum enumMixinStr_SSL_F_TLS_PARSE_CTOS_SERVER_NAME = `enum SSL_F_TLS_PARSE_CTOS_SERVER_NAME = 573;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_PARSE_CTOS_SERVER_NAME); }))) {
            mixin(enumMixinStr_SSL_F_TLS_PARSE_CTOS_SERVER_NAME);
        }
    }




    static if(!is(typeof(SSL_F_TLS_PARSE_CTOS_SESSION_TICKET))) {
        private enum enumMixinStr_SSL_F_TLS_PARSE_CTOS_SESSION_TICKET = `enum SSL_F_TLS_PARSE_CTOS_SESSION_TICKET = 574;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_PARSE_CTOS_SESSION_TICKET); }))) {
            mixin(enumMixinStr_SSL_F_TLS_PARSE_CTOS_SESSION_TICKET);
        }
    }




    static if(!is(typeof(SSL_F_TLS_PARSE_CTOS_SIG_ALGS))) {
        private enum enumMixinStr_SSL_F_TLS_PARSE_CTOS_SIG_ALGS = `enum SSL_F_TLS_PARSE_CTOS_SIG_ALGS = 575;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_PARSE_CTOS_SIG_ALGS); }))) {
            mixin(enumMixinStr_SSL_F_TLS_PARSE_CTOS_SIG_ALGS);
        }
    }




    static if(!is(typeof(SSL_F_TLS_PARSE_CTOS_SIG_ALGS_CERT))) {
        private enum enumMixinStr_SSL_F_TLS_PARSE_CTOS_SIG_ALGS_CERT = `enum SSL_F_TLS_PARSE_CTOS_SIG_ALGS_CERT = 615;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_PARSE_CTOS_SIG_ALGS_CERT); }))) {
            mixin(enumMixinStr_SSL_F_TLS_PARSE_CTOS_SIG_ALGS_CERT);
        }
    }




    static if(!is(typeof(SSL_F_TLS_PARSE_CTOS_SRP))) {
        private enum enumMixinStr_SSL_F_TLS_PARSE_CTOS_SRP = `enum SSL_F_TLS_PARSE_CTOS_SRP = 576;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_PARSE_CTOS_SRP); }))) {
            mixin(enumMixinStr_SSL_F_TLS_PARSE_CTOS_SRP);
        }
    }




    static if(!is(typeof(SSL_F_TLS_PARSE_CTOS_STATUS_REQUEST))) {
        private enum enumMixinStr_SSL_F_TLS_PARSE_CTOS_STATUS_REQUEST = `enum SSL_F_TLS_PARSE_CTOS_STATUS_REQUEST = 577;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_PARSE_CTOS_STATUS_REQUEST); }))) {
            mixin(enumMixinStr_SSL_F_TLS_PARSE_CTOS_STATUS_REQUEST);
        }
    }




    static if(!is(typeof(SSL_F_TLS_PARSE_CTOS_SUPPORTED_GROUPS))) {
        private enum enumMixinStr_SSL_F_TLS_PARSE_CTOS_SUPPORTED_GROUPS = `enum SSL_F_TLS_PARSE_CTOS_SUPPORTED_GROUPS = 578;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_PARSE_CTOS_SUPPORTED_GROUPS); }))) {
            mixin(enumMixinStr_SSL_F_TLS_PARSE_CTOS_SUPPORTED_GROUPS);
        }
    }




    static if(!is(typeof(SSL_F_TLS_PARSE_CTOS_USE_SRTP))) {
        private enum enumMixinStr_SSL_F_TLS_PARSE_CTOS_USE_SRTP = `enum SSL_F_TLS_PARSE_CTOS_USE_SRTP = 465;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_PARSE_CTOS_USE_SRTP); }))) {
            mixin(enumMixinStr_SSL_F_TLS_PARSE_CTOS_USE_SRTP);
        }
    }




    static if(!is(typeof(SSL_F_TLS_PARSE_STOC_ALPN))) {
        private enum enumMixinStr_SSL_F_TLS_PARSE_STOC_ALPN = `enum SSL_F_TLS_PARSE_STOC_ALPN = 579;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_PARSE_STOC_ALPN); }))) {
            mixin(enumMixinStr_SSL_F_TLS_PARSE_STOC_ALPN);
        }
    }




    static if(!is(typeof(SSL_F_TLS_PARSE_STOC_COOKIE))) {
        private enum enumMixinStr_SSL_F_TLS_PARSE_STOC_COOKIE = `enum SSL_F_TLS_PARSE_STOC_COOKIE = 534;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_PARSE_STOC_COOKIE); }))) {
            mixin(enumMixinStr_SSL_F_TLS_PARSE_STOC_COOKIE);
        }
    }




    static if(!is(typeof(SSL_F_TLS_PARSE_STOC_EARLY_DATA))) {
        private enum enumMixinStr_SSL_F_TLS_PARSE_STOC_EARLY_DATA = `enum SSL_F_TLS_PARSE_STOC_EARLY_DATA = 538;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_PARSE_STOC_EARLY_DATA); }))) {
            mixin(enumMixinStr_SSL_F_TLS_PARSE_STOC_EARLY_DATA);
        }
    }




    static if(!is(typeof(SSL_F_TLS_PARSE_STOC_EARLY_DATA_INFO))) {
        private enum enumMixinStr_SSL_F_TLS_PARSE_STOC_EARLY_DATA_INFO = `enum SSL_F_TLS_PARSE_STOC_EARLY_DATA_INFO = 528;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_PARSE_STOC_EARLY_DATA_INFO); }))) {
            mixin(enumMixinStr_SSL_F_TLS_PARSE_STOC_EARLY_DATA_INFO);
        }
    }




    static if(!is(typeof(SSL_F_TLS_PARSE_STOC_EC_PT_FORMATS))) {
        private enum enumMixinStr_SSL_F_TLS_PARSE_STOC_EC_PT_FORMATS = `enum SSL_F_TLS_PARSE_STOC_EC_PT_FORMATS = 580;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_PARSE_STOC_EC_PT_FORMATS); }))) {
            mixin(enumMixinStr_SSL_F_TLS_PARSE_STOC_EC_PT_FORMATS);
        }
    }




    static if(!is(typeof(SSL_F_TLS_PARSE_STOC_KEY_SHARE))) {
        private enum enumMixinStr_SSL_F_TLS_PARSE_STOC_KEY_SHARE = `enum SSL_F_TLS_PARSE_STOC_KEY_SHARE = 445;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_PARSE_STOC_KEY_SHARE); }))) {
            mixin(enumMixinStr_SSL_F_TLS_PARSE_STOC_KEY_SHARE);
        }
    }




    static if(!is(typeof(SSL_F_TLS_PARSE_STOC_MAXFRAGMENTLEN))) {
        private enum enumMixinStr_SSL_F_TLS_PARSE_STOC_MAXFRAGMENTLEN = `enum SSL_F_TLS_PARSE_STOC_MAXFRAGMENTLEN = 581;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_PARSE_STOC_MAXFRAGMENTLEN); }))) {
            mixin(enumMixinStr_SSL_F_TLS_PARSE_STOC_MAXFRAGMENTLEN);
        }
    }




    static if(!is(typeof(SSL_F_TLS_PARSE_STOC_NPN))) {
        private enum enumMixinStr_SSL_F_TLS_PARSE_STOC_NPN = `enum SSL_F_TLS_PARSE_STOC_NPN = 582;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_PARSE_STOC_NPN); }))) {
            mixin(enumMixinStr_SSL_F_TLS_PARSE_STOC_NPN);
        }
    }




    static if(!is(typeof(SSL_F_TLS_PARSE_STOC_PSK))) {
        private enum enumMixinStr_SSL_F_TLS_PARSE_STOC_PSK = `enum SSL_F_TLS_PARSE_STOC_PSK = 502;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_PARSE_STOC_PSK); }))) {
            mixin(enumMixinStr_SSL_F_TLS_PARSE_STOC_PSK);
        }
    }




    static if(!is(typeof(SSL_F_TLS_PARSE_STOC_RENEGOTIATE))) {
        private enum enumMixinStr_SSL_F_TLS_PARSE_STOC_RENEGOTIATE = `enum SSL_F_TLS_PARSE_STOC_RENEGOTIATE = 448;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_PARSE_STOC_RENEGOTIATE); }))) {
            mixin(enumMixinStr_SSL_F_TLS_PARSE_STOC_RENEGOTIATE);
        }
    }




    static if(!is(typeof(SSL_F_TLS_PARSE_STOC_SCT))) {
        private enum enumMixinStr_SSL_F_TLS_PARSE_STOC_SCT = `enum SSL_F_TLS_PARSE_STOC_SCT = 564;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_PARSE_STOC_SCT); }))) {
            mixin(enumMixinStr_SSL_F_TLS_PARSE_STOC_SCT);
        }
    }




    static if(!is(typeof(SSL_F_TLS_PARSE_STOC_SERVER_NAME))) {
        private enum enumMixinStr_SSL_F_TLS_PARSE_STOC_SERVER_NAME = `enum SSL_F_TLS_PARSE_STOC_SERVER_NAME = 583;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_PARSE_STOC_SERVER_NAME); }))) {
            mixin(enumMixinStr_SSL_F_TLS_PARSE_STOC_SERVER_NAME);
        }
    }




    static if(!is(typeof(SSL_F_TLS_PARSE_STOC_SESSION_TICKET))) {
        private enum enumMixinStr_SSL_F_TLS_PARSE_STOC_SESSION_TICKET = `enum SSL_F_TLS_PARSE_STOC_SESSION_TICKET = 584;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_PARSE_STOC_SESSION_TICKET); }))) {
            mixin(enumMixinStr_SSL_F_TLS_PARSE_STOC_SESSION_TICKET);
        }
    }




    static if(!is(typeof(SSL_F_TLS_PARSE_STOC_STATUS_REQUEST))) {
        private enum enumMixinStr_SSL_F_TLS_PARSE_STOC_STATUS_REQUEST = `enum SSL_F_TLS_PARSE_STOC_STATUS_REQUEST = 585;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_PARSE_STOC_STATUS_REQUEST); }))) {
            mixin(enumMixinStr_SSL_F_TLS_PARSE_STOC_STATUS_REQUEST);
        }
    }




    static if(!is(typeof(SSL_F_TLS_PARSE_STOC_SUPPORTED_VERSIONS))) {
        private enum enumMixinStr_SSL_F_TLS_PARSE_STOC_SUPPORTED_VERSIONS = `enum SSL_F_TLS_PARSE_STOC_SUPPORTED_VERSIONS = 612;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_PARSE_STOC_SUPPORTED_VERSIONS); }))) {
            mixin(enumMixinStr_SSL_F_TLS_PARSE_STOC_SUPPORTED_VERSIONS);
        }
    }




    static if(!is(typeof(SSL_F_TLS_PARSE_STOC_USE_SRTP))) {
        private enum enumMixinStr_SSL_F_TLS_PARSE_STOC_USE_SRTP = `enum SSL_F_TLS_PARSE_STOC_USE_SRTP = 446;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_PARSE_STOC_USE_SRTP); }))) {
            mixin(enumMixinStr_SSL_F_TLS_PARSE_STOC_USE_SRTP);
        }
    }




    static if(!is(typeof(SSL_F_TLS_POST_PROCESS_CLIENT_HELLO))) {
        private enum enumMixinStr_SSL_F_TLS_POST_PROCESS_CLIENT_HELLO = `enum SSL_F_TLS_POST_PROCESS_CLIENT_HELLO = 378;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_POST_PROCESS_CLIENT_HELLO); }))) {
            mixin(enumMixinStr_SSL_F_TLS_POST_PROCESS_CLIENT_HELLO);
        }
    }




    static if(!is(typeof(SSL_F_TLS_POST_PROCESS_CLIENT_KEY_EXCHANGE))) {
        private enum enumMixinStr_SSL_F_TLS_POST_PROCESS_CLIENT_KEY_EXCHANGE = `enum SSL_F_TLS_POST_PROCESS_CLIENT_KEY_EXCHANGE = 384;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_POST_PROCESS_CLIENT_KEY_EXCHANGE); }))) {
            mixin(enumMixinStr_SSL_F_TLS_POST_PROCESS_CLIENT_KEY_EXCHANGE);
        }
    }




    static if(!is(typeof(SSL_F_TLS_PREPARE_CLIENT_CERTIFICATE))) {
        private enum enumMixinStr_SSL_F_TLS_PREPARE_CLIENT_CERTIFICATE = `enum SSL_F_TLS_PREPARE_CLIENT_CERTIFICATE = 360;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_PREPARE_CLIENT_CERTIFICATE); }))) {
            mixin(enumMixinStr_SSL_F_TLS_PREPARE_CLIENT_CERTIFICATE);
        }
    }




    static if(!is(typeof(SSL_F_TLS_PROCESS_AS_HELLO_RETRY_REQUEST))) {
        private enum enumMixinStr_SSL_F_TLS_PROCESS_AS_HELLO_RETRY_REQUEST = `enum SSL_F_TLS_PROCESS_AS_HELLO_RETRY_REQUEST = 610;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_PROCESS_AS_HELLO_RETRY_REQUEST); }))) {
            mixin(enumMixinStr_SSL_F_TLS_PROCESS_AS_HELLO_RETRY_REQUEST);
        }
    }




    static if(!is(typeof(SSL_F_TLS_PROCESS_CERTIFICATE_REQUEST))) {
        private enum enumMixinStr_SSL_F_TLS_PROCESS_CERTIFICATE_REQUEST = `enum SSL_F_TLS_PROCESS_CERTIFICATE_REQUEST = 361;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_PROCESS_CERTIFICATE_REQUEST); }))) {
            mixin(enumMixinStr_SSL_F_TLS_PROCESS_CERTIFICATE_REQUEST);
        }
    }




    static if(!is(typeof(SSL_F_TLS_PROCESS_CERT_STATUS))) {
        private enum enumMixinStr_SSL_F_TLS_PROCESS_CERT_STATUS = `enum SSL_F_TLS_PROCESS_CERT_STATUS = 362;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_PROCESS_CERT_STATUS); }))) {
            mixin(enumMixinStr_SSL_F_TLS_PROCESS_CERT_STATUS);
        }
    }




    static if(!is(typeof(SSL_F_TLS_PROCESS_CERT_STATUS_BODY))) {
        private enum enumMixinStr_SSL_F_TLS_PROCESS_CERT_STATUS_BODY = `enum SSL_F_TLS_PROCESS_CERT_STATUS_BODY = 495;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_PROCESS_CERT_STATUS_BODY); }))) {
            mixin(enumMixinStr_SSL_F_TLS_PROCESS_CERT_STATUS_BODY);
        }
    }




    static if(!is(typeof(SSL_F_TLS_PROCESS_CERT_VERIFY))) {
        private enum enumMixinStr_SSL_F_TLS_PROCESS_CERT_VERIFY = `enum SSL_F_TLS_PROCESS_CERT_VERIFY = 379;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_PROCESS_CERT_VERIFY); }))) {
            mixin(enumMixinStr_SSL_F_TLS_PROCESS_CERT_VERIFY);
        }
    }




    static if(!is(typeof(SSL_F_TLS_PROCESS_CHANGE_CIPHER_SPEC))) {
        private enum enumMixinStr_SSL_F_TLS_PROCESS_CHANGE_CIPHER_SPEC = `enum SSL_F_TLS_PROCESS_CHANGE_CIPHER_SPEC = 363;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_PROCESS_CHANGE_CIPHER_SPEC); }))) {
            mixin(enumMixinStr_SSL_F_TLS_PROCESS_CHANGE_CIPHER_SPEC);
        }
    }




    static if(!is(typeof(SSL_F_TLS_PROCESS_CKE_DHE))) {
        private enum enumMixinStr_SSL_F_TLS_PROCESS_CKE_DHE = `enum SSL_F_TLS_PROCESS_CKE_DHE = 411;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_PROCESS_CKE_DHE); }))) {
            mixin(enumMixinStr_SSL_F_TLS_PROCESS_CKE_DHE);
        }
    }




    static if(!is(typeof(SSL_F_TLS_PROCESS_CKE_ECDHE))) {
        private enum enumMixinStr_SSL_F_TLS_PROCESS_CKE_ECDHE = `enum SSL_F_TLS_PROCESS_CKE_ECDHE = 412;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_PROCESS_CKE_ECDHE); }))) {
            mixin(enumMixinStr_SSL_F_TLS_PROCESS_CKE_ECDHE);
        }
    }




    static if(!is(typeof(SSL_F_TLS_PROCESS_CKE_GOST))) {
        private enum enumMixinStr_SSL_F_TLS_PROCESS_CKE_GOST = `enum SSL_F_TLS_PROCESS_CKE_GOST = 413;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_PROCESS_CKE_GOST); }))) {
            mixin(enumMixinStr_SSL_F_TLS_PROCESS_CKE_GOST);
        }
    }




    static if(!is(typeof(SSL_F_TLS_PROCESS_CKE_PSK_PREAMBLE))) {
        private enum enumMixinStr_SSL_F_TLS_PROCESS_CKE_PSK_PREAMBLE = `enum SSL_F_TLS_PROCESS_CKE_PSK_PREAMBLE = 414;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_PROCESS_CKE_PSK_PREAMBLE); }))) {
            mixin(enumMixinStr_SSL_F_TLS_PROCESS_CKE_PSK_PREAMBLE);
        }
    }




    static if(!is(typeof(SSL_F_TLS_PROCESS_CKE_RSA))) {
        private enum enumMixinStr_SSL_F_TLS_PROCESS_CKE_RSA = `enum SSL_F_TLS_PROCESS_CKE_RSA = 415;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_PROCESS_CKE_RSA); }))) {
            mixin(enumMixinStr_SSL_F_TLS_PROCESS_CKE_RSA);
        }
    }




    static if(!is(typeof(SSL_F_TLS_PROCESS_CKE_SRP))) {
        private enum enumMixinStr_SSL_F_TLS_PROCESS_CKE_SRP = `enum SSL_F_TLS_PROCESS_CKE_SRP = 416;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_PROCESS_CKE_SRP); }))) {
            mixin(enumMixinStr_SSL_F_TLS_PROCESS_CKE_SRP);
        }
    }




    static if(!is(typeof(SSL_F_TLS_PROCESS_CLIENT_CERTIFICATE))) {
        private enum enumMixinStr_SSL_F_TLS_PROCESS_CLIENT_CERTIFICATE = `enum SSL_F_TLS_PROCESS_CLIENT_CERTIFICATE = 380;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_PROCESS_CLIENT_CERTIFICATE); }))) {
            mixin(enumMixinStr_SSL_F_TLS_PROCESS_CLIENT_CERTIFICATE);
        }
    }




    static if(!is(typeof(SSL_F_TLS_PROCESS_CLIENT_HELLO))) {
        private enum enumMixinStr_SSL_F_TLS_PROCESS_CLIENT_HELLO = `enum SSL_F_TLS_PROCESS_CLIENT_HELLO = 381;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_PROCESS_CLIENT_HELLO); }))) {
            mixin(enumMixinStr_SSL_F_TLS_PROCESS_CLIENT_HELLO);
        }
    }




    static if(!is(typeof(SSL_F_TLS_PROCESS_CLIENT_KEY_EXCHANGE))) {
        private enum enumMixinStr_SSL_F_TLS_PROCESS_CLIENT_KEY_EXCHANGE = `enum SSL_F_TLS_PROCESS_CLIENT_KEY_EXCHANGE = 382;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_PROCESS_CLIENT_KEY_EXCHANGE); }))) {
            mixin(enumMixinStr_SSL_F_TLS_PROCESS_CLIENT_KEY_EXCHANGE);
        }
    }




    static if(!is(typeof(SSL_F_TLS_PROCESS_ENCRYPTED_EXTENSIONS))) {
        private enum enumMixinStr_SSL_F_TLS_PROCESS_ENCRYPTED_EXTENSIONS = `enum SSL_F_TLS_PROCESS_ENCRYPTED_EXTENSIONS = 444;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_PROCESS_ENCRYPTED_EXTENSIONS); }))) {
            mixin(enumMixinStr_SSL_F_TLS_PROCESS_ENCRYPTED_EXTENSIONS);
        }
    }




    static if(!is(typeof(SSL_F_TLS_PROCESS_END_OF_EARLY_DATA))) {
        private enum enumMixinStr_SSL_F_TLS_PROCESS_END_OF_EARLY_DATA = `enum SSL_F_TLS_PROCESS_END_OF_EARLY_DATA = 537;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_PROCESS_END_OF_EARLY_DATA); }))) {
            mixin(enumMixinStr_SSL_F_TLS_PROCESS_END_OF_EARLY_DATA);
        }
    }




    static if(!is(typeof(SSL_F_TLS_PROCESS_FINISHED))) {
        private enum enumMixinStr_SSL_F_TLS_PROCESS_FINISHED = `enum SSL_F_TLS_PROCESS_FINISHED = 364;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_PROCESS_FINISHED); }))) {
            mixin(enumMixinStr_SSL_F_TLS_PROCESS_FINISHED);
        }
    }




    static if(!is(typeof(SSL_F_TLS_PROCESS_HELLO_REQ))) {
        private enum enumMixinStr_SSL_F_TLS_PROCESS_HELLO_REQ = `enum SSL_F_TLS_PROCESS_HELLO_REQ = 507;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_PROCESS_HELLO_REQ); }))) {
            mixin(enumMixinStr_SSL_F_TLS_PROCESS_HELLO_REQ);
        }
    }




    static if(!is(typeof(SSL_F_TLS_PROCESS_HELLO_RETRY_REQUEST))) {
        private enum enumMixinStr_SSL_F_TLS_PROCESS_HELLO_RETRY_REQUEST = `enum SSL_F_TLS_PROCESS_HELLO_RETRY_REQUEST = 511;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_PROCESS_HELLO_RETRY_REQUEST); }))) {
            mixin(enumMixinStr_SSL_F_TLS_PROCESS_HELLO_RETRY_REQUEST);
        }
    }




    static if(!is(typeof(SSL_F_TLS_PROCESS_INITIAL_SERVER_FLIGHT))) {
        private enum enumMixinStr_SSL_F_TLS_PROCESS_INITIAL_SERVER_FLIGHT = `enum SSL_F_TLS_PROCESS_INITIAL_SERVER_FLIGHT = 442;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_PROCESS_INITIAL_SERVER_FLIGHT); }))) {
            mixin(enumMixinStr_SSL_F_TLS_PROCESS_INITIAL_SERVER_FLIGHT);
        }
    }




    static if(!is(typeof(SSL_F_TLS_PROCESS_KEY_EXCHANGE))) {
        private enum enumMixinStr_SSL_F_TLS_PROCESS_KEY_EXCHANGE = `enum SSL_F_TLS_PROCESS_KEY_EXCHANGE = 365;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_PROCESS_KEY_EXCHANGE); }))) {
            mixin(enumMixinStr_SSL_F_TLS_PROCESS_KEY_EXCHANGE);
        }
    }




    static if(!is(typeof(SSL_F_TLS_PROCESS_KEY_UPDATE))) {
        private enum enumMixinStr_SSL_F_TLS_PROCESS_KEY_UPDATE = `enum SSL_F_TLS_PROCESS_KEY_UPDATE = 518;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_PROCESS_KEY_UPDATE); }))) {
            mixin(enumMixinStr_SSL_F_TLS_PROCESS_KEY_UPDATE);
        }
    }




    static if(!is(typeof(SSL_F_TLS_PROCESS_NEW_SESSION_TICKET))) {
        private enum enumMixinStr_SSL_F_TLS_PROCESS_NEW_SESSION_TICKET = `enum SSL_F_TLS_PROCESS_NEW_SESSION_TICKET = 366;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_PROCESS_NEW_SESSION_TICKET); }))) {
            mixin(enumMixinStr_SSL_F_TLS_PROCESS_NEW_SESSION_TICKET);
        }
    }




    static if(!is(typeof(SSL_F_TLS_PROCESS_NEXT_PROTO))) {
        private enum enumMixinStr_SSL_F_TLS_PROCESS_NEXT_PROTO = `enum SSL_F_TLS_PROCESS_NEXT_PROTO = 383;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_PROCESS_NEXT_PROTO); }))) {
            mixin(enumMixinStr_SSL_F_TLS_PROCESS_NEXT_PROTO);
        }
    }




    static if(!is(typeof(SSL_F_TLS_PROCESS_SERVER_CERTIFICATE))) {
        private enum enumMixinStr_SSL_F_TLS_PROCESS_SERVER_CERTIFICATE = `enum SSL_F_TLS_PROCESS_SERVER_CERTIFICATE = 367;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_PROCESS_SERVER_CERTIFICATE); }))) {
            mixin(enumMixinStr_SSL_F_TLS_PROCESS_SERVER_CERTIFICATE);
        }
    }




    static if(!is(typeof(SSL_F_TLS_PROCESS_SERVER_DONE))) {
        private enum enumMixinStr_SSL_F_TLS_PROCESS_SERVER_DONE = `enum SSL_F_TLS_PROCESS_SERVER_DONE = 368;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_PROCESS_SERVER_DONE); }))) {
            mixin(enumMixinStr_SSL_F_TLS_PROCESS_SERVER_DONE);
        }
    }




    static if(!is(typeof(SSL_F_TLS_PROCESS_SERVER_HELLO))) {
        private enum enumMixinStr_SSL_F_TLS_PROCESS_SERVER_HELLO = `enum SSL_F_TLS_PROCESS_SERVER_HELLO = 369;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_PROCESS_SERVER_HELLO); }))) {
            mixin(enumMixinStr_SSL_F_TLS_PROCESS_SERVER_HELLO);
        }
    }




    static if(!is(typeof(SSL_F_TLS_PROCESS_SKE_DHE))) {
        private enum enumMixinStr_SSL_F_TLS_PROCESS_SKE_DHE = `enum SSL_F_TLS_PROCESS_SKE_DHE = 419;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_PROCESS_SKE_DHE); }))) {
            mixin(enumMixinStr_SSL_F_TLS_PROCESS_SKE_DHE);
        }
    }




    static if(!is(typeof(SSL_F_TLS_PROCESS_SKE_ECDHE))) {
        private enum enumMixinStr_SSL_F_TLS_PROCESS_SKE_ECDHE = `enum SSL_F_TLS_PROCESS_SKE_ECDHE = 420;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_PROCESS_SKE_ECDHE); }))) {
            mixin(enumMixinStr_SSL_F_TLS_PROCESS_SKE_ECDHE);
        }
    }




    static if(!is(typeof(SSL_F_TLS_PROCESS_SKE_PSK_PREAMBLE))) {
        private enum enumMixinStr_SSL_F_TLS_PROCESS_SKE_PSK_PREAMBLE = `enum SSL_F_TLS_PROCESS_SKE_PSK_PREAMBLE = 421;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_PROCESS_SKE_PSK_PREAMBLE); }))) {
            mixin(enumMixinStr_SSL_F_TLS_PROCESS_SKE_PSK_PREAMBLE);
        }
    }




    static if(!is(typeof(SSL_F_TLS_PROCESS_SKE_SRP))) {
        private enum enumMixinStr_SSL_F_TLS_PROCESS_SKE_SRP = `enum SSL_F_TLS_PROCESS_SKE_SRP = 422;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_PROCESS_SKE_SRP); }))) {
            mixin(enumMixinStr_SSL_F_TLS_PROCESS_SKE_SRP);
        }
    }




    static if(!is(typeof(SSL_F_TLS_PSK_DO_BINDER))) {
        private enum enumMixinStr_SSL_F_TLS_PSK_DO_BINDER = `enum SSL_F_TLS_PSK_DO_BINDER = 506;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_PSK_DO_BINDER); }))) {
            mixin(enumMixinStr_SSL_F_TLS_PSK_DO_BINDER);
        }
    }




    static if(!is(typeof(SSL_F_TLS_SCAN_CLIENTHELLO_TLSEXT))) {
        private enum enumMixinStr_SSL_F_TLS_SCAN_CLIENTHELLO_TLSEXT = `enum SSL_F_TLS_SCAN_CLIENTHELLO_TLSEXT = 450;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_SCAN_CLIENTHELLO_TLSEXT); }))) {
            mixin(enumMixinStr_SSL_F_TLS_SCAN_CLIENTHELLO_TLSEXT);
        }
    }




    static if(!is(typeof(SSL_F_TLS_SETUP_HANDSHAKE))) {
        private enum enumMixinStr_SSL_F_TLS_SETUP_HANDSHAKE = `enum SSL_F_TLS_SETUP_HANDSHAKE = 508;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_TLS_SETUP_HANDSHAKE); }))) {
            mixin(enumMixinStr_SSL_F_TLS_SETUP_HANDSHAKE);
        }
    }




    static if(!is(typeof(SSL_F_USE_CERTIFICATE_CHAIN_FILE))) {
        private enum enumMixinStr_SSL_F_USE_CERTIFICATE_CHAIN_FILE = `enum SSL_F_USE_CERTIFICATE_CHAIN_FILE = 220;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_USE_CERTIFICATE_CHAIN_FILE); }))) {
            mixin(enumMixinStr_SSL_F_USE_CERTIFICATE_CHAIN_FILE);
        }
    }




    static if(!is(typeof(SSL_F_WPACKET_INTERN_INIT_LEN))) {
        private enum enumMixinStr_SSL_F_WPACKET_INTERN_INIT_LEN = `enum SSL_F_WPACKET_INTERN_INIT_LEN = 633;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_WPACKET_INTERN_INIT_LEN); }))) {
            mixin(enumMixinStr_SSL_F_WPACKET_INTERN_INIT_LEN);
        }
    }




    static if(!is(typeof(SSL_F_WPACKET_START_SUB_PACKET_LEN__))) {
        private enum enumMixinStr_SSL_F_WPACKET_START_SUB_PACKET_LEN__ = `enum SSL_F_WPACKET_START_SUB_PACKET_LEN__ = 634;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_WPACKET_START_SUB_PACKET_LEN__); }))) {
            mixin(enumMixinStr_SSL_F_WPACKET_START_SUB_PACKET_LEN__);
        }
    }




    static if(!is(typeof(SSL_F_WRITE_STATE_MACHINE))) {
        private enum enumMixinStr_SSL_F_WRITE_STATE_MACHINE = `enum SSL_F_WRITE_STATE_MACHINE = 586;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_F_WRITE_STATE_MACHINE); }))) {
            mixin(enumMixinStr_SSL_F_WRITE_STATE_MACHINE);
        }
    }




    static if(!is(typeof(SSL_R_APPLICATION_DATA_AFTER_CLOSE_NOTIFY))) {
        private enum enumMixinStr_SSL_R_APPLICATION_DATA_AFTER_CLOSE_NOTIFY = `enum SSL_R_APPLICATION_DATA_AFTER_CLOSE_NOTIFY = 291;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_APPLICATION_DATA_AFTER_CLOSE_NOTIFY); }))) {
            mixin(enumMixinStr_SSL_R_APPLICATION_DATA_AFTER_CLOSE_NOTIFY);
        }
    }




    static if(!is(typeof(SSL_R_APP_DATA_IN_HANDSHAKE))) {
        private enum enumMixinStr_SSL_R_APP_DATA_IN_HANDSHAKE = `enum SSL_R_APP_DATA_IN_HANDSHAKE = 100;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_APP_DATA_IN_HANDSHAKE); }))) {
            mixin(enumMixinStr_SSL_R_APP_DATA_IN_HANDSHAKE);
        }
    }




    static if(!is(typeof(SSL_R_ATTEMPT_TO_REUSE_SESSION_IN_DIFFERENT_CONTEXT))) {
        private enum enumMixinStr_SSL_R_ATTEMPT_TO_REUSE_SESSION_IN_DIFFERENT_CONTEXT = `enum SSL_R_ATTEMPT_TO_REUSE_SESSION_IN_DIFFERENT_CONTEXT = 272;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_ATTEMPT_TO_REUSE_SESSION_IN_DIFFERENT_CONTEXT); }))) {
            mixin(enumMixinStr_SSL_R_ATTEMPT_TO_REUSE_SESSION_IN_DIFFERENT_CONTEXT);
        }
    }




    static if(!is(typeof(SSL_R_AT_LEAST_TLS_1_0_NEEDED_IN_FIPS_MODE))) {
        private enum enumMixinStr_SSL_R_AT_LEAST_TLS_1_0_NEEDED_IN_FIPS_MODE = `enum SSL_R_AT_LEAST_TLS_1_0_NEEDED_IN_FIPS_MODE = 143;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_AT_LEAST_TLS_1_0_NEEDED_IN_FIPS_MODE); }))) {
            mixin(enumMixinStr_SSL_R_AT_LEAST_TLS_1_0_NEEDED_IN_FIPS_MODE);
        }
    }




    static if(!is(typeof(SSL_R_AT_LEAST_TLS_1_2_NEEDED_IN_SUITEB_MODE))) {
        private enum enumMixinStr_SSL_R_AT_LEAST_TLS_1_2_NEEDED_IN_SUITEB_MODE = `enum SSL_R_AT_LEAST_TLS_1_2_NEEDED_IN_SUITEB_MODE = 158;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_AT_LEAST_TLS_1_2_NEEDED_IN_SUITEB_MODE); }))) {
            mixin(enumMixinStr_SSL_R_AT_LEAST_TLS_1_2_NEEDED_IN_SUITEB_MODE);
        }
    }




    static if(!is(typeof(SSL_R_BAD_CHANGE_CIPHER_SPEC))) {
        private enum enumMixinStr_SSL_R_BAD_CHANGE_CIPHER_SPEC = `enum SSL_R_BAD_CHANGE_CIPHER_SPEC = 103;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_BAD_CHANGE_CIPHER_SPEC); }))) {
            mixin(enumMixinStr_SSL_R_BAD_CHANGE_CIPHER_SPEC);
        }
    }




    static if(!is(typeof(SSL_R_BAD_CIPHER))) {
        private enum enumMixinStr_SSL_R_BAD_CIPHER = `enum SSL_R_BAD_CIPHER = 186;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_BAD_CIPHER); }))) {
            mixin(enumMixinStr_SSL_R_BAD_CIPHER);
        }
    }




    static if(!is(typeof(SSL_R_BAD_DATA))) {
        private enum enumMixinStr_SSL_R_BAD_DATA = `enum SSL_R_BAD_DATA = 390;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_BAD_DATA); }))) {
            mixin(enumMixinStr_SSL_R_BAD_DATA);
        }
    }




    static if(!is(typeof(SSL_R_BAD_DATA_RETURNED_BY_CALLBACK))) {
        private enum enumMixinStr_SSL_R_BAD_DATA_RETURNED_BY_CALLBACK = `enum SSL_R_BAD_DATA_RETURNED_BY_CALLBACK = 106;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_BAD_DATA_RETURNED_BY_CALLBACK); }))) {
            mixin(enumMixinStr_SSL_R_BAD_DATA_RETURNED_BY_CALLBACK);
        }
    }




    static if(!is(typeof(SSL_R_BAD_DECOMPRESSION))) {
        private enum enumMixinStr_SSL_R_BAD_DECOMPRESSION = `enum SSL_R_BAD_DECOMPRESSION = 107;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_BAD_DECOMPRESSION); }))) {
            mixin(enumMixinStr_SSL_R_BAD_DECOMPRESSION);
        }
    }




    static if(!is(typeof(SSL_R_BAD_DH_VALUE))) {
        private enum enumMixinStr_SSL_R_BAD_DH_VALUE = `enum SSL_R_BAD_DH_VALUE = 102;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_BAD_DH_VALUE); }))) {
            mixin(enumMixinStr_SSL_R_BAD_DH_VALUE);
        }
    }




    static if(!is(typeof(SSL_R_BAD_DIGEST_LENGTH))) {
        private enum enumMixinStr_SSL_R_BAD_DIGEST_LENGTH = `enum SSL_R_BAD_DIGEST_LENGTH = 111;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_BAD_DIGEST_LENGTH); }))) {
            mixin(enumMixinStr_SSL_R_BAD_DIGEST_LENGTH);
        }
    }




    static if(!is(typeof(SSL_R_BAD_EARLY_DATA))) {
        private enum enumMixinStr_SSL_R_BAD_EARLY_DATA = `enum SSL_R_BAD_EARLY_DATA = 233;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_BAD_EARLY_DATA); }))) {
            mixin(enumMixinStr_SSL_R_BAD_EARLY_DATA);
        }
    }




    static if(!is(typeof(SSL_R_BAD_ECC_CERT))) {
        private enum enumMixinStr_SSL_R_BAD_ECC_CERT = `enum SSL_R_BAD_ECC_CERT = 304;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_BAD_ECC_CERT); }))) {
            mixin(enumMixinStr_SSL_R_BAD_ECC_CERT);
        }
    }




    static if(!is(typeof(SSL_R_BAD_ECPOINT))) {
        private enum enumMixinStr_SSL_R_BAD_ECPOINT = `enum SSL_R_BAD_ECPOINT = 306;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_BAD_ECPOINT); }))) {
            mixin(enumMixinStr_SSL_R_BAD_ECPOINT);
        }
    }




    static if(!is(typeof(SSL_R_BAD_EXTENSION))) {
        private enum enumMixinStr_SSL_R_BAD_EXTENSION = `enum SSL_R_BAD_EXTENSION = 110;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_BAD_EXTENSION); }))) {
            mixin(enumMixinStr_SSL_R_BAD_EXTENSION);
        }
    }




    static if(!is(typeof(SSL_R_BAD_HANDSHAKE_LENGTH))) {
        private enum enumMixinStr_SSL_R_BAD_HANDSHAKE_LENGTH = `enum SSL_R_BAD_HANDSHAKE_LENGTH = 332;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_BAD_HANDSHAKE_LENGTH); }))) {
            mixin(enumMixinStr_SSL_R_BAD_HANDSHAKE_LENGTH);
        }
    }




    static if(!is(typeof(SSL_R_BAD_HANDSHAKE_STATE))) {
        private enum enumMixinStr_SSL_R_BAD_HANDSHAKE_STATE = `enum SSL_R_BAD_HANDSHAKE_STATE = 236;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_BAD_HANDSHAKE_STATE); }))) {
            mixin(enumMixinStr_SSL_R_BAD_HANDSHAKE_STATE);
        }
    }




    static if(!is(typeof(SSL_R_BAD_HELLO_REQUEST))) {
        private enum enumMixinStr_SSL_R_BAD_HELLO_REQUEST = `enum SSL_R_BAD_HELLO_REQUEST = 105;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_BAD_HELLO_REQUEST); }))) {
            mixin(enumMixinStr_SSL_R_BAD_HELLO_REQUEST);
        }
    }




    static if(!is(typeof(SSL_R_BAD_HRR_VERSION))) {
        private enum enumMixinStr_SSL_R_BAD_HRR_VERSION = `enum SSL_R_BAD_HRR_VERSION = 263;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_BAD_HRR_VERSION); }))) {
            mixin(enumMixinStr_SSL_R_BAD_HRR_VERSION);
        }
    }




    static if(!is(typeof(SSL_R_BAD_KEY_SHARE))) {
        private enum enumMixinStr_SSL_R_BAD_KEY_SHARE = `enum SSL_R_BAD_KEY_SHARE = 108;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_BAD_KEY_SHARE); }))) {
            mixin(enumMixinStr_SSL_R_BAD_KEY_SHARE);
        }
    }




    static if(!is(typeof(SSL_R_BAD_KEY_UPDATE))) {
        private enum enumMixinStr_SSL_R_BAD_KEY_UPDATE = `enum SSL_R_BAD_KEY_UPDATE = 122;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_BAD_KEY_UPDATE); }))) {
            mixin(enumMixinStr_SSL_R_BAD_KEY_UPDATE);
        }
    }




    static if(!is(typeof(SSL_R_BAD_LEGACY_VERSION))) {
        private enum enumMixinStr_SSL_R_BAD_LEGACY_VERSION = `enum SSL_R_BAD_LEGACY_VERSION = 292;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_BAD_LEGACY_VERSION); }))) {
            mixin(enumMixinStr_SSL_R_BAD_LEGACY_VERSION);
        }
    }




    static if(!is(typeof(SSL_R_BAD_LENGTH))) {
        private enum enumMixinStr_SSL_R_BAD_LENGTH = `enum SSL_R_BAD_LENGTH = 271;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_BAD_LENGTH); }))) {
            mixin(enumMixinStr_SSL_R_BAD_LENGTH);
        }
    }




    static if(!is(typeof(SSL_R_BAD_PACKET))) {
        private enum enumMixinStr_SSL_R_BAD_PACKET = `enum SSL_R_BAD_PACKET = 240;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_BAD_PACKET); }))) {
            mixin(enumMixinStr_SSL_R_BAD_PACKET);
        }
    }




    static if(!is(typeof(SSL_R_BAD_PACKET_LENGTH))) {
        private enum enumMixinStr_SSL_R_BAD_PACKET_LENGTH = `enum SSL_R_BAD_PACKET_LENGTH = 115;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_BAD_PACKET_LENGTH); }))) {
            mixin(enumMixinStr_SSL_R_BAD_PACKET_LENGTH);
        }
    }




    static if(!is(typeof(SSL_R_BAD_PROTOCOL_VERSION_NUMBER))) {
        private enum enumMixinStr_SSL_R_BAD_PROTOCOL_VERSION_NUMBER = `enum SSL_R_BAD_PROTOCOL_VERSION_NUMBER = 116;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_BAD_PROTOCOL_VERSION_NUMBER); }))) {
            mixin(enumMixinStr_SSL_R_BAD_PROTOCOL_VERSION_NUMBER);
        }
    }




    static if(!is(typeof(SSL_R_BAD_PSK))) {
        private enum enumMixinStr_SSL_R_BAD_PSK = `enum SSL_R_BAD_PSK = 219;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_BAD_PSK); }))) {
            mixin(enumMixinStr_SSL_R_BAD_PSK);
        }
    }




    static if(!is(typeof(SSL_R_BAD_PSK_IDENTITY))) {
        private enum enumMixinStr_SSL_R_BAD_PSK_IDENTITY = `enum SSL_R_BAD_PSK_IDENTITY = 114;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_BAD_PSK_IDENTITY); }))) {
            mixin(enumMixinStr_SSL_R_BAD_PSK_IDENTITY);
        }
    }




    static if(!is(typeof(SSL_R_BAD_RECORD_TYPE))) {
        private enum enumMixinStr_SSL_R_BAD_RECORD_TYPE = `enum SSL_R_BAD_RECORD_TYPE = 443;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_BAD_RECORD_TYPE); }))) {
            mixin(enumMixinStr_SSL_R_BAD_RECORD_TYPE);
        }
    }




    static if(!is(typeof(SSL_R_BAD_RSA_ENCRYPT))) {
        private enum enumMixinStr_SSL_R_BAD_RSA_ENCRYPT = `enum SSL_R_BAD_RSA_ENCRYPT = 119;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_BAD_RSA_ENCRYPT); }))) {
            mixin(enumMixinStr_SSL_R_BAD_RSA_ENCRYPT);
        }
    }




    static if(!is(typeof(SSL_R_BAD_SIGNATURE))) {
        private enum enumMixinStr_SSL_R_BAD_SIGNATURE = `enum SSL_R_BAD_SIGNATURE = 123;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_BAD_SIGNATURE); }))) {
            mixin(enumMixinStr_SSL_R_BAD_SIGNATURE);
        }
    }




    static if(!is(typeof(SSL_R_BAD_SRP_A_LENGTH))) {
        private enum enumMixinStr_SSL_R_BAD_SRP_A_LENGTH = `enum SSL_R_BAD_SRP_A_LENGTH = 347;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_BAD_SRP_A_LENGTH); }))) {
            mixin(enumMixinStr_SSL_R_BAD_SRP_A_LENGTH);
        }
    }




    static if(!is(typeof(SSL_R_BAD_SRP_PARAMETERS))) {
        private enum enumMixinStr_SSL_R_BAD_SRP_PARAMETERS = `enum SSL_R_BAD_SRP_PARAMETERS = 371;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_BAD_SRP_PARAMETERS); }))) {
            mixin(enumMixinStr_SSL_R_BAD_SRP_PARAMETERS);
        }
    }




    static if(!is(typeof(SSL_R_BAD_SRTP_MKI_VALUE))) {
        private enum enumMixinStr_SSL_R_BAD_SRTP_MKI_VALUE = `enum SSL_R_BAD_SRTP_MKI_VALUE = 352;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_BAD_SRTP_MKI_VALUE); }))) {
            mixin(enumMixinStr_SSL_R_BAD_SRTP_MKI_VALUE);
        }
    }




    static if(!is(typeof(SSL_R_BAD_SRTP_PROTECTION_PROFILE_LIST))) {
        private enum enumMixinStr_SSL_R_BAD_SRTP_PROTECTION_PROFILE_LIST = `enum SSL_R_BAD_SRTP_PROTECTION_PROFILE_LIST = 353;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_BAD_SRTP_PROTECTION_PROFILE_LIST); }))) {
            mixin(enumMixinStr_SSL_R_BAD_SRTP_PROTECTION_PROFILE_LIST);
        }
    }




    static if(!is(typeof(SSL_R_BAD_SSL_FILETYPE))) {
        private enum enumMixinStr_SSL_R_BAD_SSL_FILETYPE = `enum SSL_R_BAD_SSL_FILETYPE = 124;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_BAD_SSL_FILETYPE); }))) {
            mixin(enumMixinStr_SSL_R_BAD_SSL_FILETYPE);
        }
    }




    static if(!is(typeof(SSL_R_BAD_VALUE))) {
        private enum enumMixinStr_SSL_R_BAD_VALUE = `enum SSL_R_BAD_VALUE = 384;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_BAD_VALUE); }))) {
            mixin(enumMixinStr_SSL_R_BAD_VALUE);
        }
    }




    static if(!is(typeof(SSL_R_BAD_WRITE_RETRY))) {
        private enum enumMixinStr_SSL_R_BAD_WRITE_RETRY = `enum SSL_R_BAD_WRITE_RETRY = 127;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_BAD_WRITE_RETRY); }))) {
            mixin(enumMixinStr_SSL_R_BAD_WRITE_RETRY);
        }
    }




    static if(!is(typeof(SSL_R_BINDER_DOES_NOT_VERIFY))) {
        private enum enumMixinStr_SSL_R_BINDER_DOES_NOT_VERIFY = `enum SSL_R_BINDER_DOES_NOT_VERIFY = 253;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_BINDER_DOES_NOT_VERIFY); }))) {
            mixin(enumMixinStr_SSL_R_BINDER_DOES_NOT_VERIFY);
        }
    }




    static if(!is(typeof(SSL_R_BIO_NOT_SET))) {
        private enum enumMixinStr_SSL_R_BIO_NOT_SET = `enum SSL_R_BIO_NOT_SET = 128;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_BIO_NOT_SET); }))) {
            mixin(enumMixinStr_SSL_R_BIO_NOT_SET);
        }
    }




    static if(!is(typeof(SSL_R_BLOCK_CIPHER_PAD_IS_WRONG))) {
        private enum enumMixinStr_SSL_R_BLOCK_CIPHER_PAD_IS_WRONG = `enum SSL_R_BLOCK_CIPHER_PAD_IS_WRONG = 129;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_BLOCK_CIPHER_PAD_IS_WRONG); }))) {
            mixin(enumMixinStr_SSL_R_BLOCK_CIPHER_PAD_IS_WRONG);
        }
    }




    static if(!is(typeof(SSL_R_BN_LIB))) {
        private enum enumMixinStr_SSL_R_BN_LIB = `enum SSL_R_BN_LIB = 130;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_BN_LIB); }))) {
            mixin(enumMixinStr_SSL_R_BN_LIB);
        }
    }




    static if(!is(typeof(SSL_R_CALLBACK_FAILED))) {
        private enum enumMixinStr_SSL_R_CALLBACK_FAILED = `enum SSL_R_CALLBACK_FAILED = 234;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_CALLBACK_FAILED); }))) {
            mixin(enumMixinStr_SSL_R_CALLBACK_FAILED);
        }
    }




    static if(!is(typeof(SSL_R_CANNOT_CHANGE_CIPHER))) {
        private enum enumMixinStr_SSL_R_CANNOT_CHANGE_CIPHER = `enum SSL_R_CANNOT_CHANGE_CIPHER = 109;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_CANNOT_CHANGE_CIPHER); }))) {
            mixin(enumMixinStr_SSL_R_CANNOT_CHANGE_CIPHER);
        }
    }




    static if(!is(typeof(SSL_R_CA_DN_LENGTH_MISMATCH))) {
        private enum enumMixinStr_SSL_R_CA_DN_LENGTH_MISMATCH = `enum SSL_R_CA_DN_LENGTH_MISMATCH = 131;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_CA_DN_LENGTH_MISMATCH); }))) {
            mixin(enumMixinStr_SSL_R_CA_DN_LENGTH_MISMATCH);
        }
    }




    static if(!is(typeof(SSL_R_CA_KEY_TOO_SMALL))) {
        private enum enumMixinStr_SSL_R_CA_KEY_TOO_SMALL = `enum SSL_R_CA_KEY_TOO_SMALL = 397;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_CA_KEY_TOO_SMALL); }))) {
            mixin(enumMixinStr_SSL_R_CA_KEY_TOO_SMALL);
        }
    }




    static if(!is(typeof(SSL_R_CA_MD_TOO_WEAK))) {
        private enum enumMixinStr_SSL_R_CA_MD_TOO_WEAK = `enum SSL_R_CA_MD_TOO_WEAK = 398;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_CA_MD_TOO_WEAK); }))) {
            mixin(enumMixinStr_SSL_R_CA_MD_TOO_WEAK);
        }
    }




    static if(!is(typeof(SSL_R_CCS_RECEIVED_EARLY))) {
        private enum enumMixinStr_SSL_R_CCS_RECEIVED_EARLY = `enum SSL_R_CCS_RECEIVED_EARLY = 133;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_CCS_RECEIVED_EARLY); }))) {
            mixin(enumMixinStr_SSL_R_CCS_RECEIVED_EARLY);
        }
    }




    static if(!is(typeof(SSL_R_CERTIFICATE_VERIFY_FAILED))) {
        private enum enumMixinStr_SSL_R_CERTIFICATE_VERIFY_FAILED = `enum SSL_R_CERTIFICATE_VERIFY_FAILED = 134;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_CERTIFICATE_VERIFY_FAILED); }))) {
            mixin(enumMixinStr_SSL_R_CERTIFICATE_VERIFY_FAILED);
        }
    }




    static if(!is(typeof(SSL_R_CERT_CB_ERROR))) {
        private enum enumMixinStr_SSL_R_CERT_CB_ERROR = `enum SSL_R_CERT_CB_ERROR = 377;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_CERT_CB_ERROR); }))) {
            mixin(enumMixinStr_SSL_R_CERT_CB_ERROR);
        }
    }




    static if(!is(typeof(SSL_R_CERT_LENGTH_MISMATCH))) {
        private enum enumMixinStr_SSL_R_CERT_LENGTH_MISMATCH = `enum SSL_R_CERT_LENGTH_MISMATCH = 135;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_CERT_LENGTH_MISMATCH); }))) {
            mixin(enumMixinStr_SSL_R_CERT_LENGTH_MISMATCH);
        }
    }




    static if(!is(typeof(SSL_R_CIPHERSUITE_DIGEST_HAS_CHANGED))) {
        private enum enumMixinStr_SSL_R_CIPHERSUITE_DIGEST_HAS_CHANGED = `enum SSL_R_CIPHERSUITE_DIGEST_HAS_CHANGED = 218;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_CIPHERSUITE_DIGEST_HAS_CHANGED); }))) {
            mixin(enumMixinStr_SSL_R_CIPHERSUITE_DIGEST_HAS_CHANGED);
        }
    }




    static if(!is(typeof(SSL_R_CIPHER_CODE_WRONG_LENGTH))) {
        private enum enumMixinStr_SSL_R_CIPHER_CODE_WRONG_LENGTH = `enum SSL_R_CIPHER_CODE_WRONG_LENGTH = 137;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_CIPHER_CODE_WRONG_LENGTH); }))) {
            mixin(enumMixinStr_SSL_R_CIPHER_CODE_WRONG_LENGTH);
        }
    }




    static if(!is(typeof(SSL_R_CIPHER_OR_HASH_UNAVAILABLE))) {
        private enum enumMixinStr_SSL_R_CIPHER_OR_HASH_UNAVAILABLE = `enum SSL_R_CIPHER_OR_HASH_UNAVAILABLE = 138;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_CIPHER_OR_HASH_UNAVAILABLE); }))) {
            mixin(enumMixinStr_SSL_R_CIPHER_OR_HASH_UNAVAILABLE);
        }
    }




    static if(!is(typeof(SSL_R_CLIENTHELLO_TLSEXT))) {
        private enum enumMixinStr_SSL_R_CLIENTHELLO_TLSEXT = `enum SSL_R_CLIENTHELLO_TLSEXT = 226;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_CLIENTHELLO_TLSEXT); }))) {
            mixin(enumMixinStr_SSL_R_CLIENTHELLO_TLSEXT);
        }
    }




    static if(!is(typeof(SSL_R_COMPRESSED_LENGTH_TOO_LONG))) {
        private enum enumMixinStr_SSL_R_COMPRESSED_LENGTH_TOO_LONG = `enum SSL_R_COMPRESSED_LENGTH_TOO_LONG = 140;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_COMPRESSED_LENGTH_TOO_LONG); }))) {
            mixin(enumMixinStr_SSL_R_COMPRESSED_LENGTH_TOO_LONG);
        }
    }




    static if(!is(typeof(SSL_R_COMPRESSION_DISABLED))) {
        private enum enumMixinStr_SSL_R_COMPRESSION_DISABLED = `enum SSL_R_COMPRESSION_DISABLED = 343;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_COMPRESSION_DISABLED); }))) {
            mixin(enumMixinStr_SSL_R_COMPRESSION_DISABLED);
        }
    }




    static if(!is(typeof(SSL_R_COMPRESSION_FAILURE))) {
        private enum enumMixinStr_SSL_R_COMPRESSION_FAILURE = `enum SSL_R_COMPRESSION_FAILURE = 141;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_COMPRESSION_FAILURE); }))) {
            mixin(enumMixinStr_SSL_R_COMPRESSION_FAILURE);
        }
    }




    static if(!is(typeof(SSL_R_COMPRESSION_ID_NOT_WITHIN_PRIVATE_RANGE))) {
        private enum enumMixinStr_SSL_R_COMPRESSION_ID_NOT_WITHIN_PRIVATE_RANGE = `enum SSL_R_COMPRESSION_ID_NOT_WITHIN_PRIVATE_RANGE = 307;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_COMPRESSION_ID_NOT_WITHIN_PRIVATE_RANGE); }))) {
            mixin(enumMixinStr_SSL_R_COMPRESSION_ID_NOT_WITHIN_PRIVATE_RANGE);
        }
    }




    static if(!is(typeof(SSL_R_COMPRESSION_LIBRARY_ERROR))) {
        private enum enumMixinStr_SSL_R_COMPRESSION_LIBRARY_ERROR = `enum SSL_R_COMPRESSION_LIBRARY_ERROR = 142;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_COMPRESSION_LIBRARY_ERROR); }))) {
            mixin(enumMixinStr_SSL_R_COMPRESSION_LIBRARY_ERROR);
        }
    }




    static if(!is(typeof(SSL_R_CONNECTION_TYPE_NOT_SET))) {
        private enum enumMixinStr_SSL_R_CONNECTION_TYPE_NOT_SET = `enum SSL_R_CONNECTION_TYPE_NOT_SET = 144;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_CONNECTION_TYPE_NOT_SET); }))) {
            mixin(enumMixinStr_SSL_R_CONNECTION_TYPE_NOT_SET);
        }
    }




    static if(!is(typeof(SSL_R_CONTEXT_NOT_DANE_ENABLED))) {
        private enum enumMixinStr_SSL_R_CONTEXT_NOT_DANE_ENABLED = `enum SSL_R_CONTEXT_NOT_DANE_ENABLED = 167;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_CONTEXT_NOT_DANE_ENABLED); }))) {
            mixin(enumMixinStr_SSL_R_CONTEXT_NOT_DANE_ENABLED);
        }
    }




    static if(!is(typeof(SSL_R_COOKIE_GEN_CALLBACK_FAILURE))) {
        private enum enumMixinStr_SSL_R_COOKIE_GEN_CALLBACK_FAILURE = `enum SSL_R_COOKIE_GEN_CALLBACK_FAILURE = 400;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_COOKIE_GEN_CALLBACK_FAILURE); }))) {
            mixin(enumMixinStr_SSL_R_COOKIE_GEN_CALLBACK_FAILURE);
        }
    }




    static if(!is(typeof(SSL_R_COOKIE_MISMATCH))) {
        private enum enumMixinStr_SSL_R_COOKIE_MISMATCH = `enum SSL_R_COOKIE_MISMATCH = 308;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_COOKIE_MISMATCH); }))) {
            mixin(enumMixinStr_SSL_R_COOKIE_MISMATCH);
        }
    }




    static if(!is(typeof(SSL_R_CUSTOM_EXT_HANDLER_ALREADY_INSTALLED))) {
        private enum enumMixinStr_SSL_R_CUSTOM_EXT_HANDLER_ALREADY_INSTALLED = `enum SSL_R_CUSTOM_EXT_HANDLER_ALREADY_INSTALLED = 206;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_CUSTOM_EXT_HANDLER_ALREADY_INSTALLED); }))) {
            mixin(enumMixinStr_SSL_R_CUSTOM_EXT_HANDLER_ALREADY_INSTALLED);
        }
    }




    static if(!is(typeof(SSL_R_DANE_ALREADY_ENABLED))) {
        private enum enumMixinStr_SSL_R_DANE_ALREADY_ENABLED = `enum SSL_R_DANE_ALREADY_ENABLED = 172;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_DANE_ALREADY_ENABLED); }))) {
            mixin(enumMixinStr_SSL_R_DANE_ALREADY_ENABLED);
        }
    }




    static if(!is(typeof(SSL_R_DANE_CANNOT_OVERRIDE_MTYPE_FULL))) {
        private enum enumMixinStr_SSL_R_DANE_CANNOT_OVERRIDE_MTYPE_FULL = `enum SSL_R_DANE_CANNOT_OVERRIDE_MTYPE_FULL = 173;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_DANE_CANNOT_OVERRIDE_MTYPE_FULL); }))) {
            mixin(enumMixinStr_SSL_R_DANE_CANNOT_OVERRIDE_MTYPE_FULL);
        }
    }




    static if(!is(typeof(SSL_R_DANE_NOT_ENABLED))) {
        private enum enumMixinStr_SSL_R_DANE_NOT_ENABLED = `enum SSL_R_DANE_NOT_ENABLED = 175;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_DANE_NOT_ENABLED); }))) {
            mixin(enumMixinStr_SSL_R_DANE_NOT_ENABLED);
        }
    }




    static if(!is(typeof(SSL_R_DANE_TLSA_BAD_CERTIFICATE))) {
        private enum enumMixinStr_SSL_R_DANE_TLSA_BAD_CERTIFICATE = `enum SSL_R_DANE_TLSA_BAD_CERTIFICATE = 180;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_DANE_TLSA_BAD_CERTIFICATE); }))) {
            mixin(enumMixinStr_SSL_R_DANE_TLSA_BAD_CERTIFICATE);
        }
    }




    static if(!is(typeof(SSL_R_DANE_TLSA_BAD_CERTIFICATE_USAGE))) {
        private enum enumMixinStr_SSL_R_DANE_TLSA_BAD_CERTIFICATE_USAGE = `enum SSL_R_DANE_TLSA_BAD_CERTIFICATE_USAGE = 184;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_DANE_TLSA_BAD_CERTIFICATE_USAGE); }))) {
            mixin(enumMixinStr_SSL_R_DANE_TLSA_BAD_CERTIFICATE_USAGE);
        }
    }




    static if(!is(typeof(SSL_R_DANE_TLSA_BAD_DATA_LENGTH))) {
        private enum enumMixinStr_SSL_R_DANE_TLSA_BAD_DATA_LENGTH = `enum SSL_R_DANE_TLSA_BAD_DATA_LENGTH = 189;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_DANE_TLSA_BAD_DATA_LENGTH); }))) {
            mixin(enumMixinStr_SSL_R_DANE_TLSA_BAD_DATA_LENGTH);
        }
    }




    static if(!is(typeof(SSL_R_DANE_TLSA_BAD_DIGEST_LENGTH))) {
        private enum enumMixinStr_SSL_R_DANE_TLSA_BAD_DIGEST_LENGTH = `enum SSL_R_DANE_TLSA_BAD_DIGEST_LENGTH = 192;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_DANE_TLSA_BAD_DIGEST_LENGTH); }))) {
            mixin(enumMixinStr_SSL_R_DANE_TLSA_BAD_DIGEST_LENGTH);
        }
    }




    static if(!is(typeof(SSL_R_DANE_TLSA_BAD_MATCHING_TYPE))) {
        private enum enumMixinStr_SSL_R_DANE_TLSA_BAD_MATCHING_TYPE = `enum SSL_R_DANE_TLSA_BAD_MATCHING_TYPE = 200;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_DANE_TLSA_BAD_MATCHING_TYPE); }))) {
            mixin(enumMixinStr_SSL_R_DANE_TLSA_BAD_MATCHING_TYPE);
        }
    }




    static if(!is(typeof(SSL_R_DANE_TLSA_BAD_PUBLIC_KEY))) {
        private enum enumMixinStr_SSL_R_DANE_TLSA_BAD_PUBLIC_KEY = `enum SSL_R_DANE_TLSA_BAD_PUBLIC_KEY = 201;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_DANE_TLSA_BAD_PUBLIC_KEY); }))) {
            mixin(enumMixinStr_SSL_R_DANE_TLSA_BAD_PUBLIC_KEY);
        }
    }




    static if(!is(typeof(SSL_R_DANE_TLSA_BAD_SELECTOR))) {
        private enum enumMixinStr_SSL_R_DANE_TLSA_BAD_SELECTOR = `enum SSL_R_DANE_TLSA_BAD_SELECTOR = 202;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_DANE_TLSA_BAD_SELECTOR); }))) {
            mixin(enumMixinStr_SSL_R_DANE_TLSA_BAD_SELECTOR);
        }
    }




    static if(!is(typeof(SSL_R_DANE_TLSA_NULL_DATA))) {
        private enum enumMixinStr_SSL_R_DANE_TLSA_NULL_DATA = `enum SSL_R_DANE_TLSA_NULL_DATA = 203;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_DANE_TLSA_NULL_DATA); }))) {
            mixin(enumMixinStr_SSL_R_DANE_TLSA_NULL_DATA);
        }
    }




    static if(!is(typeof(SSL_R_DATA_BETWEEN_CCS_AND_FINISHED))) {
        private enum enumMixinStr_SSL_R_DATA_BETWEEN_CCS_AND_FINISHED = `enum SSL_R_DATA_BETWEEN_CCS_AND_FINISHED = 145;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_DATA_BETWEEN_CCS_AND_FINISHED); }))) {
            mixin(enumMixinStr_SSL_R_DATA_BETWEEN_CCS_AND_FINISHED);
        }
    }




    static if(!is(typeof(SSL_R_DATA_LENGTH_TOO_LONG))) {
        private enum enumMixinStr_SSL_R_DATA_LENGTH_TOO_LONG = `enum SSL_R_DATA_LENGTH_TOO_LONG = 146;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_DATA_LENGTH_TOO_LONG); }))) {
            mixin(enumMixinStr_SSL_R_DATA_LENGTH_TOO_LONG);
        }
    }




    static if(!is(typeof(SSL_R_DECRYPTION_FAILED))) {
        private enum enumMixinStr_SSL_R_DECRYPTION_FAILED = `enum SSL_R_DECRYPTION_FAILED = 147;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_DECRYPTION_FAILED); }))) {
            mixin(enumMixinStr_SSL_R_DECRYPTION_FAILED);
        }
    }




    static if(!is(typeof(SSL_R_DECRYPTION_FAILED_OR_BAD_RECORD_MAC))) {
        private enum enumMixinStr_SSL_R_DECRYPTION_FAILED_OR_BAD_RECORD_MAC = `enum SSL_R_DECRYPTION_FAILED_OR_BAD_RECORD_MAC = 281;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_DECRYPTION_FAILED_OR_BAD_RECORD_MAC); }))) {
            mixin(enumMixinStr_SSL_R_DECRYPTION_FAILED_OR_BAD_RECORD_MAC);
        }
    }




    static if(!is(typeof(SSL_R_DH_KEY_TOO_SMALL))) {
        private enum enumMixinStr_SSL_R_DH_KEY_TOO_SMALL = `enum SSL_R_DH_KEY_TOO_SMALL = 394;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_DH_KEY_TOO_SMALL); }))) {
            mixin(enumMixinStr_SSL_R_DH_KEY_TOO_SMALL);
        }
    }




    static if(!is(typeof(SSL_R_DH_PUBLIC_VALUE_LENGTH_IS_WRONG))) {
        private enum enumMixinStr_SSL_R_DH_PUBLIC_VALUE_LENGTH_IS_WRONG = `enum SSL_R_DH_PUBLIC_VALUE_LENGTH_IS_WRONG = 148;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_DH_PUBLIC_VALUE_LENGTH_IS_WRONG); }))) {
            mixin(enumMixinStr_SSL_R_DH_PUBLIC_VALUE_LENGTH_IS_WRONG);
        }
    }




    static if(!is(typeof(SSL_R_DIGEST_CHECK_FAILED))) {
        private enum enumMixinStr_SSL_R_DIGEST_CHECK_FAILED = `enum SSL_R_DIGEST_CHECK_FAILED = 149;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_DIGEST_CHECK_FAILED); }))) {
            mixin(enumMixinStr_SSL_R_DIGEST_CHECK_FAILED);
        }
    }




    static if(!is(typeof(SSL_R_DTLS_MESSAGE_TOO_BIG))) {
        private enum enumMixinStr_SSL_R_DTLS_MESSAGE_TOO_BIG = `enum SSL_R_DTLS_MESSAGE_TOO_BIG = 334;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_DTLS_MESSAGE_TOO_BIG); }))) {
            mixin(enumMixinStr_SSL_R_DTLS_MESSAGE_TOO_BIG);
        }
    }




    static if(!is(typeof(SSL_R_DUPLICATE_COMPRESSION_ID))) {
        private enum enumMixinStr_SSL_R_DUPLICATE_COMPRESSION_ID = `enum SSL_R_DUPLICATE_COMPRESSION_ID = 309;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_DUPLICATE_COMPRESSION_ID); }))) {
            mixin(enumMixinStr_SSL_R_DUPLICATE_COMPRESSION_ID);
        }
    }




    static if(!is(typeof(SSL_R_ECC_CERT_NOT_FOR_SIGNING))) {
        private enum enumMixinStr_SSL_R_ECC_CERT_NOT_FOR_SIGNING = `enum SSL_R_ECC_CERT_NOT_FOR_SIGNING = 318;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_ECC_CERT_NOT_FOR_SIGNING); }))) {
            mixin(enumMixinStr_SSL_R_ECC_CERT_NOT_FOR_SIGNING);
        }
    }




    static if(!is(typeof(SSL_R_ECDH_REQUIRED_FOR_SUITEB_MODE))) {
        private enum enumMixinStr_SSL_R_ECDH_REQUIRED_FOR_SUITEB_MODE = `enum SSL_R_ECDH_REQUIRED_FOR_SUITEB_MODE = 374;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_ECDH_REQUIRED_FOR_SUITEB_MODE); }))) {
            mixin(enumMixinStr_SSL_R_ECDH_REQUIRED_FOR_SUITEB_MODE);
        }
    }




    static if(!is(typeof(SSL_R_EE_KEY_TOO_SMALL))) {
        private enum enumMixinStr_SSL_R_EE_KEY_TOO_SMALL = `enum SSL_R_EE_KEY_TOO_SMALL = 399;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_EE_KEY_TOO_SMALL); }))) {
            mixin(enumMixinStr_SSL_R_EE_KEY_TOO_SMALL);
        }
    }




    static if(!is(typeof(SSL_R_EMPTY_SRTP_PROTECTION_PROFILE_LIST))) {
        private enum enumMixinStr_SSL_R_EMPTY_SRTP_PROTECTION_PROFILE_LIST = `enum SSL_R_EMPTY_SRTP_PROTECTION_PROFILE_LIST = 354;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_EMPTY_SRTP_PROTECTION_PROFILE_LIST); }))) {
            mixin(enumMixinStr_SSL_R_EMPTY_SRTP_PROTECTION_PROFILE_LIST);
        }
    }




    static if(!is(typeof(SSL_R_ENCRYPTED_LENGTH_TOO_LONG))) {
        private enum enumMixinStr_SSL_R_ENCRYPTED_LENGTH_TOO_LONG = `enum SSL_R_ENCRYPTED_LENGTH_TOO_LONG = 150;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_ENCRYPTED_LENGTH_TOO_LONG); }))) {
            mixin(enumMixinStr_SSL_R_ENCRYPTED_LENGTH_TOO_LONG);
        }
    }




    static if(!is(typeof(SSL_R_ERROR_IN_RECEIVED_CIPHER_LIST))) {
        private enum enumMixinStr_SSL_R_ERROR_IN_RECEIVED_CIPHER_LIST = `enum SSL_R_ERROR_IN_RECEIVED_CIPHER_LIST = 151;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_ERROR_IN_RECEIVED_CIPHER_LIST); }))) {
            mixin(enumMixinStr_SSL_R_ERROR_IN_RECEIVED_CIPHER_LIST);
        }
    }




    static if(!is(typeof(SSL_R_ERROR_SETTING_TLSA_BASE_DOMAIN))) {
        private enum enumMixinStr_SSL_R_ERROR_SETTING_TLSA_BASE_DOMAIN = `enum SSL_R_ERROR_SETTING_TLSA_BASE_DOMAIN = 204;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_ERROR_SETTING_TLSA_BASE_DOMAIN); }))) {
            mixin(enumMixinStr_SSL_R_ERROR_SETTING_TLSA_BASE_DOMAIN);
        }
    }




    static if(!is(typeof(SSL_R_EXCEEDS_MAX_FRAGMENT_SIZE))) {
        private enum enumMixinStr_SSL_R_EXCEEDS_MAX_FRAGMENT_SIZE = `enum SSL_R_EXCEEDS_MAX_FRAGMENT_SIZE = 194;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_EXCEEDS_MAX_FRAGMENT_SIZE); }))) {
            mixin(enumMixinStr_SSL_R_EXCEEDS_MAX_FRAGMENT_SIZE);
        }
    }




    static if(!is(typeof(SSL_R_EXCESSIVE_MESSAGE_SIZE))) {
        private enum enumMixinStr_SSL_R_EXCESSIVE_MESSAGE_SIZE = `enum SSL_R_EXCESSIVE_MESSAGE_SIZE = 152;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_EXCESSIVE_MESSAGE_SIZE); }))) {
            mixin(enumMixinStr_SSL_R_EXCESSIVE_MESSAGE_SIZE);
        }
    }




    static if(!is(typeof(SSL_R_EXTENSION_NOT_RECEIVED))) {
        private enum enumMixinStr_SSL_R_EXTENSION_NOT_RECEIVED = `enum SSL_R_EXTENSION_NOT_RECEIVED = 279;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_EXTENSION_NOT_RECEIVED); }))) {
            mixin(enumMixinStr_SSL_R_EXTENSION_NOT_RECEIVED);
        }
    }




    static if(!is(typeof(SSL_R_EXTRA_DATA_IN_MESSAGE))) {
        private enum enumMixinStr_SSL_R_EXTRA_DATA_IN_MESSAGE = `enum SSL_R_EXTRA_DATA_IN_MESSAGE = 153;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_EXTRA_DATA_IN_MESSAGE); }))) {
            mixin(enumMixinStr_SSL_R_EXTRA_DATA_IN_MESSAGE);
        }
    }




    static if(!is(typeof(SSL_R_EXT_LENGTH_MISMATCH))) {
        private enum enumMixinStr_SSL_R_EXT_LENGTH_MISMATCH = `enum SSL_R_EXT_LENGTH_MISMATCH = 163;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_EXT_LENGTH_MISMATCH); }))) {
            mixin(enumMixinStr_SSL_R_EXT_LENGTH_MISMATCH);
        }
    }




    static if(!is(typeof(SSL_R_FAILED_TO_INIT_ASYNC))) {
        private enum enumMixinStr_SSL_R_FAILED_TO_INIT_ASYNC = `enum SSL_R_FAILED_TO_INIT_ASYNC = 405;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_FAILED_TO_INIT_ASYNC); }))) {
            mixin(enumMixinStr_SSL_R_FAILED_TO_INIT_ASYNC);
        }
    }




    static if(!is(typeof(SSL_R_FRAGMENTED_CLIENT_HELLO))) {
        private enum enumMixinStr_SSL_R_FRAGMENTED_CLIENT_HELLO = `enum SSL_R_FRAGMENTED_CLIENT_HELLO = 401;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_FRAGMENTED_CLIENT_HELLO); }))) {
            mixin(enumMixinStr_SSL_R_FRAGMENTED_CLIENT_HELLO);
        }
    }




    static if(!is(typeof(SSL_R_GOT_A_FIN_BEFORE_A_CCS))) {
        private enum enumMixinStr_SSL_R_GOT_A_FIN_BEFORE_A_CCS = `enum SSL_R_GOT_A_FIN_BEFORE_A_CCS = 154;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_GOT_A_FIN_BEFORE_A_CCS); }))) {
            mixin(enumMixinStr_SSL_R_GOT_A_FIN_BEFORE_A_CCS);
        }
    }




    static if(!is(typeof(SSL_R_HTTPS_PROXY_REQUEST))) {
        private enum enumMixinStr_SSL_R_HTTPS_PROXY_REQUEST = `enum SSL_R_HTTPS_PROXY_REQUEST = 155;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_HTTPS_PROXY_REQUEST); }))) {
            mixin(enumMixinStr_SSL_R_HTTPS_PROXY_REQUEST);
        }
    }




    static if(!is(typeof(SSL_R_HTTP_REQUEST))) {
        private enum enumMixinStr_SSL_R_HTTP_REQUEST = `enum SSL_R_HTTP_REQUEST = 156;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_HTTP_REQUEST); }))) {
            mixin(enumMixinStr_SSL_R_HTTP_REQUEST);
        }
    }




    static if(!is(typeof(SSL_R_ILLEGAL_POINT_COMPRESSION))) {
        private enum enumMixinStr_SSL_R_ILLEGAL_POINT_COMPRESSION = `enum SSL_R_ILLEGAL_POINT_COMPRESSION = 162;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_ILLEGAL_POINT_COMPRESSION); }))) {
            mixin(enumMixinStr_SSL_R_ILLEGAL_POINT_COMPRESSION);
        }
    }




    static if(!is(typeof(SSL_R_ILLEGAL_SUITEB_DIGEST))) {
        private enum enumMixinStr_SSL_R_ILLEGAL_SUITEB_DIGEST = `enum SSL_R_ILLEGAL_SUITEB_DIGEST = 380;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_ILLEGAL_SUITEB_DIGEST); }))) {
            mixin(enumMixinStr_SSL_R_ILLEGAL_SUITEB_DIGEST);
        }
    }




    static if(!is(typeof(SSL_R_INAPPROPRIATE_FALLBACK))) {
        private enum enumMixinStr_SSL_R_INAPPROPRIATE_FALLBACK = `enum SSL_R_INAPPROPRIATE_FALLBACK = 373;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_INAPPROPRIATE_FALLBACK); }))) {
            mixin(enumMixinStr_SSL_R_INAPPROPRIATE_FALLBACK);
        }
    }




    static if(!is(typeof(SSL_R_INCONSISTENT_COMPRESSION))) {
        private enum enumMixinStr_SSL_R_INCONSISTENT_COMPRESSION = `enum SSL_R_INCONSISTENT_COMPRESSION = 340;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_INCONSISTENT_COMPRESSION); }))) {
            mixin(enumMixinStr_SSL_R_INCONSISTENT_COMPRESSION);
        }
    }




    static if(!is(typeof(SSL_R_INCONSISTENT_EARLY_DATA_ALPN))) {
        private enum enumMixinStr_SSL_R_INCONSISTENT_EARLY_DATA_ALPN = `enum SSL_R_INCONSISTENT_EARLY_DATA_ALPN = 222;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_INCONSISTENT_EARLY_DATA_ALPN); }))) {
            mixin(enumMixinStr_SSL_R_INCONSISTENT_EARLY_DATA_ALPN);
        }
    }




    static if(!is(typeof(SSL_R_INCONSISTENT_EARLY_DATA_SNI))) {
        private enum enumMixinStr_SSL_R_INCONSISTENT_EARLY_DATA_SNI = `enum SSL_R_INCONSISTENT_EARLY_DATA_SNI = 231;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_INCONSISTENT_EARLY_DATA_SNI); }))) {
            mixin(enumMixinStr_SSL_R_INCONSISTENT_EARLY_DATA_SNI);
        }
    }




    static if(!is(typeof(SSL_R_INCONSISTENT_EXTMS))) {
        private enum enumMixinStr_SSL_R_INCONSISTENT_EXTMS = `enum SSL_R_INCONSISTENT_EXTMS = 104;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_INCONSISTENT_EXTMS); }))) {
            mixin(enumMixinStr_SSL_R_INCONSISTENT_EXTMS);
        }
    }




    static if(!is(typeof(SSL_R_INSUFFICIENT_SECURITY))) {
        private enum enumMixinStr_SSL_R_INSUFFICIENT_SECURITY = `enum SSL_R_INSUFFICIENT_SECURITY = 241;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_INSUFFICIENT_SECURITY); }))) {
            mixin(enumMixinStr_SSL_R_INSUFFICIENT_SECURITY);
        }
    }




    static if(!is(typeof(SSL_R_INVALID_ALERT))) {
        private enum enumMixinStr_SSL_R_INVALID_ALERT = `enum SSL_R_INVALID_ALERT = 205;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_INVALID_ALERT); }))) {
            mixin(enumMixinStr_SSL_R_INVALID_ALERT);
        }
    }




    static if(!is(typeof(SSL_R_INVALID_CCS_MESSAGE))) {
        private enum enumMixinStr_SSL_R_INVALID_CCS_MESSAGE = `enum SSL_R_INVALID_CCS_MESSAGE = 260;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_INVALID_CCS_MESSAGE); }))) {
            mixin(enumMixinStr_SSL_R_INVALID_CCS_MESSAGE);
        }
    }




    static if(!is(typeof(SSL_R_INVALID_CERTIFICATE_OR_ALG))) {
        private enum enumMixinStr_SSL_R_INVALID_CERTIFICATE_OR_ALG = `enum SSL_R_INVALID_CERTIFICATE_OR_ALG = 238;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_INVALID_CERTIFICATE_OR_ALG); }))) {
            mixin(enumMixinStr_SSL_R_INVALID_CERTIFICATE_OR_ALG);
        }
    }




    static if(!is(typeof(SSL_R_INVALID_COMMAND))) {
        private enum enumMixinStr_SSL_R_INVALID_COMMAND = `enum SSL_R_INVALID_COMMAND = 280;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_INVALID_COMMAND); }))) {
            mixin(enumMixinStr_SSL_R_INVALID_COMMAND);
        }
    }




    static if(!is(typeof(SSL_R_INVALID_COMPRESSION_ALGORITHM))) {
        private enum enumMixinStr_SSL_R_INVALID_COMPRESSION_ALGORITHM = `enum SSL_R_INVALID_COMPRESSION_ALGORITHM = 341;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_INVALID_COMPRESSION_ALGORITHM); }))) {
            mixin(enumMixinStr_SSL_R_INVALID_COMPRESSION_ALGORITHM);
        }
    }




    static if(!is(typeof(SSL_R_INVALID_CONFIG))) {
        private enum enumMixinStr_SSL_R_INVALID_CONFIG = `enum SSL_R_INVALID_CONFIG = 283;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_INVALID_CONFIG); }))) {
            mixin(enumMixinStr_SSL_R_INVALID_CONFIG);
        }
    }




    static if(!is(typeof(SSL_R_INVALID_CONFIGURATION_NAME))) {
        private enum enumMixinStr_SSL_R_INVALID_CONFIGURATION_NAME = `enum SSL_R_INVALID_CONFIGURATION_NAME = 113;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_INVALID_CONFIGURATION_NAME); }))) {
            mixin(enumMixinStr_SSL_R_INVALID_CONFIGURATION_NAME);
        }
    }




    static if(!is(typeof(SSL_R_INVALID_CONTEXT))) {
        private enum enumMixinStr_SSL_R_INVALID_CONTEXT = `enum SSL_R_INVALID_CONTEXT = 282;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_INVALID_CONTEXT); }))) {
            mixin(enumMixinStr_SSL_R_INVALID_CONTEXT);
        }
    }




    static if(!is(typeof(SSL_R_INVALID_CT_VALIDATION_TYPE))) {
        private enum enumMixinStr_SSL_R_INVALID_CT_VALIDATION_TYPE = `enum SSL_R_INVALID_CT_VALIDATION_TYPE = 212;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_INVALID_CT_VALIDATION_TYPE); }))) {
            mixin(enumMixinStr_SSL_R_INVALID_CT_VALIDATION_TYPE);
        }
    }




    static if(!is(typeof(SSL_R_INVALID_KEY_UPDATE_TYPE))) {
        private enum enumMixinStr_SSL_R_INVALID_KEY_UPDATE_TYPE = `enum SSL_R_INVALID_KEY_UPDATE_TYPE = 120;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_INVALID_KEY_UPDATE_TYPE); }))) {
            mixin(enumMixinStr_SSL_R_INVALID_KEY_UPDATE_TYPE);
        }
    }




    static if(!is(typeof(SSL_R_INVALID_MAX_EARLY_DATA))) {
        private enum enumMixinStr_SSL_R_INVALID_MAX_EARLY_DATA = `enum SSL_R_INVALID_MAX_EARLY_DATA = 174;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_INVALID_MAX_EARLY_DATA); }))) {
            mixin(enumMixinStr_SSL_R_INVALID_MAX_EARLY_DATA);
        }
    }




    static if(!is(typeof(SSL_R_INVALID_NULL_CMD_NAME))) {
        private enum enumMixinStr_SSL_R_INVALID_NULL_CMD_NAME = `enum SSL_R_INVALID_NULL_CMD_NAME = 385;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_INVALID_NULL_CMD_NAME); }))) {
            mixin(enumMixinStr_SSL_R_INVALID_NULL_CMD_NAME);
        }
    }




    static if(!is(typeof(SSL_R_INVALID_SEQUENCE_NUMBER))) {
        private enum enumMixinStr_SSL_R_INVALID_SEQUENCE_NUMBER = `enum SSL_R_INVALID_SEQUENCE_NUMBER = 402;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_INVALID_SEQUENCE_NUMBER); }))) {
            mixin(enumMixinStr_SSL_R_INVALID_SEQUENCE_NUMBER);
        }
    }




    static if(!is(typeof(SSL_R_INVALID_SERVERINFO_DATA))) {
        private enum enumMixinStr_SSL_R_INVALID_SERVERINFO_DATA = `enum SSL_R_INVALID_SERVERINFO_DATA = 388;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_INVALID_SERVERINFO_DATA); }))) {
            mixin(enumMixinStr_SSL_R_INVALID_SERVERINFO_DATA);
        }
    }




    static if(!is(typeof(SSL_R_INVALID_SESSION_ID))) {
        private enum enumMixinStr_SSL_R_INVALID_SESSION_ID = `enum SSL_R_INVALID_SESSION_ID = 999;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_INVALID_SESSION_ID); }))) {
            mixin(enumMixinStr_SSL_R_INVALID_SESSION_ID);
        }
    }




    static if(!is(typeof(SSL_R_INVALID_SRP_USERNAME))) {
        private enum enumMixinStr_SSL_R_INVALID_SRP_USERNAME = `enum SSL_R_INVALID_SRP_USERNAME = 357;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_INVALID_SRP_USERNAME); }))) {
            mixin(enumMixinStr_SSL_R_INVALID_SRP_USERNAME);
        }
    }




    static if(!is(typeof(SSL_R_INVALID_STATUS_RESPONSE))) {
        private enum enumMixinStr_SSL_R_INVALID_STATUS_RESPONSE = `enum SSL_R_INVALID_STATUS_RESPONSE = 328;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_INVALID_STATUS_RESPONSE); }))) {
            mixin(enumMixinStr_SSL_R_INVALID_STATUS_RESPONSE);
        }
    }




    static if(!is(typeof(SSL_R_INVALID_TICKET_KEYS_LENGTH))) {
        private enum enumMixinStr_SSL_R_INVALID_TICKET_KEYS_LENGTH = `enum SSL_R_INVALID_TICKET_KEYS_LENGTH = 325;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_INVALID_TICKET_KEYS_LENGTH); }))) {
            mixin(enumMixinStr_SSL_R_INVALID_TICKET_KEYS_LENGTH);
        }
    }




    static if(!is(typeof(SSL_R_LENGTH_MISMATCH))) {
        private enum enumMixinStr_SSL_R_LENGTH_MISMATCH = `enum SSL_R_LENGTH_MISMATCH = 159;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_LENGTH_MISMATCH); }))) {
            mixin(enumMixinStr_SSL_R_LENGTH_MISMATCH);
        }
    }




    static if(!is(typeof(SSL_R_LENGTH_TOO_LONG))) {
        private enum enumMixinStr_SSL_R_LENGTH_TOO_LONG = `enum SSL_R_LENGTH_TOO_LONG = 404;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_LENGTH_TOO_LONG); }))) {
            mixin(enumMixinStr_SSL_R_LENGTH_TOO_LONG);
        }
    }




    static if(!is(typeof(SSL_R_LENGTH_TOO_SHORT))) {
        private enum enumMixinStr_SSL_R_LENGTH_TOO_SHORT = `enum SSL_R_LENGTH_TOO_SHORT = 160;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_LENGTH_TOO_SHORT); }))) {
            mixin(enumMixinStr_SSL_R_LENGTH_TOO_SHORT);
        }
    }




    static if(!is(typeof(SSL_R_LIBRARY_BUG))) {
        private enum enumMixinStr_SSL_R_LIBRARY_BUG = `enum SSL_R_LIBRARY_BUG = 274;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_LIBRARY_BUG); }))) {
            mixin(enumMixinStr_SSL_R_LIBRARY_BUG);
        }
    }




    static if(!is(typeof(SSL_R_LIBRARY_HAS_NO_CIPHERS))) {
        private enum enumMixinStr_SSL_R_LIBRARY_HAS_NO_CIPHERS = `enum SSL_R_LIBRARY_HAS_NO_CIPHERS = 161;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_LIBRARY_HAS_NO_CIPHERS); }))) {
            mixin(enumMixinStr_SSL_R_LIBRARY_HAS_NO_CIPHERS);
        }
    }




    static if(!is(typeof(SSL_R_MISSING_DSA_SIGNING_CERT))) {
        private enum enumMixinStr_SSL_R_MISSING_DSA_SIGNING_CERT = `enum SSL_R_MISSING_DSA_SIGNING_CERT = 165;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_MISSING_DSA_SIGNING_CERT); }))) {
            mixin(enumMixinStr_SSL_R_MISSING_DSA_SIGNING_CERT);
        }
    }




    static if(!is(typeof(SSL_R_MISSING_ECDSA_SIGNING_CERT))) {
        private enum enumMixinStr_SSL_R_MISSING_ECDSA_SIGNING_CERT = `enum SSL_R_MISSING_ECDSA_SIGNING_CERT = 381;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_MISSING_ECDSA_SIGNING_CERT); }))) {
            mixin(enumMixinStr_SSL_R_MISSING_ECDSA_SIGNING_CERT);
        }
    }




    static if(!is(typeof(SSL_R_MISSING_FATAL))) {
        private enum enumMixinStr_SSL_R_MISSING_FATAL = `enum SSL_R_MISSING_FATAL = 256;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_MISSING_FATAL); }))) {
            mixin(enumMixinStr_SSL_R_MISSING_FATAL);
        }
    }




    static if(!is(typeof(SSL_R_MISSING_PARAMETERS))) {
        private enum enumMixinStr_SSL_R_MISSING_PARAMETERS = `enum SSL_R_MISSING_PARAMETERS = 290;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_MISSING_PARAMETERS); }))) {
            mixin(enumMixinStr_SSL_R_MISSING_PARAMETERS);
        }
    }




    static if(!is(typeof(SSL_R_MISSING_RSA_CERTIFICATE))) {
        private enum enumMixinStr_SSL_R_MISSING_RSA_CERTIFICATE = `enum SSL_R_MISSING_RSA_CERTIFICATE = 168;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_MISSING_RSA_CERTIFICATE); }))) {
            mixin(enumMixinStr_SSL_R_MISSING_RSA_CERTIFICATE);
        }
    }




    static if(!is(typeof(SSL_R_MISSING_RSA_ENCRYPTING_CERT))) {
        private enum enumMixinStr_SSL_R_MISSING_RSA_ENCRYPTING_CERT = `enum SSL_R_MISSING_RSA_ENCRYPTING_CERT = 169;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_MISSING_RSA_ENCRYPTING_CERT); }))) {
            mixin(enumMixinStr_SSL_R_MISSING_RSA_ENCRYPTING_CERT);
        }
    }




    static if(!is(typeof(SSL_R_MISSING_RSA_SIGNING_CERT))) {
        private enum enumMixinStr_SSL_R_MISSING_RSA_SIGNING_CERT = `enum SSL_R_MISSING_RSA_SIGNING_CERT = 170;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_MISSING_RSA_SIGNING_CERT); }))) {
            mixin(enumMixinStr_SSL_R_MISSING_RSA_SIGNING_CERT);
        }
    }




    static if(!is(typeof(SSL_R_MISSING_SIGALGS_EXTENSION))) {
        private enum enumMixinStr_SSL_R_MISSING_SIGALGS_EXTENSION = `enum SSL_R_MISSING_SIGALGS_EXTENSION = 112;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_MISSING_SIGALGS_EXTENSION); }))) {
            mixin(enumMixinStr_SSL_R_MISSING_SIGALGS_EXTENSION);
        }
    }




    static if(!is(typeof(SSL_R_MISSING_SIGNING_CERT))) {
        private enum enumMixinStr_SSL_R_MISSING_SIGNING_CERT = `enum SSL_R_MISSING_SIGNING_CERT = 221;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_MISSING_SIGNING_CERT); }))) {
            mixin(enumMixinStr_SSL_R_MISSING_SIGNING_CERT);
        }
    }




    static if(!is(typeof(SSL_R_MISSING_SRP_PARAM))) {
        private enum enumMixinStr_SSL_R_MISSING_SRP_PARAM = `enum SSL_R_MISSING_SRP_PARAM = 358;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_MISSING_SRP_PARAM); }))) {
            mixin(enumMixinStr_SSL_R_MISSING_SRP_PARAM);
        }
    }




    static if(!is(typeof(SSL_R_MISSING_SUPPORTED_GROUPS_EXTENSION))) {
        private enum enumMixinStr_SSL_R_MISSING_SUPPORTED_GROUPS_EXTENSION = `enum SSL_R_MISSING_SUPPORTED_GROUPS_EXTENSION = 209;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_MISSING_SUPPORTED_GROUPS_EXTENSION); }))) {
            mixin(enumMixinStr_SSL_R_MISSING_SUPPORTED_GROUPS_EXTENSION);
        }
    }




    static if(!is(typeof(SSL_R_MISSING_TMP_DH_KEY))) {
        private enum enumMixinStr_SSL_R_MISSING_TMP_DH_KEY = `enum SSL_R_MISSING_TMP_DH_KEY = 171;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_MISSING_TMP_DH_KEY); }))) {
            mixin(enumMixinStr_SSL_R_MISSING_TMP_DH_KEY);
        }
    }




    static if(!is(typeof(SSL_R_MISSING_TMP_ECDH_KEY))) {
        private enum enumMixinStr_SSL_R_MISSING_TMP_ECDH_KEY = `enum SSL_R_MISSING_TMP_ECDH_KEY = 311;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_MISSING_TMP_ECDH_KEY); }))) {
            mixin(enumMixinStr_SSL_R_MISSING_TMP_ECDH_KEY);
        }
    }




    static if(!is(typeof(SSL_R_MIXED_HANDSHAKE_AND_NON_HANDSHAKE_DATA))) {
        private enum enumMixinStr_SSL_R_MIXED_HANDSHAKE_AND_NON_HANDSHAKE_DATA = `enum SSL_R_MIXED_HANDSHAKE_AND_NON_HANDSHAKE_DATA = 293;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_MIXED_HANDSHAKE_AND_NON_HANDSHAKE_DATA); }))) {
            mixin(enumMixinStr_SSL_R_MIXED_HANDSHAKE_AND_NON_HANDSHAKE_DATA);
        }
    }




    static if(!is(typeof(SSL_R_NOT_ON_RECORD_BOUNDARY))) {
        private enum enumMixinStr_SSL_R_NOT_ON_RECORD_BOUNDARY = `enum SSL_R_NOT_ON_RECORD_BOUNDARY = 182;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_NOT_ON_RECORD_BOUNDARY); }))) {
            mixin(enumMixinStr_SSL_R_NOT_ON_RECORD_BOUNDARY);
        }
    }




    static if(!is(typeof(SSL_R_NOT_REPLACING_CERTIFICATE))) {
        private enum enumMixinStr_SSL_R_NOT_REPLACING_CERTIFICATE = `enum SSL_R_NOT_REPLACING_CERTIFICATE = 289;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_NOT_REPLACING_CERTIFICATE); }))) {
            mixin(enumMixinStr_SSL_R_NOT_REPLACING_CERTIFICATE);
        }
    }




    static if(!is(typeof(SSL_R_NOT_SERVER))) {
        private enum enumMixinStr_SSL_R_NOT_SERVER = `enum SSL_R_NOT_SERVER = 284;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_NOT_SERVER); }))) {
            mixin(enumMixinStr_SSL_R_NOT_SERVER);
        }
    }




    static if(!is(typeof(SSL_R_NO_APPLICATION_PROTOCOL))) {
        private enum enumMixinStr_SSL_R_NO_APPLICATION_PROTOCOL = `enum SSL_R_NO_APPLICATION_PROTOCOL = 235;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_NO_APPLICATION_PROTOCOL); }))) {
            mixin(enumMixinStr_SSL_R_NO_APPLICATION_PROTOCOL);
        }
    }




    static if(!is(typeof(SSL_R_NO_CERTIFICATES_RETURNED))) {
        private enum enumMixinStr_SSL_R_NO_CERTIFICATES_RETURNED = `enum SSL_R_NO_CERTIFICATES_RETURNED = 176;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_NO_CERTIFICATES_RETURNED); }))) {
            mixin(enumMixinStr_SSL_R_NO_CERTIFICATES_RETURNED);
        }
    }




    static if(!is(typeof(SSL_R_NO_CERTIFICATE_ASSIGNED))) {
        private enum enumMixinStr_SSL_R_NO_CERTIFICATE_ASSIGNED = `enum SSL_R_NO_CERTIFICATE_ASSIGNED = 177;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_NO_CERTIFICATE_ASSIGNED); }))) {
            mixin(enumMixinStr_SSL_R_NO_CERTIFICATE_ASSIGNED);
        }
    }




    static if(!is(typeof(SSL_R_NO_CERTIFICATE_SET))) {
        private enum enumMixinStr_SSL_R_NO_CERTIFICATE_SET = `enum SSL_R_NO_CERTIFICATE_SET = 179;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_NO_CERTIFICATE_SET); }))) {
            mixin(enumMixinStr_SSL_R_NO_CERTIFICATE_SET);
        }
    }




    static if(!is(typeof(SSL_R_NO_CHANGE_FOLLOWING_HRR))) {
        private enum enumMixinStr_SSL_R_NO_CHANGE_FOLLOWING_HRR = `enum SSL_R_NO_CHANGE_FOLLOWING_HRR = 214;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_NO_CHANGE_FOLLOWING_HRR); }))) {
            mixin(enumMixinStr_SSL_R_NO_CHANGE_FOLLOWING_HRR);
        }
    }




    static if(!is(typeof(SSL_R_NO_CIPHERS_AVAILABLE))) {
        private enum enumMixinStr_SSL_R_NO_CIPHERS_AVAILABLE = `enum SSL_R_NO_CIPHERS_AVAILABLE = 181;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_NO_CIPHERS_AVAILABLE); }))) {
            mixin(enumMixinStr_SSL_R_NO_CIPHERS_AVAILABLE);
        }
    }




    static if(!is(typeof(SSL_R_NO_CIPHERS_SPECIFIED))) {
        private enum enumMixinStr_SSL_R_NO_CIPHERS_SPECIFIED = `enum SSL_R_NO_CIPHERS_SPECIFIED = 183;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_NO_CIPHERS_SPECIFIED); }))) {
            mixin(enumMixinStr_SSL_R_NO_CIPHERS_SPECIFIED);
        }
    }




    static if(!is(typeof(SSL_R_NO_CIPHER_MATCH))) {
        private enum enumMixinStr_SSL_R_NO_CIPHER_MATCH = `enum SSL_R_NO_CIPHER_MATCH = 185;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_NO_CIPHER_MATCH); }))) {
            mixin(enumMixinStr_SSL_R_NO_CIPHER_MATCH);
        }
    }




    static if(!is(typeof(SSL_R_NO_CLIENT_CERT_METHOD))) {
        private enum enumMixinStr_SSL_R_NO_CLIENT_CERT_METHOD = `enum SSL_R_NO_CLIENT_CERT_METHOD = 331;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_NO_CLIENT_CERT_METHOD); }))) {
            mixin(enumMixinStr_SSL_R_NO_CLIENT_CERT_METHOD);
        }
    }




    static if(!is(typeof(SSL_R_NO_COMPRESSION_SPECIFIED))) {
        private enum enumMixinStr_SSL_R_NO_COMPRESSION_SPECIFIED = `enum SSL_R_NO_COMPRESSION_SPECIFIED = 187;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_NO_COMPRESSION_SPECIFIED); }))) {
            mixin(enumMixinStr_SSL_R_NO_COMPRESSION_SPECIFIED);
        }
    }




    static if(!is(typeof(SSL_R_NO_COOKIE_CALLBACK_SET))) {
        private enum enumMixinStr_SSL_R_NO_COOKIE_CALLBACK_SET = `enum SSL_R_NO_COOKIE_CALLBACK_SET = 287;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_NO_COOKIE_CALLBACK_SET); }))) {
            mixin(enumMixinStr_SSL_R_NO_COOKIE_CALLBACK_SET);
        }
    }




    static if(!is(typeof(SSL_R_NO_GOST_CERTIFICATE_SENT_BY_PEER))) {
        private enum enumMixinStr_SSL_R_NO_GOST_CERTIFICATE_SENT_BY_PEER = `enum SSL_R_NO_GOST_CERTIFICATE_SENT_BY_PEER = 330;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_NO_GOST_CERTIFICATE_SENT_BY_PEER); }))) {
            mixin(enumMixinStr_SSL_R_NO_GOST_CERTIFICATE_SENT_BY_PEER);
        }
    }




    static if(!is(typeof(SSL_R_NO_METHOD_SPECIFIED))) {
        private enum enumMixinStr_SSL_R_NO_METHOD_SPECIFIED = `enum SSL_R_NO_METHOD_SPECIFIED = 188;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_NO_METHOD_SPECIFIED); }))) {
            mixin(enumMixinStr_SSL_R_NO_METHOD_SPECIFIED);
        }
    }




    static if(!is(typeof(SSL_R_NO_PEM_EXTENSIONS))) {
        private enum enumMixinStr_SSL_R_NO_PEM_EXTENSIONS = `enum SSL_R_NO_PEM_EXTENSIONS = 389;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_NO_PEM_EXTENSIONS); }))) {
            mixin(enumMixinStr_SSL_R_NO_PEM_EXTENSIONS);
        }
    }




    static if(!is(typeof(SSL_R_NO_PRIVATE_KEY_ASSIGNED))) {
        private enum enumMixinStr_SSL_R_NO_PRIVATE_KEY_ASSIGNED = `enum SSL_R_NO_PRIVATE_KEY_ASSIGNED = 190;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_NO_PRIVATE_KEY_ASSIGNED); }))) {
            mixin(enumMixinStr_SSL_R_NO_PRIVATE_KEY_ASSIGNED);
        }
    }




    static if(!is(typeof(SSL_R_NO_PROTOCOLS_AVAILABLE))) {
        private enum enumMixinStr_SSL_R_NO_PROTOCOLS_AVAILABLE = `enum SSL_R_NO_PROTOCOLS_AVAILABLE = 191;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_NO_PROTOCOLS_AVAILABLE); }))) {
            mixin(enumMixinStr_SSL_R_NO_PROTOCOLS_AVAILABLE);
        }
    }




    static if(!is(typeof(SSL_R_NO_RENEGOTIATION))) {
        private enum enumMixinStr_SSL_R_NO_RENEGOTIATION = `enum SSL_R_NO_RENEGOTIATION = 339;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_NO_RENEGOTIATION); }))) {
            mixin(enumMixinStr_SSL_R_NO_RENEGOTIATION);
        }
    }




    static if(!is(typeof(SSL_R_NO_REQUIRED_DIGEST))) {
        private enum enumMixinStr_SSL_R_NO_REQUIRED_DIGEST = `enum SSL_R_NO_REQUIRED_DIGEST = 324;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_NO_REQUIRED_DIGEST); }))) {
            mixin(enumMixinStr_SSL_R_NO_REQUIRED_DIGEST);
        }
    }




    static if(!is(typeof(SSL_R_NO_SHARED_CIPHER))) {
        private enum enumMixinStr_SSL_R_NO_SHARED_CIPHER = `enum SSL_R_NO_SHARED_CIPHER = 193;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_NO_SHARED_CIPHER); }))) {
            mixin(enumMixinStr_SSL_R_NO_SHARED_CIPHER);
        }
    }




    static if(!is(typeof(SSL_R_NO_SHARED_GROUPS))) {
        private enum enumMixinStr_SSL_R_NO_SHARED_GROUPS = `enum SSL_R_NO_SHARED_GROUPS = 410;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_NO_SHARED_GROUPS); }))) {
            mixin(enumMixinStr_SSL_R_NO_SHARED_GROUPS);
        }
    }




    static if(!is(typeof(SSL_R_NO_SHARED_SIGNATURE_ALGORITHMS))) {
        private enum enumMixinStr_SSL_R_NO_SHARED_SIGNATURE_ALGORITHMS = `enum SSL_R_NO_SHARED_SIGNATURE_ALGORITHMS = 376;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_NO_SHARED_SIGNATURE_ALGORITHMS); }))) {
            mixin(enumMixinStr_SSL_R_NO_SHARED_SIGNATURE_ALGORITHMS);
        }
    }




    static if(!is(typeof(SSL_R_NO_SRTP_PROFILES))) {
        private enum enumMixinStr_SSL_R_NO_SRTP_PROFILES = `enum SSL_R_NO_SRTP_PROFILES = 359;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_NO_SRTP_PROFILES); }))) {
            mixin(enumMixinStr_SSL_R_NO_SRTP_PROFILES);
        }
    }




    static if(!is(typeof(SSL_R_NO_SUITABLE_KEY_SHARE))) {
        private enum enumMixinStr_SSL_R_NO_SUITABLE_KEY_SHARE = `enum SSL_R_NO_SUITABLE_KEY_SHARE = 101;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_NO_SUITABLE_KEY_SHARE); }))) {
            mixin(enumMixinStr_SSL_R_NO_SUITABLE_KEY_SHARE);
        }
    }




    static if(!is(typeof(SSL_R_NO_SUITABLE_SIGNATURE_ALGORITHM))) {
        private enum enumMixinStr_SSL_R_NO_SUITABLE_SIGNATURE_ALGORITHM = `enum SSL_R_NO_SUITABLE_SIGNATURE_ALGORITHM = 118;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_NO_SUITABLE_SIGNATURE_ALGORITHM); }))) {
            mixin(enumMixinStr_SSL_R_NO_SUITABLE_SIGNATURE_ALGORITHM);
        }
    }




    static if(!is(typeof(SSL_R_NO_VALID_SCTS))) {
        private enum enumMixinStr_SSL_R_NO_VALID_SCTS = `enum SSL_R_NO_VALID_SCTS = 216;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_NO_VALID_SCTS); }))) {
            mixin(enumMixinStr_SSL_R_NO_VALID_SCTS);
        }
    }




    static if(!is(typeof(SSL_R_NO_VERIFY_COOKIE_CALLBACK))) {
        private enum enumMixinStr_SSL_R_NO_VERIFY_COOKIE_CALLBACK = `enum SSL_R_NO_VERIFY_COOKIE_CALLBACK = 403;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_NO_VERIFY_COOKIE_CALLBACK); }))) {
            mixin(enumMixinStr_SSL_R_NO_VERIFY_COOKIE_CALLBACK);
        }
    }




    static if(!is(typeof(SSL_R_NULL_SSL_CTX))) {
        private enum enumMixinStr_SSL_R_NULL_SSL_CTX = `enum SSL_R_NULL_SSL_CTX = 195;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_NULL_SSL_CTX); }))) {
            mixin(enumMixinStr_SSL_R_NULL_SSL_CTX);
        }
    }




    static if(!is(typeof(SSL_R_NULL_SSL_METHOD_PASSED))) {
        private enum enumMixinStr_SSL_R_NULL_SSL_METHOD_PASSED = `enum SSL_R_NULL_SSL_METHOD_PASSED = 196;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_NULL_SSL_METHOD_PASSED); }))) {
            mixin(enumMixinStr_SSL_R_NULL_SSL_METHOD_PASSED);
        }
    }




    static if(!is(typeof(SSL_R_OLD_SESSION_CIPHER_NOT_RETURNED))) {
        private enum enumMixinStr_SSL_R_OLD_SESSION_CIPHER_NOT_RETURNED = `enum SSL_R_OLD_SESSION_CIPHER_NOT_RETURNED = 197;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_OLD_SESSION_CIPHER_NOT_RETURNED); }))) {
            mixin(enumMixinStr_SSL_R_OLD_SESSION_CIPHER_NOT_RETURNED);
        }
    }




    static if(!is(typeof(SSL_R_OLD_SESSION_COMPRESSION_ALGORITHM_NOT_RETURNED))) {
        private enum enumMixinStr_SSL_R_OLD_SESSION_COMPRESSION_ALGORITHM_NOT_RETURNED = `enum SSL_R_OLD_SESSION_COMPRESSION_ALGORITHM_NOT_RETURNED = 344;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_OLD_SESSION_COMPRESSION_ALGORITHM_NOT_RETURNED); }))) {
            mixin(enumMixinStr_SSL_R_OLD_SESSION_COMPRESSION_ALGORITHM_NOT_RETURNED);
        }
    }




    static if(!is(typeof(SSL_R_OVERFLOW_ERROR))) {
        private enum enumMixinStr_SSL_R_OVERFLOW_ERROR = `enum SSL_R_OVERFLOW_ERROR = 237;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_OVERFLOW_ERROR); }))) {
            mixin(enumMixinStr_SSL_R_OVERFLOW_ERROR);
        }
    }




    static if(!is(typeof(SSL_R_PACKET_LENGTH_TOO_LONG))) {
        private enum enumMixinStr_SSL_R_PACKET_LENGTH_TOO_LONG = `enum SSL_R_PACKET_LENGTH_TOO_LONG = 198;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_PACKET_LENGTH_TOO_LONG); }))) {
            mixin(enumMixinStr_SSL_R_PACKET_LENGTH_TOO_LONG);
        }
    }




    static if(!is(typeof(SSL_R_PARSE_TLSEXT))) {
        private enum enumMixinStr_SSL_R_PARSE_TLSEXT = `enum SSL_R_PARSE_TLSEXT = 227;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_PARSE_TLSEXT); }))) {
            mixin(enumMixinStr_SSL_R_PARSE_TLSEXT);
        }
    }




    static if(!is(typeof(SSL_R_PATH_TOO_LONG))) {
        private enum enumMixinStr_SSL_R_PATH_TOO_LONG = `enum SSL_R_PATH_TOO_LONG = 270;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_PATH_TOO_LONG); }))) {
            mixin(enumMixinStr_SSL_R_PATH_TOO_LONG);
        }
    }




    static if(!is(typeof(SSL_R_PEER_DID_NOT_RETURN_A_CERTIFICATE))) {
        private enum enumMixinStr_SSL_R_PEER_DID_NOT_RETURN_A_CERTIFICATE = `enum SSL_R_PEER_DID_NOT_RETURN_A_CERTIFICATE = 199;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_PEER_DID_NOT_RETURN_A_CERTIFICATE); }))) {
            mixin(enumMixinStr_SSL_R_PEER_DID_NOT_RETURN_A_CERTIFICATE);
        }
    }




    static if(!is(typeof(SSL_R_PEM_NAME_BAD_PREFIX))) {
        private enum enumMixinStr_SSL_R_PEM_NAME_BAD_PREFIX = `enum SSL_R_PEM_NAME_BAD_PREFIX = 391;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_PEM_NAME_BAD_PREFIX); }))) {
            mixin(enumMixinStr_SSL_R_PEM_NAME_BAD_PREFIX);
        }
    }




    static if(!is(typeof(SSL_R_PEM_NAME_TOO_SHORT))) {
        private enum enumMixinStr_SSL_R_PEM_NAME_TOO_SHORT = `enum SSL_R_PEM_NAME_TOO_SHORT = 392;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_PEM_NAME_TOO_SHORT); }))) {
            mixin(enumMixinStr_SSL_R_PEM_NAME_TOO_SHORT);
        }
    }




    static if(!is(typeof(SSL_R_PIPELINE_FAILURE))) {
        private enum enumMixinStr_SSL_R_PIPELINE_FAILURE = `enum SSL_R_PIPELINE_FAILURE = 406;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_PIPELINE_FAILURE); }))) {
            mixin(enumMixinStr_SSL_R_PIPELINE_FAILURE);
        }
    }




    static if(!is(typeof(SSL_R_POST_HANDSHAKE_AUTH_ENCODING_ERR))) {
        private enum enumMixinStr_SSL_R_POST_HANDSHAKE_AUTH_ENCODING_ERR = `enum SSL_R_POST_HANDSHAKE_AUTH_ENCODING_ERR = 278;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_POST_HANDSHAKE_AUTH_ENCODING_ERR); }))) {
            mixin(enumMixinStr_SSL_R_POST_HANDSHAKE_AUTH_ENCODING_ERR);
        }
    }




    static if(!is(typeof(SSL_R_PRIVATE_KEY_MISMATCH))) {
        private enum enumMixinStr_SSL_R_PRIVATE_KEY_MISMATCH = `enum SSL_R_PRIVATE_KEY_MISMATCH = 288;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_PRIVATE_KEY_MISMATCH); }))) {
            mixin(enumMixinStr_SSL_R_PRIVATE_KEY_MISMATCH);
        }
    }




    static if(!is(typeof(SSL_R_PROTOCOL_IS_SHUTDOWN))) {
        private enum enumMixinStr_SSL_R_PROTOCOL_IS_SHUTDOWN = `enum SSL_R_PROTOCOL_IS_SHUTDOWN = 207;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_PROTOCOL_IS_SHUTDOWN); }))) {
            mixin(enumMixinStr_SSL_R_PROTOCOL_IS_SHUTDOWN);
        }
    }




    static if(!is(typeof(SSL_R_PSK_IDENTITY_NOT_FOUND))) {
        private enum enumMixinStr_SSL_R_PSK_IDENTITY_NOT_FOUND = `enum SSL_R_PSK_IDENTITY_NOT_FOUND = 223;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_PSK_IDENTITY_NOT_FOUND); }))) {
            mixin(enumMixinStr_SSL_R_PSK_IDENTITY_NOT_FOUND);
        }
    }




    static if(!is(typeof(SSL_R_PSK_NO_CLIENT_CB))) {
        private enum enumMixinStr_SSL_R_PSK_NO_CLIENT_CB = `enum SSL_R_PSK_NO_CLIENT_CB = 224;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_PSK_NO_CLIENT_CB); }))) {
            mixin(enumMixinStr_SSL_R_PSK_NO_CLIENT_CB);
        }
    }




    static if(!is(typeof(SSL_R_PSK_NO_SERVER_CB))) {
        private enum enumMixinStr_SSL_R_PSK_NO_SERVER_CB = `enum SSL_R_PSK_NO_SERVER_CB = 225;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_PSK_NO_SERVER_CB); }))) {
            mixin(enumMixinStr_SSL_R_PSK_NO_SERVER_CB);
        }
    }




    static if(!is(typeof(SSL_R_READ_BIO_NOT_SET))) {
        private enum enumMixinStr_SSL_R_READ_BIO_NOT_SET = `enum SSL_R_READ_BIO_NOT_SET = 211;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_READ_BIO_NOT_SET); }))) {
            mixin(enumMixinStr_SSL_R_READ_BIO_NOT_SET);
        }
    }




    static if(!is(typeof(SSL_R_READ_TIMEOUT_EXPIRED))) {
        private enum enumMixinStr_SSL_R_READ_TIMEOUT_EXPIRED = `enum SSL_R_READ_TIMEOUT_EXPIRED = 312;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_READ_TIMEOUT_EXPIRED); }))) {
            mixin(enumMixinStr_SSL_R_READ_TIMEOUT_EXPIRED);
        }
    }




    static if(!is(typeof(SSL_R_RECORD_LENGTH_MISMATCH))) {
        private enum enumMixinStr_SSL_R_RECORD_LENGTH_MISMATCH = `enum SSL_R_RECORD_LENGTH_MISMATCH = 213;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_RECORD_LENGTH_MISMATCH); }))) {
            mixin(enumMixinStr_SSL_R_RECORD_LENGTH_MISMATCH);
        }
    }




    static if(!is(typeof(SSL_R_RECORD_TOO_SMALL))) {
        private enum enumMixinStr_SSL_R_RECORD_TOO_SMALL = `enum SSL_R_RECORD_TOO_SMALL = 298;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_RECORD_TOO_SMALL); }))) {
            mixin(enumMixinStr_SSL_R_RECORD_TOO_SMALL);
        }
    }




    static if(!is(typeof(SSL_R_RENEGOTIATE_EXT_TOO_LONG))) {
        private enum enumMixinStr_SSL_R_RENEGOTIATE_EXT_TOO_LONG = `enum SSL_R_RENEGOTIATE_EXT_TOO_LONG = 335;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_RENEGOTIATE_EXT_TOO_LONG); }))) {
            mixin(enumMixinStr_SSL_R_RENEGOTIATE_EXT_TOO_LONG);
        }
    }




    static if(!is(typeof(SSL_R_RENEGOTIATION_ENCODING_ERR))) {
        private enum enumMixinStr_SSL_R_RENEGOTIATION_ENCODING_ERR = `enum SSL_R_RENEGOTIATION_ENCODING_ERR = 336;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_RENEGOTIATION_ENCODING_ERR); }))) {
            mixin(enumMixinStr_SSL_R_RENEGOTIATION_ENCODING_ERR);
        }
    }




    static if(!is(typeof(SSL_R_RENEGOTIATION_MISMATCH))) {
        private enum enumMixinStr_SSL_R_RENEGOTIATION_MISMATCH = `enum SSL_R_RENEGOTIATION_MISMATCH = 337;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_RENEGOTIATION_MISMATCH); }))) {
            mixin(enumMixinStr_SSL_R_RENEGOTIATION_MISMATCH);
        }
    }




    static if(!is(typeof(SSL_R_REQUEST_PENDING))) {
        private enum enumMixinStr_SSL_R_REQUEST_PENDING = `enum SSL_R_REQUEST_PENDING = 285;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_REQUEST_PENDING); }))) {
            mixin(enumMixinStr_SSL_R_REQUEST_PENDING);
        }
    }




    static if(!is(typeof(SSL_R_REQUEST_SENT))) {
        private enum enumMixinStr_SSL_R_REQUEST_SENT = `enum SSL_R_REQUEST_SENT = 286;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_REQUEST_SENT); }))) {
            mixin(enumMixinStr_SSL_R_REQUEST_SENT);
        }
    }




    static if(!is(typeof(SSL_R_REQUIRED_CIPHER_MISSING))) {
        private enum enumMixinStr_SSL_R_REQUIRED_CIPHER_MISSING = `enum SSL_R_REQUIRED_CIPHER_MISSING = 215;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_REQUIRED_CIPHER_MISSING); }))) {
            mixin(enumMixinStr_SSL_R_REQUIRED_CIPHER_MISSING);
        }
    }




    static if(!is(typeof(SSL_R_REQUIRED_COMPRESSION_ALGORITHM_MISSING))) {
        private enum enumMixinStr_SSL_R_REQUIRED_COMPRESSION_ALGORITHM_MISSING = `enum SSL_R_REQUIRED_COMPRESSION_ALGORITHM_MISSING = 342;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_REQUIRED_COMPRESSION_ALGORITHM_MISSING); }))) {
            mixin(enumMixinStr_SSL_R_REQUIRED_COMPRESSION_ALGORITHM_MISSING);
        }
    }




    static if(!is(typeof(SSL_R_SCSV_RECEIVED_WHEN_RENEGOTIATING))) {
        private enum enumMixinStr_SSL_R_SCSV_RECEIVED_WHEN_RENEGOTIATING = `enum SSL_R_SCSV_RECEIVED_WHEN_RENEGOTIATING = 345;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_SCSV_RECEIVED_WHEN_RENEGOTIATING); }))) {
            mixin(enumMixinStr_SSL_R_SCSV_RECEIVED_WHEN_RENEGOTIATING);
        }
    }




    static if(!is(typeof(SSL_R_SCT_VERIFICATION_FAILED))) {
        private enum enumMixinStr_SSL_R_SCT_VERIFICATION_FAILED = `enum SSL_R_SCT_VERIFICATION_FAILED = 208;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_SCT_VERIFICATION_FAILED); }))) {
            mixin(enumMixinStr_SSL_R_SCT_VERIFICATION_FAILED);
        }
    }




    static if(!is(typeof(SSL_R_SERVERHELLO_TLSEXT))) {
        private enum enumMixinStr_SSL_R_SERVERHELLO_TLSEXT = `enum SSL_R_SERVERHELLO_TLSEXT = 275;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_SERVERHELLO_TLSEXT); }))) {
            mixin(enumMixinStr_SSL_R_SERVERHELLO_TLSEXT);
        }
    }




    static if(!is(typeof(SSL_R_SESSION_ID_CONTEXT_UNINITIALIZED))) {
        private enum enumMixinStr_SSL_R_SESSION_ID_CONTEXT_UNINITIALIZED = `enum SSL_R_SESSION_ID_CONTEXT_UNINITIALIZED = 277;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_SESSION_ID_CONTEXT_UNINITIALIZED); }))) {
            mixin(enumMixinStr_SSL_R_SESSION_ID_CONTEXT_UNINITIALIZED);
        }
    }




    static if(!is(typeof(SSL_R_SHUTDOWN_WHILE_IN_INIT))) {
        private enum enumMixinStr_SSL_R_SHUTDOWN_WHILE_IN_INIT = `enum SSL_R_SHUTDOWN_WHILE_IN_INIT = 407;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_SHUTDOWN_WHILE_IN_INIT); }))) {
            mixin(enumMixinStr_SSL_R_SHUTDOWN_WHILE_IN_INIT);
        }
    }




    static if(!is(typeof(SSL_R_SIGNATURE_ALGORITHMS_ERROR))) {
        private enum enumMixinStr_SSL_R_SIGNATURE_ALGORITHMS_ERROR = `enum SSL_R_SIGNATURE_ALGORITHMS_ERROR = 360;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_SIGNATURE_ALGORITHMS_ERROR); }))) {
            mixin(enumMixinStr_SSL_R_SIGNATURE_ALGORITHMS_ERROR);
        }
    }




    static if(!is(typeof(SSL_R_SIGNATURE_FOR_NON_SIGNING_CERTIFICATE))) {
        private enum enumMixinStr_SSL_R_SIGNATURE_FOR_NON_SIGNING_CERTIFICATE = `enum SSL_R_SIGNATURE_FOR_NON_SIGNING_CERTIFICATE = 220;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_SIGNATURE_FOR_NON_SIGNING_CERTIFICATE); }))) {
            mixin(enumMixinStr_SSL_R_SIGNATURE_FOR_NON_SIGNING_CERTIFICATE);
        }
    }




    static if(!is(typeof(SSL_R_SRP_A_CALC))) {
        private enum enumMixinStr_SSL_R_SRP_A_CALC = `enum SSL_R_SRP_A_CALC = 361;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_SRP_A_CALC); }))) {
            mixin(enumMixinStr_SSL_R_SRP_A_CALC);
        }
    }




    static if(!is(typeof(SSL_R_SRTP_COULD_NOT_ALLOCATE_PROFILES))) {
        private enum enumMixinStr_SSL_R_SRTP_COULD_NOT_ALLOCATE_PROFILES = `enum SSL_R_SRTP_COULD_NOT_ALLOCATE_PROFILES = 362;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_SRTP_COULD_NOT_ALLOCATE_PROFILES); }))) {
            mixin(enumMixinStr_SSL_R_SRTP_COULD_NOT_ALLOCATE_PROFILES);
        }
    }




    static if(!is(typeof(SSL_R_SRTP_PROTECTION_PROFILE_LIST_TOO_LONG))) {
        private enum enumMixinStr_SSL_R_SRTP_PROTECTION_PROFILE_LIST_TOO_LONG = `enum SSL_R_SRTP_PROTECTION_PROFILE_LIST_TOO_LONG = 363;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_SRTP_PROTECTION_PROFILE_LIST_TOO_LONG); }))) {
            mixin(enumMixinStr_SSL_R_SRTP_PROTECTION_PROFILE_LIST_TOO_LONG);
        }
    }




    static if(!is(typeof(SSL_R_SRTP_UNKNOWN_PROTECTION_PROFILE))) {
        private enum enumMixinStr_SSL_R_SRTP_UNKNOWN_PROTECTION_PROFILE = `enum SSL_R_SRTP_UNKNOWN_PROTECTION_PROFILE = 364;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_SRTP_UNKNOWN_PROTECTION_PROFILE); }))) {
            mixin(enumMixinStr_SSL_R_SRTP_UNKNOWN_PROTECTION_PROFILE);
        }
    }




    static if(!is(typeof(SSL_R_SSL3_EXT_INVALID_MAX_FRAGMENT_LENGTH))) {
        private enum enumMixinStr_SSL_R_SSL3_EXT_INVALID_MAX_FRAGMENT_LENGTH = `enum SSL_R_SSL3_EXT_INVALID_MAX_FRAGMENT_LENGTH = 232;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_SSL3_EXT_INVALID_MAX_FRAGMENT_LENGTH); }))) {
            mixin(enumMixinStr_SSL_R_SSL3_EXT_INVALID_MAX_FRAGMENT_LENGTH);
        }
    }




    static if(!is(typeof(SSL_R_SSL3_EXT_INVALID_SERVERNAME))) {
        private enum enumMixinStr_SSL_R_SSL3_EXT_INVALID_SERVERNAME = `enum SSL_R_SSL3_EXT_INVALID_SERVERNAME = 319;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_SSL3_EXT_INVALID_SERVERNAME); }))) {
            mixin(enumMixinStr_SSL_R_SSL3_EXT_INVALID_SERVERNAME);
        }
    }




    static if(!is(typeof(SSL_R_SSL3_EXT_INVALID_SERVERNAME_TYPE))) {
        private enum enumMixinStr_SSL_R_SSL3_EXT_INVALID_SERVERNAME_TYPE = `enum SSL_R_SSL3_EXT_INVALID_SERVERNAME_TYPE = 320;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_SSL3_EXT_INVALID_SERVERNAME_TYPE); }))) {
            mixin(enumMixinStr_SSL_R_SSL3_EXT_INVALID_SERVERNAME_TYPE);
        }
    }




    static if(!is(typeof(SSL_R_SSL3_SESSION_ID_TOO_LONG))) {
        private enum enumMixinStr_SSL_R_SSL3_SESSION_ID_TOO_LONG = `enum SSL_R_SSL3_SESSION_ID_TOO_LONG = 300;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_SSL3_SESSION_ID_TOO_LONG); }))) {
            mixin(enumMixinStr_SSL_R_SSL3_SESSION_ID_TOO_LONG);
        }
    }




    static if(!is(typeof(SSL_R_SSLV3_ALERT_BAD_CERTIFICATE))) {
        private enum enumMixinStr_SSL_R_SSLV3_ALERT_BAD_CERTIFICATE = `enum SSL_R_SSLV3_ALERT_BAD_CERTIFICATE = 1042;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_SSLV3_ALERT_BAD_CERTIFICATE); }))) {
            mixin(enumMixinStr_SSL_R_SSLV3_ALERT_BAD_CERTIFICATE);
        }
    }




    static if(!is(typeof(SSL_R_SSLV3_ALERT_BAD_RECORD_MAC))) {
        private enum enumMixinStr_SSL_R_SSLV3_ALERT_BAD_RECORD_MAC = `enum SSL_R_SSLV3_ALERT_BAD_RECORD_MAC = 1020;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_SSLV3_ALERT_BAD_RECORD_MAC); }))) {
            mixin(enumMixinStr_SSL_R_SSLV3_ALERT_BAD_RECORD_MAC);
        }
    }




    static if(!is(typeof(SSL_R_SSLV3_ALERT_CERTIFICATE_EXPIRED))) {
        private enum enumMixinStr_SSL_R_SSLV3_ALERT_CERTIFICATE_EXPIRED = `enum SSL_R_SSLV3_ALERT_CERTIFICATE_EXPIRED = 1045;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_SSLV3_ALERT_CERTIFICATE_EXPIRED); }))) {
            mixin(enumMixinStr_SSL_R_SSLV3_ALERT_CERTIFICATE_EXPIRED);
        }
    }




    static if(!is(typeof(SSL_R_SSLV3_ALERT_CERTIFICATE_REVOKED))) {
        private enum enumMixinStr_SSL_R_SSLV3_ALERT_CERTIFICATE_REVOKED = `enum SSL_R_SSLV3_ALERT_CERTIFICATE_REVOKED = 1044;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_SSLV3_ALERT_CERTIFICATE_REVOKED); }))) {
            mixin(enumMixinStr_SSL_R_SSLV3_ALERT_CERTIFICATE_REVOKED);
        }
    }




    static if(!is(typeof(SSL_R_SSLV3_ALERT_CERTIFICATE_UNKNOWN))) {
        private enum enumMixinStr_SSL_R_SSLV3_ALERT_CERTIFICATE_UNKNOWN = `enum SSL_R_SSLV3_ALERT_CERTIFICATE_UNKNOWN = 1046;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_SSLV3_ALERT_CERTIFICATE_UNKNOWN); }))) {
            mixin(enumMixinStr_SSL_R_SSLV3_ALERT_CERTIFICATE_UNKNOWN);
        }
    }




    static if(!is(typeof(SSL_R_SSLV3_ALERT_DECOMPRESSION_FAILURE))) {
        private enum enumMixinStr_SSL_R_SSLV3_ALERT_DECOMPRESSION_FAILURE = `enum SSL_R_SSLV3_ALERT_DECOMPRESSION_FAILURE = 1030;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_SSLV3_ALERT_DECOMPRESSION_FAILURE); }))) {
            mixin(enumMixinStr_SSL_R_SSLV3_ALERT_DECOMPRESSION_FAILURE);
        }
    }




    static if(!is(typeof(SSL_R_SSLV3_ALERT_HANDSHAKE_FAILURE))) {
        private enum enumMixinStr_SSL_R_SSLV3_ALERT_HANDSHAKE_FAILURE = `enum SSL_R_SSLV3_ALERT_HANDSHAKE_FAILURE = 1040;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_SSLV3_ALERT_HANDSHAKE_FAILURE); }))) {
            mixin(enumMixinStr_SSL_R_SSLV3_ALERT_HANDSHAKE_FAILURE);
        }
    }




    static if(!is(typeof(SSL_R_SSLV3_ALERT_ILLEGAL_PARAMETER))) {
        private enum enumMixinStr_SSL_R_SSLV3_ALERT_ILLEGAL_PARAMETER = `enum SSL_R_SSLV3_ALERT_ILLEGAL_PARAMETER = 1047;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_SSLV3_ALERT_ILLEGAL_PARAMETER); }))) {
            mixin(enumMixinStr_SSL_R_SSLV3_ALERT_ILLEGAL_PARAMETER);
        }
    }




    static if(!is(typeof(SSL_R_SSLV3_ALERT_NO_CERTIFICATE))) {
        private enum enumMixinStr_SSL_R_SSLV3_ALERT_NO_CERTIFICATE = `enum SSL_R_SSLV3_ALERT_NO_CERTIFICATE = 1041;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_SSLV3_ALERT_NO_CERTIFICATE); }))) {
            mixin(enumMixinStr_SSL_R_SSLV3_ALERT_NO_CERTIFICATE);
        }
    }




    static if(!is(typeof(SSL_R_SSLV3_ALERT_UNEXPECTED_MESSAGE))) {
        private enum enumMixinStr_SSL_R_SSLV3_ALERT_UNEXPECTED_MESSAGE = `enum SSL_R_SSLV3_ALERT_UNEXPECTED_MESSAGE = 1010;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_SSLV3_ALERT_UNEXPECTED_MESSAGE); }))) {
            mixin(enumMixinStr_SSL_R_SSLV3_ALERT_UNEXPECTED_MESSAGE);
        }
    }




    static if(!is(typeof(SSL_R_SSLV3_ALERT_UNSUPPORTED_CERTIFICATE))) {
        private enum enumMixinStr_SSL_R_SSLV3_ALERT_UNSUPPORTED_CERTIFICATE = `enum SSL_R_SSLV3_ALERT_UNSUPPORTED_CERTIFICATE = 1043;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_SSLV3_ALERT_UNSUPPORTED_CERTIFICATE); }))) {
            mixin(enumMixinStr_SSL_R_SSLV3_ALERT_UNSUPPORTED_CERTIFICATE);
        }
    }




    static if(!is(typeof(SSL_R_SSL_COMMAND_SECTION_EMPTY))) {
        private enum enumMixinStr_SSL_R_SSL_COMMAND_SECTION_EMPTY = `enum SSL_R_SSL_COMMAND_SECTION_EMPTY = 117;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_SSL_COMMAND_SECTION_EMPTY); }))) {
            mixin(enumMixinStr_SSL_R_SSL_COMMAND_SECTION_EMPTY);
        }
    }




    static if(!is(typeof(SSL_R_SSL_COMMAND_SECTION_NOT_FOUND))) {
        private enum enumMixinStr_SSL_R_SSL_COMMAND_SECTION_NOT_FOUND = `enum SSL_R_SSL_COMMAND_SECTION_NOT_FOUND = 125;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_SSL_COMMAND_SECTION_NOT_FOUND); }))) {
            mixin(enumMixinStr_SSL_R_SSL_COMMAND_SECTION_NOT_FOUND);
        }
    }




    static if(!is(typeof(SSL_R_SSL_CTX_HAS_NO_DEFAULT_SSL_VERSION))) {
        private enum enumMixinStr_SSL_R_SSL_CTX_HAS_NO_DEFAULT_SSL_VERSION = `enum SSL_R_SSL_CTX_HAS_NO_DEFAULT_SSL_VERSION = 228;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_SSL_CTX_HAS_NO_DEFAULT_SSL_VERSION); }))) {
            mixin(enumMixinStr_SSL_R_SSL_CTX_HAS_NO_DEFAULT_SSL_VERSION);
        }
    }




    static if(!is(typeof(SSL_R_SSL_HANDSHAKE_FAILURE))) {
        private enum enumMixinStr_SSL_R_SSL_HANDSHAKE_FAILURE = `enum SSL_R_SSL_HANDSHAKE_FAILURE = 229;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_SSL_HANDSHAKE_FAILURE); }))) {
            mixin(enumMixinStr_SSL_R_SSL_HANDSHAKE_FAILURE);
        }
    }




    static if(!is(typeof(SSL_R_SSL_LIBRARY_HAS_NO_CIPHERS))) {
        private enum enumMixinStr_SSL_R_SSL_LIBRARY_HAS_NO_CIPHERS = `enum SSL_R_SSL_LIBRARY_HAS_NO_CIPHERS = 230;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_SSL_LIBRARY_HAS_NO_CIPHERS); }))) {
            mixin(enumMixinStr_SSL_R_SSL_LIBRARY_HAS_NO_CIPHERS);
        }
    }




    static if(!is(typeof(SSL_R_SSL_NEGATIVE_LENGTH))) {
        private enum enumMixinStr_SSL_R_SSL_NEGATIVE_LENGTH = `enum SSL_R_SSL_NEGATIVE_LENGTH = 372;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_SSL_NEGATIVE_LENGTH); }))) {
            mixin(enumMixinStr_SSL_R_SSL_NEGATIVE_LENGTH);
        }
    }




    static if(!is(typeof(SSL_R_SSL_SECTION_EMPTY))) {
        private enum enumMixinStr_SSL_R_SSL_SECTION_EMPTY = `enum SSL_R_SSL_SECTION_EMPTY = 126;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_SSL_SECTION_EMPTY); }))) {
            mixin(enumMixinStr_SSL_R_SSL_SECTION_EMPTY);
        }
    }




    static if(!is(typeof(SSL_R_SSL_SECTION_NOT_FOUND))) {
        private enum enumMixinStr_SSL_R_SSL_SECTION_NOT_FOUND = `enum SSL_R_SSL_SECTION_NOT_FOUND = 136;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_SSL_SECTION_NOT_FOUND); }))) {
            mixin(enumMixinStr_SSL_R_SSL_SECTION_NOT_FOUND);
        }
    }




    static if(!is(typeof(SSL_R_SSL_SESSION_ID_CALLBACK_FAILED))) {
        private enum enumMixinStr_SSL_R_SSL_SESSION_ID_CALLBACK_FAILED = `enum SSL_R_SSL_SESSION_ID_CALLBACK_FAILED = 301;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_SSL_SESSION_ID_CALLBACK_FAILED); }))) {
            mixin(enumMixinStr_SSL_R_SSL_SESSION_ID_CALLBACK_FAILED);
        }
    }




    static if(!is(typeof(SSL_R_SSL_SESSION_ID_CONFLICT))) {
        private enum enumMixinStr_SSL_R_SSL_SESSION_ID_CONFLICT = `enum SSL_R_SSL_SESSION_ID_CONFLICT = 302;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_SSL_SESSION_ID_CONFLICT); }))) {
            mixin(enumMixinStr_SSL_R_SSL_SESSION_ID_CONFLICT);
        }
    }




    static if(!is(typeof(SSL_R_SSL_SESSION_ID_CONTEXT_TOO_LONG))) {
        private enum enumMixinStr_SSL_R_SSL_SESSION_ID_CONTEXT_TOO_LONG = `enum SSL_R_SSL_SESSION_ID_CONTEXT_TOO_LONG = 273;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_SSL_SESSION_ID_CONTEXT_TOO_LONG); }))) {
            mixin(enumMixinStr_SSL_R_SSL_SESSION_ID_CONTEXT_TOO_LONG);
        }
    }




    static if(!is(typeof(SSL_R_SSL_SESSION_ID_HAS_BAD_LENGTH))) {
        private enum enumMixinStr_SSL_R_SSL_SESSION_ID_HAS_BAD_LENGTH = `enum SSL_R_SSL_SESSION_ID_HAS_BAD_LENGTH = 303;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_SSL_SESSION_ID_HAS_BAD_LENGTH); }))) {
            mixin(enumMixinStr_SSL_R_SSL_SESSION_ID_HAS_BAD_LENGTH);
        }
    }




    static if(!is(typeof(SSL_R_SSL_SESSION_ID_TOO_LONG))) {
        private enum enumMixinStr_SSL_R_SSL_SESSION_ID_TOO_LONG = `enum SSL_R_SSL_SESSION_ID_TOO_LONG = 408;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_SSL_SESSION_ID_TOO_LONG); }))) {
            mixin(enumMixinStr_SSL_R_SSL_SESSION_ID_TOO_LONG);
        }
    }




    static if(!is(typeof(SSL_R_SSL_SESSION_VERSION_MISMATCH))) {
        private enum enumMixinStr_SSL_R_SSL_SESSION_VERSION_MISMATCH = `enum SSL_R_SSL_SESSION_VERSION_MISMATCH = 210;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_SSL_SESSION_VERSION_MISMATCH); }))) {
            mixin(enumMixinStr_SSL_R_SSL_SESSION_VERSION_MISMATCH);
        }
    }




    static if(!is(typeof(SSL_R_STILL_IN_INIT))) {
        private enum enumMixinStr_SSL_R_STILL_IN_INIT = `enum SSL_R_STILL_IN_INIT = 121;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_STILL_IN_INIT); }))) {
            mixin(enumMixinStr_SSL_R_STILL_IN_INIT);
        }
    }




    static if(!is(typeof(SSL_R_TLSV13_ALERT_CERTIFICATE_REQUIRED))) {
        private enum enumMixinStr_SSL_R_TLSV13_ALERT_CERTIFICATE_REQUIRED = `enum SSL_R_TLSV13_ALERT_CERTIFICATE_REQUIRED = 1116;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_TLSV13_ALERT_CERTIFICATE_REQUIRED); }))) {
            mixin(enumMixinStr_SSL_R_TLSV13_ALERT_CERTIFICATE_REQUIRED);
        }
    }




    static if(!is(typeof(SSL_R_TLSV13_ALERT_MISSING_EXTENSION))) {
        private enum enumMixinStr_SSL_R_TLSV13_ALERT_MISSING_EXTENSION = `enum SSL_R_TLSV13_ALERT_MISSING_EXTENSION = 1109;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_TLSV13_ALERT_MISSING_EXTENSION); }))) {
            mixin(enumMixinStr_SSL_R_TLSV13_ALERT_MISSING_EXTENSION);
        }
    }




    static if(!is(typeof(SSL_R_TLSV1_ALERT_ACCESS_DENIED))) {
        private enum enumMixinStr_SSL_R_TLSV1_ALERT_ACCESS_DENIED = `enum SSL_R_TLSV1_ALERT_ACCESS_DENIED = 1049;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_TLSV1_ALERT_ACCESS_DENIED); }))) {
            mixin(enumMixinStr_SSL_R_TLSV1_ALERT_ACCESS_DENIED);
        }
    }




    static if(!is(typeof(SSL_R_TLSV1_ALERT_DECODE_ERROR))) {
        private enum enumMixinStr_SSL_R_TLSV1_ALERT_DECODE_ERROR = `enum SSL_R_TLSV1_ALERT_DECODE_ERROR = 1050;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_TLSV1_ALERT_DECODE_ERROR); }))) {
            mixin(enumMixinStr_SSL_R_TLSV1_ALERT_DECODE_ERROR);
        }
    }




    static if(!is(typeof(SSL_R_TLSV1_ALERT_DECRYPTION_FAILED))) {
        private enum enumMixinStr_SSL_R_TLSV1_ALERT_DECRYPTION_FAILED = `enum SSL_R_TLSV1_ALERT_DECRYPTION_FAILED = 1021;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_TLSV1_ALERT_DECRYPTION_FAILED); }))) {
            mixin(enumMixinStr_SSL_R_TLSV1_ALERT_DECRYPTION_FAILED);
        }
    }




    static if(!is(typeof(SSL_R_TLSV1_ALERT_DECRYPT_ERROR))) {
        private enum enumMixinStr_SSL_R_TLSV1_ALERT_DECRYPT_ERROR = `enum SSL_R_TLSV1_ALERT_DECRYPT_ERROR = 1051;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_TLSV1_ALERT_DECRYPT_ERROR); }))) {
            mixin(enumMixinStr_SSL_R_TLSV1_ALERT_DECRYPT_ERROR);
        }
    }




    static if(!is(typeof(SSL_R_TLSV1_ALERT_EXPORT_RESTRICTION))) {
        private enum enumMixinStr_SSL_R_TLSV1_ALERT_EXPORT_RESTRICTION = `enum SSL_R_TLSV1_ALERT_EXPORT_RESTRICTION = 1060;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_TLSV1_ALERT_EXPORT_RESTRICTION); }))) {
            mixin(enumMixinStr_SSL_R_TLSV1_ALERT_EXPORT_RESTRICTION);
        }
    }




    static if(!is(typeof(SSL_R_TLSV1_ALERT_INAPPROPRIATE_FALLBACK))) {
        private enum enumMixinStr_SSL_R_TLSV1_ALERT_INAPPROPRIATE_FALLBACK = `enum SSL_R_TLSV1_ALERT_INAPPROPRIATE_FALLBACK = 1086;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_TLSV1_ALERT_INAPPROPRIATE_FALLBACK); }))) {
            mixin(enumMixinStr_SSL_R_TLSV1_ALERT_INAPPROPRIATE_FALLBACK);
        }
    }




    static if(!is(typeof(SSL_R_TLSV1_ALERT_INSUFFICIENT_SECURITY))) {
        private enum enumMixinStr_SSL_R_TLSV1_ALERT_INSUFFICIENT_SECURITY = `enum SSL_R_TLSV1_ALERT_INSUFFICIENT_SECURITY = 1071;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_TLSV1_ALERT_INSUFFICIENT_SECURITY); }))) {
            mixin(enumMixinStr_SSL_R_TLSV1_ALERT_INSUFFICIENT_SECURITY);
        }
    }




    static if(!is(typeof(SSL_R_TLSV1_ALERT_INTERNAL_ERROR))) {
        private enum enumMixinStr_SSL_R_TLSV1_ALERT_INTERNAL_ERROR = `enum SSL_R_TLSV1_ALERT_INTERNAL_ERROR = 1080;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_TLSV1_ALERT_INTERNAL_ERROR); }))) {
            mixin(enumMixinStr_SSL_R_TLSV1_ALERT_INTERNAL_ERROR);
        }
    }




    static if(!is(typeof(SSL_R_TLSV1_ALERT_NO_RENEGOTIATION))) {
        private enum enumMixinStr_SSL_R_TLSV1_ALERT_NO_RENEGOTIATION = `enum SSL_R_TLSV1_ALERT_NO_RENEGOTIATION = 1100;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_TLSV1_ALERT_NO_RENEGOTIATION); }))) {
            mixin(enumMixinStr_SSL_R_TLSV1_ALERT_NO_RENEGOTIATION);
        }
    }




    static if(!is(typeof(SSL_R_TLSV1_ALERT_PROTOCOL_VERSION))) {
        private enum enumMixinStr_SSL_R_TLSV1_ALERT_PROTOCOL_VERSION = `enum SSL_R_TLSV1_ALERT_PROTOCOL_VERSION = 1070;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_TLSV1_ALERT_PROTOCOL_VERSION); }))) {
            mixin(enumMixinStr_SSL_R_TLSV1_ALERT_PROTOCOL_VERSION);
        }
    }




    static if(!is(typeof(SSL_R_TLSV1_ALERT_RECORD_OVERFLOW))) {
        private enum enumMixinStr_SSL_R_TLSV1_ALERT_RECORD_OVERFLOW = `enum SSL_R_TLSV1_ALERT_RECORD_OVERFLOW = 1022;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_TLSV1_ALERT_RECORD_OVERFLOW); }))) {
            mixin(enumMixinStr_SSL_R_TLSV1_ALERT_RECORD_OVERFLOW);
        }
    }




    static if(!is(typeof(SSL_R_TLSV1_ALERT_UNKNOWN_CA))) {
        private enum enumMixinStr_SSL_R_TLSV1_ALERT_UNKNOWN_CA = `enum SSL_R_TLSV1_ALERT_UNKNOWN_CA = 1048;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_TLSV1_ALERT_UNKNOWN_CA); }))) {
            mixin(enumMixinStr_SSL_R_TLSV1_ALERT_UNKNOWN_CA);
        }
    }




    static if(!is(typeof(SSL_R_TLSV1_ALERT_USER_CANCELLED))) {
        private enum enumMixinStr_SSL_R_TLSV1_ALERT_USER_CANCELLED = `enum SSL_R_TLSV1_ALERT_USER_CANCELLED = 1090;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_TLSV1_ALERT_USER_CANCELLED); }))) {
            mixin(enumMixinStr_SSL_R_TLSV1_ALERT_USER_CANCELLED);
        }
    }




    static if(!is(typeof(SSL_R_TLSV1_BAD_CERTIFICATE_HASH_VALUE))) {
        private enum enumMixinStr_SSL_R_TLSV1_BAD_CERTIFICATE_HASH_VALUE = `enum SSL_R_TLSV1_BAD_CERTIFICATE_HASH_VALUE = 1114;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_TLSV1_BAD_CERTIFICATE_HASH_VALUE); }))) {
            mixin(enumMixinStr_SSL_R_TLSV1_BAD_CERTIFICATE_HASH_VALUE);
        }
    }




    static if(!is(typeof(SSL_R_TLSV1_BAD_CERTIFICATE_STATUS_RESPONSE))) {
        private enum enumMixinStr_SSL_R_TLSV1_BAD_CERTIFICATE_STATUS_RESPONSE = `enum SSL_R_TLSV1_BAD_CERTIFICATE_STATUS_RESPONSE = 1113;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_TLSV1_BAD_CERTIFICATE_STATUS_RESPONSE); }))) {
            mixin(enumMixinStr_SSL_R_TLSV1_BAD_CERTIFICATE_STATUS_RESPONSE);
        }
    }




    static if(!is(typeof(SSL_R_TLSV1_CERTIFICATE_UNOBTAINABLE))) {
        private enum enumMixinStr_SSL_R_TLSV1_CERTIFICATE_UNOBTAINABLE = `enum SSL_R_TLSV1_CERTIFICATE_UNOBTAINABLE = 1111;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_TLSV1_CERTIFICATE_UNOBTAINABLE); }))) {
            mixin(enumMixinStr_SSL_R_TLSV1_CERTIFICATE_UNOBTAINABLE);
        }
    }




    static if(!is(typeof(SSL_R_TLSV1_UNRECOGNIZED_NAME))) {
        private enum enumMixinStr_SSL_R_TLSV1_UNRECOGNIZED_NAME = `enum SSL_R_TLSV1_UNRECOGNIZED_NAME = 1112;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_TLSV1_UNRECOGNIZED_NAME); }))) {
            mixin(enumMixinStr_SSL_R_TLSV1_UNRECOGNIZED_NAME);
        }
    }




    static if(!is(typeof(SSL_R_TLSV1_UNSUPPORTED_EXTENSION))) {
        private enum enumMixinStr_SSL_R_TLSV1_UNSUPPORTED_EXTENSION = `enum SSL_R_TLSV1_UNSUPPORTED_EXTENSION = 1110;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_TLSV1_UNSUPPORTED_EXTENSION); }))) {
            mixin(enumMixinStr_SSL_R_TLSV1_UNSUPPORTED_EXTENSION);
        }
    }




    static if(!is(typeof(SSL_R_TLS_HEARTBEAT_PEER_DOESNT_ACCEPT))) {
        private enum enumMixinStr_SSL_R_TLS_HEARTBEAT_PEER_DOESNT_ACCEPT = `enum SSL_R_TLS_HEARTBEAT_PEER_DOESNT_ACCEPT = 365;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_TLS_HEARTBEAT_PEER_DOESNT_ACCEPT); }))) {
            mixin(enumMixinStr_SSL_R_TLS_HEARTBEAT_PEER_DOESNT_ACCEPT);
        }
    }




    static if(!is(typeof(SSL_R_TLS_HEARTBEAT_PENDING))) {
        private enum enumMixinStr_SSL_R_TLS_HEARTBEAT_PENDING = `enum SSL_R_TLS_HEARTBEAT_PENDING = 366;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_TLS_HEARTBEAT_PENDING); }))) {
            mixin(enumMixinStr_SSL_R_TLS_HEARTBEAT_PENDING);
        }
    }




    static if(!is(typeof(SSL_R_TLS_ILLEGAL_EXPORTER_LABEL))) {
        private enum enumMixinStr_SSL_R_TLS_ILLEGAL_EXPORTER_LABEL = `enum SSL_R_TLS_ILLEGAL_EXPORTER_LABEL = 367;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_TLS_ILLEGAL_EXPORTER_LABEL); }))) {
            mixin(enumMixinStr_SSL_R_TLS_ILLEGAL_EXPORTER_LABEL);
        }
    }




    static if(!is(typeof(SSL_R_TLS_INVALID_ECPOINTFORMAT_LIST))) {
        private enum enumMixinStr_SSL_R_TLS_INVALID_ECPOINTFORMAT_LIST = `enum SSL_R_TLS_INVALID_ECPOINTFORMAT_LIST = 157;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_TLS_INVALID_ECPOINTFORMAT_LIST); }))) {
            mixin(enumMixinStr_SSL_R_TLS_INVALID_ECPOINTFORMAT_LIST);
        }
    }




    static if(!is(typeof(SSL_R_TOO_MANY_KEY_UPDATES))) {
        private enum enumMixinStr_SSL_R_TOO_MANY_KEY_UPDATES = `enum SSL_R_TOO_MANY_KEY_UPDATES = 132;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_TOO_MANY_KEY_UPDATES); }))) {
            mixin(enumMixinStr_SSL_R_TOO_MANY_KEY_UPDATES);
        }
    }




    static if(!is(typeof(SSL_R_TOO_MANY_WARN_ALERTS))) {
        private enum enumMixinStr_SSL_R_TOO_MANY_WARN_ALERTS = `enum SSL_R_TOO_MANY_WARN_ALERTS = 409;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_TOO_MANY_WARN_ALERTS); }))) {
            mixin(enumMixinStr_SSL_R_TOO_MANY_WARN_ALERTS);
        }
    }




    static if(!is(typeof(SSL_R_TOO_MUCH_EARLY_DATA))) {
        private enum enumMixinStr_SSL_R_TOO_MUCH_EARLY_DATA = `enum SSL_R_TOO_MUCH_EARLY_DATA = 164;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_TOO_MUCH_EARLY_DATA); }))) {
            mixin(enumMixinStr_SSL_R_TOO_MUCH_EARLY_DATA);
        }
    }




    static if(!is(typeof(SSL_R_UNABLE_TO_FIND_ECDH_PARAMETERS))) {
        private enum enumMixinStr_SSL_R_UNABLE_TO_FIND_ECDH_PARAMETERS = `enum SSL_R_UNABLE_TO_FIND_ECDH_PARAMETERS = 314;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_UNABLE_TO_FIND_ECDH_PARAMETERS); }))) {
            mixin(enumMixinStr_SSL_R_UNABLE_TO_FIND_ECDH_PARAMETERS);
        }
    }




    static if(!is(typeof(SSL_R_UNABLE_TO_FIND_PUBLIC_KEY_PARAMETERS))) {
        private enum enumMixinStr_SSL_R_UNABLE_TO_FIND_PUBLIC_KEY_PARAMETERS = `enum SSL_R_UNABLE_TO_FIND_PUBLIC_KEY_PARAMETERS = 239;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_UNABLE_TO_FIND_PUBLIC_KEY_PARAMETERS); }))) {
            mixin(enumMixinStr_SSL_R_UNABLE_TO_FIND_PUBLIC_KEY_PARAMETERS);
        }
    }




    static if(!is(typeof(SSL_R_UNABLE_TO_LOAD_SSL3_MD5_ROUTINES))) {
        private enum enumMixinStr_SSL_R_UNABLE_TO_LOAD_SSL3_MD5_ROUTINES = `enum SSL_R_UNABLE_TO_LOAD_SSL3_MD5_ROUTINES = 242;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_UNABLE_TO_LOAD_SSL3_MD5_ROUTINES); }))) {
            mixin(enumMixinStr_SSL_R_UNABLE_TO_LOAD_SSL3_MD5_ROUTINES);
        }
    }




    static if(!is(typeof(SSL_R_UNABLE_TO_LOAD_SSL3_SHA1_ROUTINES))) {
        private enum enumMixinStr_SSL_R_UNABLE_TO_LOAD_SSL3_SHA1_ROUTINES = `enum SSL_R_UNABLE_TO_LOAD_SSL3_SHA1_ROUTINES = 243;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_UNABLE_TO_LOAD_SSL3_SHA1_ROUTINES); }))) {
            mixin(enumMixinStr_SSL_R_UNABLE_TO_LOAD_SSL3_SHA1_ROUTINES);
        }
    }




    static if(!is(typeof(SSL_R_UNEXPECTED_CCS_MESSAGE))) {
        private enum enumMixinStr_SSL_R_UNEXPECTED_CCS_MESSAGE = `enum SSL_R_UNEXPECTED_CCS_MESSAGE = 262;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_UNEXPECTED_CCS_MESSAGE); }))) {
            mixin(enumMixinStr_SSL_R_UNEXPECTED_CCS_MESSAGE);
        }
    }




    static if(!is(typeof(SSL_R_UNEXPECTED_END_OF_EARLY_DATA))) {
        private enum enumMixinStr_SSL_R_UNEXPECTED_END_OF_EARLY_DATA = `enum SSL_R_UNEXPECTED_END_OF_EARLY_DATA = 178;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_UNEXPECTED_END_OF_EARLY_DATA); }))) {
            mixin(enumMixinStr_SSL_R_UNEXPECTED_END_OF_EARLY_DATA);
        }
    }




    static if(!is(typeof(SSL_R_UNEXPECTED_MESSAGE))) {
        private enum enumMixinStr_SSL_R_UNEXPECTED_MESSAGE = `enum SSL_R_UNEXPECTED_MESSAGE = 244;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_UNEXPECTED_MESSAGE); }))) {
            mixin(enumMixinStr_SSL_R_UNEXPECTED_MESSAGE);
        }
    }




    static if(!is(typeof(SSL_R_UNEXPECTED_RECORD))) {
        private enum enumMixinStr_SSL_R_UNEXPECTED_RECORD = `enum SSL_R_UNEXPECTED_RECORD = 245;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_UNEXPECTED_RECORD); }))) {
            mixin(enumMixinStr_SSL_R_UNEXPECTED_RECORD);
        }
    }




    static if(!is(typeof(SSL_R_UNINITIALIZED))) {
        private enum enumMixinStr_SSL_R_UNINITIALIZED = `enum SSL_R_UNINITIALIZED = 276;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_UNINITIALIZED); }))) {
            mixin(enumMixinStr_SSL_R_UNINITIALIZED);
        }
    }




    static if(!is(typeof(SSL_R_UNKNOWN_ALERT_TYPE))) {
        private enum enumMixinStr_SSL_R_UNKNOWN_ALERT_TYPE = `enum SSL_R_UNKNOWN_ALERT_TYPE = 246;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_UNKNOWN_ALERT_TYPE); }))) {
            mixin(enumMixinStr_SSL_R_UNKNOWN_ALERT_TYPE);
        }
    }




    static if(!is(typeof(SSL_R_UNKNOWN_CERTIFICATE_TYPE))) {
        private enum enumMixinStr_SSL_R_UNKNOWN_CERTIFICATE_TYPE = `enum SSL_R_UNKNOWN_CERTIFICATE_TYPE = 247;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_UNKNOWN_CERTIFICATE_TYPE); }))) {
            mixin(enumMixinStr_SSL_R_UNKNOWN_CERTIFICATE_TYPE);
        }
    }




    static if(!is(typeof(SSL_R_UNKNOWN_CIPHER_RETURNED))) {
        private enum enumMixinStr_SSL_R_UNKNOWN_CIPHER_RETURNED = `enum SSL_R_UNKNOWN_CIPHER_RETURNED = 248;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_UNKNOWN_CIPHER_RETURNED); }))) {
            mixin(enumMixinStr_SSL_R_UNKNOWN_CIPHER_RETURNED);
        }
    }




    static if(!is(typeof(SSL_R_UNKNOWN_CIPHER_TYPE))) {
        private enum enumMixinStr_SSL_R_UNKNOWN_CIPHER_TYPE = `enum SSL_R_UNKNOWN_CIPHER_TYPE = 249;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_UNKNOWN_CIPHER_TYPE); }))) {
            mixin(enumMixinStr_SSL_R_UNKNOWN_CIPHER_TYPE);
        }
    }




    static if(!is(typeof(SSL_R_UNKNOWN_CMD_NAME))) {
        private enum enumMixinStr_SSL_R_UNKNOWN_CMD_NAME = `enum SSL_R_UNKNOWN_CMD_NAME = 386;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_UNKNOWN_CMD_NAME); }))) {
            mixin(enumMixinStr_SSL_R_UNKNOWN_CMD_NAME);
        }
    }




    static if(!is(typeof(SSL_R_UNKNOWN_COMMAND))) {
        private enum enumMixinStr_SSL_R_UNKNOWN_COMMAND = `enum SSL_R_UNKNOWN_COMMAND = 139;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_UNKNOWN_COMMAND); }))) {
            mixin(enumMixinStr_SSL_R_UNKNOWN_COMMAND);
        }
    }




    static if(!is(typeof(SSL_R_UNKNOWN_DIGEST))) {
        private enum enumMixinStr_SSL_R_UNKNOWN_DIGEST = `enum SSL_R_UNKNOWN_DIGEST = 368;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_UNKNOWN_DIGEST); }))) {
            mixin(enumMixinStr_SSL_R_UNKNOWN_DIGEST);
        }
    }




    static if(!is(typeof(SSL_R_UNKNOWN_KEY_EXCHANGE_TYPE))) {
        private enum enumMixinStr_SSL_R_UNKNOWN_KEY_EXCHANGE_TYPE = `enum SSL_R_UNKNOWN_KEY_EXCHANGE_TYPE = 250;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_UNKNOWN_KEY_EXCHANGE_TYPE); }))) {
            mixin(enumMixinStr_SSL_R_UNKNOWN_KEY_EXCHANGE_TYPE);
        }
    }




    static if(!is(typeof(SSL_R_UNKNOWN_PKEY_TYPE))) {
        private enum enumMixinStr_SSL_R_UNKNOWN_PKEY_TYPE = `enum SSL_R_UNKNOWN_PKEY_TYPE = 251;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_UNKNOWN_PKEY_TYPE); }))) {
            mixin(enumMixinStr_SSL_R_UNKNOWN_PKEY_TYPE);
        }
    }




    static if(!is(typeof(SSL_R_UNKNOWN_PROTOCOL))) {
        private enum enumMixinStr_SSL_R_UNKNOWN_PROTOCOL = `enum SSL_R_UNKNOWN_PROTOCOL = 252;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_UNKNOWN_PROTOCOL); }))) {
            mixin(enumMixinStr_SSL_R_UNKNOWN_PROTOCOL);
        }
    }




    static if(!is(typeof(SSL_R_UNKNOWN_SSL_VERSION))) {
        private enum enumMixinStr_SSL_R_UNKNOWN_SSL_VERSION = `enum SSL_R_UNKNOWN_SSL_VERSION = 254;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_UNKNOWN_SSL_VERSION); }))) {
            mixin(enumMixinStr_SSL_R_UNKNOWN_SSL_VERSION);
        }
    }




    static if(!is(typeof(SSL_R_UNKNOWN_STATE))) {
        private enum enumMixinStr_SSL_R_UNKNOWN_STATE = `enum SSL_R_UNKNOWN_STATE = 255;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_UNKNOWN_STATE); }))) {
            mixin(enumMixinStr_SSL_R_UNKNOWN_STATE);
        }
    }




    static if(!is(typeof(SSL_R_UNSAFE_LEGACY_RENEGOTIATION_DISABLED))) {
        private enum enumMixinStr_SSL_R_UNSAFE_LEGACY_RENEGOTIATION_DISABLED = `enum SSL_R_UNSAFE_LEGACY_RENEGOTIATION_DISABLED = 338;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_UNSAFE_LEGACY_RENEGOTIATION_DISABLED); }))) {
            mixin(enumMixinStr_SSL_R_UNSAFE_LEGACY_RENEGOTIATION_DISABLED);
        }
    }




    static if(!is(typeof(SSL_R_UNSOLICITED_EXTENSION))) {
        private enum enumMixinStr_SSL_R_UNSOLICITED_EXTENSION = `enum SSL_R_UNSOLICITED_EXTENSION = 217;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_UNSOLICITED_EXTENSION); }))) {
            mixin(enumMixinStr_SSL_R_UNSOLICITED_EXTENSION);
        }
    }




    static if(!is(typeof(SSL_R_UNSUPPORTED_COMPRESSION_ALGORITHM))) {
        private enum enumMixinStr_SSL_R_UNSUPPORTED_COMPRESSION_ALGORITHM = `enum SSL_R_UNSUPPORTED_COMPRESSION_ALGORITHM = 257;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_UNSUPPORTED_COMPRESSION_ALGORITHM); }))) {
            mixin(enumMixinStr_SSL_R_UNSUPPORTED_COMPRESSION_ALGORITHM);
        }
    }




    static if(!is(typeof(SSL_R_UNSUPPORTED_ELLIPTIC_CURVE))) {
        private enum enumMixinStr_SSL_R_UNSUPPORTED_ELLIPTIC_CURVE = `enum SSL_R_UNSUPPORTED_ELLIPTIC_CURVE = 315;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_UNSUPPORTED_ELLIPTIC_CURVE); }))) {
            mixin(enumMixinStr_SSL_R_UNSUPPORTED_ELLIPTIC_CURVE);
        }
    }




    static if(!is(typeof(SSL_R_UNSUPPORTED_PROTOCOL))) {
        private enum enumMixinStr_SSL_R_UNSUPPORTED_PROTOCOL = `enum SSL_R_UNSUPPORTED_PROTOCOL = 258;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_UNSUPPORTED_PROTOCOL); }))) {
            mixin(enumMixinStr_SSL_R_UNSUPPORTED_PROTOCOL);
        }
    }




    static if(!is(typeof(SSL_R_UNSUPPORTED_SSL_VERSION))) {
        private enum enumMixinStr_SSL_R_UNSUPPORTED_SSL_VERSION = `enum SSL_R_UNSUPPORTED_SSL_VERSION = 259;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_UNSUPPORTED_SSL_VERSION); }))) {
            mixin(enumMixinStr_SSL_R_UNSUPPORTED_SSL_VERSION);
        }
    }




    static if(!is(typeof(SSL_R_UNSUPPORTED_STATUS_TYPE))) {
        private enum enumMixinStr_SSL_R_UNSUPPORTED_STATUS_TYPE = `enum SSL_R_UNSUPPORTED_STATUS_TYPE = 329;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_UNSUPPORTED_STATUS_TYPE); }))) {
            mixin(enumMixinStr_SSL_R_UNSUPPORTED_STATUS_TYPE);
        }
    }




    static if(!is(typeof(SSL_R_USE_SRTP_NOT_NEGOTIATED))) {
        private enum enumMixinStr_SSL_R_USE_SRTP_NOT_NEGOTIATED = `enum SSL_R_USE_SRTP_NOT_NEGOTIATED = 369;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_USE_SRTP_NOT_NEGOTIATED); }))) {
            mixin(enumMixinStr_SSL_R_USE_SRTP_NOT_NEGOTIATED);
        }
    }




    static if(!is(typeof(SSL_R_VERSION_TOO_HIGH))) {
        private enum enumMixinStr_SSL_R_VERSION_TOO_HIGH = `enum SSL_R_VERSION_TOO_HIGH = 166;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_VERSION_TOO_HIGH); }))) {
            mixin(enumMixinStr_SSL_R_VERSION_TOO_HIGH);
        }
    }




    static if(!is(typeof(SSL_R_VERSION_TOO_LOW))) {
        private enum enumMixinStr_SSL_R_VERSION_TOO_LOW = `enum SSL_R_VERSION_TOO_LOW = 396;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_VERSION_TOO_LOW); }))) {
            mixin(enumMixinStr_SSL_R_VERSION_TOO_LOW);
        }
    }




    static if(!is(typeof(SSL_R_WRONG_CERTIFICATE_TYPE))) {
        private enum enumMixinStr_SSL_R_WRONG_CERTIFICATE_TYPE = `enum SSL_R_WRONG_CERTIFICATE_TYPE = 383;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_WRONG_CERTIFICATE_TYPE); }))) {
            mixin(enumMixinStr_SSL_R_WRONG_CERTIFICATE_TYPE);
        }
    }




    static if(!is(typeof(SSL_R_WRONG_CIPHER_RETURNED))) {
        private enum enumMixinStr_SSL_R_WRONG_CIPHER_RETURNED = `enum SSL_R_WRONG_CIPHER_RETURNED = 261;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_WRONG_CIPHER_RETURNED); }))) {
            mixin(enumMixinStr_SSL_R_WRONG_CIPHER_RETURNED);
        }
    }




    static if(!is(typeof(SSL_R_WRONG_CURVE))) {
        private enum enumMixinStr_SSL_R_WRONG_CURVE = `enum SSL_R_WRONG_CURVE = 378;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_WRONG_CURVE); }))) {
            mixin(enumMixinStr_SSL_R_WRONG_CURVE);
        }
    }




    static if(!is(typeof(SSL_R_WRONG_SIGNATURE_LENGTH))) {
        private enum enumMixinStr_SSL_R_WRONG_SIGNATURE_LENGTH = `enum SSL_R_WRONG_SIGNATURE_LENGTH = 264;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_WRONG_SIGNATURE_LENGTH); }))) {
            mixin(enumMixinStr_SSL_R_WRONG_SIGNATURE_LENGTH);
        }
    }




    static if(!is(typeof(SSL_R_WRONG_SIGNATURE_SIZE))) {
        private enum enumMixinStr_SSL_R_WRONG_SIGNATURE_SIZE = `enum SSL_R_WRONG_SIGNATURE_SIZE = 265;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_WRONG_SIGNATURE_SIZE); }))) {
            mixin(enumMixinStr_SSL_R_WRONG_SIGNATURE_SIZE);
        }
    }




    static if(!is(typeof(SSL_R_WRONG_SIGNATURE_TYPE))) {
        private enum enumMixinStr_SSL_R_WRONG_SIGNATURE_TYPE = `enum SSL_R_WRONG_SIGNATURE_TYPE = 370;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_WRONG_SIGNATURE_TYPE); }))) {
            mixin(enumMixinStr_SSL_R_WRONG_SIGNATURE_TYPE);
        }
    }




    static if(!is(typeof(SSL_R_WRONG_SSL_VERSION))) {
        private enum enumMixinStr_SSL_R_WRONG_SSL_VERSION = `enum SSL_R_WRONG_SSL_VERSION = 266;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_WRONG_SSL_VERSION); }))) {
            mixin(enumMixinStr_SSL_R_WRONG_SSL_VERSION);
        }
    }




    static if(!is(typeof(SSL_R_WRONG_VERSION_NUMBER))) {
        private enum enumMixinStr_SSL_R_WRONG_VERSION_NUMBER = `enum SSL_R_WRONG_VERSION_NUMBER = 267;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_WRONG_VERSION_NUMBER); }))) {
            mixin(enumMixinStr_SSL_R_WRONG_VERSION_NUMBER);
        }
    }




    static if(!is(typeof(SSL_R_X509_LIB))) {
        private enum enumMixinStr_SSL_R_X509_LIB = `enum SSL_R_X509_LIB = 268;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_X509_LIB); }))) {
            mixin(enumMixinStr_SSL_R_X509_LIB);
        }
    }




    static if(!is(typeof(SSL_R_X509_VERIFICATION_SETUP_PROBLEMS))) {
        private enum enumMixinStr_SSL_R_X509_VERIFICATION_SETUP_PROBLEMS = `enum SSL_R_X509_VERIFICATION_SETUP_PROBLEMS = 269;`;
        static if(is(typeof({ mixin(enumMixinStr_SSL_R_X509_VERIFICATION_SETUP_PROBLEMS); }))) {
            mixin(enumMixinStr_SSL_R_X509_VERIFICATION_SETUP_PROBLEMS);
        }
    }






    static if(!is(typeof(_STACK))) {
        private enum enumMixinStr__STACK = `enum _STACK = OPENSSL_STACK;`;
        static if(is(typeof({ mixin(enumMixinStr__STACK); }))) {
            mixin(enumMixinStr__STACK);
        }
    }




    static if(!is(typeof(sk_num))) {
        private enum enumMixinStr_sk_num = `enum sk_num = OPENSSL_sk_num;`;
        static if(is(typeof({ mixin(enumMixinStr_sk_num); }))) {
            mixin(enumMixinStr_sk_num);
        }
    }




    static if(!is(typeof(sk_value))) {
        private enum enumMixinStr_sk_value = `enum sk_value = OPENSSL_sk_value;`;
        static if(is(typeof({ mixin(enumMixinStr_sk_value); }))) {
            mixin(enumMixinStr_sk_value);
        }
    }




    static if(!is(typeof(sk_set))) {
        private enum enumMixinStr_sk_set = `enum sk_set = OPENSSL_sk_set;`;
        static if(is(typeof({ mixin(enumMixinStr_sk_set); }))) {
            mixin(enumMixinStr_sk_set);
        }
    }




    static if(!is(typeof(sk_new))) {
        private enum enumMixinStr_sk_new = `enum sk_new = OPENSSL_sk_new;`;
        static if(is(typeof({ mixin(enumMixinStr_sk_new); }))) {
            mixin(enumMixinStr_sk_new);
        }
    }




    static if(!is(typeof(sk_new_null))) {
        private enum enumMixinStr_sk_new_null = `enum sk_new_null = OPENSSL_sk_new_null;`;
        static if(is(typeof({ mixin(enumMixinStr_sk_new_null); }))) {
            mixin(enumMixinStr_sk_new_null);
        }
    }




    static if(!is(typeof(sk_free))) {
        private enum enumMixinStr_sk_free = `enum sk_free = OPENSSL_sk_free;`;
        static if(is(typeof({ mixin(enumMixinStr_sk_free); }))) {
            mixin(enumMixinStr_sk_free);
        }
    }




    static if(!is(typeof(sk_pop_free))) {
        private enum enumMixinStr_sk_pop_free = `enum sk_pop_free = OPENSSL_sk_pop_free;`;
        static if(is(typeof({ mixin(enumMixinStr_sk_pop_free); }))) {
            mixin(enumMixinStr_sk_pop_free);
        }
    }




    static if(!is(typeof(sk_deep_copy))) {
        private enum enumMixinStr_sk_deep_copy = `enum sk_deep_copy = OPENSSL_sk_deep_copy;`;
        static if(is(typeof({ mixin(enumMixinStr_sk_deep_copy); }))) {
            mixin(enumMixinStr_sk_deep_copy);
        }
    }




    static if(!is(typeof(sk_insert))) {
        private enum enumMixinStr_sk_insert = `enum sk_insert = OPENSSL_sk_insert;`;
        static if(is(typeof({ mixin(enumMixinStr_sk_insert); }))) {
            mixin(enumMixinStr_sk_insert);
        }
    }




    static if(!is(typeof(sk_delete))) {
        private enum enumMixinStr_sk_delete = `enum sk_delete = OPENSSL_sk_delete;`;
        static if(is(typeof({ mixin(enumMixinStr_sk_delete); }))) {
            mixin(enumMixinStr_sk_delete);
        }
    }




    static if(!is(typeof(sk_delete_ptr))) {
        private enum enumMixinStr_sk_delete_ptr = `enum sk_delete_ptr = OPENSSL_sk_delete_ptr;`;
        static if(is(typeof({ mixin(enumMixinStr_sk_delete_ptr); }))) {
            mixin(enumMixinStr_sk_delete_ptr);
        }
    }




    static if(!is(typeof(sk_find))) {
        private enum enumMixinStr_sk_find = `enum sk_find = OPENSSL_sk_find;`;
        static if(is(typeof({ mixin(enumMixinStr_sk_find); }))) {
            mixin(enumMixinStr_sk_find);
        }
    }




    static if(!is(typeof(sk_find_ex))) {
        private enum enumMixinStr_sk_find_ex = `enum sk_find_ex = OPENSSL_sk_find_ex;`;
        static if(is(typeof({ mixin(enumMixinStr_sk_find_ex); }))) {
            mixin(enumMixinStr_sk_find_ex);
        }
    }




    static if(!is(typeof(sk_push))) {
        private enum enumMixinStr_sk_push = `enum sk_push = OPENSSL_sk_push;`;
        static if(is(typeof({ mixin(enumMixinStr_sk_push); }))) {
            mixin(enumMixinStr_sk_push);
        }
    }




    static if(!is(typeof(sk_unshift))) {
        private enum enumMixinStr_sk_unshift = `enum sk_unshift = OPENSSL_sk_unshift;`;
        static if(is(typeof({ mixin(enumMixinStr_sk_unshift); }))) {
            mixin(enumMixinStr_sk_unshift);
        }
    }




    static if(!is(typeof(sk_shift))) {
        private enum enumMixinStr_sk_shift = `enum sk_shift = OPENSSL_sk_shift;`;
        static if(is(typeof({ mixin(enumMixinStr_sk_shift); }))) {
            mixin(enumMixinStr_sk_shift);
        }
    }




    static if(!is(typeof(sk_pop))) {
        private enum enumMixinStr_sk_pop = `enum sk_pop = OPENSSL_sk_pop;`;
        static if(is(typeof({ mixin(enumMixinStr_sk_pop); }))) {
            mixin(enumMixinStr_sk_pop);
        }
    }




    static if(!is(typeof(sk_zero))) {
        private enum enumMixinStr_sk_zero = `enum sk_zero = OPENSSL_sk_zero;`;
        static if(is(typeof({ mixin(enumMixinStr_sk_zero); }))) {
            mixin(enumMixinStr_sk_zero);
        }
    }




    static if(!is(typeof(sk_set_cmp_func))) {
        private enum enumMixinStr_sk_set_cmp_func = `enum sk_set_cmp_func = OPENSSL_sk_set_cmp_func;`;
        static if(is(typeof({ mixin(enumMixinStr_sk_set_cmp_func); }))) {
            mixin(enumMixinStr_sk_set_cmp_func);
        }
    }




    static if(!is(typeof(sk_dup))) {
        private enum enumMixinStr_sk_dup = `enum sk_dup = OPENSSL_sk_dup;`;
        static if(is(typeof({ mixin(enumMixinStr_sk_dup); }))) {
            mixin(enumMixinStr_sk_dup);
        }
    }




    static if(!is(typeof(sk_sort))) {
        private enum enumMixinStr_sk_sort = `enum sk_sort = OPENSSL_sk_sort;`;
        static if(is(typeof({ mixin(enumMixinStr_sk_sort); }))) {
            mixin(enumMixinStr_sk_sort);
        }
    }




    static if(!is(typeof(sk_is_sorted))) {
        private enum enumMixinStr_sk_is_sorted = `enum sk_is_sorted = OPENSSL_sk_is_sorted;`;
        static if(is(typeof({ mixin(enumMixinStr_sk_is_sorted); }))) {
            mixin(enumMixinStr_sk_is_sorted);
        }
    }
    static if(!is(typeof(X509_SIG_INFO_VALID))) {
        private enum enumMixinStr_X509_SIG_INFO_VALID = `enum X509_SIG_INFO_VALID = 0x1;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_SIG_INFO_VALID); }))) {
            mixin(enumMixinStr_X509_SIG_INFO_VALID);
        }
    }




    static if(!is(typeof(X509_SIG_INFO_TLS))) {
        private enum enumMixinStr_X509_SIG_INFO_TLS = `enum X509_SIG_INFO_TLS = 0x2;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_SIG_INFO_TLS); }))) {
            mixin(enumMixinStr_X509_SIG_INFO_TLS);
        }
    }




    static if(!is(typeof(X509_FILETYPE_PEM))) {
        private enum enumMixinStr_X509_FILETYPE_PEM = `enum X509_FILETYPE_PEM = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_FILETYPE_PEM); }))) {
            mixin(enumMixinStr_X509_FILETYPE_PEM);
        }
    }




    static if(!is(typeof(X509_FILETYPE_ASN1))) {
        private enum enumMixinStr_X509_FILETYPE_ASN1 = `enum X509_FILETYPE_ASN1 = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_FILETYPE_ASN1); }))) {
            mixin(enumMixinStr_X509_FILETYPE_ASN1);
        }
    }




    static if(!is(typeof(X509_FILETYPE_DEFAULT))) {
        private enum enumMixinStr_X509_FILETYPE_DEFAULT = `enum X509_FILETYPE_DEFAULT = 3;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_FILETYPE_DEFAULT); }))) {
            mixin(enumMixinStr_X509_FILETYPE_DEFAULT);
        }
    }




    static if(!is(typeof(X509v3_KU_DIGITAL_SIGNATURE))) {
        private enum enumMixinStr_X509v3_KU_DIGITAL_SIGNATURE = `enum X509v3_KU_DIGITAL_SIGNATURE = 0x0080;`;
        static if(is(typeof({ mixin(enumMixinStr_X509v3_KU_DIGITAL_SIGNATURE); }))) {
            mixin(enumMixinStr_X509v3_KU_DIGITAL_SIGNATURE);
        }
    }




    static if(!is(typeof(X509v3_KU_NON_REPUDIATION))) {
        private enum enumMixinStr_X509v3_KU_NON_REPUDIATION = `enum X509v3_KU_NON_REPUDIATION = 0x0040;`;
        static if(is(typeof({ mixin(enumMixinStr_X509v3_KU_NON_REPUDIATION); }))) {
            mixin(enumMixinStr_X509v3_KU_NON_REPUDIATION);
        }
    }




    static if(!is(typeof(X509v3_KU_KEY_ENCIPHERMENT))) {
        private enum enumMixinStr_X509v3_KU_KEY_ENCIPHERMENT = `enum X509v3_KU_KEY_ENCIPHERMENT = 0x0020;`;
        static if(is(typeof({ mixin(enumMixinStr_X509v3_KU_KEY_ENCIPHERMENT); }))) {
            mixin(enumMixinStr_X509v3_KU_KEY_ENCIPHERMENT);
        }
    }




    static if(!is(typeof(X509v3_KU_DATA_ENCIPHERMENT))) {
        private enum enumMixinStr_X509v3_KU_DATA_ENCIPHERMENT = `enum X509v3_KU_DATA_ENCIPHERMENT = 0x0010;`;
        static if(is(typeof({ mixin(enumMixinStr_X509v3_KU_DATA_ENCIPHERMENT); }))) {
            mixin(enumMixinStr_X509v3_KU_DATA_ENCIPHERMENT);
        }
    }




    static if(!is(typeof(X509v3_KU_KEY_AGREEMENT))) {
        private enum enumMixinStr_X509v3_KU_KEY_AGREEMENT = `enum X509v3_KU_KEY_AGREEMENT = 0x0008;`;
        static if(is(typeof({ mixin(enumMixinStr_X509v3_KU_KEY_AGREEMENT); }))) {
            mixin(enumMixinStr_X509v3_KU_KEY_AGREEMENT);
        }
    }




    static if(!is(typeof(X509v3_KU_KEY_CERT_SIGN))) {
        private enum enumMixinStr_X509v3_KU_KEY_CERT_SIGN = `enum X509v3_KU_KEY_CERT_SIGN = 0x0004;`;
        static if(is(typeof({ mixin(enumMixinStr_X509v3_KU_KEY_CERT_SIGN); }))) {
            mixin(enumMixinStr_X509v3_KU_KEY_CERT_SIGN);
        }
    }




    static if(!is(typeof(X509v3_KU_CRL_SIGN))) {
        private enum enumMixinStr_X509v3_KU_CRL_SIGN = `enum X509v3_KU_CRL_SIGN = 0x0002;`;
        static if(is(typeof({ mixin(enumMixinStr_X509v3_KU_CRL_SIGN); }))) {
            mixin(enumMixinStr_X509v3_KU_CRL_SIGN);
        }
    }




    static if(!is(typeof(X509v3_KU_ENCIPHER_ONLY))) {
        private enum enumMixinStr_X509v3_KU_ENCIPHER_ONLY = `enum X509v3_KU_ENCIPHER_ONLY = 0x0001;`;
        static if(is(typeof({ mixin(enumMixinStr_X509v3_KU_ENCIPHER_ONLY); }))) {
            mixin(enumMixinStr_X509v3_KU_ENCIPHER_ONLY);
        }
    }




    static if(!is(typeof(X509v3_KU_DECIPHER_ONLY))) {
        private enum enumMixinStr_X509v3_KU_DECIPHER_ONLY = `enum X509v3_KU_DECIPHER_ONLY = 0x8000;`;
        static if(is(typeof({ mixin(enumMixinStr_X509v3_KU_DECIPHER_ONLY); }))) {
            mixin(enumMixinStr_X509v3_KU_DECIPHER_ONLY);
        }
    }




    static if(!is(typeof(X509v3_KU_UNDEF))) {
        private enum enumMixinStr_X509v3_KU_UNDEF = `enum X509v3_KU_UNDEF = 0xffff;`;
        static if(is(typeof({ mixin(enumMixinStr_X509v3_KU_UNDEF); }))) {
            mixin(enumMixinStr_X509v3_KU_UNDEF);
        }
    }




    static if(!is(typeof(X509_EX_V_NETSCAPE_HACK))) {
        private enum enumMixinStr_X509_EX_V_NETSCAPE_HACK = `enum X509_EX_V_NETSCAPE_HACK = 0x8000;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_EX_V_NETSCAPE_HACK); }))) {
            mixin(enumMixinStr_X509_EX_V_NETSCAPE_HACK);
        }
    }




    static if(!is(typeof(X509_EX_V_INIT))) {
        private enum enumMixinStr_X509_EX_V_INIT = `enum X509_EX_V_INIT = 0x0001;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_EX_V_INIT); }))) {
            mixin(enumMixinStr_X509_EX_V_INIT);
        }
    }




    static if(!is(typeof(X509_TRUST_DEFAULT))) {
        private enum enumMixinStr_X509_TRUST_DEFAULT = `enum X509_TRUST_DEFAULT = 0;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_TRUST_DEFAULT); }))) {
            mixin(enumMixinStr_X509_TRUST_DEFAULT);
        }
    }




    static if(!is(typeof(X509_TRUST_COMPAT))) {
        private enum enumMixinStr_X509_TRUST_COMPAT = `enum X509_TRUST_COMPAT = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_TRUST_COMPAT); }))) {
            mixin(enumMixinStr_X509_TRUST_COMPAT);
        }
    }




    static if(!is(typeof(X509_TRUST_SSL_CLIENT))) {
        private enum enumMixinStr_X509_TRUST_SSL_CLIENT = `enum X509_TRUST_SSL_CLIENT = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_TRUST_SSL_CLIENT); }))) {
            mixin(enumMixinStr_X509_TRUST_SSL_CLIENT);
        }
    }




    static if(!is(typeof(X509_TRUST_SSL_SERVER))) {
        private enum enumMixinStr_X509_TRUST_SSL_SERVER = `enum X509_TRUST_SSL_SERVER = 3;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_TRUST_SSL_SERVER); }))) {
            mixin(enumMixinStr_X509_TRUST_SSL_SERVER);
        }
    }




    static if(!is(typeof(X509_TRUST_EMAIL))) {
        private enum enumMixinStr_X509_TRUST_EMAIL = `enum X509_TRUST_EMAIL = 4;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_TRUST_EMAIL); }))) {
            mixin(enumMixinStr_X509_TRUST_EMAIL);
        }
    }




    static if(!is(typeof(X509_TRUST_OBJECT_SIGN))) {
        private enum enumMixinStr_X509_TRUST_OBJECT_SIGN = `enum X509_TRUST_OBJECT_SIGN = 5;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_TRUST_OBJECT_SIGN); }))) {
            mixin(enumMixinStr_X509_TRUST_OBJECT_SIGN);
        }
    }




    static if(!is(typeof(X509_TRUST_OCSP_SIGN))) {
        private enum enumMixinStr_X509_TRUST_OCSP_SIGN = `enum X509_TRUST_OCSP_SIGN = 6;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_TRUST_OCSP_SIGN); }))) {
            mixin(enumMixinStr_X509_TRUST_OCSP_SIGN);
        }
    }




    static if(!is(typeof(X509_TRUST_OCSP_REQUEST))) {
        private enum enumMixinStr_X509_TRUST_OCSP_REQUEST = `enum X509_TRUST_OCSP_REQUEST = 7;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_TRUST_OCSP_REQUEST); }))) {
            mixin(enumMixinStr_X509_TRUST_OCSP_REQUEST);
        }
    }




    static if(!is(typeof(X509_TRUST_TSA))) {
        private enum enumMixinStr_X509_TRUST_TSA = `enum X509_TRUST_TSA = 8;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_TRUST_TSA); }))) {
            mixin(enumMixinStr_X509_TRUST_TSA);
        }
    }




    static if(!is(typeof(X509_TRUST_MIN))) {
        private enum enumMixinStr_X509_TRUST_MIN = `enum X509_TRUST_MIN = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_TRUST_MIN); }))) {
            mixin(enumMixinStr_X509_TRUST_MIN);
        }
    }




    static if(!is(typeof(X509_TRUST_MAX))) {
        private enum enumMixinStr_X509_TRUST_MAX = `enum X509_TRUST_MAX = 8;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_TRUST_MAX); }))) {
            mixin(enumMixinStr_X509_TRUST_MAX);
        }
    }




    static if(!is(typeof(X509_TRUST_DYNAMIC))) {
        private enum enumMixinStr_X509_TRUST_DYNAMIC = `enum X509_TRUST_DYNAMIC = ( 1U << 0 );`;
        static if(is(typeof({ mixin(enumMixinStr_X509_TRUST_DYNAMIC); }))) {
            mixin(enumMixinStr_X509_TRUST_DYNAMIC);
        }
    }




    static if(!is(typeof(X509_TRUST_DYNAMIC_NAME))) {
        private enum enumMixinStr_X509_TRUST_DYNAMIC_NAME = `enum X509_TRUST_DYNAMIC_NAME = ( 1U << 1 );`;
        static if(is(typeof({ mixin(enumMixinStr_X509_TRUST_DYNAMIC_NAME); }))) {
            mixin(enumMixinStr_X509_TRUST_DYNAMIC_NAME);
        }
    }




    static if(!is(typeof(X509_TRUST_NO_SS_COMPAT))) {
        private enum enumMixinStr_X509_TRUST_NO_SS_COMPAT = `enum X509_TRUST_NO_SS_COMPAT = ( 1U << 2 );`;
        static if(is(typeof({ mixin(enumMixinStr_X509_TRUST_NO_SS_COMPAT); }))) {
            mixin(enumMixinStr_X509_TRUST_NO_SS_COMPAT);
        }
    }




    static if(!is(typeof(X509_TRUST_DO_SS_COMPAT))) {
        private enum enumMixinStr_X509_TRUST_DO_SS_COMPAT = `enum X509_TRUST_DO_SS_COMPAT = ( 1U << 3 );`;
        static if(is(typeof({ mixin(enumMixinStr_X509_TRUST_DO_SS_COMPAT); }))) {
            mixin(enumMixinStr_X509_TRUST_DO_SS_COMPAT);
        }
    }




    static if(!is(typeof(X509_TRUST_OK_ANY_EKU))) {
        private enum enumMixinStr_X509_TRUST_OK_ANY_EKU = `enum X509_TRUST_OK_ANY_EKU = ( 1U << 4 );`;
        static if(is(typeof({ mixin(enumMixinStr_X509_TRUST_OK_ANY_EKU); }))) {
            mixin(enumMixinStr_X509_TRUST_OK_ANY_EKU);
        }
    }




    static if(!is(typeof(X509_TRUST_TRUSTED))) {
        private enum enumMixinStr_X509_TRUST_TRUSTED = `enum X509_TRUST_TRUSTED = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_TRUST_TRUSTED); }))) {
            mixin(enumMixinStr_X509_TRUST_TRUSTED);
        }
    }




    static if(!is(typeof(X509_TRUST_REJECTED))) {
        private enum enumMixinStr_X509_TRUST_REJECTED = `enum X509_TRUST_REJECTED = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_TRUST_REJECTED); }))) {
            mixin(enumMixinStr_X509_TRUST_REJECTED);
        }
    }




    static if(!is(typeof(X509_TRUST_UNTRUSTED))) {
        private enum enumMixinStr_X509_TRUST_UNTRUSTED = `enum X509_TRUST_UNTRUSTED = 3;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_TRUST_UNTRUSTED); }))) {
            mixin(enumMixinStr_X509_TRUST_UNTRUSTED);
        }
    }




    static if(!is(typeof(X509_FLAG_COMPAT))) {
        private enum enumMixinStr_X509_FLAG_COMPAT = `enum X509_FLAG_COMPAT = 0;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_FLAG_COMPAT); }))) {
            mixin(enumMixinStr_X509_FLAG_COMPAT);
        }
    }




    static if(!is(typeof(X509_FLAG_NO_HEADER))) {
        private enum enumMixinStr_X509_FLAG_NO_HEADER = `enum X509_FLAG_NO_HEADER = 1L;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_FLAG_NO_HEADER); }))) {
            mixin(enumMixinStr_X509_FLAG_NO_HEADER);
        }
    }




    static if(!is(typeof(X509_FLAG_NO_VERSION))) {
        private enum enumMixinStr_X509_FLAG_NO_VERSION = `enum X509_FLAG_NO_VERSION = ( 1L << 1 );`;
        static if(is(typeof({ mixin(enumMixinStr_X509_FLAG_NO_VERSION); }))) {
            mixin(enumMixinStr_X509_FLAG_NO_VERSION);
        }
    }




    static if(!is(typeof(X509_FLAG_NO_SERIAL))) {
        private enum enumMixinStr_X509_FLAG_NO_SERIAL = `enum X509_FLAG_NO_SERIAL = ( 1L << 2 );`;
        static if(is(typeof({ mixin(enumMixinStr_X509_FLAG_NO_SERIAL); }))) {
            mixin(enumMixinStr_X509_FLAG_NO_SERIAL);
        }
    }




    static if(!is(typeof(X509_FLAG_NO_SIGNAME))) {
        private enum enumMixinStr_X509_FLAG_NO_SIGNAME = `enum X509_FLAG_NO_SIGNAME = ( 1L << 3 );`;
        static if(is(typeof({ mixin(enumMixinStr_X509_FLAG_NO_SIGNAME); }))) {
            mixin(enumMixinStr_X509_FLAG_NO_SIGNAME);
        }
    }




    static if(!is(typeof(X509_FLAG_NO_ISSUER))) {
        private enum enumMixinStr_X509_FLAG_NO_ISSUER = `enum X509_FLAG_NO_ISSUER = ( 1L << 4 );`;
        static if(is(typeof({ mixin(enumMixinStr_X509_FLAG_NO_ISSUER); }))) {
            mixin(enumMixinStr_X509_FLAG_NO_ISSUER);
        }
    }




    static if(!is(typeof(X509_FLAG_NO_VALIDITY))) {
        private enum enumMixinStr_X509_FLAG_NO_VALIDITY = `enum X509_FLAG_NO_VALIDITY = ( 1L << 5 );`;
        static if(is(typeof({ mixin(enumMixinStr_X509_FLAG_NO_VALIDITY); }))) {
            mixin(enumMixinStr_X509_FLAG_NO_VALIDITY);
        }
    }




    static if(!is(typeof(X509_FLAG_NO_SUBJECT))) {
        private enum enumMixinStr_X509_FLAG_NO_SUBJECT = `enum X509_FLAG_NO_SUBJECT = ( 1L << 6 );`;
        static if(is(typeof({ mixin(enumMixinStr_X509_FLAG_NO_SUBJECT); }))) {
            mixin(enumMixinStr_X509_FLAG_NO_SUBJECT);
        }
    }




    static if(!is(typeof(X509_FLAG_NO_PUBKEY))) {
        private enum enumMixinStr_X509_FLAG_NO_PUBKEY = `enum X509_FLAG_NO_PUBKEY = ( 1L << 7 );`;
        static if(is(typeof({ mixin(enumMixinStr_X509_FLAG_NO_PUBKEY); }))) {
            mixin(enumMixinStr_X509_FLAG_NO_PUBKEY);
        }
    }




    static if(!is(typeof(X509_FLAG_NO_EXTENSIONS))) {
        private enum enumMixinStr_X509_FLAG_NO_EXTENSIONS = `enum X509_FLAG_NO_EXTENSIONS = ( 1L << 8 );`;
        static if(is(typeof({ mixin(enumMixinStr_X509_FLAG_NO_EXTENSIONS); }))) {
            mixin(enumMixinStr_X509_FLAG_NO_EXTENSIONS);
        }
    }




    static if(!is(typeof(X509_FLAG_NO_SIGDUMP))) {
        private enum enumMixinStr_X509_FLAG_NO_SIGDUMP = `enum X509_FLAG_NO_SIGDUMP = ( 1L << 9 );`;
        static if(is(typeof({ mixin(enumMixinStr_X509_FLAG_NO_SIGDUMP); }))) {
            mixin(enumMixinStr_X509_FLAG_NO_SIGDUMP);
        }
    }




    static if(!is(typeof(X509_FLAG_NO_AUX))) {
        private enum enumMixinStr_X509_FLAG_NO_AUX = `enum X509_FLAG_NO_AUX = ( 1L << 10 );`;
        static if(is(typeof({ mixin(enumMixinStr_X509_FLAG_NO_AUX); }))) {
            mixin(enumMixinStr_X509_FLAG_NO_AUX);
        }
    }




    static if(!is(typeof(X509_FLAG_NO_ATTRIBUTES))) {
        private enum enumMixinStr_X509_FLAG_NO_ATTRIBUTES = `enum X509_FLAG_NO_ATTRIBUTES = ( 1L << 11 );`;
        static if(is(typeof({ mixin(enumMixinStr_X509_FLAG_NO_ATTRIBUTES); }))) {
            mixin(enumMixinStr_X509_FLAG_NO_ATTRIBUTES);
        }
    }




    static if(!is(typeof(X509_FLAG_NO_IDS))) {
        private enum enumMixinStr_X509_FLAG_NO_IDS = `enum X509_FLAG_NO_IDS = ( 1L << 12 );`;
        static if(is(typeof({ mixin(enumMixinStr_X509_FLAG_NO_IDS); }))) {
            mixin(enumMixinStr_X509_FLAG_NO_IDS);
        }
    }




    static if(!is(typeof(XN_FLAG_SEP_MASK))) {
        private enum enumMixinStr_XN_FLAG_SEP_MASK = `enum XN_FLAG_SEP_MASK = ( 0xf << 16 );`;
        static if(is(typeof({ mixin(enumMixinStr_XN_FLAG_SEP_MASK); }))) {
            mixin(enumMixinStr_XN_FLAG_SEP_MASK);
        }
    }




    static if(!is(typeof(XN_FLAG_COMPAT))) {
        private enum enumMixinStr_XN_FLAG_COMPAT = `enum XN_FLAG_COMPAT = 0;`;
        static if(is(typeof({ mixin(enumMixinStr_XN_FLAG_COMPAT); }))) {
            mixin(enumMixinStr_XN_FLAG_COMPAT);
        }
    }




    static if(!is(typeof(XN_FLAG_SEP_COMMA_PLUS))) {
        private enum enumMixinStr_XN_FLAG_SEP_COMMA_PLUS = `enum XN_FLAG_SEP_COMMA_PLUS = ( 1 << 16 );`;
        static if(is(typeof({ mixin(enumMixinStr_XN_FLAG_SEP_COMMA_PLUS); }))) {
            mixin(enumMixinStr_XN_FLAG_SEP_COMMA_PLUS);
        }
    }




    static if(!is(typeof(XN_FLAG_SEP_CPLUS_SPC))) {
        private enum enumMixinStr_XN_FLAG_SEP_CPLUS_SPC = `enum XN_FLAG_SEP_CPLUS_SPC = ( 2 << 16 );`;
        static if(is(typeof({ mixin(enumMixinStr_XN_FLAG_SEP_CPLUS_SPC); }))) {
            mixin(enumMixinStr_XN_FLAG_SEP_CPLUS_SPC);
        }
    }




    static if(!is(typeof(XN_FLAG_SEP_SPLUS_SPC))) {
        private enum enumMixinStr_XN_FLAG_SEP_SPLUS_SPC = `enum XN_FLAG_SEP_SPLUS_SPC = ( 3 << 16 );`;
        static if(is(typeof({ mixin(enumMixinStr_XN_FLAG_SEP_SPLUS_SPC); }))) {
            mixin(enumMixinStr_XN_FLAG_SEP_SPLUS_SPC);
        }
    }




    static if(!is(typeof(XN_FLAG_SEP_MULTILINE))) {
        private enum enumMixinStr_XN_FLAG_SEP_MULTILINE = `enum XN_FLAG_SEP_MULTILINE = ( 4 << 16 );`;
        static if(is(typeof({ mixin(enumMixinStr_XN_FLAG_SEP_MULTILINE); }))) {
            mixin(enumMixinStr_XN_FLAG_SEP_MULTILINE);
        }
    }




    static if(!is(typeof(XN_FLAG_DN_REV))) {
        private enum enumMixinStr_XN_FLAG_DN_REV = `enum XN_FLAG_DN_REV = ( 1 << 20 );`;
        static if(is(typeof({ mixin(enumMixinStr_XN_FLAG_DN_REV); }))) {
            mixin(enumMixinStr_XN_FLAG_DN_REV);
        }
    }




    static if(!is(typeof(XN_FLAG_FN_MASK))) {
        private enum enumMixinStr_XN_FLAG_FN_MASK = `enum XN_FLAG_FN_MASK = ( 0x3 << 21 );`;
        static if(is(typeof({ mixin(enumMixinStr_XN_FLAG_FN_MASK); }))) {
            mixin(enumMixinStr_XN_FLAG_FN_MASK);
        }
    }




    static if(!is(typeof(XN_FLAG_FN_SN))) {
        private enum enumMixinStr_XN_FLAG_FN_SN = `enum XN_FLAG_FN_SN = 0;`;
        static if(is(typeof({ mixin(enumMixinStr_XN_FLAG_FN_SN); }))) {
            mixin(enumMixinStr_XN_FLAG_FN_SN);
        }
    }




    static if(!is(typeof(XN_FLAG_FN_LN))) {
        private enum enumMixinStr_XN_FLAG_FN_LN = `enum XN_FLAG_FN_LN = ( 1 << 21 );`;
        static if(is(typeof({ mixin(enumMixinStr_XN_FLAG_FN_LN); }))) {
            mixin(enumMixinStr_XN_FLAG_FN_LN);
        }
    }




    static if(!is(typeof(XN_FLAG_FN_OID))) {
        private enum enumMixinStr_XN_FLAG_FN_OID = `enum XN_FLAG_FN_OID = ( 2 << 21 );`;
        static if(is(typeof({ mixin(enumMixinStr_XN_FLAG_FN_OID); }))) {
            mixin(enumMixinStr_XN_FLAG_FN_OID);
        }
    }




    static if(!is(typeof(XN_FLAG_FN_NONE))) {
        private enum enumMixinStr_XN_FLAG_FN_NONE = `enum XN_FLAG_FN_NONE = ( 3 << 21 );`;
        static if(is(typeof({ mixin(enumMixinStr_XN_FLAG_FN_NONE); }))) {
            mixin(enumMixinStr_XN_FLAG_FN_NONE);
        }
    }




    static if(!is(typeof(XN_FLAG_SPC_EQ))) {
        private enum enumMixinStr_XN_FLAG_SPC_EQ = `enum XN_FLAG_SPC_EQ = ( 1 << 23 );`;
        static if(is(typeof({ mixin(enumMixinStr_XN_FLAG_SPC_EQ); }))) {
            mixin(enumMixinStr_XN_FLAG_SPC_EQ);
        }
    }




    static if(!is(typeof(XN_FLAG_DUMP_UNKNOWN_FIELDS))) {
        private enum enumMixinStr_XN_FLAG_DUMP_UNKNOWN_FIELDS = `enum XN_FLAG_DUMP_UNKNOWN_FIELDS = ( 1 << 24 );`;
        static if(is(typeof({ mixin(enumMixinStr_XN_FLAG_DUMP_UNKNOWN_FIELDS); }))) {
            mixin(enumMixinStr_XN_FLAG_DUMP_UNKNOWN_FIELDS);
        }
    }




    static if(!is(typeof(XN_FLAG_FN_ALIGN))) {
        private enum enumMixinStr_XN_FLAG_FN_ALIGN = `enum XN_FLAG_FN_ALIGN = ( 1 << 25 );`;
        static if(is(typeof({ mixin(enumMixinStr_XN_FLAG_FN_ALIGN); }))) {
            mixin(enumMixinStr_XN_FLAG_FN_ALIGN);
        }
    }




    static if(!is(typeof(XN_FLAG_RFC2253))) {
        private enum enumMixinStr_XN_FLAG_RFC2253 = `enum XN_FLAG_RFC2253 = ( ( 1 | 2 | 4 | 0x10 | 0x100 | 0x200 ) | ( 1 << 16 ) | ( 1 << 20 ) | 0 | ( 1 << 24 ) );`;
        static if(is(typeof({ mixin(enumMixinStr_XN_FLAG_RFC2253); }))) {
            mixin(enumMixinStr_XN_FLAG_RFC2253);
        }
    }




    static if(!is(typeof(XN_FLAG_ONELINE))) {
        private enum enumMixinStr_XN_FLAG_ONELINE = `enum XN_FLAG_ONELINE = ( ( 1 | 2 | 4 | 0x10 | 0x100 | 0x200 ) | 8 | ( 2 << 16 ) | ( 1 << 23 ) | 0 );`;
        static if(is(typeof({ mixin(enumMixinStr_XN_FLAG_ONELINE); }))) {
            mixin(enumMixinStr_XN_FLAG_ONELINE);
        }
    }




    static if(!is(typeof(XN_FLAG_MULTILINE))) {
        private enum enumMixinStr_XN_FLAG_MULTILINE = `enum XN_FLAG_MULTILINE = ( 2 | 4 | ( 4 << 16 ) | ( 1 << 23 ) | ( 1 << 21 ) | ( 1 << 25 ) );`;
        static if(is(typeof({ mixin(enumMixinStr_XN_FLAG_MULTILINE); }))) {
            mixin(enumMixinStr_XN_FLAG_MULTILINE);
        }
    }




    static if(!is(typeof(X509_EXT_PACK_UNKNOWN))) {
        private enum enumMixinStr_X509_EXT_PACK_UNKNOWN = `enum X509_EXT_PACK_UNKNOWN = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_EXT_PACK_UNKNOWN); }))) {
            mixin(enumMixinStr_X509_EXT_PACK_UNKNOWN);
        }
    }




    static if(!is(typeof(X509_EXT_PACK_STRING))) {
        private enum enumMixinStr_X509_EXT_PACK_STRING = `enum X509_EXT_PACK_STRING = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_EXT_PACK_STRING); }))) {
            mixin(enumMixinStr_X509_EXT_PACK_STRING);
        }
    }
    static if(!is(typeof(X509_get_notBefore))) {
        private enum enumMixinStr_X509_get_notBefore = `enum X509_get_notBefore = X509_getm_notBefore;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_get_notBefore); }))) {
            mixin(enumMixinStr_X509_get_notBefore);
        }
    }




    static if(!is(typeof(X509_get_notAfter))) {
        private enum enumMixinStr_X509_get_notAfter = `enum X509_get_notAfter = X509_getm_notAfter;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_get_notAfter); }))) {
            mixin(enumMixinStr_X509_get_notAfter);
        }
    }




    static if(!is(typeof(X509_set_notBefore))) {
        private enum enumMixinStr_X509_set_notBefore = `enum X509_set_notBefore = X509_set1_notBefore;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_set_notBefore); }))) {
            mixin(enumMixinStr_X509_set_notBefore);
        }
    }




    static if(!is(typeof(X509_set_notAfter))) {
        private enum enumMixinStr_X509_set_notAfter = `enum X509_set_notAfter = X509_set1_notAfter;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_set_notAfter); }))) {
            mixin(enumMixinStr_X509_set_notAfter);
        }
    }




    static if(!is(typeof(X509_CRL_set_lastUpdate))) {
        private enum enumMixinStr_X509_CRL_set_lastUpdate = `enum X509_CRL_set_lastUpdate = X509_CRL_set1_lastUpdate;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_CRL_set_lastUpdate); }))) {
            mixin(enumMixinStr_X509_CRL_set_lastUpdate);
        }
    }




    static if(!is(typeof(X509_CRL_set_nextUpdate))) {
        private enum enumMixinStr_X509_CRL_set_nextUpdate = `enum X509_CRL_set_nextUpdate = X509_CRL_set1_nextUpdate;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_CRL_set_nextUpdate); }))) {
            mixin(enumMixinStr_X509_CRL_set_nextUpdate);
        }
    }






    static if(!is(typeof(X509_LU_RETRY))) {
        private enum enumMixinStr_X509_LU_RETRY = `enum X509_LU_RETRY = - 1;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_LU_RETRY); }))) {
            mixin(enumMixinStr_X509_LU_RETRY);
        }
    }




    static if(!is(typeof(X509_LU_FAIL))) {
        private enum enumMixinStr_X509_LU_FAIL = `enum X509_LU_FAIL = 0;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_LU_FAIL); }))) {
            mixin(enumMixinStr_X509_LU_FAIL);
        }
    }
    static if(!is(typeof(X509_L_FILE_LOAD))) {
        private enum enumMixinStr_X509_L_FILE_LOAD = `enum X509_L_FILE_LOAD = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_L_FILE_LOAD); }))) {
            mixin(enumMixinStr_X509_L_FILE_LOAD);
        }
    }




    static if(!is(typeof(X509_L_ADD_DIR))) {
        private enum enumMixinStr_X509_L_ADD_DIR = `enum X509_L_ADD_DIR = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_L_ADD_DIR); }))) {
            mixin(enumMixinStr_X509_L_ADD_DIR);
        }
    }
    static if(!is(typeof(X509_V_OK))) {
        private enum enumMixinStr_X509_V_OK = `enum X509_V_OK = 0;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_V_OK); }))) {
            mixin(enumMixinStr_X509_V_OK);
        }
    }




    static if(!is(typeof(X509_V_ERR_UNSPECIFIED))) {
        private enum enumMixinStr_X509_V_ERR_UNSPECIFIED = `enum X509_V_ERR_UNSPECIFIED = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_V_ERR_UNSPECIFIED); }))) {
            mixin(enumMixinStr_X509_V_ERR_UNSPECIFIED);
        }
    }




    static if(!is(typeof(X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT))) {
        private enum enumMixinStr_X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT = `enum X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT); }))) {
            mixin(enumMixinStr_X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT);
        }
    }




    static if(!is(typeof(X509_V_ERR_UNABLE_TO_GET_CRL))) {
        private enum enumMixinStr_X509_V_ERR_UNABLE_TO_GET_CRL = `enum X509_V_ERR_UNABLE_TO_GET_CRL = 3;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_V_ERR_UNABLE_TO_GET_CRL); }))) {
            mixin(enumMixinStr_X509_V_ERR_UNABLE_TO_GET_CRL);
        }
    }




    static if(!is(typeof(X509_V_ERR_UNABLE_TO_DECRYPT_CERT_SIGNATURE))) {
        private enum enumMixinStr_X509_V_ERR_UNABLE_TO_DECRYPT_CERT_SIGNATURE = `enum X509_V_ERR_UNABLE_TO_DECRYPT_CERT_SIGNATURE = 4;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_V_ERR_UNABLE_TO_DECRYPT_CERT_SIGNATURE); }))) {
            mixin(enumMixinStr_X509_V_ERR_UNABLE_TO_DECRYPT_CERT_SIGNATURE);
        }
    }




    static if(!is(typeof(X509_V_ERR_UNABLE_TO_DECRYPT_CRL_SIGNATURE))) {
        private enum enumMixinStr_X509_V_ERR_UNABLE_TO_DECRYPT_CRL_SIGNATURE = `enum X509_V_ERR_UNABLE_TO_DECRYPT_CRL_SIGNATURE = 5;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_V_ERR_UNABLE_TO_DECRYPT_CRL_SIGNATURE); }))) {
            mixin(enumMixinStr_X509_V_ERR_UNABLE_TO_DECRYPT_CRL_SIGNATURE);
        }
    }




    static if(!is(typeof(X509_V_ERR_UNABLE_TO_DECODE_ISSUER_PUBLIC_KEY))) {
        private enum enumMixinStr_X509_V_ERR_UNABLE_TO_DECODE_ISSUER_PUBLIC_KEY = `enum X509_V_ERR_UNABLE_TO_DECODE_ISSUER_PUBLIC_KEY = 6;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_V_ERR_UNABLE_TO_DECODE_ISSUER_PUBLIC_KEY); }))) {
            mixin(enumMixinStr_X509_V_ERR_UNABLE_TO_DECODE_ISSUER_PUBLIC_KEY);
        }
    }




    static if(!is(typeof(X509_V_ERR_CERT_SIGNATURE_FAILURE))) {
        private enum enumMixinStr_X509_V_ERR_CERT_SIGNATURE_FAILURE = `enum X509_V_ERR_CERT_SIGNATURE_FAILURE = 7;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_V_ERR_CERT_SIGNATURE_FAILURE); }))) {
            mixin(enumMixinStr_X509_V_ERR_CERT_SIGNATURE_FAILURE);
        }
    }




    static if(!is(typeof(X509_V_ERR_CRL_SIGNATURE_FAILURE))) {
        private enum enumMixinStr_X509_V_ERR_CRL_SIGNATURE_FAILURE = `enum X509_V_ERR_CRL_SIGNATURE_FAILURE = 8;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_V_ERR_CRL_SIGNATURE_FAILURE); }))) {
            mixin(enumMixinStr_X509_V_ERR_CRL_SIGNATURE_FAILURE);
        }
    }




    static if(!is(typeof(X509_V_ERR_CERT_NOT_YET_VALID))) {
        private enum enumMixinStr_X509_V_ERR_CERT_NOT_YET_VALID = `enum X509_V_ERR_CERT_NOT_YET_VALID = 9;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_V_ERR_CERT_NOT_YET_VALID); }))) {
            mixin(enumMixinStr_X509_V_ERR_CERT_NOT_YET_VALID);
        }
    }




    static if(!is(typeof(X509_V_ERR_CERT_HAS_EXPIRED))) {
        private enum enumMixinStr_X509_V_ERR_CERT_HAS_EXPIRED = `enum X509_V_ERR_CERT_HAS_EXPIRED = 10;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_V_ERR_CERT_HAS_EXPIRED); }))) {
            mixin(enumMixinStr_X509_V_ERR_CERT_HAS_EXPIRED);
        }
    }




    static if(!is(typeof(X509_V_ERR_CRL_NOT_YET_VALID))) {
        private enum enumMixinStr_X509_V_ERR_CRL_NOT_YET_VALID = `enum X509_V_ERR_CRL_NOT_YET_VALID = 11;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_V_ERR_CRL_NOT_YET_VALID); }))) {
            mixin(enumMixinStr_X509_V_ERR_CRL_NOT_YET_VALID);
        }
    }




    static if(!is(typeof(X509_V_ERR_CRL_HAS_EXPIRED))) {
        private enum enumMixinStr_X509_V_ERR_CRL_HAS_EXPIRED = `enum X509_V_ERR_CRL_HAS_EXPIRED = 12;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_V_ERR_CRL_HAS_EXPIRED); }))) {
            mixin(enumMixinStr_X509_V_ERR_CRL_HAS_EXPIRED);
        }
    }




    static if(!is(typeof(X509_V_ERR_ERROR_IN_CERT_NOT_BEFORE_FIELD))) {
        private enum enumMixinStr_X509_V_ERR_ERROR_IN_CERT_NOT_BEFORE_FIELD = `enum X509_V_ERR_ERROR_IN_CERT_NOT_BEFORE_FIELD = 13;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_V_ERR_ERROR_IN_CERT_NOT_BEFORE_FIELD); }))) {
            mixin(enumMixinStr_X509_V_ERR_ERROR_IN_CERT_NOT_BEFORE_FIELD);
        }
    }




    static if(!is(typeof(X509_V_ERR_ERROR_IN_CERT_NOT_AFTER_FIELD))) {
        private enum enumMixinStr_X509_V_ERR_ERROR_IN_CERT_NOT_AFTER_FIELD = `enum X509_V_ERR_ERROR_IN_CERT_NOT_AFTER_FIELD = 14;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_V_ERR_ERROR_IN_CERT_NOT_AFTER_FIELD); }))) {
            mixin(enumMixinStr_X509_V_ERR_ERROR_IN_CERT_NOT_AFTER_FIELD);
        }
    }




    static if(!is(typeof(X509_V_ERR_ERROR_IN_CRL_LAST_UPDATE_FIELD))) {
        private enum enumMixinStr_X509_V_ERR_ERROR_IN_CRL_LAST_UPDATE_FIELD = `enum X509_V_ERR_ERROR_IN_CRL_LAST_UPDATE_FIELD = 15;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_V_ERR_ERROR_IN_CRL_LAST_UPDATE_FIELD); }))) {
            mixin(enumMixinStr_X509_V_ERR_ERROR_IN_CRL_LAST_UPDATE_FIELD);
        }
    }




    static if(!is(typeof(X509_V_ERR_ERROR_IN_CRL_NEXT_UPDATE_FIELD))) {
        private enum enumMixinStr_X509_V_ERR_ERROR_IN_CRL_NEXT_UPDATE_FIELD = `enum X509_V_ERR_ERROR_IN_CRL_NEXT_UPDATE_FIELD = 16;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_V_ERR_ERROR_IN_CRL_NEXT_UPDATE_FIELD); }))) {
            mixin(enumMixinStr_X509_V_ERR_ERROR_IN_CRL_NEXT_UPDATE_FIELD);
        }
    }




    static if(!is(typeof(X509_V_ERR_OUT_OF_MEM))) {
        private enum enumMixinStr_X509_V_ERR_OUT_OF_MEM = `enum X509_V_ERR_OUT_OF_MEM = 17;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_V_ERR_OUT_OF_MEM); }))) {
            mixin(enumMixinStr_X509_V_ERR_OUT_OF_MEM);
        }
    }




    static if(!is(typeof(X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT))) {
        private enum enumMixinStr_X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT = `enum X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT = 18;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT); }))) {
            mixin(enumMixinStr_X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT);
        }
    }




    static if(!is(typeof(X509_V_ERR_SELF_SIGNED_CERT_IN_CHAIN))) {
        private enum enumMixinStr_X509_V_ERR_SELF_SIGNED_CERT_IN_CHAIN = `enum X509_V_ERR_SELF_SIGNED_CERT_IN_CHAIN = 19;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_V_ERR_SELF_SIGNED_CERT_IN_CHAIN); }))) {
            mixin(enumMixinStr_X509_V_ERR_SELF_SIGNED_CERT_IN_CHAIN);
        }
    }




    static if(!is(typeof(X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT_LOCALLY))) {
        private enum enumMixinStr_X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT_LOCALLY = `enum X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT_LOCALLY = 20;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT_LOCALLY); }))) {
            mixin(enumMixinStr_X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT_LOCALLY);
        }
    }




    static if(!is(typeof(X509_V_ERR_UNABLE_TO_VERIFY_LEAF_SIGNATURE))) {
        private enum enumMixinStr_X509_V_ERR_UNABLE_TO_VERIFY_LEAF_SIGNATURE = `enum X509_V_ERR_UNABLE_TO_VERIFY_LEAF_SIGNATURE = 21;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_V_ERR_UNABLE_TO_VERIFY_LEAF_SIGNATURE); }))) {
            mixin(enumMixinStr_X509_V_ERR_UNABLE_TO_VERIFY_LEAF_SIGNATURE);
        }
    }




    static if(!is(typeof(X509_V_ERR_CERT_CHAIN_TOO_LONG))) {
        private enum enumMixinStr_X509_V_ERR_CERT_CHAIN_TOO_LONG = `enum X509_V_ERR_CERT_CHAIN_TOO_LONG = 22;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_V_ERR_CERT_CHAIN_TOO_LONG); }))) {
            mixin(enumMixinStr_X509_V_ERR_CERT_CHAIN_TOO_LONG);
        }
    }




    static if(!is(typeof(X509_V_ERR_CERT_REVOKED))) {
        private enum enumMixinStr_X509_V_ERR_CERT_REVOKED = `enum X509_V_ERR_CERT_REVOKED = 23;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_V_ERR_CERT_REVOKED); }))) {
            mixin(enumMixinStr_X509_V_ERR_CERT_REVOKED);
        }
    }




    static if(!is(typeof(X509_V_ERR_INVALID_CA))) {
        private enum enumMixinStr_X509_V_ERR_INVALID_CA = `enum X509_V_ERR_INVALID_CA = 24;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_V_ERR_INVALID_CA); }))) {
            mixin(enumMixinStr_X509_V_ERR_INVALID_CA);
        }
    }




    static if(!is(typeof(X509_V_ERR_PATH_LENGTH_EXCEEDED))) {
        private enum enumMixinStr_X509_V_ERR_PATH_LENGTH_EXCEEDED = `enum X509_V_ERR_PATH_LENGTH_EXCEEDED = 25;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_V_ERR_PATH_LENGTH_EXCEEDED); }))) {
            mixin(enumMixinStr_X509_V_ERR_PATH_LENGTH_EXCEEDED);
        }
    }




    static if(!is(typeof(X509_V_ERR_INVALID_PURPOSE))) {
        private enum enumMixinStr_X509_V_ERR_INVALID_PURPOSE = `enum X509_V_ERR_INVALID_PURPOSE = 26;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_V_ERR_INVALID_PURPOSE); }))) {
            mixin(enumMixinStr_X509_V_ERR_INVALID_PURPOSE);
        }
    }




    static if(!is(typeof(X509_V_ERR_CERT_UNTRUSTED))) {
        private enum enumMixinStr_X509_V_ERR_CERT_UNTRUSTED = `enum X509_V_ERR_CERT_UNTRUSTED = 27;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_V_ERR_CERT_UNTRUSTED); }))) {
            mixin(enumMixinStr_X509_V_ERR_CERT_UNTRUSTED);
        }
    }




    static if(!is(typeof(X509_V_ERR_CERT_REJECTED))) {
        private enum enumMixinStr_X509_V_ERR_CERT_REJECTED = `enum X509_V_ERR_CERT_REJECTED = 28;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_V_ERR_CERT_REJECTED); }))) {
            mixin(enumMixinStr_X509_V_ERR_CERT_REJECTED);
        }
    }




    static if(!is(typeof(X509_V_ERR_SUBJECT_ISSUER_MISMATCH))) {
        private enum enumMixinStr_X509_V_ERR_SUBJECT_ISSUER_MISMATCH = `enum X509_V_ERR_SUBJECT_ISSUER_MISMATCH = 29;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_V_ERR_SUBJECT_ISSUER_MISMATCH); }))) {
            mixin(enumMixinStr_X509_V_ERR_SUBJECT_ISSUER_MISMATCH);
        }
    }




    static if(!is(typeof(X509_V_ERR_AKID_SKID_MISMATCH))) {
        private enum enumMixinStr_X509_V_ERR_AKID_SKID_MISMATCH = `enum X509_V_ERR_AKID_SKID_MISMATCH = 30;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_V_ERR_AKID_SKID_MISMATCH); }))) {
            mixin(enumMixinStr_X509_V_ERR_AKID_SKID_MISMATCH);
        }
    }




    static if(!is(typeof(X509_V_ERR_AKID_ISSUER_SERIAL_MISMATCH))) {
        private enum enumMixinStr_X509_V_ERR_AKID_ISSUER_SERIAL_MISMATCH = `enum X509_V_ERR_AKID_ISSUER_SERIAL_MISMATCH = 31;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_V_ERR_AKID_ISSUER_SERIAL_MISMATCH); }))) {
            mixin(enumMixinStr_X509_V_ERR_AKID_ISSUER_SERIAL_MISMATCH);
        }
    }




    static if(!is(typeof(X509_V_ERR_KEYUSAGE_NO_CERTSIGN))) {
        private enum enumMixinStr_X509_V_ERR_KEYUSAGE_NO_CERTSIGN = `enum X509_V_ERR_KEYUSAGE_NO_CERTSIGN = 32;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_V_ERR_KEYUSAGE_NO_CERTSIGN); }))) {
            mixin(enumMixinStr_X509_V_ERR_KEYUSAGE_NO_CERTSIGN);
        }
    }




    static if(!is(typeof(X509_V_ERR_UNABLE_TO_GET_CRL_ISSUER))) {
        private enum enumMixinStr_X509_V_ERR_UNABLE_TO_GET_CRL_ISSUER = `enum X509_V_ERR_UNABLE_TO_GET_CRL_ISSUER = 33;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_V_ERR_UNABLE_TO_GET_CRL_ISSUER); }))) {
            mixin(enumMixinStr_X509_V_ERR_UNABLE_TO_GET_CRL_ISSUER);
        }
    }




    static if(!is(typeof(X509_V_ERR_UNHANDLED_CRITICAL_EXTENSION))) {
        private enum enumMixinStr_X509_V_ERR_UNHANDLED_CRITICAL_EXTENSION = `enum X509_V_ERR_UNHANDLED_CRITICAL_EXTENSION = 34;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_V_ERR_UNHANDLED_CRITICAL_EXTENSION); }))) {
            mixin(enumMixinStr_X509_V_ERR_UNHANDLED_CRITICAL_EXTENSION);
        }
    }




    static if(!is(typeof(X509_V_ERR_KEYUSAGE_NO_CRL_SIGN))) {
        private enum enumMixinStr_X509_V_ERR_KEYUSAGE_NO_CRL_SIGN = `enum X509_V_ERR_KEYUSAGE_NO_CRL_SIGN = 35;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_V_ERR_KEYUSAGE_NO_CRL_SIGN); }))) {
            mixin(enumMixinStr_X509_V_ERR_KEYUSAGE_NO_CRL_SIGN);
        }
    }




    static if(!is(typeof(X509_V_ERR_UNHANDLED_CRITICAL_CRL_EXTENSION))) {
        private enum enumMixinStr_X509_V_ERR_UNHANDLED_CRITICAL_CRL_EXTENSION = `enum X509_V_ERR_UNHANDLED_CRITICAL_CRL_EXTENSION = 36;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_V_ERR_UNHANDLED_CRITICAL_CRL_EXTENSION); }))) {
            mixin(enumMixinStr_X509_V_ERR_UNHANDLED_CRITICAL_CRL_EXTENSION);
        }
    }




    static if(!is(typeof(X509_V_ERR_INVALID_NON_CA))) {
        private enum enumMixinStr_X509_V_ERR_INVALID_NON_CA = `enum X509_V_ERR_INVALID_NON_CA = 37;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_V_ERR_INVALID_NON_CA); }))) {
            mixin(enumMixinStr_X509_V_ERR_INVALID_NON_CA);
        }
    }




    static if(!is(typeof(X509_V_ERR_PROXY_PATH_LENGTH_EXCEEDED))) {
        private enum enumMixinStr_X509_V_ERR_PROXY_PATH_LENGTH_EXCEEDED = `enum X509_V_ERR_PROXY_PATH_LENGTH_EXCEEDED = 38;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_V_ERR_PROXY_PATH_LENGTH_EXCEEDED); }))) {
            mixin(enumMixinStr_X509_V_ERR_PROXY_PATH_LENGTH_EXCEEDED);
        }
    }




    static if(!is(typeof(X509_V_ERR_KEYUSAGE_NO_DIGITAL_SIGNATURE))) {
        private enum enumMixinStr_X509_V_ERR_KEYUSAGE_NO_DIGITAL_SIGNATURE = `enum X509_V_ERR_KEYUSAGE_NO_DIGITAL_SIGNATURE = 39;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_V_ERR_KEYUSAGE_NO_DIGITAL_SIGNATURE); }))) {
            mixin(enumMixinStr_X509_V_ERR_KEYUSAGE_NO_DIGITAL_SIGNATURE);
        }
    }




    static if(!is(typeof(X509_V_ERR_PROXY_CERTIFICATES_NOT_ALLOWED))) {
        private enum enumMixinStr_X509_V_ERR_PROXY_CERTIFICATES_NOT_ALLOWED = `enum X509_V_ERR_PROXY_CERTIFICATES_NOT_ALLOWED = 40;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_V_ERR_PROXY_CERTIFICATES_NOT_ALLOWED); }))) {
            mixin(enumMixinStr_X509_V_ERR_PROXY_CERTIFICATES_NOT_ALLOWED);
        }
    }




    static if(!is(typeof(X509_V_ERR_INVALID_EXTENSION))) {
        private enum enumMixinStr_X509_V_ERR_INVALID_EXTENSION = `enum X509_V_ERR_INVALID_EXTENSION = 41;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_V_ERR_INVALID_EXTENSION); }))) {
            mixin(enumMixinStr_X509_V_ERR_INVALID_EXTENSION);
        }
    }




    static if(!is(typeof(X509_V_ERR_INVALID_POLICY_EXTENSION))) {
        private enum enumMixinStr_X509_V_ERR_INVALID_POLICY_EXTENSION = `enum X509_V_ERR_INVALID_POLICY_EXTENSION = 42;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_V_ERR_INVALID_POLICY_EXTENSION); }))) {
            mixin(enumMixinStr_X509_V_ERR_INVALID_POLICY_EXTENSION);
        }
    }




    static if(!is(typeof(X509_V_ERR_NO_EXPLICIT_POLICY))) {
        private enum enumMixinStr_X509_V_ERR_NO_EXPLICIT_POLICY = `enum X509_V_ERR_NO_EXPLICIT_POLICY = 43;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_V_ERR_NO_EXPLICIT_POLICY); }))) {
            mixin(enumMixinStr_X509_V_ERR_NO_EXPLICIT_POLICY);
        }
    }




    static if(!is(typeof(X509_V_ERR_DIFFERENT_CRL_SCOPE))) {
        private enum enumMixinStr_X509_V_ERR_DIFFERENT_CRL_SCOPE = `enum X509_V_ERR_DIFFERENT_CRL_SCOPE = 44;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_V_ERR_DIFFERENT_CRL_SCOPE); }))) {
            mixin(enumMixinStr_X509_V_ERR_DIFFERENT_CRL_SCOPE);
        }
    }




    static if(!is(typeof(X509_V_ERR_UNSUPPORTED_EXTENSION_FEATURE))) {
        private enum enumMixinStr_X509_V_ERR_UNSUPPORTED_EXTENSION_FEATURE = `enum X509_V_ERR_UNSUPPORTED_EXTENSION_FEATURE = 45;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_V_ERR_UNSUPPORTED_EXTENSION_FEATURE); }))) {
            mixin(enumMixinStr_X509_V_ERR_UNSUPPORTED_EXTENSION_FEATURE);
        }
    }




    static if(!is(typeof(X509_V_ERR_UNNESTED_RESOURCE))) {
        private enum enumMixinStr_X509_V_ERR_UNNESTED_RESOURCE = `enum X509_V_ERR_UNNESTED_RESOURCE = 46;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_V_ERR_UNNESTED_RESOURCE); }))) {
            mixin(enumMixinStr_X509_V_ERR_UNNESTED_RESOURCE);
        }
    }




    static if(!is(typeof(X509_V_ERR_PERMITTED_VIOLATION))) {
        private enum enumMixinStr_X509_V_ERR_PERMITTED_VIOLATION = `enum X509_V_ERR_PERMITTED_VIOLATION = 47;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_V_ERR_PERMITTED_VIOLATION); }))) {
            mixin(enumMixinStr_X509_V_ERR_PERMITTED_VIOLATION);
        }
    }




    static if(!is(typeof(X509_V_ERR_EXCLUDED_VIOLATION))) {
        private enum enumMixinStr_X509_V_ERR_EXCLUDED_VIOLATION = `enum X509_V_ERR_EXCLUDED_VIOLATION = 48;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_V_ERR_EXCLUDED_VIOLATION); }))) {
            mixin(enumMixinStr_X509_V_ERR_EXCLUDED_VIOLATION);
        }
    }




    static if(!is(typeof(X509_V_ERR_SUBTREE_MINMAX))) {
        private enum enumMixinStr_X509_V_ERR_SUBTREE_MINMAX = `enum X509_V_ERR_SUBTREE_MINMAX = 49;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_V_ERR_SUBTREE_MINMAX); }))) {
            mixin(enumMixinStr_X509_V_ERR_SUBTREE_MINMAX);
        }
    }




    static if(!is(typeof(X509_V_ERR_APPLICATION_VERIFICATION))) {
        private enum enumMixinStr_X509_V_ERR_APPLICATION_VERIFICATION = `enum X509_V_ERR_APPLICATION_VERIFICATION = 50;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_V_ERR_APPLICATION_VERIFICATION); }))) {
            mixin(enumMixinStr_X509_V_ERR_APPLICATION_VERIFICATION);
        }
    }




    static if(!is(typeof(X509_V_ERR_UNSUPPORTED_CONSTRAINT_TYPE))) {
        private enum enumMixinStr_X509_V_ERR_UNSUPPORTED_CONSTRAINT_TYPE = `enum X509_V_ERR_UNSUPPORTED_CONSTRAINT_TYPE = 51;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_V_ERR_UNSUPPORTED_CONSTRAINT_TYPE); }))) {
            mixin(enumMixinStr_X509_V_ERR_UNSUPPORTED_CONSTRAINT_TYPE);
        }
    }




    static if(!is(typeof(X509_V_ERR_UNSUPPORTED_CONSTRAINT_SYNTAX))) {
        private enum enumMixinStr_X509_V_ERR_UNSUPPORTED_CONSTRAINT_SYNTAX = `enum X509_V_ERR_UNSUPPORTED_CONSTRAINT_SYNTAX = 52;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_V_ERR_UNSUPPORTED_CONSTRAINT_SYNTAX); }))) {
            mixin(enumMixinStr_X509_V_ERR_UNSUPPORTED_CONSTRAINT_SYNTAX);
        }
    }




    static if(!is(typeof(X509_V_ERR_UNSUPPORTED_NAME_SYNTAX))) {
        private enum enumMixinStr_X509_V_ERR_UNSUPPORTED_NAME_SYNTAX = `enum X509_V_ERR_UNSUPPORTED_NAME_SYNTAX = 53;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_V_ERR_UNSUPPORTED_NAME_SYNTAX); }))) {
            mixin(enumMixinStr_X509_V_ERR_UNSUPPORTED_NAME_SYNTAX);
        }
    }




    static if(!is(typeof(X509_V_ERR_CRL_PATH_VALIDATION_ERROR))) {
        private enum enumMixinStr_X509_V_ERR_CRL_PATH_VALIDATION_ERROR = `enum X509_V_ERR_CRL_PATH_VALIDATION_ERROR = 54;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_V_ERR_CRL_PATH_VALIDATION_ERROR); }))) {
            mixin(enumMixinStr_X509_V_ERR_CRL_PATH_VALIDATION_ERROR);
        }
    }




    static if(!is(typeof(X509_V_ERR_PATH_LOOP))) {
        private enum enumMixinStr_X509_V_ERR_PATH_LOOP = `enum X509_V_ERR_PATH_LOOP = 55;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_V_ERR_PATH_LOOP); }))) {
            mixin(enumMixinStr_X509_V_ERR_PATH_LOOP);
        }
    }




    static if(!is(typeof(X509_V_ERR_SUITE_B_INVALID_VERSION))) {
        private enum enumMixinStr_X509_V_ERR_SUITE_B_INVALID_VERSION = `enum X509_V_ERR_SUITE_B_INVALID_VERSION = 56;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_V_ERR_SUITE_B_INVALID_VERSION); }))) {
            mixin(enumMixinStr_X509_V_ERR_SUITE_B_INVALID_VERSION);
        }
    }




    static if(!is(typeof(X509_V_ERR_SUITE_B_INVALID_ALGORITHM))) {
        private enum enumMixinStr_X509_V_ERR_SUITE_B_INVALID_ALGORITHM = `enum X509_V_ERR_SUITE_B_INVALID_ALGORITHM = 57;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_V_ERR_SUITE_B_INVALID_ALGORITHM); }))) {
            mixin(enumMixinStr_X509_V_ERR_SUITE_B_INVALID_ALGORITHM);
        }
    }




    static if(!is(typeof(X509_V_ERR_SUITE_B_INVALID_CURVE))) {
        private enum enumMixinStr_X509_V_ERR_SUITE_B_INVALID_CURVE = `enum X509_V_ERR_SUITE_B_INVALID_CURVE = 58;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_V_ERR_SUITE_B_INVALID_CURVE); }))) {
            mixin(enumMixinStr_X509_V_ERR_SUITE_B_INVALID_CURVE);
        }
    }




    static if(!is(typeof(X509_V_ERR_SUITE_B_INVALID_SIGNATURE_ALGORITHM))) {
        private enum enumMixinStr_X509_V_ERR_SUITE_B_INVALID_SIGNATURE_ALGORITHM = `enum X509_V_ERR_SUITE_B_INVALID_SIGNATURE_ALGORITHM = 59;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_V_ERR_SUITE_B_INVALID_SIGNATURE_ALGORITHM); }))) {
            mixin(enumMixinStr_X509_V_ERR_SUITE_B_INVALID_SIGNATURE_ALGORITHM);
        }
    }




    static if(!is(typeof(X509_V_ERR_SUITE_B_LOS_NOT_ALLOWED))) {
        private enum enumMixinStr_X509_V_ERR_SUITE_B_LOS_NOT_ALLOWED = `enum X509_V_ERR_SUITE_B_LOS_NOT_ALLOWED = 60;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_V_ERR_SUITE_B_LOS_NOT_ALLOWED); }))) {
            mixin(enumMixinStr_X509_V_ERR_SUITE_B_LOS_NOT_ALLOWED);
        }
    }




    static if(!is(typeof(X509_V_ERR_SUITE_B_CANNOT_SIGN_P_384_WITH_P_256))) {
        private enum enumMixinStr_X509_V_ERR_SUITE_B_CANNOT_SIGN_P_384_WITH_P_256 = `enum X509_V_ERR_SUITE_B_CANNOT_SIGN_P_384_WITH_P_256 = 61;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_V_ERR_SUITE_B_CANNOT_SIGN_P_384_WITH_P_256); }))) {
            mixin(enumMixinStr_X509_V_ERR_SUITE_B_CANNOT_SIGN_P_384_WITH_P_256);
        }
    }




    static if(!is(typeof(X509_V_ERR_HOSTNAME_MISMATCH))) {
        private enum enumMixinStr_X509_V_ERR_HOSTNAME_MISMATCH = `enum X509_V_ERR_HOSTNAME_MISMATCH = 62;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_V_ERR_HOSTNAME_MISMATCH); }))) {
            mixin(enumMixinStr_X509_V_ERR_HOSTNAME_MISMATCH);
        }
    }




    static if(!is(typeof(X509_V_ERR_EMAIL_MISMATCH))) {
        private enum enumMixinStr_X509_V_ERR_EMAIL_MISMATCH = `enum X509_V_ERR_EMAIL_MISMATCH = 63;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_V_ERR_EMAIL_MISMATCH); }))) {
            mixin(enumMixinStr_X509_V_ERR_EMAIL_MISMATCH);
        }
    }




    static if(!is(typeof(X509_V_ERR_IP_ADDRESS_MISMATCH))) {
        private enum enumMixinStr_X509_V_ERR_IP_ADDRESS_MISMATCH = `enum X509_V_ERR_IP_ADDRESS_MISMATCH = 64;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_V_ERR_IP_ADDRESS_MISMATCH); }))) {
            mixin(enumMixinStr_X509_V_ERR_IP_ADDRESS_MISMATCH);
        }
    }




    static if(!is(typeof(X509_V_ERR_DANE_NO_MATCH))) {
        private enum enumMixinStr_X509_V_ERR_DANE_NO_MATCH = `enum X509_V_ERR_DANE_NO_MATCH = 65;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_V_ERR_DANE_NO_MATCH); }))) {
            mixin(enumMixinStr_X509_V_ERR_DANE_NO_MATCH);
        }
    }




    static if(!is(typeof(X509_V_ERR_EE_KEY_TOO_SMALL))) {
        private enum enumMixinStr_X509_V_ERR_EE_KEY_TOO_SMALL = `enum X509_V_ERR_EE_KEY_TOO_SMALL = 66;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_V_ERR_EE_KEY_TOO_SMALL); }))) {
            mixin(enumMixinStr_X509_V_ERR_EE_KEY_TOO_SMALL);
        }
    }




    static if(!is(typeof(X509_V_ERR_CA_KEY_TOO_SMALL))) {
        private enum enumMixinStr_X509_V_ERR_CA_KEY_TOO_SMALL = `enum X509_V_ERR_CA_KEY_TOO_SMALL = 67;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_V_ERR_CA_KEY_TOO_SMALL); }))) {
            mixin(enumMixinStr_X509_V_ERR_CA_KEY_TOO_SMALL);
        }
    }




    static if(!is(typeof(X509_V_ERR_CA_MD_TOO_WEAK))) {
        private enum enumMixinStr_X509_V_ERR_CA_MD_TOO_WEAK = `enum X509_V_ERR_CA_MD_TOO_WEAK = 68;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_V_ERR_CA_MD_TOO_WEAK); }))) {
            mixin(enumMixinStr_X509_V_ERR_CA_MD_TOO_WEAK);
        }
    }




    static if(!is(typeof(X509_V_ERR_INVALID_CALL))) {
        private enum enumMixinStr_X509_V_ERR_INVALID_CALL = `enum X509_V_ERR_INVALID_CALL = 69;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_V_ERR_INVALID_CALL); }))) {
            mixin(enumMixinStr_X509_V_ERR_INVALID_CALL);
        }
    }




    static if(!is(typeof(X509_V_ERR_STORE_LOOKUP))) {
        private enum enumMixinStr_X509_V_ERR_STORE_LOOKUP = `enum X509_V_ERR_STORE_LOOKUP = 70;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_V_ERR_STORE_LOOKUP); }))) {
            mixin(enumMixinStr_X509_V_ERR_STORE_LOOKUP);
        }
    }




    static if(!is(typeof(X509_V_ERR_NO_VALID_SCTS))) {
        private enum enumMixinStr_X509_V_ERR_NO_VALID_SCTS = `enum X509_V_ERR_NO_VALID_SCTS = 71;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_V_ERR_NO_VALID_SCTS); }))) {
            mixin(enumMixinStr_X509_V_ERR_NO_VALID_SCTS);
        }
    }




    static if(!is(typeof(X509_V_ERR_PROXY_SUBJECT_NAME_VIOLATION))) {
        private enum enumMixinStr_X509_V_ERR_PROXY_SUBJECT_NAME_VIOLATION = `enum X509_V_ERR_PROXY_SUBJECT_NAME_VIOLATION = 72;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_V_ERR_PROXY_SUBJECT_NAME_VIOLATION); }))) {
            mixin(enumMixinStr_X509_V_ERR_PROXY_SUBJECT_NAME_VIOLATION);
        }
    }




    static if(!is(typeof(X509_V_ERR_OCSP_VERIFY_NEEDED))) {
        private enum enumMixinStr_X509_V_ERR_OCSP_VERIFY_NEEDED = `enum X509_V_ERR_OCSP_VERIFY_NEEDED = 73;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_V_ERR_OCSP_VERIFY_NEEDED); }))) {
            mixin(enumMixinStr_X509_V_ERR_OCSP_VERIFY_NEEDED);
        }
    }




    static if(!is(typeof(X509_V_ERR_OCSP_VERIFY_FAILED))) {
        private enum enumMixinStr_X509_V_ERR_OCSP_VERIFY_FAILED = `enum X509_V_ERR_OCSP_VERIFY_FAILED = 74;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_V_ERR_OCSP_VERIFY_FAILED); }))) {
            mixin(enumMixinStr_X509_V_ERR_OCSP_VERIFY_FAILED);
        }
    }




    static if(!is(typeof(X509_V_ERR_OCSP_CERT_UNKNOWN))) {
        private enum enumMixinStr_X509_V_ERR_OCSP_CERT_UNKNOWN = `enum X509_V_ERR_OCSP_CERT_UNKNOWN = 75;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_V_ERR_OCSP_CERT_UNKNOWN); }))) {
            mixin(enumMixinStr_X509_V_ERR_OCSP_CERT_UNKNOWN);
        }
    }




    static if(!is(typeof(X509_V_ERR_SIGNATURE_ALGORITHM_MISMATCH))) {
        private enum enumMixinStr_X509_V_ERR_SIGNATURE_ALGORITHM_MISMATCH = `enum X509_V_ERR_SIGNATURE_ALGORITHM_MISMATCH = 76;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_V_ERR_SIGNATURE_ALGORITHM_MISMATCH); }))) {
            mixin(enumMixinStr_X509_V_ERR_SIGNATURE_ALGORITHM_MISMATCH);
        }
    }




    static if(!is(typeof(X509_V_ERR_NO_ISSUER_PUBLIC_KEY))) {
        private enum enumMixinStr_X509_V_ERR_NO_ISSUER_PUBLIC_KEY = `enum X509_V_ERR_NO_ISSUER_PUBLIC_KEY = 77;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_V_ERR_NO_ISSUER_PUBLIC_KEY); }))) {
            mixin(enumMixinStr_X509_V_ERR_NO_ISSUER_PUBLIC_KEY);
        }
    }




    static if(!is(typeof(X509_V_ERR_UNSUPPORTED_SIGNATURE_ALGORITHM))) {
        private enum enumMixinStr_X509_V_ERR_UNSUPPORTED_SIGNATURE_ALGORITHM = `enum X509_V_ERR_UNSUPPORTED_SIGNATURE_ALGORITHM = 78;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_V_ERR_UNSUPPORTED_SIGNATURE_ALGORITHM); }))) {
            mixin(enumMixinStr_X509_V_ERR_UNSUPPORTED_SIGNATURE_ALGORITHM);
        }
    }




    static if(!is(typeof(X509_V_ERR_EC_KEY_EXPLICIT_PARAMS))) {
        private enum enumMixinStr_X509_V_ERR_EC_KEY_EXPLICIT_PARAMS = `enum X509_V_ERR_EC_KEY_EXPLICIT_PARAMS = 79;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_V_ERR_EC_KEY_EXPLICIT_PARAMS); }))) {
            mixin(enumMixinStr_X509_V_ERR_EC_KEY_EXPLICIT_PARAMS);
        }
    }




    static if(!is(typeof(X509_V_FLAG_CB_ISSUER_CHECK))) {
        private enum enumMixinStr_X509_V_FLAG_CB_ISSUER_CHECK = `enum X509_V_FLAG_CB_ISSUER_CHECK = 0x0;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_V_FLAG_CB_ISSUER_CHECK); }))) {
            mixin(enumMixinStr_X509_V_FLAG_CB_ISSUER_CHECK);
        }
    }




    static if(!is(typeof(X509_V_FLAG_USE_CHECK_TIME))) {
        private enum enumMixinStr_X509_V_FLAG_USE_CHECK_TIME = `enum X509_V_FLAG_USE_CHECK_TIME = 0x2;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_V_FLAG_USE_CHECK_TIME); }))) {
            mixin(enumMixinStr_X509_V_FLAG_USE_CHECK_TIME);
        }
    }




    static if(!is(typeof(X509_V_FLAG_CRL_CHECK))) {
        private enum enumMixinStr_X509_V_FLAG_CRL_CHECK = `enum X509_V_FLAG_CRL_CHECK = 0x4;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_V_FLAG_CRL_CHECK); }))) {
            mixin(enumMixinStr_X509_V_FLAG_CRL_CHECK);
        }
    }




    static if(!is(typeof(X509_V_FLAG_CRL_CHECK_ALL))) {
        private enum enumMixinStr_X509_V_FLAG_CRL_CHECK_ALL = `enum X509_V_FLAG_CRL_CHECK_ALL = 0x8;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_V_FLAG_CRL_CHECK_ALL); }))) {
            mixin(enumMixinStr_X509_V_FLAG_CRL_CHECK_ALL);
        }
    }




    static if(!is(typeof(X509_V_FLAG_IGNORE_CRITICAL))) {
        private enum enumMixinStr_X509_V_FLAG_IGNORE_CRITICAL = `enum X509_V_FLAG_IGNORE_CRITICAL = 0x10;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_V_FLAG_IGNORE_CRITICAL); }))) {
            mixin(enumMixinStr_X509_V_FLAG_IGNORE_CRITICAL);
        }
    }




    static if(!is(typeof(X509_V_FLAG_X509_STRICT))) {
        private enum enumMixinStr_X509_V_FLAG_X509_STRICT = `enum X509_V_FLAG_X509_STRICT = 0x20;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_V_FLAG_X509_STRICT); }))) {
            mixin(enumMixinStr_X509_V_FLAG_X509_STRICT);
        }
    }




    static if(!is(typeof(X509_V_FLAG_ALLOW_PROXY_CERTS))) {
        private enum enumMixinStr_X509_V_FLAG_ALLOW_PROXY_CERTS = `enum X509_V_FLAG_ALLOW_PROXY_CERTS = 0x40;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_V_FLAG_ALLOW_PROXY_CERTS); }))) {
            mixin(enumMixinStr_X509_V_FLAG_ALLOW_PROXY_CERTS);
        }
    }




    static if(!is(typeof(X509_V_FLAG_POLICY_CHECK))) {
        private enum enumMixinStr_X509_V_FLAG_POLICY_CHECK = `enum X509_V_FLAG_POLICY_CHECK = 0x80;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_V_FLAG_POLICY_CHECK); }))) {
            mixin(enumMixinStr_X509_V_FLAG_POLICY_CHECK);
        }
    }




    static if(!is(typeof(X509_V_FLAG_EXPLICIT_POLICY))) {
        private enum enumMixinStr_X509_V_FLAG_EXPLICIT_POLICY = `enum X509_V_FLAG_EXPLICIT_POLICY = 0x100;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_V_FLAG_EXPLICIT_POLICY); }))) {
            mixin(enumMixinStr_X509_V_FLAG_EXPLICIT_POLICY);
        }
    }




    static if(!is(typeof(X509_V_FLAG_INHIBIT_ANY))) {
        private enum enumMixinStr_X509_V_FLAG_INHIBIT_ANY = `enum X509_V_FLAG_INHIBIT_ANY = 0x200;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_V_FLAG_INHIBIT_ANY); }))) {
            mixin(enumMixinStr_X509_V_FLAG_INHIBIT_ANY);
        }
    }




    static if(!is(typeof(X509_V_FLAG_INHIBIT_MAP))) {
        private enum enumMixinStr_X509_V_FLAG_INHIBIT_MAP = `enum X509_V_FLAG_INHIBIT_MAP = 0x400;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_V_FLAG_INHIBIT_MAP); }))) {
            mixin(enumMixinStr_X509_V_FLAG_INHIBIT_MAP);
        }
    }




    static if(!is(typeof(X509_V_FLAG_NOTIFY_POLICY))) {
        private enum enumMixinStr_X509_V_FLAG_NOTIFY_POLICY = `enum X509_V_FLAG_NOTIFY_POLICY = 0x800;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_V_FLAG_NOTIFY_POLICY); }))) {
            mixin(enumMixinStr_X509_V_FLAG_NOTIFY_POLICY);
        }
    }




    static if(!is(typeof(X509_V_FLAG_EXTENDED_CRL_SUPPORT))) {
        private enum enumMixinStr_X509_V_FLAG_EXTENDED_CRL_SUPPORT = `enum X509_V_FLAG_EXTENDED_CRL_SUPPORT = 0x1000;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_V_FLAG_EXTENDED_CRL_SUPPORT); }))) {
            mixin(enumMixinStr_X509_V_FLAG_EXTENDED_CRL_SUPPORT);
        }
    }




    static if(!is(typeof(X509_V_FLAG_USE_DELTAS))) {
        private enum enumMixinStr_X509_V_FLAG_USE_DELTAS = `enum X509_V_FLAG_USE_DELTAS = 0x2000;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_V_FLAG_USE_DELTAS); }))) {
            mixin(enumMixinStr_X509_V_FLAG_USE_DELTAS);
        }
    }




    static if(!is(typeof(X509_V_FLAG_CHECK_SS_SIGNATURE))) {
        private enum enumMixinStr_X509_V_FLAG_CHECK_SS_SIGNATURE = `enum X509_V_FLAG_CHECK_SS_SIGNATURE = 0x4000;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_V_FLAG_CHECK_SS_SIGNATURE); }))) {
            mixin(enumMixinStr_X509_V_FLAG_CHECK_SS_SIGNATURE);
        }
    }




    static if(!is(typeof(X509_V_FLAG_TRUSTED_FIRST))) {
        private enum enumMixinStr_X509_V_FLAG_TRUSTED_FIRST = `enum X509_V_FLAG_TRUSTED_FIRST = 0x8000;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_V_FLAG_TRUSTED_FIRST); }))) {
            mixin(enumMixinStr_X509_V_FLAG_TRUSTED_FIRST);
        }
    }




    static if(!is(typeof(X509_V_FLAG_SUITEB_128_LOS_ONLY))) {
        private enum enumMixinStr_X509_V_FLAG_SUITEB_128_LOS_ONLY = `enum X509_V_FLAG_SUITEB_128_LOS_ONLY = 0x10000;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_V_FLAG_SUITEB_128_LOS_ONLY); }))) {
            mixin(enumMixinStr_X509_V_FLAG_SUITEB_128_LOS_ONLY);
        }
    }




    static if(!is(typeof(X509_V_FLAG_SUITEB_192_LOS))) {
        private enum enumMixinStr_X509_V_FLAG_SUITEB_192_LOS = `enum X509_V_FLAG_SUITEB_192_LOS = 0x20000;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_V_FLAG_SUITEB_192_LOS); }))) {
            mixin(enumMixinStr_X509_V_FLAG_SUITEB_192_LOS);
        }
    }




    static if(!is(typeof(X509_V_FLAG_SUITEB_128_LOS))) {
        private enum enumMixinStr_X509_V_FLAG_SUITEB_128_LOS = `enum X509_V_FLAG_SUITEB_128_LOS = 0x30000;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_V_FLAG_SUITEB_128_LOS); }))) {
            mixin(enumMixinStr_X509_V_FLAG_SUITEB_128_LOS);
        }
    }




    static if(!is(typeof(X509_V_FLAG_PARTIAL_CHAIN))) {
        private enum enumMixinStr_X509_V_FLAG_PARTIAL_CHAIN = `enum X509_V_FLAG_PARTIAL_CHAIN = 0x80000;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_V_FLAG_PARTIAL_CHAIN); }))) {
            mixin(enumMixinStr_X509_V_FLAG_PARTIAL_CHAIN);
        }
    }




    static if(!is(typeof(X509_V_FLAG_NO_ALT_CHAINS))) {
        private enum enumMixinStr_X509_V_FLAG_NO_ALT_CHAINS = `enum X509_V_FLAG_NO_ALT_CHAINS = 0x100000;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_V_FLAG_NO_ALT_CHAINS); }))) {
            mixin(enumMixinStr_X509_V_FLAG_NO_ALT_CHAINS);
        }
    }




    static if(!is(typeof(X509_V_FLAG_NO_CHECK_TIME))) {
        private enum enumMixinStr_X509_V_FLAG_NO_CHECK_TIME = `enum X509_V_FLAG_NO_CHECK_TIME = 0x200000;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_V_FLAG_NO_CHECK_TIME); }))) {
            mixin(enumMixinStr_X509_V_FLAG_NO_CHECK_TIME);
        }
    }




    static if(!is(typeof(X509_VP_FLAG_DEFAULT))) {
        private enum enumMixinStr_X509_VP_FLAG_DEFAULT = `enum X509_VP_FLAG_DEFAULT = 0x1;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_VP_FLAG_DEFAULT); }))) {
            mixin(enumMixinStr_X509_VP_FLAG_DEFAULT);
        }
    }




    static if(!is(typeof(X509_VP_FLAG_OVERWRITE))) {
        private enum enumMixinStr_X509_VP_FLAG_OVERWRITE = `enum X509_VP_FLAG_OVERWRITE = 0x2;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_VP_FLAG_OVERWRITE); }))) {
            mixin(enumMixinStr_X509_VP_FLAG_OVERWRITE);
        }
    }




    static if(!is(typeof(X509_VP_FLAG_RESET_FLAGS))) {
        private enum enumMixinStr_X509_VP_FLAG_RESET_FLAGS = `enum X509_VP_FLAG_RESET_FLAGS = 0x4;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_VP_FLAG_RESET_FLAGS); }))) {
            mixin(enumMixinStr_X509_VP_FLAG_RESET_FLAGS);
        }
    }




    static if(!is(typeof(X509_VP_FLAG_LOCKED))) {
        private enum enumMixinStr_X509_VP_FLAG_LOCKED = `enum X509_VP_FLAG_LOCKED = 0x8;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_VP_FLAG_LOCKED); }))) {
            mixin(enumMixinStr_X509_VP_FLAG_LOCKED);
        }
    }




    static if(!is(typeof(X509_VP_FLAG_ONCE))) {
        private enum enumMixinStr_X509_VP_FLAG_ONCE = `enum X509_VP_FLAG_ONCE = 0x10;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_VP_FLAG_ONCE); }))) {
            mixin(enumMixinStr_X509_VP_FLAG_ONCE);
        }
    }




    static if(!is(typeof(X509_V_FLAG_POLICY_MASK))) {
        private enum enumMixinStr_X509_V_FLAG_POLICY_MASK = `enum X509_V_FLAG_POLICY_MASK = ( 0x80 | 0x100 | 0x200 | 0x400 );`;
        static if(is(typeof({ mixin(enumMixinStr_X509_V_FLAG_POLICY_MASK); }))) {
            mixin(enumMixinStr_X509_V_FLAG_POLICY_MASK);
        }
    }
    static if(!is(typeof(X509_STORE_CTX_get_chain))) {
        private enum enumMixinStr_X509_STORE_CTX_get_chain = `enum X509_STORE_CTX_get_chain = X509_STORE_CTX_get0_chain;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_STORE_CTX_get_chain); }))) {
            mixin(enumMixinStr_X509_STORE_CTX_get_chain);
        }
    }




    static if(!is(typeof(X509_STORE_CTX_set_chain))) {
        private enum enumMixinStr_X509_STORE_CTX_set_chain = `enum X509_STORE_CTX_set_chain = X509_STORE_CTX_set0_untrusted;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_STORE_CTX_set_chain); }))) {
            mixin(enumMixinStr_X509_STORE_CTX_set_chain);
        }
    }




    static if(!is(typeof(X509_STORE_CTX_trusted_stack))) {
        private enum enumMixinStr_X509_STORE_CTX_trusted_stack = `enum X509_STORE_CTX_trusted_stack = X509_STORE_CTX_set0_trusted_stack;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_STORE_CTX_trusted_stack); }))) {
            mixin(enumMixinStr_X509_STORE_CTX_trusted_stack);
        }
    }




    static if(!is(typeof(X509_STORE_get_by_subject))) {
        private enum enumMixinStr_X509_STORE_get_by_subject = `enum X509_STORE_get_by_subject = X509_STORE_CTX_get_by_subject;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_STORE_get_by_subject); }))) {
            mixin(enumMixinStr_X509_STORE_get_by_subject);
        }
    }




    static if(!is(typeof(X509_STORE_get1_certs))) {
        private enum enumMixinStr_X509_STORE_get1_certs = `enum X509_STORE_get1_certs = X509_STORE_CTX_get1_certs;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_STORE_get1_certs); }))) {
            mixin(enumMixinStr_X509_STORE_get1_certs);
        }
    }




    static if(!is(typeof(X509_STORE_get1_crls))) {
        private enum enumMixinStr_X509_STORE_get1_crls = `enum X509_STORE_get1_crls = X509_STORE_CTX_get1_crls;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_STORE_get1_crls); }))) {
            mixin(enumMixinStr_X509_STORE_get1_crls);
        }
    }




    static if(!is(typeof(X509_STORE_get1_cert))) {
        private enum enumMixinStr_X509_STORE_get1_cert = `enum X509_STORE_get1_cert = X509_STORE_CTX_get1_certs;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_STORE_get1_cert); }))) {
            mixin(enumMixinStr_X509_STORE_get1_cert);
        }
    }




    static if(!is(typeof(X509_STORE_get1_crl))) {
        private enum enumMixinStr_X509_STORE_get1_crl = `enum X509_STORE_get1_crl = X509_STORE_CTX_get1_crls;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_STORE_get1_crl); }))) {
            mixin(enumMixinStr_X509_STORE_get1_crl);
        }
    }






    static if(!is(typeof(DANE_FLAG_NO_DANE_EE_NAMECHECKS))) {
        private enum enumMixinStr_DANE_FLAG_NO_DANE_EE_NAMECHECKS = `enum DANE_FLAG_NO_DANE_EE_NAMECHECKS = ( 1L << 0 );`;
        static if(is(typeof({ mixin(enumMixinStr_DANE_FLAG_NO_DANE_EE_NAMECHECKS); }))) {
            mixin(enumMixinStr_DANE_FLAG_NO_DANE_EE_NAMECHECKS);
        }
    }




    static if(!is(typeof(X509_PCY_TREE_FAILURE))) {
        private enum enumMixinStr_X509_PCY_TREE_FAILURE = `enum X509_PCY_TREE_FAILURE = - 2;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_PCY_TREE_FAILURE); }))) {
            mixin(enumMixinStr_X509_PCY_TREE_FAILURE);
        }
    }




    static if(!is(typeof(X509_PCY_TREE_INVALID))) {
        private enum enumMixinStr_X509_PCY_TREE_INVALID = `enum X509_PCY_TREE_INVALID = - 1;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_PCY_TREE_INVALID); }))) {
            mixin(enumMixinStr_X509_PCY_TREE_INVALID);
        }
    }




    static if(!is(typeof(X509_PCY_TREE_INTERNAL))) {
        private enum enumMixinStr_X509_PCY_TREE_INTERNAL = `enum X509_PCY_TREE_INTERNAL = 0;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_PCY_TREE_INTERNAL); }))) {
            mixin(enumMixinStr_X509_PCY_TREE_INTERNAL);
        }
    }




    static if(!is(typeof(X509_PCY_TREE_VALID))) {
        private enum enumMixinStr_X509_PCY_TREE_VALID = `enum X509_PCY_TREE_VALID = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_PCY_TREE_VALID); }))) {
            mixin(enumMixinStr_X509_PCY_TREE_VALID);
        }
    }




    static if(!is(typeof(X509_PCY_TREE_EMPTY))) {
        private enum enumMixinStr_X509_PCY_TREE_EMPTY = `enum X509_PCY_TREE_EMPTY = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_PCY_TREE_EMPTY); }))) {
            mixin(enumMixinStr_X509_PCY_TREE_EMPTY);
        }
    }




    static if(!is(typeof(X509_PCY_TREE_EXPLICIT))) {
        private enum enumMixinStr_X509_PCY_TREE_EXPLICIT = `enum X509_PCY_TREE_EXPLICIT = 4;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_PCY_TREE_EXPLICIT); }))) {
            mixin(enumMixinStr_X509_PCY_TREE_EXPLICIT);
        }
    }






    static if(!is(typeof(X509_F_ADD_CERT_DIR))) {
        private enum enumMixinStr_X509_F_ADD_CERT_DIR = `enum X509_F_ADD_CERT_DIR = 100;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_F_ADD_CERT_DIR); }))) {
            mixin(enumMixinStr_X509_F_ADD_CERT_DIR);
        }
    }




    static if(!is(typeof(X509_F_BUILD_CHAIN))) {
        private enum enumMixinStr_X509_F_BUILD_CHAIN = `enum X509_F_BUILD_CHAIN = 106;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_F_BUILD_CHAIN); }))) {
            mixin(enumMixinStr_X509_F_BUILD_CHAIN);
        }
    }




    static if(!is(typeof(X509_F_BY_FILE_CTRL))) {
        private enum enumMixinStr_X509_F_BY_FILE_CTRL = `enum X509_F_BY_FILE_CTRL = 101;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_F_BY_FILE_CTRL); }))) {
            mixin(enumMixinStr_X509_F_BY_FILE_CTRL);
        }
    }




    static if(!is(typeof(X509_F_CHECK_NAME_CONSTRAINTS))) {
        private enum enumMixinStr_X509_F_CHECK_NAME_CONSTRAINTS = `enum X509_F_CHECK_NAME_CONSTRAINTS = 149;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_F_CHECK_NAME_CONSTRAINTS); }))) {
            mixin(enumMixinStr_X509_F_CHECK_NAME_CONSTRAINTS);
        }
    }




    static if(!is(typeof(X509_F_CHECK_POLICY))) {
        private enum enumMixinStr_X509_F_CHECK_POLICY = `enum X509_F_CHECK_POLICY = 145;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_F_CHECK_POLICY); }))) {
            mixin(enumMixinStr_X509_F_CHECK_POLICY);
        }
    }




    static if(!is(typeof(X509_F_DANE_I2D))) {
        private enum enumMixinStr_X509_F_DANE_I2D = `enum X509_F_DANE_I2D = 107;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_F_DANE_I2D); }))) {
            mixin(enumMixinStr_X509_F_DANE_I2D);
        }
    }




    static if(!is(typeof(X509_F_DIR_CTRL))) {
        private enum enumMixinStr_X509_F_DIR_CTRL = `enum X509_F_DIR_CTRL = 102;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_F_DIR_CTRL); }))) {
            mixin(enumMixinStr_X509_F_DIR_CTRL);
        }
    }




    static if(!is(typeof(X509_F_GET_CERT_BY_SUBJECT))) {
        private enum enumMixinStr_X509_F_GET_CERT_BY_SUBJECT = `enum X509_F_GET_CERT_BY_SUBJECT = 103;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_F_GET_CERT_BY_SUBJECT); }))) {
            mixin(enumMixinStr_X509_F_GET_CERT_BY_SUBJECT);
        }
    }




    static if(!is(typeof(X509_F_I2D_X509_AUX))) {
        private enum enumMixinStr_X509_F_I2D_X509_AUX = `enum X509_F_I2D_X509_AUX = 151;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_F_I2D_X509_AUX); }))) {
            mixin(enumMixinStr_X509_F_I2D_X509_AUX);
        }
    }




    static if(!is(typeof(X509_F_LOOKUP_CERTS_SK))) {
        private enum enumMixinStr_X509_F_LOOKUP_CERTS_SK = `enum X509_F_LOOKUP_CERTS_SK = 152;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_F_LOOKUP_CERTS_SK); }))) {
            mixin(enumMixinStr_X509_F_LOOKUP_CERTS_SK);
        }
    }




    static if(!is(typeof(X509_F_NETSCAPE_SPKI_B64_DECODE))) {
        private enum enumMixinStr_X509_F_NETSCAPE_SPKI_B64_DECODE = `enum X509_F_NETSCAPE_SPKI_B64_DECODE = 129;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_F_NETSCAPE_SPKI_B64_DECODE); }))) {
            mixin(enumMixinStr_X509_F_NETSCAPE_SPKI_B64_DECODE);
        }
    }




    static if(!is(typeof(X509_F_NETSCAPE_SPKI_B64_ENCODE))) {
        private enum enumMixinStr_X509_F_NETSCAPE_SPKI_B64_ENCODE = `enum X509_F_NETSCAPE_SPKI_B64_ENCODE = 130;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_F_NETSCAPE_SPKI_B64_ENCODE); }))) {
            mixin(enumMixinStr_X509_F_NETSCAPE_SPKI_B64_ENCODE);
        }
    }




    static if(!is(typeof(X509_F_NEW_DIR))) {
        private enum enumMixinStr_X509_F_NEW_DIR = `enum X509_F_NEW_DIR = 153;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_F_NEW_DIR); }))) {
            mixin(enumMixinStr_X509_F_NEW_DIR);
        }
    }




    static if(!is(typeof(X509_F_X509AT_ADD1_ATTR))) {
        private enum enumMixinStr_X509_F_X509AT_ADD1_ATTR = `enum X509_F_X509AT_ADD1_ATTR = 135;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_F_X509AT_ADD1_ATTR); }))) {
            mixin(enumMixinStr_X509_F_X509AT_ADD1_ATTR);
        }
    }




    static if(!is(typeof(X509_F_X509V3_ADD_EXT))) {
        private enum enumMixinStr_X509_F_X509V3_ADD_EXT = `enum X509_F_X509V3_ADD_EXT = 104;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_F_X509V3_ADD_EXT); }))) {
            mixin(enumMixinStr_X509_F_X509V3_ADD_EXT);
        }
    }




    static if(!is(typeof(X509_F_X509_ATTRIBUTE_CREATE_BY_NID))) {
        private enum enumMixinStr_X509_F_X509_ATTRIBUTE_CREATE_BY_NID = `enum X509_F_X509_ATTRIBUTE_CREATE_BY_NID = 136;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_F_X509_ATTRIBUTE_CREATE_BY_NID); }))) {
            mixin(enumMixinStr_X509_F_X509_ATTRIBUTE_CREATE_BY_NID);
        }
    }




    static if(!is(typeof(X509_F_X509_ATTRIBUTE_CREATE_BY_OBJ))) {
        private enum enumMixinStr_X509_F_X509_ATTRIBUTE_CREATE_BY_OBJ = `enum X509_F_X509_ATTRIBUTE_CREATE_BY_OBJ = 137;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_F_X509_ATTRIBUTE_CREATE_BY_OBJ); }))) {
            mixin(enumMixinStr_X509_F_X509_ATTRIBUTE_CREATE_BY_OBJ);
        }
    }




    static if(!is(typeof(X509_F_X509_ATTRIBUTE_CREATE_BY_TXT))) {
        private enum enumMixinStr_X509_F_X509_ATTRIBUTE_CREATE_BY_TXT = `enum X509_F_X509_ATTRIBUTE_CREATE_BY_TXT = 140;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_F_X509_ATTRIBUTE_CREATE_BY_TXT); }))) {
            mixin(enumMixinStr_X509_F_X509_ATTRIBUTE_CREATE_BY_TXT);
        }
    }




    static if(!is(typeof(X509_F_X509_ATTRIBUTE_GET0_DATA))) {
        private enum enumMixinStr_X509_F_X509_ATTRIBUTE_GET0_DATA = `enum X509_F_X509_ATTRIBUTE_GET0_DATA = 139;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_F_X509_ATTRIBUTE_GET0_DATA); }))) {
            mixin(enumMixinStr_X509_F_X509_ATTRIBUTE_GET0_DATA);
        }
    }




    static if(!is(typeof(X509_F_X509_ATTRIBUTE_SET1_DATA))) {
        private enum enumMixinStr_X509_F_X509_ATTRIBUTE_SET1_DATA = `enum X509_F_X509_ATTRIBUTE_SET1_DATA = 138;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_F_X509_ATTRIBUTE_SET1_DATA); }))) {
            mixin(enumMixinStr_X509_F_X509_ATTRIBUTE_SET1_DATA);
        }
    }




    static if(!is(typeof(X509_F_X509_CHECK_PRIVATE_KEY))) {
        private enum enumMixinStr_X509_F_X509_CHECK_PRIVATE_KEY = `enum X509_F_X509_CHECK_PRIVATE_KEY = 128;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_F_X509_CHECK_PRIVATE_KEY); }))) {
            mixin(enumMixinStr_X509_F_X509_CHECK_PRIVATE_KEY);
        }
    }




    static if(!is(typeof(X509_F_X509_CRL_DIFF))) {
        private enum enumMixinStr_X509_F_X509_CRL_DIFF = `enum X509_F_X509_CRL_DIFF = 105;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_F_X509_CRL_DIFF); }))) {
            mixin(enumMixinStr_X509_F_X509_CRL_DIFF);
        }
    }




    static if(!is(typeof(X509_F_X509_CRL_METHOD_NEW))) {
        private enum enumMixinStr_X509_F_X509_CRL_METHOD_NEW = `enum X509_F_X509_CRL_METHOD_NEW = 154;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_F_X509_CRL_METHOD_NEW); }))) {
            mixin(enumMixinStr_X509_F_X509_CRL_METHOD_NEW);
        }
    }




    static if(!is(typeof(X509_F_X509_CRL_PRINT_FP))) {
        private enum enumMixinStr_X509_F_X509_CRL_PRINT_FP = `enum X509_F_X509_CRL_PRINT_FP = 147;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_F_X509_CRL_PRINT_FP); }))) {
            mixin(enumMixinStr_X509_F_X509_CRL_PRINT_FP);
        }
    }




    static if(!is(typeof(X509_F_X509_EXTENSION_CREATE_BY_NID))) {
        private enum enumMixinStr_X509_F_X509_EXTENSION_CREATE_BY_NID = `enum X509_F_X509_EXTENSION_CREATE_BY_NID = 108;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_F_X509_EXTENSION_CREATE_BY_NID); }))) {
            mixin(enumMixinStr_X509_F_X509_EXTENSION_CREATE_BY_NID);
        }
    }




    static if(!is(typeof(X509_F_X509_EXTENSION_CREATE_BY_OBJ))) {
        private enum enumMixinStr_X509_F_X509_EXTENSION_CREATE_BY_OBJ = `enum X509_F_X509_EXTENSION_CREATE_BY_OBJ = 109;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_F_X509_EXTENSION_CREATE_BY_OBJ); }))) {
            mixin(enumMixinStr_X509_F_X509_EXTENSION_CREATE_BY_OBJ);
        }
    }




    static if(!is(typeof(X509_F_X509_GET_PUBKEY_PARAMETERS))) {
        private enum enumMixinStr_X509_F_X509_GET_PUBKEY_PARAMETERS = `enum X509_F_X509_GET_PUBKEY_PARAMETERS = 110;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_F_X509_GET_PUBKEY_PARAMETERS); }))) {
            mixin(enumMixinStr_X509_F_X509_GET_PUBKEY_PARAMETERS);
        }
    }




    static if(!is(typeof(X509_F_X509_LOAD_CERT_CRL_FILE))) {
        private enum enumMixinStr_X509_F_X509_LOAD_CERT_CRL_FILE = `enum X509_F_X509_LOAD_CERT_CRL_FILE = 132;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_F_X509_LOAD_CERT_CRL_FILE); }))) {
            mixin(enumMixinStr_X509_F_X509_LOAD_CERT_CRL_FILE);
        }
    }




    static if(!is(typeof(X509_F_X509_LOAD_CERT_FILE))) {
        private enum enumMixinStr_X509_F_X509_LOAD_CERT_FILE = `enum X509_F_X509_LOAD_CERT_FILE = 111;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_F_X509_LOAD_CERT_FILE); }))) {
            mixin(enumMixinStr_X509_F_X509_LOAD_CERT_FILE);
        }
    }




    static if(!is(typeof(X509_F_X509_LOAD_CRL_FILE))) {
        private enum enumMixinStr_X509_F_X509_LOAD_CRL_FILE = `enum X509_F_X509_LOAD_CRL_FILE = 112;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_F_X509_LOAD_CRL_FILE); }))) {
            mixin(enumMixinStr_X509_F_X509_LOAD_CRL_FILE);
        }
    }




    static if(!is(typeof(X509_F_X509_LOOKUP_METH_NEW))) {
        private enum enumMixinStr_X509_F_X509_LOOKUP_METH_NEW = `enum X509_F_X509_LOOKUP_METH_NEW = 160;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_F_X509_LOOKUP_METH_NEW); }))) {
            mixin(enumMixinStr_X509_F_X509_LOOKUP_METH_NEW);
        }
    }




    static if(!is(typeof(X509_F_X509_LOOKUP_NEW))) {
        private enum enumMixinStr_X509_F_X509_LOOKUP_NEW = `enum X509_F_X509_LOOKUP_NEW = 155;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_F_X509_LOOKUP_NEW); }))) {
            mixin(enumMixinStr_X509_F_X509_LOOKUP_NEW);
        }
    }




    static if(!is(typeof(X509_F_X509_NAME_ADD_ENTRY))) {
        private enum enumMixinStr_X509_F_X509_NAME_ADD_ENTRY = `enum X509_F_X509_NAME_ADD_ENTRY = 113;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_F_X509_NAME_ADD_ENTRY); }))) {
            mixin(enumMixinStr_X509_F_X509_NAME_ADD_ENTRY);
        }
    }




    static if(!is(typeof(X509_F_X509_NAME_CANON))) {
        private enum enumMixinStr_X509_F_X509_NAME_CANON = `enum X509_F_X509_NAME_CANON = 156;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_F_X509_NAME_CANON); }))) {
            mixin(enumMixinStr_X509_F_X509_NAME_CANON);
        }
    }




    static if(!is(typeof(X509_F_X509_NAME_ENTRY_CREATE_BY_NID))) {
        private enum enumMixinStr_X509_F_X509_NAME_ENTRY_CREATE_BY_NID = `enum X509_F_X509_NAME_ENTRY_CREATE_BY_NID = 114;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_F_X509_NAME_ENTRY_CREATE_BY_NID); }))) {
            mixin(enumMixinStr_X509_F_X509_NAME_ENTRY_CREATE_BY_NID);
        }
    }




    static if(!is(typeof(X509_F_X509_NAME_ENTRY_CREATE_BY_TXT))) {
        private enum enumMixinStr_X509_F_X509_NAME_ENTRY_CREATE_BY_TXT = `enum X509_F_X509_NAME_ENTRY_CREATE_BY_TXT = 131;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_F_X509_NAME_ENTRY_CREATE_BY_TXT); }))) {
            mixin(enumMixinStr_X509_F_X509_NAME_ENTRY_CREATE_BY_TXT);
        }
    }




    static if(!is(typeof(X509_F_X509_NAME_ENTRY_SET_OBJECT))) {
        private enum enumMixinStr_X509_F_X509_NAME_ENTRY_SET_OBJECT = `enum X509_F_X509_NAME_ENTRY_SET_OBJECT = 115;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_F_X509_NAME_ENTRY_SET_OBJECT); }))) {
            mixin(enumMixinStr_X509_F_X509_NAME_ENTRY_SET_OBJECT);
        }
    }




    static if(!is(typeof(X509_F_X509_NAME_ONELINE))) {
        private enum enumMixinStr_X509_F_X509_NAME_ONELINE = `enum X509_F_X509_NAME_ONELINE = 116;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_F_X509_NAME_ONELINE); }))) {
            mixin(enumMixinStr_X509_F_X509_NAME_ONELINE);
        }
    }




    static if(!is(typeof(X509_F_X509_NAME_PRINT))) {
        private enum enumMixinStr_X509_F_X509_NAME_PRINT = `enum X509_F_X509_NAME_PRINT = 117;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_F_X509_NAME_PRINT); }))) {
            mixin(enumMixinStr_X509_F_X509_NAME_PRINT);
        }
    }




    static if(!is(typeof(X509_F_X509_OBJECT_NEW))) {
        private enum enumMixinStr_X509_F_X509_OBJECT_NEW = `enum X509_F_X509_OBJECT_NEW = 150;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_F_X509_OBJECT_NEW); }))) {
            mixin(enumMixinStr_X509_F_X509_OBJECT_NEW);
        }
    }




    static if(!is(typeof(X509_F_X509_PRINT_EX_FP))) {
        private enum enumMixinStr_X509_F_X509_PRINT_EX_FP = `enum X509_F_X509_PRINT_EX_FP = 118;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_F_X509_PRINT_EX_FP); }))) {
            mixin(enumMixinStr_X509_F_X509_PRINT_EX_FP);
        }
    }




    static if(!is(typeof(X509_F_X509_PUBKEY_DECODE))) {
        private enum enumMixinStr_X509_F_X509_PUBKEY_DECODE = `enum X509_F_X509_PUBKEY_DECODE = 148;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_F_X509_PUBKEY_DECODE); }))) {
            mixin(enumMixinStr_X509_F_X509_PUBKEY_DECODE);
        }
    }




    static if(!is(typeof(X509_F_X509_PUBKEY_GET))) {
        private enum enumMixinStr_X509_F_X509_PUBKEY_GET = `enum X509_F_X509_PUBKEY_GET = 161;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_F_X509_PUBKEY_GET); }))) {
            mixin(enumMixinStr_X509_F_X509_PUBKEY_GET);
        }
    }




    static if(!is(typeof(X509_F_X509_PUBKEY_GET0))) {
        private enum enumMixinStr_X509_F_X509_PUBKEY_GET0 = `enum X509_F_X509_PUBKEY_GET0 = 119;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_F_X509_PUBKEY_GET0); }))) {
            mixin(enumMixinStr_X509_F_X509_PUBKEY_GET0);
        }
    }




    static if(!is(typeof(X509_F_X509_PUBKEY_SET))) {
        private enum enumMixinStr_X509_F_X509_PUBKEY_SET = `enum X509_F_X509_PUBKEY_SET = 120;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_F_X509_PUBKEY_SET); }))) {
            mixin(enumMixinStr_X509_F_X509_PUBKEY_SET);
        }
    }




    static if(!is(typeof(X509_F_X509_REQ_CHECK_PRIVATE_KEY))) {
        private enum enumMixinStr_X509_F_X509_REQ_CHECK_PRIVATE_KEY = `enum X509_F_X509_REQ_CHECK_PRIVATE_KEY = 144;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_F_X509_REQ_CHECK_PRIVATE_KEY); }))) {
            mixin(enumMixinStr_X509_F_X509_REQ_CHECK_PRIVATE_KEY);
        }
    }




    static if(!is(typeof(X509_F_X509_REQ_PRINT_EX))) {
        private enum enumMixinStr_X509_F_X509_REQ_PRINT_EX = `enum X509_F_X509_REQ_PRINT_EX = 121;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_F_X509_REQ_PRINT_EX); }))) {
            mixin(enumMixinStr_X509_F_X509_REQ_PRINT_EX);
        }
    }




    static if(!is(typeof(X509_F_X509_REQ_PRINT_FP))) {
        private enum enumMixinStr_X509_F_X509_REQ_PRINT_FP = `enum X509_F_X509_REQ_PRINT_FP = 122;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_F_X509_REQ_PRINT_FP); }))) {
            mixin(enumMixinStr_X509_F_X509_REQ_PRINT_FP);
        }
    }




    static if(!is(typeof(X509_F_X509_REQ_TO_X509))) {
        private enum enumMixinStr_X509_F_X509_REQ_TO_X509 = `enum X509_F_X509_REQ_TO_X509 = 123;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_F_X509_REQ_TO_X509); }))) {
            mixin(enumMixinStr_X509_F_X509_REQ_TO_X509);
        }
    }




    static if(!is(typeof(X509_F_X509_STORE_ADD_CERT))) {
        private enum enumMixinStr_X509_F_X509_STORE_ADD_CERT = `enum X509_F_X509_STORE_ADD_CERT = 124;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_F_X509_STORE_ADD_CERT); }))) {
            mixin(enumMixinStr_X509_F_X509_STORE_ADD_CERT);
        }
    }




    static if(!is(typeof(X509_F_X509_STORE_ADD_CRL))) {
        private enum enumMixinStr_X509_F_X509_STORE_ADD_CRL = `enum X509_F_X509_STORE_ADD_CRL = 125;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_F_X509_STORE_ADD_CRL); }))) {
            mixin(enumMixinStr_X509_F_X509_STORE_ADD_CRL);
        }
    }




    static if(!is(typeof(X509_F_X509_STORE_ADD_LOOKUP))) {
        private enum enumMixinStr_X509_F_X509_STORE_ADD_LOOKUP = `enum X509_F_X509_STORE_ADD_LOOKUP = 157;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_F_X509_STORE_ADD_LOOKUP); }))) {
            mixin(enumMixinStr_X509_F_X509_STORE_ADD_LOOKUP);
        }
    }




    static if(!is(typeof(X509_F_X509_STORE_CTX_GET1_ISSUER))) {
        private enum enumMixinStr_X509_F_X509_STORE_CTX_GET1_ISSUER = `enum X509_F_X509_STORE_CTX_GET1_ISSUER = 146;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_F_X509_STORE_CTX_GET1_ISSUER); }))) {
            mixin(enumMixinStr_X509_F_X509_STORE_CTX_GET1_ISSUER);
        }
    }




    static if(!is(typeof(X509_F_X509_STORE_CTX_INIT))) {
        private enum enumMixinStr_X509_F_X509_STORE_CTX_INIT = `enum X509_F_X509_STORE_CTX_INIT = 143;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_F_X509_STORE_CTX_INIT); }))) {
            mixin(enumMixinStr_X509_F_X509_STORE_CTX_INIT);
        }
    }




    static if(!is(typeof(X509_F_X509_STORE_CTX_NEW))) {
        private enum enumMixinStr_X509_F_X509_STORE_CTX_NEW = `enum X509_F_X509_STORE_CTX_NEW = 142;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_F_X509_STORE_CTX_NEW); }))) {
            mixin(enumMixinStr_X509_F_X509_STORE_CTX_NEW);
        }
    }




    static if(!is(typeof(X509_F_X509_STORE_CTX_PURPOSE_INHERIT))) {
        private enum enumMixinStr_X509_F_X509_STORE_CTX_PURPOSE_INHERIT = `enum X509_F_X509_STORE_CTX_PURPOSE_INHERIT = 134;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_F_X509_STORE_CTX_PURPOSE_INHERIT); }))) {
            mixin(enumMixinStr_X509_F_X509_STORE_CTX_PURPOSE_INHERIT);
        }
    }




    static if(!is(typeof(X509_F_X509_STORE_NEW))) {
        private enum enumMixinStr_X509_F_X509_STORE_NEW = `enum X509_F_X509_STORE_NEW = 158;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_F_X509_STORE_NEW); }))) {
            mixin(enumMixinStr_X509_F_X509_STORE_NEW);
        }
    }




    static if(!is(typeof(X509_F_X509_TO_X509_REQ))) {
        private enum enumMixinStr_X509_F_X509_TO_X509_REQ = `enum X509_F_X509_TO_X509_REQ = 126;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_F_X509_TO_X509_REQ); }))) {
            mixin(enumMixinStr_X509_F_X509_TO_X509_REQ);
        }
    }




    static if(!is(typeof(X509_F_X509_TRUST_ADD))) {
        private enum enumMixinStr_X509_F_X509_TRUST_ADD = `enum X509_F_X509_TRUST_ADD = 133;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_F_X509_TRUST_ADD); }))) {
            mixin(enumMixinStr_X509_F_X509_TRUST_ADD);
        }
    }




    static if(!is(typeof(X509_F_X509_TRUST_SET))) {
        private enum enumMixinStr_X509_F_X509_TRUST_SET = `enum X509_F_X509_TRUST_SET = 141;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_F_X509_TRUST_SET); }))) {
            mixin(enumMixinStr_X509_F_X509_TRUST_SET);
        }
    }




    static if(!is(typeof(X509_F_X509_VERIFY_CERT))) {
        private enum enumMixinStr_X509_F_X509_VERIFY_CERT = `enum X509_F_X509_VERIFY_CERT = 127;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_F_X509_VERIFY_CERT); }))) {
            mixin(enumMixinStr_X509_F_X509_VERIFY_CERT);
        }
    }




    static if(!is(typeof(X509_F_X509_VERIFY_PARAM_NEW))) {
        private enum enumMixinStr_X509_F_X509_VERIFY_PARAM_NEW = `enum X509_F_X509_VERIFY_PARAM_NEW = 159;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_F_X509_VERIFY_PARAM_NEW); }))) {
            mixin(enumMixinStr_X509_F_X509_VERIFY_PARAM_NEW);
        }
    }




    static if(!is(typeof(X509_R_AKID_MISMATCH))) {
        private enum enumMixinStr_X509_R_AKID_MISMATCH = `enum X509_R_AKID_MISMATCH = 110;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_R_AKID_MISMATCH); }))) {
            mixin(enumMixinStr_X509_R_AKID_MISMATCH);
        }
    }




    static if(!is(typeof(X509_R_BAD_SELECTOR))) {
        private enum enumMixinStr_X509_R_BAD_SELECTOR = `enum X509_R_BAD_SELECTOR = 133;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_R_BAD_SELECTOR); }))) {
            mixin(enumMixinStr_X509_R_BAD_SELECTOR);
        }
    }




    static if(!is(typeof(X509_R_BAD_X509_FILETYPE))) {
        private enum enumMixinStr_X509_R_BAD_X509_FILETYPE = `enum X509_R_BAD_X509_FILETYPE = 100;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_R_BAD_X509_FILETYPE); }))) {
            mixin(enumMixinStr_X509_R_BAD_X509_FILETYPE);
        }
    }




    static if(!is(typeof(X509_R_BASE64_DECODE_ERROR))) {
        private enum enumMixinStr_X509_R_BASE64_DECODE_ERROR = `enum X509_R_BASE64_DECODE_ERROR = 118;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_R_BASE64_DECODE_ERROR); }))) {
            mixin(enumMixinStr_X509_R_BASE64_DECODE_ERROR);
        }
    }




    static if(!is(typeof(X509_R_CANT_CHECK_DH_KEY))) {
        private enum enumMixinStr_X509_R_CANT_CHECK_DH_KEY = `enum X509_R_CANT_CHECK_DH_KEY = 114;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_R_CANT_CHECK_DH_KEY); }))) {
            mixin(enumMixinStr_X509_R_CANT_CHECK_DH_KEY);
        }
    }




    static if(!is(typeof(X509_R_CERT_ALREADY_IN_HASH_TABLE))) {
        private enum enumMixinStr_X509_R_CERT_ALREADY_IN_HASH_TABLE = `enum X509_R_CERT_ALREADY_IN_HASH_TABLE = 101;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_R_CERT_ALREADY_IN_HASH_TABLE); }))) {
            mixin(enumMixinStr_X509_R_CERT_ALREADY_IN_HASH_TABLE);
        }
    }




    static if(!is(typeof(X509_R_CRL_ALREADY_DELTA))) {
        private enum enumMixinStr_X509_R_CRL_ALREADY_DELTA = `enum X509_R_CRL_ALREADY_DELTA = 127;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_R_CRL_ALREADY_DELTA); }))) {
            mixin(enumMixinStr_X509_R_CRL_ALREADY_DELTA);
        }
    }




    static if(!is(typeof(X509_R_CRL_VERIFY_FAILURE))) {
        private enum enumMixinStr_X509_R_CRL_VERIFY_FAILURE = `enum X509_R_CRL_VERIFY_FAILURE = 131;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_R_CRL_VERIFY_FAILURE); }))) {
            mixin(enumMixinStr_X509_R_CRL_VERIFY_FAILURE);
        }
    }




    static if(!is(typeof(X509_R_IDP_MISMATCH))) {
        private enum enumMixinStr_X509_R_IDP_MISMATCH = `enum X509_R_IDP_MISMATCH = 128;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_R_IDP_MISMATCH); }))) {
            mixin(enumMixinStr_X509_R_IDP_MISMATCH);
        }
    }




    static if(!is(typeof(X509_R_INVALID_ATTRIBUTES))) {
        private enum enumMixinStr_X509_R_INVALID_ATTRIBUTES = `enum X509_R_INVALID_ATTRIBUTES = 138;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_R_INVALID_ATTRIBUTES); }))) {
            mixin(enumMixinStr_X509_R_INVALID_ATTRIBUTES);
        }
    }




    static if(!is(typeof(X509_R_INVALID_DIRECTORY))) {
        private enum enumMixinStr_X509_R_INVALID_DIRECTORY = `enum X509_R_INVALID_DIRECTORY = 113;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_R_INVALID_DIRECTORY); }))) {
            mixin(enumMixinStr_X509_R_INVALID_DIRECTORY);
        }
    }




    static if(!is(typeof(X509_R_INVALID_FIELD_NAME))) {
        private enum enumMixinStr_X509_R_INVALID_FIELD_NAME = `enum X509_R_INVALID_FIELD_NAME = 119;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_R_INVALID_FIELD_NAME); }))) {
            mixin(enumMixinStr_X509_R_INVALID_FIELD_NAME);
        }
    }




    static if(!is(typeof(X509_R_INVALID_TRUST))) {
        private enum enumMixinStr_X509_R_INVALID_TRUST = `enum X509_R_INVALID_TRUST = 123;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_R_INVALID_TRUST); }))) {
            mixin(enumMixinStr_X509_R_INVALID_TRUST);
        }
    }




    static if(!is(typeof(X509_R_ISSUER_MISMATCH))) {
        private enum enumMixinStr_X509_R_ISSUER_MISMATCH = `enum X509_R_ISSUER_MISMATCH = 129;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_R_ISSUER_MISMATCH); }))) {
            mixin(enumMixinStr_X509_R_ISSUER_MISMATCH);
        }
    }




    static if(!is(typeof(X509_R_KEY_TYPE_MISMATCH))) {
        private enum enumMixinStr_X509_R_KEY_TYPE_MISMATCH = `enum X509_R_KEY_TYPE_MISMATCH = 115;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_R_KEY_TYPE_MISMATCH); }))) {
            mixin(enumMixinStr_X509_R_KEY_TYPE_MISMATCH);
        }
    }




    static if(!is(typeof(X509_R_KEY_VALUES_MISMATCH))) {
        private enum enumMixinStr_X509_R_KEY_VALUES_MISMATCH = `enum X509_R_KEY_VALUES_MISMATCH = 116;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_R_KEY_VALUES_MISMATCH); }))) {
            mixin(enumMixinStr_X509_R_KEY_VALUES_MISMATCH);
        }
    }




    static if(!is(typeof(X509_R_LOADING_CERT_DIR))) {
        private enum enumMixinStr_X509_R_LOADING_CERT_DIR = `enum X509_R_LOADING_CERT_DIR = 103;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_R_LOADING_CERT_DIR); }))) {
            mixin(enumMixinStr_X509_R_LOADING_CERT_DIR);
        }
    }




    static if(!is(typeof(X509_R_LOADING_DEFAULTS))) {
        private enum enumMixinStr_X509_R_LOADING_DEFAULTS = `enum X509_R_LOADING_DEFAULTS = 104;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_R_LOADING_DEFAULTS); }))) {
            mixin(enumMixinStr_X509_R_LOADING_DEFAULTS);
        }
    }




    static if(!is(typeof(X509_R_METHOD_NOT_SUPPORTED))) {
        private enum enumMixinStr_X509_R_METHOD_NOT_SUPPORTED = `enum X509_R_METHOD_NOT_SUPPORTED = 124;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_R_METHOD_NOT_SUPPORTED); }))) {
            mixin(enumMixinStr_X509_R_METHOD_NOT_SUPPORTED);
        }
    }




    static if(!is(typeof(X509_R_NAME_TOO_LONG))) {
        private enum enumMixinStr_X509_R_NAME_TOO_LONG = `enum X509_R_NAME_TOO_LONG = 134;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_R_NAME_TOO_LONG); }))) {
            mixin(enumMixinStr_X509_R_NAME_TOO_LONG);
        }
    }




    static if(!is(typeof(X509_R_NEWER_CRL_NOT_NEWER))) {
        private enum enumMixinStr_X509_R_NEWER_CRL_NOT_NEWER = `enum X509_R_NEWER_CRL_NOT_NEWER = 132;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_R_NEWER_CRL_NOT_NEWER); }))) {
            mixin(enumMixinStr_X509_R_NEWER_CRL_NOT_NEWER);
        }
    }




    static if(!is(typeof(X509_R_NO_CERTIFICATE_FOUND))) {
        private enum enumMixinStr_X509_R_NO_CERTIFICATE_FOUND = `enum X509_R_NO_CERTIFICATE_FOUND = 135;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_R_NO_CERTIFICATE_FOUND); }))) {
            mixin(enumMixinStr_X509_R_NO_CERTIFICATE_FOUND);
        }
    }




    static if(!is(typeof(X509_R_NO_CERTIFICATE_OR_CRL_FOUND))) {
        private enum enumMixinStr_X509_R_NO_CERTIFICATE_OR_CRL_FOUND = `enum X509_R_NO_CERTIFICATE_OR_CRL_FOUND = 136;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_R_NO_CERTIFICATE_OR_CRL_FOUND); }))) {
            mixin(enumMixinStr_X509_R_NO_CERTIFICATE_OR_CRL_FOUND);
        }
    }




    static if(!is(typeof(X509_R_NO_CERT_SET_FOR_US_TO_VERIFY))) {
        private enum enumMixinStr_X509_R_NO_CERT_SET_FOR_US_TO_VERIFY = `enum X509_R_NO_CERT_SET_FOR_US_TO_VERIFY = 105;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_R_NO_CERT_SET_FOR_US_TO_VERIFY); }))) {
            mixin(enumMixinStr_X509_R_NO_CERT_SET_FOR_US_TO_VERIFY);
        }
    }




    static if(!is(typeof(X509_R_NO_CRL_FOUND))) {
        private enum enumMixinStr_X509_R_NO_CRL_FOUND = `enum X509_R_NO_CRL_FOUND = 137;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_R_NO_CRL_FOUND); }))) {
            mixin(enumMixinStr_X509_R_NO_CRL_FOUND);
        }
    }




    static if(!is(typeof(X509_R_NO_CRL_NUMBER))) {
        private enum enumMixinStr_X509_R_NO_CRL_NUMBER = `enum X509_R_NO_CRL_NUMBER = 130;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_R_NO_CRL_NUMBER); }))) {
            mixin(enumMixinStr_X509_R_NO_CRL_NUMBER);
        }
    }




    static if(!is(typeof(X509_R_PUBLIC_KEY_DECODE_ERROR))) {
        private enum enumMixinStr_X509_R_PUBLIC_KEY_DECODE_ERROR = `enum X509_R_PUBLIC_KEY_DECODE_ERROR = 125;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_R_PUBLIC_KEY_DECODE_ERROR); }))) {
            mixin(enumMixinStr_X509_R_PUBLIC_KEY_DECODE_ERROR);
        }
    }




    static if(!is(typeof(X509_R_PUBLIC_KEY_ENCODE_ERROR))) {
        private enum enumMixinStr_X509_R_PUBLIC_KEY_ENCODE_ERROR = `enum X509_R_PUBLIC_KEY_ENCODE_ERROR = 126;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_R_PUBLIC_KEY_ENCODE_ERROR); }))) {
            mixin(enumMixinStr_X509_R_PUBLIC_KEY_ENCODE_ERROR);
        }
    }




    static if(!is(typeof(X509_R_SHOULD_RETRY))) {
        private enum enumMixinStr_X509_R_SHOULD_RETRY = `enum X509_R_SHOULD_RETRY = 106;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_R_SHOULD_RETRY); }))) {
            mixin(enumMixinStr_X509_R_SHOULD_RETRY);
        }
    }




    static if(!is(typeof(X509_R_UNABLE_TO_FIND_PARAMETERS_IN_CHAIN))) {
        private enum enumMixinStr_X509_R_UNABLE_TO_FIND_PARAMETERS_IN_CHAIN = `enum X509_R_UNABLE_TO_FIND_PARAMETERS_IN_CHAIN = 107;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_R_UNABLE_TO_FIND_PARAMETERS_IN_CHAIN); }))) {
            mixin(enumMixinStr_X509_R_UNABLE_TO_FIND_PARAMETERS_IN_CHAIN);
        }
    }




    static if(!is(typeof(X509_R_UNABLE_TO_GET_CERTS_PUBLIC_KEY))) {
        private enum enumMixinStr_X509_R_UNABLE_TO_GET_CERTS_PUBLIC_KEY = `enum X509_R_UNABLE_TO_GET_CERTS_PUBLIC_KEY = 108;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_R_UNABLE_TO_GET_CERTS_PUBLIC_KEY); }))) {
            mixin(enumMixinStr_X509_R_UNABLE_TO_GET_CERTS_PUBLIC_KEY);
        }
    }




    static if(!is(typeof(X509_R_UNKNOWN_KEY_TYPE))) {
        private enum enumMixinStr_X509_R_UNKNOWN_KEY_TYPE = `enum X509_R_UNKNOWN_KEY_TYPE = 117;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_R_UNKNOWN_KEY_TYPE); }))) {
            mixin(enumMixinStr_X509_R_UNKNOWN_KEY_TYPE);
        }
    }




    static if(!is(typeof(X509_R_UNKNOWN_NID))) {
        private enum enumMixinStr_X509_R_UNKNOWN_NID = `enum X509_R_UNKNOWN_NID = 109;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_R_UNKNOWN_NID); }))) {
            mixin(enumMixinStr_X509_R_UNKNOWN_NID);
        }
    }




    static if(!is(typeof(X509_R_UNKNOWN_PURPOSE_ID))) {
        private enum enumMixinStr_X509_R_UNKNOWN_PURPOSE_ID = `enum X509_R_UNKNOWN_PURPOSE_ID = 121;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_R_UNKNOWN_PURPOSE_ID); }))) {
            mixin(enumMixinStr_X509_R_UNKNOWN_PURPOSE_ID);
        }
    }




    static if(!is(typeof(X509_R_UNKNOWN_TRUST_ID))) {
        private enum enumMixinStr_X509_R_UNKNOWN_TRUST_ID = `enum X509_R_UNKNOWN_TRUST_ID = 120;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_R_UNKNOWN_TRUST_ID); }))) {
            mixin(enumMixinStr_X509_R_UNKNOWN_TRUST_ID);
        }
    }




    static if(!is(typeof(X509_R_UNSUPPORTED_ALGORITHM))) {
        private enum enumMixinStr_X509_R_UNSUPPORTED_ALGORITHM = `enum X509_R_UNSUPPORTED_ALGORITHM = 111;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_R_UNSUPPORTED_ALGORITHM); }))) {
            mixin(enumMixinStr_X509_R_UNSUPPORTED_ALGORITHM);
        }
    }




    static if(!is(typeof(X509_R_WRONG_LOOKUP_TYPE))) {
        private enum enumMixinStr_X509_R_WRONG_LOOKUP_TYPE = `enum X509_R_WRONG_LOOKUP_TYPE = 112;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_R_WRONG_LOOKUP_TYPE); }))) {
            mixin(enumMixinStr_X509_R_WRONG_LOOKUP_TYPE);
        }
    }




    static if(!is(typeof(X509_R_WRONG_TYPE))) {
        private enum enumMixinStr_X509_R_WRONG_TYPE = `enum X509_R_WRONG_TYPE = 122;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_R_WRONG_TYPE); }))) {
            mixin(enumMixinStr_X509_R_WRONG_TYPE);
        }
    }






    static if(!is(typeof(CTX_TEST))) {
        private enum enumMixinStr_CTX_TEST = `enum CTX_TEST = 0x1;`;
        static if(is(typeof({ mixin(enumMixinStr_CTX_TEST); }))) {
            mixin(enumMixinStr_CTX_TEST);
        }
    }




    static if(!is(typeof(X509V3_CTX_REPLACE))) {
        private enum enumMixinStr_X509V3_CTX_REPLACE = `enum X509V3_CTX_REPLACE = 0x2;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_CTX_REPLACE); }))) {
            mixin(enumMixinStr_X509V3_CTX_REPLACE);
        }
    }




    static if(!is(typeof(X509V3_EXT_DYNAMIC))) {
        private enum enumMixinStr_X509V3_EXT_DYNAMIC = `enum X509V3_EXT_DYNAMIC = 0x1;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_EXT_DYNAMIC); }))) {
            mixin(enumMixinStr_X509V3_EXT_DYNAMIC);
        }
    }




    static if(!is(typeof(X509V3_EXT_CTX_DEP))) {
        private enum enumMixinStr_X509V3_EXT_CTX_DEP = `enum X509V3_EXT_CTX_DEP = 0x2;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_EXT_CTX_DEP); }))) {
            mixin(enumMixinStr_X509V3_EXT_CTX_DEP);
        }
    }




    static if(!is(typeof(X509V3_EXT_MULTILINE))) {
        private enum enumMixinStr_X509V3_EXT_MULTILINE = `enum X509V3_EXT_MULTILINE = 0x4;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_EXT_MULTILINE); }))) {
            mixin(enumMixinStr_X509V3_EXT_MULTILINE);
        }
    }




    static if(!is(typeof(GEN_OTHERNAME))) {
        private enum enumMixinStr_GEN_OTHERNAME = `enum GEN_OTHERNAME = 0;`;
        static if(is(typeof({ mixin(enumMixinStr_GEN_OTHERNAME); }))) {
            mixin(enumMixinStr_GEN_OTHERNAME);
        }
    }




    static if(!is(typeof(GEN_EMAIL))) {
        private enum enumMixinStr_GEN_EMAIL = `enum GEN_EMAIL = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_GEN_EMAIL); }))) {
            mixin(enumMixinStr_GEN_EMAIL);
        }
    }




    static if(!is(typeof(GEN_DNS))) {
        private enum enumMixinStr_GEN_DNS = `enum GEN_DNS = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_GEN_DNS); }))) {
            mixin(enumMixinStr_GEN_DNS);
        }
    }




    static if(!is(typeof(GEN_X400))) {
        private enum enumMixinStr_GEN_X400 = `enum GEN_X400 = 3;`;
        static if(is(typeof({ mixin(enumMixinStr_GEN_X400); }))) {
            mixin(enumMixinStr_GEN_X400);
        }
    }




    static if(!is(typeof(GEN_DIRNAME))) {
        private enum enumMixinStr_GEN_DIRNAME = `enum GEN_DIRNAME = 4;`;
        static if(is(typeof({ mixin(enumMixinStr_GEN_DIRNAME); }))) {
            mixin(enumMixinStr_GEN_DIRNAME);
        }
    }




    static if(!is(typeof(GEN_EDIPARTY))) {
        private enum enumMixinStr_GEN_EDIPARTY = `enum GEN_EDIPARTY = 5;`;
        static if(is(typeof({ mixin(enumMixinStr_GEN_EDIPARTY); }))) {
            mixin(enumMixinStr_GEN_EDIPARTY);
        }
    }




    static if(!is(typeof(GEN_URI))) {
        private enum enumMixinStr_GEN_URI = `enum GEN_URI = 6;`;
        static if(is(typeof({ mixin(enumMixinStr_GEN_URI); }))) {
            mixin(enumMixinStr_GEN_URI);
        }
    }




    static if(!is(typeof(GEN_IPADD))) {
        private enum enumMixinStr_GEN_IPADD = `enum GEN_IPADD = 7;`;
        static if(is(typeof({ mixin(enumMixinStr_GEN_IPADD); }))) {
            mixin(enumMixinStr_GEN_IPADD);
        }
    }




    static if(!is(typeof(GEN_RID))) {
        private enum enumMixinStr_GEN_RID = `enum GEN_RID = 8;`;
        static if(is(typeof({ mixin(enumMixinStr_GEN_RID); }))) {
            mixin(enumMixinStr_GEN_RID);
        }
    }




    static if(!is(typeof(CRLDP_ALL_REASONS))) {
        private enum enumMixinStr_CRLDP_ALL_REASONS = `enum CRLDP_ALL_REASONS = 0x807f;`;
        static if(is(typeof({ mixin(enumMixinStr_CRLDP_ALL_REASONS); }))) {
            mixin(enumMixinStr_CRLDP_ALL_REASONS);
        }
    }




    static if(!is(typeof(CRL_REASON_NONE))) {
        private enum enumMixinStr_CRL_REASON_NONE = `enum CRL_REASON_NONE = - 1;`;
        static if(is(typeof({ mixin(enumMixinStr_CRL_REASON_NONE); }))) {
            mixin(enumMixinStr_CRL_REASON_NONE);
        }
    }




    static if(!is(typeof(CRL_REASON_UNSPECIFIED))) {
        private enum enumMixinStr_CRL_REASON_UNSPECIFIED = `enum CRL_REASON_UNSPECIFIED = 0;`;
        static if(is(typeof({ mixin(enumMixinStr_CRL_REASON_UNSPECIFIED); }))) {
            mixin(enumMixinStr_CRL_REASON_UNSPECIFIED);
        }
    }




    static if(!is(typeof(CRL_REASON_KEY_COMPROMISE))) {
        private enum enumMixinStr_CRL_REASON_KEY_COMPROMISE = `enum CRL_REASON_KEY_COMPROMISE = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_CRL_REASON_KEY_COMPROMISE); }))) {
            mixin(enumMixinStr_CRL_REASON_KEY_COMPROMISE);
        }
    }




    static if(!is(typeof(CRL_REASON_CA_COMPROMISE))) {
        private enum enumMixinStr_CRL_REASON_CA_COMPROMISE = `enum CRL_REASON_CA_COMPROMISE = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_CRL_REASON_CA_COMPROMISE); }))) {
            mixin(enumMixinStr_CRL_REASON_CA_COMPROMISE);
        }
    }




    static if(!is(typeof(CRL_REASON_AFFILIATION_CHANGED))) {
        private enum enumMixinStr_CRL_REASON_AFFILIATION_CHANGED = `enum CRL_REASON_AFFILIATION_CHANGED = 3;`;
        static if(is(typeof({ mixin(enumMixinStr_CRL_REASON_AFFILIATION_CHANGED); }))) {
            mixin(enumMixinStr_CRL_REASON_AFFILIATION_CHANGED);
        }
    }




    static if(!is(typeof(CRL_REASON_SUPERSEDED))) {
        private enum enumMixinStr_CRL_REASON_SUPERSEDED = `enum CRL_REASON_SUPERSEDED = 4;`;
        static if(is(typeof({ mixin(enumMixinStr_CRL_REASON_SUPERSEDED); }))) {
            mixin(enumMixinStr_CRL_REASON_SUPERSEDED);
        }
    }




    static if(!is(typeof(CRL_REASON_CESSATION_OF_OPERATION))) {
        private enum enumMixinStr_CRL_REASON_CESSATION_OF_OPERATION = `enum CRL_REASON_CESSATION_OF_OPERATION = 5;`;
        static if(is(typeof({ mixin(enumMixinStr_CRL_REASON_CESSATION_OF_OPERATION); }))) {
            mixin(enumMixinStr_CRL_REASON_CESSATION_OF_OPERATION);
        }
    }




    static if(!is(typeof(CRL_REASON_CERTIFICATE_HOLD))) {
        private enum enumMixinStr_CRL_REASON_CERTIFICATE_HOLD = `enum CRL_REASON_CERTIFICATE_HOLD = 6;`;
        static if(is(typeof({ mixin(enumMixinStr_CRL_REASON_CERTIFICATE_HOLD); }))) {
            mixin(enumMixinStr_CRL_REASON_CERTIFICATE_HOLD);
        }
    }




    static if(!is(typeof(CRL_REASON_REMOVE_FROM_CRL))) {
        private enum enumMixinStr_CRL_REASON_REMOVE_FROM_CRL = `enum CRL_REASON_REMOVE_FROM_CRL = 8;`;
        static if(is(typeof({ mixin(enumMixinStr_CRL_REASON_REMOVE_FROM_CRL); }))) {
            mixin(enumMixinStr_CRL_REASON_REMOVE_FROM_CRL);
        }
    }




    static if(!is(typeof(CRL_REASON_PRIVILEGE_WITHDRAWN))) {
        private enum enumMixinStr_CRL_REASON_PRIVILEGE_WITHDRAWN = `enum CRL_REASON_PRIVILEGE_WITHDRAWN = 9;`;
        static if(is(typeof({ mixin(enumMixinStr_CRL_REASON_PRIVILEGE_WITHDRAWN); }))) {
            mixin(enumMixinStr_CRL_REASON_PRIVILEGE_WITHDRAWN);
        }
    }




    static if(!is(typeof(CRL_REASON_AA_COMPROMISE))) {
        private enum enumMixinStr_CRL_REASON_AA_COMPROMISE = `enum CRL_REASON_AA_COMPROMISE = 10;`;
        static if(is(typeof({ mixin(enumMixinStr_CRL_REASON_AA_COMPROMISE); }))) {
            mixin(enumMixinStr_CRL_REASON_AA_COMPROMISE);
        }
    }




    static if(!is(typeof(IDP_PRESENT))) {
        private enum enumMixinStr_IDP_PRESENT = `enum IDP_PRESENT = 0x1;`;
        static if(is(typeof({ mixin(enumMixinStr_IDP_PRESENT); }))) {
            mixin(enumMixinStr_IDP_PRESENT);
        }
    }




    static if(!is(typeof(IDP_INVALID))) {
        private enum enumMixinStr_IDP_INVALID = `enum IDP_INVALID = 0x2;`;
        static if(is(typeof({ mixin(enumMixinStr_IDP_INVALID); }))) {
            mixin(enumMixinStr_IDP_INVALID);
        }
    }




    static if(!is(typeof(IDP_ONLYUSER))) {
        private enum enumMixinStr_IDP_ONLYUSER = `enum IDP_ONLYUSER = 0x4;`;
        static if(is(typeof({ mixin(enumMixinStr_IDP_ONLYUSER); }))) {
            mixin(enumMixinStr_IDP_ONLYUSER);
        }
    }




    static if(!is(typeof(IDP_ONLYCA))) {
        private enum enumMixinStr_IDP_ONLYCA = `enum IDP_ONLYCA = 0x8;`;
        static if(is(typeof({ mixin(enumMixinStr_IDP_ONLYCA); }))) {
            mixin(enumMixinStr_IDP_ONLYCA);
        }
    }




    static if(!is(typeof(IDP_ONLYATTR))) {
        private enum enumMixinStr_IDP_ONLYATTR = `enum IDP_ONLYATTR = 0x10;`;
        static if(is(typeof({ mixin(enumMixinStr_IDP_ONLYATTR); }))) {
            mixin(enumMixinStr_IDP_ONLYATTR);
        }
    }




    static if(!is(typeof(IDP_INDIRECT))) {
        private enum enumMixinStr_IDP_INDIRECT = `enum IDP_INDIRECT = 0x20;`;
        static if(is(typeof({ mixin(enumMixinStr_IDP_INDIRECT); }))) {
            mixin(enumMixinStr_IDP_INDIRECT);
        }
    }




    static if(!is(typeof(IDP_REASONS))) {
        private enum enumMixinStr_IDP_REASONS = `enum IDP_REASONS = 0x40;`;
        static if(is(typeof({ mixin(enumMixinStr_IDP_REASONS); }))) {
            mixin(enumMixinStr_IDP_REASONS);
        }
    }
    static if(!is(typeof(EXT_END))) {
        private enum enumMixinStr_EXT_END = `enum EXT_END = { - 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 };`;
        static if(is(typeof({ mixin(enumMixinStr_EXT_END); }))) {
            mixin(enumMixinStr_EXT_END);
        }
    }




    static if(!is(typeof(EXFLAG_BCONS))) {
        private enum enumMixinStr_EXFLAG_BCONS = `enum EXFLAG_BCONS = 0x1;`;
        static if(is(typeof({ mixin(enumMixinStr_EXFLAG_BCONS); }))) {
            mixin(enumMixinStr_EXFLAG_BCONS);
        }
    }




    static if(!is(typeof(EXFLAG_KUSAGE))) {
        private enum enumMixinStr_EXFLAG_KUSAGE = `enum EXFLAG_KUSAGE = 0x2;`;
        static if(is(typeof({ mixin(enumMixinStr_EXFLAG_KUSAGE); }))) {
            mixin(enumMixinStr_EXFLAG_KUSAGE);
        }
    }




    static if(!is(typeof(EXFLAG_XKUSAGE))) {
        private enum enumMixinStr_EXFLAG_XKUSAGE = `enum EXFLAG_XKUSAGE = 0x4;`;
        static if(is(typeof({ mixin(enumMixinStr_EXFLAG_XKUSAGE); }))) {
            mixin(enumMixinStr_EXFLAG_XKUSAGE);
        }
    }




    static if(!is(typeof(EXFLAG_NSCERT))) {
        private enum enumMixinStr_EXFLAG_NSCERT = `enum EXFLAG_NSCERT = 0x8;`;
        static if(is(typeof({ mixin(enumMixinStr_EXFLAG_NSCERT); }))) {
            mixin(enumMixinStr_EXFLAG_NSCERT);
        }
    }




    static if(!is(typeof(EXFLAG_CA))) {
        private enum enumMixinStr_EXFLAG_CA = `enum EXFLAG_CA = 0x10;`;
        static if(is(typeof({ mixin(enumMixinStr_EXFLAG_CA); }))) {
            mixin(enumMixinStr_EXFLAG_CA);
        }
    }




    static if(!is(typeof(EXFLAG_SI))) {
        private enum enumMixinStr_EXFLAG_SI = `enum EXFLAG_SI = 0x20;`;
        static if(is(typeof({ mixin(enumMixinStr_EXFLAG_SI); }))) {
            mixin(enumMixinStr_EXFLAG_SI);
        }
    }




    static if(!is(typeof(EXFLAG_V1))) {
        private enum enumMixinStr_EXFLAG_V1 = `enum EXFLAG_V1 = 0x40;`;
        static if(is(typeof({ mixin(enumMixinStr_EXFLAG_V1); }))) {
            mixin(enumMixinStr_EXFLAG_V1);
        }
    }




    static if(!is(typeof(EXFLAG_INVALID))) {
        private enum enumMixinStr_EXFLAG_INVALID = `enum EXFLAG_INVALID = 0x80;`;
        static if(is(typeof({ mixin(enumMixinStr_EXFLAG_INVALID); }))) {
            mixin(enumMixinStr_EXFLAG_INVALID);
        }
    }




    static if(!is(typeof(EXFLAG_SET))) {
        private enum enumMixinStr_EXFLAG_SET = `enum EXFLAG_SET = 0x100;`;
        static if(is(typeof({ mixin(enumMixinStr_EXFLAG_SET); }))) {
            mixin(enumMixinStr_EXFLAG_SET);
        }
    }




    static if(!is(typeof(EXFLAG_CRITICAL))) {
        private enum enumMixinStr_EXFLAG_CRITICAL = `enum EXFLAG_CRITICAL = 0x200;`;
        static if(is(typeof({ mixin(enumMixinStr_EXFLAG_CRITICAL); }))) {
            mixin(enumMixinStr_EXFLAG_CRITICAL);
        }
    }




    static if(!is(typeof(EXFLAG_PROXY))) {
        private enum enumMixinStr_EXFLAG_PROXY = `enum EXFLAG_PROXY = 0x400;`;
        static if(is(typeof({ mixin(enumMixinStr_EXFLAG_PROXY); }))) {
            mixin(enumMixinStr_EXFLAG_PROXY);
        }
    }




    static if(!is(typeof(EXFLAG_INVALID_POLICY))) {
        private enum enumMixinStr_EXFLAG_INVALID_POLICY = `enum EXFLAG_INVALID_POLICY = 0x800;`;
        static if(is(typeof({ mixin(enumMixinStr_EXFLAG_INVALID_POLICY); }))) {
            mixin(enumMixinStr_EXFLAG_INVALID_POLICY);
        }
    }




    static if(!is(typeof(EXFLAG_FRESHEST))) {
        private enum enumMixinStr_EXFLAG_FRESHEST = `enum EXFLAG_FRESHEST = 0x1000;`;
        static if(is(typeof({ mixin(enumMixinStr_EXFLAG_FRESHEST); }))) {
            mixin(enumMixinStr_EXFLAG_FRESHEST);
        }
    }




    static if(!is(typeof(EXFLAG_SS))) {
        private enum enumMixinStr_EXFLAG_SS = `enum EXFLAG_SS = 0x2000;`;
        static if(is(typeof({ mixin(enumMixinStr_EXFLAG_SS); }))) {
            mixin(enumMixinStr_EXFLAG_SS);
        }
    }




    static if(!is(typeof(EXFLAG_NO_FINGERPRINT))) {
        private enum enumMixinStr_EXFLAG_NO_FINGERPRINT = `enum EXFLAG_NO_FINGERPRINT = 0x100000;`;
        static if(is(typeof({ mixin(enumMixinStr_EXFLAG_NO_FINGERPRINT); }))) {
            mixin(enumMixinStr_EXFLAG_NO_FINGERPRINT);
        }
    }




    static if(!is(typeof(KU_DIGITAL_SIGNATURE))) {
        private enum enumMixinStr_KU_DIGITAL_SIGNATURE = `enum KU_DIGITAL_SIGNATURE = 0x0080;`;
        static if(is(typeof({ mixin(enumMixinStr_KU_DIGITAL_SIGNATURE); }))) {
            mixin(enumMixinStr_KU_DIGITAL_SIGNATURE);
        }
    }




    static if(!is(typeof(KU_NON_REPUDIATION))) {
        private enum enumMixinStr_KU_NON_REPUDIATION = `enum KU_NON_REPUDIATION = 0x0040;`;
        static if(is(typeof({ mixin(enumMixinStr_KU_NON_REPUDIATION); }))) {
            mixin(enumMixinStr_KU_NON_REPUDIATION);
        }
    }




    static if(!is(typeof(KU_KEY_ENCIPHERMENT))) {
        private enum enumMixinStr_KU_KEY_ENCIPHERMENT = `enum KU_KEY_ENCIPHERMENT = 0x0020;`;
        static if(is(typeof({ mixin(enumMixinStr_KU_KEY_ENCIPHERMENT); }))) {
            mixin(enumMixinStr_KU_KEY_ENCIPHERMENT);
        }
    }




    static if(!is(typeof(KU_DATA_ENCIPHERMENT))) {
        private enum enumMixinStr_KU_DATA_ENCIPHERMENT = `enum KU_DATA_ENCIPHERMENT = 0x0010;`;
        static if(is(typeof({ mixin(enumMixinStr_KU_DATA_ENCIPHERMENT); }))) {
            mixin(enumMixinStr_KU_DATA_ENCIPHERMENT);
        }
    }




    static if(!is(typeof(KU_KEY_AGREEMENT))) {
        private enum enumMixinStr_KU_KEY_AGREEMENT = `enum KU_KEY_AGREEMENT = 0x0008;`;
        static if(is(typeof({ mixin(enumMixinStr_KU_KEY_AGREEMENT); }))) {
            mixin(enumMixinStr_KU_KEY_AGREEMENT);
        }
    }




    static if(!is(typeof(KU_KEY_CERT_SIGN))) {
        private enum enumMixinStr_KU_KEY_CERT_SIGN = `enum KU_KEY_CERT_SIGN = 0x0004;`;
        static if(is(typeof({ mixin(enumMixinStr_KU_KEY_CERT_SIGN); }))) {
            mixin(enumMixinStr_KU_KEY_CERT_SIGN);
        }
    }




    static if(!is(typeof(KU_CRL_SIGN))) {
        private enum enumMixinStr_KU_CRL_SIGN = `enum KU_CRL_SIGN = 0x0002;`;
        static if(is(typeof({ mixin(enumMixinStr_KU_CRL_SIGN); }))) {
            mixin(enumMixinStr_KU_CRL_SIGN);
        }
    }




    static if(!is(typeof(KU_ENCIPHER_ONLY))) {
        private enum enumMixinStr_KU_ENCIPHER_ONLY = `enum KU_ENCIPHER_ONLY = 0x0001;`;
        static if(is(typeof({ mixin(enumMixinStr_KU_ENCIPHER_ONLY); }))) {
            mixin(enumMixinStr_KU_ENCIPHER_ONLY);
        }
    }




    static if(!is(typeof(KU_DECIPHER_ONLY))) {
        private enum enumMixinStr_KU_DECIPHER_ONLY = `enum KU_DECIPHER_ONLY = 0x8000;`;
        static if(is(typeof({ mixin(enumMixinStr_KU_DECIPHER_ONLY); }))) {
            mixin(enumMixinStr_KU_DECIPHER_ONLY);
        }
    }




    static if(!is(typeof(NS_SSL_CLIENT))) {
        private enum enumMixinStr_NS_SSL_CLIENT = `enum NS_SSL_CLIENT = 0x80;`;
        static if(is(typeof({ mixin(enumMixinStr_NS_SSL_CLIENT); }))) {
            mixin(enumMixinStr_NS_SSL_CLIENT);
        }
    }




    static if(!is(typeof(NS_SSL_SERVER))) {
        private enum enumMixinStr_NS_SSL_SERVER = `enum NS_SSL_SERVER = 0x40;`;
        static if(is(typeof({ mixin(enumMixinStr_NS_SSL_SERVER); }))) {
            mixin(enumMixinStr_NS_SSL_SERVER);
        }
    }




    static if(!is(typeof(NS_SMIME))) {
        private enum enumMixinStr_NS_SMIME = `enum NS_SMIME = 0x20;`;
        static if(is(typeof({ mixin(enumMixinStr_NS_SMIME); }))) {
            mixin(enumMixinStr_NS_SMIME);
        }
    }




    static if(!is(typeof(NS_OBJSIGN))) {
        private enum enumMixinStr_NS_OBJSIGN = `enum NS_OBJSIGN = 0x10;`;
        static if(is(typeof({ mixin(enumMixinStr_NS_OBJSIGN); }))) {
            mixin(enumMixinStr_NS_OBJSIGN);
        }
    }




    static if(!is(typeof(NS_SSL_CA))) {
        private enum enumMixinStr_NS_SSL_CA = `enum NS_SSL_CA = 0x04;`;
        static if(is(typeof({ mixin(enumMixinStr_NS_SSL_CA); }))) {
            mixin(enumMixinStr_NS_SSL_CA);
        }
    }




    static if(!is(typeof(NS_SMIME_CA))) {
        private enum enumMixinStr_NS_SMIME_CA = `enum NS_SMIME_CA = 0x02;`;
        static if(is(typeof({ mixin(enumMixinStr_NS_SMIME_CA); }))) {
            mixin(enumMixinStr_NS_SMIME_CA);
        }
    }




    static if(!is(typeof(NS_OBJSIGN_CA))) {
        private enum enumMixinStr_NS_OBJSIGN_CA = `enum NS_OBJSIGN_CA = 0x01;`;
        static if(is(typeof({ mixin(enumMixinStr_NS_OBJSIGN_CA); }))) {
            mixin(enumMixinStr_NS_OBJSIGN_CA);
        }
    }




    static if(!is(typeof(NS_ANY_CA))) {
        private enum enumMixinStr_NS_ANY_CA = `enum NS_ANY_CA = ( 0x04 | 0x02 | 0x01 );`;
        static if(is(typeof({ mixin(enumMixinStr_NS_ANY_CA); }))) {
            mixin(enumMixinStr_NS_ANY_CA);
        }
    }




    static if(!is(typeof(XKU_SSL_SERVER))) {
        private enum enumMixinStr_XKU_SSL_SERVER = `enum XKU_SSL_SERVER = 0x1;`;
        static if(is(typeof({ mixin(enumMixinStr_XKU_SSL_SERVER); }))) {
            mixin(enumMixinStr_XKU_SSL_SERVER);
        }
    }




    static if(!is(typeof(XKU_SSL_CLIENT))) {
        private enum enumMixinStr_XKU_SSL_CLIENT = `enum XKU_SSL_CLIENT = 0x2;`;
        static if(is(typeof({ mixin(enumMixinStr_XKU_SSL_CLIENT); }))) {
            mixin(enumMixinStr_XKU_SSL_CLIENT);
        }
    }




    static if(!is(typeof(XKU_SMIME))) {
        private enum enumMixinStr_XKU_SMIME = `enum XKU_SMIME = 0x4;`;
        static if(is(typeof({ mixin(enumMixinStr_XKU_SMIME); }))) {
            mixin(enumMixinStr_XKU_SMIME);
        }
    }




    static if(!is(typeof(XKU_CODE_SIGN))) {
        private enum enumMixinStr_XKU_CODE_SIGN = `enum XKU_CODE_SIGN = 0x8;`;
        static if(is(typeof({ mixin(enumMixinStr_XKU_CODE_SIGN); }))) {
            mixin(enumMixinStr_XKU_CODE_SIGN);
        }
    }




    static if(!is(typeof(XKU_SGC))) {
        private enum enumMixinStr_XKU_SGC = `enum XKU_SGC = 0x10;`;
        static if(is(typeof({ mixin(enumMixinStr_XKU_SGC); }))) {
            mixin(enumMixinStr_XKU_SGC);
        }
    }




    static if(!is(typeof(XKU_OCSP_SIGN))) {
        private enum enumMixinStr_XKU_OCSP_SIGN = `enum XKU_OCSP_SIGN = 0x20;`;
        static if(is(typeof({ mixin(enumMixinStr_XKU_OCSP_SIGN); }))) {
            mixin(enumMixinStr_XKU_OCSP_SIGN);
        }
    }




    static if(!is(typeof(XKU_TIMESTAMP))) {
        private enum enumMixinStr_XKU_TIMESTAMP = `enum XKU_TIMESTAMP = 0x40;`;
        static if(is(typeof({ mixin(enumMixinStr_XKU_TIMESTAMP); }))) {
            mixin(enumMixinStr_XKU_TIMESTAMP);
        }
    }




    static if(!is(typeof(XKU_DVCS))) {
        private enum enumMixinStr_XKU_DVCS = `enum XKU_DVCS = 0x80;`;
        static if(is(typeof({ mixin(enumMixinStr_XKU_DVCS); }))) {
            mixin(enumMixinStr_XKU_DVCS);
        }
    }




    static if(!is(typeof(XKU_ANYEKU))) {
        private enum enumMixinStr_XKU_ANYEKU = `enum XKU_ANYEKU = 0x100;`;
        static if(is(typeof({ mixin(enumMixinStr_XKU_ANYEKU); }))) {
            mixin(enumMixinStr_XKU_ANYEKU);
        }
    }




    static if(!is(typeof(X509_PURPOSE_DYNAMIC))) {
        private enum enumMixinStr_X509_PURPOSE_DYNAMIC = `enum X509_PURPOSE_DYNAMIC = 0x1;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_PURPOSE_DYNAMIC); }))) {
            mixin(enumMixinStr_X509_PURPOSE_DYNAMIC);
        }
    }




    static if(!is(typeof(X509_PURPOSE_DYNAMIC_NAME))) {
        private enum enumMixinStr_X509_PURPOSE_DYNAMIC_NAME = `enum X509_PURPOSE_DYNAMIC_NAME = 0x2;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_PURPOSE_DYNAMIC_NAME); }))) {
            mixin(enumMixinStr_X509_PURPOSE_DYNAMIC_NAME);
        }
    }




    static if(!is(typeof(X509_PURPOSE_SSL_CLIENT))) {
        private enum enumMixinStr_X509_PURPOSE_SSL_CLIENT = `enum X509_PURPOSE_SSL_CLIENT = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_PURPOSE_SSL_CLIENT); }))) {
            mixin(enumMixinStr_X509_PURPOSE_SSL_CLIENT);
        }
    }




    static if(!is(typeof(X509_PURPOSE_SSL_SERVER))) {
        private enum enumMixinStr_X509_PURPOSE_SSL_SERVER = `enum X509_PURPOSE_SSL_SERVER = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_PURPOSE_SSL_SERVER); }))) {
            mixin(enumMixinStr_X509_PURPOSE_SSL_SERVER);
        }
    }




    static if(!is(typeof(X509_PURPOSE_NS_SSL_SERVER))) {
        private enum enumMixinStr_X509_PURPOSE_NS_SSL_SERVER = `enum X509_PURPOSE_NS_SSL_SERVER = 3;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_PURPOSE_NS_SSL_SERVER); }))) {
            mixin(enumMixinStr_X509_PURPOSE_NS_SSL_SERVER);
        }
    }




    static if(!is(typeof(X509_PURPOSE_SMIME_SIGN))) {
        private enum enumMixinStr_X509_PURPOSE_SMIME_SIGN = `enum X509_PURPOSE_SMIME_SIGN = 4;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_PURPOSE_SMIME_SIGN); }))) {
            mixin(enumMixinStr_X509_PURPOSE_SMIME_SIGN);
        }
    }




    static if(!is(typeof(X509_PURPOSE_SMIME_ENCRYPT))) {
        private enum enumMixinStr_X509_PURPOSE_SMIME_ENCRYPT = `enum X509_PURPOSE_SMIME_ENCRYPT = 5;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_PURPOSE_SMIME_ENCRYPT); }))) {
            mixin(enumMixinStr_X509_PURPOSE_SMIME_ENCRYPT);
        }
    }




    static if(!is(typeof(X509_PURPOSE_CRL_SIGN))) {
        private enum enumMixinStr_X509_PURPOSE_CRL_SIGN = `enum X509_PURPOSE_CRL_SIGN = 6;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_PURPOSE_CRL_SIGN); }))) {
            mixin(enumMixinStr_X509_PURPOSE_CRL_SIGN);
        }
    }




    static if(!is(typeof(X509_PURPOSE_ANY))) {
        private enum enumMixinStr_X509_PURPOSE_ANY = `enum X509_PURPOSE_ANY = 7;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_PURPOSE_ANY); }))) {
            mixin(enumMixinStr_X509_PURPOSE_ANY);
        }
    }




    static if(!is(typeof(X509_PURPOSE_OCSP_HELPER))) {
        private enum enumMixinStr_X509_PURPOSE_OCSP_HELPER = `enum X509_PURPOSE_OCSP_HELPER = 8;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_PURPOSE_OCSP_HELPER); }))) {
            mixin(enumMixinStr_X509_PURPOSE_OCSP_HELPER);
        }
    }




    static if(!is(typeof(X509_PURPOSE_TIMESTAMP_SIGN))) {
        private enum enumMixinStr_X509_PURPOSE_TIMESTAMP_SIGN = `enum X509_PURPOSE_TIMESTAMP_SIGN = 9;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_PURPOSE_TIMESTAMP_SIGN); }))) {
            mixin(enumMixinStr_X509_PURPOSE_TIMESTAMP_SIGN);
        }
    }




    static if(!is(typeof(X509_PURPOSE_MIN))) {
        private enum enumMixinStr_X509_PURPOSE_MIN = `enum X509_PURPOSE_MIN = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_PURPOSE_MIN); }))) {
            mixin(enumMixinStr_X509_PURPOSE_MIN);
        }
    }




    static if(!is(typeof(X509_PURPOSE_MAX))) {
        private enum enumMixinStr_X509_PURPOSE_MAX = `enum X509_PURPOSE_MAX = 9;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_PURPOSE_MAX); }))) {
            mixin(enumMixinStr_X509_PURPOSE_MAX);
        }
    }




    static if(!is(typeof(X509V3_EXT_UNKNOWN_MASK))) {
        private enum enumMixinStr_X509V3_EXT_UNKNOWN_MASK = `enum X509V3_EXT_UNKNOWN_MASK = ( 0xfL << 16 );`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_EXT_UNKNOWN_MASK); }))) {
            mixin(enumMixinStr_X509V3_EXT_UNKNOWN_MASK);
        }
    }




    static if(!is(typeof(X509V3_EXT_DEFAULT))) {
        private enum enumMixinStr_X509V3_EXT_DEFAULT = `enum X509V3_EXT_DEFAULT = 0;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_EXT_DEFAULT); }))) {
            mixin(enumMixinStr_X509V3_EXT_DEFAULT);
        }
    }




    static if(!is(typeof(X509V3_EXT_ERROR_UNKNOWN))) {
        private enum enumMixinStr_X509V3_EXT_ERROR_UNKNOWN = `enum X509V3_EXT_ERROR_UNKNOWN = ( 1L << 16 );`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_EXT_ERROR_UNKNOWN); }))) {
            mixin(enumMixinStr_X509V3_EXT_ERROR_UNKNOWN);
        }
    }




    static if(!is(typeof(X509V3_EXT_PARSE_UNKNOWN))) {
        private enum enumMixinStr_X509V3_EXT_PARSE_UNKNOWN = `enum X509V3_EXT_PARSE_UNKNOWN = ( 2L << 16 );`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_EXT_PARSE_UNKNOWN); }))) {
            mixin(enumMixinStr_X509V3_EXT_PARSE_UNKNOWN);
        }
    }




    static if(!is(typeof(X509V3_EXT_DUMP_UNKNOWN))) {
        private enum enumMixinStr_X509V3_EXT_DUMP_UNKNOWN = `enum X509V3_EXT_DUMP_UNKNOWN = ( 3L << 16 );`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_EXT_DUMP_UNKNOWN); }))) {
            mixin(enumMixinStr_X509V3_EXT_DUMP_UNKNOWN);
        }
    }




    static if(!is(typeof(X509V3_ADD_OP_MASK))) {
        private enum enumMixinStr_X509V3_ADD_OP_MASK = `enum X509V3_ADD_OP_MASK = 0xfL;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_ADD_OP_MASK); }))) {
            mixin(enumMixinStr_X509V3_ADD_OP_MASK);
        }
    }




    static if(!is(typeof(X509V3_ADD_DEFAULT))) {
        private enum enumMixinStr_X509V3_ADD_DEFAULT = `enum X509V3_ADD_DEFAULT = 0L;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_ADD_DEFAULT); }))) {
            mixin(enumMixinStr_X509V3_ADD_DEFAULT);
        }
    }




    static if(!is(typeof(X509V3_ADD_APPEND))) {
        private enum enumMixinStr_X509V3_ADD_APPEND = `enum X509V3_ADD_APPEND = 1L;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_ADD_APPEND); }))) {
            mixin(enumMixinStr_X509V3_ADD_APPEND);
        }
    }




    static if(!is(typeof(X509V3_ADD_REPLACE))) {
        private enum enumMixinStr_X509V3_ADD_REPLACE = `enum X509V3_ADD_REPLACE = 2L;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_ADD_REPLACE); }))) {
            mixin(enumMixinStr_X509V3_ADD_REPLACE);
        }
    }




    static if(!is(typeof(X509V3_ADD_REPLACE_EXISTING))) {
        private enum enumMixinStr_X509V3_ADD_REPLACE_EXISTING = `enum X509V3_ADD_REPLACE_EXISTING = 3L;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_ADD_REPLACE_EXISTING); }))) {
            mixin(enumMixinStr_X509V3_ADD_REPLACE_EXISTING);
        }
    }




    static if(!is(typeof(X509V3_ADD_KEEP_EXISTING))) {
        private enum enumMixinStr_X509V3_ADD_KEEP_EXISTING = `enum X509V3_ADD_KEEP_EXISTING = 4L;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_ADD_KEEP_EXISTING); }))) {
            mixin(enumMixinStr_X509V3_ADD_KEEP_EXISTING);
        }
    }




    static if(!is(typeof(X509V3_ADD_DELETE))) {
        private enum enumMixinStr_X509V3_ADD_DELETE = `enum X509V3_ADD_DELETE = 5L;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_ADD_DELETE); }))) {
            mixin(enumMixinStr_X509V3_ADD_DELETE);
        }
    }




    static if(!is(typeof(X509V3_ADD_SILENT))) {
        private enum enumMixinStr_X509V3_ADD_SILENT = `enum X509V3_ADD_SILENT = 0x10;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_ADD_SILENT); }))) {
            mixin(enumMixinStr_X509V3_ADD_SILENT);
        }
    }




    static if(!is(typeof(hex_to_string))) {
        private enum enumMixinStr_hex_to_string = `enum hex_to_string = OPENSSL_buf2hexstr;`;
        static if(is(typeof({ mixin(enumMixinStr_hex_to_string); }))) {
            mixin(enumMixinStr_hex_to_string);
        }
    }




    static if(!is(typeof(string_to_hex))) {
        private enum enumMixinStr_string_to_hex = `enum string_to_hex = OPENSSL_hexstr2buf;`;
        static if(is(typeof({ mixin(enumMixinStr_string_to_hex); }))) {
            mixin(enumMixinStr_string_to_hex);
        }
    }




    static if(!is(typeof(X509_CHECK_FLAG_ALWAYS_CHECK_SUBJECT))) {
        private enum enumMixinStr_X509_CHECK_FLAG_ALWAYS_CHECK_SUBJECT = `enum X509_CHECK_FLAG_ALWAYS_CHECK_SUBJECT = 0x1;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_CHECK_FLAG_ALWAYS_CHECK_SUBJECT); }))) {
            mixin(enumMixinStr_X509_CHECK_FLAG_ALWAYS_CHECK_SUBJECT);
        }
    }




    static if(!is(typeof(X509_CHECK_FLAG_NO_WILDCARDS))) {
        private enum enumMixinStr_X509_CHECK_FLAG_NO_WILDCARDS = `enum X509_CHECK_FLAG_NO_WILDCARDS = 0x2;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_CHECK_FLAG_NO_WILDCARDS); }))) {
            mixin(enumMixinStr_X509_CHECK_FLAG_NO_WILDCARDS);
        }
    }




    static if(!is(typeof(X509_CHECK_FLAG_NO_PARTIAL_WILDCARDS))) {
        private enum enumMixinStr_X509_CHECK_FLAG_NO_PARTIAL_WILDCARDS = `enum X509_CHECK_FLAG_NO_PARTIAL_WILDCARDS = 0x4;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_CHECK_FLAG_NO_PARTIAL_WILDCARDS); }))) {
            mixin(enumMixinStr_X509_CHECK_FLAG_NO_PARTIAL_WILDCARDS);
        }
    }




    static if(!is(typeof(X509_CHECK_FLAG_MULTI_LABEL_WILDCARDS))) {
        private enum enumMixinStr_X509_CHECK_FLAG_MULTI_LABEL_WILDCARDS = `enum X509_CHECK_FLAG_MULTI_LABEL_WILDCARDS = 0x8;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_CHECK_FLAG_MULTI_LABEL_WILDCARDS); }))) {
            mixin(enumMixinStr_X509_CHECK_FLAG_MULTI_LABEL_WILDCARDS);
        }
    }




    static if(!is(typeof(X509_CHECK_FLAG_SINGLE_LABEL_SUBDOMAINS))) {
        private enum enumMixinStr_X509_CHECK_FLAG_SINGLE_LABEL_SUBDOMAINS = `enum X509_CHECK_FLAG_SINGLE_LABEL_SUBDOMAINS = 0x10;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_CHECK_FLAG_SINGLE_LABEL_SUBDOMAINS); }))) {
            mixin(enumMixinStr_X509_CHECK_FLAG_SINGLE_LABEL_SUBDOMAINS);
        }
    }




    static if(!is(typeof(X509_CHECK_FLAG_NEVER_CHECK_SUBJECT))) {
        private enum enumMixinStr_X509_CHECK_FLAG_NEVER_CHECK_SUBJECT = `enum X509_CHECK_FLAG_NEVER_CHECK_SUBJECT = 0x20;`;
        static if(is(typeof({ mixin(enumMixinStr_X509_CHECK_FLAG_NEVER_CHECK_SUBJECT); }))) {
            mixin(enumMixinStr_X509_CHECK_FLAG_NEVER_CHECK_SUBJECT);
        }
    }




    static if(!is(typeof(_X509_CHECK_FLAG_DOT_SUBDOMAINS))) {
        private enum enumMixinStr__X509_CHECK_FLAG_DOT_SUBDOMAINS = `enum _X509_CHECK_FLAG_DOT_SUBDOMAINS = 0x8000;`;
        static if(is(typeof({ mixin(enumMixinStr__X509_CHECK_FLAG_DOT_SUBDOMAINS); }))) {
            mixin(enumMixinStr__X509_CHECK_FLAG_DOT_SUBDOMAINS);
        }
    }




    static if(!is(typeof(ASIdOrRange_id))) {
        private enum enumMixinStr_ASIdOrRange_id = `enum ASIdOrRange_id = 0;`;
        static if(is(typeof({ mixin(enumMixinStr_ASIdOrRange_id); }))) {
            mixin(enumMixinStr_ASIdOrRange_id);
        }
    }




    static if(!is(typeof(ASIdOrRange_range))) {
        private enum enumMixinStr_ASIdOrRange_range = `enum ASIdOrRange_range = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_ASIdOrRange_range); }))) {
            mixin(enumMixinStr_ASIdOrRange_range);
        }
    }




    static if(!is(typeof(ASIdentifierChoice_inherit))) {
        private enum enumMixinStr_ASIdentifierChoice_inherit = `enum ASIdentifierChoice_inherit = 0;`;
        static if(is(typeof({ mixin(enumMixinStr_ASIdentifierChoice_inherit); }))) {
            mixin(enumMixinStr_ASIdentifierChoice_inherit);
        }
    }




    static if(!is(typeof(ASIdentifierChoice_asIdsOrRanges))) {
        private enum enumMixinStr_ASIdentifierChoice_asIdsOrRanges = `enum ASIdentifierChoice_asIdsOrRanges = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_ASIdentifierChoice_asIdsOrRanges); }))) {
            mixin(enumMixinStr_ASIdentifierChoice_asIdsOrRanges);
        }
    }




    static if(!is(typeof(IPAddressOrRange_addressPrefix))) {
        private enum enumMixinStr_IPAddressOrRange_addressPrefix = `enum IPAddressOrRange_addressPrefix = 0;`;
        static if(is(typeof({ mixin(enumMixinStr_IPAddressOrRange_addressPrefix); }))) {
            mixin(enumMixinStr_IPAddressOrRange_addressPrefix);
        }
    }




    static if(!is(typeof(IPAddressOrRange_addressRange))) {
        private enum enumMixinStr_IPAddressOrRange_addressRange = `enum IPAddressOrRange_addressRange = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_IPAddressOrRange_addressRange); }))) {
            mixin(enumMixinStr_IPAddressOrRange_addressRange);
        }
    }




    static if(!is(typeof(IPAddressChoice_inherit))) {
        private enum enumMixinStr_IPAddressChoice_inherit = `enum IPAddressChoice_inherit = 0;`;
        static if(is(typeof({ mixin(enumMixinStr_IPAddressChoice_inherit); }))) {
            mixin(enumMixinStr_IPAddressChoice_inherit);
        }
    }




    static if(!is(typeof(IPAddressChoice_addressesOrRanges))) {
        private enum enumMixinStr_IPAddressChoice_addressesOrRanges = `enum IPAddressChoice_addressesOrRanges = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_IPAddressChoice_addressesOrRanges); }))) {
            mixin(enumMixinStr_IPAddressChoice_addressesOrRanges);
        }
    }




    static if(!is(typeof(V3_ASID_ASNUM))) {
        private enum enumMixinStr_V3_ASID_ASNUM = `enum V3_ASID_ASNUM = 0;`;
        static if(is(typeof({ mixin(enumMixinStr_V3_ASID_ASNUM); }))) {
            mixin(enumMixinStr_V3_ASID_ASNUM);
        }
    }




    static if(!is(typeof(V3_ASID_RDI))) {
        private enum enumMixinStr_V3_ASID_RDI = `enum V3_ASID_RDI = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_V3_ASID_RDI); }))) {
            mixin(enumMixinStr_V3_ASID_RDI);
        }
    }




    static if(!is(typeof(IANA_AFI_IPV4))) {
        private enum enumMixinStr_IANA_AFI_IPV4 = `enum IANA_AFI_IPV4 = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_IANA_AFI_IPV4); }))) {
            mixin(enumMixinStr_IANA_AFI_IPV4);
        }
    }




    static if(!is(typeof(IANA_AFI_IPV6))) {
        private enum enumMixinStr_IANA_AFI_IPV6 = `enum IANA_AFI_IPV6 = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_IANA_AFI_IPV6); }))) {
            mixin(enumMixinStr_IANA_AFI_IPV6);
        }
    }






    static if(!is(typeof(X509V3_F_A2I_GENERAL_NAME))) {
        private enum enumMixinStr_X509V3_F_A2I_GENERAL_NAME = `enum X509V3_F_A2I_GENERAL_NAME = 164;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_F_A2I_GENERAL_NAME); }))) {
            mixin(enumMixinStr_X509V3_F_A2I_GENERAL_NAME);
        }
    }




    static if(!is(typeof(X509V3_F_ADDR_VALIDATE_PATH_INTERNAL))) {
        private enum enumMixinStr_X509V3_F_ADDR_VALIDATE_PATH_INTERNAL = `enum X509V3_F_ADDR_VALIDATE_PATH_INTERNAL = 166;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_F_ADDR_VALIDATE_PATH_INTERNAL); }))) {
            mixin(enumMixinStr_X509V3_F_ADDR_VALIDATE_PATH_INTERNAL);
        }
    }




    static if(!is(typeof(X509V3_F_ASIDENTIFIERCHOICE_CANONIZE))) {
        private enum enumMixinStr_X509V3_F_ASIDENTIFIERCHOICE_CANONIZE = `enum X509V3_F_ASIDENTIFIERCHOICE_CANONIZE = 161;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_F_ASIDENTIFIERCHOICE_CANONIZE); }))) {
            mixin(enumMixinStr_X509V3_F_ASIDENTIFIERCHOICE_CANONIZE);
        }
    }




    static if(!is(typeof(X509V3_F_ASIDENTIFIERCHOICE_IS_CANONICAL))) {
        private enum enumMixinStr_X509V3_F_ASIDENTIFIERCHOICE_IS_CANONICAL = `enum X509V3_F_ASIDENTIFIERCHOICE_IS_CANONICAL = 162;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_F_ASIDENTIFIERCHOICE_IS_CANONICAL); }))) {
            mixin(enumMixinStr_X509V3_F_ASIDENTIFIERCHOICE_IS_CANONICAL);
        }
    }




    static if(!is(typeof(X509V3_F_BIGNUM_TO_STRING))) {
        private enum enumMixinStr_X509V3_F_BIGNUM_TO_STRING = `enum X509V3_F_BIGNUM_TO_STRING = 167;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_F_BIGNUM_TO_STRING); }))) {
            mixin(enumMixinStr_X509V3_F_BIGNUM_TO_STRING);
        }
    }




    static if(!is(typeof(X509V3_F_COPY_EMAIL))) {
        private enum enumMixinStr_X509V3_F_COPY_EMAIL = `enum X509V3_F_COPY_EMAIL = 122;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_F_COPY_EMAIL); }))) {
            mixin(enumMixinStr_X509V3_F_COPY_EMAIL);
        }
    }




    static if(!is(typeof(X509V3_F_COPY_ISSUER))) {
        private enum enumMixinStr_X509V3_F_COPY_ISSUER = `enum X509V3_F_COPY_ISSUER = 123;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_F_COPY_ISSUER); }))) {
            mixin(enumMixinStr_X509V3_F_COPY_ISSUER);
        }
    }




    static if(!is(typeof(X509V3_F_DO_DIRNAME))) {
        private enum enumMixinStr_X509V3_F_DO_DIRNAME = `enum X509V3_F_DO_DIRNAME = 144;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_F_DO_DIRNAME); }))) {
            mixin(enumMixinStr_X509V3_F_DO_DIRNAME);
        }
    }




    static if(!is(typeof(X509V3_F_DO_EXT_I2D))) {
        private enum enumMixinStr_X509V3_F_DO_EXT_I2D = `enum X509V3_F_DO_EXT_I2D = 135;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_F_DO_EXT_I2D); }))) {
            mixin(enumMixinStr_X509V3_F_DO_EXT_I2D);
        }
    }




    static if(!is(typeof(X509V3_F_DO_EXT_NCONF))) {
        private enum enumMixinStr_X509V3_F_DO_EXT_NCONF = `enum X509V3_F_DO_EXT_NCONF = 151;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_F_DO_EXT_NCONF); }))) {
            mixin(enumMixinStr_X509V3_F_DO_EXT_NCONF);
        }
    }




    static if(!is(typeof(X509V3_F_GNAMES_FROM_SECTNAME))) {
        private enum enumMixinStr_X509V3_F_GNAMES_FROM_SECTNAME = `enum X509V3_F_GNAMES_FROM_SECTNAME = 156;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_F_GNAMES_FROM_SECTNAME); }))) {
            mixin(enumMixinStr_X509V3_F_GNAMES_FROM_SECTNAME);
        }
    }




    static if(!is(typeof(X509V3_F_I2S_ASN1_ENUMERATED))) {
        private enum enumMixinStr_X509V3_F_I2S_ASN1_ENUMERATED = `enum X509V3_F_I2S_ASN1_ENUMERATED = 121;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_F_I2S_ASN1_ENUMERATED); }))) {
            mixin(enumMixinStr_X509V3_F_I2S_ASN1_ENUMERATED);
        }
    }




    static if(!is(typeof(X509V3_F_I2S_ASN1_IA5STRING))) {
        private enum enumMixinStr_X509V3_F_I2S_ASN1_IA5STRING = `enum X509V3_F_I2S_ASN1_IA5STRING = 149;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_F_I2S_ASN1_IA5STRING); }))) {
            mixin(enumMixinStr_X509V3_F_I2S_ASN1_IA5STRING);
        }
    }




    static if(!is(typeof(X509V3_F_I2S_ASN1_INTEGER))) {
        private enum enumMixinStr_X509V3_F_I2S_ASN1_INTEGER = `enum X509V3_F_I2S_ASN1_INTEGER = 120;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_F_I2S_ASN1_INTEGER); }))) {
            mixin(enumMixinStr_X509V3_F_I2S_ASN1_INTEGER);
        }
    }




    static if(!is(typeof(X509V3_F_I2V_AUTHORITY_INFO_ACCESS))) {
        private enum enumMixinStr_X509V3_F_I2V_AUTHORITY_INFO_ACCESS = `enum X509V3_F_I2V_AUTHORITY_INFO_ACCESS = 138;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_F_I2V_AUTHORITY_INFO_ACCESS); }))) {
            mixin(enumMixinStr_X509V3_F_I2V_AUTHORITY_INFO_ACCESS);
        }
    }




    static if(!is(typeof(X509V3_F_LEVEL_ADD_NODE))) {
        private enum enumMixinStr_X509V3_F_LEVEL_ADD_NODE = `enum X509V3_F_LEVEL_ADD_NODE = 168;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_F_LEVEL_ADD_NODE); }))) {
            mixin(enumMixinStr_X509V3_F_LEVEL_ADD_NODE);
        }
    }




    static if(!is(typeof(X509V3_F_NOTICE_SECTION))) {
        private enum enumMixinStr_X509V3_F_NOTICE_SECTION = `enum X509V3_F_NOTICE_SECTION = 132;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_F_NOTICE_SECTION); }))) {
            mixin(enumMixinStr_X509V3_F_NOTICE_SECTION);
        }
    }




    static if(!is(typeof(X509V3_F_NREF_NOS))) {
        private enum enumMixinStr_X509V3_F_NREF_NOS = `enum X509V3_F_NREF_NOS = 133;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_F_NREF_NOS); }))) {
            mixin(enumMixinStr_X509V3_F_NREF_NOS);
        }
    }




    static if(!is(typeof(X509V3_F_POLICY_CACHE_CREATE))) {
        private enum enumMixinStr_X509V3_F_POLICY_CACHE_CREATE = `enum X509V3_F_POLICY_CACHE_CREATE = 169;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_F_POLICY_CACHE_CREATE); }))) {
            mixin(enumMixinStr_X509V3_F_POLICY_CACHE_CREATE);
        }
    }




    static if(!is(typeof(X509V3_F_POLICY_CACHE_NEW))) {
        private enum enumMixinStr_X509V3_F_POLICY_CACHE_NEW = `enum X509V3_F_POLICY_CACHE_NEW = 170;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_F_POLICY_CACHE_NEW); }))) {
            mixin(enumMixinStr_X509V3_F_POLICY_CACHE_NEW);
        }
    }




    static if(!is(typeof(X509V3_F_POLICY_DATA_NEW))) {
        private enum enumMixinStr_X509V3_F_POLICY_DATA_NEW = `enum X509V3_F_POLICY_DATA_NEW = 171;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_F_POLICY_DATA_NEW); }))) {
            mixin(enumMixinStr_X509V3_F_POLICY_DATA_NEW);
        }
    }




    static if(!is(typeof(X509V3_F_POLICY_SECTION))) {
        private enum enumMixinStr_X509V3_F_POLICY_SECTION = `enum X509V3_F_POLICY_SECTION = 131;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_F_POLICY_SECTION); }))) {
            mixin(enumMixinStr_X509V3_F_POLICY_SECTION);
        }
    }




    static if(!is(typeof(X509V3_F_PROCESS_PCI_VALUE))) {
        private enum enumMixinStr_X509V3_F_PROCESS_PCI_VALUE = `enum X509V3_F_PROCESS_PCI_VALUE = 150;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_F_PROCESS_PCI_VALUE); }))) {
            mixin(enumMixinStr_X509V3_F_PROCESS_PCI_VALUE);
        }
    }




    static if(!is(typeof(X509V3_F_R2I_CERTPOL))) {
        private enum enumMixinStr_X509V3_F_R2I_CERTPOL = `enum X509V3_F_R2I_CERTPOL = 130;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_F_R2I_CERTPOL); }))) {
            mixin(enumMixinStr_X509V3_F_R2I_CERTPOL);
        }
    }




    static if(!is(typeof(X509V3_F_R2I_PCI))) {
        private enum enumMixinStr_X509V3_F_R2I_PCI = `enum X509V3_F_R2I_PCI = 155;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_F_R2I_PCI); }))) {
            mixin(enumMixinStr_X509V3_F_R2I_PCI);
        }
    }




    static if(!is(typeof(X509V3_F_S2I_ASN1_IA5STRING))) {
        private enum enumMixinStr_X509V3_F_S2I_ASN1_IA5STRING = `enum X509V3_F_S2I_ASN1_IA5STRING = 100;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_F_S2I_ASN1_IA5STRING); }))) {
            mixin(enumMixinStr_X509V3_F_S2I_ASN1_IA5STRING);
        }
    }




    static if(!is(typeof(X509V3_F_S2I_ASN1_INTEGER))) {
        private enum enumMixinStr_X509V3_F_S2I_ASN1_INTEGER = `enum X509V3_F_S2I_ASN1_INTEGER = 108;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_F_S2I_ASN1_INTEGER); }))) {
            mixin(enumMixinStr_X509V3_F_S2I_ASN1_INTEGER);
        }
    }




    static if(!is(typeof(X509V3_F_S2I_ASN1_OCTET_STRING))) {
        private enum enumMixinStr_X509V3_F_S2I_ASN1_OCTET_STRING = `enum X509V3_F_S2I_ASN1_OCTET_STRING = 112;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_F_S2I_ASN1_OCTET_STRING); }))) {
            mixin(enumMixinStr_X509V3_F_S2I_ASN1_OCTET_STRING);
        }
    }




    static if(!is(typeof(X509V3_F_S2I_SKEY_ID))) {
        private enum enumMixinStr_X509V3_F_S2I_SKEY_ID = `enum X509V3_F_S2I_SKEY_ID = 115;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_F_S2I_SKEY_ID); }))) {
            mixin(enumMixinStr_X509V3_F_S2I_SKEY_ID);
        }
    }




    static if(!is(typeof(X509V3_F_SET_DIST_POINT_NAME))) {
        private enum enumMixinStr_X509V3_F_SET_DIST_POINT_NAME = `enum X509V3_F_SET_DIST_POINT_NAME = 158;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_F_SET_DIST_POINT_NAME); }))) {
            mixin(enumMixinStr_X509V3_F_SET_DIST_POINT_NAME);
        }
    }




    static if(!is(typeof(X509V3_F_SXNET_ADD_ID_ASC))) {
        private enum enumMixinStr_X509V3_F_SXNET_ADD_ID_ASC = `enum X509V3_F_SXNET_ADD_ID_ASC = 125;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_F_SXNET_ADD_ID_ASC); }))) {
            mixin(enumMixinStr_X509V3_F_SXNET_ADD_ID_ASC);
        }
    }




    static if(!is(typeof(X509V3_F_SXNET_ADD_ID_INTEGER))) {
        private enum enumMixinStr_X509V3_F_SXNET_ADD_ID_INTEGER = `enum X509V3_F_SXNET_ADD_ID_INTEGER = 126;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_F_SXNET_ADD_ID_INTEGER); }))) {
            mixin(enumMixinStr_X509V3_F_SXNET_ADD_ID_INTEGER);
        }
    }




    static if(!is(typeof(X509V3_F_SXNET_ADD_ID_ULONG))) {
        private enum enumMixinStr_X509V3_F_SXNET_ADD_ID_ULONG = `enum X509V3_F_SXNET_ADD_ID_ULONG = 127;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_F_SXNET_ADD_ID_ULONG); }))) {
            mixin(enumMixinStr_X509V3_F_SXNET_ADD_ID_ULONG);
        }
    }




    static if(!is(typeof(X509V3_F_SXNET_GET_ID_ASC))) {
        private enum enumMixinStr_X509V3_F_SXNET_GET_ID_ASC = `enum X509V3_F_SXNET_GET_ID_ASC = 128;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_F_SXNET_GET_ID_ASC); }))) {
            mixin(enumMixinStr_X509V3_F_SXNET_GET_ID_ASC);
        }
    }




    static if(!is(typeof(X509V3_F_SXNET_GET_ID_ULONG))) {
        private enum enumMixinStr_X509V3_F_SXNET_GET_ID_ULONG = `enum X509V3_F_SXNET_GET_ID_ULONG = 129;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_F_SXNET_GET_ID_ULONG); }))) {
            mixin(enumMixinStr_X509V3_F_SXNET_GET_ID_ULONG);
        }
    }




    static if(!is(typeof(X509V3_F_TREE_INIT))) {
        private enum enumMixinStr_X509V3_F_TREE_INIT = `enum X509V3_F_TREE_INIT = 172;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_F_TREE_INIT); }))) {
            mixin(enumMixinStr_X509V3_F_TREE_INIT);
        }
    }




    static if(!is(typeof(X509V3_F_V2I_ASIDENTIFIERS))) {
        private enum enumMixinStr_X509V3_F_V2I_ASIDENTIFIERS = `enum X509V3_F_V2I_ASIDENTIFIERS = 163;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_F_V2I_ASIDENTIFIERS); }))) {
            mixin(enumMixinStr_X509V3_F_V2I_ASIDENTIFIERS);
        }
    }




    static if(!is(typeof(X509V3_F_V2I_ASN1_BIT_STRING))) {
        private enum enumMixinStr_X509V3_F_V2I_ASN1_BIT_STRING = `enum X509V3_F_V2I_ASN1_BIT_STRING = 101;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_F_V2I_ASN1_BIT_STRING); }))) {
            mixin(enumMixinStr_X509V3_F_V2I_ASN1_BIT_STRING);
        }
    }




    static if(!is(typeof(X509V3_F_V2I_AUTHORITY_INFO_ACCESS))) {
        private enum enumMixinStr_X509V3_F_V2I_AUTHORITY_INFO_ACCESS = `enum X509V3_F_V2I_AUTHORITY_INFO_ACCESS = 139;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_F_V2I_AUTHORITY_INFO_ACCESS); }))) {
            mixin(enumMixinStr_X509V3_F_V2I_AUTHORITY_INFO_ACCESS);
        }
    }




    static if(!is(typeof(X509V3_F_V2I_AUTHORITY_KEYID))) {
        private enum enumMixinStr_X509V3_F_V2I_AUTHORITY_KEYID = `enum X509V3_F_V2I_AUTHORITY_KEYID = 119;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_F_V2I_AUTHORITY_KEYID); }))) {
            mixin(enumMixinStr_X509V3_F_V2I_AUTHORITY_KEYID);
        }
    }




    static if(!is(typeof(X509V3_F_V2I_BASIC_CONSTRAINTS))) {
        private enum enumMixinStr_X509V3_F_V2I_BASIC_CONSTRAINTS = `enum X509V3_F_V2I_BASIC_CONSTRAINTS = 102;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_F_V2I_BASIC_CONSTRAINTS); }))) {
            mixin(enumMixinStr_X509V3_F_V2I_BASIC_CONSTRAINTS);
        }
    }




    static if(!is(typeof(X509V3_F_V2I_CRLD))) {
        private enum enumMixinStr_X509V3_F_V2I_CRLD = `enum X509V3_F_V2I_CRLD = 134;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_F_V2I_CRLD); }))) {
            mixin(enumMixinStr_X509V3_F_V2I_CRLD);
        }
    }




    static if(!is(typeof(X509V3_F_V2I_EXTENDED_KEY_USAGE))) {
        private enum enumMixinStr_X509V3_F_V2I_EXTENDED_KEY_USAGE = `enum X509V3_F_V2I_EXTENDED_KEY_USAGE = 103;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_F_V2I_EXTENDED_KEY_USAGE); }))) {
            mixin(enumMixinStr_X509V3_F_V2I_EXTENDED_KEY_USAGE);
        }
    }




    static if(!is(typeof(X509V3_F_V2I_GENERAL_NAMES))) {
        private enum enumMixinStr_X509V3_F_V2I_GENERAL_NAMES = `enum X509V3_F_V2I_GENERAL_NAMES = 118;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_F_V2I_GENERAL_NAMES); }))) {
            mixin(enumMixinStr_X509V3_F_V2I_GENERAL_NAMES);
        }
    }




    static if(!is(typeof(X509V3_F_V2I_GENERAL_NAME_EX))) {
        private enum enumMixinStr_X509V3_F_V2I_GENERAL_NAME_EX = `enum X509V3_F_V2I_GENERAL_NAME_EX = 117;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_F_V2I_GENERAL_NAME_EX); }))) {
            mixin(enumMixinStr_X509V3_F_V2I_GENERAL_NAME_EX);
        }
    }




    static if(!is(typeof(X509V3_F_V2I_IDP))) {
        private enum enumMixinStr_X509V3_F_V2I_IDP = `enum X509V3_F_V2I_IDP = 157;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_F_V2I_IDP); }))) {
            mixin(enumMixinStr_X509V3_F_V2I_IDP);
        }
    }




    static if(!is(typeof(X509V3_F_V2I_IPADDRBLOCKS))) {
        private enum enumMixinStr_X509V3_F_V2I_IPADDRBLOCKS = `enum X509V3_F_V2I_IPADDRBLOCKS = 159;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_F_V2I_IPADDRBLOCKS); }))) {
            mixin(enumMixinStr_X509V3_F_V2I_IPADDRBLOCKS);
        }
    }




    static if(!is(typeof(X509V3_F_V2I_ISSUER_ALT))) {
        private enum enumMixinStr_X509V3_F_V2I_ISSUER_ALT = `enum X509V3_F_V2I_ISSUER_ALT = 153;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_F_V2I_ISSUER_ALT); }))) {
            mixin(enumMixinStr_X509V3_F_V2I_ISSUER_ALT);
        }
    }




    static if(!is(typeof(X509V3_F_V2I_NAME_CONSTRAINTS))) {
        private enum enumMixinStr_X509V3_F_V2I_NAME_CONSTRAINTS = `enum X509V3_F_V2I_NAME_CONSTRAINTS = 147;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_F_V2I_NAME_CONSTRAINTS); }))) {
            mixin(enumMixinStr_X509V3_F_V2I_NAME_CONSTRAINTS);
        }
    }




    static if(!is(typeof(X509V3_F_V2I_POLICY_CONSTRAINTS))) {
        private enum enumMixinStr_X509V3_F_V2I_POLICY_CONSTRAINTS = `enum X509V3_F_V2I_POLICY_CONSTRAINTS = 146;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_F_V2I_POLICY_CONSTRAINTS); }))) {
            mixin(enumMixinStr_X509V3_F_V2I_POLICY_CONSTRAINTS);
        }
    }




    static if(!is(typeof(X509V3_F_V2I_POLICY_MAPPINGS))) {
        private enum enumMixinStr_X509V3_F_V2I_POLICY_MAPPINGS = `enum X509V3_F_V2I_POLICY_MAPPINGS = 145;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_F_V2I_POLICY_MAPPINGS); }))) {
            mixin(enumMixinStr_X509V3_F_V2I_POLICY_MAPPINGS);
        }
    }




    static if(!is(typeof(X509V3_F_V2I_SUBJECT_ALT))) {
        private enum enumMixinStr_X509V3_F_V2I_SUBJECT_ALT = `enum X509V3_F_V2I_SUBJECT_ALT = 154;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_F_V2I_SUBJECT_ALT); }))) {
            mixin(enumMixinStr_X509V3_F_V2I_SUBJECT_ALT);
        }
    }




    static if(!is(typeof(X509V3_F_V2I_TLS_FEATURE))) {
        private enum enumMixinStr_X509V3_F_V2I_TLS_FEATURE = `enum X509V3_F_V2I_TLS_FEATURE = 165;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_F_V2I_TLS_FEATURE); }))) {
            mixin(enumMixinStr_X509V3_F_V2I_TLS_FEATURE);
        }
    }




    static if(!is(typeof(X509V3_F_V3_GENERIC_EXTENSION))) {
        private enum enumMixinStr_X509V3_F_V3_GENERIC_EXTENSION = `enum X509V3_F_V3_GENERIC_EXTENSION = 116;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_F_V3_GENERIC_EXTENSION); }))) {
            mixin(enumMixinStr_X509V3_F_V3_GENERIC_EXTENSION);
        }
    }




    static if(!is(typeof(X509V3_F_X509V3_ADD1_I2D))) {
        private enum enumMixinStr_X509V3_F_X509V3_ADD1_I2D = `enum X509V3_F_X509V3_ADD1_I2D = 140;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_F_X509V3_ADD1_I2D); }))) {
            mixin(enumMixinStr_X509V3_F_X509V3_ADD1_I2D);
        }
    }




    static if(!is(typeof(X509V3_F_X509V3_ADD_VALUE))) {
        private enum enumMixinStr_X509V3_F_X509V3_ADD_VALUE = `enum X509V3_F_X509V3_ADD_VALUE = 105;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_F_X509V3_ADD_VALUE); }))) {
            mixin(enumMixinStr_X509V3_F_X509V3_ADD_VALUE);
        }
    }




    static if(!is(typeof(X509V3_F_X509V3_EXT_ADD))) {
        private enum enumMixinStr_X509V3_F_X509V3_EXT_ADD = `enum X509V3_F_X509V3_EXT_ADD = 104;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_F_X509V3_EXT_ADD); }))) {
            mixin(enumMixinStr_X509V3_F_X509V3_EXT_ADD);
        }
    }




    static if(!is(typeof(X509V3_F_X509V3_EXT_ADD_ALIAS))) {
        private enum enumMixinStr_X509V3_F_X509V3_EXT_ADD_ALIAS = `enum X509V3_F_X509V3_EXT_ADD_ALIAS = 106;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_F_X509V3_EXT_ADD_ALIAS); }))) {
            mixin(enumMixinStr_X509V3_F_X509V3_EXT_ADD_ALIAS);
        }
    }




    static if(!is(typeof(X509V3_F_X509V3_EXT_I2D))) {
        private enum enumMixinStr_X509V3_F_X509V3_EXT_I2D = `enum X509V3_F_X509V3_EXT_I2D = 136;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_F_X509V3_EXT_I2D); }))) {
            mixin(enumMixinStr_X509V3_F_X509V3_EXT_I2D);
        }
    }




    static if(!is(typeof(X509V3_F_X509V3_EXT_NCONF))) {
        private enum enumMixinStr_X509V3_F_X509V3_EXT_NCONF = `enum X509V3_F_X509V3_EXT_NCONF = 152;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_F_X509V3_EXT_NCONF); }))) {
            mixin(enumMixinStr_X509V3_F_X509V3_EXT_NCONF);
        }
    }




    static if(!is(typeof(X509V3_F_X509V3_GET_SECTION))) {
        private enum enumMixinStr_X509V3_F_X509V3_GET_SECTION = `enum X509V3_F_X509V3_GET_SECTION = 142;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_F_X509V3_GET_SECTION); }))) {
            mixin(enumMixinStr_X509V3_F_X509V3_GET_SECTION);
        }
    }




    static if(!is(typeof(X509V3_F_X509V3_GET_STRING))) {
        private enum enumMixinStr_X509V3_F_X509V3_GET_STRING = `enum X509V3_F_X509V3_GET_STRING = 143;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_F_X509V3_GET_STRING); }))) {
            mixin(enumMixinStr_X509V3_F_X509V3_GET_STRING);
        }
    }




    static if(!is(typeof(X509V3_F_X509V3_GET_VALUE_BOOL))) {
        private enum enumMixinStr_X509V3_F_X509V3_GET_VALUE_BOOL = `enum X509V3_F_X509V3_GET_VALUE_BOOL = 110;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_F_X509V3_GET_VALUE_BOOL); }))) {
            mixin(enumMixinStr_X509V3_F_X509V3_GET_VALUE_BOOL);
        }
    }




    static if(!is(typeof(X509V3_F_X509V3_PARSE_LIST))) {
        private enum enumMixinStr_X509V3_F_X509V3_PARSE_LIST = `enum X509V3_F_X509V3_PARSE_LIST = 109;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_F_X509V3_PARSE_LIST); }))) {
            mixin(enumMixinStr_X509V3_F_X509V3_PARSE_LIST);
        }
    }




    static if(!is(typeof(X509V3_F_X509_PURPOSE_ADD))) {
        private enum enumMixinStr_X509V3_F_X509_PURPOSE_ADD = `enum X509V3_F_X509_PURPOSE_ADD = 137;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_F_X509_PURPOSE_ADD); }))) {
            mixin(enumMixinStr_X509V3_F_X509_PURPOSE_ADD);
        }
    }




    static if(!is(typeof(X509V3_F_X509_PURPOSE_SET))) {
        private enum enumMixinStr_X509V3_F_X509_PURPOSE_SET = `enum X509V3_F_X509_PURPOSE_SET = 141;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_F_X509_PURPOSE_SET); }))) {
            mixin(enumMixinStr_X509V3_F_X509_PURPOSE_SET);
        }
    }




    static if(!is(typeof(X509V3_R_BAD_IP_ADDRESS))) {
        private enum enumMixinStr_X509V3_R_BAD_IP_ADDRESS = `enum X509V3_R_BAD_IP_ADDRESS = 118;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_R_BAD_IP_ADDRESS); }))) {
            mixin(enumMixinStr_X509V3_R_BAD_IP_ADDRESS);
        }
    }




    static if(!is(typeof(X509V3_R_BAD_OBJECT))) {
        private enum enumMixinStr_X509V3_R_BAD_OBJECT = `enum X509V3_R_BAD_OBJECT = 119;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_R_BAD_OBJECT); }))) {
            mixin(enumMixinStr_X509V3_R_BAD_OBJECT);
        }
    }




    static if(!is(typeof(X509V3_R_BN_DEC2BN_ERROR))) {
        private enum enumMixinStr_X509V3_R_BN_DEC2BN_ERROR = `enum X509V3_R_BN_DEC2BN_ERROR = 100;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_R_BN_DEC2BN_ERROR); }))) {
            mixin(enumMixinStr_X509V3_R_BN_DEC2BN_ERROR);
        }
    }




    static if(!is(typeof(X509V3_R_BN_TO_ASN1_INTEGER_ERROR))) {
        private enum enumMixinStr_X509V3_R_BN_TO_ASN1_INTEGER_ERROR = `enum X509V3_R_BN_TO_ASN1_INTEGER_ERROR = 101;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_R_BN_TO_ASN1_INTEGER_ERROR); }))) {
            mixin(enumMixinStr_X509V3_R_BN_TO_ASN1_INTEGER_ERROR);
        }
    }




    static if(!is(typeof(X509V3_R_DIRNAME_ERROR))) {
        private enum enumMixinStr_X509V3_R_DIRNAME_ERROR = `enum X509V3_R_DIRNAME_ERROR = 149;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_R_DIRNAME_ERROR); }))) {
            mixin(enumMixinStr_X509V3_R_DIRNAME_ERROR);
        }
    }




    static if(!is(typeof(X509V3_R_DISTPOINT_ALREADY_SET))) {
        private enum enumMixinStr_X509V3_R_DISTPOINT_ALREADY_SET = `enum X509V3_R_DISTPOINT_ALREADY_SET = 160;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_R_DISTPOINT_ALREADY_SET); }))) {
            mixin(enumMixinStr_X509V3_R_DISTPOINT_ALREADY_SET);
        }
    }




    static if(!is(typeof(X509V3_R_DUPLICATE_ZONE_ID))) {
        private enum enumMixinStr_X509V3_R_DUPLICATE_ZONE_ID = `enum X509V3_R_DUPLICATE_ZONE_ID = 133;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_R_DUPLICATE_ZONE_ID); }))) {
            mixin(enumMixinStr_X509V3_R_DUPLICATE_ZONE_ID);
        }
    }




    static if(!is(typeof(X509V3_R_ERROR_CONVERTING_ZONE))) {
        private enum enumMixinStr_X509V3_R_ERROR_CONVERTING_ZONE = `enum X509V3_R_ERROR_CONVERTING_ZONE = 131;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_R_ERROR_CONVERTING_ZONE); }))) {
            mixin(enumMixinStr_X509V3_R_ERROR_CONVERTING_ZONE);
        }
    }




    static if(!is(typeof(X509V3_R_ERROR_CREATING_EXTENSION))) {
        private enum enumMixinStr_X509V3_R_ERROR_CREATING_EXTENSION = `enum X509V3_R_ERROR_CREATING_EXTENSION = 144;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_R_ERROR_CREATING_EXTENSION); }))) {
            mixin(enumMixinStr_X509V3_R_ERROR_CREATING_EXTENSION);
        }
    }




    static if(!is(typeof(X509V3_R_ERROR_IN_EXTENSION))) {
        private enum enumMixinStr_X509V3_R_ERROR_IN_EXTENSION = `enum X509V3_R_ERROR_IN_EXTENSION = 128;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_R_ERROR_IN_EXTENSION); }))) {
            mixin(enumMixinStr_X509V3_R_ERROR_IN_EXTENSION);
        }
    }




    static if(!is(typeof(X509V3_R_EXPECTED_A_SECTION_NAME))) {
        private enum enumMixinStr_X509V3_R_EXPECTED_A_SECTION_NAME = `enum X509V3_R_EXPECTED_A_SECTION_NAME = 137;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_R_EXPECTED_A_SECTION_NAME); }))) {
            mixin(enumMixinStr_X509V3_R_EXPECTED_A_SECTION_NAME);
        }
    }




    static if(!is(typeof(X509V3_R_EXTENSION_EXISTS))) {
        private enum enumMixinStr_X509V3_R_EXTENSION_EXISTS = `enum X509V3_R_EXTENSION_EXISTS = 145;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_R_EXTENSION_EXISTS); }))) {
            mixin(enumMixinStr_X509V3_R_EXTENSION_EXISTS);
        }
    }




    static if(!is(typeof(X509V3_R_EXTENSION_NAME_ERROR))) {
        private enum enumMixinStr_X509V3_R_EXTENSION_NAME_ERROR = `enum X509V3_R_EXTENSION_NAME_ERROR = 115;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_R_EXTENSION_NAME_ERROR); }))) {
            mixin(enumMixinStr_X509V3_R_EXTENSION_NAME_ERROR);
        }
    }




    static if(!is(typeof(X509V3_R_EXTENSION_NOT_FOUND))) {
        private enum enumMixinStr_X509V3_R_EXTENSION_NOT_FOUND = `enum X509V3_R_EXTENSION_NOT_FOUND = 102;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_R_EXTENSION_NOT_FOUND); }))) {
            mixin(enumMixinStr_X509V3_R_EXTENSION_NOT_FOUND);
        }
    }




    static if(!is(typeof(X509V3_R_EXTENSION_SETTING_NOT_SUPPORTED))) {
        private enum enumMixinStr_X509V3_R_EXTENSION_SETTING_NOT_SUPPORTED = `enum X509V3_R_EXTENSION_SETTING_NOT_SUPPORTED = 103;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_R_EXTENSION_SETTING_NOT_SUPPORTED); }))) {
            mixin(enumMixinStr_X509V3_R_EXTENSION_SETTING_NOT_SUPPORTED);
        }
    }




    static if(!is(typeof(X509V3_R_EXTENSION_VALUE_ERROR))) {
        private enum enumMixinStr_X509V3_R_EXTENSION_VALUE_ERROR = `enum X509V3_R_EXTENSION_VALUE_ERROR = 116;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_R_EXTENSION_VALUE_ERROR); }))) {
            mixin(enumMixinStr_X509V3_R_EXTENSION_VALUE_ERROR);
        }
    }




    static if(!is(typeof(X509V3_R_ILLEGAL_EMPTY_EXTENSION))) {
        private enum enumMixinStr_X509V3_R_ILLEGAL_EMPTY_EXTENSION = `enum X509V3_R_ILLEGAL_EMPTY_EXTENSION = 151;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_R_ILLEGAL_EMPTY_EXTENSION); }))) {
            mixin(enumMixinStr_X509V3_R_ILLEGAL_EMPTY_EXTENSION);
        }
    }




    static if(!is(typeof(X509V3_R_INCORRECT_POLICY_SYNTAX_TAG))) {
        private enum enumMixinStr_X509V3_R_INCORRECT_POLICY_SYNTAX_TAG = `enum X509V3_R_INCORRECT_POLICY_SYNTAX_TAG = 152;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_R_INCORRECT_POLICY_SYNTAX_TAG); }))) {
            mixin(enumMixinStr_X509V3_R_INCORRECT_POLICY_SYNTAX_TAG);
        }
    }




    static if(!is(typeof(X509V3_R_INVALID_ASNUMBER))) {
        private enum enumMixinStr_X509V3_R_INVALID_ASNUMBER = `enum X509V3_R_INVALID_ASNUMBER = 162;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_R_INVALID_ASNUMBER); }))) {
            mixin(enumMixinStr_X509V3_R_INVALID_ASNUMBER);
        }
    }




    static if(!is(typeof(X509V3_R_INVALID_ASRANGE))) {
        private enum enumMixinStr_X509V3_R_INVALID_ASRANGE = `enum X509V3_R_INVALID_ASRANGE = 163;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_R_INVALID_ASRANGE); }))) {
            mixin(enumMixinStr_X509V3_R_INVALID_ASRANGE);
        }
    }




    static if(!is(typeof(X509V3_R_INVALID_BOOLEAN_STRING))) {
        private enum enumMixinStr_X509V3_R_INVALID_BOOLEAN_STRING = `enum X509V3_R_INVALID_BOOLEAN_STRING = 104;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_R_INVALID_BOOLEAN_STRING); }))) {
            mixin(enumMixinStr_X509V3_R_INVALID_BOOLEAN_STRING);
        }
    }




    static if(!is(typeof(X509V3_R_INVALID_EXTENSION_STRING))) {
        private enum enumMixinStr_X509V3_R_INVALID_EXTENSION_STRING = `enum X509V3_R_INVALID_EXTENSION_STRING = 105;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_R_INVALID_EXTENSION_STRING); }))) {
            mixin(enumMixinStr_X509V3_R_INVALID_EXTENSION_STRING);
        }
    }




    static if(!is(typeof(X509V3_R_INVALID_INHERITANCE))) {
        private enum enumMixinStr_X509V3_R_INVALID_INHERITANCE = `enum X509V3_R_INVALID_INHERITANCE = 165;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_R_INVALID_INHERITANCE); }))) {
            mixin(enumMixinStr_X509V3_R_INVALID_INHERITANCE);
        }
    }




    static if(!is(typeof(X509V3_R_INVALID_IPADDRESS))) {
        private enum enumMixinStr_X509V3_R_INVALID_IPADDRESS = `enum X509V3_R_INVALID_IPADDRESS = 166;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_R_INVALID_IPADDRESS); }))) {
            mixin(enumMixinStr_X509V3_R_INVALID_IPADDRESS);
        }
    }




    static if(!is(typeof(X509V3_R_INVALID_MULTIPLE_RDNS))) {
        private enum enumMixinStr_X509V3_R_INVALID_MULTIPLE_RDNS = `enum X509V3_R_INVALID_MULTIPLE_RDNS = 161;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_R_INVALID_MULTIPLE_RDNS); }))) {
            mixin(enumMixinStr_X509V3_R_INVALID_MULTIPLE_RDNS);
        }
    }




    static if(!is(typeof(X509V3_R_INVALID_NAME))) {
        private enum enumMixinStr_X509V3_R_INVALID_NAME = `enum X509V3_R_INVALID_NAME = 106;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_R_INVALID_NAME); }))) {
            mixin(enumMixinStr_X509V3_R_INVALID_NAME);
        }
    }




    static if(!is(typeof(X509V3_R_INVALID_NULL_ARGUMENT))) {
        private enum enumMixinStr_X509V3_R_INVALID_NULL_ARGUMENT = `enum X509V3_R_INVALID_NULL_ARGUMENT = 107;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_R_INVALID_NULL_ARGUMENT); }))) {
            mixin(enumMixinStr_X509V3_R_INVALID_NULL_ARGUMENT);
        }
    }




    static if(!is(typeof(X509V3_R_INVALID_NULL_NAME))) {
        private enum enumMixinStr_X509V3_R_INVALID_NULL_NAME = `enum X509V3_R_INVALID_NULL_NAME = 108;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_R_INVALID_NULL_NAME); }))) {
            mixin(enumMixinStr_X509V3_R_INVALID_NULL_NAME);
        }
    }




    static if(!is(typeof(X509V3_R_INVALID_NULL_VALUE))) {
        private enum enumMixinStr_X509V3_R_INVALID_NULL_VALUE = `enum X509V3_R_INVALID_NULL_VALUE = 109;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_R_INVALID_NULL_VALUE); }))) {
            mixin(enumMixinStr_X509V3_R_INVALID_NULL_VALUE);
        }
    }




    static if(!is(typeof(X509V3_R_INVALID_NUMBER))) {
        private enum enumMixinStr_X509V3_R_INVALID_NUMBER = `enum X509V3_R_INVALID_NUMBER = 140;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_R_INVALID_NUMBER); }))) {
            mixin(enumMixinStr_X509V3_R_INVALID_NUMBER);
        }
    }




    static if(!is(typeof(X509V3_R_INVALID_NUMBERS))) {
        private enum enumMixinStr_X509V3_R_INVALID_NUMBERS = `enum X509V3_R_INVALID_NUMBERS = 141;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_R_INVALID_NUMBERS); }))) {
            mixin(enumMixinStr_X509V3_R_INVALID_NUMBERS);
        }
    }




    static if(!is(typeof(X509V3_R_INVALID_OBJECT_IDENTIFIER))) {
        private enum enumMixinStr_X509V3_R_INVALID_OBJECT_IDENTIFIER = `enum X509V3_R_INVALID_OBJECT_IDENTIFIER = 110;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_R_INVALID_OBJECT_IDENTIFIER); }))) {
            mixin(enumMixinStr_X509V3_R_INVALID_OBJECT_IDENTIFIER);
        }
    }




    static if(!is(typeof(X509V3_R_INVALID_OPTION))) {
        private enum enumMixinStr_X509V3_R_INVALID_OPTION = `enum X509V3_R_INVALID_OPTION = 138;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_R_INVALID_OPTION); }))) {
            mixin(enumMixinStr_X509V3_R_INVALID_OPTION);
        }
    }




    static if(!is(typeof(X509V3_R_INVALID_POLICY_IDENTIFIER))) {
        private enum enumMixinStr_X509V3_R_INVALID_POLICY_IDENTIFIER = `enum X509V3_R_INVALID_POLICY_IDENTIFIER = 134;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_R_INVALID_POLICY_IDENTIFIER); }))) {
            mixin(enumMixinStr_X509V3_R_INVALID_POLICY_IDENTIFIER);
        }
    }




    static if(!is(typeof(X509V3_R_INVALID_PROXY_POLICY_SETTING))) {
        private enum enumMixinStr_X509V3_R_INVALID_PROXY_POLICY_SETTING = `enum X509V3_R_INVALID_PROXY_POLICY_SETTING = 153;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_R_INVALID_PROXY_POLICY_SETTING); }))) {
            mixin(enumMixinStr_X509V3_R_INVALID_PROXY_POLICY_SETTING);
        }
    }




    static if(!is(typeof(X509V3_R_INVALID_PURPOSE))) {
        private enum enumMixinStr_X509V3_R_INVALID_PURPOSE = `enum X509V3_R_INVALID_PURPOSE = 146;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_R_INVALID_PURPOSE); }))) {
            mixin(enumMixinStr_X509V3_R_INVALID_PURPOSE);
        }
    }




    static if(!is(typeof(X509V3_R_INVALID_SAFI))) {
        private enum enumMixinStr_X509V3_R_INVALID_SAFI = `enum X509V3_R_INVALID_SAFI = 164;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_R_INVALID_SAFI); }))) {
            mixin(enumMixinStr_X509V3_R_INVALID_SAFI);
        }
    }




    static if(!is(typeof(X509V3_R_INVALID_SECTION))) {
        private enum enumMixinStr_X509V3_R_INVALID_SECTION = `enum X509V3_R_INVALID_SECTION = 135;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_R_INVALID_SECTION); }))) {
            mixin(enumMixinStr_X509V3_R_INVALID_SECTION);
        }
    }




    static if(!is(typeof(X509V3_R_INVALID_SYNTAX))) {
        private enum enumMixinStr_X509V3_R_INVALID_SYNTAX = `enum X509V3_R_INVALID_SYNTAX = 143;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_R_INVALID_SYNTAX); }))) {
            mixin(enumMixinStr_X509V3_R_INVALID_SYNTAX);
        }
    }




    static if(!is(typeof(X509V3_R_ISSUER_DECODE_ERROR))) {
        private enum enumMixinStr_X509V3_R_ISSUER_DECODE_ERROR = `enum X509V3_R_ISSUER_DECODE_ERROR = 126;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_R_ISSUER_DECODE_ERROR); }))) {
            mixin(enumMixinStr_X509V3_R_ISSUER_DECODE_ERROR);
        }
    }




    static if(!is(typeof(X509V3_R_MISSING_VALUE))) {
        private enum enumMixinStr_X509V3_R_MISSING_VALUE = `enum X509V3_R_MISSING_VALUE = 124;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_R_MISSING_VALUE); }))) {
            mixin(enumMixinStr_X509V3_R_MISSING_VALUE);
        }
    }




    static if(!is(typeof(X509V3_R_NEED_ORGANIZATION_AND_NUMBERS))) {
        private enum enumMixinStr_X509V3_R_NEED_ORGANIZATION_AND_NUMBERS = `enum X509V3_R_NEED_ORGANIZATION_AND_NUMBERS = 142;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_R_NEED_ORGANIZATION_AND_NUMBERS); }))) {
            mixin(enumMixinStr_X509V3_R_NEED_ORGANIZATION_AND_NUMBERS);
        }
    }




    static if(!is(typeof(X509V3_R_NO_CONFIG_DATABASE))) {
        private enum enumMixinStr_X509V3_R_NO_CONFIG_DATABASE = `enum X509V3_R_NO_CONFIG_DATABASE = 136;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_R_NO_CONFIG_DATABASE); }))) {
            mixin(enumMixinStr_X509V3_R_NO_CONFIG_DATABASE);
        }
    }




    static if(!is(typeof(X509V3_R_NO_ISSUER_CERTIFICATE))) {
        private enum enumMixinStr_X509V3_R_NO_ISSUER_CERTIFICATE = `enum X509V3_R_NO_ISSUER_CERTIFICATE = 121;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_R_NO_ISSUER_CERTIFICATE); }))) {
            mixin(enumMixinStr_X509V3_R_NO_ISSUER_CERTIFICATE);
        }
    }




    static if(!is(typeof(X509V3_R_NO_ISSUER_DETAILS))) {
        private enum enumMixinStr_X509V3_R_NO_ISSUER_DETAILS = `enum X509V3_R_NO_ISSUER_DETAILS = 127;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_R_NO_ISSUER_DETAILS); }))) {
            mixin(enumMixinStr_X509V3_R_NO_ISSUER_DETAILS);
        }
    }




    static if(!is(typeof(X509V3_R_NO_POLICY_IDENTIFIER))) {
        private enum enumMixinStr_X509V3_R_NO_POLICY_IDENTIFIER = `enum X509V3_R_NO_POLICY_IDENTIFIER = 139;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_R_NO_POLICY_IDENTIFIER); }))) {
            mixin(enumMixinStr_X509V3_R_NO_POLICY_IDENTIFIER);
        }
    }




    static if(!is(typeof(X509V3_R_NO_PROXY_CERT_POLICY_LANGUAGE_DEFINED))) {
        private enum enumMixinStr_X509V3_R_NO_PROXY_CERT_POLICY_LANGUAGE_DEFINED = `enum X509V3_R_NO_PROXY_CERT_POLICY_LANGUAGE_DEFINED = 154;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_R_NO_PROXY_CERT_POLICY_LANGUAGE_DEFINED); }))) {
            mixin(enumMixinStr_X509V3_R_NO_PROXY_CERT_POLICY_LANGUAGE_DEFINED);
        }
    }




    static if(!is(typeof(X509V3_R_NO_PUBLIC_KEY))) {
        private enum enumMixinStr_X509V3_R_NO_PUBLIC_KEY = `enum X509V3_R_NO_PUBLIC_KEY = 114;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_R_NO_PUBLIC_KEY); }))) {
            mixin(enumMixinStr_X509V3_R_NO_PUBLIC_KEY);
        }
    }




    static if(!is(typeof(X509V3_R_NO_SUBJECT_DETAILS))) {
        private enum enumMixinStr_X509V3_R_NO_SUBJECT_DETAILS = `enum X509V3_R_NO_SUBJECT_DETAILS = 125;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_R_NO_SUBJECT_DETAILS); }))) {
            mixin(enumMixinStr_X509V3_R_NO_SUBJECT_DETAILS);
        }
    }




    static if(!is(typeof(X509V3_R_OPERATION_NOT_DEFINED))) {
        private enum enumMixinStr_X509V3_R_OPERATION_NOT_DEFINED = `enum X509V3_R_OPERATION_NOT_DEFINED = 148;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_R_OPERATION_NOT_DEFINED); }))) {
            mixin(enumMixinStr_X509V3_R_OPERATION_NOT_DEFINED);
        }
    }




    static if(!is(typeof(X509V3_R_OTHERNAME_ERROR))) {
        private enum enumMixinStr_X509V3_R_OTHERNAME_ERROR = `enum X509V3_R_OTHERNAME_ERROR = 147;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_R_OTHERNAME_ERROR); }))) {
            mixin(enumMixinStr_X509V3_R_OTHERNAME_ERROR);
        }
    }




    static if(!is(typeof(X509V3_R_POLICY_LANGUAGE_ALREADY_DEFINED))) {
        private enum enumMixinStr_X509V3_R_POLICY_LANGUAGE_ALREADY_DEFINED = `enum X509V3_R_POLICY_LANGUAGE_ALREADY_DEFINED = 155;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_R_POLICY_LANGUAGE_ALREADY_DEFINED); }))) {
            mixin(enumMixinStr_X509V3_R_POLICY_LANGUAGE_ALREADY_DEFINED);
        }
    }




    static if(!is(typeof(X509V3_R_POLICY_PATH_LENGTH))) {
        private enum enumMixinStr_X509V3_R_POLICY_PATH_LENGTH = `enum X509V3_R_POLICY_PATH_LENGTH = 156;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_R_POLICY_PATH_LENGTH); }))) {
            mixin(enumMixinStr_X509V3_R_POLICY_PATH_LENGTH);
        }
    }




    static if(!is(typeof(X509V3_R_POLICY_PATH_LENGTH_ALREADY_DEFINED))) {
        private enum enumMixinStr_X509V3_R_POLICY_PATH_LENGTH_ALREADY_DEFINED = `enum X509V3_R_POLICY_PATH_LENGTH_ALREADY_DEFINED = 157;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_R_POLICY_PATH_LENGTH_ALREADY_DEFINED); }))) {
            mixin(enumMixinStr_X509V3_R_POLICY_PATH_LENGTH_ALREADY_DEFINED);
        }
    }




    static if(!is(typeof(X509V3_R_POLICY_WHEN_PROXY_LANGUAGE_REQUIRES_NO_POLICY))) {
        private enum enumMixinStr_X509V3_R_POLICY_WHEN_PROXY_LANGUAGE_REQUIRES_NO_POLICY = `enum X509V3_R_POLICY_WHEN_PROXY_LANGUAGE_REQUIRES_NO_POLICY = 159;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_R_POLICY_WHEN_PROXY_LANGUAGE_REQUIRES_NO_POLICY); }))) {
            mixin(enumMixinStr_X509V3_R_POLICY_WHEN_PROXY_LANGUAGE_REQUIRES_NO_POLICY);
        }
    }




    static if(!is(typeof(X509V3_R_SECTION_NOT_FOUND))) {
        private enum enumMixinStr_X509V3_R_SECTION_NOT_FOUND = `enum X509V3_R_SECTION_NOT_FOUND = 150;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_R_SECTION_NOT_FOUND); }))) {
            mixin(enumMixinStr_X509V3_R_SECTION_NOT_FOUND);
        }
    }




    static if(!is(typeof(X509V3_R_UNABLE_TO_GET_ISSUER_DETAILS))) {
        private enum enumMixinStr_X509V3_R_UNABLE_TO_GET_ISSUER_DETAILS = `enum X509V3_R_UNABLE_TO_GET_ISSUER_DETAILS = 122;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_R_UNABLE_TO_GET_ISSUER_DETAILS); }))) {
            mixin(enumMixinStr_X509V3_R_UNABLE_TO_GET_ISSUER_DETAILS);
        }
    }




    static if(!is(typeof(X509V3_R_UNABLE_TO_GET_ISSUER_KEYID))) {
        private enum enumMixinStr_X509V3_R_UNABLE_TO_GET_ISSUER_KEYID = `enum X509V3_R_UNABLE_TO_GET_ISSUER_KEYID = 123;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_R_UNABLE_TO_GET_ISSUER_KEYID); }))) {
            mixin(enumMixinStr_X509V3_R_UNABLE_TO_GET_ISSUER_KEYID);
        }
    }




    static if(!is(typeof(X509V3_R_UNKNOWN_BIT_STRING_ARGUMENT))) {
        private enum enumMixinStr_X509V3_R_UNKNOWN_BIT_STRING_ARGUMENT = `enum X509V3_R_UNKNOWN_BIT_STRING_ARGUMENT = 111;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_R_UNKNOWN_BIT_STRING_ARGUMENT); }))) {
            mixin(enumMixinStr_X509V3_R_UNKNOWN_BIT_STRING_ARGUMENT);
        }
    }




    static if(!is(typeof(X509V3_R_UNKNOWN_EXTENSION))) {
        private enum enumMixinStr_X509V3_R_UNKNOWN_EXTENSION = `enum X509V3_R_UNKNOWN_EXTENSION = 129;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_R_UNKNOWN_EXTENSION); }))) {
            mixin(enumMixinStr_X509V3_R_UNKNOWN_EXTENSION);
        }
    }




    static if(!is(typeof(X509V3_R_UNKNOWN_EXTENSION_NAME))) {
        private enum enumMixinStr_X509V3_R_UNKNOWN_EXTENSION_NAME = `enum X509V3_R_UNKNOWN_EXTENSION_NAME = 130;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_R_UNKNOWN_EXTENSION_NAME); }))) {
            mixin(enumMixinStr_X509V3_R_UNKNOWN_EXTENSION_NAME);
        }
    }




    static if(!is(typeof(X509V3_R_UNKNOWN_OPTION))) {
        private enum enumMixinStr_X509V3_R_UNKNOWN_OPTION = `enum X509V3_R_UNKNOWN_OPTION = 120;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_R_UNKNOWN_OPTION); }))) {
            mixin(enumMixinStr_X509V3_R_UNKNOWN_OPTION);
        }
    }




    static if(!is(typeof(X509V3_R_UNSUPPORTED_OPTION))) {
        private enum enumMixinStr_X509V3_R_UNSUPPORTED_OPTION = `enum X509V3_R_UNSUPPORTED_OPTION = 117;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_R_UNSUPPORTED_OPTION); }))) {
            mixin(enumMixinStr_X509V3_R_UNSUPPORTED_OPTION);
        }
    }




    static if(!is(typeof(X509V3_R_UNSUPPORTED_TYPE))) {
        private enum enumMixinStr_X509V3_R_UNSUPPORTED_TYPE = `enum X509V3_R_UNSUPPORTED_TYPE = 167;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_R_UNSUPPORTED_TYPE); }))) {
            mixin(enumMixinStr_X509V3_R_UNSUPPORTED_TYPE);
        }
    }




    static if(!is(typeof(X509V3_R_USER_TOO_LONG))) {
        private enum enumMixinStr_X509V3_R_USER_TOO_LONG = `enum X509V3_R_USER_TOO_LONG = 132;`;
        static if(is(typeof({ mixin(enumMixinStr_X509V3_R_USER_TOO_LONG); }))) {
            mixin(enumMixinStr_X509V3_R_USER_TOO_LONG);
        }
    }




    static if(!is(typeof(_PTHREAD_H))) {
        private enum enumMixinStr__PTHREAD_H = `enum _PTHREAD_H = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__PTHREAD_H); }))) {
            mixin(enumMixinStr__PTHREAD_H);
        }
    }




    static if(!is(typeof(PTHREAD_CREATE_JOINABLE))) {
        private enum enumMixinStr_PTHREAD_CREATE_JOINABLE = `enum PTHREAD_CREATE_JOINABLE = PTHREAD_CREATE_JOINABLE;`;
        static if(is(typeof({ mixin(enumMixinStr_PTHREAD_CREATE_JOINABLE); }))) {
            mixin(enumMixinStr_PTHREAD_CREATE_JOINABLE);
        }
    }




    static if(!is(typeof(PTHREAD_CREATE_DETACHED))) {
        private enum enumMixinStr_PTHREAD_CREATE_DETACHED = `enum PTHREAD_CREATE_DETACHED = PTHREAD_CREATE_DETACHED;`;
        static if(is(typeof({ mixin(enumMixinStr_PTHREAD_CREATE_DETACHED); }))) {
            mixin(enumMixinStr_PTHREAD_CREATE_DETACHED);
        }
    }




    static if(!is(typeof(PTHREAD_MUTEX_INITIALIZER))) {
        private enum enumMixinStr_PTHREAD_MUTEX_INITIALIZER = `enum PTHREAD_MUTEX_INITIALIZER = { { 0 , 0 , 0 , 0 , PTHREAD_MUTEX_TIMED_NP , 0 , 0 , { 0 , 0 } } };`;
        static if(is(typeof({ mixin(enumMixinStr_PTHREAD_MUTEX_INITIALIZER); }))) {
            mixin(enumMixinStr_PTHREAD_MUTEX_INITIALIZER);
        }
    }




    static if(!is(typeof(PTHREAD_RWLOCK_INITIALIZER))) {
        private enum enumMixinStr_PTHREAD_RWLOCK_INITIALIZER = `enum PTHREAD_RWLOCK_INITIALIZER = { { 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , { 0 , 0 , 0 , 0 , 0 , 0 , 0 } , 0 , PTHREAD_RWLOCK_DEFAULT_NP } };`;
        static if(is(typeof({ mixin(enumMixinStr_PTHREAD_RWLOCK_INITIALIZER); }))) {
            mixin(enumMixinStr_PTHREAD_RWLOCK_INITIALIZER);
        }
    }




    static if(!is(typeof(PTHREAD_INHERIT_SCHED))) {
        private enum enumMixinStr_PTHREAD_INHERIT_SCHED = `enum PTHREAD_INHERIT_SCHED = PTHREAD_INHERIT_SCHED;`;
        static if(is(typeof({ mixin(enumMixinStr_PTHREAD_INHERIT_SCHED); }))) {
            mixin(enumMixinStr_PTHREAD_INHERIT_SCHED);
        }
    }




    static if(!is(typeof(PTHREAD_EXPLICIT_SCHED))) {
        private enum enumMixinStr_PTHREAD_EXPLICIT_SCHED = `enum PTHREAD_EXPLICIT_SCHED = PTHREAD_EXPLICIT_SCHED;`;
        static if(is(typeof({ mixin(enumMixinStr_PTHREAD_EXPLICIT_SCHED); }))) {
            mixin(enumMixinStr_PTHREAD_EXPLICIT_SCHED);
        }
    }




    static if(!is(typeof(PTHREAD_SCOPE_SYSTEM))) {
        private enum enumMixinStr_PTHREAD_SCOPE_SYSTEM = `enum PTHREAD_SCOPE_SYSTEM = PTHREAD_SCOPE_SYSTEM;`;
        static if(is(typeof({ mixin(enumMixinStr_PTHREAD_SCOPE_SYSTEM); }))) {
            mixin(enumMixinStr_PTHREAD_SCOPE_SYSTEM);
        }
    }




    static if(!is(typeof(PTHREAD_SCOPE_PROCESS))) {
        private enum enumMixinStr_PTHREAD_SCOPE_PROCESS = `enum PTHREAD_SCOPE_PROCESS = PTHREAD_SCOPE_PROCESS;`;
        static if(is(typeof({ mixin(enumMixinStr_PTHREAD_SCOPE_PROCESS); }))) {
            mixin(enumMixinStr_PTHREAD_SCOPE_PROCESS);
        }
    }




    static if(!is(typeof(PTHREAD_PROCESS_PRIVATE))) {
        private enum enumMixinStr_PTHREAD_PROCESS_PRIVATE = `enum PTHREAD_PROCESS_PRIVATE = PTHREAD_PROCESS_PRIVATE;`;
        static if(is(typeof({ mixin(enumMixinStr_PTHREAD_PROCESS_PRIVATE); }))) {
            mixin(enumMixinStr_PTHREAD_PROCESS_PRIVATE);
        }
    }




    static if(!is(typeof(PTHREAD_PROCESS_SHARED))) {
        private enum enumMixinStr_PTHREAD_PROCESS_SHARED = `enum PTHREAD_PROCESS_SHARED = PTHREAD_PROCESS_SHARED;`;
        static if(is(typeof({ mixin(enumMixinStr_PTHREAD_PROCESS_SHARED); }))) {
            mixin(enumMixinStr_PTHREAD_PROCESS_SHARED);
        }
    }




    static if(!is(typeof(PTHREAD_COND_INITIALIZER))) {
        private enum enumMixinStr_PTHREAD_COND_INITIALIZER = `enum PTHREAD_COND_INITIALIZER = { { { 0 } , { 0 } , { 0 , 0 } , { 0 , 0 } , 0 , 0 , { 0 , 0 } } };`;
        static if(is(typeof({ mixin(enumMixinStr_PTHREAD_COND_INITIALIZER); }))) {
            mixin(enumMixinStr_PTHREAD_COND_INITIALIZER);
        }
    }




    static if(!is(typeof(PTHREAD_CANCEL_ENABLE))) {
        private enum enumMixinStr_PTHREAD_CANCEL_ENABLE = `enum PTHREAD_CANCEL_ENABLE = PTHREAD_CANCEL_ENABLE;`;
        static if(is(typeof({ mixin(enumMixinStr_PTHREAD_CANCEL_ENABLE); }))) {
            mixin(enumMixinStr_PTHREAD_CANCEL_ENABLE);
        }
    }




    static if(!is(typeof(PTHREAD_CANCEL_DISABLE))) {
        private enum enumMixinStr_PTHREAD_CANCEL_DISABLE = `enum PTHREAD_CANCEL_DISABLE = PTHREAD_CANCEL_DISABLE;`;
        static if(is(typeof({ mixin(enumMixinStr_PTHREAD_CANCEL_DISABLE); }))) {
            mixin(enumMixinStr_PTHREAD_CANCEL_DISABLE);
        }
    }




    static if(!is(typeof(PTHREAD_CANCEL_DEFERRED))) {
        private enum enumMixinStr_PTHREAD_CANCEL_DEFERRED = `enum PTHREAD_CANCEL_DEFERRED = PTHREAD_CANCEL_DEFERRED;`;
        static if(is(typeof({ mixin(enumMixinStr_PTHREAD_CANCEL_DEFERRED); }))) {
            mixin(enumMixinStr_PTHREAD_CANCEL_DEFERRED);
        }
    }




    static if(!is(typeof(PTHREAD_CANCEL_ASYNCHRONOUS))) {
        private enum enumMixinStr_PTHREAD_CANCEL_ASYNCHRONOUS = `enum PTHREAD_CANCEL_ASYNCHRONOUS = PTHREAD_CANCEL_ASYNCHRONOUS;`;
        static if(is(typeof({ mixin(enumMixinStr_PTHREAD_CANCEL_ASYNCHRONOUS); }))) {
            mixin(enumMixinStr_PTHREAD_CANCEL_ASYNCHRONOUS);
        }
    }




    static if(!is(typeof(PTHREAD_CANCELED))) {
        private enum enumMixinStr_PTHREAD_CANCELED = `enum PTHREAD_CANCELED = ( cast( void * ) - 1 );`;
        static if(is(typeof({ mixin(enumMixinStr_PTHREAD_CANCELED); }))) {
            mixin(enumMixinStr_PTHREAD_CANCELED);
        }
    }




    static if(!is(typeof(PTHREAD_ONCE_INIT))) {
        private enum enumMixinStr_PTHREAD_ONCE_INIT = `enum PTHREAD_ONCE_INIT = 0;`;
        static if(is(typeof({ mixin(enumMixinStr_PTHREAD_ONCE_INIT); }))) {
            mixin(enumMixinStr_PTHREAD_ONCE_INIT);
        }
    }




    static if(!is(typeof(PTHREAD_BARRIER_SERIAL_THREAD))) {
        private enum enumMixinStr_PTHREAD_BARRIER_SERIAL_THREAD = `enum PTHREAD_BARRIER_SERIAL_THREAD = - 1;`;
        static if(is(typeof({ mixin(enumMixinStr_PTHREAD_BARRIER_SERIAL_THREAD); }))) {
            mixin(enumMixinStr_PTHREAD_BARRIER_SERIAL_THREAD);
        }
    }
    static if(!is(typeof(_SCHED_H))) {
        private enum enumMixinStr__SCHED_H = `enum _SCHED_H = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__SCHED_H); }))) {
            mixin(enumMixinStr__SCHED_H);
        }
    }






    static if(!is(typeof(sched_priority))) {
        private enum enumMixinStr_sched_priority = `enum sched_priority = sched_priority;`;
        static if(is(typeof({ mixin(enumMixinStr_sched_priority); }))) {
            mixin(enumMixinStr_sched_priority);
        }
    }




    static if(!is(typeof(__sched_priority))) {
        private enum enumMixinStr___sched_priority = `enum __sched_priority = sched_priority;`;
        static if(is(typeof({ mixin(enumMixinStr___sched_priority); }))) {
            mixin(enumMixinStr___sched_priority);
        }
    }




    static if(!is(typeof(_STDC_PREDEF_H))) {
        private enum enumMixinStr__STDC_PREDEF_H = `enum _STDC_PREDEF_H = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__STDC_PREDEF_H); }))) {
            mixin(enumMixinStr__STDC_PREDEF_H);
        }
    }




    static if(!is(typeof(_STDINT_H))) {
        private enum enumMixinStr__STDINT_H = `enum _STDINT_H = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__STDINT_H); }))) {
            mixin(enumMixinStr__STDINT_H);
        }
    }
    static if(!is(typeof(INT8_MIN))) {
        private enum enumMixinStr_INT8_MIN = `enum INT8_MIN = ( - 128 );`;
        static if(is(typeof({ mixin(enumMixinStr_INT8_MIN); }))) {
            mixin(enumMixinStr_INT8_MIN);
        }
    }




    static if(!is(typeof(INT16_MIN))) {
        private enum enumMixinStr_INT16_MIN = `enum INT16_MIN = ( - 32767 - 1 );`;
        static if(is(typeof({ mixin(enumMixinStr_INT16_MIN); }))) {
            mixin(enumMixinStr_INT16_MIN);
        }
    }




    static if(!is(typeof(INT32_MIN))) {
        private enum enumMixinStr_INT32_MIN = `enum INT32_MIN = ( - 2147483647 - 1 );`;
        static if(is(typeof({ mixin(enumMixinStr_INT32_MIN); }))) {
            mixin(enumMixinStr_INT32_MIN);
        }
    }




    static if(!is(typeof(INT64_MIN))) {
        private enum enumMixinStr_INT64_MIN = `enum INT64_MIN = ( - 9223372036854775807L - 1 );`;
        static if(is(typeof({ mixin(enumMixinStr_INT64_MIN); }))) {
            mixin(enumMixinStr_INT64_MIN);
        }
    }




    static if(!is(typeof(INT8_MAX))) {
        private enum enumMixinStr_INT8_MAX = `enum INT8_MAX = ( 127 );`;
        static if(is(typeof({ mixin(enumMixinStr_INT8_MAX); }))) {
            mixin(enumMixinStr_INT8_MAX);
        }
    }




    static if(!is(typeof(INT16_MAX))) {
        private enum enumMixinStr_INT16_MAX = `enum INT16_MAX = ( 32767 );`;
        static if(is(typeof({ mixin(enumMixinStr_INT16_MAX); }))) {
            mixin(enumMixinStr_INT16_MAX);
        }
    }




    static if(!is(typeof(INT32_MAX))) {
        private enum enumMixinStr_INT32_MAX = `enum INT32_MAX = ( 2147483647 );`;
        static if(is(typeof({ mixin(enumMixinStr_INT32_MAX); }))) {
            mixin(enumMixinStr_INT32_MAX);
        }
    }




    static if(!is(typeof(INT64_MAX))) {
        private enum enumMixinStr_INT64_MAX = `enum INT64_MAX = ( 9223372036854775807L );`;
        static if(is(typeof({ mixin(enumMixinStr_INT64_MAX); }))) {
            mixin(enumMixinStr_INT64_MAX);
        }
    }




    static if(!is(typeof(UINT8_MAX))) {
        private enum enumMixinStr_UINT8_MAX = `enum UINT8_MAX = ( 255 );`;
        static if(is(typeof({ mixin(enumMixinStr_UINT8_MAX); }))) {
            mixin(enumMixinStr_UINT8_MAX);
        }
    }




    static if(!is(typeof(UINT16_MAX))) {
        private enum enumMixinStr_UINT16_MAX = `enum UINT16_MAX = ( 65535 );`;
        static if(is(typeof({ mixin(enumMixinStr_UINT16_MAX); }))) {
            mixin(enumMixinStr_UINT16_MAX);
        }
    }




    static if(!is(typeof(UINT32_MAX))) {
        private enum enumMixinStr_UINT32_MAX = `enum UINT32_MAX = ( 4294967295U );`;
        static if(is(typeof({ mixin(enumMixinStr_UINT32_MAX); }))) {
            mixin(enumMixinStr_UINT32_MAX);
        }
    }




    static if(!is(typeof(UINT64_MAX))) {
        private enum enumMixinStr_UINT64_MAX = `enum UINT64_MAX = ( 18446744073709551615UL );`;
        static if(is(typeof({ mixin(enumMixinStr_UINT64_MAX); }))) {
            mixin(enumMixinStr_UINT64_MAX);
        }
    }




    static if(!is(typeof(INT_LEAST8_MIN))) {
        private enum enumMixinStr_INT_LEAST8_MIN = `enum INT_LEAST8_MIN = ( - 128 );`;
        static if(is(typeof({ mixin(enumMixinStr_INT_LEAST8_MIN); }))) {
            mixin(enumMixinStr_INT_LEAST8_MIN);
        }
    }




    static if(!is(typeof(INT_LEAST16_MIN))) {
        private enum enumMixinStr_INT_LEAST16_MIN = `enum INT_LEAST16_MIN = ( - 32767 - 1 );`;
        static if(is(typeof({ mixin(enumMixinStr_INT_LEAST16_MIN); }))) {
            mixin(enumMixinStr_INT_LEAST16_MIN);
        }
    }




    static if(!is(typeof(INT_LEAST32_MIN))) {
        private enum enumMixinStr_INT_LEAST32_MIN = `enum INT_LEAST32_MIN = ( - 2147483647 - 1 );`;
        static if(is(typeof({ mixin(enumMixinStr_INT_LEAST32_MIN); }))) {
            mixin(enumMixinStr_INT_LEAST32_MIN);
        }
    }




    static if(!is(typeof(INT_LEAST64_MIN))) {
        private enum enumMixinStr_INT_LEAST64_MIN = `enum INT_LEAST64_MIN = ( - 9223372036854775807L - 1 );`;
        static if(is(typeof({ mixin(enumMixinStr_INT_LEAST64_MIN); }))) {
            mixin(enumMixinStr_INT_LEAST64_MIN);
        }
    }




    static if(!is(typeof(INT_LEAST8_MAX))) {
        private enum enumMixinStr_INT_LEAST8_MAX = `enum INT_LEAST8_MAX = ( 127 );`;
        static if(is(typeof({ mixin(enumMixinStr_INT_LEAST8_MAX); }))) {
            mixin(enumMixinStr_INT_LEAST8_MAX);
        }
    }




    static if(!is(typeof(INT_LEAST16_MAX))) {
        private enum enumMixinStr_INT_LEAST16_MAX = `enum INT_LEAST16_MAX = ( 32767 );`;
        static if(is(typeof({ mixin(enumMixinStr_INT_LEAST16_MAX); }))) {
            mixin(enumMixinStr_INT_LEAST16_MAX);
        }
    }




    static if(!is(typeof(INT_LEAST32_MAX))) {
        private enum enumMixinStr_INT_LEAST32_MAX = `enum INT_LEAST32_MAX = ( 2147483647 );`;
        static if(is(typeof({ mixin(enumMixinStr_INT_LEAST32_MAX); }))) {
            mixin(enumMixinStr_INT_LEAST32_MAX);
        }
    }




    static if(!is(typeof(INT_LEAST64_MAX))) {
        private enum enumMixinStr_INT_LEAST64_MAX = `enum INT_LEAST64_MAX = ( 9223372036854775807L );`;
        static if(is(typeof({ mixin(enumMixinStr_INT_LEAST64_MAX); }))) {
            mixin(enumMixinStr_INT_LEAST64_MAX);
        }
    }




    static if(!is(typeof(UINT_LEAST8_MAX))) {
        private enum enumMixinStr_UINT_LEAST8_MAX = `enum UINT_LEAST8_MAX = ( 255 );`;
        static if(is(typeof({ mixin(enumMixinStr_UINT_LEAST8_MAX); }))) {
            mixin(enumMixinStr_UINT_LEAST8_MAX);
        }
    }




    static if(!is(typeof(UINT_LEAST16_MAX))) {
        private enum enumMixinStr_UINT_LEAST16_MAX = `enum UINT_LEAST16_MAX = ( 65535 );`;
        static if(is(typeof({ mixin(enumMixinStr_UINT_LEAST16_MAX); }))) {
            mixin(enumMixinStr_UINT_LEAST16_MAX);
        }
    }




    static if(!is(typeof(UINT_LEAST32_MAX))) {
        private enum enumMixinStr_UINT_LEAST32_MAX = `enum UINT_LEAST32_MAX = ( 4294967295U );`;
        static if(is(typeof({ mixin(enumMixinStr_UINT_LEAST32_MAX); }))) {
            mixin(enumMixinStr_UINT_LEAST32_MAX);
        }
    }




    static if(!is(typeof(UINT_LEAST64_MAX))) {
        private enum enumMixinStr_UINT_LEAST64_MAX = `enum UINT_LEAST64_MAX = ( 18446744073709551615UL );`;
        static if(is(typeof({ mixin(enumMixinStr_UINT_LEAST64_MAX); }))) {
            mixin(enumMixinStr_UINT_LEAST64_MAX);
        }
    }




    static if(!is(typeof(INT_FAST8_MIN))) {
        private enum enumMixinStr_INT_FAST8_MIN = `enum INT_FAST8_MIN = ( - 128 );`;
        static if(is(typeof({ mixin(enumMixinStr_INT_FAST8_MIN); }))) {
            mixin(enumMixinStr_INT_FAST8_MIN);
        }
    }




    static if(!is(typeof(INT_FAST16_MIN))) {
        private enum enumMixinStr_INT_FAST16_MIN = `enum INT_FAST16_MIN = ( - 9223372036854775807L - 1 );`;
        static if(is(typeof({ mixin(enumMixinStr_INT_FAST16_MIN); }))) {
            mixin(enumMixinStr_INT_FAST16_MIN);
        }
    }




    static if(!is(typeof(INT_FAST32_MIN))) {
        private enum enumMixinStr_INT_FAST32_MIN = `enum INT_FAST32_MIN = ( - 9223372036854775807L - 1 );`;
        static if(is(typeof({ mixin(enumMixinStr_INT_FAST32_MIN); }))) {
            mixin(enumMixinStr_INT_FAST32_MIN);
        }
    }




    static if(!is(typeof(INT_FAST64_MIN))) {
        private enum enumMixinStr_INT_FAST64_MIN = `enum INT_FAST64_MIN = ( - 9223372036854775807L - 1 );`;
        static if(is(typeof({ mixin(enumMixinStr_INT_FAST64_MIN); }))) {
            mixin(enumMixinStr_INT_FAST64_MIN);
        }
    }




    static if(!is(typeof(INT_FAST8_MAX))) {
        private enum enumMixinStr_INT_FAST8_MAX = `enum INT_FAST8_MAX = ( 127 );`;
        static if(is(typeof({ mixin(enumMixinStr_INT_FAST8_MAX); }))) {
            mixin(enumMixinStr_INT_FAST8_MAX);
        }
    }




    static if(!is(typeof(INT_FAST16_MAX))) {
        private enum enumMixinStr_INT_FAST16_MAX = `enum INT_FAST16_MAX = ( 9223372036854775807L );`;
        static if(is(typeof({ mixin(enumMixinStr_INT_FAST16_MAX); }))) {
            mixin(enumMixinStr_INT_FAST16_MAX);
        }
    }




    static if(!is(typeof(INT_FAST32_MAX))) {
        private enum enumMixinStr_INT_FAST32_MAX = `enum INT_FAST32_MAX = ( 9223372036854775807L );`;
        static if(is(typeof({ mixin(enumMixinStr_INT_FAST32_MAX); }))) {
            mixin(enumMixinStr_INT_FAST32_MAX);
        }
    }




    static if(!is(typeof(INT_FAST64_MAX))) {
        private enum enumMixinStr_INT_FAST64_MAX = `enum INT_FAST64_MAX = ( 9223372036854775807L );`;
        static if(is(typeof({ mixin(enumMixinStr_INT_FAST64_MAX); }))) {
            mixin(enumMixinStr_INT_FAST64_MAX);
        }
    }




    static if(!is(typeof(UINT_FAST8_MAX))) {
        private enum enumMixinStr_UINT_FAST8_MAX = `enum UINT_FAST8_MAX = ( 255 );`;
        static if(is(typeof({ mixin(enumMixinStr_UINT_FAST8_MAX); }))) {
            mixin(enumMixinStr_UINT_FAST8_MAX);
        }
    }




    static if(!is(typeof(UINT_FAST16_MAX))) {
        private enum enumMixinStr_UINT_FAST16_MAX = `enum UINT_FAST16_MAX = ( 18446744073709551615UL );`;
        static if(is(typeof({ mixin(enumMixinStr_UINT_FAST16_MAX); }))) {
            mixin(enumMixinStr_UINT_FAST16_MAX);
        }
    }




    static if(!is(typeof(UINT_FAST32_MAX))) {
        private enum enumMixinStr_UINT_FAST32_MAX = `enum UINT_FAST32_MAX = ( 18446744073709551615UL );`;
        static if(is(typeof({ mixin(enumMixinStr_UINT_FAST32_MAX); }))) {
            mixin(enumMixinStr_UINT_FAST32_MAX);
        }
    }




    static if(!is(typeof(UINT_FAST64_MAX))) {
        private enum enumMixinStr_UINT_FAST64_MAX = `enum UINT_FAST64_MAX = ( 18446744073709551615UL );`;
        static if(is(typeof({ mixin(enumMixinStr_UINT_FAST64_MAX); }))) {
            mixin(enumMixinStr_UINT_FAST64_MAX);
        }
    }




    static if(!is(typeof(INTPTR_MIN))) {
        private enum enumMixinStr_INTPTR_MIN = `enum INTPTR_MIN = ( - 9223372036854775807L - 1 );`;
        static if(is(typeof({ mixin(enumMixinStr_INTPTR_MIN); }))) {
            mixin(enumMixinStr_INTPTR_MIN);
        }
    }




    static if(!is(typeof(INTPTR_MAX))) {
        private enum enumMixinStr_INTPTR_MAX = `enum INTPTR_MAX = ( 9223372036854775807L );`;
        static if(is(typeof({ mixin(enumMixinStr_INTPTR_MAX); }))) {
            mixin(enumMixinStr_INTPTR_MAX);
        }
    }




    static if(!is(typeof(UINTPTR_MAX))) {
        private enum enumMixinStr_UINTPTR_MAX = `enum UINTPTR_MAX = ( 18446744073709551615UL );`;
        static if(is(typeof({ mixin(enumMixinStr_UINTPTR_MAX); }))) {
            mixin(enumMixinStr_UINTPTR_MAX);
        }
    }




    static if(!is(typeof(INTMAX_MIN))) {
        private enum enumMixinStr_INTMAX_MIN = `enum INTMAX_MIN = ( - 9223372036854775807L - 1 );`;
        static if(is(typeof({ mixin(enumMixinStr_INTMAX_MIN); }))) {
            mixin(enumMixinStr_INTMAX_MIN);
        }
    }




    static if(!is(typeof(INTMAX_MAX))) {
        private enum enumMixinStr_INTMAX_MAX = `enum INTMAX_MAX = ( 9223372036854775807L );`;
        static if(is(typeof({ mixin(enumMixinStr_INTMAX_MAX); }))) {
            mixin(enumMixinStr_INTMAX_MAX);
        }
    }




    static if(!is(typeof(UINTMAX_MAX))) {
        private enum enumMixinStr_UINTMAX_MAX = `enum UINTMAX_MAX = ( 18446744073709551615UL );`;
        static if(is(typeof({ mixin(enumMixinStr_UINTMAX_MAX); }))) {
            mixin(enumMixinStr_UINTMAX_MAX);
        }
    }




    static if(!is(typeof(PTRDIFF_MIN))) {
        private enum enumMixinStr_PTRDIFF_MIN = `enum PTRDIFF_MIN = ( - 9223372036854775807L - 1 );`;
        static if(is(typeof({ mixin(enumMixinStr_PTRDIFF_MIN); }))) {
            mixin(enumMixinStr_PTRDIFF_MIN);
        }
    }




    static if(!is(typeof(PTRDIFF_MAX))) {
        private enum enumMixinStr_PTRDIFF_MAX = `enum PTRDIFF_MAX = ( 9223372036854775807L );`;
        static if(is(typeof({ mixin(enumMixinStr_PTRDIFF_MAX); }))) {
            mixin(enumMixinStr_PTRDIFF_MAX);
        }
    }




    static if(!is(typeof(SIG_ATOMIC_MIN))) {
        private enum enumMixinStr_SIG_ATOMIC_MIN = `enum SIG_ATOMIC_MIN = ( - 2147483647 - 1 );`;
        static if(is(typeof({ mixin(enumMixinStr_SIG_ATOMIC_MIN); }))) {
            mixin(enumMixinStr_SIG_ATOMIC_MIN);
        }
    }




    static if(!is(typeof(SIG_ATOMIC_MAX))) {
        private enum enumMixinStr_SIG_ATOMIC_MAX = `enum SIG_ATOMIC_MAX = ( 2147483647 );`;
        static if(is(typeof({ mixin(enumMixinStr_SIG_ATOMIC_MAX); }))) {
            mixin(enumMixinStr_SIG_ATOMIC_MAX);
        }
    }




    static if(!is(typeof(SIZE_MAX))) {
        private enum enumMixinStr_SIZE_MAX = `enum SIZE_MAX = ( 18446744073709551615UL );`;
        static if(is(typeof({ mixin(enumMixinStr_SIZE_MAX); }))) {
            mixin(enumMixinStr_SIZE_MAX);
        }
    }




    static if(!is(typeof(WCHAR_MIN))) {
        private enum enumMixinStr_WCHAR_MIN = `enum WCHAR_MIN = ( - 0x7fffffff - 1 );`;
        static if(is(typeof({ mixin(enumMixinStr_WCHAR_MIN); }))) {
            mixin(enumMixinStr_WCHAR_MIN);
        }
    }




    static if(!is(typeof(WCHAR_MAX))) {
        private enum enumMixinStr_WCHAR_MAX = `enum WCHAR_MAX = 0x7fffffff;`;
        static if(is(typeof({ mixin(enumMixinStr_WCHAR_MAX); }))) {
            mixin(enumMixinStr_WCHAR_MAX);
        }
    }




    static if(!is(typeof(WINT_MIN))) {
        private enum enumMixinStr_WINT_MIN = `enum WINT_MIN = ( 0u );`;
        static if(is(typeof({ mixin(enumMixinStr_WINT_MIN); }))) {
            mixin(enumMixinStr_WINT_MIN);
        }
    }




    static if(!is(typeof(WINT_MAX))) {
        private enum enumMixinStr_WINT_MAX = `enum WINT_MAX = ( 4294967295u );`;
        static if(is(typeof({ mixin(enumMixinStr_WINT_MAX); }))) {
            mixin(enumMixinStr_WINT_MAX);
        }
    }
    static if(!is(typeof(_STDIO_H))) {
        private enum enumMixinStr__STDIO_H = `enum _STDIO_H = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__STDIO_H); }))) {
            mixin(enumMixinStr__STDIO_H);
        }
    }




    static if(!is(typeof(MDC2_DIGEST_LENGTH))) {
        private enum enumMixinStr_MDC2_DIGEST_LENGTH = `enum MDC2_DIGEST_LENGTH = 16;`;
        static if(is(typeof({ mixin(enumMixinStr_MDC2_DIGEST_LENGTH); }))) {
            mixin(enumMixinStr_MDC2_DIGEST_LENGTH);
        }
    }




    static if(!is(typeof(MDC2_BLOCK))) {
        private enum enumMixinStr_MDC2_BLOCK = `enum MDC2_BLOCK = 8;`;
        static if(is(typeof({ mixin(enumMixinStr_MDC2_BLOCK); }))) {
            mixin(enumMixinStr_MDC2_BLOCK);
        }
    }
    static if(!is(typeof(MD5_DIGEST_LENGTH))) {
        private enum enumMixinStr_MD5_DIGEST_LENGTH = `enum MD5_DIGEST_LENGTH = 16;`;
        static if(is(typeof({ mixin(enumMixinStr_MD5_DIGEST_LENGTH); }))) {
            mixin(enumMixinStr_MD5_DIGEST_LENGTH);
        }
    }




    static if(!is(typeof(MD5_LBLOCK))) {
        private enum enumMixinStr_MD5_LBLOCK = `enum MD5_LBLOCK = ( MD5_CBLOCK / 4 );`;
        static if(is(typeof({ mixin(enumMixinStr_MD5_LBLOCK); }))) {
            mixin(enumMixinStr_MD5_LBLOCK);
        }
    }




    static if(!is(typeof(MD5_CBLOCK))) {
        private enum enumMixinStr_MD5_CBLOCK = `enum MD5_CBLOCK = 64;`;
        static if(is(typeof({ mixin(enumMixinStr_MD5_CBLOCK); }))) {
            mixin(enumMixinStr_MD5_CBLOCK);
        }
    }




    static if(!is(typeof(MD5_LONG))) {
        private enum enumMixinStr_MD5_LONG = `enum MD5_LONG = unsigned int;`;
        static if(is(typeof({ mixin(enumMixinStr_MD5_LONG); }))) {
            mixin(enumMixinStr_MD5_LONG);
        }
    }






    static if(!is(typeof(MD4_DIGEST_LENGTH))) {
        private enum enumMixinStr_MD4_DIGEST_LENGTH = `enum MD4_DIGEST_LENGTH = 16;`;
        static if(is(typeof({ mixin(enumMixinStr_MD4_DIGEST_LENGTH); }))) {
            mixin(enumMixinStr_MD4_DIGEST_LENGTH);
        }
    }




    static if(!is(typeof(MD4_LBLOCK))) {
        private enum enumMixinStr_MD4_LBLOCK = `enum MD4_LBLOCK = ( MD4_CBLOCK / 4 );`;
        static if(is(typeof({ mixin(enumMixinStr_MD4_LBLOCK); }))) {
            mixin(enumMixinStr_MD4_LBLOCK);
        }
    }




    static if(!is(typeof(MD4_CBLOCK))) {
        private enum enumMixinStr_MD4_CBLOCK = `enum MD4_CBLOCK = 64;`;
        static if(is(typeof({ mixin(enumMixinStr_MD4_CBLOCK); }))) {
            mixin(enumMixinStr_MD4_CBLOCK);
        }
    }




    static if(!is(typeof(MD4_LONG))) {
        private enum enumMixinStr_MD4_LONG = `enum MD4_LONG = unsigned int;`;
        static if(is(typeof({ mixin(enumMixinStr_MD4_LONG); }))) {
            mixin(enumMixinStr_MD4_LONG);
        }
    }
    static if(!is(typeof(KDF_R_VALUE_MISSING))) {
        private enum enumMixinStr_KDF_R_VALUE_MISSING = `enum KDF_R_VALUE_MISSING = 102;`;
        static if(is(typeof({ mixin(enumMixinStr_KDF_R_VALUE_MISSING); }))) {
            mixin(enumMixinStr_KDF_R_VALUE_MISSING);
        }
    }




    static if(!is(typeof(KDF_R_MISSING_PARAMETER))) {
        private enum enumMixinStr_KDF_R_MISSING_PARAMETER = `enum KDF_R_MISSING_PARAMETER = 101;`;
        static if(is(typeof({ mixin(enumMixinStr_KDF_R_MISSING_PARAMETER); }))) {
            mixin(enumMixinStr_KDF_R_MISSING_PARAMETER);
        }
    }






    static if(!is(typeof(KDF_R_INVALID_DIGEST))) {
        private enum enumMixinStr_KDF_R_INVALID_DIGEST = `enum KDF_R_INVALID_DIGEST = 100;`;
        static if(is(typeof({ mixin(enumMixinStr_KDF_R_INVALID_DIGEST); }))) {
            mixin(enumMixinStr_KDF_R_INVALID_DIGEST);
        }
    }




    static if(!is(typeof(_IOFBF))) {
        private enum enumMixinStr__IOFBF = `enum _IOFBF = 0;`;
        static if(is(typeof({ mixin(enumMixinStr__IOFBF); }))) {
            mixin(enumMixinStr__IOFBF);
        }
    }




    static if(!is(typeof(_IOLBF))) {
        private enum enumMixinStr__IOLBF = `enum _IOLBF = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__IOLBF); }))) {
            mixin(enumMixinStr__IOLBF);
        }
    }




    static if(!is(typeof(_IONBF))) {
        private enum enumMixinStr__IONBF = `enum _IONBF = 2;`;
        static if(is(typeof({ mixin(enumMixinStr__IONBF); }))) {
            mixin(enumMixinStr__IONBF);
        }
    }




    static if(!is(typeof(BUFSIZ))) {
        private enum enumMixinStr_BUFSIZ = `enum BUFSIZ = 8192;`;
        static if(is(typeof({ mixin(enumMixinStr_BUFSIZ); }))) {
            mixin(enumMixinStr_BUFSIZ);
        }
    }




    static if(!is(typeof(EOF))) {
        private enum enumMixinStr_EOF = `enum EOF = ( - 1 );`;
        static if(is(typeof({ mixin(enumMixinStr_EOF); }))) {
            mixin(enumMixinStr_EOF);
        }
    }




    static if(!is(typeof(SEEK_SET))) {
        private enum enumMixinStr_SEEK_SET = `enum SEEK_SET = 0;`;
        static if(is(typeof({ mixin(enumMixinStr_SEEK_SET); }))) {
            mixin(enumMixinStr_SEEK_SET);
        }
    }




    static if(!is(typeof(SEEK_CUR))) {
        private enum enumMixinStr_SEEK_CUR = `enum SEEK_CUR = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_SEEK_CUR); }))) {
            mixin(enumMixinStr_SEEK_CUR);
        }
    }




    static if(!is(typeof(SEEK_END))) {
        private enum enumMixinStr_SEEK_END = `enum SEEK_END = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_SEEK_END); }))) {
            mixin(enumMixinStr_SEEK_END);
        }
    }




    static if(!is(typeof(KDF_F_PKEY_TLS1_PRF_DERIVE))) {
        private enum enumMixinStr_KDF_F_PKEY_TLS1_PRF_DERIVE = `enum KDF_F_PKEY_TLS1_PRF_DERIVE = 101;`;
        static if(is(typeof({ mixin(enumMixinStr_KDF_F_PKEY_TLS1_PRF_DERIVE); }))) {
            mixin(enumMixinStr_KDF_F_PKEY_TLS1_PRF_DERIVE);
        }
    }




    static if(!is(typeof(P_tmpdir))) {
        private enum enumMixinStr_P_tmpdir = `enum P_tmpdir = "/tmp";`;
        static if(is(typeof({ mixin(enumMixinStr_P_tmpdir); }))) {
            mixin(enumMixinStr_P_tmpdir);
        }
    }




    static if(!is(typeof(KDF_F_PKEY_TLS1_PRF_CTRL_STR))) {
        private enum enumMixinStr_KDF_F_PKEY_TLS1_PRF_CTRL_STR = `enum KDF_F_PKEY_TLS1_PRF_CTRL_STR = 100;`;
        static if(is(typeof({ mixin(enumMixinStr_KDF_F_PKEY_TLS1_PRF_CTRL_STR); }))) {
            mixin(enumMixinStr_KDF_F_PKEY_TLS1_PRF_CTRL_STR);
        }
    }
    static if(!is(typeof(stdin))) {
        private enum enumMixinStr_stdin = `enum stdin = stdin;`;
        static if(is(typeof({ mixin(enumMixinStr_stdin); }))) {
            mixin(enumMixinStr_stdin);
        }
    }




    static if(!is(typeof(stdout))) {
        private enum enumMixinStr_stdout = `enum stdout = stdout;`;
        static if(is(typeof({ mixin(enumMixinStr_stdout); }))) {
            mixin(enumMixinStr_stdout);
        }
    }




    static if(!is(typeof(stderr))) {
        private enum enumMixinStr_stderr = `enum stderr = stderr;`;
        static if(is(typeof({ mixin(enumMixinStr_stderr); }))) {
            mixin(enumMixinStr_stderr);
        }
    }
    static if(!is(typeof(EVP_PKEY_CTRL_HKDF_INFO))) {
        private enum enumMixinStr_EVP_PKEY_CTRL_HKDF_INFO = `enum EVP_PKEY_CTRL_HKDF_INFO = ( 0x1000 + 6 );`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_PKEY_CTRL_HKDF_INFO); }))) {
            mixin(enumMixinStr_EVP_PKEY_CTRL_HKDF_INFO);
        }
    }




    static if(!is(typeof(EVP_PKEY_CTRL_HKDF_KEY))) {
        private enum enumMixinStr_EVP_PKEY_CTRL_HKDF_KEY = `enum EVP_PKEY_CTRL_HKDF_KEY = ( 0x1000 + 5 );`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_PKEY_CTRL_HKDF_KEY); }))) {
            mixin(enumMixinStr_EVP_PKEY_CTRL_HKDF_KEY);
        }
    }




    static if(!is(typeof(EVP_PKEY_CTRL_HKDF_SALT))) {
        private enum enumMixinStr_EVP_PKEY_CTRL_HKDF_SALT = `enum EVP_PKEY_CTRL_HKDF_SALT = ( 0x1000 + 4 );`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_PKEY_CTRL_HKDF_SALT); }))) {
            mixin(enumMixinStr_EVP_PKEY_CTRL_HKDF_SALT);
        }
    }




    static if(!is(typeof(EVP_PKEY_CTRL_HKDF_MD))) {
        private enum enumMixinStr_EVP_PKEY_CTRL_HKDF_MD = `enum EVP_PKEY_CTRL_HKDF_MD = ( 0x1000 + 3 );`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_PKEY_CTRL_HKDF_MD); }))) {
            mixin(enumMixinStr_EVP_PKEY_CTRL_HKDF_MD);
        }
    }




    static if(!is(typeof(EVP_PKEY_CTRL_TLS_SEED))) {
        private enum enumMixinStr_EVP_PKEY_CTRL_TLS_SEED = `enum EVP_PKEY_CTRL_TLS_SEED = ( 0x1000 + 2 );`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_PKEY_CTRL_TLS_SEED); }))) {
            mixin(enumMixinStr_EVP_PKEY_CTRL_TLS_SEED);
        }
    }




    static if(!is(typeof(EVP_PKEY_CTRL_TLS_SECRET))) {
        private enum enumMixinStr_EVP_PKEY_CTRL_TLS_SECRET = `enum EVP_PKEY_CTRL_TLS_SECRET = ( 0x1000 + 1 );`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_PKEY_CTRL_TLS_SECRET); }))) {
            mixin(enumMixinStr_EVP_PKEY_CTRL_TLS_SECRET);
        }
    }




    static if(!is(typeof(EVP_PKEY_CTRL_TLS_MD))) {
        private enum enumMixinStr_EVP_PKEY_CTRL_TLS_MD = `enum EVP_PKEY_CTRL_TLS_MD = ( 0x1000 );`;
        static if(is(typeof({ mixin(enumMixinStr_EVP_PKEY_CTRL_TLS_MD); }))) {
            mixin(enumMixinStr_EVP_PKEY_CTRL_TLS_MD);
        }
    }






    static if(!is(typeof(idea_encrypt))) {
        private enum enumMixinStr_idea_encrypt = `enum idea_encrypt = IDEA_encrypt;`;
        static if(is(typeof({ mixin(enumMixinStr_idea_encrypt); }))) {
            mixin(enumMixinStr_idea_encrypt);
        }
    }




    static if(!is(typeof(idea_ofb64_encrypt))) {
        private enum enumMixinStr_idea_ofb64_encrypt = `enum idea_ofb64_encrypt = IDEA_ofb64_encrypt;`;
        static if(is(typeof({ mixin(enumMixinStr_idea_ofb64_encrypt); }))) {
            mixin(enumMixinStr_idea_ofb64_encrypt);
        }
    }




    static if(!is(typeof(idea_cfb64_encrypt))) {
        private enum enumMixinStr_idea_cfb64_encrypt = `enum idea_cfb64_encrypt = IDEA_cfb64_encrypt;`;
        static if(is(typeof({ mixin(enumMixinStr_idea_cfb64_encrypt); }))) {
            mixin(enumMixinStr_idea_cfb64_encrypt);
        }
    }




    static if(!is(typeof(idea_cbc_encrypt))) {
        private enum enumMixinStr_idea_cbc_encrypt = `enum idea_cbc_encrypt = IDEA_cbc_encrypt;`;
        static if(is(typeof({ mixin(enumMixinStr_idea_cbc_encrypt); }))) {
            mixin(enumMixinStr_idea_cbc_encrypt);
        }
    }




    static if(!is(typeof(idea_set_decrypt_key))) {
        private enum enumMixinStr_idea_set_decrypt_key = `enum idea_set_decrypt_key = IDEA_set_decrypt_key;`;
        static if(is(typeof({ mixin(enumMixinStr_idea_set_decrypt_key); }))) {
            mixin(enumMixinStr_idea_set_decrypt_key);
        }
    }




    static if(!is(typeof(idea_set_encrypt_key))) {
        private enum enumMixinStr_idea_set_encrypt_key = `enum idea_set_encrypt_key = IDEA_set_encrypt_key;`;
        static if(is(typeof({ mixin(enumMixinStr_idea_set_encrypt_key); }))) {
            mixin(enumMixinStr_idea_set_encrypt_key);
        }
    }




    static if(!is(typeof(idea_ecb_encrypt))) {
        private enum enumMixinStr_idea_ecb_encrypt = `enum idea_ecb_encrypt = IDEA_ecb_encrypt;`;
        static if(is(typeof({ mixin(enumMixinStr_idea_ecb_encrypt); }))) {
            mixin(enumMixinStr_idea_ecb_encrypt);
        }
    }




    static if(!is(typeof(idea_options))) {
        private enum enumMixinStr_idea_options = `enum idea_options = IDEA_options;`;
        static if(is(typeof({ mixin(enumMixinStr_idea_options); }))) {
            mixin(enumMixinStr_idea_options);
        }
    }




    static if(!is(typeof(IDEA_KEY_LENGTH))) {
        private enum enumMixinStr_IDEA_KEY_LENGTH = `enum IDEA_KEY_LENGTH = 16;`;
        static if(is(typeof({ mixin(enumMixinStr_IDEA_KEY_LENGTH); }))) {
            mixin(enumMixinStr_IDEA_KEY_LENGTH);
        }
    }




    static if(!is(typeof(IDEA_BLOCK))) {
        private enum enumMixinStr_IDEA_BLOCK = `enum IDEA_BLOCK = 8;`;
        static if(is(typeof({ mixin(enumMixinStr_IDEA_BLOCK); }))) {
            mixin(enumMixinStr_IDEA_BLOCK);
        }
    }




    static if(!is(typeof(IDEA_DECRYPT))) {
        private enum enumMixinStr_IDEA_DECRYPT = `enum IDEA_DECRYPT = 0;`;
        static if(is(typeof({ mixin(enumMixinStr_IDEA_DECRYPT); }))) {
            mixin(enumMixinStr_IDEA_DECRYPT);
        }
    }




    static if(!is(typeof(IDEA_ENCRYPT))) {
        private enum enumMixinStr_IDEA_ENCRYPT = `enum IDEA_ENCRYPT = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_IDEA_ENCRYPT); }))) {
            mixin(enumMixinStr_IDEA_ENCRYPT);
        }
    }






    static if(!is(typeof(HMAC_MAX_MD_CBLOCK))) {
        private enum enumMixinStr_HMAC_MAX_MD_CBLOCK = `enum HMAC_MAX_MD_CBLOCK = 128;`;
        static if(is(typeof({ mixin(enumMixinStr_HMAC_MAX_MD_CBLOCK); }))) {
            mixin(enumMixinStr_HMAC_MAX_MD_CBLOCK);
        }
    }
    static if(!is(typeof(ERR_R_PASSED_INVALID_ARGUMENT))) {
        private enum enumMixinStr_ERR_R_PASSED_INVALID_ARGUMENT = `enum ERR_R_PASSED_INVALID_ARGUMENT = ( 7 );`;
        static if(is(typeof({ mixin(enumMixinStr_ERR_R_PASSED_INVALID_ARGUMENT); }))) {
            mixin(enumMixinStr_ERR_R_PASSED_INVALID_ARGUMENT);
        }
    }




    static if(!is(typeof(ERR_R_INIT_FAIL))) {
        private enum enumMixinStr_ERR_R_INIT_FAIL = `enum ERR_R_INIT_FAIL = ( 6 | ERR_R_FATAL );`;
        static if(is(typeof({ mixin(enumMixinStr_ERR_R_INIT_FAIL); }))) {
            mixin(enumMixinStr_ERR_R_INIT_FAIL);
        }
    }




    static if(!is(typeof(ERR_R_DISABLED))) {
        private enum enumMixinStr_ERR_R_DISABLED = `enum ERR_R_DISABLED = ( 5 | ERR_R_FATAL );`;
        static if(is(typeof({ mixin(enumMixinStr_ERR_R_DISABLED); }))) {
            mixin(enumMixinStr_ERR_R_DISABLED);
        }
    }




    static if(!is(typeof(ERR_R_INTERNAL_ERROR))) {
        private enum enumMixinStr_ERR_R_INTERNAL_ERROR = `enum ERR_R_INTERNAL_ERROR = ( 4 | ERR_R_FATAL );`;
        static if(is(typeof({ mixin(enumMixinStr_ERR_R_INTERNAL_ERROR); }))) {
            mixin(enumMixinStr_ERR_R_INTERNAL_ERROR);
        }
    }




    static if(!is(typeof(ERR_R_PASSED_NULL_PARAMETER))) {
        private enum enumMixinStr_ERR_R_PASSED_NULL_PARAMETER = `enum ERR_R_PASSED_NULL_PARAMETER = ( 3 | ERR_R_FATAL );`;
        static if(is(typeof({ mixin(enumMixinStr_ERR_R_PASSED_NULL_PARAMETER); }))) {
            mixin(enumMixinStr_ERR_R_PASSED_NULL_PARAMETER);
        }
    }




    static if(!is(typeof(ERR_R_SHOULD_NOT_HAVE_BEEN_CALLED))) {
        private enum enumMixinStr_ERR_R_SHOULD_NOT_HAVE_BEEN_CALLED = `enum ERR_R_SHOULD_NOT_HAVE_BEEN_CALLED = ( 2 | ERR_R_FATAL );`;
        static if(is(typeof({ mixin(enumMixinStr_ERR_R_SHOULD_NOT_HAVE_BEEN_CALLED); }))) {
            mixin(enumMixinStr_ERR_R_SHOULD_NOT_HAVE_BEEN_CALLED);
        }
    }




    static if(!is(typeof(ERR_R_MALLOC_FAILURE))) {
        private enum enumMixinStr_ERR_R_MALLOC_FAILURE = `enum ERR_R_MALLOC_FAILURE = ( 1 | ERR_R_FATAL );`;
        static if(is(typeof({ mixin(enumMixinStr_ERR_R_MALLOC_FAILURE); }))) {
            mixin(enumMixinStr_ERR_R_MALLOC_FAILURE);
        }
    }




    static if(!is(typeof(ERR_R_FATAL))) {
        private enum enumMixinStr_ERR_R_FATAL = `enum ERR_R_FATAL = 64;`;
        static if(is(typeof({ mixin(enumMixinStr_ERR_R_FATAL); }))) {
            mixin(enumMixinStr_ERR_R_FATAL);
        }
    }




    static if(!is(typeof(ERR_R_MISSING_ASN1_EOS))) {
        private enum enumMixinStr_ERR_R_MISSING_ASN1_EOS = `enum ERR_R_MISSING_ASN1_EOS = 63;`;
        static if(is(typeof({ mixin(enumMixinStr_ERR_R_MISSING_ASN1_EOS); }))) {
            mixin(enumMixinStr_ERR_R_MISSING_ASN1_EOS);
        }
    }




    static if(!is(typeof(ERR_R_NESTED_ASN1_ERROR))) {
        private enum enumMixinStr_ERR_R_NESTED_ASN1_ERROR = `enum ERR_R_NESTED_ASN1_ERROR = 58;`;
        static if(is(typeof({ mixin(enumMixinStr_ERR_R_NESTED_ASN1_ERROR); }))) {
            mixin(enumMixinStr_ERR_R_NESTED_ASN1_ERROR);
        }
    }




    static if(!is(typeof(ERR_R_ECDSA_LIB))) {
        private enum enumMixinStr_ERR_R_ECDSA_LIB = `enum ERR_R_ECDSA_LIB = ERR_LIB_ECDSA;`;
        static if(is(typeof({ mixin(enumMixinStr_ERR_R_ECDSA_LIB); }))) {
            mixin(enumMixinStr_ERR_R_ECDSA_LIB);
        }
    }




    static if(!is(typeof(ERR_R_ENGINE_LIB))) {
        private enum enumMixinStr_ERR_R_ENGINE_LIB = `enum ERR_R_ENGINE_LIB = ERR_LIB_ENGINE;`;
        static if(is(typeof({ mixin(enumMixinStr_ERR_R_ENGINE_LIB); }))) {
            mixin(enumMixinStr_ERR_R_ENGINE_LIB);
        }
    }




    static if(!is(typeof(ERR_R_X509V3_LIB))) {
        private enum enumMixinStr_ERR_R_X509V3_LIB = `enum ERR_R_X509V3_LIB = ERR_LIB_X509V3;`;
        static if(is(typeof({ mixin(enumMixinStr_ERR_R_X509V3_LIB); }))) {
            mixin(enumMixinStr_ERR_R_X509V3_LIB);
        }
    }




    static if(!is(typeof(ERR_R_PKCS7_LIB))) {
        private enum enumMixinStr_ERR_R_PKCS7_LIB = `enum ERR_R_PKCS7_LIB = ERR_LIB_PKCS7;`;
        static if(is(typeof({ mixin(enumMixinStr_ERR_R_PKCS7_LIB); }))) {
            mixin(enumMixinStr_ERR_R_PKCS7_LIB);
        }
    }




    static if(!is(typeof(ERR_R_BIO_LIB))) {
        private enum enumMixinStr_ERR_R_BIO_LIB = `enum ERR_R_BIO_LIB = ERR_LIB_BIO;`;
        static if(is(typeof({ mixin(enumMixinStr_ERR_R_BIO_LIB); }))) {
            mixin(enumMixinStr_ERR_R_BIO_LIB);
        }
    }




    static if(!is(typeof(ERR_R_EC_LIB))) {
        private enum enumMixinStr_ERR_R_EC_LIB = `enum ERR_R_EC_LIB = ERR_LIB_EC;`;
        static if(is(typeof({ mixin(enumMixinStr_ERR_R_EC_LIB); }))) {
            mixin(enumMixinStr_ERR_R_EC_LIB);
        }
    }




    static if(!is(typeof(ERR_R_ASN1_LIB))) {
        private enum enumMixinStr_ERR_R_ASN1_LIB = `enum ERR_R_ASN1_LIB = ERR_LIB_ASN1;`;
        static if(is(typeof({ mixin(enumMixinStr_ERR_R_ASN1_LIB); }))) {
            mixin(enumMixinStr_ERR_R_ASN1_LIB);
        }
    }




    static if(!is(typeof(ERR_R_X509_LIB))) {
        private enum enumMixinStr_ERR_R_X509_LIB = `enum ERR_R_X509_LIB = ERR_LIB_X509;`;
        static if(is(typeof({ mixin(enumMixinStr_ERR_R_X509_LIB); }))) {
            mixin(enumMixinStr_ERR_R_X509_LIB);
        }
    }




    static if(!is(typeof(ERR_R_DSA_LIB))) {
        private enum enumMixinStr_ERR_R_DSA_LIB = `enum ERR_R_DSA_LIB = ERR_LIB_DSA;`;
        static if(is(typeof({ mixin(enumMixinStr_ERR_R_DSA_LIB); }))) {
            mixin(enumMixinStr_ERR_R_DSA_LIB);
        }
    }




    static if(!is(typeof(ERR_R_PEM_LIB))) {
        private enum enumMixinStr_ERR_R_PEM_LIB = `enum ERR_R_PEM_LIB = ERR_LIB_PEM;`;
        static if(is(typeof({ mixin(enumMixinStr_ERR_R_PEM_LIB); }))) {
            mixin(enumMixinStr_ERR_R_PEM_LIB);
        }
    }




    static if(!is(typeof(ERR_R_OBJ_LIB))) {
        private enum enumMixinStr_ERR_R_OBJ_LIB = `enum ERR_R_OBJ_LIB = ERR_LIB_OBJ;`;
        static if(is(typeof({ mixin(enumMixinStr_ERR_R_OBJ_LIB); }))) {
            mixin(enumMixinStr_ERR_R_OBJ_LIB);
        }
    }




    static if(!is(typeof(ERR_R_BUF_LIB))) {
        private enum enumMixinStr_ERR_R_BUF_LIB = `enum ERR_R_BUF_LIB = ERR_LIB_BUF;`;
        static if(is(typeof({ mixin(enumMixinStr_ERR_R_BUF_LIB); }))) {
            mixin(enumMixinStr_ERR_R_BUF_LIB);
        }
    }




    static if(!is(typeof(ERR_R_EVP_LIB))) {
        private enum enumMixinStr_ERR_R_EVP_LIB = `enum ERR_R_EVP_LIB = ERR_LIB_EVP;`;
        static if(is(typeof({ mixin(enumMixinStr_ERR_R_EVP_LIB); }))) {
            mixin(enumMixinStr_ERR_R_EVP_LIB);
        }
    }




    static if(!is(typeof(ERR_R_DH_LIB))) {
        private enum enumMixinStr_ERR_R_DH_LIB = `enum ERR_R_DH_LIB = ERR_LIB_DH;`;
        static if(is(typeof({ mixin(enumMixinStr_ERR_R_DH_LIB); }))) {
            mixin(enumMixinStr_ERR_R_DH_LIB);
        }
    }




    static if(!is(typeof(ERR_R_RSA_LIB))) {
        private enum enumMixinStr_ERR_R_RSA_LIB = `enum ERR_R_RSA_LIB = ERR_LIB_RSA;`;
        static if(is(typeof({ mixin(enumMixinStr_ERR_R_RSA_LIB); }))) {
            mixin(enumMixinStr_ERR_R_RSA_LIB);
        }
    }




    static if(!is(typeof(ERR_R_BN_LIB))) {
        private enum enumMixinStr_ERR_R_BN_LIB = `enum ERR_R_BN_LIB = ERR_LIB_BN;`;
        static if(is(typeof({ mixin(enumMixinStr_ERR_R_BN_LIB); }))) {
            mixin(enumMixinStr_ERR_R_BN_LIB);
        }
    }




    static if(!is(typeof(ERR_R_SYS_LIB))) {
        private enum enumMixinStr_ERR_R_SYS_LIB = `enum ERR_R_SYS_LIB = ERR_LIB_SYS;`;
        static if(is(typeof({ mixin(enumMixinStr_ERR_R_SYS_LIB); }))) {
            mixin(enumMixinStr_ERR_R_SYS_LIB);
        }
    }




    static if(!is(typeof(SYS_F_GETHOSTBYNAME))) {
        private enum enumMixinStr_SYS_F_GETHOSTBYNAME = `enum SYS_F_GETHOSTBYNAME = 17;`;
        static if(is(typeof({ mixin(enumMixinStr_SYS_F_GETHOSTBYNAME); }))) {
            mixin(enumMixinStr_SYS_F_GETHOSTBYNAME);
        }
    }




    static if(!is(typeof(SYS_F_GETSOCKNAME))) {
        private enum enumMixinStr_SYS_F_GETSOCKNAME = `enum SYS_F_GETSOCKNAME = 16;`;
        static if(is(typeof({ mixin(enumMixinStr_SYS_F_GETSOCKNAME); }))) {
            mixin(enumMixinStr_SYS_F_GETSOCKNAME);
        }
    }




    static if(!is(typeof(SYS_F_GETSOCKOPT))) {
        private enum enumMixinStr_SYS_F_GETSOCKOPT = `enum SYS_F_GETSOCKOPT = 15;`;
        static if(is(typeof({ mixin(enumMixinStr_SYS_F_GETSOCKOPT); }))) {
            mixin(enumMixinStr_SYS_F_GETSOCKOPT);
        }
    }




    static if(!is(typeof(SYS_F_SETSOCKOPT))) {
        private enum enumMixinStr_SYS_F_SETSOCKOPT = `enum SYS_F_SETSOCKOPT = 14;`;
        static if(is(typeof({ mixin(enumMixinStr_SYS_F_SETSOCKOPT); }))) {
            mixin(enumMixinStr_SYS_F_SETSOCKOPT);
        }
    }




    static if(!is(typeof(SYS_F_GETNAMEINFO))) {
        private enum enumMixinStr_SYS_F_GETNAMEINFO = `enum SYS_F_GETNAMEINFO = 13;`;
        static if(is(typeof({ mixin(enumMixinStr_SYS_F_GETNAMEINFO); }))) {
            mixin(enumMixinStr_SYS_F_GETNAMEINFO);
        }
    }




    static if(!is(typeof(SYS_F_GETADDRINFO))) {
        private enum enumMixinStr_SYS_F_GETADDRINFO = `enum SYS_F_GETADDRINFO = 12;`;
        static if(is(typeof({ mixin(enumMixinStr_SYS_F_GETADDRINFO); }))) {
            mixin(enumMixinStr_SYS_F_GETADDRINFO);
        }
    }




    static if(!is(typeof(SYS_F_FREAD))) {
        private enum enumMixinStr_SYS_F_FREAD = `enum SYS_F_FREAD = 11;`;
        static if(is(typeof({ mixin(enumMixinStr_SYS_F_FREAD); }))) {
            mixin(enumMixinStr_SYS_F_FREAD);
        }
    }




    static if(!is(typeof(SYS_F_OPENDIR))) {
        private enum enumMixinStr_SYS_F_OPENDIR = `enum SYS_F_OPENDIR = 10;`;
        static if(is(typeof({ mixin(enumMixinStr_SYS_F_OPENDIR); }))) {
            mixin(enumMixinStr_SYS_F_OPENDIR);
        }
    }




    static if(!is(typeof(SYS_F_WSASTARTUP))) {
        private enum enumMixinStr_SYS_F_WSASTARTUP = `enum SYS_F_WSASTARTUP = 9;`;
        static if(is(typeof({ mixin(enumMixinStr_SYS_F_WSASTARTUP); }))) {
            mixin(enumMixinStr_SYS_F_WSASTARTUP);
        }
    }




    static if(!is(typeof(SYS_F_ACCEPT))) {
        private enum enumMixinStr_SYS_F_ACCEPT = `enum SYS_F_ACCEPT = 8;`;
        static if(is(typeof({ mixin(enumMixinStr_SYS_F_ACCEPT); }))) {
            mixin(enumMixinStr_SYS_F_ACCEPT);
        }
    }




    static if(!is(typeof(SYS_F_LISTEN))) {
        private enum enumMixinStr_SYS_F_LISTEN = `enum SYS_F_LISTEN = 7;`;
        static if(is(typeof({ mixin(enumMixinStr_SYS_F_LISTEN); }))) {
            mixin(enumMixinStr_SYS_F_LISTEN);
        }
    }




    static if(!is(typeof(SYS_F_BIND))) {
        private enum enumMixinStr_SYS_F_BIND = `enum SYS_F_BIND = 6;`;
        static if(is(typeof({ mixin(enumMixinStr_SYS_F_BIND); }))) {
            mixin(enumMixinStr_SYS_F_BIND);
        }
    }




    static if(!is(typeof(SYS_F_IOCTLSOCKET))) {
        private enum enumMixinStr_SYS_F_IOCTLSOCKET = `enum SYS_F_IOCTLSOCKET = 5;`;
        static if(is(typeof({ mixin(enumMixinStr_SYS_F_IOCTLSOCKET); }))) {
            mixin(enumMixinStr_SYS_F_IOCTLSOCKET);
        }
    }




    static if(!is(typeof(SYS_F_SOCKET))) {
        private enum enumMixinStr_SYS_F_SOCKET = `enum SYS_F_SOCKET = 4;`;
        static if(is(typeof({ mixin(enumMixinStr_SYS_F_SOCKET); }))) {
            mixin(enumMixinStr_SYS_F_SOCKET);
        }
    }




    static if(!is(typeof(SYS_F_GETSERVBYNAME))) {
        private enum enumMixinStr_SYS_F_GETSERVBYNAME = `enum SYS_F_GETSERVBYNAME = 3;`;
        static if(is(typeof({ mixin(enumMixinStr_SYS_F_GETSERVBYNAME); }))) {
            mixin(enumMixinStr_SYS_F_GETSERVBYNAME);
        }
    }




    static if(!is(typeof(SYS_F_CONNECT))) {
        private enum enumMixinStr_SYS_F_CONNECT = `enum SYS_F_CONNECT = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_SYS_F_CONNECT); }))) {
            mixin(enumMixinStr_SYS_F_CONNECT);
        }
    }




    static if(!is(typeof(SYS_F_FOPEN))) {
        private enum enumMixinStr_SYS_F_FOPEN = `enum SYS_F_FOPEN = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_SYS_F_FOPEN); }))) {
            mixin(enumMixinStr_SYS_F_FOPEN);
        }
    }
    static if(!is(typeof(ERR_LIB_USER))) {
        private enum enumMixinStr_ERR_LIB_USER = `enum ERR_LIB_USER = 128;`;
        static if(is(typeof({ mixin(enumMixinStr_ERR_LIB_USER); }))) {
            mixin(enumMixinStr_ERR_LIB_USER);
        }
    }




    static if(!is(typeof(ERR_LIB_KDF))) {
        private enum enumMixinStr_ERR_LIB_KDF = `enum ERR_LIB_KDF = 52;`;
        static if(is(typeof({ mixin(enumMixinStr_ERR_LIB_KDF); }))) {
            mixin(enumMixinStr_ERR_LIB_KDF);
        }
    }




    static if(!is(typeof(ERR_LIB_ASYNC))) {
        private enum enumMixinStr_ERR_LIB_ASYNC = `enum ERR_LIB_ASYNC = 51;`;
        static if(is(typeof({ mixin(enumMixinStr_ERR_LIB_ASYNC); }))) {
            mixin(enumMixinStr_ERR_LIB_ASYNC);
        }
    }




    static if(!is(typeof(ERR_LIB_CT))) {
        private enum enumMixinStr_ERR_LIB_CT = `enum ERR_LIB_CT = 50;`;
        static if(is(typeof({ mixin(enumMixinStr_ERR_LIB_CT); }))) {
            mixin(enumMixinStr_ERR_LIB_CT);
        }
    }




    static if(!is(typeof(ERR_LIB_JPAKE))) {
        private enum enumMixinStr_ERR_LIB_JPAKE = `enum ERR_LIB_JPAKE = 49;`;
        static if(is(typeof({ mixin(enumMixinStr_ERR_LIB_JPAKE); }))) {
            mixin(enumMixinStr_ERR_LIB_JPAKE);
        }
    }




    static if(!is(typeof(ERR_LIB_HMAC))) {
        private enum enumMixinStr_ERR_LIB_HMAC = `enum ERR_LIB_HMAC = 48;`;
        static if(is(typeof({ mixin(enumMixinStr_ERR_LIB_HMAC); }))) {
            mixin(enumMixinStr_ERR_LIB_HMAC);
        }
    }




    static if(!is(typeof(ERR_LIB_TS))) {
        private enum enumMixinStr_ERR_LIB_TS = `enum ERR_LIB_TS = 47;`;
        static if(is(typeof({ mixin(enumMixinStr_ERR_LIB_TS); }))) {
            mixin(enumMixinStr_ERR_LIB_TS);
        }
    }




    static if(!is(typeof(ERR_LIB_CMS))) {
        private enum enumMixinStr_ERR_LIB_CMS = `enum ERR_LIB_CMS = 46;`;
        static if(is(typeof({ mixin(enumMixinStr_ERR_LIB_CMS); }))) {
            mixin(enumMixinStr_ERR_LIB_CMS);
        }
    }




    static if(!is(typeof(ERR_LIB_FIPS))) {
        private enum enumMixinStr_ERR_LIB_FIPS = `enum ERR_LIB_FIPS = 45;`;
        static if(is(typeof({ mixin(enumMixinStr_ERR_LIB_FIPS); }))) {
            mixin(enumMixinStr_ERR_LIB_FIPS);
        }
    }




    static if(!is(typeof(ERR_LIB_STORE))) {
        private enum enumMixinStr_ERR_LIB_STORE = `enum ERR_LIB_STORE = 44;`;
        static if(is(typeof({ mixin(enumMixinStr_ERR_LIB_STORE); }))) {
            mixin(enumMixinStr_ERR_LIB_STORE);
        }
    }




    static if(!is(typeof(ERR_LIB_ECDH))) {
        private enum enumMixinStr_ERR_LIB_ECDH = `enum ERR_LIB_ECDH = 43;`;
        static if(is(typeof({ mixin(enumMixinStr_ERR_LIB_ECDH); }))) {
            mixin(enumMixinStr_ERR_LIB_ECDH);
        }
    }




    static if(!is(typeof(ERR_LIB_ECDSA))) {
        private enum enumMixinStr_ERR_LIB_ECDSA = `enum ERR_LIB_ECDSA = 42;`;
        static if(is(typeof({ mixin(enumMixinStr_ERR_LIB_ECDSA); }))) {
            mixin(enumMixinStr_ERR_LIB_ECDSA);
        }
    }




    static if(!is(typeof(ERR_LIB_COMP))) {
        private enum enumMixinStr_ERR_LIB_COMP = `enum ERR_LIB_COMP = 41;`;
        static if(is(typeof({ mixin(enumMixinStr_ERR_LIB_COMP); }))) {
            mixin(enumMixinStr_ERR_LIB_COMP);
        }
    }




    static if(!is(typeof(ERR_LIB_UI))) {
        private enum enumMixinStr_ERR_LIB_UI = `enum ERR_LIB_UI = 40;`;
        static if(is(typeof({ mixin(enumMixinStr_ERR_LIB_UI); }))) {
            mixin(enumMixinStr_ERR_LIB_UI);
        }
    }




    static if(!is(typeof(ERR_LIB_OCSP))) {
        private enum enumMixinStr_ERR_LIB_OCSP = `enum ERR_LIB_OCSP = 39;`;
        static if(is(typeof({ mixin(enumMixinStr_ERR_LIB_OCSP); }))) {
            mixin(enumMixinStr_ERR_LIB_OCSP);
        }
    }




    static if(!is(typeof(ERR_LIB_ENGINE))) {
        private enum enumMixinStr_ERR_LIB_ENGINE = `enum ERR_LIB_ENGINE = 38;`;
        static if(is(typeof({ mixin(enumMixinStr_ERR_LIB_ENGINE); }))) {
            mixin(enumMixinStr_ERR_LIB_ENGINE);
        }
    }




    static if(!is(typeof(ERR_LIB_DSO))) {
        private enum enumMixinStr_ERR_LIB_DSO = `enum ERR_LIB_DSO = 37;`;
        static if(is(typeof({ mixin(enumMixinStr_ERR_LIB_DSO); }))) {
            mixin(enumMixinStr_ERR_LIB_DSO);
        }
    }




    static if(!is(typeof(ERR_LIB_RAND))) {
        private enum enumMixinStr_ERR_LIB_RAND = `enum ERR_LIB_RAND = 36;`;
        static if(is(typeof({ mixin(enumMixinStr_ERR_LIB_RAND); }))) {
            mixin(enumMixinStr_ERR_LIB_RAND);
        }
    }




    static if(!is(typeof(ERR_LIB_PKCS12))) {
        private enum enumMixinStr_ERR_LIB_PKCS12 = `enum ERR_LIB_PKCS12 = 35;`;
        static if(is(typeof({ mixin(enumMixinStr_ERR_LIB_PKCS12); }))) {
            mixin(enumMixinStr_ERR_LIB_PKCS12);
        }
    }




    static if(!is(typeof(ERR_LIB_X509V3))) {
        private enum enumMixinStr_ERR_LIB_X509V3 = `enum ERR_LIB_X509V3 = 34;`;
        static if(is(typeof({ mixin(enumMixinStr_ERR_LIB_X509V3); }))) {
            mixin(enumMixinStr_ERR_LIB_X509V3);
        }
    }




    static if(!is(typeof(ERR_LIB_PKCS7))) {
        private enum enumMixinStr_ERR_LIB_PKCS7 = `enum ERR_LIB_PKCS7 = 33;`;
        static if(is(typeof({ mixin(enumMixinStr_ERR_LIB_PKCS7); }))) {
            mixin(enumMixinStr_ERR_LIB_PKCS7);
        }
    }




    static if(!is(typeof(ERR_LIB_BIO))) {
        private enum enumMixinStr_ERR_LIB_BIO = `enum ERR_LIB_BIO = 32;`;
        static if(is(typeof({ mixin(enumMixinStr_ERR_LIB_BIO); }))) {
            mixin(enumMixinStr_ERR_LIB_BIO);
        }
    }




    static if(!is(typeof(ERR_LIB_SSL))) {
        private enum enumMixinStr_ERR_LIB_SSL = `enum ERR_LIB_SSL = 20;`;
        static if(is(typeof({ mixin(enumMixinStr_ERR_LIB_SSL); }))) {
            mixin(enumMixinStr_ERR_LIB_SSL);
        }
    }




    static if(!is(typeof(ERR_LIB_EC))) {
        private enum enumMixinStr_ERR_LIB_EC = `enum ERR_LIB_EC = 16;`;
        static if(is(typeof({ mixin(enumMixinStr_ERR_LIB_EC); }))) {
            mixin(enumMixinStr_ERR_LIB_EC);
        }
    }




    static if(!is(typeof(ERR_LIB_CRYPTO))) {
        private enum enumMixinStr_ERR_LIB_CRYPTO = `enum ERR_LIB_CRYPTO = 15;`;
        static if(is(typeof({ mixin(enumMixinStr_ERR_LIB_CRYPTO); }))) {
            mixin(enumMixinStr_ERR_LIB_CRYPTO);
        }
    }




    static if(!is(typeof(ERR_LIB_CONF))) {
        private enum enumMixinStr_ERR_LIB_CONF = `enum ERR_LIB_CONF = 14;`;
        static if(is(typeof({ mixin(enumMixinStr_ERR_LIB_CONF); }))) {
            mixin(enumMixinStr_ERR_LIB_CONF);
        }
    }




    static if(!is(typeof(ERR_LIB_ASN1))) {
        private enum enumMixinStr_ERR_LIB_ASN1 = `enum ERR_LIB_ASN1 = 13;`;
        static if(is(typeof({ mixin(enumMixinStr_ERR_LIB_ASN1); }))) {
            mixin(enumMixinStr_ERR_LIB_ASN1);
        }
    }




    static if(!is(typeof(ERR_LIB_X509))) {
        private enum enumMixinStr_ERR_LIB_X509 = `enum ERR_LIB_X509 = 11;`;
        static if(is(typeof({ mixin(enumMixinStr_ERR_LIB_X509); }))) {
            mixin(enumMixinStr_ERR_LIB_X509);
        }
    }




    static if(!is(typeof(ERR_LIB_DSA))) {
        private enum enumMixinStr_ERR_LIB_DSA = `enum ERR_LIB_DSA = 10;`;
        static if(is(typeof({ mixin(enumMixinStr_ERR_LIB_DSA); }))) {
            mixin(enumMixinStr_ERR_LIB_DSA);
        }
    }




    static if(!is(typeof(ERR_LIB_PEM))) {
        private enum enumMixinStr_ERR_LIB_PEM = `enum ERR_LIB_PEM = 9;`;
        static if(is(typeof({ mixin(enumMixinStr_ERR_LIB_PEM); }))) {
            mixin(enumMixinStr_ERR_LIB_PEM);
        }
    }




    static if(!is(typeof(ERR_LIB_OBJ))) {
        private enum enumMixinStr_ERR_LIB_OBJ = `enum ERR_LIB_OBJ = 8;`;
        static if(is(typeof({ mixin(enumMixinStr_ERR_LIB_OBJ); }))) {
            mixin(enumMixinStr_ERR_LIB_OBJ);
        }
    }




    static if(!is(typeof(ERR_LIB_BUF))) {
        private enum enumMixinStr_ERR_LIB_BUF = `enum ERR_LIB_BUF = 7;`;
        static if(is(typeof({ mixin(enumMixinStr_ERR_LIB_BUF); }))) {
            mixin(enumMixinStr_ERR_LIB_BUF);
        }
    }




    static if(!is(typeof(ERR_LIB_EVP))) {
        private enum enumMixinStr_ERR_LIB_EVP = `enum ERR_LIB_EVP = 6;`;
        static if(is(typeof({ mixin(enumMixinStr_ERR_LIB_EVP); }))) {
            mixin(enumMixinStr_ERR_LIB_EVP);
        }
    }




    static if(!is(typeof(ERR_LIB_DH))) {
        private enum enumMixinStr_ERR_LIB_DH = `enum ERR_LIB_DH = 5;`;
        static if(is(typeof({ mixin(enumMixinStr_ERR_LIB_DH); }))) {
            mixin(enumMixinStr_ERR_LIB_DH);
        }
    }




    static if(!is(typeof(ERR_LIB_RSA))) {
        private enum enumMixinStr_ERR_LIB_RSA = `enum ERR_LIB_RSA = 4;`;
        static if(is(typeof({ mixin(enumMixinStr_ERR_LIB_RSA); }))) {
            mixin(enumMixinStr_ERR_LIB_RSA);
        }
    }




    static if(!is(typeof(ERR_LIB_BN))) {
        private enum enumMixinStr_ERR_LIB_BN = `enum ERR_LIB_BN = 3;`;
        static if(is(typeof({ mixin(enumMixinStr_ERR_LIB_BN); }))) {
            mixin(enumMixinStr_ERR_LIB_BN);
        }
    }




    static if(!is(typeof(ERR_LIB_SYS))) {
        private enum enumMixinStr_ERR_LIB_SYS = `enum ERR_LIB_SYS = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_ERR_LIB_SYS); }))) {
            mixin(enumMixinStr_ERR_LIB_SYS);
        }
    }




    static if(!is(typeof(ERR_LIB_NONE))) {
        private enum enumMixinStr_ERR_LIB_NONE = `enum ERR_LIB_NONE = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_ERR_LIB_NONE); }))) {
            mixin(enumMixinStr_ERR_LIB_NONE);
        }
    }




    static if(!is(typeof(ERR_NUM_ERRORS))) {
        private enum enumMixinStr_ERR_NUM_ERRORS = `enum ERR_NUM_ERRORS = 16;`;
        static if(is(typeof({ mixin(enumMixinStr_ERR_NUM_ERRORS); }))) {
            mixin(enumMixinStr_ERR_NUM_ERRORS);
        }
    }




    static if(!is(typeof(ERR_FLAG_MARK))) {
        private enum enumMixinStr_ERR_FLAG_MARK = `enum ERR_FLAG_MARK = 0x01;`;
        static if(is(typeof({ mixin(enumMixinStr_ERR_FLAG_MARK); }))) {
            mixin(enumMixinStr_ERR_FLAG_MARK);
        }
    }




    static if(!is(typeof(ERR_TXT_STRING))) {
        private enum enumMixinStr_ERR_TXT_STRING = `enum ERR_TXT_STRING = 0x02;`;
        static if(is(typeof({ mixin(enumMixinStr_ERR_TXT_STRING); }))) {
            mixin(enumMixinStr_ERR_TXT_STRING);
        }
    }




    static if(!is(typeof(ERR_TXT_MALLOCED))) {
        private enum enumMixinStr_ERR_TXT_MALLOCED = `enum ERR_TXT_MALLOCED = 0x01;`;
        static if(is(typeof({ mixin(enumMixinStr_ERR_TXT_MALLOCED); }))) {
            mixin(enumMixinStr_ERR_TXT_MALLOCED);
        }
    }
    static if(!is(typeof(ENGINE_R_VERSION_INCOMPATIBILITY))) {
        private enum enumMixinStr_ENGINE_R_VERSION_INCOMPATIBILITY = `enum ENGINE_R_VERSION_INCOMPATIBILITY = 145;`;
        static if(is(typeof({ mixin(enumMixinStr_ENGINE_R_VERSION_INCOMPATIBILITY); }))) {
            mixin(enumMixinStr_ENGINE_R_VERSION_INCOMPATIBILITY);
        }
    }




    static if(!is(typeof(ENGINE_R_UNIMPLEMENTED_PUBLIC_KEY_METHOD))) {
        private enum enumMixinStr_ENGINE_R_UNIMPLEMENTED_PUBLIC_KEY_METHOD = `enum ENGINE_R_UNIMPLEMENTED_PUBLIC_KEY_METHOD = 101;`;
        static if(is(typeof({ mixin(enumMixinStr_ENGINE_R_UNIMPLEMENTED_PUBLIC_KEY_METHOD); }))) {
            mixin(enumMixinStr_ENGINE_R_UNIMPLEMENTED_PUBLIC_KEY_METHOD);
        }
    }




    static if(!is(typeof(ENGINE_R_UNIMPLEMENTED_DIGEST))) {
        private enum enumMixinStr_ENGINE_R_UNIMPLEMENTED_DIGEST = `enum ENGINE_R_UNIMPLEMENTED_DIGEST = 147;`;
        static if(is(typeof({ mixin(enumMixinStr_ENGINE_R_UNIMPLEMENTED_DIGEST); }))) {
            mixin(enumMixinStr_ENGINE_R_UNIMPLEMENTED_DIGEST);
        }
    }




    static if(!is(typeof(ENGINE_R_UNIMPLEMENTED_CIPHER))) {
        private enum enumMixinStr_ENGINE_R_UNIMPLEMENTED_CIPHER = `enum ENGINE_R_UNIMPLEMENTED_CIPHER = 146;`;
        static if(is(typeof({ mixin(enumMixinStr_ENGINE_R_UNIMPLEMENTED_CIPHER); }))) {
            mixin(enumMixinStr_ENGINE_R_UNIMPLEMENTED_CIPHER);
        }
    }




    static if(!is(typeof(ENGINE_R_NO_SUCH_ENGINE))) {
        private enum enumMixinStr_ENGINE_R_NO_SUCH_ENGINE = `enum ENGINE_R_NO_SUCH_ENGINE = 116;`;
        static if(is(typeof({ mixin(enumMixinStr_ENGINE_R_NO_SUCH_ENGINE); }))) {
            mixin(enumMixinStr_ENGINE_R_NO_SUCH_ENGINE);
        }
    }




    static if(!is(typeof(ENGINE_R_NO_REFERENCE))) {
        private enum enumMixinStr_ENGINE_R_NO_REFERENCE = `enum ENGINE_R_NO_REFERENCE = 130;`;
        static if(is(typeof({ mixin(enumMixinStr_ENGINE_R_NO_REFERENCE); }))) {
            mixin(enumMixinStr_ENGINE_R_NO_REFERENCE);
        }
    }




    static if(!is(typeof(ENGINE_R_NO_LOAD_FUNCTION))) {
        private enum enumMixinStr_ENGINE_R_NO_LOAD_FUNCTION = `enum ENGINE_R_NO_LOAD_FUNCTION = 125;`;
        static if(is(typeof({ mixin(enumMixinStr_ENGINE_R_NO_LOAD_FUNCTION); }))) {
            mixin(enumMixinStr_ENGINE_R_NO_LOAD_FUNCTION);
        }
    }




    static if(!is(typeof(ENGINE_R_NO_INDEX))) {
        private enum enumMixinStr_ENGINE_R_NO_INDEX = `enum ENGINE_R_NO_INDEX = 144;`;
        static if(is(typeof({ mixin(enumMixinStr_ENGINE_R_NO_INDEX); }))) {
            mixin(enumMixinStr_ENGINE_R_NO_INDEX);
        }
    }




    static if(!is(typeof(ENGINE_R_NO_CONTROL_FUNCTION))) {
        private enum enumMixinStr_ENGINE_R_NO_CONTROL_FUNCTION = `enum ENGINE_R_NO_CONTROL_FUNCTION = 120;`;
        static if(is(typeof({ mixin(enumMixinStr_ENGINE_R_NO_CONTROL_FUNCTION); }))) {
            mixin(enumMixinStr_ENGINE_R_NO_CONTROL_FUNCTION);
        }
    }




    static if(!is(typeof(ENGINE_R_NOT_LOADED))) {
        private enum enumMixinStr_ENGINE_R_NOT_LOADED = `enum ENGINE_R_NOT_LOADED = 112;`;
        static if(is(typeof({ mixin(enumMixinStr_ENGINE_R_NOT_LOADED); }))) {
            mixin(enumMixinStr_ENGINE_R_NOT_LOADED);
        }
    }




    static if(!is(typeof(ENGINE_R_NOT_INITIALISED))) {
        private enum enumMixinStr_ENGINE_R_NOT_INITIALISED = `enum ENGINE_R_NOT_INITIALISED = 117;`;
        static if(is(typeof({ mixin(enumMixinStr_ENGINE_R_NOT_INITIALISED); }))) {
            mixin(enumMixinStr_ENGINE_R_NOT_INITIALISED);
        }
    }




    static if(!is(typeof(ENGINE_R_INVALID_STRING))) {
        private enum enumMixinStr_ENGINE_R_INVALID_STRING = `enum ENGINE_R_INVALID_STRING = 150;`;
        static if(is(typeof({ mixin(enumMixinStr_ENGINE_R_INVALID_STRING); }))) {
            mixin(enumMixinStr_ENGINE_R_INVALID_STRING);
        }
    }




    static if(!is(typeof(ENGINE_R_INVALID_INIT_VALUE))) {
        private enum enumMixinStr_ENGINE_R_INVALID_INIT_VALUE = `enum ENGINE_R_INVALID_INIT_VALUE = 151;`;
        static if(is(typeof({ mixin(enumMixinStr_ENGINE_R_INVALID_INIT_VALUE); }))) {
            mixin(enumMixinStr_ENGINE_R_INVALID_INIT_VALUE);
        }
    }




    static if(!is(typeof(ENGINE_R_INVALID_CMD_NUMBER))) {
        private enum enumMixinStr_ENGINE_R_INVALID_CMD_NUMBER = `enum ENGINE_R_INVALID_CMD_NUMBER = 138;`;
        static if(is(typeof({ mixin(enumMixinStr_ENGINE_R_INVALID_CMD_NUMBER); }))) {
            mixin(enumMixinStr_ENGINE_R_INVALID_CMD_NUMBER);
        }
    }




    static if(!is(typeof(ENGINE_R_INVALID_CMD_NAME))) {
        private enum enumMixinStr_ENGINE_R_INVALID_CMD_NAME = `enum ENGINE_R_INVALID_CMD_NAME = 137;`;
        static if(is(typeof({ mixin(enumMixinStr_ENGINE_R_INVALID_CMD_NAME); }))) {
            mixin(enumMixinStr_ENGINE_R_INVALID_CMD_NAME);
        }
    }




    static if(!is(typeof(ENGINE_R_INVALID_ARGUMENT))) {
        private enum enumMixinStr_ENGINE_R_INVALID_ARGUMENT = `enum ENGINE_R_INVALID_ARGUMENT = 143;`;
        static if(is(typeof({ mixin(enumMixinStr_ENGINE_R_INVALID_ARGUMENT); }))) {
            mixin(enumMixinStr_ENGINE_R_INVALID_ARGUMENT);
        }
    }




    static if(!is(typeof(ENGINE_R_INTERNAL_LIST_ERROR))) {
        private enum enumMixinStr_ENGINE_R_INTERNAL_LIST_ERROR = `enum ENGINE_R_INTERNAL_LIST_ERROR = 110;`;
        static if(is(typeof({ mixin(enumMixinStr_ENGINE_R_INTERNAL_LIST_ERROR); }))) {
            mixin(enumMixinStr_ENGINE_R_INTERNAL_LIST_ERROR);
        }
    }




    static if(!is(typeof(ENGINE_R_INIT_FAILED))) {
        private enum enumMixinStr_ENGINE_R_INIT_FAILED = `enum ENGINE_R_INIT_FAILED = 109;`;
        static if(is(typeof({ mixin(enumMixinStr_ENGINE_R_INIT_FAILED); }))) {
            mixin(enumMixinStr_ENGINE_R_INIT_FAILED);
        }
    }




    static if(!is(typeof(ENGINE_R_ID_OR_NAME_MISSING))) {
        private enum enumMixinStr_ENGINE_R_ID_OR_NAME_MISSING = `enum ENGINE_R_ID_OR_NAME_MISSING = 108;`;
        static if(is(typeof({ mixin(enumMixinStr_ENGINE_R_ID_OR_NAME_MISSING); }))) {
            mixin(enumMixinStr_ENGINE_R_ID_OR_NAME_MISSING);
        }
    }




    static if(!is(typeof(ENGINE_R_FINISH_FAILED))) {
        private enum enumMixinStr_ENGINE_R_FINISH_FAILED = `enum ENGINE_R_FINISH_FAILED = 106;`;
        static if(is(typeof({ mixin(enumMixinStr_ENGINE_R_FINISH_FAILED); }))) {
            mixin(enumMixinStr_ENGINE_R_FINISH_FAILED);
        }
    }




    static if(!is(typeof(ENGINE_R_FAILED_LOADING_PUBLIC_KEY))) {
        private enum enumMixinStr_ENGINE_R_FAILED_LOADING_PUBLIC_KEY = `enum ENGINE_R_FAILED_LOADING_PUBLIC_KEY = 129;`;
        static if(is(typeof({ mixin(enumMixinStr_ENGINE_R_FAILED_LOADING_PUBLIC_KEY); }))) {
            mixin(enumMixinStr_ENGINE_R_FAILED_LOADING_PUBLIC_KEY);
        }
    }




    static if(!is(typeof(ENGINE_R_FAILED_LOADING_PRIVATE_KEY))) {
        private enum enumMixinStr_ENGINE_R_FAILED_LOADING_PRIVATE_KEY = `enum ENGINE_R_FAILED_LOADING_PRIVATE_KEY = 128;`;
        static if(is(typeof({ mixin(enumMixinStr_ENGINE_R_FAILED_LOADING_PRIVATE_KEY); }))) {
            mixin(enumMixinStr_ENGINE_R_FAILED_LOADING_PRIVATE_KEY);
        }
    }




    static if(!is(typeof(ENGINE_R_ENGINE_SECTION_ERROR))) {
        private enum enumMixinStr_ENGINE_R_ENGINE_SECTION_ERROR = `enum ENGINE_R_ENGINE_SECTION_ERROR = 149;`;
        static if(is(typeof({ mixin(enumMixinStr_ENGINE_R_ENGINE_SECTION_ERROR); }))) {
            mixin(enumMixinStr_ENGINE_R_ENGINE_SECTION_ERROR);
        }
    }




    static if(!is(typeof(ENGINE_R_ENGINE_IS_NOT_IN_LIST))) {
        private enum enumMixinStr_ENGINE_R_ENGINE_IS_NOT_IN_LIST = `enum ENGINE_R_ENGINE_IS_NOT_IN_LIST = 105;`;
        static if(is(typeof({ mixin(enumMixinStr_ENGINE_R_ENGINE_IS_NOT_IN_LIST); }))) {
            mixin(enumMixinStr_ENGINE_R_ENGINE_IS_NOT_IN_LIST);
        }
    }




    static if(!is(typeof(ENGINE_R_ENGINE_CONFIGURATION_ERROR))) {
        private enum enumMixinStr_ENGINE_R_ENGINE_CONFIGURATION_ERROR = `enum ENGINE_R_ENGINE_CONFIGURATION_ERROR = 102;`;
        static if(is(typeof({ mixin(enumMixinStr_ENGINE_R_ENGINE_CONFIGURATION_ERROR); }))) {
            mixin(enumMixinStr_ENGINE_R_ENGINE_CONFIGURATION_ERROR);
        }
    }




    static if(!is(typeof(ENGINE_R_ENGINES_SECTION_ERROR))) {
        private enum enumMixinStr_ENGINE_R_ENGINES_SECTION_ERROR = `enum ENGINE_R_ENGINES_SECTION_ERROR = 148;`;
        static if(is(typeof({ mixin(enumMixinStr_ENGINE_R_ENGINES_SECTION_ERROR); }))) {
            mixin(enumMixinStr_ENGINE_R_ENGINES_SECTION_ERROR);
        }
    }




    static if(!is(typeof(ENGINE_R_DSO_NOT_FOUND))) {
        private enum enumMixinStr_ENGINE_R_DSO_NOT_FOUND = `enum ENGINE_R_DSO_NOT_FOUND = 132;`;
        static if(is(typeof({ mixin(enumMixinStr_ENGINE_R_DSO_NOT_FOUND); }))) {
            mixin(enumMixinStr_ENGINE_R_DSO_NOT_FOUND);
        }
    }




    static if(!is(typeof(ENGINE_R_DSO_FAILURE))) {
        private enum enumMixinStr_ENGINE_R_DSO_FAILURE = `enum ENGINE_R_DSO_FAILURE = 104;`;
        static if(is(typeof({ mixin(enumMixinStr_ENGINE_R_DSO_FAILURE); }))) {
            mixin(enumMixinStr_ENGINE_R_DSO_FAILURE);
        }
    }




    static if(!is(typeof(ENGINE_R_CTRL_COMMAND_NOT_IMPLEMENTED))) {
        private enum enumMixinStr_ENGINE_R_CTRL_COMMAND_NOT_IMPLEMENTED = `enum ENGINE_R_CTRL_COMMAND_NOT_IMPLEMENTED = 119;`;
        static if(is(typeof({ mixin(enumMixinStr_ENGINE_R_CTRL_COMMAND_NOT_IMPLEMENTED); }))) {
            mixin(enumMixinStr_ENGINE_R_CTRL_COMMAND_NOT_IMPLEMENTED);
        }
    }




    static if(!is(typeof(ENGINE_R_CONFLICTING_ENGINE_ID))) {
        private enum enumMixinStr_ENGINE_R_CONFLICTING_ENGINE_ID = `enum ENGINE_R_CONFLICTING_ENGINE_ID = 103;`;
        static if(is(typeof({ mixin(enumMixinStr_ENGINE_R_CONFLICTING_ENGINE_ID); }))) {
            mixin(enumMixinStr_ENGINE_R_CONFLICTING_ENGINE_ID);
        }
    }




    static if(!is(typeof(ENGINE_R_COMMAND_TAKES_NO_INPUT))) {
        private enum enumMixinStr_ENGINE_R_COMMAND_TAKES_NO_INPUT = `enum ENGINE_R_COMMAND_TAKES_NO_INPUT = 136;`;
        static if(is(typeof({ mixin(enumMixinStr_ENGINE_R_COMMAND_TAKES_NO_INPUT); }))) {
            mixin(enumMixinStr_ENGINE_R_COMMAND_TAKES_NO_INPUT);
        }
    }




    static if(!is(typeof(ENGINE_R_COMMAND_TAKES_INPUT))) {
        private enum enumMixinStr_ENGINE_R_COMMAND_TAKES_INPUT = `enum ENGINE_R_COMMAND_TAKES_INPUT = 135;`;
        static if(is(typeof({ mixin(enumMixinStr_ENGINE_R_COMMAND_TAKES_INPUT); }))) {
            mixin(enumMixinStr_ENGINE_R_COMMAND_TAKES_INPUT);
        }
    }




    static if(!is(typeof(ENGINE_R_CMD_NOT_EXECUTABLE))) {
        private enum enumMixinStr_ENGINE_R_CMD_NOT_EXECUTABLE = `enum ENGINE_R_CMD_NOT_EXECUTABLE = 134;`;
        static if(is(typeof({ mixin(enumMixinStr_ENGINE_R_CMD_NOT_EXECUTABLE); }))) {
            mixin(enumMixinStr_ENGINE_R_CMD_NOT_EXECUTABLE);
        }
    }




    static if(!is(typeof(ENGINE_R_ARGUMENT_IS_NOT_A_NUMBER))) {
        private enum enumMixinStr_ENGINE_R_ARGUMENT_IS_NOT_A_NUMBER = `enum ENGINE_R_ARGUMENT_IS_NOT_A_NUMBER = 133;`;
        static if(is(typeof({ mixin(enumMixinStr_ENGINE_R_ARGUMENT_IS_NOT_A_NUMBER); }))) {
            mixin(enumMixinStr_ENGINE_R_ARGUMENT_IS_NOT_A_NUMBER);
        }
    }




    static if(!is(typeof(ENGINE_R_ALREADY_LOADED))) {
        private enum enumMixinStr_ENGINE_R_ALREADY_LOADED = `enum ENGINE_R_ALREADY_LOADED = 100;`;
        static if(is(typeof({ mixin(enumMixinStr_ENGINE_R_ALREADY_LOADED); }))) {
            mixin(enumMixinStr_ENGINE_R_ALREADY_LOADED);
        }
    }




    static if(!is(typeof(ENGINE_F_INT_ENGINE_MODULE_INIT))) {
        private enum enumMixinStr_ENGINE_F_INT_ENGINE_MODULE_INIT = `enum ENGINE_F_INT_ENGINE_MODULE_INIT = 187;`;
        static if(is(typeof({ mixin(enumMixinStr_ENGINE_F_INT_ENGINE_MODULE_INIT); }))) {
            mixin(enumMixinStr_ENGINE_F_INT_ENGINE_MODULE_INIT);
        }
    }




    static if(!is(typeof(ENGINE_F_INT_ENGINE_CONFIGURE))) {
        private enum enumMixinStr_ENGINE_F_INT_ENGINE_CONFIGURE = `enum ENGINE_F_INT_ENGINE_CONFIGURE = 188;`;
        static if(is(typeof({ mixin(enumMixinStr_ENGINE_F_INT_ENGINE_CONFIGURE); }))) {
            mixin(enumMixinStr_ENGINE_F_INT_ENGINE_CONFIGURE);
        }
    }




    static if(!is(typeof(ENGINE_F_INT_CTRL_HELPER))) {
        private enum enumMixinStr_ENGINE_F_INT_CTRL_HELPER = `enum ENGINE_F_INT_CTRL_HELPER = 172;`;
        static if(is(typeof({ mixin(enumMixinStr_ENGINE_F_INT_CTRL_HELPER); }))) {
            mixin(enumMixinStr_ENGINE_F_INT_CTRL_HELPER);
        }
    }




    static if(!is(typeof(ENGINE_F_ENGINE_UP_REF))) {
        private enum enumMixinStr_ENGINE_F_ENGINE_UP_REF = `enum ENGINE_F_ENGINE_UP_REF = 190;`;
        static if(is(typeof({ mixin(enumMixinStr_ENGINE_F_ENGINE_UP_REF); }))) {
            mixin(enumMixinStr_ENGINE_F_ENGINE_UP_REF);
        }
    }




    static if(!is(typeof(ENGINE_F_ENGINE_UNLOCKED_FINISH))) {
        private enum enumMixinStr_ENGINE_F_ENGINE_UNLOCKED_FINISH = `enum ENGINE_F_ENGINE_UNLOCKED_FINISH = 191;`;
        static if(is(typeof({ mixin(enumMixinStr_ENGINE_F_ENGINE_UNLOCKED_FINISH); }))) {
            mixin(enumMixinStr_ENGINE_F_ENGINE_UNLOCKED_FINISH);
        }
    }




    static if(!is(typeof(ENGINE_F_ENGINE_TABLE_REGISTER))) {
        private enum enumMixinStr_ENGINE_F_ENGINE_TABLE_REGISTER = `enum ENGINE_F_ENGINE_TABLE_REGISTER = 184;`;
        static if(is(typeof({ mixin(enumMixinStr_ENGINE_F_ENGINE_TABLE_REGISTER); }))) {
            mixin(enumMixinStr_ENGINE_F_ENGINE_TABLE_REGISTER);
        }
    }




    static if(!is(typeof(ENGINE_F_ENGINE_SET_NAME))) {
        private enum enumMixinStr_ENGINE_F_ENGINE_SET_NAME = `enum ENGINE_F_ENGINE_SET_NAME = 130;`;
        static if(is(typeof({ mixin(enumMixinStr_ENGINE_F_ENGINE_SET_NAME); }))) {
            mixin(enumMixinStr_ENGINE_F_ENGINE_SET_NAME);
        }
    }




    static if(!is(typeof(ENGINE_F_ENGINE_SET_ID))) {
        private enum enumMixinStr_ENGINE_F_ENGINE_SET_ID = `enum ENGINE_F_ENGINE_SET_ID = 129;`;
        static if(is(typeof({ mixin(enumMixinStr_ENGINE_F_ENGINE_SET_ID); }))) {
            mixin(enumMixinStr_ENGINE_F_ENGINE_SET_ID);
        }
    }






    static if(!is(typeof(ENGINE_F_ENGINE_SET_DEFAULT_STRING))) {
        private enum enumMixinStr_ENGINE_F_ENGINE_SET_DEFAULT_STRING = `enum ENGINE_F_ENGINE_SET_DEFAULT_STRING = 189;`;
        static if(is(typeof({ mixin(enumMixinStr_ENGINE_F_ENGINE_SET_DEFAULT_STRING); }))) {
            mixin(enumMixinStr_ENGINE_F_ENGINE_SET_DEFAULT_STRING);
        }
    }




    static if(!is(typeof(ENGINE_F_ENGINE_REMOVE))) {
        private enum enumMixinStr_ENGINE_F_ENGINE_REMOVE = `enum ENGINE_F_ENGINE_REMOVE = 123;`;
        static if(is(typeof({ mixin(enumMixinStr_ENGINE_F_ENGINE_REMOVE); }))) {
            mixin(enumMixinStr_ENGINE_F_ENGINE_REMOVE);
        }
    }




    static if(!is(typeof(_STDLIB_H))) {
        private enum enumMixinStr__STDLIB_H = `enum _STDLIB_H = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__STDLIB_H); }))) {
            mixin(enumMixinStr__STDLIB_H);
        }
    }




    static if(!is(typeof(ENGINE_F_ENGINE_PKEY_ASN1_FIND_STR))) {
        private enum enumMixinStr_ENGINE_F_ENGINE_PKEY_ASN1_FIND_STR = `enum ENGINE_F_ENGINE_PKEY_ASN1_FIND_STR = 197;`;
        static if(is(typeof({ mixin(enumMixinStr_ENGINE_F_ENGINE_PKEY_ASN1_FIND_STR); }))) {
            mixin(enumMixinStr_ENGINE_F_ENGINE_PKEY_ASN1_FIND_STR);
        }
    }




    static if(!is(typeof(ENGINE_F_ENGINE_NEW))) {
        private enum enumMixinStr_ENGINE_F_ENGINE_NEW = `enum ENGINE_F_ENGINE_NEW = 122;`;
        static if(is(typeof({ mixin(enumMixinStr_ENGINE_F_ENGINE_NEW); }))) {
            mixin(enumMixinStr_ENGINE_F_ENGINE_NEW);
        }
    }




    static if(!is(typeof(ENGINE_F_ENGINE_LOAD_SSL_CLIENT_CERT))) {
        private enum enumMixinStr_ENGINE_F_ENGINE_LOAD_SSL_CLIENT_CERT = `enum ENGINE_F_ENGINE_LOAD_SSL_CLIENT_CERT = 194;`;
        static if(is(typeof({ mixin(enumMixinStr_ENGINE_F_ENGINE_LOAD_SSL_CLIENT_CERT); }))) {
            mixin(enumMixinStr_ENGINE_F_ENGINE_LOAD_SSL_CLIENT_CERT);
        }
    }
    static if(!is(typeof(ENGINE_F_ENGINE_LOAD_PUBLIC_KEY))) {
        private enum enumMixinStr_ENGINE_F_ENGINE_LOAD_PUBLIC_KEY = `enum ENGINE_F_ENGINE_LOAD_PUBLIC_KEY = 151;`;
        static if(is(typeof({ mixin(enumMixinStr_ENGINE_F_ENGINE_LOAD_PUBLIC_KEY); }))) {
            mixin(enumMixinStr_ENGINE_F_ENGINE_LOAD_PUBLIC_KEY);
        }
    }






    static if(!is(typeof(ENGINE_F_ENGINE_LOAD_PRIVATE_KEY))) {
        private enum enumMixinStr_ENGINE_F_ENGINE_LOAD_PRIVATE_KEY = `enum ENGINE_F_ENGINE_LOAD_PRIVATE_KEY = 150;`;
        static if(is(typeof({ mixin(enumMixinStr_ENGINE_F_ENGINE_LOAD_PRIVATE_KEY); }))) {
            mixin(enumMixinStr_ENGINE_F_ENGINE_LOAD_PRIVATE_KEY);
        }
    }




    static if(!is(typeof(ENGINE_F_ENGINE_LIST_REMOVE))) {
        private enum enumMixinStr_ENGINE_F_ENGINE_LIST_REMOVE = `enum ENGINE_F_ENGINE_LIST_REMOVE = 121;`;
        static if(is(typeof({ mixin(enumMixinStr_ENGINE_F_ENGINE_LIST_REMOVE); }))) {
            mixin(enumMixinStr_ENGINE_F_ENGINE_LIST_REMOVE);
        }
    }




    static if(!is(typeof(ENGINE_F_ENGINE_LIST_ADD))) {
        private enum enumMixinStr_ENGINE_F_ENGINE_LIST_ADD = `enum ENGINE_F_ENGINE_LIST_ADD = 120;`;
        static if(is(typeof({ mixin(enumMixinStr_ENGINE_F_ENGINE_LIST_ADD); }))) {
            mixin(enumMixinStr_ENGINE_F_ENGINE_LIST_ADD);
        }
    }




    static if(!is(typeof(ENGINE_F_ENGINE_INIT))) {
        private enum enumMixinStr_ENGINE_F_ENGINE_INIT = `enum ENGINE_F_ENGINE_INIT = 119;`;
        static if(is(typeof({ mixin(enumMixinStr_ENGINE_F_ENGINE_INIT); }))) {
            mixin(enumMixinStr_ENGINE_F_ENGINE_INIT);
        }
    }




    static if(!is(typeof(ENGINE_F_ENGINE_GET_PREV))) {
        private enum enumMixinStr_ENGINE_F_ENGINE_GET_PREV = `enum ENGINE_F_ENGINE_GET_PREV = 116;`;
        static if(is(typeof({ mixin(enumMixinStr_ENGINE_F_ENGINE_GET_PREV); }))) {
            mixin(enumMixinStr_ENGINE_F_ENGINE_GET_PREV);
        }
    }




    static if(!is(typeof(__ldiv_t_defined))) {
        private enum enumMixinStr___ldiv_t_defined = `enum __ldiv_t_defined = 1;`;
        static if(is(typeof({ mixin(enumMixinStr___ldiv_t_defined); }))) {
            mixin(enumMixinStr___ldiv_t_defined);
        }
    }




    static if(!is(typeof(ENGINE_F_ENGINE_GET_PKEY_METH))) {
        private enum enumMixinStr_ENGINE_F_ENGINE_GET_PKEY_METH = `enum ENGINE_F_ENGINE_GET_PKEY_METH = 192;`;
        static if(is(typeof({ mixin(enumMixinStr_ENGINE_F_ENGINE_GET_PKEY_METH); }))) {
            mixin(enumMixinStr_ENGINE_F_ENGINE_GET_PKEY_METH);
        }
    }




    static if(!is(typeof(ENGINE_F_ENGINE_GET_PKEY_ASN1_METH))) {
        private enum enumMixinStr_ENGINE_F_ENGINE_GET_PKEY_ASN1_METH = `enum ENGINE_F_ENGINE_GET_PKEY_ASN1_METH = 193;`;
        static if(is(typeof({ mixin(enumMixinStr_ENGINE_F_ENGINE_GET_PKEY_ASN1_METH); }))) {
            mixin(enumMixinStr_ENGINE_F_ENGINE_GET_PKEY_ASN1_METH);
        }
    }




    static if(!is(typeof(ENGINE_F_ENGINE_GET_NEXT))) {
        private enum enumMixinStr_ENGINE_F_ENGINE_GET_NEXT = `enum ENGINE_F_ENGINE_GET_NEXT = 115;`;
        static if(is(typeof({ mixin(enumMixinStr_ENGINE_F_ENGINE_GET_NEXT); }))) {
            mixin(enumMixinStr_ENGINE_F_ENGINE_GET_NEXT);
        }
    }




    static if(!is(typeof(__lldiv_t_defined))) {
        private enum enumMixinStr___lldiv_t_defined = `enum __lldiv_t_defined = 1;`;
        static if(is(typeof({ mixin(enumMixinStr___lldiv_t_defined); }))) {
            mixin(enumMixinStr___lldiv_t_defined);
        }
    }




    static if(!is(typeof(RAND_MAX))) {
        private enum enumMixinStr_RAND_MAX = `enum RAND_MAX = 2147483647;`;
        static if(is(typeof({ mixin(enumMixinStr_RAND_MAX); }))) {
            mixin(enumMixinStr_RAND_MAX);
        }
    }




    static if(!is(typeof(EXIT_FAILURE))) {
        private enum enumMixinStr_EXIT_FAILURE = `enum EXIT_FAILURE = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_EXIT_FAILURE); }))) {
            mixin(enumMixinStr_EXIT_FAILURE);
        }
    }




    static if(!is(typeof(EXIT_SUCCESS))) {
        private enum enumMixinStr_EXIT_SUCCESS = `enum EXIT_SUCCESS = 0;`;
        static if(is(typeof({ mixin(enumMixinStr_EXIT_SUCCESS); }))) {
            mixin(enumMixinStr_EXIT_SUCCESS);
        }
    }




    static if(!is(typeof(MB_CUR_MAX))) {
        private enum enumMixinStr_MB_CUR_MAX = `enum MB_CUR_MAX = ( __ctype_get_mb_cur_max ( ) );`;
        static if(is(typeof({ mixin(enumMixinStr_MB_CUR_MAX); }))) {
            mixin(enumMixinStr_MB_CUR_MAX);
        }
    }




    static if(!is(typeof(ENGINE_F_ENGINE_GET_LAST))) {
        private enum enumMixinStr_ENGINE_F_ENGINE_GET_LAST = `enum ENGINE_F_ENGINE_GET_LAST = 196;`;
        static if(is(typeof({ mixin(enumMixinStr_ENGINE_F_ENGINE_GET_LAST); }))) {
            mixin(enumMixinStr_ENGINE_F_ENGINE_GET_LAST);
        }
    }




    static if(!is(typeof(ENGINE_F_ENGINE_GET_FIRST))) {
        private enum enumMixinStr_ENGINE_F_ENGINE_GET_FIRST = `enum ENGINE_F_ENGINE_GET_FIRST = 195;`;
        static if(is(typeof({ mixin(enumMixinStr_ENGINE_F_ENGINE_GET_FIRST); }))) {
            mixin(enumMixinStr_ENGINE_F_ENGINE_GET_FIRST);
        }
    }




    static if(!is(typeof(ENGINE_F_ENGINE_GET_DIGEST))) {
        private enum enumMixinStr_ENGINE_F_ENGINE_GET_DIGEST = `enum ENGINE_F_ENGINE_GET_DIGEST = 186;`;
        static if(is(typeof({ mixin(enumMixinStr_ENGINE_F_ENGINE_GET_DIGEST); }))) {
            mixin(enumMixinStr_ENGINE_F_ENGINE_GET_DIGEST);
        }
    }




    static if(!is(typeof(ENGINE_F_ENGINE_GET_CIPHER))) {
        private enum enumMixinStr_ENGINE_F_ENGINE_GET_CIPHER = `enum ENGINE_F_ENGINE_GET_CIPHER = 185;`;
        static if(is(typeof({ mixin(enumMixinStr_ENGINE_F_ENGINE_GET_CIPHER); }))) {
            mixin(enumMixinStr_ENGINE_F_ENGINE_GET_CIPHER);
        }
    }




    static if(!is(typeof(ENGINE_F_ENGINE_FINISH))) {
        private enum enumMixinStr_ENGINE_F_ENGINE_FINISH = `enum ENGINE_F_ENGINE_FINISH = 107;`;
        static if(is(typeof({ mixin(enumMixinStr_ENGINE_F_ENGINE_FINISH); }))) {
            mixin(enumMixinStr_ENGINE_F_ENGINE_FINISH);
        }
    }




    static if(!is(typeof(ENGINE_F_ENGINE_CTRL_CMD_STRING))) {
        private enum enumMixinStr_ENGINE_F_ENGINE_CTRL_CMD_STRING = `enum ENGINE_F_ENGINE_CTRL_CMD_STRING = 171;`;
        static if(is(typeof({ mixin(enumMixinStr_ENGINE_F_ENGINE_CTRL_CMD_STRING); }))) {
            mixin(enumMixinStr_ENGINE_F_ENGINE_CTRL_CMD_STRING);
        }
    }




    static if(!is(typeof(ENGINE_F_ENGINE_CTRL_CMD))) {
        private enum enumMixinStr_ENGINE_F_ENGINE_CTRL_CMD = `enum ENGINE_F_ENGINE_CTRL_CMD = 178;`;
        static if(is(typeof({ mixin(enumMixinStr_ENGINE_F_ENGINE_CTRL_CMD); }))) {
            mixin(enumMixinStr_ENGINE_F_ENGINE_CTRL_CMD);
        }
    }




    static if(!is(typeof(ENGINE_F_ENGINE_CTRL))) {
        private enum enumMixinStr_ENGINE_F_ENGINE_CTRL = `enum ENGINE_F_ENGINE_CTRL = 142;`;
        static if(is(typeof({ mixin(enumMixinStr_ENGINE_F_ENGINE_CTRL); }))) {
            mixin(enumMixinStr_ENGINE_F_ENGINE_CTRL);
        }
    }




    static if(!is(typeof(ENGINE_F_ENGINE_CMD_IS_EXECUTABLE))) {
        private enum enumMixinStr_ENGINE_F_ENGINE_CMD_IS_EXECUTABLE = `enum ENGINE_F_ENGINE_CMD_IS_EXECUTABLE = 170;`;
        static if(is(typeof({ mixin(enumMixinStr_ENGINE_F_ENGINE_CMD_IS_EXECUTABLE); }))) {
            mixin(enumMixinStr_ENGINE_F_ENGINE_CMD_IS_EXECUTABLE);
        }
    }




    static if(!is(typeof(ENGINE_F_ENGINE_BY_ID))) {
        private enum enumMixinStr_ENGINE_F_ENGINE_BY_ID = `enum ENGINE_F_ENGINE_BY_ID = 106;`;
        static if(is(typeof({ mixin(enumMixinStr_ENGINE_F_ENGINE_BY_ID); }))) {
            mixin(enumMixinStr_ENGINE_F_ENGINE_BY_ID);
        }
    }




    static if(!is(typeof(ENGINE_F_ENGINE_ADD))) {
        private enum enumMixinStr_ENGINE_F_ENGINE_ADD = `enum ENGINE_F_ENGINE_ADD = 105;`;
        static if(is(typeof({ mixin(enumMixinStr_ENGINE_F_ENGINE_ADD); }))) {
            mixin(enumMixinStr_ENGINE_F_ENGINE_ADD);
        }
    }




    static if(!is(typeof(ENGINE_F_DYNAMIC_SET_DATA_CTX))) {
        private enum enumMixinStr_ENGINE_F_DYNAMIC_SET_DATA_CTX = `enum ENGINE_F_DYNAMIC_SET_DATA_CTX = 183;`;
        static if(is(typeof({ mixin(enumMixinStr_ENGINE_F_DYNAMIC_SET_DATA_CTX); }))) {
            mixin(enumMixinStr_ENGINE_F_DYNAMIC_SET_DATA_CTX);
        }
    }




    static if(!is(typeof(ENGINE_F_DYNAMIC_LOAD))) {
        private enum enumMixinStr_ENGINE_F_DYNAMIC_LOAD = `enum ENGINE_F_DYNAMIC_LOAD = 182;`;
        static if(is(typeof({ mixin(enumMixinStr_ENGINE_F_DYNAMIC_LOAD); }))) {
            mixin(enumMixinStr_ENGINE_F_DYNAMIC_LOAD);
        }
    }




    static if(!is(typeof(ENGINE_F_DYNAMIC_GET_DATA_CTX))) {
        private enum enumMixinStr_ENGINE_F_DYNAMIC_GET_DATA_CTX = `enum ENGINE_F_DYNAMIC_GET_DATA_CTX = 181;`;
        static if(is(typeof({ mixin(enumMixinStr_ENGINE_F_DYNAMIC_GET_DATA_CTX); }))) {
            mixin(enumMixinStr_ENGINE_F_DYNAMIC_GET_DATA_CTX);
        }
    }




    static if(!is(typeof(ENGINE_F_DYNAMIC_CTRL))) {
        private enum enumMixinStr_ENGINE_F_DYNAMIC_CTRL = `enum ENGINE_F_DYNAMIC_CTRL = 180;`;
        static if(is(typeof({ mixin(enumMixinStr_ENGINE_F_DYNAMIC_CTRL); }))) {
            mixin(enumMixinStr_ENGINE_F_DYNAMIC_CTRL);
        }
    }
    static if(!is(typeof(OSSL_DYNAMIC_OLDEST))) {
        private enum enumMixinStr_OSSL_DYNAMIC_OLDEST = `enum OSSL_DYNAMIC_OLDEST = ( unsigned long ) 0x00030000;`;
        static if(is(typeof({ mixin(enumMixinStr_OSSL_DYNAMIC_OLDEST); }))) {
            mixin(enumMixinStr_OSSL_DYNAMIC_OLDEST);
        }
    }




    static if(!is(typeof(OSSL_DYNAMIC_VERSION))) {
        private enum enumMixinStr_OSSL_DYNAMIC_VERSION = `enum OSSL_DYNAMIC_VERSION = ( unsigned long ) 0x00030000;`;
        static if(is(typeof({ mixin(enumMixinStr_OSSL_DYNAMIC_VERSION); }))) {
            mixin(enumMixinStr_OSSL_DYNAMIC_VERSION);
        }
    }
    static if(!is(typeof(ENGINE_CTRL_CHIL_NO_LOCKING))) {
        private enum enumMixinStr_ENGINE_CTRL_CHIL_NO_LOCKING = `enum ENGINE_CTRL_CHIL_NO_LOCKING = 101;`;
        static if(is(typeof({ mixin(enumMixinStr_ENGINE_CTRL_CHIL_NO_LOCKING); }))) {
            mixin(enumMixinStr_ENGINE_CTRL_CHIL_NO_LOCKING);
        }
    }




    static if(!is(typeof(ENGINE_CTRL_CHIL_SET_FORKCHECK))) {
        private enum enumMixinStr_ENGINE_CTRL_CHIL_SET_FORKCHECK = `enum ENGINE_CTRL_CHIL_SET_FORKCHECK = 100;`;
        static if(is(typeof({ mixin(enumMixinStr_ENGINE_CTRL_CHIL_SET_FORKCHECK); }))) {
            mixin(enumMixinStr_ENGINE_CTRL_CHIL_SET_FORKCHECK);
        }
    }




    static if(!is(typeof(ENGINE_CMD_BASE))) {
        private enum enumMixinStr_ENGINE_CMD_BASE = `enum ENGINE_CMD_BASE = 200;`;
        static if(is(typeof({ mixin(enumMixinStr_ENGINE_CMD_BASE); }))) {
            mixin(enumMixinStr_ENGINE_CMD_BASE);
        }
    }




    static if(!is(typeof(ENGINE_CTRL_GET_CMD_FLAGS))) {
        private enum enumMixinStr_ENGINE_CTRL_GET_CMD_FLAGS = `enum ENGINE_CTRL_GET_CMD_FLAGS = 18;`;
        static if(is(typeof({ mixin(enumMixinStr_ENGINE_CTRL_GET_CMD_FLAGS); }))) {
            mixin(enumMixinStr_ENGINE_CTRL_GET_CMD_FLAGS);
        }
    }




    static if(!is(typeof(ENGINE_CTRL_GET_DESC_FROM_CMD))) {
        private enum enumMixinStr_ENGINE_CTRL_GET_DESC_FROM_CMD = `enum ENGINE_CTRL_GET_DESC_FROM_CMD = 17;`;
        static if(is(typeof({ mixin(enumMixinStr_ENGINE_CTRL_GET_DESC_FROM_CMD); }))) {
            mixin(enumMixinStr_ENGINE_CTRL_GET_DESC_FROM_CMD);
        }
    }




    static if(!is(typeof(ENGINE_CTRL_GET_DESC_LEN_FROM_CMD))) {
        private enum enumMixinStr_ENGINE_CTRL_GET_DESC_LEN_FROM_CMD = `enum ENGINE_CTRL_GET_DESC_LEN_FROM_CMD = 16;`;
        static if(is(typeof({ mixin(enumMixinStr_ENGINE_CTRL_GET_DESC_LEN_FROM_CMD); }))) {
            mixin(enumMixinStr_ENGINE_CTRL_GET_DESC_LEN_FROM_CMD);
        }
    }




    static if(!is(typeof(ENGINE_CTRL_GET_NAME_FROM_CMD))) {
        private enum enumMixinStr_ENGINE_CTRL_GET_NAME_FROM_CMD = `enum ENGINE_CTRL_GET_NAME_FROM_CMD = 15;`;
        static if(is(typeof({ mixin(enumMixinStr_ENGINE_CTRL_GET_NAME_FROM_CMD); }))) {
            mixin(enumMixinStr_ENGINE_CTRL_GET_NAME_FROM_CMD);
        }
    }




    static if(!is(typeof(ENGINE_CTRL_GET_NAME_LEN_FROM_CMD))) {
        private enum enumMixinStr_ENGINE_CTRL_GET_NAME_LEN_FROM_CMD = `enum ENGINE_CTRL_GET_NAME_LEN_FROM_CMD = 14;`;
        static if(is(typeof({ mixin(enumMixinStr_ENGINE_CTRL_GET_NAME_LEN_FROM_CMD); }))) {
            mixin(enumMixinStr_ENGINE_CTRL_GET_NAME_LEN_FROM_CMD);
        }
    }




    static if(!is(typeof(ENGINE_CTRL_GET_CMD_FROM_NAME))) {
        private enum enumMixinStr_ENGINE_CTRL_GET_CMD_FROM_NAME = `enum ENGINE_CTRL_GET_CMD_FROM_NAME = 13;`;
        static if(is(typeof({ mixin(enumMixinStr_ENGINE_CTRL_GET_CMD_FROM_NAME); }))) {
            mixin(enumMixinStr_ENGINE_CTRL_GET_CMD_FROM_NAME);
        }
    }




    static if(!is(typeof(ENGINE_CTRL_GET_NEXT_CMD_TYPE))) {
        private enum enumMixinStr_ENGINE_CTRL_GET_NEXT_CMD_TYPE = `enum ENGINE_CTRL_GET_NEXT_CMD_TYPE = 12;`;
        static if(is(typeof({ mixin(enumMixinStr_ENGINE_CTRL_GET_NEXT_CMD_TYPE); }))) {
            mixin(enumMixinStr_ENGINE_CTRL_GET_NEXT_CMD_TYPE);
        }
    }




    static if(!is(typeof(ENGINE_CTRL_GET_FIRST_CMD_TYPE))) {
        private enum enumMixinStr_ENGINE_CTRL_GET_FIRST_CMD_TYPE = `enum ENGINE_CTRL_GET_FIRST_CMD_TYPE = 11;`;
        static if(is(typeof({ mixin(enumMixinStr_ENGINE_CTRL_GET_FIRST_CMD_TYPE); }))) {
            mixin(enumMixinStr_ENGINE_CTRL_GET_FIRST_CMD_TYPE);
        }
    }




    static if(!is(typeof(ENGINE_CTRL_HAS_CTRL_FUNCTION))) {
        private enum enumMixinStr_ENGINE_CTRL_HAS_CTRL_FUNCTION = `enum ENGINE_CTRL_HAS_CTRL_FUNCTION = 10;`;
        static if(is(typeof({ mixin(enumMixinStr_ENGINE_CTRL_HAS_CTRL_FUNCTION); }))) {
            mixin(enumMixinStr_ENGINE_CTRL_HAS_CTRL_FUNCTION);
        }
    }




    static if(!is(typeof(ENGINE_CTRL_LOAD_SECTION))) {
        private enum enumMixinStr_ENGINE_CTRL_LOAD_SECTION = `enum ENGINE_CTRL_LOAD_SECTION = 7;`;
        static if(is(typeof({ mixin(enumMixinStr_ENGINE_CTRL_LOAD_SECTION); }))) {
            mixin(enumMixinStr_ENGINE_CTRL_LOAD_SECTION);
        }
    }




    static if(!is(typeof(ENGINE_CTRL_LOAD_CONFIGURATION))) {
        private enum enumMixinStr_ENGINE_CTRL_LOAD_CONFIGURATION = `enum ENGINE_CTRL_LOAD_CONFIGURATION = 6;`;
        static if(is(typeof({ mixin(enumMixinStr_ENGINE_CTRL_LOAD_CONFIGURATION); }))) {
            mixin(enumMixinStr_ENGINE_CTRL_LOAD_CONFIGURATION);
        }
    }




    static if(!is(typeof(ENGINE_CTRL_SET_CALLBACK_DATA))) {
        private enum enumMixinStr_ENGINE_CTRL_SET_CALLBACK_DATA = `enum ENGINE_CTRL_SET_CALLBACK_DATA = 5;`;
        static if(is(typeof({ mixin(enumMixinStr_ENGINE_CTRL_SET_CALLBACK_DATA); }))) {
            mixin(enumMixinStr_ENGINE_CTRL_SET_CALLBACK_DATA);
        }
    }




    static if(!is(typeof(ENGINE_CTRL_SET_USER_INTERFACE))) {
        private enum enumMixinStr_ENGINE_CTRL_SET_USER_INTERFACE = `enum ENGINE_CTRL_SET_USER_INTERFACE = 4;`;
        static if(is(typeof({ mixin(enumMixinStr_ENGINE_CTRL_SET_USER_INTERFACE); }))) {
            mixin(enumMixinStr_ENGINE_CTRL_SET_USER_INTERFACE);
        }
    }




    static if(!is(typeof(ENGINE_CTRL_HUP))) {
        private enum enumMixinStr_ENGINE_CTRL_HUP = `enum ENGINE_CTRL_HUP = 3;`;
        static if(is(typeof({ mixin(enumMixinStr_ENGINE_CTRL_HUP); }))) {
            mixin(enumMixinStr_ENGINE_CTRL_HUP);
        }
    }




    static if(!is(typeof(ENGINE_CTRL_SET_PASSWORD_CALLBACK))) {
        private enum enumMixinStr_ENGINE_CTRL_SET_PASSWORD_CALLBACK = `enum ENGINE_CTRL_SET_PASSWORD_CALLBACK = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_ENGINE_CTRL_SET_PASSWORD_CALLBACK); }))) {
            mixin(enumMixinStr_ENGINE_CTRL_SET_PASSWORD_CALLBACK);
        }
    }




    static if(!is(typeof(ENGINE_CTRL_SET_LOGSTREAM))) {
        private enum enumMixinStr_ENGINE_CTRL_SET_LOGSTREAM = `enum ENGINE_CTRL_SET_LOGSTREAM = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_ENGINE_CTRL_SET_LOGSTREAM); }))) {
            mixin(enumMixinStr_ENGINE_CTRL_SET_LOGSTREAM);
        }
    }




    static if(!is(typeof(ENGINE_CMD_FLAG_INTERNAL))) {
        private enum enumMixinStr_ENGINE_CMD_FLAG_INTERNAL = `enum ENGINE_CMD_FLAG_INTERNAL = ( unsigned int ) 0x0008;`;
        static if(is(typeof({ mixin(enumMixinStr_ENGINE_CMD_FLAG_INTERNAL); }))) {
            mixin(enumMixinStr_ENGINE_CMD_FLAG_INTERNAL);
        }
    }




    static if(!is(typeof(ENGINE_CMD_FLAG_NO_INPUT))) {
        private enum enumMixinStr_ENGINE_CMD_FLAG_NO_INPUT = `enum ENGINE_CMD_FLAG_NO_INPUT = ( unsigned int ) 0x0004;`;
        static if(is(typeof({ mixin(enumMixinStr_ENGINE_CMD_FLAG_NO_INPUT); }))) {
            mixin(enumMixinStr_ENGINE_CMD_FLAG_NO_INPUT);
        }
    }




    static if(!is(typeof(ENGINE_CMD_FLAG_STRING))) {
        private enum enumMixinStr_ENGINE_CMD_FLAG_STRING = `enum ENGINE_CMD_FLAG_STRING = ( unsigned int ) 0x0002;`;
        static if(is(typeof({ mixin(enumMixinStr_ENGINE_CMD_FLAG_STRING); }))) {
            mixin(enumMixinStr_ENGINE_CMD_FLAG_STRING);
        }
    }




    static if(!is(typeof(ENGINE_CMD_FLAG_NUMERIC))) {
        private enum enumMixinStr_ENGINE_CMD_FLAG_NUMERIC = `enum ENGINE_CMD_FLAG_NUMERIC = ( unsigned int ) 0x0001;`;
        static if(is(typeof({ mixin(enumMixinStr_ENGINE_CMD_FLAG_NUMERIC); }))) {
            mixin(enumMixinStr_ENGINE_CMD_FLAG_NUMERIC);
        }
    }




    static if(!is(typeof(ENGINE_FLAGS_NO_REGISTER_ALL))) {
        private enum enumMixinStr_ENGINE_FLAGS_NO_REGISTER_ALL = `enum ENGINE_FLAGS_NO_REGISTER_ALL = cast( int ) 0x0008;`;
        static if(is(typeof({ mixin(enumMixinStr_ENGINE_FLAGS_NO_REGISTER_ALL); }))) {
            mixin(enumMixinStr_ENGINE_FLAGS_NO_REGISTER_ALL);
        }
    }




    static if(!is(typeof(ENGINE_FLAGS_BY_ID_COPY))) {
        private enum enumMixinStr_ENGINE_FLAGS_BY_ID_COPY = `enum ENGINE_FLAGS_BY_ID_COPY = cast( int ) 0x0004;`;
        static if(is(typeof({ mixin(enumMixinStr_ENGINE_FLAGS_BY_ID_COPY); }))) {
            mixin(enumMixinStr_ENGINE_FLAGS_BY_ID_COPY);
        }
    }




    static if(!is(typeof(ENGINE_FLAGS_MANUAL_CMD_CTRL))) {
        private enum enumMixinStr_ENGINE_FLAGS_MANUAL_CMD_CTRL = `enum ENGINE_FLAGS_MANUAL_CMD_CTRL = cast( int ) 0x0002;`;
        static if(is(typeof({ mixin(enumMixinStr_ENGINE_FLAGS_MANUAL_CMD_CTRL); }))) {
            mixin(enumMixinStr_ENGINE_FLAGS_MANUAL_CMD_CTRL);
        }
    }




    static if(!is(typeof(ENGINE_TABLE_FLAG_NOINIT))) {
        private enum enumMixinStr_ENGINE_TABLE_FLAG_NOINIT = `enum ENGINE_TABLE_FLAG_NOINIT = ( unsigned int ) 0x0001;`;
        static if(is(typeof({ mixin(enumMixinStr_ENGINE_TABLE_FLAG_NOINIT); }))) {
            mixin(enumMixinStr_ENGINE_TABLE_FLAG_NOINIT);
        }
    }




    static if(!is(typeof(ENGINE_METHOD_NONE))) {
        private enum enumMixinStr_ENGINE_METHOD_NONE = `enum ENGINE_METHOD_NONE = ( unsigned int ) 0x0000;`;
        static if(is(typeof({ mixin(enumMixinStr_ENGINE_METHOD_NONE); }))) {
            mixin(enumMixinStr_ENGINE_METHOD_NONE);
        }
    }




    static if(!is(typeof(ENGINE_METHOD_ALL))) {
        private enum enumMixinStr_ENGINE_METHOD_ALL = `enum ENGINE_METHOD_ALL = ( unsigned int ) 0xFFFF;`;
        static if(is(typeof({ mixin(enumMixinStr_ENGINE_METHOD_ALL); }))) {
            mixin(enumMixinStr_ENGINE_METHOD_ALL);
        }
    }




    static if(!is(typeof(ENGINE_METHOD_EC))) {
        private enum enumMixinStr_ENGINE_METHOD_EC = `enum ENGINE_METHOD_EC = ( unsigned int ) 0x0800;`;
        static if(is(typeof({ mixin(enumMixinStr_ENGINE_METHOD_EC); }))) {
            mixin(enumMixinStr_ENGINE_METHOD_EC);
        }
    }




    static if(!is(typeof(ENGINE_METHOD_PKEY_ASN1_METHS))) {
        private enum enumMixinStr_ENGINE_METHOD_PKEY_ASN1_METHS = `enum ENGINE_METHOD_PKEY_ASN1_METHS = ( unsigned int ) 0x0400;`;
        static if(is(typeof({ mixin(enumMixinStr_ENGINE_METHOD_PKEY_ASN1_METHS); }))) {
            mixin(enumMixinStr_ENGINE_METHOD_PKEY_ASN1_METHS);
        }
    }




    static if(!is(typeof(ENGINE_METHOD_PKEY_METHS))) {
        private enum enumMixinStr_ENGINE_METHOD_PKEY_METHS = `enum ENGINE_METHOD_PKEY_METHS = ( unsigned int ) 0x0200;`;
        static if(is(typeof({ mixin(enumMixinStr_ENGINE_METHOD_PKEY_METHS); }))) {
            mixin(enumMixinStr_ENGINE_METHOD_PKEY_METHS);
        }
    }




    static if(!is(typeof(ENGINE_METHOD_DIGESTS))) {
        private enum enumMixinStr_ENGINE_METHOD_DIGESTS = `enum ENGINE_METHOD_DIGESTS = ( unsigned int ) 0x0080;`;
        static if(is(typeof({ mixin(enumMixinStr_ENGINE_METHOD_DIGESTS); }))) {
            mixin(enumMixinStr_ENGINE_METHOD_DIGESTS);
        }
    }




    static if(!is(typeof(ENGINE_METHOD_CIPHERS))) {
        private enum enumMixinStr_ENGINE_METHOD_CIPHERS = `enum ENGINE_METHOD_CIPHERS = ( unsigned int ) 0x0040;`;
        static if(is(typeof({ mixin(enumMixinStr_ENGINE_METHOD_CIPHERS); }))) {
            mixin(enumMixinStr_ENGINE_METHOD_CIPHERS);
        }
    }




    static if(!is(typeof(ENGINE_METHOD_RAND))) {
        private enum enumMixinStr_ENGINE_METHOD_RAND = `enum ENGINE_METHOD_RAND = ( unsigned int ) 0x0008;`;
        static if(is(typeof({ mixin(enumMixinStr_ENGINE_METHOD_RAND); }))) {
            mixin(enumMixinStr_ENGINE_METHOD_RAND);
        }
    }




    static if(!is(typeof(ENGINE_METHOD_DH))) {
        private enum enumMixinStr_ENGINE_METHOD_DH = `enum ENGINE_METHOD_DH = ( unsigned int ) 0x0004;`;
        static if(is(typeof({ mixin(enumMixinStr_ENGINE_METHOD_DH); }))) {
            mixin(enumMixinStr_ENGINE_METHOD_DH);
        }
    }




    static if(!is(typeof(ENGINE_METHOD_DSA))) {
        private enum enumMixinStr_ENGINE_METHOD_DSA = `enum ENGINE_METHOD_DSA = ( unsigned int ) 0x0002;`;
        static if(is(typeof({ mixin(enumMixinStr_ENGINE_METHOD_DSA); }))) {
            mixin(enumMixinStr_ENGINE_METHOD_DSA);
        }
    }




    static if(!is(typeof(ENGINE_METHOD_RSA))) {
        private enum enumMixinStr_ENGINE_METHOD_RSA = `enum ENGINE_METHOD_RSA = ( unsigned int ) 0x0001;`;
        static if(is(typeof({ mixin(enumMixinStr_ENGINE_METHOD_RSA); }))) {
            mixin(enumMixinStr_ENGINE_METHOD_RSA);
        }
    }






    static if(!is(typeof(ascii2ebcdic))) {
        private enum enumMixinStr_ascii2ebcdic = `enum ascii2ebcdic = _openssl_ascii2ebcdic;`;
        static if(is(typeof({ mixin(enumMixinStr_ascii2ebcdic); }))) {
            mixin(enumMixinStr_ascii2ebcdic);
        }
    }




    static if(!is(typeof(ebcdic2ascii))) {
        private enum enumMixinStr_ebcdic2ascii = `enum ebcdic2ascii = _openssl_ebcdic2ascii;`;
        static if(is(typeof({ mixin(enumMixinStr_ebcdic2ascii); }))) {
            mixin(enumMixinStr_ebcdic2ascii);
        }
    }




    static if(!is(typeof(os_toebcdic))) {
        private enum enumMixinStr_os_toebcdic = `enum os_toebcdic = _openssl_os_toebcdic;`;
        static if(is(typeof({ mixin(enumMixinStr_os_toebcdic); }))) {
            mixin(enumMixinStr_os_toebcdic);
        }
    }




    static if(!is(typeof(os_toascii))) {
        private enum enumMixinStr_os_toascii = `enum os_toascii = _openssl_os_toascii;`;
        static if(is(typeof({ mixin(enumMixinStr_os_toascii); }))) {
            mixin(enumMixinStr_os_toascii);
        }
    }






    static if(!is(typeof(DTLS1_TMO_ALERT_COUNT))) {
        private enum enumMixinStr_DTLS1_TMO_ALERT_COUNT = `enum DTLS1_TMO_ALERT_COUNT = 12;`;
        static if(is(typeof({ mixin(enumMixinStr_DTLS1_TMO_ALERT_COUNT); }))) {
            mixin(enumMixinStr_DTLS1_TMO_ALERT_COUNT);
        }
    }




    static if(!is(typeof(DTLS1_TMO_WRITE_COUNT))) {
        private enum enumMixinStr_DTLS1_TMO_WRITE_COUNT = `enum DTLS1_TMO_WRITE_COUNT = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_DTLS1_TMO_WRITE_COUNT); }))) {
            mixin(enumMixinStr_DTLS1_TMO_WRITE_COUNT);
        }
    }




    static if(!is(typeof(DTLS1_TMO_READ_COUNT))) {
        private enum enumMixinStr_DTLS1_TMO_READ_COUNT = `enum DTLS1_TMO_READ_COUNT = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_DTLS1_TMO_READ_COUNT); }))) {
            mixin(enumMixinStr_DTLS1_TMO_READ_COUNT);
        }
    }




    static if(!is(typeof(DTLS1_AL_HEADER_LENGTH))) {
        private enum enumMixinStr_DTLS1_AL_HEADER_LENGTH = `enum DTLS1_AL_HEADER_LENGTH = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_DTLS1_AL_HEADER_LENGTH); }))) {
            mixin(enumMixinStr_DTLS1_AL_HEADER_LENGTH);
        }
    }




    static if(!is(typeof(DTLS1_CCS_HEADER_LENGTH))) {
        private enum enumMixinStr_DTLS1_CCS_HEADER_LENGTH = `enum DTLS1_CCS_HEADER_LENGTH = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_DTLS1_CCS_HEADER_LENGTH); }))) {
            mixin(enumMixinStr_DTLS1_CCS_HEADER_LENGTH);
        }
    }




    static if(!is(typeof(DTLS1_HM_FRAGMENT_RETRY))) {
        private enum enumMixinStr_DTLS1_HM_FRAGMENT_RETRY = `enum DTLS1_HM_FRAGMENT_RETRY = - 3;`;
        static if(is(typeof({ mixin(enumMixinStr_DTLS1_HM_FRAGMENT_RETRY); }))) {
            mixin(enumMixinStr_DTLS1_HM_FRAGMENT_RETRY);
        }
    }




    static if(!is(typeof(DTLS1_HM_BAD_FRAGMENT))) {
        private enum enumMixinStr_DTLS1_HM_BAD_FRAGMENT = `enum DTLS1_HM_BAD_FRAGMENT = - 2;`;
        static if(is(typeof({ mixin(enumMixinStr_DTLS1_HM_BAD_FRAGMENT); }))) {
            mixin(enumMixinStr_DTLS1_HM_BAD_FRAGMENT);
        }
    }




    static if(!is(typeof(DTLS1_HM_HEADER_LENGTH))) {
        private enum enumMixinStr_DTLS1_HM_HEADER_LENGTH = `enum DTLS1_HM_HEADER_LENGTH = 12;`;
        static if(is(typeof({ mixin(enumMixinStr_DTLS1_HM_HEADER_LENGTH); }))) {
            mixin(enumMixinStr_DTLS1_HM_HEADER_LENGTH);
        }
    }




    static if(!is(typeof(DTLS1_RT_HEADER_LENGTH))) {
        private enum enumMixinStr_DTLS1_RT_HEADER_LENGTH = `enum DTLS1_RT_HEADER_LENGTH = 13;`;
        static if(is(typeof({ mixin(enumMixinStr_DTLS1_RT_HEADER_LENGTH); }))) {
            mixin(enumMixinStr_DTLS1_RT_HEADER_LENGTH);
        }
    }




    static if(!is(typeof(DTLS1_COOKIE_LENGTH))) {
        private enum enumMixinStr_DTLS1_COOKIE_LENGTH = `enum DTLS1_COOKIE_LENGTH = 256;`;
        static if(is(typeof({ mixin(enumMixinStr_DTLS1_COOKIE_LENGTH); }))) {
            mixin(enumMixinStr_DTLS1_COOKIE_LENGTH);
        }
    }




    static if(!is(typeof(DTLS_ANY_VERSION))) {
        private enum enumMixinStr_DTLS_ANY_VERSION = `enum DTLS_ANY_VERSION = 0x1FFFF;`;
        static if(is(typeof({ mixin(enumMixinStr_DTLS_ANY_VERSION); }))) {
            mixin(enumMixinStr_DTLS_ANY_VERSION);
        }
    }




    static if(!is(typeof(DTLS1_BAD_VER))) {
        private enum enumMixinStr_DTLS1_BAD_VER = `enum DTLS1_BAD_VER = 0x0100;`;
        static if(is(typeof({ mixin(enumMixinStr_DTLS1_BAD_VER); }))) {
            mixin(enumMixinStr_DTLS1_BAD_VER);
        }
    }




    static if(!is(typeof(DTLS1_VERSION_MAJOR))) {
        private enum enumMixinStr_DTLS1_VERSION_MAJOR = `enum DTLS1_VERSION_MAJOR = 0xFE;`;
        static if(is(typeof({ mixin(enumMixinStr_DTLS1_VERSION_MAJOR); }))) {
            mixin(enumMixinStr_DTLS1_VERSION_MAJOR);
        }
    }




    static if(!is(typeof(DTLS_MAX_VERSION))) {
        private enum enumMixinStr_DTLS_MAX_VERSION = `enum DTLS_MAX_VERSION = DTLS1_2_VERSION;`;
        static if(is(typeof({ mixin(enumMixinStr_DTLS_MAX_VERSION); }))) {
            mixin(enumMixinStr_DTLS_MAX_VERSION);
        }
    }




    static if(!is(typeof(DTLS_MIN_VERSION))) {
        private enum enumMixinStr_DTLS_MIN_VERSION = `enum DTLS_MIN_VERSION = DTLS1_VERSION;`;
        static if(is(typeof({ mixin(enumMixinStr_DTLS_MIN_VERSION); }))) {
            mixin(enumMixinStr_DTLS_MIN_VERSION);
        }
    }




    static if(!is(typeof(DTLS1_2_VERSION))) {
        private enum enumMixinStr_DTLS1_2_VERSION = `enum DTLS1_2_VERSION = 0xFEFD;`;
        static if(is(typeof({ mixin(enumMixinStr_DTLS1_2_VERSION); }))) {
            mixin(enumMixinStr_DTLS1_2_VERSION);
        }
    }




    static if(!is(typeof(DTLS1_VERSION))) {
        private enum enumMixinStr_DTLS1_VERSION = `enum DTLS1_VERSION = 0xFEFF;`;
        static if(is(typeof({ mixin(enumMixinStr_DTLS1_VERSION); }))) {
            mixin(enumMixinStr_DTLS1_VERSION);
        }
    }






    static if(!is(typeof(DES_fixup_key_parity))) {
        private enum enumMixinStr_DES_fixup_key_parity = `enum DES_fixup_key_parity = DES_set_odd_parity;`;
        static if(is(typeof({ mixin(enumMixinStr_DES_fixup_key_parity); }))) {
            mixin(enumMixinStr_DES_fixup_key_parity);
        }
    }




    static if(!is(typeof(DES_check_key))) {
        private enum enumMixinStr_DES_check_key = `enum DES_check_key = _shadow_DES_check_key;`;
        static if(is(typeof({ mixin(enumMixinStr_DES_check_key); }))) {
            mixin(enumMixinStr_DES_check_key);
        }
    }
    static if(!is(typeof(DES_PCBC_MODE))) {
        private enum enumMixinStr_DES_PCBC_MODE = `enum DES_PCBC_MODE = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_DES_PCBC_MODE); }))) {
            mixin(enumMixinStr_DES_PCBC_MODE);
        }
    }




    static if(!is(typeof(DES_CBC_MODE))) {
        private enum enumMixinStr_DES_CBC_MODE = `enum DES_CBC_MODE = 0;`;
        static if(is(typeof({ mixin(enumMixinStr_DES_CBC_MODE); }))) {
            mixin(enumMixinStr_DES_CBC_MODE);
        }
    }




    static if(!is(typeof(DES_DECRYPT))) {
        private enum enumMixinStr_DES_DECRYPT = `enum DES_DECRYPT = 0;`;
        static if(is(typeof({ mixin(enumMixinStr_DES_DECRYPT); }))) {
            mixin(enumMixinStr_DES_DECRYPT);
        }
    }




    static if(!is(typeof(DES_ENCRYPT))) {
        private enum enumMixinStr_DES_ENCRYPT = `enum DES_ENCRYPT = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_DES_ENCRYPT); }))) {
            mixin(enumMixinStr_DES_ENCRYPT);
        }
    }




    static if(!is(typeof(DES_SCHEDULE_SZ))) {
        private enum enumMixinStr_DES_SCHEDULE_SZ = `enum DES_SCHEDULE_SZ = ( ( DES_key_schedule ) .sizeof );`;
        static if(is(typeof({ mixin(enumMixinStr_DES_SCHEDULE_SZ); }))) {
            mixin(enumMixinStr_DES_SCHEDULE_SZ);
        }
    }




    static if(!is(typeof(DES_KEY_SZ))) {
        private enum enumMixinStr_DES_KEY_SZ = `enum DES_KEY_SZ = ( ( DES_cblock ) .sizeof );`;
        static if(is(typeof({ mixin(enumMixinStr_DES_KEY_SZ); }))) {
            mixin(enumMixinStr_DES_KEY_SZ);
        }
    }






    static if(!is(typeof(CT_R_UNSUPPORTED_VERSION))) {
        private enum enumMixinStr_CT_R_UNSUPPORTED_VERSION = `enum CT_R_UNSUPPORTED_VERSION = 103;`;
        static if(is(typeof({ mixin(enumMixinStr_CT_R_UNSUPPORTED_VERSION); }))) {
            mixin(enumMixinStr_CT_R_UNSUPPORTED_VERSION);
        }
    }




    static if(!is(typeof(CT_R_UNSUPPORTED_ENTRY_TYPE))) {
        private enum enumMixinStr_CT_R_UNSUPPORTED_ENTRY_TYPE = `enum CT_R_UNSUPPORTED_ENTRY_TYPE = 102;`;
        static if(is(typeof({ mixin(enumMixinStr_CT_R_UNSUPPORTED_ENTRY_TYPE); }))) {
            mixin(enumMixinStr_CT_R_UNSUPPORTED_ENTRY_TYPE);
        }
    }




    static if(!is(typeof(CT_R_UNRECOGNIZED_SIGNATURE_NID))) {
        private enum enumMixinStr_CT_R_UNRECOGNIZED_SIGNATURE_NID = `enum CT_R_UNRECOGNIZED_SIGNATURE_NID = 101;`;
        static if(is(typeof({ mixin(enumMixinStr_CT_R_UNRECOGNIZED_SIGNATURE_NID); }))) {
            mixin(enumMixinStr_CT_R_UNRECOGNIZED_SIGNATURE_NID);
        }
    }




    static if(!is(typeof(CT_R_SCT_UNSUPPORTED_VERSION))) {
        private enum enumMixinStr_CT_R_SCT_UNSUPPORTED_VERSION = `enum CT_R_SCT_UNSUPPORTED_VERSION = 115;`;
        static if(is(typeof({ mixin(enumMixinStr_CT_R_SCT_UNSUPPORTED_VERSION); }))) {
            mixin(enumMixinStr_CT_R_SCT_UNSUPPORTED_VERSION);
        }
    }




    static if(!is(typeof(CT_R_SCT_NOT_SET))) {
        private enum enumMixinStr_CT_R_SCT_NOT_SET = `enum CT_R_SCT_NOT_SET = 106;`;
        static if(is(typeof({ mixin(enumMixinStr_CT_R_SCT_NOT_SET); }))) {
            mixin(enumMixinStr_CT_R_SCT_NOT_SET);
        }
    }




    static if(!is(typeof(CT_R_SCT_LOG_ID_MISMATCH))) {
        private enum enumMixinStr_CT_R_SCT_LOG_ID_MISMATCH = `enum CT_R_SCT_LOG_ID_MISMATCH = 114;`;
        static if(is(typeof({ mixin(enumMixinStr_CT_R_SCT_LOG_ID_MISMATCH); }))) {
            mixin(enumMixinStr_CT_R_SCT_LOG_ID_MISMATCH);
        }
    }




    static if(!is(typeof(CT_R_SCT_LIST_INVALID))) {
        private enum enumMixinStr_CT_R_SCT_LIST_INVALID = `enum CT_R_SCT_LIST_INVALID = 105;`;
        static if(is(typeof({ mixin(enumMixinStr_CT_R_SCT_LIST_INVALID); }))) {
            mixin(enumMixinStr_CT_R_SCT_LIST_INVALID);
        }
    }




    static if(!is(typeof(CT_R_SCT_INVALID_SIGNATURE))) {
        private enum enumMixinStr_CT_R_SCT_INVALID_SIGNATURE = `enum CT_R_SCT_INVALID_SIGNATURE = 107;`;
        static if(is(typeof({ mixin(enumMixinStr_CT_R_SCT_INVALID_SIGNATURE); }))) {
            mixin(enumMixinStr_CT_R_SCT_INVALID_SIGNATURE);
        }
    }




    static if(!is(typeof(CT_R_SCT_INVALID))) {
        private enum enumMixinStr_CT_R_SCT_INVALID = `enum CT_R_SCT_INVALID = 104;`;
        static if(is(typeof({ mixin(enumMixinStr_CT_R_SCT_INVALID); }))) {
            mixin(enumMixinStr_CT_R_SCT_INVALID);
        }
    }




    static if(!is(typeof(CT_R_LOG_KEY_INVALID))) {
        private enum enumMixinStr_CT_R_LOG_KEY_INVALID = `enum CT_R_LOG_KEY_INVALID = 113;`;
        static if(is(typeof({ mixin(enumMixinStr_CT_R_LOG_KEY_INVALID); }))) {
            mixin(enumMixinStr_CT_R_LOG_KEY_INVALID);
        }
    }




    static if(!is(typeof(CT_R_LOG_CONF_MISSING_KEY))) {
        private enum enumMixinStr_CT_R_LOG_CONF_MISSING_KEY = `enum CT_R_LOG_CONF_MISSING_KEY = 112;`;
        static if(is(typeof({ mixin(enumMixinStr_CT_R_LOG_CONF_MISSING_KEY); }))) {
            mixin(enumMixinStr_CT_R_LOG_CONF_MISSING_KEY);
        }
    }




    static if(!is(typeof(CT_R_LOG_CONF_MISSING_DESCRIPTION))) {
        private enum enumMixinStr_CT_R_LOG_CONF_MISSING_DESCRIPTION = `enum CT_R_LOG_CONF_MISSING_DESCRIPTION = 111;`;
        static if(is(typeof({ mixin(enumMixinStr_CT_R_LOG_CONF_MISSING_DESCRIPTION); }))) {
            mixin(enumMixinStr_CT_R_LOG_CONF_MISSING_DESCRIPTION);
        }
    }




    static if(!is(typeof(CT_R_LOG_CONF_INVALID_KEY))) {
        private enum enumMixinStr_CT_R_LOG_CONF_INVALID_KEY = `enum CT_R_LOG_CONF_INVALID_KEY = 110;`;
        static if(is(typeof({ mixin(enumMixinStr_CT_R_LOG_CONF_INVALID_KEY); }))) {
            mixin(enumMixinStr_CT_R_LOG_CONF_INVALID_KEY);
        }
    }




    static if(!is(typeof(CT_R_LOG_CONF_INVALID))) {
        private enum enumMixinStr_CT_R_LOG_CONF_INVALID = `enum CT_R_LOG_CONF_INVALID = 109;`;
        static if(is(typeof({ mixin(enumMixinStr_CT_R_LOG_CONF_INVALID); }))) {
            mixin(enumMixinStr_CT_R_LOG_CONF_INVALID);
        }
    }




    static if(!is(typeof(CT_R_INVALID_LOG_ID_LENGTH))) {
        private enum enumMixinStr_CT_R_INVALID_LOG_ID_LENGTH = `enum CT_R_INVALID_LOG_ID_LENGTH = 100;`;
        static if(is(typeof({ mixin(enumMixinStr_CT_R_INVALID_LOG_ID_LENGTH); }))) {
            mixin(enumMixinStr_CT_R_INVALID_LOG_ID_LENGTH);
        }
    }




    static if(!is(typeof(CT_R_BASE64_DECODE_ERROR))) {
        private enum enumMixinStr_CT_R_BASE64_DECODE_ERROR = `enum CT_R_BASE64_DECODE_ERROR = 108;`;
        static if(is(typeof({ mixin(enumMixinStr_CT_R_BASE64_DECODE_ERROR); }))) {
            mixin(enumMixinStr_CT_R_BASE64_DECODE_ERROR);
        }
    }




    static if(!is(typeof(CT_F_SCT_CTX_VERIFY))) {
        private enum enumMixinStr_CT_F_SCT_CTX_VERIFY = `enum CT_F_SCT_CTX_VERIFY = 128;`;
        static if(is(typeof({ mixin(enumMixinStr_CT_F_SCT_CTX_VERIFY); }))) {
            mixin(enumMixinStr_CT_F_SCT_CTX_VERIFY);
        }
    }




    static if(!is(typeof(CT_F_SCT_SET_VERSION))) {
        private enum enumMixinStr_CT_F_SCT_SET_VERSION = `enum CT_F_SCT_SET_VERSION = 104;`;
        static if(is(typeof({ mixin(enumMixinStr_CT_F_SCT_SET_VERSION); }))) {
            mixin(enumMixinStr_CT_F_SCT_SET_VERSION);
        }
    }




    static if(!is(typeof(CT_F_SCT_SET_SIGNATURE_NID))) {
        private enum enumMixinStr_CT_F_SCT_SET_SIGNATURE_NID = `enum CT_F_SCT_SET_SIGNATURE_NID = 103;`;
        static if(is(typeof({ mixin(enumMixinStr_CT_F_SCT_SET_SIGNATURE_NID); }))) {
            mixin(enumMixinStr_CT_F_SCT_SET_SIGNATURE_NID);
        }
    }




    static if(!is(typeof(CT_F_SCT_SET_LOG_ENTRY_TYPE))) {
        private enum enumMixinStr_CT_F_SCT_SET_LOG_ENTRY_TYPE = `enum CT_F_SCT_SET_LOG_ENTRY_TYPE = 102;`;
        static if(is(typeof({ mixin(enumMixinStr_CT_F_SCT_SET_LOG_ENTRY_TYPE); }))) {
            mixin(enumMixinStr_CT_F_SCT_SET_LOG_ENTRY_TYPE);
        }
    }




    static if(!is(typeof(CT_F_SCT_SET1_SIGNATURE))) {
        private enum enumMixinStr_CT_F_SCT_SET1_SIGNATURE = `enum CT_F_SCT_SET1_SIGNATURE = 116;`;
        static if(is(typeof({ mixin(enumMixinStr_CT_F_SCT_SET1_SIGNATURE); }))) {
            mixin(enumMixinStr_CT_F_SCT_SET1_SIGNATURE);
        }
    }




    static if(!is(typeof(CT_F_SCT_SET1_LOG_ID))) {
        private enum enumMixinStr_CT_F_SCT_SET1_LOG_ID = `enum CT_F_SCT_SET1_LOG_ID = 115;`;
        static if(is(typeof({ mixin(enumMixinStr_CT_F_SCT_SET1_LOG_ID); }))) {
            mixin(enumMixinStr_CT_F_SCT_SET1_LOG_ID);
        }
    }




    static if(!is(typeof(CT_F_SCT_SET1_EXTENSIONS))) {
        private enum enumMixinStr_CT_F_SCT_SET1_EXTENSIONS = `enum CT_F_SCT_SET1_EXTENSIONS = 114;`;
        static if(is(typeof({ mixin(enumMixinStr_CT_F_SCT_SET1_EXTENSIONS); }))) {
            mixin(enumMixinStr_CT_F_SCT_SET1_EXTENSIONS);
        }
    }




    static if(!is(typeof(CT_F_SCT_SET0_LOG_ID))) {
        private enum enumMixinStr_CT_F_SCT_SET0_LOG_ID = `enum CT_F_SCT_SET0_LOG_ID = 101;`;
        static if(is(typeof({ mixin(enumMixinStr_CT_F_SCT_SET0_LOG_ID); }))) {
            mixin(enumMixinStr_CT_F_SCT_SET0_LOG_ID);
        }
    }




    static if(!is(typeof(CT_F_SCT_NEW_FROM_BASE64))) {
        private enum enumMixinStr_CT_F_SCT_NEW_FROM_BASE64 = `enum CT_F_SCT_NEW_FROM_BASE64 = 127;`;
        static if(is(typeof({ mixin(enumMixinStr_CT_F_SCT_NEW_FROM_BASE64); }))) {
            mixin(enumMixinStr_CT_F_SCT_NEW_FROM_BASE64);
        }
    }




    static if(!is(typeof(CT_F_SCT_NEW))) {
        private enum enumMixinStr_CT_F_SCT_NEW = `enum CT_F_SCT_NEW = 100;`;
        static if(is(typeof({ mixin(enumMixinStr_CT_F_SCT_NEW); }))) {
            mixin(enumMixinStr_CT_F_SCT_NEW);
        }
    }




    static if(!is(typeof(CT_F_SCT_CTX_NEW))) {
        private enum enumMixinStr_CT_F_SCT_CTX_NEW = `enum CT_F_SCT_CTX_NEW = 126;`;
        static if(is(typeof({ mixin(enumMixinStr_CT_F_SCT_CTX_NEW); }))) {
            mixin(enumMixinStr_CT_F_SCT_CTX_NEW);
        }
    }




    static if(!is(typeof(CT_F_O2I_SCT_SIGNATURE))) {
        private enum enumMixinStr_CT_F_O2I_SCT_SIGNATURE = `enum CT_F_O2I_SCT_SIGNATURE = 112;`;
        static if(is(typeof({ mixin(enumMixinStr_CT_F_O2I_SCT_SIGNATURE); }))) {
            mixin(enumMixinStr_CT_F_O2I_SCT_SIGNATURE);
        }
    }




    static if(!is(typeof(CT_F_O2I_SCT_LIST))) {
        private enum enumMixinStr_CT_F_O2I_SCT_LIST = `enum CT_F_O2I_SCT_LIST = 111;`;
        static if(is(typeof({ mixin(enumMixinStr_CT_F_O2I_SCT_LIST); }))) {
            mixin(enumMixinStr_CT_F_O2I_SCT_LIST);
        }
    }




    static if(!is(typeof(CT_F_O2I_SCT))) {
        private enum enumMixinStr_CT_F_O2I_SCT = `enum CT_F_O2I_SCT = 110;`;
        static if(is(typeof({ mixin(enumMixinStr_CT_F_O2I_SCT); }))) {
            mixin(enumMixinStr_CT_F_O2I_SCT);
        }
    }




    static if(!is(typeof(CT_F_I2O_SCT_SIGNATURE))) {
        private enum enumMixinStr_CT_F_I2O_SCT_SIGNATURE = `enum CT_F_I2O_SCT_SIGNATURE = 109;`;
        static if(is(typeof({ mixin(enumMixinStr_CT_F_I2O_SCT_SIGNATURE); }))) {
            mixin(enumMixinStr_CT_F_I2O_SCT_SIGNATURE);
        }
    }




    static if(!is(typeof(CT_F_I2O_SCT_LIST))) {
        private enum enumMixinStr_CT_F_I2O_SCT_LIST = `enum CT_F_I2O_SCT_LIST = 108;`;
        static if(is(typeof({ mixin(enumMixinStr_CT_F_I2O_SCT_LIST); }))) {
            mixin(enumMixinStr_CT_F_I2O_SCT_LIST);
        }
    }




    static if(!is(typeof(CT_F_I2O_SCT))) {
        private enum enumMixinStr_CT_F_I2O_SCT = `enum CT_F_I2O_SCT = 107;`;
        static if(is(typeof({ mixin(enumMixinStr_CT_F_I2O_SCT); }))) {
            mixin(enumMixinStr_CT_F_I2O_SCT);
        }
    }




    static if(!is(typeof(CT_F_CT_V1_LOG_ID_FROM_PKEY))) {
        private enum enumMixinStr_CT_F_CT_V1_LOG_ID_FROM_PKEY = `enum CT_F_CT_V1_LOG_ID_FROM_PKEY = 125;`;
        static if(is(typeof({ mixin(enumMixinStr_CT_F_CT_V1_LOG_ID_FROM_PKEY); }))) {
            mixin(enumMixinStr_CT_F_CT_V1_LOG_ID_FROM_PKEY);
        }
    }




    static if(!is(typeof(CT_F_CT_POLICY_EVAL_CTX_NEW))) {
        private enum enumMixinStr_CT_F_CT_POLICY_EVAL_CTX_NEW = `enum CT_F_CT_POLICY_EVAL_CTX_NEW = 133;`;
        static if(is(typeof({ mixin(enumMixinStr_CT_F_CT_POLICY_EVAL_CTX_NEW); }))) {
            mixin(enumMixinStr_CT_F_CT_POLICY_EVAL_CTX_NEW);
        }
    }




    static if(!is(typeof(CT_F_CT_BASE64_DECODE))) {
        private enum enumMixinStr_CT_F_CT_BASE64_DECODE = `enum CT_F_CT_BASE64_DECODE = 124;`;
        static if(is(typeof({ mixin(enumMixinStr_CT_F_CT_BASE64_DECODE); }))) {
            mixin(enumMixinStr_CT_F_CT_BASE64_DECODE);
        }
    }




    static if(!is(typeof(CT_F_CTLOG_STORE_NEW))) {
        private enum enumMixinStr_CT_F_CTLOG_STORE_NEW = `enum CT_F_CTLOG_STORE_NEW = 131;`;
        static if(is(typeof({ mixin(enumMixinStr_CT_F_CTLOG_STORE_NEW); }))) {
            mixin(enumMixinStr_CT_F_CTLOG_STORE_NEW);
        }
    }




    static if(!is(typeof(CT_F_CTLOG_STORE_LOAD_LOG))) {
        private enum enumMixinStr_CT_F_CTLOG_STORE_LOAD_LOG = `enum CT_F_CTLOG_STORE_LOAD_LOG = 130;`;
        static if(is(typeof({ mixin(enumMixinStr_CT_F_CTLOG_STORE_LOAD_LOG); }))) {
            mixin(enumMixinStr_CT_F_CTLOG_STORE_LOAD_LOG);
        }
    }




    static if(!is(typeof(CT_F_CTLOG_STORE_LOAD_FILE))) {
        private enum enumMixinStr_CT_F_CTLOG_STORE_LOAD_FILE = `enum CT_F_CTLOG_STORE_LOAD_FILE = 123;`;
        static if(is(typeof({ mixin(enumMixinStr_CT_F_CTLOG_STORE_LOAD_FILE); }))) {
            mixin(enumMixinStr_CT_F_CTLOG_STORE_LOAD_FILE);
        }
    }




    static if(!is(typeof(CT_F_CTLOG_STORE_LOAD_CTX_NEW))) {
        private enum enumMixinStr_CT_F_CTLOG_STORE_LOAD_CTX_NEW = `enum CT_F_CTLOG_STORE_LOAD_CTX_NEW = 122;`;
        static if(is(typeof({ mixin(enumMixinStr_CT_F_CTLOG_STORE_LOAD_CTX_NEW); }))) {
            mixin(enumMixinStr_CT_F_CTLOG_STORE_LOAD_CTX_NEW);
        }
    }




    static if(!is(typeof(CT_F_CTLOG_NEW_NULL))) {
        private enum enumMixinStr_CT_F_CTLOG_NEW_NULL = `enum CT_F_CTLOG_NEW_NULL = 120;`;
        static if(is(typeof({ mixin(enumMixinStr_CT_F_CTLOG_NEW_NULL); }))) {
            mixin(enumMixinStr_CT_F_CTLOG_NEW_NULL);
        }
    }




    static if(!is(typeof(CT_F_CTLOG_NEW_FROM_CONF))) {
        private enum enumMixinStr_CT_F_CTLOG_NEW_FROM_CONF = `enum CT_F_CTLOG_NEW_FROM_CONF = 119;`;
        static if(is(typeof({ mixin(enumMixinStr_CT_F_CTLOG_NEW_FROM_CONF); }))) {
            mixin(enumMixinStr_CT_F_CTLOG_NEW_FROM_CONF);
        }
    }




    static if(!is(typeof(CT_F_CTLOG_NEW_FROM_BASE64))) {
        private enum enumMixinStr_CT_F_CTLOG_NEW_FROM_BASE64 = `enum CT_F_CTLOG_NEW_FROM_BASE64 = 118;`;
        static if(is(typeof({ mixin(enumMixinStr_CT_F_CTLOG_NEW_FROM_BASE64); }))) {
            mixin(enumMixinStr_CT_F_CTLOG_NEW_FROM_BASE64);
        }
    }




    static if(!is(typeof(CT_F_CTLOG_NEW))) {
        private enum enumMixinStr_CT_F_CTLOG_NEW = `enum CT_F_CTLOG_NEW = 117;`;
        static if(is(typeof({ mixin(enumMixinStr_CT_F_CTLOG_NEW); }))) {
            mixin(enumMixinStr_CT_F_CTLOG_NEW);
        }
    }




    static if(!is(typeof(CT_V1_HASHLEN))) {
        private enum enumMixinStr_CT_V1_HASHLEN = `enum CT_V1_HASHLEN = 32;`;
        static if(is(typeof({ mixin(enumMixinStr_CT_V1_HASHLEN); }))) {
            mixin(enumMixinStr_CT_V1_HASHLEN);
        }
    }




    static if(!is(typeof(SCT_MIN_RSA_BITS))) {
        private enum enumMixinStr_SCT_MIN_RSA_BITS = `enum SCT_MIN_RSA_BITS = 2048;`;
        static if(is(typeof({ mixin(enumMixinStr_SCT_MIN_RSA_BITS); }))) {
            mixin(enumMixinStr_SCT_MIN_RSA_BITS);
        }
    }
    static if(!is(typeof(CMS_R_WRAP_ERROR))) {
        private enum enumMixinStr_CMS_R_WRAP_ERROR = `enum CMS_R_WRAP_ERROR = 159;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_R_WRAP_ERROR); }))) {
            mixin(enumMixinStr_CMS_R_WRAP_ERROR);
        }
    }




    static if(!is(typeof(CMS_R_VERIFICATION_FAILURE))) {
        private enum enumMixinStr_CMS_R_VERIFICATION_FAILURE = `enum CMS_R_VERIFICATION_FAILURE = 158;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_R_VERIFICATION_FAILURE); }))) {
            mixin(enumMixinStr_CMS_R_VERIFICATION_FAILURE);
        }
    }




    static if(!is(typeof(CMS_R_UNWRAP_FAILURE))) {
        private enum enumMixinStr_CMS_R_UNWRAP_FAILURE = `enum CMS_R_UNWRAP_FAILURE = 180;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_R_UNWRAP_FAILURE); }))) {
            mixin(enumMixinStr_CMS_R_UNWRAP_FAILURE);
        }
    }




    static if(!is(typeof(CMS_R_UNWRAP_ERROR))) {
        private enum enumMixinStr_CMS_R_UNWRAP_ERROR = `enum CMS_R_UNWRAP_ERROR = 157;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_R_UNWRAP_ERROR); }))) {
            mixin(enumMixinStr_CMS_R_UNWRAP_ERROR);
        }
    }




    static if(!is(typeof(CMS_R_UNSUPPORTED_TYPE))) {
        private enum enumMixinStr_CMS_R_UNSUPPORTED_TYPE = `enum CMS_R_UNSUPPORTED_TYPE = 156;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_R_UNSUPPORTED_TYPE); }))) {
            mixin(enumMixinStr_CMS_R_UNSUPPORTED_TYPE);
        }
    }




    static if(!is(typeof(CMS_R_UNSUPPORTED_RECPIENTINFO_TYPE))) {
        private enum enumMixinStr_CMS_R_UNSUPPORTED_RECPIENTINFO_TYPE = `enum CMS_R_UNSUPPORTED_RECPIENTINFO_TYPE = 155;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_R_UNSUPPORTED_RECPIENTINFO_TYPE); }))) {
            mixin(enumMixinStr_CMS_R_UNSUPPORTED_RECPIENTINFO_TYPE);
        }
    }




    static if(!is(typeof(CMS_R_UNSUPPORTED_RECIPIENT_TYPE))) {
        private enum enumMixinStr_CMS_R_UNSUPPORTED_RECIPIENT_TYPE = `enum CMS_R_UNSUPPORTED_RECIPIENT_TYPE = 154;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_R_UNSUPPORTED_RECIPIENT_TYPE); }))) {
            mixin(enumMixinStr_CMS_R_UNSUPPORTED_RECIPIENT_TYPE);
        }
    }




    static if(!is(typeof(CMS_R_UNSUPPORTED_KEY_ENCRYPTION_ALGORITHM))) {
        private enum enumMixinStr_CMS_R_UNSUPPORTED_KEY_ENCRYPTION_ALGORITHM = `enum CMS_R_UNSUPPORTED_KEY_ENCRYPTION_ALGORITHM = 179;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_R_UNSUPPORTED_KEY_ENCRYPTION_ALGORITHM); }))) {
            mixin(enumMixinStr_CMS_R_UNSUPPORTED_KEY_ENCRYPTION_ALGORITHM);
        }
    }




    static if(!is(typeof(CMS_R_UNSUPPORTED_KEK_ALGORITHM))) {
        private enum enumMixinStr_CMS_R_UNSUPPORTED_KEK_ALGORITHM = `enum CMS_R_UNSUPPORTED_KEK_ALGORITHM = 153;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_R_UNSUPPORTED_KEK_ALGORITHM); }))) {
            mixin(enumMixinStr_CMS_R_UNSUPPORTED_KEK_ALGORITHM);
        }
    }




    static if(!is(typeof(CMS_R_UNSUPPORTED_CONTENT_TYPE))) {
        private enum enumMixinStr_CMS_R_UNSUPPORTED_CONTENT_TYPE = `enum CMS_R_UNSUPPORTED_CONTENT_TYPE = 152;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_R_UNSUPPORTED_CONTENT_TYPE); }))) {
            mixin(enumMixinStr_CMS_R_UNSUPPORTED_CONTENT_TYPE);
        }
    }




    static if(!is(typeof(CMS_R_UNSUPPORTED_COMPRESSION_ALGORITHM))) {
        private enum enumMixinStr_CMS_R_UNSUPPORTED_COMPRESSION_ALGORITHM = `enum CMS_R_UNSUPPORTED_COMPRESSION_ALGORITHM = 151;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_R_UNSUPPORTED_COMPRESSION_ALGORITHM); }))) {
            mixin(enumMixinStr_CMS_R_UNSUPPORTED_COMPRESSION_ALGORITHM);
        }
    }




    static if(!is(typeof(CMS_R_UNKNOWN_ID))) {
        private enum enumMixinStr_CMS_R_UNKNOWN_ID = `enum CMS_R_UNKNOWN_ID = 150;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_R_UNKNOWN_ID); }))) {
            mixin(enumMixinStr_CMS_R_UNKNOWN_ID);
        }
    }




    static if(!is(typeof(CMS_R_UNKNOWN_DIGEST_ALGORIHM))) {
        private enum enumMixinStr_CMS_R_UNKNOWN_DIGEST_ALGORIHM = `enum CMS_R_UNKNOWN_DIGEST_ALGORIHM = 149;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_R_UNKNOWN_DIGEST_ALGORIHM); }))) {
            mixin(enumMixinStr_CMS_R_UNKNOWN_DIGEST_ALGORIHM);
        }
    }




    static if(!is(typeof(CMS_R_UNKNOWN_CIPHER))) {
        private enum enumMixinStr_CMS_R_UNKNOWN_CIPHER = `enum CMS_R_UNKNOWN_CIPHER = 148;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_R_UNKNOWN_CIPHER); }))) {
            mixin(enumMixinStr_CMS_R_UNKNOWN_CIPHER);
        }
    }




    static if(!is(typeof(CMS_R_UNABLE_TO_FINALIZE_CONTEXT))) {
        private enum enumMixinStr_CMS_R_UNABLE_TO_FINALIZE_CONTEXT = `enum CMS_R_UNABLE_TO_FINALIZE_CONTEXT = 147;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_R_UNABLE_TO_FINALIZE_CONTEXT); }))) {
            mixin(enumMixinStr_CMS_R_UNABLE_TO_FINALIZE_CONTEXT);
        }
    }




    static if(!is(typeof(CMS_R_TYPE_NOT_ENVELOPED_DATA))) {
        private enum enumMixinStr_CMS_R_TYPE_NOT_ENVELOPED_DATA = `enum CMS_R_TYPE_NOT_ENVELOPED_DATA = 146;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_R_TYPE_NOT_ENVELOPED_DATA); }))) {
            mixin(enumMixinStr_CMS_R_TYPE_NOT_ENVELOPED_DATA);
        }
    }




    static if(!is(typeof(CMS_R_TYPE_NOT_ENCRYPTED_DATA))) {
        private enum enumMixinStr_CMS_R_TYPE_NOT_ENCRYPTED_DATA = `enum CMS_R_TYPE_NOT_ENCRYPTED_DATA = 145;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_R_TYPE_NOT_ENCRYPTED_DATA); }))) {
            mixin(enumMixinStr_CMS_R_TYPE_NOT_ENCRYPTED_DATA);
        }
    }




    static if(!is(typeof(CMS_R_TYPE_NOT_DIGESTED_DATA))) {
        private enum enumMixinStr_CMS_R_TYPE_NOT_DIGESTED_DATA = `enum CMS_R_TYPE_NOT_DIGESTED_DATA = 144;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_R_TYPE_NOT_DIGESTED_DATA); }))) {
            mixin(enumMixinStr_CMS_R_TYPE_NOT_DIGESTED_DATA);
        }
    }




    static if(!is(typeof(CMS_R_TYPE_NOT_DATA))) {
        private enum enumMixinStr_CMS_R_TYPE_NOT_DATA = `enum CMS_R_TYPE_NOT_DATA = 143;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_R_TYPE_NOT_DATA); }))) {
            mixin(enumMixinStr_CMS_R_TYPE_NOT_DATA);
        }
    }




    static if(!is(typeof(CMS_R_TYPE_NOT_COMPRESSED_DATA))) {
        private enum enumMixinStr_CMS_R_TYPE_NOT_COMPRESSED_DATA = `enum CMS_R_TYPE_NOT_COMPRESSED_DATA = 142;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_R_TYPE_NOT_COMPRESSED_DATA); }))) {
            mixin(enumMixinStr_CMS_R_TYPE_NOT_COMPRESSED_DATA);
        }
    }




    static if(!is(typeof(CMS_R_STORE_INIT_ERROR))) {
        private enum enumMixinStr_CMS_R_STORE_INIT_ERROR = `enum CMS_R_STORE_INIT_ERROR = 141;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_R_STORE_INIT_ERROR); }))) {
            mixin(enumMixinStr_CMS_R_STORE_INIT_ERROR);
        }
    }




    static if(!is(typeof(CMS_R_SMIME_TEXT_ERROR))) {
        private enum enumMixinStr_CMS_R_SMIME_TEXT_ERROR = `enum CMS_R_SMIME_TEXT_ERROR = 140;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_R_SMIME_TEXT_ERROR); }))) {
            mixin(enumMixinStr_CMS_R_SMIME_TEXT_ERROR);
        }
    }




    static if(!is(typeof(CMS_R_SIGNFINAL_ERROR))) {
        private enum enumMixinStr_CMS_R_SIGNFINAL_ERROR = `enum CMS_R_SIGNFINAL_ERROR = 139;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_R_SIGNFINAL_ERROR); }))) {
            mixin(enumMixinStr_CMS_R_SIGNFINAL_ERROR);
        }
    }




    static if(!is(typeof(CMS_R_SIGNER_CERTIFICATE_NOT_FOUND))) {
        private enum enumMixinStr_CMS_R_SIGNER_CERTIFICATE_NOT_FOUND = `enum CMS_R_SIGNER_CERTIFICATE_NOT_FOUND = 138;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_R_SIGNER_CERTIFICATE_NOT_FOUND); }))) {
            mixin(enumMixinStr_CMS_R_SIGNER_CERTIFICATE_NOT_FOUND);
        }
    }




    static if(!is(typeof(CMS_R_RECIPIENT_ERROR))) {
        private enum enumMixinStr_CMS_R_RECIPIENT_ERROR = `enum CMS_R_RECIPIENT_ERROR = 137;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_R_RECIPIENT_ERROR); }))) {
            mixin(enumMixinStr_CMS_R_RECIPIENT_ERROR);
        }
    }




    static if(!is(typeof(CMS_R_RECEIPT_DECODE_ERROR))) {
        private enum enumMixinStr_CMS_R_RECEIPT_DECODE_ERROR = `enum CMS_R_RECEIPT_DECODE_ERROR = 169;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_R_RECEIPT_DECODE_ERROR); }))) {
            mixin(enumMixinStr_CMS_R_RECEIPT_DECODE_ERROR);
        }
    }




    static if(!is(typeof(CMS_R_PRIVATE_KEY_DOES_NOT_MATCH_CERTIFICATE))) {
        private enum enumMixinStr_CMS_R_PRIVATE_KEY_DOES_NOT_MATCH_CERTIFICATE = `enum CMS_R_PRIVATE_KEY_DOES_NOT_MATCH_CERTIFICATE = 136;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_R_PRIVATE_KEY_DOES_NOT_MATCH_CERTIFICATE); }))) {
            mixin(enumMixinStr_CMS_R_PRIVATE_KEY_DOES_NOT_MATCH_CERTIFICATE);
        }
    }




    static if(!is(typeof(CMS_R_NO_SIGNERS))) {
        private enum enumMixinStr_CMS_R_NO_SIGNERS = `enum CMS_R_NO_SIGNERS = 135;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_R_NO_SIGNERS); }))) {
            mixin(enumMixinStr_CMS_R_NO_SIGNERS);
        }
    }




    static if(!is(typeof(CMS_R_NO_RECEIPT_REQUEST))) {
        private enum enumMixinStr_CMS_R_NO_RECEIPT_REQUEST = `enum CMS_R_NO_RECEIPT_REQUEST = 168;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_R_NO_RECEIPT_REQUEST); }))) {
            mixin(enumMixinStr_CMS_R_NO_RECEIPT_REQUEST);
        }
    }




    static if(!is(typeof(CMS_R_NO_PUBLIC_KEY))) {
        private enum enumMixinStr_CMS_R_NO_PUBLIC_KEY = `enum CMS_R_NO_PUBLIC_KEY = 134;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_R_NO_PUBLIC_KEY); }))) {
            mixin(enumMixinStr_CMS_R_NO_PUBLIC_KEY);
        }
    }




    static if(!is(typeof(CMS_R_NO_PRIVATE_KEY))) {
        private enum enumMixinStr_CMS_R_NO_PRIVATE_KEY = `enum CMS_R_NO_PRIVATE_KEY = 133;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_R_NO_PRIVATE_KEY); }))) {
            mixin(enumMixinStr_CMS_R_NO_PRIVATE_KEY);
        }
    }




    static if(!is(typeof(CMS_R_NO_PASSWORD))) {
        private enum enumMixinStr_CMS_R_NO_PASSWORD = `enum CMS_R_NO_PASSWORD = 178;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_R_NO_PASSWORD); }))) {
            mixin(enumMixinStr_CMS_R_NO_PASSWORD);
        }
    }




    static if(!is(typeof(CMS_R_NO_MSGSIGDIGEST))) {
        private enum enumMixinStr_CMS_R_NO_MSGSIGDIGEST = `enum CMS_R_NO_MSGSIGDIGEST = 167;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_R_NO_MSGSIGDIGEST); }))) {
            mixin(enumMixinStr_CMS_R_NO_MSGSIGDIGEST);
        }
    }




    static if(!is(typeof(CMS_R_NO_MATCHING_SIGNATURE))) {
        private enum enumMixinStr_CMS_R_NO_MATCHING_SIGNATURE = `enum CMS_R_NO_MATCHING_SIGNATURE = 166;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_R_NO_MATCHING_SIGNATURE); }))) {
            mixin(enumMixinStr_CMS_R_NO_MATCHING_SIGNATURE);
        }
    }




    static if(!is(typeof(CMS_R_NO_MATCHING_RECIPIENT))) {
        private enum enumMixinStr_CMS_R_NO_MATCHING_RECIPIENT = `enum CMS_R_NO_MATCHING_RECIPIENT = 132;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_R_NO_MATCHING_RECIPIENT); }))) {
            mixin(enumMixinStr_CMS_R_NO_MATCHING_RECIPIENT);
        }
    }




    static if(!is(typeof(CMS_R_NO_MATCHING_DIGEST))) {
        private enum enumMixinStr_CMS_R_NO_MATCHING_DIGEST = `enum CMS_R_NO_MATCHING_DIGEST = 131;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_R_NO_MATCHING_DIGEST); }))) {
            mixin(enumMixinStr_CMS_R_NO_MATCHING_DIGEST);
        }
    }




    static if(!is(typeof(CMS_R_NO_KEY_OR_CERT))) {
        private enum enumMixinStr_CMS_R_NO_KEY_OR_CERT = `enum CMS_R_NO_KEY_OR_CERT = 174;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_R_NO_KEY_OR_CERT); }))) {
            mixin(enumMixinStr_CMS_R_NO_KEY_OR_CERT);
        }
    }




    static if(!is(typeof(CMS_R_NO_KEY))) {
        private enum enumMixinStr_CMS_R_NO_KEY = `enum CMS_R_NO_KEY = 130;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_R_NO_KEY); }))) {
            mixin(enumMixinStr_CMS_R_NO_KEY);
        }
    }




    static if(!is(typeof(CMS_R_NO_DIGEST_SET))) {
        private enum enumMixinStr_CMS_R_NO_DIGEST_SET = `enum CMS_R_NO_DIGEST_SET = 129;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_R_NO_DIGEST_SET); }))) {
            mixin(enumMixinStr_CMS_R_NO_DIGEST_SET);
        }
    }




    static if(!is(typeof(CMS_R_NO_DEFAULT_DIGEST))) {
        private enum enumMixinStr_CMS_R_NO_DEFAULT_DIGEST = `enum CMS_R_NO_DEFAULT_DIGEST = 128;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_R_NO_DEFAULT_DIGEST); }))) {
            mixin(enumMixinStr_CMS_R_NO_DEFAULT_DIGEST);
        }
    }




    static if(!is(typeof(CMS_R_NO_CONTENT_TYPE))) {
        private enum enumMixinStr_CMS_R_NO_CONTENT_TYPE = `enum CMS_R_NO_CONTENT_TYPE = 173;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_R_NO_CONTENT_TYPE); }))) {
            mixin(enumMixinStr_CMS_R_NO_CONTENT_TYPE);
        }
    }




    static if(!is(typeof(CMS_R_NO_CONTENT))) {
        private enum enumMixinStr_CMS_R_NO_CONTENT = `enum CMS_R_NO_CONTENT = 127;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_R_NO_CONTENT); }))) {
            mixin(enumMixinStr_CMS_R_NO_CONTENT);
        }
    }




    static if(!is(typeof(CMS_R_NO_CIPHER))) {
        private enum enumMixinStr_CMS_R_NO_CIPHER = `enum CMS_R_NO_CIPHER = 126;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_R_NO_CIPHER); }))) {
            mixin(enumMixinStr_CMS_R_NO_CIPHER);
        }
    }




    static if(!is(typeof(CMS_R_NOT_SUPPORTED_FOR_THIS_KEY_TYPE))) {
        private enum enumMixinStr_CMS_R_NOT_SUPPORTED_FOR_THIS_KEY_TYPE = `enum CMS_R_NOT_SUPPORTED_FOR_THIS_KEY_TYPE = 125;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_R_NOT_SUPPORTED_FOR_THIS_KEY_TYPE); }))) {
            mixin(enumMixinStr_CMS_R_NOT_SUPPORTED_FOR_THIS_KEY_TYPE);
        }
    }




    static if(!is(typeof(CMS_R_NOT_PWRI))) {
        private enum enumMixinStr_CMS_R_NOT_PWRI = `enum CMS_R_NOT_PWRI = 177;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_R_NOT_PWRI); }))) {
            mixin(enumMixinStr_CMS_R_NOT_PWRI);
        }
    }




    static if(!is(typeof(CMS_R_NOT_KEY_TRANSPORT))) {
        private enum enumMixinStr_CMS_R_NOT_KEY_TRANSPORT = `enum CMS_R_NOT_KEY_TRANSPORT = 124;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_R_NOT_KEY_TRANSPORT); }))) {
            mixin(enumMixinStr_CMS_R_NOT_KEY_TRANSPORT);
        }
    }




    static if(!is(typeof(CMS_R_NOT_KEY_AGREEMENT))) {
        private enum enumMixinStr_CMS_R_NOT_KEY_AGREEMENT = `enum CMS_R_NOT_KEY_AGREEMENT = 181;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_R_NOT_KEY_AGREEMENT); }))) {
            mixin(enumMixinStr_CMS_R_NOT_KEY_AGREEMENT);
        }
    }




    static if(!is(typeof(CMS_R_NOT_KEK))) {
        private enum enumMixinStr_CMS_R_NOT_KEK = `enum CMS_R_NOT_KEK = 123;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_R_NOT_KEK); }))) {
            mixin(enumMixinStr_CMS_R_NOT_KEK);
        }
    }




    static if(!is(typeof(CMS_R_NOT_ENCRYPTED_DATA))) {
        private enum enumMixinStr_CMS_R_NOT_ENCRYPTED_DATA = `enum CMS_R_NOT_ENCRYPTED_DATA = 122;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_R_NOT_ENCRYPTED_DATA); }))) {
            mixin(enumMixinStr_CMS_R_NOT_ENCRYPTED_DATA);
        }
    }




    static if(!is(typeof(CMS_R_NOT_A_SIGNED_RECEIPT))) {
        private enum enumMixinStr_CMS_R_NOT_A_SIGNED_RECEIPT = `enum CMS_R_NOT_A_SIGNED_RECEIPT = 165;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_R_NOT_A_SIGNED_RECEIPT); }))) {
            mixin(enumMixinStr_CMS_R_NOT_A_SIGNED_RECEIPT);
        }
    }




    static if(!is(typeof(CMS_R_NEED_ONE_SIGNER))) {
        private enum enumMixinStr_CMS_R_NEED_ONE_SIGNER = `enum CMS_R_NEED_ONE_SIGNER = 164;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_R_NEED_ONE_SIGNER); }))) {
            mixin(enumMixinStr_CMS_R_NEED_ONE_SIGNER);
        }
    }




    static if(!is(typeof(CMS_R_MSGSIGDIGEST_WRONG_LENGTH))) {
        private enum enumMixinStr_CMS_R_MSGSIGDIGEST_WRONG_LENGTH = `enum CMS_R_MSGSIGDIGEST_WRONG_LENGTH = 163;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_R_MSGSIGDIGEST_WRONG_LENGTH); }))) {
            mixin(enumMixinStr_CMS_R_MSGSIGDIGEST_WRONG_LENGTH);
        }
    }




    static if(!is(typeof(CMS_R_MSGSIGDIGEST_VERIFICATION_FAILURE))) {
        private enum enumMixinStr_CMS_R_MSGSIGDIGEST_VERIFICATION_FAILURE = `enum CMS_R_MSGSIGDIGEST_VERIFICATION_FAILURE = 162;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_R_MSGSIGDIGEST_VERIFICATION_FAILURE); }))) {
            mixin(enumMixinStr_CMS_R_MSGSIGDIGEST_VERIFICATION_FAILURE);
        }
    }




    static if(!is(typeof(CMS_R_MSGSIGDIGEST_ERROR))) {
        private enum enumMixinStr_CMS_R_MSGSIGDIGEST_ERROR = `enum CMS_R_MSGSIGDIGEST_ERROR = 172;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_R_MSGSIGDIGEST_ERROR); }))) {
            mixin(enumMixinStr_CMS_R_MSGSIGDIGEST_ERROR);
        }
    }




    static if(!is(typeof(CMS_R_MESSAGEDIGEST_WRONG_LENGTH))) {
        private enum enumMixinStr_CMS_R_MESSAGEDIGEST_WRONG_LENGTH = `enum CMS_R_MESSAGEDIGEST_WRONG_LENGTH = 121;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_R_MESSAGEDIGEST_WRONG_LENGTH); }))) {
            mixin(enumMixinStr_CMS_R_MESSAGEDIGEST_WRONG_LENGTH);
        }
    }




    static if(!is(typeof(CMS_R_MESSAGEDIGEST_ATTRIBUTE_WRONG_LENGTH))) {
        private enum enumMixinStr_CMS_R_MESSAGEDIGEST_ATTRIBUTE_WRONG_LENGTH = `enum CMS_R_MESSAGEDIGEST_ATTRIBUTE_WRONG_LENGTH = 120;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_R_MESSAGEDIGEST_ATTRIBUTE_WRONG_LENGTH); }))) {
            mixin(enumMixinStr_CMS_R_MESSAGEDIGEST_ATTRIBUTE_WRONG_LENGTH);
        }
    }




    static if(!is(typeof(CMS_R_MD_BIO_INIT_ERROR))) {
        private enum enumMixinStr_CMS_R_MD_BIO_INIT_ERROR = `enum CMS_R_MD_BIO_INIT_ERROR = 119;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_R_MD_BIO_INIT_ERROR); }))) {
            mixin(enumMixinStr_CMS_R_MD_BIO_INIT_ERROR);
        }
    }




    static if(!is(typeof(CMS_R_INVALID_KEY_LENGTH))) {
        private enum enumMixinStr_CMS_R_INVALID_KEY_LENGTH = `enum CMS_R_INVALID_KEY_LENGTH = 118;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_R_INVALID_KEY_LENGTH); }))) {
            mixin(enumMixinStr_CMS_R_INVALID_KEY_LENGTH);
        }
    }




    static if(!is(typeof(CMS_R_INVALID_KEY_ENCRYPTION_PARAMETER))) {
        private enum enumMixinStr_CMS_R_INVALID_KEY_ENCRYPTION_PARAMETER = `enum CMS_R_INVALID_KEY_ENCRYPTION_PARAMETER = 176;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_R_INVALID_KEY_ENCRYPTION_PARAMETER); }))) {
            mixin(enumMixinStr_CMS_R_INVALID_KEY_ENCRYPTION_PARAMETER);
        }
    }




    static if(!is(typeof(CMS_R_INVALID_ENCRYPTED_KEY_LENGTH))) {
        private enum enumMixinStr_CMS_R_INVALID_ENCRYPTED_KEY_LENGTH = `enum CMS_R_INVALID_ENCRYPTED_KEY_LENGTH = 117;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_R_INVALID_ENCRYPTED_KEY_LENGTH); }))) {
            mixin(enumMixinStr_CMS_R_INVALID_ENCRYPTED_KEY_LENGTH);
        }
    }




    static if(!is(typeof(CMS_R_ERROR_SETTING_RECIPIENTINFO))) {
        private enum enumMixinStr_CMS_R_ERROR_SETTING_RECIPIENTINFO = `enum CMS_R_ERROR_SETTING_RECIPIENTINFO = 116;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_R_ERROR_SETTING_RECIPIENTINFO); }))) {
            mixin(enumMixinStr_CMS_R_ERROR_SETTING_RECIPIENTINFO);
        }
    }




    static if(!is(typeof(CMS_R_ERROR_SETTING_KEY))) {
        private enum enumMixinStr_CMS_R_ERROR_SETTING_KEY = `enum CMS_R_ERROR_SETTING_KEY = 115;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_R_ERROR_SETTING_KEY); }))) {
            mixin(enumMixinStr_CMS_R_ERROR_SETTING_KEY);
        }
    }




    static if(!is(typeof(CMS_R_ERROR_READING_MESSAGEDIGEST_ATTRIBUTE))) {
        private enum enumMixinStr_CMS_R_ERROR_READING_MESSAGEDIGEST_ATTRIBUTE = `enum CMS_R_ERROR_READING_MESSAGEDIGEST_ATTRIBUTE = 114;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_R_ERROR_READING_MESSAGEDIGEST_ATTRIBUTE); }))) {
            mixin(enumMixinStr_CMS_R_ERROR_READING_MESSAGEDIGEST_ATTRIBUTE);
        }
    }




    static if(!is(typeof(CMS_R_ERROR_GETTING_PUBLIC_KEY))) {
        private enum enumMixinStr_CMS_R_ERROR_GETTING_PUBLIC_KEY = `enum CMS_R_ERROR_GETTING_PUBLIC_KEY = 113;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_R_ERROR_GETTING_PUBLIC_KEY); }))) {
            mixin(enumMixinStr_CMS_R_ERROR_GETTING_PUBLIC_KEY);
        }
    }




    static if(!is(typeof(CMS_R_DECRYPT_ERROR))) {
        private enum enumMixinStr_CMS_R_DECRYPT_ERROR = `enum CMS_R_DECRYPT_ERROR = 112;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_R_DECRYPT_ERROR); }))) {
            mixin(enumMixinStr_CMS_R_DECRYPT_ERROR);
        }
    }




    static if(!is(typeof(CMS_R_CTRL_FAILURE))) {
        private enum enumMixinStr_CMS_R_CTRL_FAILURE = `enum CMS_R_CTRL_FAILURE = 111;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_R_CTRL_FAILURE); }))) {
            mixin(enumMixinStr_CMS_R_CTRL_FAILURE);
        }
    }




    static if(!is(typeof(CMS_R_CTRL_ERROR))) {
        private enum enumMixinStr_CMS_R_CTRL_ERROR = `enum CMS_R_CTRL_ERROR = 110;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_R_CTRL_ERROR); }))) {
            mixin(enumMixinStr_CMS_R_CTRL_ERROR);
        }
    }




    static if(!is(typeof(CMS_R_CONTENT_VERIFY_ERROR))) {
        private enum enumMixinStr_CMS_R_CONTENT_VERIFY_ERROR = `enum CMS_R_CONTENT_VERIFY_ERROR = 109;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_R_CONTENT_VERIFY_ERROR); }))) {
            mixin(enumMixinStr_CMS_R_CONTENT_VERIFY_ERROR);
        }
    }




    static if(!is(typeof(CMS_R_CONTENT_TYPE_NOT_SIGNED_DATA))) {
        private enum enumMixinStr_CMS_R_CONTENT_TYPE_NOT_SIGNED_DATA = `enum CMS_R_CONTENT_TYPE_NOT_SIGNED_DATA = 108;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_R_CONTENT_TYPE_NOT_SIGNED_DATA); }))) {
            mixin(enumMixinStr_CMS_R_CONTENT_TYPE_NOT_SIGNED_DATA);
        }
    }




    static if(!is(typeof(CMS_R_CONTENT_TYPE_NOT_ENVELOPED_DATA))) {
        private enum enumMixinStr_CMS_R_CONTENT_TYPE_NOT_ENVELOPED_DATA = `enum CMS_R_CONTENT_TYPE_NOT_ENVELOPED_DATA = 107;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_R_CONTENT_TYPE_NOT_ENVELOPED_DATA); }))) {
            mixin(enumMixinStr_CMS_R_CONTENT_TYPE_NOT_ENVELOPED_DATA);
        }
    }




    static if(!is(typeof(CMS_R_CONTENT_TYPE_NOT_COMPRESSED_DATA))) {
        private enum enumMixinStr_CMS_R_CONTENT_TYPE_NOT_COMPRESSED_DATA = `enum CMS_R_CONTENT_TYPE_NOT_COMPRESSED_DATA = 106;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_R_CONTENT_TYPE_NOT_COMPRESSED_DATA); }))) {
            mixin(enumMixinStr_CMS_R_CONTENT_TYPE_NOT_COMPRESSED_DATA);
        }
    }




    static if(!is(typeof(CMS_R_CONTENT_TYPE_MISMATCH))) {
        private enum enumMixinStr_CMS_R_CONTENT_TYPE_MISMATCH = `enum CMS_R_CONTENT_TYPE_MISMATCH = 171;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_R_CONTENT_TYPE_MISMATCH); }))) {
            mixin(enumMixinStr_CMS_R_CONTENT_TYPE_MISMATCH);
        }
    }




    static if(!is(typeof(CMS_R_CONTENT_NOT_FOUND))) {
        private enum enumMixinStr_CMS_R_CONTENT_NOT_FOUND = `enum CMS_R_CONTENT_NOT_FOUND = 105;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_R_CONTENT_NOT_FOUND); }))) {
            mixin(enumMixinStr_CMS_R_CONTENT_NOT_FOUND);
        }
    }




    static if(!is(typeof(CMS_R_CONTENTIDENTIFIER_MISMATCH))) {
        private enum enumMixinStr_CMS_R_CONTENTIDENTIFIER_MISMATCH = `enum CMS_R_CONTENTIDENTIFIER_MISMATCH = 170;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_R_CONTENTIDENTIFIER_MISMATCH); }))) {
            mixin(enumMixinStr_CMS_R_CONTENTIDENTIFIER_MISMATCH);
        }
    }




    static if(!is(typeof(CMS_R_CMS_LIB))) {
        private enum enumMixinStr_CMS_R_CMS_LIB = `enum CMS_R_CMS_LIB = 104;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_R_CMS_LIB); }))) {
            mixin(enumMixinStr_CMS_R_CMS_LIB);
        }
    }




    static if(!is(typeof(CMS_R_CMS_DATAFINAL_ERROR))) {
        private enum enumMixinStr_CMS_R_CMS_DATAFINAL_ERROR = `enum CMS_R_CMS_DATAFINAL_ERROR = 103;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_R_CMS_DATAFINAL_ERROR); }))) {
            mixin(enumMixinStr_CMS_R_CMS_DATAFINAL_ERROR);
        }
    }




    static if(!is(typeof(CMS_R_CIPHER_PARAMETER_INITIALISATION_ERROR))) {
        private enum enumMixinStr_CMS_R_CIPHER_PARAMETER_INITIALISATION_ERROR = `enum CMS_R_CIPHER_PARAMETER_INITIALISATION_ERROR = 102;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_R_CIPHER_PARAMETER_INITIALISATION_ERROR); }))) {
            mixin(enumMixinStr_CMS_R_CIPHER_PARAMETER_INITIALISATION_ERROR);
        }
    }




    static if(!is(typeof(CMS_R_CIPHER_INITIALISATION_ERROR))) {
        private enum enumMixinStr_CMS_R_CIPHER_INITIALISATION_ERROR = `enum CMS_R_CIPHER_INITIALISATION_ERROR = 101;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_R_CIPHER_INITIALISATION_ERROR); }))) {
            mixin(enumMixinStr_CMS_R_CIPHER_INITIALISATION_ERROR);
        }
    }




    static if(!is(typeof(CMS_R_CERTIFICATE_VERIFY_ERROR))) {
        private enum enumMixinStr_CMS_R_CERTIFICATE_VERIFY_ERROR = `enum CMS_R_CERTIFICATE_VERIFY_ERROR = 100;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_R_CERTIFICATE_VERIFY_ERROR); }))) {
            mixin(enumMixinStr_CMS_R_CERTIFICATE_VERIFY_ERROR);
        }
    }




    static if(!is(typeof(CMS_R_CERTIFICATE_HAS_NO_KEYID))) {
        private enum enumMixinStr_CMS_R_CERTIFICATE_HAS_NO_KEYID = `enum CMS_R_CERTIFICATE_HAS_NO_KEYID = 160;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_R_CERTIFICATE_HAS_NO_KEYID); }))) {
            mixin(enumMixinStr_CMS_R_CERTIFICATE_HAS_NO_KEYID);
        }
    }




    static if(!is(typeof(CMS_R_CERTIFICATE_ALREADY_PRESENT))) {
        private enum enumMixinStr_CMS_R_CERTIFICATE_ALREADY_PRESENT = `enum CMS_R_CERTIFICATE_ALREADY_PRESENT = 175;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_R_CERTIFICATE_ALREADY_PRESENT); }))) {
            mixin(enumMixinStr_CMS_R_CERTIFICATE_ALREADY_PRESENT);
        }
    }




    static if(!is(typeof(CMS_R_ADD_SIGNER_ERROR))) {
        private enum enumMixinStr_CMS_R_ADD_SIGNER_ERROR = `enum CMS_R_ADD_SIGNER_ERROR = 99;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_R_ADD_SIGNER_ERROR); }))) {
            mixin(enumMixinStr_CMS_R_ADD_SIGNER_ERROR);
        }
    }




    static if(!is(typeof(CMS_F_CMS_VERIFY))) {
        private enum enumMixinStr_CMS_F_CMS_VERIFY = `enum CMS_F_CMS_VERIFY = 157;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_F_CMS_VERIFY); }))) {
            mixin(enumMixinStr_CMS_F_CMS_VERIFY);
        }
    }




    static if(!is(typeof(CMS_F_CMS_UNCOMPRESS))) {
        private enum enumMixinStr_CMS_F_CMS_UNCOMPRESS = `enum CMS_F_CMS_UNCOMPRESS = 156;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_F_CMS_UNCOMPRESS); }))) {
            mixin(enumMixinStr_CMS_F_CMS_UNCOMPRESS);
        }
    }




    static if(!is(typeof(CMS_F_CMS_STREAM))) {
        private enum enumMixinStr_CMS_F_CMS_STREAM = `enum CMS_F_CMS_STREAM = 155;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_F_CMS_STREAM); }))) {
            mixin(enumMixinStr_CMS_F_CMS_STREAM);
        }
    }




    static if(!is(typeof(CMS_F_CMS_SIGN_RECEIPT))) {
        private enum enumMixinStr_CMS_F_CMS_SIGN_RECEIPT = `enum CMS_F_CMS_SIGN_RECEIPT = 163;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_F_CMS_SIGN_RECEIPT); }))) {
            mixin(enumMixinStr_CMS_F_CMS_SIGN_RECEIPT);
        }
    }




    static if(!is(typeof(CMS_F_CMS_SIGNERINFO_VERIFY_CONTENT))) {
        private enum enumMixinStr_CMS_F_CMS_SIGNERINFO_VERIFY_CONTENT = `enum CMS_F_CMS_SIGNERINFO_VERIFY_CONTENT = 154;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_F_CMS_SIGNERINFO_VERIFY_CONTENT); }))) {
            mixin(enumMixinStr_CMS_F_CMS_SIGNERINFO_VERIFY_CONTENT);
        }
    }




    static if(!is(typeof(CMS_F_CMS_SIGNERINFO_VERIFY_CERT))) {
        private enum enumMixinStr_CMS_F_CMS_SIGNERINFO_VERIFY_CERT = `enum CMS_F_CMS_SIGNERINFO_VERIFY_CERT = 153;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_F_CMS_SIGNERINFO_VERIFY_CERT); }))) {
            mixin(enumMixinStr_CMS_F_CMS_SIGNERINFO_VERIFY_CERT);
        }
    }




    static if(!is(typeof(CMS_F_CMS_SIGNERINFO_VERIFY))) {
        private enum enumMixinStr_CMS_F_CMS_SIGNERINFO_VERIFY = `enum CMS_F_CMS_SIGNERINFO_VERIFY = 152;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_F_CMS_SIGNERINFO_VERIFY); }))) {
            mixin(enumMixinStr_CMS_F_CMS_SIGNERINFO_VERIFY);
        }
    }




    static if(!is(typeof(CMS_F_CMS_SIGNERINFO_SIGN))) {
        private enum enumMixinStr_CMS_F_CMS_SIGNERINFO_SIGN = `enum CMS_F_CMS_SIGNERINFO_SIGN = 151;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_F_CMS_SIGNERINFO_SIGN); }))) {
            mixin(enumMixinStr_CMS_F_CMS_SIGNERINFO_SIGN);
        }
    }




    static if(!is(typeof(CMS_F_CMS_SIGNERINFO_CONTENT_SIGN))) {
        private enum enumMixinStr_CMS_F_CMS_SIGNERINFO_CONTENT_SIGN = `enum CMS_F_CMS_SIGNERINFO_CONTENT_SIGN = 150;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_F_CMS_SIGNERINFO_CONTENT_SIGN); }))) {
            mixin(enumMixinStr_CMS_F_CMS_SIGNERINFO_CONTENT_SIGN);
        }
    }




    static if(!is(typeof(CMS_F_CMS_SIGNED_DATA_INIT))) {
        private enum enumMixinStr_CMS_F_CMS_SIGNED_DATA_INIT = `enum CMS_F_CMS_SIGNED_DATA_INIT = 149;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_F_CMS_SIGNED_DATA_INIT); }))) {
            mixin(enumMixinStr_CMS_F_CMS_SIGNED_DATA_INIT);
        }
    }




    static if(!is(typeof(CMS_F_CMS_SIGN))) {
        private enum enumMixinStr_CMS_F_CMS_SIGN = `enum CMS_F_CMS_SIGN = 148;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_F_CMS_SIGN); }))) {
            mixin(enumMixinStr_CMS_F_CMS_SIGN);
        }
    }




    static if(!is(typeof(CMS_F_CMS_SET_DETACHED))) {
        private enum enumMixinStr_CMS_F_CMS_SET_DETACHED = `enum CMS_F_CMS_SET_DETACHED = 147;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_F_CMS_SET_DETACHED); }))) {
            mixin(enumMixinStr_CMS_F_CMS_SET_DETACHED);
        }
    }




    static if(!is(typeof(CMS_F_CMS_SET1_SIGNERIDENTIFIER))) {
        private enum enumMixinStr_CMS_F_CMS_SET1_SIGNERIDENTIFIER = `enum CMS_F_CMS_SET1_SIGNERIDENTIFIER = 146;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_F_CMS_SET1_SIGNERIDENTIFIER); }))) {
            mixin(enumMixinStr_CMS_F_CMS_SET1_SIGNERIDENTIFIER);
        }
    }




    static if(!is(typeof(CMS_F_CMS_SET1_KEYID))) {
        private enum enumMixinStr_CMS_F_CMS_SET1_KEYID = `enum CMS_F_CMS_SET1_KEYID = 177;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_F_CMS_SET1_KEYID); }))) {
            mixin(enumMixinStr_CMS_F_CMS_SET1_KEYID);
        }
    }




    static if(!is(typeof(CMS_F_CMS_SET1_IAS))) {
        private enum enumMixinStr_CMS_F_CMS_SET1_IAS = `enum CMS_F_CMS_SET1_IAS = 176;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_F_CMS_SET1_IAS); }))) {
            mixin(enumMixinStr_CMS_F_CMS_SET1_IAS);
        }
    }




    static if(!is(typeof(CMS_F_CMS_SD_ASN1_CTRL))) {
        private enum enumMixinStr_CMS_F_CMS_SD_ASN1_CTRL = `enum CMS_F_CMS_SD_ASN1_CTRL = 170;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_F_CMS_SD_ASN1_CTRL); }))) {
            mixin(enumMixinStr_CMS_F_CMS_SD_ASN1_CTRL);
        }
    }




    static if(!is(typeof(CMS_F_CMS_RECIPIENTINFO_SET0_PKEY))) {
        private enum enumMixinStr_CMS_F_CMS_RECIPIENTINFO_SET0_PKEY = `enum CMS_F_CMS_RECIPIENTINFO_SET0_PKEY = 145;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_F_CMS_RECIPIENTINFO_SET0_PKEY); }))) {
            mixin(enumMixinStr_CMS_F_CMS_RECIPIENTINFO_SET0_PKEY);
        }
    }




    static if(!is(typeof(CMS_F_CMS_RECIPIENTINFO_SET0_PASSWORD))) {
        private enum enumMixinStr_CMS_F_CMS_RECIPIENTINFO_SET0_PASSWORD = `enum CMS_F_CMS_RECIPIENTINFO_SET0_PASSWORD = 168;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_F_CMS_RECIPIENTINFO_SET0_PASSWORD); }))) {
            mixin(enumMixinStr_CMS_F_CMS_RECIPIENTINFO_SET0_PASSWORD);
        }
    }




    static if(!is(typeof(CMS_F_CMS_RECIPIENTINFO_SET0_KEY))) {
        private enum enumMixinStr_CMS_F_CMS_RECIPIENTINFO_SET0_KEY = `enum CMS_F_CMS_RECIPIENTINFO_SET0_KEY = 144;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_F_CMS_RECIPIENTINFO_SET0_KEY); }))) {
            mixin(enumMixinStr_CMS_F_CMS_RECIPIENTINFO_SET0_KEY);
        }
    }




    static if(!is(typeof(CMS_F_CMS_RECIPIENTINFO_PWRI_CRYPT))) {
        private enum enumMixinStr_CMS_F_CMS_RECIPIENTINFO_PWRI_CRYPT = `enum CMS_F_CMS_RECIPIENTINFO_PWRI_CRYPT = 167;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_F_CMS_RECIPIENTINFO_PWRI_CRYPT); }))) {
            mixin(enumMixinStr_CMS_F_CMS_RECIPIENTINFO_PWRI_CRYPT);
        }
    }




    static if(!is(typeof(CMS_F_CMS_RECIPIENTINFO_KTRI_GET0_SIGNER_ID))) {
        private enum enumMixinStr_CMS_F_CMS_RECIPIENTINFO_KTRI_GET0_SIGNER_ID = `enum CMS_F_CMS_RECIPIENTINFO_KTRI_GET0_SIGNER_ID = 143;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_F_CMS_RECIPIENTINFO_KTRI_GET0_SIGNER_ID); }))) {
            mixin(enumMixinStr_CMS_F_CMS_RECIPIENTINFO_KTRI_GET0_SIGNER_ID);
        }
    }




    static if(!is(typeof(CMS_F_CMS_RECIPIENTINFO_KTRI_GET0_ALGS))) {
        private enum enumMixinStr_CMS_F_CMS_RECIPIENTINFO_KTRI_GET0_ALGS = `enum CMS_F_CMS_RECIPIENTINFO_KTRI_GET0_ALGS = 142;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_F_CMS_RECIPIENTINFO_KTRI_GET0_ALGS); }))) {
            mixin(enumMixinStr_CMS_F_CMS_RECIPIENTINFO_KTRI_GET0_ALGS);
        }
    }




    static if(!is(typeof(CMS_F_CMS_RECIPIENTINFO_KTRI_ENCRYPT))) {
        private enum enumMixinStr_CMS_F_CMS_RECIPIENTINFO_KTRI_ENCRYPT = `enum CMS_F_CMS_RECIPIENTINFO_KTRI_ENCRYPT = 141;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_F_CMS_RECIPIENTINFO_KTRI_ENCRYPT); }))) {
            mixin(enumMixinStr_CMS_F_CMS_RECIPIENTINFO_KTRI_ENCRYPT);
        }
    }




    static if(!is(typeof(CMS_F_CMS_RECIPIENTINFO_KTRI_DECRYPT))) {
        private enum enumMixinStr_CMS_F_CMS_RECIPIENTINFO_KTRI_DECRYPT = `enum CMS_F_CMS_RECIPIENTINFO_KTRI_DECRYPT = 140;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_F_CMS_RECIPIENTINFO_KTRI_DECRYPT); }))) {
            mixin(enumMixinStr_CMS_F_CMS_RECIPIENTINFO_KTRI_DECRYPT);
        }
    }




    static if(!is(typeof(CMS_F_CMS_RECIPIENTINFO_KTRI_CERT_CMP))) {
        private enum enumMixinStr_CMS_F_CMS_RECIPIENTINFO_KTRI_CERT_CMP = `enum CMS_F_CMS_RECIPIENTINFO_KTRI_CERT_CMP = 139;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_F_CMS_RECIPIENTINFO_KTRI_CERT_CMP); }))) {
            mixin(enumMixinStr_CMS_F_CMS_RECIPIENTINFO_KTRI_CERT_CMP);
        }
    }




    static if(!is(typeof(CMS_F_CMS_RECIPIENTINFO_KEKRI_ID_CMP))) {
        private enum enumMixinStr_CMS_F_CMS_RECIPIENTINFO_KEKRI_ID_CMP = `enum CMS_F_CMS_RECIPIENTINFO_KEKRI_ID_CMP = 138;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_F_CMS_RECIPIENTINFO_KEKRI_ID_CMP); }))) {
            mixin(enumMixinStr_CMS_F_CMS_RECIPIENTINFO_KEKRI_ID_CMP);
        }
    }




    static if(!is(typeof(CMS_F_CMS_RECIPIENTINFO_KEKRI_GET0_ID))) {
        private enum enumMixinStr_CMS_F_CMS_RECIPIENTINFO_KEKRI_GET0_ID = `enum CMS_F_CMS_RECIPIENTINFO_KEKRI_GET0_ID = 137;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_F_CMS_RECIPIENTINFO_KEKRI_GET0_ID); }))) {
            mixin(enumMixinStr_CMS_F_CMS_RECIPIENTINFO_KEKRI_GET0_ID);
        }
    }




    static if(!is(typeof(CMS_F_CMS_RECIPIENTINFO_KEKRI_ENCRYPT))) {
        private enum enumMixinStr_CMS_F_CMS_RECIPIENTINFO_KEKRI_ENCRYPT = `enum CMS_F_CMS_RECIPIENTINFO_KEKRI_ENCRYPT = 136;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_F_CMS_RECIPIENTINFO_KEKRI_ENCRYPT); }))) {
            mixin(enumMixinStr_CMS_F_CMS_RECIPIENTINFO_KEKRI_ENCRYPT);
        }
    }




    static if(!is(typeof(CMS_F_CMS_RECIPIENTINFO_KEKRI_DECRYPT))) {
        private enum enumMixinStr_CMS_F_CMS_RECIPIENTINFO_KEKRI_DECRYPT = `enum CMS_F_CMS_RECIPIENTINFO_KEKRI_DECRYPT = 135;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_F_CMS_RECIPIENTINFO_KEKRI_DECRYPT); }))) {
            mixin(enumMixinStr_CMS_F_CMS_RECIPIENTINFO_KEKRI_DECRYPT);
        }
    }




    static if(!is(typeof(CMS_F_CMS_RECIPIENTINFO_KARI_ORIG_ID_CMP))) {
        private enum enumMixinStr_CMS_F_CMS_RECIPIENTINFO_KARI_ORIG_ID_CMP = `enum CMS_F_CMS_RECIPIENTINFO_KARI_ORIG_ID_CMP = 174;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_F_CMS_RECIPIENTINFO_KARI_ORIG_ID_CMP); }))) {
            mixin(enumMixinStr_CMS_F_CMS_RECIPIENTINFO_KARI_ORIG_ID_CMP);
        }
    }




    static if(!is(typeof(CMS_F_CMS_RECIPIENTINFO_KARI_GET0_REKS))) {
        private enum enumMixinStr_CMS_F_CMS_RECIPIENTINFO_KARI_GET0_REKS = `enum CMS_F_CMS_RECIPIENTINFO_KARI_GET0_REKS = 172;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_F_CMS_RECIPIENTINFO_KARI_GET0_REKS); }))) {
            mixin(enumMixinStr_CMS_F_CMS_RECIPIENTINFO_KARI_GET0_REKS);
        }
    }




    static if(!is(typeof(CMS_F_CMS_RECIPIENTINFO_KARI_GET0_ORIG_ID))) {
        private enum enumMixinStr_CMS_F_CMS_RECIPIENTINFO_KARI_GET0_ORIG_ID = `enum CMS_F_CMS_RECIPIENTINFO_KARI_GET0_ORIG_ID = 173;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_F_CMS_RECIPIENTINFO_KARI_GET0_ORIG_ID); }))) {
            mixin(enumMixinStr_CMS_F_CMS_RECIPIENTINFO_KARI_GET0_ORIG_ID);
        }
    }




    static if(!is(typeof(CMS_F_CMS_RECIPIENTINFO_KARI_GET0_ALG))) {
        private enum enumMixinStr_CMS_F_CMS_RECIPIENTINFO_KARI_GET0_ALG = `enum CMS_F_CMS_RECIPIENTINFO_KARI_GET0_ALG = 175;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_F_CMS_RECIPIENTINFO_KARI_GET0_ALG); }))) {
            mixin(enumMixinStr_CMS_F_CMS_RECIPIENTINFO_KARI_GET0_ALG);
        }
    }




    static if(!is(typeof(CMS_F_CMS_RECIPIENTINFO_KARI_ENCRYPT))) {
        private enum enumMixinStr_CMS_F_CMS_RECIPIENTINFO_KARI_ENCRYPT = `enum CMS_F_CMS_RECIPIENTINFO_KARI_ENCRYPT = 178;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_F_CMS_RECIPIENTINFO_KARI_ENCRYPT); }))) {
            mixin(enumMixinStr_CMS_F_CMS_RECIPIENTINFO_KARI_ENCRYPT);
        }
    }




    static if(!is(typeof(CMS_F_CMS_RECIPIENTINFO_ENCRYPT))) {
        private enum enumMixinStr_CMS_F_CMS_RECIPIENTINFO_ENCRYPT = `enum CMS_F_CMS_RECIPIENTINFO_ENCRYPT = 169;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_F_CMS_RECIPIENTINFO_ENCRYPT); }))) {
            mixin(enumMixinStr_CMS_F_CMS_RECIPIENTINFO_ENCRYPT);
        }
    }




    static if(!is(typeof(CMS_F_CMS_RECIPIENTINFO_DECRYPT))) {
        private enum enumMixinStr_CMS_F_CMS_RECIPIENTINFO_DECRYPT = `enum CMS_F_CMS_RECIPIENTINFO_DECRYPT = 134;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_F_CMS_RECIPIENTINFO_DECRYPT); }))) {
            mixin(enumMixinStr_CMS_F_CMS_RECIPIENTINFO_DECRYPT);
        }
    }




    static if(!is(typeof(CMS_F_CMS_RECEIPT_VERIFY))) {
        private enum enumMixinStr_CMS_F_CMS_RECEIPT_VERIFY = `enum CMS_F_CMS_RECEIPT_VERIFY = 160;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_F_CMS_RECEIPT_VERIFY); }))) {
            mixin(enumMixinStr_CMS_F_CMS_RECEIPT_VERIFY);
        }
    }




    static if(!is(typeof(CMS_F_CMS_RECEIPTREQUEST_CREATE0))) {
        private enum enumMixinStr_CMS_F_CMS_RECEIPTREQUEST_CREATE0 = `enum CMS_F_CMS_RECEIPTREQUEST_CREATE0 = 159;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_F_CMS_RECEIPTREQUEST_CREATE0); }))) {
            mixin(enumMixinStr_CMS_F_CMS_RECEIPTREQUEST_CREATE0);
        }
    }




    static if(!is(typeof(CMS_F_CMS_MSGSIGDIGEST_ADD1))) {
        private enum enumMixinStr_CMS_F_CMS_MSGSIGDIGEST_ADD1 = `enum CMS_F_CMS_MSGSIGDIGEST_ADD1 = 162;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_F_CMS_MSGSIGDIGEST_ADD1); }))) {
            mixin(enumMixinStr_CMS_F_CMS_MSGSIGDIGEST_ADD1);
        }
    }




    static if(!is(typeof(CMS_F_CMS_GET0_SIGNED))) {
        private enum enumMixinStr_CMS_F_CMS_GET0_SIGNED = `enum CMS_F_CMS_GET0_SIGNED = 133;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_F_CMS_GET0_SIGNED); }))) {
            mixin(enumMixinStr_CMS_F_CMS_GET0_SIGNED);
        }
    }




    static if(!is(typeof(CMS_F_CMS_GET0_REVOCATION_CHOICES))) {
        private enum enumMixinStr_CMS_F_CMS_GET0_REVOCATION_CHOICES = `enum CMS_F_CMS_GET0_REVOCATION_CHOICES = 132;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_F_CMS_GET0_REVOCATION_CHOICES); }))) {
            mixin(enumMixinStr_CMS_F_CMS_GET0_REVOCATION_CHOICES);
        }
    }




    static if(!is(typeof(CMS_F_CMS_GET0_ENVELOPED))) {
        private enum enumMixinStr_CMS_F_CMS_GET0_ENVELOPED = `enum CMS_F_CMS_GET0_ENVELOPED = 131;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_F_CMS_GET0_ENVELOPED); }))) {
            mixin(enumMixinStr_CMS_F_CMS_GET0_ENVELOPED);
        }
    }




    static if(!is(typeof(CMS_F_CMS_GET0_ECONTENT_TYPE))) {
        private enum enumMixinStr_CMS_F_CMS_GET0_ECONTENT_TYPE = `enum CMS_F_CMS_GET0_ECONTENT_TYPE = 130;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_F_CMS_GET0_ECONTENT_TYPE); }))) {
            mixin(enumMixinStr_CMS_F_CMS_GET0_ECONTENT_TYPE);
        }
    }




    static if(!is(typeof(CMS_F_CMS_GET0_CONTENT))) {
        private enum enumMixinStr_CMS_F_CMS_GET0_CONTENT = `enum CMS_F_CMS_GET0_CONTENT = 129;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_F_CMS_GET0_CONTENT); }))) {
            mixin(enumMixinStr_CMS_F_CMS_GET0_CONTENT);
        }
    }




    static if(!is(typeof(CMS_F_CMS_GET0_CERTIFICATE_CHOICES))) {
        private enum enumMixinStr_CMS_F_CMS_GET0_CERTIFICATE_CHOICES = `enum CMS_F_CMS_GET0_CERTIFICATE_CHOICES = 128;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_F_CMS_GET0_CERTIFICATE_CHOICES); }))) {
            mixin(enumMixinStr_CMS_F_CMS_GET0_CERTIFICATE_CHOICES);
        }
    }




    static if(!is(typeof(CMS_F_CMS_FINAL))) {
        private enum enumMixinStr_CMS_F_CMS_FINAL = `enum CMS_F_CMS_FINAL = 127;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_F_CMS_FINAL); }))) {
            mixin(enumMixinStr_CMS_F_CMS_FINAL);
        }
    }




    static if(!is(typeof(CMS_F_CMS_ENV_ASN1_CTRL))) {
        private enum enumMixinStr_CMS_F_CMS_ENV_ASN1_CTRL = `enum CMS_F_CMS_ENV_ASN1_CTRL = 171;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_F_CMS_ENV_ASN1_CTRL); }))) {
            mixin(enumMixinStr_CMS_F_CMS_ENV_ASN1_CTRL);
        }
    }




    static if(!is(typeof(CMS_F_CMS_ENVELOPED_DATA_INIT))) {
        private enum enumMixinStr_CMS_F_CMS_ENVELOPED_DATA_INIT = `enum CMS_F_CMS_ENVELOPED_DATA_INIT = 126;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_F_CMS_ENVELOPED_DATA_INIT); }))) {
            mixin(enumMixinStr_CMS_F_CMS_ENVELOPED_DATA_INIT);
        }
    }




    static if(!is(typeof(CMS_F_CMS_ENVELOPEDDATA_INIT_BIO))) {
        private enum enumMixinStr_CMS_F_CMS_ENVELOPEDDATA_INIT_BIO = `enum CMS_F_CMS_ENVELOPEDDATA_INIT_BIO = 125;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_F_CMS_ENVELOPEDDATA_INIT_BIO); }))) {
            mixin(enumMixinStr_CMS_F_CMS_ENVELOPEDDATA_INIT_BIO);
        }
    }




    static if(!is(typeof(CMS_F_CMS_ENVELOPEDDATA_CREATE))) {
        private enum enumMixinStr_CMS_F_CMS_ENVELOPEDDATA_CREATE = `enum CMS_F_CMS_ENVELOPEDDATA_CREATE = 124;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_F_CMS_ENVELOPEDDATA_CREATE); }))) {
            mixin(enumMixinStr_CMS_F_CMS_ENVELOPEDDATA_CREATE);
        }
    }




    static if(!is(typeof(CMS_F_CMS_ENCRYPTEDDATA_SET1_KEY))) {
        private enum enumMixinStr_CMS_F_CMS_ENCRYPTEDDATA_SET1_KEY = `enum CMS_F_CMS_ENCRYPTEDDATA_SET1_KEY = 123;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_F_CMS_ENCRYPTEDDATA_SET1_KEY); }))) {
            mixin(enumMixinStr_CMS_F_CMS_ENCRYPTEDDATA_SET1_KEY);
        }
    }




    static if(!is(typeof(CMS_F_CMS_ENCRYPTEDDATA_ENCRYPT))) {
        private enum enumMixinStr_CMS_F_CMS_ENCRYPTEDDATA_ENCRYPT = `enum CMS_F_CMS_ENCRYPTEDDATA_ENCRYPT = 122;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_F_CMS_ENCRYPTEDDATA_ENCRYPT); }))) {
            mixin(enumMixinStr_CMS_F_CMS_ENCRYPTEDDATA_ENCRYPT);
        }
    }






    static if(!is(typeof(CMS_F_CMS_ENCRYPTEDDATA_DECRYPT))) {
        private enum enumMixinStr_CMS_F_CMS_ENCRYPTEDDATA_DECRYPT = `enum CMS_F_CMS_ENCRYPTEDDATA_DECRYPT = 121;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_F_CMS_ENCRYPTEDDATA_DECRYPT); }))) {
            mixin(enumMixinStr_CMS_F_CMS_ENCRYPTEDDATA_DECRYPT);
        }
    }




    static if(!is(typeof(CMS_F_CMS_ENCRYPTEDCONTENT_INIT_BIO))) {
        private enum enumMixinStr_CMS_F_CMS_ENCRYPTEDCONTENT_INIT_BIO = `enum CMS_F_CMS_ENCRYPTEDCONTENT_INIT_BIO = 120;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_F_CMS_ENCRYPTEDCONTENT_INIT_BIO); }))) {
            mixin(enumMixinStr_CMS_F_CMS_ENCRYPTEDCONTENT_INIT_BIO);
        }
    }




    static if(!is(typeof(CMS_F_CMS_ENCRYPT))) {
        private enum enumMixinStr_CMS_F_CMS_ENCRYPT = `enum CMS_F_CMS_ENCRYPT = 119;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_F_CMS_ENCRYPT); }))) {
            mixin(enumMixinStr_CMS_F_CMS_ENCRYPT);
        }
    }




    static if(!is(typeof(CMS_F_CMS_ENCODE_RECEIPT))) {
        private enum enumMixinStr_CMS_F_CMS_ENCODE_RECEIPT = `enum CMS_F_CMS_ENCODE_RECEIPT = 161;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_F_CMS_ENCODE_RECEIPT); }))) {
            mixin(enumMixinStr_CMS_F_CMS_ENCODE_RECEIPT);
        }
    }




    static if(!is(typeof(CMS_F_CMS_DIGEST_VERIFY))) {
        private enum enumMixinStr_CMS_F_CMS_DIGEST_VERIFY = `enum CMS_F_CMS_DIGEST_VERIFY = 118;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_F_CMS_DIGEST_VERIFY); }))) {
            mixin(enumMixinStr_CMS_F_CMS_DIGEST_VERIFY);
        }
    }




    static if(!is(typeof(CMS_F_CMS_DIGESTEDDATA_DO_FINAL))) {
        private enum enumMixinStr_CMS_F_CMS_DIGESTEDDATA_DO_FINAL = `enum CMS_F_CMS_DIGESTEDDATA_DO_FINAL = 117;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_F_CMS_DIGESTEDDATA_DO_FINAL); }))) {
            mixin(enumMixinStr_CMS_F_CMS_DIGESTEDDATA_DO_FINAL);
        }
    }




    static if(!is(typeof(CMS_F_CMS_DIGESTALGORITHM_INIT_BIO))) {
        private enum enumMixinStr_CMS_F_CMS_DIGESTALGORITHM_INIT_BIO = `enum CMS_F_CMS_DIGESTALGORITHM_INIT_BIO = 116;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_F_CMS_DIGESTALGORITHM_INIT_BIO); }))) {
            mixin(enumMixinStr_CMS_F_CMS_DIGESTALGORITHM_INIT_BIO);
        }
    }




    static if(!is(typeof(CMS_F_CMS_DIGESTALGORITHM_FIND_CTX))) {
        private enum enumMixinStr_CMS_F_CMS_DIGESTALGORITHM_FIND_CTX = `enum CMS_F_CMS_DIGESTALGORITHM_FIND_CTX = 115;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_F_CMS_DIGESTALGORITHM_FIND_CTX); }))) {
            mixin(enumMixinStr_CMS_F_CMS_DIGESTALGORITHM_FIND_CTX);
        }
    }




    static if(!is(typeof(CMS_F_CMS_DECRYPT_SET1_PKEY))) {
        private enum enumMixinStr_CMS_F_CMS_DECRYPT_SET1_PKEY = `enum CMS_F_CMS_DECRYPT_SET1_PKEY = 114;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_F_CMS_DECRYPT_SET1_PKEY); }))) {
            mixin(enumMixinStr_CMS_F_CMS_DECRYPT_SET1_PKEY);
        }
    }




    static if(!is(typeof(CMS_F_CMS_DECRYPT_SET1_PASSWORD))) {
        private enum enumMixinStr_CMS_F_CMS_DECRYPT_SET1_PASSWORD = `enum CMS_F_CMS_DECRYPT_SET1_PASSWORD = 166;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_F_CMS_DECRYPT_SET1_PASSWORD); }))) {
            mixin(enumMixinStr_CMS_F_CMS_DECRYPT_SET1_PASSWORD);
        }
    }




    static if(!is(typeof(CMS_F_CMS_DECRYPT_SET1_KEY))) {
        private enum enumMixinStr_CMS_F_CMS_DECRYPT_SET1_KEY = `enum CMS_F_CMS_DECRYPT_SET1_KEY = 113;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_F_CMS_DECRYPT_SET1_KEY); }))) {
            mixin(enumMixinStr_CMS_F_CMS_DECRYPT_SET1_KEY);
        }
    }




    static if(!is(typeof(CMS_F_CMS_DECRYPT))) {
        private enum enumMixinStr_CMS_F_CMS_DECRYPT = `enum CMS_F_CMS_DECRYPT = 112;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_F_CMS_DECRYPT); }))) {
            mixin(enumMixinStr_CMS_F_CMS_DECRYPT);
        }
    }




    static if(!is(typeof(CMS_F_CMS_DATAINIT))) {
        private enum enumMixinStr_CMS_F_CMS_DATAINIT = `enum CMS_F_CMS_DATAINIT = 111;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_F_CMS_DATAINIT); }))) {
            mixin(enumMixinStr_CMS_F_CMS_DATAINIT);
        }
    }




    static if(!is(typeof(CMS_F_CMS_DATAFINAL))) {
        private enum enumMixinStr_CMS_F_CMS_DATAFINAL = `enum CMS_F_CMS_DATAFINAL = 110;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_F_CMS_DATAFINAL); }))) {
            mixin(enumMixinStr_CMS_F_CMS_DATAFINAL);
        }
    }




    static if(!is(typeof(CMS_F_CMS_DATA))) {
        private enum enumMixinStr_CMS_F_CMS_DATA = `enum CMS_F_CMS_DATA = 109;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_F_CMS_DATA); }))) {
            mixin(enumMixinStr_CMS_F_CMS_DATA);
        }
    }




    static if(!is(typeof(CMS_F_CMS_COPY_MESSAGEDIGEST))) {
        private enum enumMixinStr_CMS_F_CMS_COPY_MESSAGEDIGEST = `enum CMS_F_CMS_COPY_MESSAGEDIGEST = 108;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_F_CMS_COPY_MESSAGEDIGEST); }))) {
            mixin(enumMixinStr_CMS_F_CMS_COPY_MESSAGEDIGEST);
        }
    }




    static if(!is(typeof(CMS_F_CMS_COPY_CONTENT))) {
        private enum enumMixinStr_CMS_F_CMS_COPY_CONTENT = `enum CMS_F_CMS_COPY_CONTENT = 107;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_F_CMS_COPY_CONTENT); }))) {
            mixin(enumMixinStr_CMS_F_CMS_COPY_CONTENT);
        }
    }




    static if(!is(typeof(CMS_F_CMS_COMPRESSEDDATA_INIT_BIO))) {
        private enum enumMixinStr_CMS_F_CMS_COMPRESSEDDATA_INIT_BIO = `enum CMS_F_CMS_COMPRESSEDDATA_INIT_BIO = 106;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_F_CMS_COMPRESSEDDATA_INIT_BIO); }))) {
            mixin(enumMixinStr_CMS_F_CMS_COMPRESSEDDATA_INIT_BIO);
        }
    }




    static if(!is(typeof(CMS_F_CMS_COMPRESSEDDATA_CREATE))) {
        private enum enumMixinStr_CMS_F_CMS_COMPRESSEDDATA_CREATE = `enum CMS_F_CMS_COMPRESSEDDATA_CREATE = 105;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_F_CMS_COMPRESSEDDATA_CREATE); }))) {
            mixin(enumMixinStr_CMS_F_CMS_COMPRESSEDDATA_CREATE);
        }
    }




    static if(!is(typeof(CMS_F_CMS_COMPRESS))) {
        private enum enumMixinStr_CMS_F_CMS_COMPRESS = `enum CMS_F_CMS_COMPRESS = 104;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_F_CMS_COMPRESS); }))) {
            mixin(enumMixinStr_CMS_F_CMS_COMPRESS);
        }
    }




    static if(!is(typeof(CMS_F_CMS_ADD1_SIGNINGTIME))) {
        private enum enumMixinStr_CMS_F_CMS_ADD1_SIGNINGTIME = `enum CMS_F_CMS_ADD1_SIGNINGTIME = 103;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_F_CMS_ADD1_SIGNINGTIME); }))) {
            mixin(enumMixinStr_CMS_F_CMS_ADD1_SIGNINGTIME);
        }
    }




    static if(!is(typeof(CMS_F_CMS_ADD1_SIGNER))) {
        private enum enumMixinStr_CMS_F_CMS_ADD1_SIGNER = `enum CMS_F_CMS_ADD1_SIGNER = 102;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_F_CMS_ADD1_SIGNER); }))) {
            mixin(enumMixinStr_CMS_F_CMS_ADD1_SIGNER);
        }
    }




    static if(!is(typeof(CMS_F_CMS_ADD1_RECIPIENT_CERT))) {
        private enum enumMixinStr_CMS_F_CMS_ADD1_RECIPIENT_CERT = `enum CMS_F_CMS_ADD1_RECIPIENT_CERT = 101;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_F_CMS_ADD1_RECIPIENT_CERT); }))) {
            mixin(enumMixinStr_CMS_F_CMS_ADD1_RECIPIENT_CERT);
        }
    }




    static if(!is(typeof(CMS_F_CMS_ADD1_RECEIPTREQUEST))) {
        private enum enumMixinStr_CMS_F_CMS_ADD1_RECEIPTREQUEST = `enum CMS_F_CMS_ADD1_RECEIPTREQUEST = 158;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_F_CMS_ADD1_RECEIPTREQUEST); }))) {
            mixin(enumMixinStr_CMS_F_CMS_ADD1_RECEIPTREQUEST);
        }
    }




    static if(!is(typeof(CMS_F_CMS_ADD0_RECIPIENT_PASSWORD))) {
        private enum enumMixinStr_CMS_F_CMS_ADD0_RECIPIENT_PASSWORD = `enum CMS_F_CMS_ADD0_RECIPIENT_PASSWORD = 165;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_F_CMS_ADD0_RECIPIENT_PASSWORD); }))) {
            mixin(enumMixinStr_CMS_F_CMS_ADD0_RECIPIENT_PASSWORD);
        }
    }




    static if(!is(typeof(CMS_F_CMS_ADD0_RECIPIENT_KEY))) {
        private enum enumMixinStr_CMS_F_CMS_ADD0_RECIPIENT_KEY = `enum CMS_F_CMS_ADD0_RECIPIENT_KEY = 100;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_F_CMS_ADD0_RECIPIENT_KEY); }))) {
            mixin(enumMixinStr_CMS_F_CMS_ADD0_RECIPIENT_KEY);
        }
    }




    static if(!is(typeof(CMS_F_CMS_ADD0_CERT))) {
        private enum enumMixinStr_CMS_F_CMS_ADD0_CERT = `enum CMS_F_CMS_ADD0_CERT = 164;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_F_CMS_ADD0_CERT); }))) {
            mixin(enumMixinStr_CMS_F_CMS_ADD0_CERT);
        }
    }




    static if(!is(typeof(CMS_F_CHECK_CONTENT))) {
        private enum enumMixinStr_CMS_F_CHECK_CONTENT = `enum CMS_F_CHECK_CONTENT = 99;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_F_CHECK_CONTENT); }))) {
            mixin(enumMixinStr_CMS_F_CHECK_CONTENT);
        }
    }




    static if(!is(typeof(CMS_ASCIICRLF))) {
        private enum enumMixinStr_CMS_ASCIICRLF = `enum CMS_ASCIICRLF = 0x80000;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_ASCIICRLF); }))) {
            mixin(enumMixinStr_CMS_ASCIICRLF);
        }
    }




    static if(!is(typeof(CMS_KEY_PARAM))) {
        private enum enumMixinStr_CMS_KEY_PARAM = `enum CMS_KEY_PARAM = 0x40000;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_KEY_PARAM); }))) {
            mixin(enumMixinStr_CMS_KEY_PARAM);
        }
    }




    static if(!is(typeof(CMS_DEBUG_DECRYPT))) {
        private enum enumMixinStr_CMS_DEBUG_DECRYPT = `enum CMS_DEBUG_DECRYPT = 0x20000;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_DEBUG_DECRYPT); }))) {
            mixin(enumMixinStr_CMS_DEBUG_DECRYPT);
        }
    }




    static if(!is(typeof(CMS_USE_KEYID))) {
        private enum enumMixinStr_CMS_USE_KEYID = `enum CMS_USE_KEYID = 0x10000;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_USE_KEYID); }))) {
            mixin(enumMixinStr_CMS_USE_KEYID);
        }
    }




    static if(!is(typeof(CMS_REUSE_DIGEST))) {
        private enum enumMixinStr_CMS_REUSE_DIGEST = `enum CMS_REUSE_DIGEST = 0x8000;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_REUSE_DIGEST); }))) {
            mixin(enumMixinStr_CMS_REUSE_DIGEST);
        }
    }




    static if(!is(typeof(CMS_PARTIAL))) {
        private enum enumMixinStr_CMS_PARTIAL = `enum CMS_PARTIAL = 0x4000;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_PARTIAL); }))) {
            mixin(enumMixinStr_CMS_PARTIAL);
        }
    }




    static if(!is(typeof(CMS_NOCRL))) {
        private enum enumMixinStr_CMS_NOCRL = `enum CMS_NOCRL = 0x2000;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_NOCRL); }))) {
            mixin(enumMixinStr_CMS_NOCRL);
        }
    }




    static if(!is(typeof(CMS_STREAM))) {
        private enum enumMixinStr_CMS_STREAM = `enum CMS_STREAM = 0x1000;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_STREAM); }))) {
            mixin(enumMixinStr_CMS_STREAM);
        }
    }




    static if(!is(typeof(CMS_CRLFEOL))) {
        private enum enumMixinStr_CMS_CRLFEOL = `enum CMS_CRLFEOL = 0x800;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_CRLFEOL); }))) {
            mixin(enumMixinStr_CMS_CRLFEOL);
        }
    }




    static if(!is(typeof(CMS_NOOLDMIMETYPE))) {
        private enum enumMixinStr_CMS_NOOLDMIMETYPE = `enum CMS_NOOLDMIMETYPE = 0x400;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_NOOLDMIMETYPE); }))) {
            mixin(enumMixinStr_CMS_NOOLDMIMETYPE);
        }
    }




    static if(!is(typeof(CMS_NOSMIMECAP))) {
        private enum enumMixinStr_CMS_NOSMIMECAP = `enum CMS_NOSMIMECAP = 0x200;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_NOSMIMECAP); }))) {
            mixin(enumMixinStr_CMS_NOSMIMECAP);
        }
    }




    static if(!is(typeof(CMS_NOATTR))) {
        private enum enumMixinStr_CMS_NOATTR = `enum CMS_NOATTR = 0x100;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_NOATTR); }))) {
            mixin(enumMixinStr_CMS_NOATTR);
        }
    }




    static if(!is(typeof(CMS_BINARY))) {
        private enum enumMixinStr_CMS_BINARY = `enum CMS_BINARY = 0x80;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_BINARY); }))) {
            mixin(enumMixinStr_CMS_BINARY);
        }
    }




    static if(!is(typeof(CMS_DETACHED))) {
        private enum enumMixinStr_CMS_DETACHED = `enum CMS_DETACHED = 0x40;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_DETACHED); }))) {
            mixin(enumMixinStr_CMS_DETACHED);
        }
    }




    static if(!is(typeof(CMS_NOVERIFY))) {
        private enum enumMixinStr_CMS_NOVERIFY = `enum CMS_NOVERIFY = 0x20;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_NOVERIFY); }))) {
            mixin(enumMixinStr_CMS_NOVERIFY);
        }
    }




    static if(!is(typeof(CMS_NO_SIGNER_CERT_VERIFY))) {
        private enum enumMixinStr_CMS_NO_SIGNER_CERT_VERIFY = `enum CMS_NO_SIGNER_CERT_VERIFY = 0x20;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_NO_SIGNER_CERT_VERIFY); }))) {
            mixin(enumMixinStr_CMS_NO_SIGNER_CERT_VERIFY);
        }
    }




    static if(!is(typeof(CMS_NOINTERN))) {
        private enum enumMixinStr_CMS_NOINTERN = `enum CMS_NOINTERN = 0x10;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_NOINTERN); }))) {
            mixin(enumMixinStr_CMS_NOINTERN);
        }
    }




    static if(!is(typeof(CMS_NOSIGS))) {
        private enum enumMixinStr_CMS_NOSIGS = `enum CMS_NOSIGS = ( CMS_NO_CONTENT_VERIFY | CMS_NO_ATTR_VERIFY );`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_NOSIGS); }))) {
            mixin(enumMixinStr_CMS_NOSIGS);
        }
    }




    static if(!is(typeof(CMS_NO_ATTR_VERIFY))) {
        private enum enumMixinStr_CMS_NO_ATTR_VERIFY = `enum CMS_NO_ATTR_VERIFY = 0x8;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_NO_ATTR_VERIFY); }))) {
            mixin(enumMixinStr_CMS_NO_ATTR_VERIFY);
        }
    }




    static if(!is(typeof(CMS_NO_CONTENT_VERIFY))) {
        private enum enumMixinStr_CMS_NO_CONTENT_VERIFY = `enum CMS_NO_CONTENT_VERIFY = 0x4;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_NO_CONTENT_VERIFY); }))) {
            mixin(enumMixinStr_CMS_NO_CONTENT_VERIFY);
        }
    }




    static if(!is(typeof(CMS_NOCERTS))) {
        private enum enumMixinStr_CMS_NOCERTS = `enum CMS_NOCERTS = 0x2;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_NOCERTS); }))) {
            mixin(enumMixinStr_CMS_NOCERTS);
        }
    }




    static if(!is(typeof(CMS_TEXT))) {
        private enum enumMixinStr_CMS_TEXT = `enum CMS_TEXT = 0x1;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_TEXT); }))) {
            mixin(enumMixinStr_CMS_TEXT);
        }
    }




    static if(!is(typeof(CMS_RECIPINFO_OTHER))) {
        private enum enumMixinStr_CMS_RECIPINFO_OTHER = `enum CMS_RECIPINFO_OTHER = 4;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_RECIPINFO_OTHER); }))) {
            mixin(enumMixinStr_CMS_RECIPINFO_OTHER);
        }
    }




    static if(!is(typeof(CMS_RECIPINFO_PASS))) {
        private enum enumMixinStr_CMS_RECIPINFO_PASS = `enum CMS_RECIPINFO_PASS = 3;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_RECIPINFO_PASS); }))) {
            mixin(enumMixinStr_CMS_RECIPINFO_PASS);
        }
    }




    static if(!is(typeof(CMS_RECIPINFO_KEK))) {
        private enum enumMixinStr_CMS_RECIPINFO_KEK = `enum CMS_RECIPINFO_KEK = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_RECIPINFO_KEK); }))) {
            mixin(enumMixinStr_CMS_RECIPINFO_KEK);
        }
    }




    static if(!is(typeof(CMS_RECIPINFO_AGREE))) {
        private enum enumMixinStr_CMS_RECIPINFO_AGREE = `enum CMS_RECIPINFO_AGREE = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_RECIPINFO_AGREE); }))) {
            mixin(enumMixinStr_CMS_RECIPINFO_AGREE);
        }
    }




    static if(!is(typeof(CMS_RECIPINFO_TRANS))) {
        private enum enumMixinStr_CMS_RECIPINFO_TRANS = `enum CMS_RECIPINFO_TRANS = 0;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_RECIPINFO_TRANS); }))) {
            mixin(enumMixinStr_CMS_RECIPINFO_TRANS);
        }
    }




    static if(!is(typeof(CMS_RECIPINFO_NONE))) {
        private enum enumMixinStr_CMS_RECIPINFO_NONE = `enum CMS_RECIPINFO_NONE = - 1;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_RECIPINFO_NONE); }))) {
            mixin(enumMixinStr_CMS_RECIPINFO_NONE);
        }
    }




    static if(!is(typeof(CMS_SIGNERINFO_KEYIDENTIFIER))) {
        private enum enumMixinStr_CMS_SIGNERINFO_KEYIDENTIFIER = `enum CMS_SIGNERINFO_KEYIDENTIFIER = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_SIGNERINFO_KEYIDENTIFIER); }))) {
            mixin(enumMixinStr_CMS_SIGNERINFO_KEYIDENTIFIER);
        }
    }




    static if(!is(typeof(CMS_SIGNERINFO_ISSUER_SERIAL))) {
        private enum enumMixinStr_CMS_SIGNERINFO_ISSUER_SERIAL = `enum CMS_SIGNERINFO_ISSUER_SERIAL = 0;`;
        static if(is(typeof({ mixin(enumMixinStr_CMS_SIGNERINFO_ISSUER_SERIAL); }))) {
            mixin(enumMixinStr_CMS_SIGNERINFO_ISSUER_SERIAL);
        }
    }
    static if(!is(typeof(CAST_KEY_LENGTH))) {
        private enum enumMixinStr_CAST_KEY_LENGTH = `enum CAST_KEY_LENGTH = 16;`;
        static if(is(typeof({ mixin(enumMixinStr_CAST_KEY_LENGTH); }))) {
            mixin(enumMixinStr_CAST_KEY_LENGTH);
        }
    }




    static if(!is(typeof(CAST_BLOCK))) {
        private enum enumMixinStr_CAST_BLOCK = `enum CAST_BLOCK = 8;`;
        static if(is(typeof({ mixin(enumMixinStr_CAST_BLOCK); }))) {
            mixin(enumMixinStr_CAST_BLOCK);
        }
    }




    static if(!is(typeof(CAST_LONG))) {
        private enum enumMixinStr_CAST_LONG = `enum CAST_LONG = unsigned int;`;
        static if(is(typeof({ mixin(enumMixinStr_CAST_LONG); }))) {
            mixin(enumMixinStr_CAST_LONG);
        }
    }




    static if(!is(typeof(CAST_DECRYPT))) {
        private enum enumMixinStr_CAST_DECRYPT = `enum CAST_DECRYPT = 0;`;
        static if(is(typeof({ mixin(enumMixinStr_CAST_DECRYPT); }))) {
            mixin(enumMixinStr_CAST_DECRYPT);
        }
    }




    static if(!is(typeof(CAST_ENCRYPT))) {
        private enum enumMixinStr_CAST_ENCRYPT = `enum CAST_ENCRYPT = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_CAST_ENCRYPT); }))) {
            mixin(enumMixinStr_CAST_ENCRYPT);
        }
    }






    static if(!is(typeof(CAMELLIA_TABLE_WORD_LEN))) {
        private enum enumMixinStr_CAMELLIA_TABLE_WORD_LEN = `enum CAMELLIA_TABLE_WORD_LEN = ( CAMELLIA_TABLE_BYTE_LEN / 4 );`;
        static if(is(typeof({ mixin(enumMixinStr_CAMELLIA_TABLE_WORD_LEN); }))) {
            mixin(enumMixinStr_CAMELLIA_TABLE_WORD_LEN);
        }
    }




    static if(!is(typeof(CAMELLIA_TABLE_BYTE_LEN))) {
        private enum enumMixinStr_CAMELLIA_TABLE_BYTE_LEN = `enum CAMELLIA_TABLE_BYTE_LEN = 272;`;
        static if(is(typeof({ mixin(enumMixinStr_CAMELLIA_TABLE_BYTE_LEN); }))) {
            mixin(enumMixinStr_CAMELLIA_TABLE_BYTE_LEN);
        }
    }




    static if(!is(typeof(CAMELLIA_BLOCK_SIZE))) {
        private enum enumMixinStr_CAMELLIA_BLOCK_SIZE = `enum CAMELLIA_BLOCK_SIZE = 16;`;
        static if(is(typeof({ mixin(enumMixinStr_CAMELLIA_BLOCK_SIZE); }))) {
            mixin(enumMixinStr_CAMELLIA_BLOCK_SIZE);
        }
    }




    static if(!is(typeof(CAMELLIA_DECRYPT))) {
        private enum enumMixinStr_CAMELLIA_DECRYPT = `enum CAMELLIA_DECRYPT = 0;`;
        static if(is(typeof({ mixin(enumMixinStr_CAMELLIA_DECRYPT); }))) {
            mixin(enumMixinStr_CAMELLIA_DECRYPT);
        }
    }




    static if(!is(typeof(CAMELLIA_ENCRYPT))) {
        private enum enumMixinStr_CAMELLIA_ENCRYPT = `enum CAMELLIA_ENCRYPT = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_CAMELLIA_ENCRYPT); }))) {
            mixin(enumMixinStr_CAMELLIA_ENCRYPT);
        }
    }






    static if(!is(typeof(BF_BLOCK))) {
        private enum enumMixinStr_BF_BLOCK = `enum BF_BLOCK = 8;`;
        static if(is(typeof({ mixin(enumMixinStr_BF_BLOCK); }))) {
            mixin(enumMixinStr_BF_BLOCK);
        }
    }




    static if(!is(typeof(BF_ROUNDS))) {
        private enum enumMixinStr_BF_ROUNDS = `enum BF_ROUNDS = 16;`;
        static if(is(typeof({ mixin(enumMixinStr_BF_ROUNDS); }))) {
            mixin(enumMixinStr_BF_ROUNDS);
        }
    }




    static if(!is(typeof(BF_LONG))) {
        private enum enumMixinStr_BF_LONG = `enum BF_LONG = unsigned int;`;
        static if(is(typeof({ mixin(enumMixinStr_BF_LONG); }))) {
            mixin(enumMixinStr_BF_LONG);
        }
    }




    static if(!is(typeof(BF_DECRYPT))) {
        private enum enumMixinStr_BF_DECRYPT = `enum BF_DECRYPT = 0;`;
        static if(is(typeof({ mixin(enumMixinStr_BF_DECRYPT); }))) {
            mixin(enumMixinStr_BF_DECRYPT);
        }
    }




    static if(!is(typeof(BF_ENCRYPT))) {
        private enum enumMixinStr_BF_ENCRYPT = `enum BF_ENCRYPT = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_BF_ENCRYPT); }))) {
            mixin(enumMixinStr_BF_ENCRYPT);
        }
    }






    static if(!is(typeof(ASYNC_R_INVALID_POOL_SIZE))) {
        private enum enumMixinStr_ASYNC_R_INVALID_POOL_SIZE = `enum ASYNC_R_INVALID_POOL_SIZE = 103;`;
        static if(is(typeof({ mixin(enumMixinStr_ASYNC_R_INVALID_POOL_SIZE); }))) {
            mixin(enumMixinStr_ASYNC_R_INVALID_POOL_SIZE);
        }
    }




    static if(!is(typeof(ASYNC_R_INIT_FAILED))) {
        private enum enumMixinStr_ASYNC_R_INIT_FAILED = `enum ASYNC_R_INIT_FAILED = 105;`;
        static if(is(typeof({ mixin(enumMixinStr_ASYNC_R_INIT_FAILED); }))) {
            mixin(enumMixinStr_ASYNC_R_INIT_FAILED);
        }
    }




    static if(!is(typeof(ASYNC_R_FAILED_TO_SWAP_CONTEXT))) {
        private enum enumMixinStr_ASYNC_R_FAILED_TO_SWAP_CONTEXT = `enum ASYNC_R_FAILED_TO_SWAP_CONTEXT = 102;`;
        static if(is(typeof({ mixin(enumMixinStr_ASYNC_R_FAILED_TO_SWAP_CONTEXT); }))) {
            mixin(enumMixinStr_ASYNC_R_FAILED_TO_SWAP_CONTEXT);
        }
    }




    static if(!is(typeof(ASYNC_R_FAILED_TO_SET_POOL))) {
        private enum enumMixinStr_ASYNC_R_FAILED_TO_SET_POOL = `enum ASYNC_R_FAILED_TO_SET_POOL = 101;`;
        static if(is(typeof({ mixin(enumMixinStr_ASYNC_R_FAILED_TO_SET_POOL); }))) {
            mixin(enumMixinStr_ASYNC_R_FAILED_TO_SET_POOL);
        }
    }




    static if(!is(typeof(ASYNC_F_ASYNC_START_JOB))) {
        private enum enumMixinStr_ASYNC_F_ASYNC_START_JOB = `enum ASYNC_F_ASYNC_START_JOB = 105;`;
        static if(is(typeof({ mixin(enumMixinStr_ASYNC_F_ASYNC_START_JOB); }))) {
            mixin(enumMixinStr_ASYNC_F_ASYNC_START_JOB);
        }
    }




    static if(!is(typeof(ASYNC_F_ASYNC_START_FUNC))) {
        private enum enumMixinStr_ASYNC_F_ASYNC_START_FUNC = `enum ASYNC_F_ASYNC_START_FUNC = 104;`;
        static if(is(typeof({ mixin(enumMixinStr_ASYNC_F_ASYNC_START_FUNC); }))) {
            mixin(enumMixinStr_ASYNC_F_ASYNC_START_FUNC);
        }
    }




    static if(!is(typeof(ASYNC_F_ASYNC_PAUSE_JOB))) {
        private enum enumMixinStr_ASYNC_F_ASYNC_PAUSE_JOB = `enum ASYNC_F_ASYNC_PAUSE_JOB = 103;`;
        static if(is(typeof({ mixin(enumMixinStr_ASYNC_F_ASYNC_PAUSE_JOB); }))) {
            mixin(enumMixinStr_ASYNC_F_ASYNC_PAUSE_JOB);
        }
    }




    static if(!is(typeof(ASYNC_F_ASYNC_JOB_NEW))) {
        private enum enumMixinStr_ASYNC_F_ASYNC_JOB_NEW = `enum ASYNC_F_ASYNC_JOB_NEW = 102;`;
        static if(is(typeof({ mixin(enumMixinStr_ASYNC_F_ASYNC_JOB_NEW); }))) {
            mixin(enumMixinStr_ASYNC_F_ASYNC_JOB_NEW);
        }
    }




    static if(!is(typeof(ASYNC_F_ASYNC_INIT_THREAD))) {
        private enum enumMixinStr_ASYNC_F_ASYNC_INIT_THREAD = `enum ASYNC_F_ASYNC_INIT_THREAD = 101;`;
        static if(is(typeof({ mixin(enumMixinStr_ASYNC_F_ASYNC_INIT_THREAD); }))) {
            mixin(enumMixinStr_ASYNC_F_ASYNC_INIT_THREAD);
        }
    }




    static if(!is(typeof(ASYNC_F_ASYNC_CTX_NEW))) {
        private enum enumMixinStr_ASYNC_F_ASYNC_CTX_NEW = `enum ASYNC_F_ASYNC_CTX_NEW = 100;`;
        static if(is(typeof({ mixin(enumMixinStr_ASYNC_F_ASYNC_CTX_NEW); }))) {
            mixin(enumMixinStr_ASYNC_F_ASYNC_CTX_NEW);
        }
    }




    static if(!is(typeof(ASYNC_FINISH))) {
        private enum enumMixinStr_ASYNC_FINISH = `enum ASYNC_FINISH = 3;`;
        static if(is(typeof({ mixin(enumMixinStr_ASYNC_FINISH); }))) {
            mixin(enumMixinStr_ASYNC_FINISH);
        }
    }




    static if(!is(typeof(ASYNC_PAUSE))) {
        private enum enumMixinStr_ASYNC_PAUSE = `enum ASYNC_PAUSE = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_ASYNC_PAUSE); }))) {
            mixin(enumMixinStr_ASYNC_PAUSE);
        }
    }




    static if(!is(typeof(ASYNC_NO_JOBS))) {
        private enum enumMixinStr_ASYNC_NO_JOBS = `enum ASYNC_NO_JOBS = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_ASYNC_NO_JOBS); }))) {
            mixin(enumMixinStr_ASYNC_NO_JOBS);
        }
    }




    static if(!is(typeof(ASYNC_ERR))) {
        private enum enumMixinStr_ASYNC_ERR = `enum ASYNC_ERR = 0;`;
        static if(is(typeof({ mixin(enumMixinStr_ASYNC_ERR); }))) {
            mixin(enumMixinStr_ASYNC_ERR);
        }
    }




    static if(!is(typeof(OSSL_BAD_ASYNC_FD))) {
        private enum enumMixinStr_OSSL_BAD_ASYNC_FD = `enum OSSL_BAD_ASYNC_FD = - 1;`;
        static if(is(typeof({ mixin(enumMixinStr_OSSL_BAD_ASYNC_FD); }))) {
            mixin(enumMixinStr_OSSL_BAD_ASYNC_FD);
        }
    }




    static if(!is(typeof(OSSL_ASYNC_FD))) {
        private enum enumMixinStr_OSSL_ASYNC_FD = `enum OSSL_ASYNC_FD = int;`;
        static if(is(typeof({ mixin(enumMixinStr_OSSL_ASYNC_FD); }))) {
            mixin(enumMixinStr_OSSL_ASYNC_FD);
        }
    }
    static if(!is(typeof(_STRING_H))) {
        private enum enumMixinStr__STRING_H = `enum _STRING_H = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__STRING_H); }))) {
            mixin(enumMixinStr__STRING_H);
        }
    }
    static if(!is(typeof(ASN1_OP_DETACHED_POST))) {
        private enum enumMixinStr_ASN1_OP_DETACHED_POST = `enum ASN1_OP_DETACHED_POST = 13;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_OP_DETACHED_POST); }))) {
            mixin(enumMixinStr_ASN1_OP_DETACHED_POST);
        }
    }




    static if(!is(typeof(ASN1_OP_DETACHED_PRE))) {
        private enum enumMixinStr_ASN1_OP_DETACHED_PRE = `enum ASN1_OP_DETACHED_PRE = 12;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_OP_DETACHED_PRE); }))) {
            mixin(enumMixinStr_ASN1_OP_DETACHED_PRE);
        }
    }




    static if(!is(typeof(ASN1_OP_STREAM_POST))) {
        private enum enumMixinStr_ASN1_OP_STREAM_POST = `enum ASN1_OP_STREAM_POST = 11;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_OP_STREAM_POST); }))) {
            mixin(enumMixinStr_ASN1_OP_STREAM_POST);
        }
    }




    static if(!is(typeof(ASN1_OP_STREAM_PRE))) {
        private enum enumMixinStr_ASN1_OP_STREAM_PRE = `enum ASN1_OP_STREAM_PRE = 10;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_OP_STREAM_PRE); }))) {
            mixin(enumMixinStr_ASN1_OP_STREAM_PRE);
        }
    }




    static if(!is(typeof(ASN1_OP_PRINT_POST))) {
        private enum enumMixinStr_ASN1_OP_PRINT_POST = `enum ASN1_OP_PRINT_POST = 9;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_OP_PRINT_POST); }))) {
            mixin(enumMixinStr_ASN1_OP_PRINT_POST);
        }
    }




    static if(!is(typeof(ASN1_OP_PRINT_PRE))) {
        private enum enumMixinStr_ASN1_OP_PRINT_PRE = `enum ASN1_OP_PRINT_PRE = 8;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_OP_PRINT_PRE); }))) {
            mixin(enumMixinStr_ASN1_OP_PRINT_PRE);
        }
    }




    static if(!is(typeof(ASN1_OP_I2D_POST))) {
        private enum enumMixinStr_ASN1_OP_I2D_POST = `enum ASN1_OP_I2D_POST = 7;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_OP_I2D_POST); }))) {
            mixin(enumMixinStr_ASN1_OP_I2D_POST);
        }
    }




    static if(!is(typeof(ASN1_OP_I2D_PRE))) {
        private enum enumMixinStr_ASN1_OP_I2D_PRE = `enum ASN1_OP_I2D_PRE = 6;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_OP_I2D_PRE); }))) {
            mixin(enumMixinStr_ASN1_OP_I2D_PRE);
        }
    }




    static if(!is(typeof(ASN1_OP_D2I_POST))) {
        private enum enumMixinStr_ASN1_OP_D2I_POST = `enum ASN1_OP_D2I_POST = 5;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_OP_D2I_POST); }))) {
            mixin(enumMixinStr_ASN1_OP_D2I_POST);
        }
    }




    static if(!is(typeof(ASN1_OP_D2I_PRE))) {
        private enum enumMixinStr_ASN1_OP_D2I_PRE = `enum ASN1_OP_D2I_PRE = 4;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_OP_D2I_PRE); }))) {
            mixin(enumMixinStr_ASN1_OP_D2I_PRE);
        }
    }




    static if(!is(typeof(ASN1_OP_FREE_POST))) {
        private enum enumMixinStr_ASN1_OP_FREE_POST = `enum ASN1_OP_FREE_POST = 3;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_OP_FREE_POST); }))) {
            mixin(enumMixinStr_ASN1_OP_FREE_POST);
        }
    }




    static if(!is(typeof(ASN1_OP_FREE_PRE))) {
        private enum enumMixinStr_ASN1_OP_FREE_PRE = `enum ASN1_OP_FREE_PRE = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_OP_FREE_PRE); }))) {
            mixin(enumMixinStr_ASN1_OP_FREE_PRE);
        }
    }




    static if(!is(typeof(ASN1_OP_NEW_POST))) {
        private enum enumMixinStr_ASN1_OP_NEW_POST = `enum ASN1_OP_NEW_POST = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_OP_NEW_POST); }))) {
            mixin(enumMixinStr_ASN1_OP_NEW_POST);
        }
    }




    static if(!is(typeof(ASN1_OP_NEW_PRE))) {
        private enum enumMixinStr_ASN1_OP_NEW_PRE = `enum ASN1_OP_NEW_PRE = 0;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_OP_NEW_PRE); }))) {
            mixin(enumMixinStr_ASN1_OP_NEW_PRE);
        }
    }




    static if(!is(typeof(ASN1_AFLG_BROKEN))) {
        private enum enumMixinStr_ASN1_AFLG_BROKEN = `enum ASN1_AFLG_BROKEN = 4;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_AFLG_BROKEN); }))) {
            mixin(enumMixinStr_ASN1_AFLG_BROKEN);
        }
    }




    static if(!is(typeof(ASN1_AFLG_ENCODING))) {
        private enum enumMixinStr_ASN1_AFLG_ENCODING = `enum ASN1_AFLG_ENCODING = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_AFLG_ENCODING); }))) {
            mixin(enumMixinStr_ASN1_AFLG_ENCODING);
        }
    }




    static if(!is(typeof(ASN1_AFLG_REFCOUNT))) {
        private enum enumMixinStr_ASN1_AFLG_REFCOUNT = `enum ASN1_AFLG_REFCOUNT = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_AFLG_REFCOUNT); }))) {
            mixin(enumMixinStr_ASN1_AFLG_REFCOUNT);
        }
    }




    static if(!is(typeof(ASN1_ITYPE_NDEF_SEQUENCE))) {
        private enum enumMixinStr_ASN1_ITYPE_NDEF_SEQUENCE = `enum ASN1_ITYPE_NDEF_SEQUENCE = 0x6;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_ITYPE_NDEF_SEQUENCE); }))) {
            mixin(enumMixinStr_ASN1_ITYPE_NDEF_SEQUENCE);
        }
    }




    static if(!is(typeof(ASN1_ITYPE_MSTRING))) {
        private enum enumMixinStr_ASN1_ITYPE_MSTRING = `enum ASN1_ITYPE_MSTRING = 0x5;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_ITYPE_MSTRING); }))) {
            mixin(enumMixinStr_ASN1_ITYPE_MSTRING);
        }
    }




    static if(!is(typeof(ASN1_ITYPE_EXTERN))) {
        private enum enumMixinStr_ASN1_ITYPE_EXTERN = `enum ASN1_ITYPE_EXTERN = 0x4;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_ITYPE_EXTERN); }))) {
            mixin(enumMixinStr_ASN1_ITYPE_EXTERN);
        }
    }




    static if(!is(typeof(ASN1_ITYPE_CHOICE))) {
        private enum enumMixinStr_ASN1_ITYPE_CHOICE = `enum ASN1_ITYPE_CHOICE = 0x2;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_ITYPE_CHOICE); }))) {
            mixin(enumMixinStr_ASN1_ITYPE_CHOICE);
        }
    }




    static if(!is(typeof(ASN1_ITYPE_SEQUENCE))) {
        private enum enumMixinStr_ASN1_ITYPE_SEQUENCE = `enum ASN1_ITYPE_SEQUENCE = 0x1;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_ITYPE_SEQUENCE); }))) {
            mixin(enumMixinStr_ASN1_ITYPE_SEQUENCE);
        }
    }




    static if(!is(typeof(ASN1_ITYPE_PRIMITIVE))) {
        private enum enumMixinStr_ASN1_ITYPE_PRIMITIVE = `enum ASN1_ITYPE_PRIMITIVE = 0x0;`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_ITYPE_PRIMITIVE); }))) {
            mixin(enumMixinStr_ASN1_ITYPE_PRIMITIVE);
        }
    }




    static if(!is(typeof(ASN1_TFLG_EMBED))) {
        private enum enumMixinStr_ASN1_TFLG_EMBED = `enum ASN1_TFLG_EMBED = ( 0x1 << 12 );`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_TFLG_EMBED); }))) {
            mixin(enumMixinStr_ASN1_TFLG_EMBED);
        }
    }




    static if(!is(typeof(ASN1_TFLG_NDEF))) {
        private enum enumMixinStr_ASN1_TFLG_NDEF = `enum ASN1_TFLG_NDEF = ( 0x1 << 11 );`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_TFLG_NDEF); }))) {
            mixin(enumMixinStr_ASN1_TFLG_NDEF);
        }
    }




    static if(!is(typeof(ASN1_TFLG_ADB_INT))) {
        private enum enumMixinStr_ASN1_TFLG_ADB_INT = `enum ASN1_TFLG_ADB_INT = ( 0x1 << 9 );`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_TFLG_ADB_INT); }))) {
            mixin(enumMixinStr_ASN1_TFLG_ADB_INT);
        }
    }




    static if(!is(typeof(ASN1_TFLG_ADB_OID))) {
        private enum enumMixinStr_ASN1_TFLG_ADB_OID = `enum ASN1_TFLG_ADB_OID = ( 0x1 << 8 );`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_TFLG_ADB_OID); }))) {
            mixin(enumMixinStr_ASN1_TFLG_ADB_OID);
        }
    }




    static if(!is(typeof(ASN1_TFLG_ADB_MASK))) {
        private enum enumMixinStr_ASN1_TFLG_ADB_MASK = `enum ASN1_TFLG_ADB_MASK = ( 0x3 << 8 );`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_TFLG_ADB_MASK); }))) {
            mixin(enumMixinStr_ASN1_TFLG_ADB_MASK);
        }
    }




    static if(!is(typeof(ASN1_TFLG_TAG_CLASS))) {
        private enum enumMixinStr_ASN1_TFLG_TAG_CLASS = `enum ASN1_TFLG_TAG_CLASS = ( 0x3 << 6 );`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_TFLG_TAG_CLASS); }))) {
            mixin(enumMixinStr_ASN1_TFLG_TAG_CLASS);
        }
    }




    static if(!is(typeof(ASN1_TFLG_PRIVATE))) {
        private enum enumMixinStr_ASN1_TFLG_PRIVATE = `enum ASN1_TFLG_PRIVATE = ( 0x3 << 6 );`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_TFLG_PRIVATE); }))) {
            mixin(enumMixinStr_ASN1_TFLG_PRIVATE);
        }
    }




    static if(!is(typeof(ASN1_TFLG_CONTEXT))) {
        private enum enumMixinStr_ASN1_TFLG_CONTEXT = `enum ASN1_TFLG_CONTEXT = ( 0x2 << 6 );`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_TFLG_CONTEXT); }))) {
            mixin(enumMixinStr_ASN1_TFLG_CONTEXT);
        }
    }




    static if(!is(typeof(ASN1_TFLG_APPLICATION))) {
        private enum enumMixinStr_ASN1_TFLG_APPLICATION = `enum ASN1_TFLG_APPLICATION = ( 0x1 << 6 );`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_TFLG_APPLICATION); }))) {
            mixin(enumMixinStr_ASN1_TFLG_APPLICATION);
        }
    }




    static if(!is(typeof(ASN1_TFLG_UNIVERSAL))) {
        private enum enumMixinStr_ASN1_TFLG_UNIVERSAL = `enum ASN1_TFLG_UNIVERSAL = ( 0x0 << 6 );`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_TFLG_UNIVERSAL); }))) {
            mixin(enumMixinStr_ASN1_TFLG_UNIVERSAL);
        }
    }




    static if(!is(typeof(ASN1_TFLG_EXPLICIT))) {
        private enum enumMixinStr_ASN1_TFLG_EXPLICIT = `enum ASN1_TFLG_EXPLICIT = ASN1_TFLG_EXPTAG | ( 0x2 << 6 );`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_TFLG_EXPLICIT); }))) {
            mixin(enumMixinStr_ASN1_TFLG_EXPLICIT);
        }
    }




    static if(!is(typeof(ASN1_TFLG_IMPLICIT))) {
        private enum enumMixinStr_ASN1_TFLG_IMPLICIT = `enum ASN1_TFLG_IMPLICIT = ASN1_TFLG_IMPTAG | ( 0x2 << 6 );`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_TFLG_IMPLICIT); }))) {
            mixin(enumMixinStr_ASN1_TFLG_IMPLICIT);
        }
    }




    static if(!is(typeof(ASN1_TFLG_TAG_MASK))) {
        private enum enumMixinStr_ASN1_TFLG_TAG_MASK = `enum ASN1_TFLG_TAG_MASK = ( 0x3 << 3 );`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_TFLG_TAG_MASK); }))) {
            mixin(enumMixinStr_ASN1_TFLG_TAG_MASK);
        }
    }




    static if(!is(typeof(ASN1_TFLG_EXPTAG))) {
        private enum enumMixinStr_ASN1_TFLG_EXPTAG = `enum ASN1_TFLG_EXPTAG = ( 0x2 << 3 );`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_TFLG_EXPTAG); }))) {
            mixin(enumMixinStr_ASN1_TFLG_EXPTAG);
        }
    }




    static if(!is(typeof(ASN1_TFLG_IMPTAG))) {
        private enum enumMixinStr_ASN1_TFLG_IMPTAG = `enum ASN1_TFLG_IMPTAG = ( 0x1 << 3 );`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_TFLG_IMPTAG); }))) {
            mixin(enumMixinStr_ASN1_TFLG_IMPTAG);
        }
    }




    static if(!is(typeof(ASN1_TFLG_SK_MASK))) {
        private enum enumMixinStr_ASN1_TFLG_SK_MASK = `enum ASN1_TFLG_SK_MASK = ( 0x3 << 1 );`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_TFLG_SK_MASK); }))) {
            mixin(enumMixinStr_ASN1_TFLG_SK_MASK);
        }
    }




    static if(!is(typeof(ASN1_TFLG_SET_ORDER))) {
        private enum enumMixinStr_ASN1_TFLG_SET_ORDER = `enum ASN1_TFLG_SET_ORDER = ( 0x3 << 1 );`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_TFLG_SET_ORDER); }))) {
            mixin(enumMixinStr_ASN1_TFLG_SET_ORDER);
        }
    }




    static if(!is(typeof(ASN1_TFLG_SEQUENCE_OF))) {
        private enum enumMixinStr_ASN1_TFLG_SEQUENCE_OF = `enum ASN1_TFLG_SEQUENCE_OF = ( 0x2 << 1 );`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_TFLG_SEQUENCE_OF); }))) {
            mixin(enumMixinStr_ASN1_TFLG_SEQUENCE_OF);
        }
    }




    static if(!is(typeof(ASN1_TFLG_SET_OF))) {
        private enum enumMixinStr_ASN1_TFLG_SET_OF = `enum ASN1_TFLG_SET_OF = ( 0x1 << 1 );`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_TFLG_SET_OF); }))) {
            mixin(enumMixinStr_ASN1_TFLG_SET_OF);
        }
    }




    static if(!is(typeof(ASN1_TFLG_OPTIONAL))) {
        private enum enumMixinStr_ASN1_TFLG_OPTIONAL = `enum ASN1_TFLG_OPTIONAL = ( 0x1 );`;
        static if(is(typeof({ mixin(enumMixinStr_ASN1_TFLG_OPTIONAL); }))) {
            mixin(enumMixinStr_ASN1_TFLG_OPTIONAL);
        }
    }
    static if(!is(typeof(AES_BLOCK_SIZE))) {
        private enum enumMixinStr_AES_BLOCK_SIZE = `enum AES_BLOCK_SIZE = 16;`;
        static if(is(typeof({ mixin(enumMixinStr_AES_BLOCK_SIZE); }))) {
            mixin(enumMixinStr_AES_BLOCK_SIZE);
        }
    }




    static if(!is(typeof(AES_MAXNR))) {
        private enum enumMixinStr_AES_MAXNR = `enum AES_MAXNR = 14;`;
        static if(is(typeof({ mixin(enumMixinStr_AES_MAXNR); }))) {
            mixin(enumMixinStr_AES_MAXNR);
        }
    }




    static if(!is(typeof(AES_DECRYPT))) {
        private enum enumMixinStr_AES_DECRYPT = `enum AES_DECRYPT = 0;`;
        static if(is(typeof({ mixin(enumMixinStr_AES_DECRYPT); }))) {
            mixin(enumMixinStr_AES_DECRYPT);
        }
    }




    static if(!is(typeof(AES_ENCRYPT))) {
        private enum enumMixinStr_AES_ENCRYPT = `enum AES_ENCRYPT = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_AES_ENCRYPT); }))) {
            mixin(enumMixinStr_AES_ENCRYPT);
        }
    }
    static if(!is(typeof(DSO_R_UNSUPPORTED))) {
        private enum enumMixinStr_DSO_R_UNSUPPORTED = `enum DSO_R_UNSUPPORTED = 108;`;
        static if(is(typeof({ mixin(enumMixinStr_DSO_R_UNSUPPORTED); }))) {
            mixin(enumMixinStr_DSO_R_UNSUPPORTED);
        }
    }




    static if(!is(typeof(DSO_R_UNLOAD_FAILED))) {
        private enum enumMixinStr_DSO_R_UNLOAD_FAILED = `enum DSO_R_UNLOAD_FAILED = 107;`;
        static if(is(typeof({ mixin(enumMixinStr_DSO_R_UNLOAD_FAILED); }))) {
            mixin(enumMixinStr_DSO_R_UNLOAD_FAILED);
        }
    }




    static if(!is(typeof(DSO_R_SYM_FAILURE))) {
        private enum enumMixinStr_DSO_R_SYM_FAILURE = `enum DSO_R_SYM_FAILURE = 106;`;
        static if(is(typeof({ mixin(enumMixinStr_DSO_R_SYM_FAILURE); }))) {
            mixin(enumMixinStr_DSO_R_SYM_FAILURE);
        }
    }




    static if(!is(typeof(DSO_R_STACK_ERROR))) {
        private enum enumMixinStr_DSO_R_STACK_ERROR = `enum DSO_R_STACK_ERROR = 105;`;
        static if(is(typeof({ mixin(enumMixinStr_DSO_R_STACK_ERROR); }))) {
            mixin(enumMixinStr_DSO_R_STACK_ERROR);
        }
    }




    static if(!is(typeof(DSO_R_SET_FILENAME_FAILED))) {
        private enum enumMixinStr_DSO_R_SET_FILENAME_FAILED = `enum DSO_R_SET_FILENAME_FAILED = 112;`;
        static if(is(typeof({ mixin(enumMixinStr_DSO_R_SET_FILENAME_FAILED); }))) {
            mixin(enumMixinStr_DSO_R_SET_FILENAME_FAILED);
        }
    }




    static if(!is(typeof(DSO_R_NULL_HANDLE))) {
        private enum enumMixinStr_DSO_R_NULL_HANDLE = `enum DSO_R_NULL_HANDLE = 104;`;
        static if(is(typeof({ mixin(enumMixinStr_DSO_R_NULL_HANDLE); }))) {
            mixin(enumMixinStr_DSO_R_NULL_HANDLE);
        }
    }




    static if(!is(typeof(DSO_R_NO_FILENAME))) {
        private enum enumMixinStr_DSO_R_NO_FILENAME = `enum DSO_R_NO_FILENAME = 111;`;
        static if(is(typeof({ mixin(enumMixinStr_DSO_R_NO_FILENAME); }))) {
            mixin(enumMixinStr_DSO_R_NO_FILENAME);
        }
    }




    static if(!is(typeof(DSO_R_NAME_TRANSLATION_FAILED))) {
        private enum enumMixinStr_DSO_R_NAME_TRANSLATION_FAILED = `enum DSO_R_NAME_TRANSLATION_FAILED = 109;`;
        static if(is(typeof({ mixin(enumMixinStr_DSO_R_NAME_TRANSLATION_FAILED); }))) {
            mixin(enumMixinStr_DSO_R_NAME_TRANSLATION_FAILED);
        }
    }




    static if(!is(typeof(DSO_R_LOAD_FAILED))) {
        private enum enumMixinStr_DSO_R_LOAD_FAILED = `enum DSO_R_LOAD_FAILED = 103;`;
        static if(is(typeof({ mixin(enumMixinStr_DSO_R_LOAD_FAILED); }))) {
            mixin(enumMixinStr_DSO_R_LOAD_FAILED);
        }
    }




    static if(!is(typeof(DSO_R_INCORRECT_FILE_SYNTAX))) {
        private enum enumMixinStr_DSO_R_INCORRECT_FILE_SYNTAX = `enum DSO_R_INCORRECT_FILE_SYNTAX = 115;`;
        static if(is(typeof({ mixin(enumMixinStr_DSO_R_INCORRECT_FILE_SYNTAX); }))) {
            mixin(enumMixinStr_DSO_R_INCORRECT_FILE_SYNTAX);
        }
    }




    static if(!is(typeof(DSO_R_FINISH_FAILED))) {
        private enum enumMixinStr_DSO_R_FINISH_FAILED = `enum DSO_R_FINISH_FAILED = 102;`;
        static if(is(typeof({ mixin(enumMixinStr_DSO_R_FINISH_FAILED); }))) {
            mixin(enumMixinStr_DSO_R_FINISH_FAILED);
        }
    }




    static if(!is(typeof(DSO_R_FILENAME_TOO_BIG))) {
        private enum enumMixinStr_DSO_R_FILENAME_TOO_BIG = `enum DSO_R_FILENAME_TOO_BIG = 101;`;
        static if(is(typeof({ mixin(enumMixinStr_DSO_R_FILENAME_TOO_BIG); }))) {
            mixin(enumMixinStr_DSO_R_FILENAME_TOO_BIG);
        }
    }




    static if(!is(typeof(DSO_R_FAILURE))) {
        private enum enumMixinStr_DSO_R_FAILURE = `enum DSO_R_FAILURE = 114;`;
        static if(is(typeof({ mixin(enumMixinStr_DSO_R_FAILURE); }))) {
            mixin(enumMixinStr_DSO_R_FAILURE);
        }
    }




    static if(!is(typeof(DSO_R_EMPTY_FILE_STRUCTURE))) {
        private enum enumMixinStr_DSO_R_EMPTY_FILE_STRUCTURE = `enum DSO_R_EMPTY_FILE_STRUCTURE = 113;`;
        static if(is(typeof({ mixin(enumMixinStr_DSO_R_EMPTY_FILE_STRUCTURE); }))) {
            mixin(enumMixinStr_DSO_R_EMPTY_FILE_STRUCTURE);
        }
    }




    static if(!is(typeof(DSO_R_DSO_ALREADY_LOADED))) {
        private enum enumMixinStr_DSO_R_DSO_ALREADY_LOADED = `enum DSO_R_DSO_ALREADY_LOADED = 110;`;
        static if(is(typeof({ mixin(enumMixinStr_DSO_R_DSO_ALREADY_LOADED); }))) {
            mixin(enumMixinStr_DSO_R_DSO_ALREADY_LOADED);
        }
    }




    static if(!is(typeof(DSO_R_CTRL_FAILED))) {
        private enum enumMixinStr_DSO_R_CTRL_FAILED = `enum DSO_R_CTRL_FAILED = 100;`;
        static if(is(typeof({ mixin(enumMixinStr_DSO_R_CTRL_FAILED); }))) {
            mixin(enumMixinStr_DSO_R_CTRL_FAILED);
        }
    }




    static if(!is(typeof(DSO_F_WIN32_UNLOAD))) {
        private enum enumMixinStr_DSO_F_WIN32_UNLOAD = `enum DSO_F_WIN32_UNLOAD = 121;`;
        static if(is(typeof({ mixin(enumMixinStr_DSO_F_WIN32_UNLOAD); }))) {
            mixin(enumMixinStr_DSO_F_WIN32_UNLOAD);
        }
    }




    static if(!is(typeof(_STRINGS_H))) {
        private enum enumMixinStr__STRINGS_H = `enum _STRINGS_H = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__STRINGS_H); }))) {
            mixin(enumMixinStr__STRINGS_H);
        }
    }




    static if(!is(typeof(DSO_F_WIN32_SPLITTER))) {
        private enum enumMixinStr_DSO_F_WIN32_SPLITTER = `enum DSO_F_WIN32_SPLITTER = 136;`;
        static if(is(typeof({ mixin(enumMixinStr_DSO_F_WIN32_SPLITTER); }))) {
            mixin(enumMixinStr_DSO_F_WIN32_SPLITTER);
        }
    }




    static if(!is(typeof(DSO_F_WIN32_NAME_CONVERTER))) {
        private enum enumMixinStr_DSO_F_WIN32_NAME_CONVERTER = `enum DSO_F_WIN32_NAME_CONVERTER = 125;`;
        static if(is(typeof({ mixin(enumMixinStr_DSO_F_WIN32_NAME_CONVERTER); }))) {
            mixin(enumMixinStr_DSO_F_WIN32_NAME_CONVERTER);
        }
    }




    static if(!is(typeof(DSO_F_WIN32_MERGER))) {
        private enum enumMixinStr_DSO_F_WIN32_MERGER = `enum DSO_F_WIN32_MERGER = 134;`;
        static if(is(typeof({ mixin(enumMixinStr_DSO_F_WIN32_MERGER); }))) {
            mixin(enumMixinStr_DSO_F_WIN32_MERGER);
        }
    }




    static if(!is(typeof(DSO_F_WIN32_LOAD))) {
        private enum enumMixinStr_DSO_F_WIN32_LOAD = `enum DSO_F_WIN32_LOAD = 120;`;
        static if(is(typeof({ mixin(enumMixinStr_DSO_F_WIN32_LOAD); }))) {
            mixin(enumMixinStr_DSO_F_WIN32_LOAD);
        }
    }




    static if(!is(typeof(DSO_F_WIN32_JOINER))) {
        private enum enumMixinStr_DSO_F_WIN32_JOINER = `enum DSO_F_WIN32_JOINER = 135;`;
        static if(is(typeof({ mixin(enumMixinStr_DSO_F_WIN32_JOINER); }))) {
            mixin(enumMixinStr_DSO_F_WIN32_JOINER);
        }
    }




    static if(!is(typeof(DSO_F_WIN32_GLOBALLOOKUP))) {
        private enum enumMixinStr_DSO_F_WIN32_GLOBALLOOKUP = `enum DSO_F_WIN32_GLOBALLOOKUP = 142;`;
        static if(is(typeof({ mixin(enumMixinStr_DSO_F_WIN32_GLOBALLOOKUP); }))) {
            mixin(enumMixinStr_DSO_F_WIN32_GLOBALLOOKUP);
        }
    }




    static if(!is(typeof(DSO_F_WIN32_BIND_FUNC))) {
        private enum enumMixinStr_DSO_F_WIN32_BIND_FUNC = `enum DSO_F_WIN32_BIND_FUNC = 101;`;
        static if(is(typeof({ mixin(enumMixinStr_DSO_F_WIN32_BIND_FUNC); }))) {
            mixin(enumMixinStr_DSO_F_WIN32_BIND_FUNC);
        }
    }




    static if(!is(typeof(DSO_F_VMS_UNLOAD))) {
        private enum enumMixinStr_DSO_F_VMS_UNLOAD = `enum DSO_F_VMS_UNLOAD = 117;`;
        static if(is(typeof({ mixin(enumMixinStr_DSO_F_VMS_UNLOAD); }))) {
            mixin(enumMixinStr_DSO_F_VMS_UNLOAD);
        }
    }




    static if(!is(typeof(DSO_F_VMS_MERGER))) {
        private enum enumMixinStr_DSO_F_VMS_MERGER = `enum DSO_F_VMS_MERGER = 133;`;
        static if(is(typeof({ mixin(enumMixinStr_DSO_F_VMS_MERGER); }))) {
            mixin(enumMixinStr_DSO_F_VMS_MERGER);
        }
    }




    static if(!is(typeof(DSO_F_VMS_LOAD))) {
        private enum enumMixinStr_DSO_F_VMS_LOAD = `enum DSO_F_VMS_LOAD = 116;`;
        static if(is(typeof({ mixin(enumMixinStr_DSO_F_VMS_LOAD); }))) {
            mixin(enumMixinStr_DSO_F_VMS_LOAD);
        }
    }




    static if(!is(typeof(DSO_F_VMS_BIND_SYM))) {
        private enum enumMixinStr_DSO_F_VMS_BIND_SYM = `enum DSO_F_VMS_BIND_SYM = 115;`;
        static if(is(typeof({ mixin(enumMixinStr_DSO_F_VMS_BIND_SYM); }))) {
            mixin(enumMixinStr_DSO_F_VMS_BIND_SYM);
        }
    }




    static if(!is(typeof(DSO_F_DSO_UP_REF))) {
        private enum enumMixinStr_DSO_F_DSO_UP_REF = `enum DSO_F_DSO_UP_REF = 114;`;
        static if(is(typeof({ mixin(enumMixinStr_DSO_F_DSO_UP_REF); }))) {
            mixin(enumMixinStr_DSO_F_DSO_UP_REF);
        }
    }




    static if(!is(typeof(DSO_F_DSO_SET_FILENAME))) {
        private enum enumMixinStr_DSO_F_DSO_SET_FILENAME = `enum DSO_F_DSO_SET_FILENAME = 129;`;
        static if(is(typeof({ mixin(enumMixinStr_DSO_F_DSO_SET_FILENAME); }))) {
            mixin(enumMixinStr_DSO_F_DSO_SET_FILENAME);
        }
    }




    static if(!is(typeof(DSO_F_DSO_NEW_METHOD))) {
        private enum enumMixinStr_DSO_F_DSO_NEW_METHOD = `enum DSO_F_DSO_NEW_METHOD = 113;`;
        static if(is(typeof({ mixin(enumMixinStr_DSO_F_DSO_NEW_METHOD); }))) {
            mixin(enumMixinStr_DSO_F_DSO_NEW_METHOD);
        }
    }




    static if(!is(typeof(DSO_F_DSO_MERGE))) {
        private enum enumMixinStr_DSO_F_DSO_MERGE = `enum DSO_F_DSO_MERGE = 132;`;
        static if(is(typeof({ mixin(enumMixinStr_DSO_F_DSO_MERGE); }))) {
            mixin(enumMixinStr_DSO_F_DSO_MERGE);
        }
    }




    static if(!is(typeof(DSO_F_DSO_LOAD))) {
        private enum enumMixinStr_DSO_F_DSO_LOAD = `enum DSO_F_DSO_LOAD = 112;`;
        static if(is(typeof({ mixin(enumMixinStr_DSO_F_DSO_LOAD); }))) {
            mixin(enumMixinStr_DSO_F_DSO_LOAD);
        }
    }




    static if(!is(typeof(DSO_F_DSO_GLOBAL_LOOKUP))) {
        private enum enumMixinStr_DSO_F_DSO_GLOBAL_LOOKUP = `enum DSO_F_DSO_GLOBAL_LOOKUP = 139;`;
        static if(is(typeof({ mixin(enumMixinStr_DSO_F_DSO_GLOBAL_LOOKUP); }))) {
            mixin(enumMixinStr_DSO_F_DSO_GLOBAL_LOOKUP);
        }
    }




    static if(!is(typeof(DSO_F_DSO_GET_FILENAME))) {
        private enum enumMixinStr_DSO_F_DSO_GET_FILENAME = `enum DSO_F_DSO_GET_FILENAME = 127;`;
        static if(is(typeof({ mixin(enumMixinStr_DSO_F_DSO_GET_FILENAME); }))) {
            mixin(enumMixinStr_DSO_F_DSO_GET_FILENAME);
        }
    }




    static if(!is(typeof(DSO_F_DSO_FREE))) {
        private enum enumMixinStr_DSO_F_DSO_FREE = `enum DSO_F_DSO_FREE = 111;`;
        static if(is(typeof({ mixin(enumMixinStr_DSO_F_DSO_FREE); }))) {
            mixin(enumMixinStr_DSO_F_DSO_FREE);
        }
    }




    static if(!is(typeof(DSO_F_DSO_CTRL))) {
        private enum enumMixinStr_DSO_F_DSO_CTRL = `enum DSO_F_DSO_CTRL = 110;`;
        static if(is(typeof({ mixin(enumMixinStr_DSO_F_DSO_CTRL); }))) {
            mixin(enumMixinStr_DSO_F_DSO_CTRL);
        }
    }




    static if(!is(typeof(DSO_F_DSO_CONVERT_FILENAME))) {
        private enum enumMixinStr_DSO_F_DSO_CONVERT_FILENAME = `enum DSO_F_DSO_CONVERT_FILENAME = 126;`;
        static if(is(typeof({ mixin(enumMixinStr_DSO_F_DSO_CONVERT_FILENAME); }))) {
            mixin(enumMixinStr_DSO_F_DSO_CONVERT_FILENAME);
        }
    }




    static if(!is(typeof(DSO_F_DSO_BIND_FUNC))) {
        private enum enumMixinStr_DSO_F_DSO_BIND_FUNC = `enum DSO_F_DSO_BIND_FUNC = 108;`;
        static if(is(typeof({ mixin(enumMixinStr_DSO_F_DSO_BIND_FUNC); }))) {
            mixin(enumMixinStr_DSO_F_DSO_BIND_FUNC);
        }
    }




    static if(!is(typeof(DSO_F_DL_UNLOAD))) {
        private enum enumMixinStr_DSO_F_DL_UNLOAD = `enum DSO_F_DL_UNLOAD = 107;`;
        static if(is(typeof({ mixin(enumMixinStr_DSO_F_DL_UNLOAD); }))) {
            mixin(enumMixinStr_DSO_F_DL_UNLOAD);
        }
    }




    static if(!is(typeof(DSO_F_DL_NAME_CONVERTER))) {
        private enum enumMixinStr_DSO_F_DL_NAME_CONVERTER = `enum DSO_F_DL_NAME_CONVERTER = 124;`;
        static if(is(typeof({ mixin(enumMixinStr_DSO_F_DL_NAME_CONVERTER); }))) {
            mixin(enumMixinStr_DSO_F_DL_NAME_CONVERTER);
        }
    }




    static if(!is(typeof(DSO_F_DL_MERGER))) {
        private enum enumMixinStr_DSO_F_DL_MERGER = `enum DSO_F_DL_MERGER = 131;`;
        static if(is(typeof({ mixin(enumMixinStr_DSO_F_DL_MERGER); }))) {
            mixin(enumMixinStr_DSO_F_DL_MERGER);
        }
    }




    static if(!is(typeof(DSO_F_DL_LOAD))) {
        private enum enumMixinStr_DSO_F_DL_LOAD = `enum DSO_F_DL_LOAD = 106;`;
        static if(is(typeof({ mixin(enumMixinStr_DSO_F_DL_LOAD); }))) {
            mixin(enumMixinStr_DSO_F_DL_LOAD);
        }
    }




    static if(!is(typeof(DSO_F_DL_BIND_FUNC))) {
        private enum enumMixinStr_DSO_F_DL_BIND_FUNC = `enum DSO_F_DL_BIND_FUNC = 104;`;
        static if(is(typeof({ mixin(enumMixinStr_DSO_F_DL_BIND_FUNC); }))) {
            mixin(enumMixinStr_DSO_F_DL_BIND_FUNC);
        }
    }




    static if(!is(typeof(DSO_F_DLFCN_UNLOAD))) {
        private enum enumMixinStr_DSO_F_DLFCN_UNLOAD = `enum DSO_F_DLFCN_UNLOAD = 103;`;
        static if(is(typeof({ mixin(enumMixinStr_DSO_F_DLFCN_UNLOAD); }))) {
            mixin(enumMixinStr_DSO_F_DLFCN_UNLOAD);
        }
    }




    static if(!is(typeof(DSO_F_DLFCN_NAME_CONVERTER))) {
        private enum enumMixinStr_DSO_F_DLFCN_NAME_CONVERTER = `enum DSO_F_DLFCN_NAME_CONVERTER = 123;`;
        static if(is(typeof({ mixin(enumMixinStr_DSO_F_DLFCN_NAME_CONVERTER); }))) {
            mixin(enumMixinStr_DSO_F_DLFCN_NAME_CONVERTER);
        }
    }




    static if(!is(typeof(DSO_F_DLFCN_MERGER))) {
        private enum enumMixinStr_DSO_F_DLFCN_MERGER = `enum DSO_F_DLFCN_MERGER = 130;`;
        static if(is(typeof({ mixin(enumMixinStr_DSO_F_DLFCN_MERGER); }))) {
            mixin(enumMixinStr_DSO_F_DLFCN_MERGER);
        }
    }




    static if(!is(typeof(DSO_F_DLFCN_LOAD))) {
        private enum enumMixinStr_DSO_F_DLFCN_LOAD = `enum DSO_F_DLFCN_LOAD = 102;`;
        static if(is(typeof({ mixin(enumMixinStr_DSO_F_DLFCN_LOAD); }))) {
            mixin(enumMixinStr_DSO_F_DLFCN_LOAD);
        }
    }




    static if(!is(typeof(DSO_F_DLFCN_BIND_FUNC))) {
        private enum enumMixinStr_DSO_F_DLFCN_BIND_FUNC = `enum DSO_F_DLFCN_BIND_FUNC = 100;`;
        static if(is(typeof({ mixin(enumMixinStr_DSO_F_DLFCN_BIND_FUNC); }))) {
            mixin(enumMixinStr_DSO_F_DLFCN_BIND_FUNC);
        }
    }




    static if(!is(typeof(DSO_FLAG_GLOBAL_SYMBOLS))) {
        private enum enumMixinStr_DSO_FLAG_GLOBAL_SYMBOLS = `enum DSO_FLAG_GLOBAL_SYMBOLS = 0x20;`;
        static if(is(typeof({ mixin(enumMixinStr_DSO_FLAG_GLOBAL_SYMBOLS); }))) {
            mixin(enumMixinStr_DSO_FLAG_GLOBAL_SYMBOLS);
        }
    }




    static if(!is(typeof(DSO_FLAG_UPCASE_SYMBOL))) {
        private enum enumMixinStr_DSO_FLAG_UPCASE_SYMBOL = `enum DSO_FLAG_UPCASE_SYMBOL = 0x10;`;
        static if(is(typeof({ mixin(enumMixinStr_DSO_FLAG_UPCASE_SYMBOL); }))) {
            mixin(enumMixinStr_DSO_FLAG_UPCASE_SYMBOL);
        }
    }




    static if(!is(typeof(DSO_FLAG_NAME_TRANSLATION_EXT_ONLY))) {
        private enum enumMixinStr_DSO_FLAG_NAME_TRANSLATION_EXT_ONLY = `enum DSO_FLAG_NAME_TRANSLATION_EXT_ONLY = 0x02;`;
        static if(is(typeof({ mixin(enumMixinStr_DSO_FLAG_NAME_TRANSLATION_EXT_ONLY); }))) {
            mixin(enumMixinStr_DSO_FLAG_NAME_TRANSLATION_EXT_ONLY);
        }
    }




    static if(!is(typeof(DSO_FLAG_NO_NAME_TRANSLATION))) {
        private enum enumMixinStr_DSO_FLAG_NO_NAME_TRANSLATION = `enum DSO_FLAG_NO_NAME_TRANSLATION = 0x01;`;
        static if(is(typeof({ mixin(enumMixinStr_DSO_FLAG_NO_NAME_TRANSLATION); }))) {
            mixin(enumMixinStr_DSO_FLAG_NO_NAME_TRANSLATION);
        }
    }




    static if(!is(typeof(DSO_CTRL_OR_FLAGS))) {
        private enum enumMixinStr_DSO_CTRL_OR_FLAGS = `enum DSO_CTRL_OR_FLAGS = 3;`;
        static if(is(typeof({ mixin(enumMixinStr_DSO_CTRL_OR_FLAGS); }))) {
            mixin(enumMixinStr_DSO_CTRL_OR_FLAGS);
        }
    }




    static if(!is(typeof(DSO_CTRL_SET_FLAGS))) {
        private enum enumMixinStr_DSO_CTRL_SET_FLAGS = `enum DSO_CTRL_SET_FLAGS = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_DSO_CTRL_SET_FLAGS); }))) {
            mixin(enumMixinStr_DSO_CTRL_SET_FLAGS);
        }
    }




    static if(!is(typeof(DSO_CTRL_GET_FLAGS))) {
        private enum enumMixinStr_DSO_CTRL_GET_FLAGS = `enum DSO_CTRL_GET_FLAGS = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_DSO_CTRL_GET_FLAGS); }))) {
            mixin(enumMixinStr_DSO_CTRL_GET_FLAGS);
        }
    }
    static if(!is(typeof(DANETLS_EE_MASK))) {
        private enum enumMixinStr_DANETLS_EE_MASK = `enum DANETLS_EE_MASK = ( DANETLS_PKIX_EE_MASK | DANETLS_DANE_EE_MASK );`;
        static if(is(typeof({ mixin(enumMixinStr_DANETLS_EE_MASK); }))) {
            mixin(enumMixinStr_DANETLS_EE_MASK);
        }
    }




    static if(!is(typeof(DANETLS_TA_MASK))) {
        private enum enumMixinStr_DANETLS_TA_MASK = `enum DANETLS_TA_MASK = ( DANETLS_PKIX_TA_MASK | DANETLS_DANE_TA_MASK );`;
        static if(is(typeof({ mixin(enumMixinStr_DANETLS_TA_MASK); }))) {
            mixin(enumMixinStr_DANETLS_TA_MASK);
        }
    }




    static if(!is(typeof(DANETLS_DANE_MASK))) {
        private enum enumMixinStr_DANETLS_DANE_MASK = `enum DANETLS_DANE_MASK = ( DANETLS_DANE_TA_MASK | DANETLS_DANE_EE_MASK );`;
        static if(is(typeof({ mixin(enumMixinStr_DANETLS_DANE_MASK); }))) {
            mixin(enumMixinStr_DANETLS_DANE_MASK);
        }
    }




    static if(!is(typeof(DANETLS_PKIX_MASK))) {
        private enum enumMixinStr_DANETLS_PKIX_MASK = `enum DANETLS_PKIX_MASK = ( DANETLS_PKIX_TA_MASK | DANETLS_PKIX_EE_MASK );`;
        static if(is(typeof({ mixin(enumMixinStr_DANETLS_PKIX_MASK); }))) {
            mixin(enumMixinStr_DANETLS_PKIX_MASK);
        }
    }




    static if(!is(typeof(DANETLS_DANE_EE_MASK))) {
        private enum enumMixinStr_DANETLS_DANE_EE_MASK = `enum DANETLS_DANE_EE_MASK = ( DANETLS_USAGE_BIT ( DANETLS_USAGE_DANE_EE ) );`;
        static if(is(typeof({ mixin(enumMixinStr_DANETLS_DANE_EE_MASK); }))) {
            mixin(enumMixinStr_DANETLS_DANE_EE_MASK);
        }
    }




    static if(!is(typeof(DANETLS_DANE_TA_MASK))) {
        private enum enumMixinStr_DANETLS_DANE_TA_MASK = `enum DANETLS_DANE_TA_MASK = ( DANETLS_USAGE_BIT ( DANETLS_USAGE_DANE_TA ) );`;
        static if(is(typeof({ mixin(enumMixinStr_DANETLS_DANE_TA_MASK); }))) {
            mixin(enumMixinStr_DANETLS_DANE_TA_MASK);
        }
    }




    static if(!is(typeof(DANETLS_PKIX_EE_MASK))) {
        private enum enumMixinStr_DANETLS_PKIX_EE_MASK = `enum DANETLS_PKIX_EE_MASK = ( DANETLS_USAGE_BIT ( DANETLS_USAGE_PKIX_EE ) );`;
        static if(is(typeof({ mixin(enumMixinStr_DANETLS_PKIX_EE_MASK); }))) {
            mixin(enumMixinStr_DANETLS_PKIX_EE_MASK);
        }
    }




    static if(!is(typeof(DANETLS_PKIX_TA_MASK))) {
        private enum enumMixinStr_DANETLS_PKIX_TA_MASK = `enum DANETLS_PKIX_TA_MASK = ( DANETLS_USAGE_BIT ( DANETLS_USAGE_PKIX_TA ) );`;
        static if(is(typeof({ mixin(enumMixinStr_DANETLS_PKIX_TA_MASK); }))) {
            mixin(enumMixinStr_DANETLS_PKIX_TA_MASK);
        }
    }
    static if(!is(typeof(_SYS_CDEFS_H))) {
        private enum enumMixinStr__SYS_CDEFS_H = `enum _SYS_CDEFS_H = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__SYS_CDEFS_H); }))) {
            mixin(enumMixinStr__SYS_CDEFS_H);
        }
    }




    static if(!is(typeof(DANETLS_MATCHING_LAST))) {
        private enum enumMixinStr_DANETLS_MATCHING_LAST = `enum DANETLS_MATCHING_LAST = DANETLS_MATCHING_2512;`;
        static if(is(typeof({ mixin(enumMixinStr_DANETLS_MATCHING_LAST); }))) {
            mixin(enumMixinStr_DANETLS_MATCHING_LAST);
        }
    }




    static if(!is(typeof(DANETLS_MATCHING_2512))) {
        private enum enumMixinStr_DANETLS_MATCHING_2512 = `enum DANETLS_MATCHING_2512 = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_DANETLS_MATCHING_2512); }))) {
            mixin(enumMixinStr_DANETLS_MATCHING_2512);
        }
    }




    static if(!is(typeof(DANETLS_MATCHING_2256))) {
        private enum enumMixinStr_DANETLS_MATCHING_2256 = `enum DANETLS_MATCHING_2256 = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_DANETLS_MATCHING_2256); }))) {
            mixin(enumMixinStr_DANETLS_MATCHING_2256);
        }
    }




    static if(!is(typeof(DANETLS_MATCHING_FULL))) {
        private enum enumMixinStr_DANETLS_MATCHING_FULL = `enum DANETLS_MATCHING_FULL = 0;`;
        static if(is(typeof({ mixin(enumMixinStr_DANETLS_MATCHING_FULL); }))) {
            mixin(enumMixinStr_DANETLS_MATCHING_FULL);
        }
    }




    static if(!is(typeof(DANETLS_SELECTOR_LAST))) {
        private enum enumMixinStr_DANETLS_SELECTOR_LAST = `enum DANETLS_SELECTOR_LAST = DANETLS_SELECTOR_SPKI;`;
        static if(is(typeof({ mixin(enumMixinStr_DANETLS_SELECTOR_LAST); }))) {
            mixin(enumMixinStr_DANETLS_SELECTOR_LAST);
        }
    }
    static if(!is(typeof(DANETLS_SELECTOR_SPKI))) {
        private enum enumMixinStr_DANETLS_SELECTOR_SPKI = `enum DANETLS_SELECTOR_SPKI = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_DANETLS_SELECTOR_SPKI); }))) {
            mixin(enumMixinStr_DANETLS_SELECTOR_SPKI);
        }
    }




    static if(!is(typeof(__THROW))) {
        private enum enumMixinStr___THROW = `enum __THROW = __attribute__ ( ( __nothrow__ ) );`;
        static if(is(typeof({ mixin(enumMixinStr___THROW); }))) {
            mixin(enumMixinStr___THROW);
        }
    }




    static if(!is(typeof(__THROWNL))) {
        private enum enumMixinStr___THROWNL = `enum __THROWNL = __attribute__ ( ( __nothrow__ ) );`;
        static if(is(typeof({ mixin(enumMixinStr___THROWNL); }))) {
            mixin(enumMixinStr___THROWNL);
        }
    }
    static if(!is(typeof(DANETLS_SELECTOR_CERT))) {
        private enum enumMixinStr_DANETLS_SELECTOR_CERT = `enum DANETLS_SELECTOR_CERT = 0;`;
        static if(is(typeof({ mixin(enumMixinStr_DANETLS_SELECTOR_CERT); }))) {
            mixin(enumMixinStr_DANETLS_SELECTOR_CERT);
        }
    }




    static if(!is(typeof(DANETLS_USAGE_LAST))) {
        private enum enumMixinStr_DANETLS_USAGE_LAST = `enum DANETLS_USAGE_LAST = DANETLS_USAGE_DANE_EE;`;
        static if(is(typeof({ mixin(enumMixinStr_DANETLS_USAGE_LAST); }))) {
            mixin(enumMixinStr_DANETLS_USAGE_LAST);
        }
    }
    static if(!is(typeof(__ptr_t))) {
        private enum enumMixinStr___ptr_t = `enum __ptr_t = void *;`;
        static if(is(typeof({ mixin(enumMixinStr___ptr_t); }))) {
            mixin(enumMixinStr___ptr_t);
        }
    }
    static if(!is(typeof(DANETLS_USAGE_DANE_EE))) {
        private enum enumMixinStr_DANETLS_USAGE_DANE_EE = `enum DANETLS_USAGE_DANE_EE = 3;`;
        static if(is(typeof({ mixin(enumMixinStr_DANETLS_USAGE_DANE_EE); }))) {
            mixin(enumMixinStr_DANETLS_USAGE_DANE_EE);
        }
    }




    static if(!is(typeof(DANETLS_USAGE_DANE_TA))) {
        private enum enumMixinStr_DANETLS_USAGE_DANE_TA = `enum DANETLS_USAGE_DANE_TA = 2;`;
        static if(is(typeof({ mixin(enumMixinStr_DANETLS_USAGE_DANE_TA); }))) {
            mixin(enumMixinStr_DANETLS_USAGE_DANE_TA);
        }
    }
    static if(!is(typeof(DANETLS_USAGE_PKIX_EE))) {
        private enum enumMixinStr_DANETLS_USAGE_PKIX_EE = `enum DANETLS_USAGE_PKIX_EE = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_DANETLS_USAGE_PKIX_EE); }))) {
            mixin(enumMixinStr_DANETLS_USAGE_PKIX_EE);
        }
    }
    static if(!is(typeof(DANETLS_USAGE_PKIX_TA))) {
        private enum enumMixinStr_DANETLS_USAGE_PKIX_TA = `enum DANETLS_USAGE_PKIX_TA = 0;`;
        static if(is(typeof({ mixin(enumMixinStr_DANETLS_USAGE_PKIX_TA); }))) {
            mixin(enumMixinStr_DANETLS_USAGE_PKIX_TA);
        }
    }






    static if(!is(typeof(__flexarr))) {
        private enum enumMixinStr___flexarr = `enum __flexarr = [ ];`;
        static if(is(typeof({ mixin(enumMixinStr___flexarr); }))) {
            mixin(enumMixinStr___flexarr);
        }
    }




    static if(!is(typeof(__glibc_c99_flexarr_available))) {
        private enum enumMixinStr___glibc_c99_flexarr_available = `enum __glibc_c99_flexarr_available = 1;`;
        static if(is(typeof({ mixin(enumMixinStr___glibc_c99_flexarr_available); }))) {
            mixin(enumMixinStr___glibc_c99_flexarr_available);
        }
    }
    static if(!is(typeof(__attribute_malloc__))) {
        private enum enumMixinStr___attribute_malloc__ = `enum __attribute_malloc__ = __attribute__ ( ( __malloc__ ) );`;
        static if(is(typeof({ mixin(enumMixinStr___attribute_malloc__); }))) {
            mixin(enumMixinStr___attribute_malloc__);
        }
    }






    static if(!is(typeof(__attribute_pure__))) {
        private enum enumMixinStr___attribute_pure__ = `enum __attribute_pure__ = __attribute__ ( ( __pure__ ) );`;
        static if(is(typeof({ mixin(enumMixinStr___attribute_pure__); }))) {
            mixin(enumMixinStr___attribute_pure__);
        }
    }




    static if(!is(typeof(__attribute_const__))) {
        private enum enumMixinStr___attribute_const__ = `enum __attribute_const__ = __attribute__ ( cast( __const__ ) );`;
        static if(is(typeof({ mixin(enumMixinStr___attribute_const__); }))) {
            mixin(enumMixinStr___attribute_const__);
        }
    }




    static if(!is(typeof(__attribute_used__))) {
        private enum enumMixinStr___attribute_used__ = `enum __attribute_used__ = __attribute__ ( ( __used__ ) );`;
        static if(is(typeof({ mixin(enumMixinStr___attribute_used__); }))) {
            mixin(enumMixinStr___attribute_used__);
        }
    }




    static if(!is(typeof(__attribute_noinline__))) {
        private enum enumMixinStr___attribute_noinline__ = `enum __attribute_noinline__ = __attribute__ ( ( __noinline__ ) );`;
        static if(is(typeof({ mixin(enumMixinStr___attribute_noinline__); }))) {
            mixin(enumMixinStr___attribute_noinline__);
        }
    }




    static if(!is(typeof(__attribute_deprecated__))) {
        private enum enumMixinStr___attribute_deprecated__ = `enum __attribute_deprecated__ = __attribute__ ( ( __deprecated__ ) );`;
        static if(is(typeof({ mixin(enumMixinStr___attribute_deprecated__); }))) {
            mixin(enumMixinStr___attribute_deprecated__);
        }
    }
    static if(!is(typeof(__attribute_warn_unused_result__))) {
        private enum enumMixinStr___attribute_warn_unused_result__ = `enum __attribute_warn_unused_result__ = __attribute__ ( ( __warn_unused_result__ ) );`;
        static if(is(typeof({ mixin(enumMixinStr___attribute_warn_unused_result__); }))) {
            mixin(enumMixinStr___attribute_warn_unused_result__);
        }
    }






    static if(!is(typeof(__always_inline))) {
        private enum enumMixinStr___always_inline = `enum __always_inline = __inline __attribute__ ( ( __always_inline__ ) );`;
        static if(is(typeof({ mixin(enumMixinStr___always_inline); }))) {
            mixin(enumMixinStr___always_inline);
        }
    }






    static if(!is(typeof(__extern_inline))) {
        private enum enumMixinStr___extern_inline = `enum __extern_inline = extern __inline __attribute__ ( ( __gnu_inline__ ) );`;
        static if(is(typeof({ mixin(enumMixinStr___extern_inline); }))) {
            mixin(enumMixinStr___extern_inline);
        }
    }




    static if(!is(typeof(__extern_always_inline))) {
        private enum enumMixinStr___extern_always_inline = `enum __extern_always_inline = extern __inline __attribute__ ( ( __always_inline__ ) ) __attribute__ ( ( __gnu_inline__ ) );`;
        static if(is(typeof({ mixin(enumMixinStr___extern_always_inline); }))) {
            mixin(enumMixinStr___extern_always_inline);
        }
    }




    static if(!is(typeof(__fortify_function))) {
        private enum enumMixinStr___fortify_function = `enum __fortify_function = extern __inline __attribute__ ( ( __always_inline__ ) ) __attribute__ ( ( __gnu_inline__ ) ) ;`;
        static if(is(typeof({ mixin(enumMixinStr___fortify_function); }))) {
            mixin(enumMixinStr___fortify_function);
        }
    }




    static if(!is(typeof(__restrict_arr))) {
        private enum enumMixinStr___restrict_arr = `enum __restrict_arr = __restrict;`;
        static if(is(typeof({ mixin(enumMixinStr___restrict_arr); }))) {
            mixin(enumMixinStr___restrict_arr);
        }
    }
    static if(!is(typeof(__HAVE_GENERIC_SELECTION))) {
        private enum enumMixinStr___HAVE_GENERIC_SELECTION = `enum __HAVE_GENERIC_SELECTION = 1;`;
        static if(is(typeof({ mixin(enumMixinStr___HAVE_GENERIC_SELECTION); }))) {
            mixin(enumMixinStr___HAVE_GENERIC_SELECTION);
        }
    }






    static if(!is(typeof(__attribute_returns_twice__))) {
        private enum enumMixinStr___attribute_returns_twice__ = `enum __attribute_returns_twice__ = __attribute__ ( ( __returns_twice__ ) );`;
        static if(is(typeof({ mixin(enumMixinStr___attribute_returns_twice__); }))) {
            mixin(enumMixinStr___attribute_returns_twice__);
        }
    }




    static if(!is(typeof(_SYS_SELECT_H))) {
        private enum enumMixinStr__SYS_SELECT_H = `enum _SYS_SELECT_H = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__SYS_SELECT_H); }))) {
            mixin(enumMixinStr__SYS_SELECT_H);
        }
    }






    static if(!is(typeof(__NFDBITS))) {
        private enum enumMixinStr___NFDBITS = `enum __NFDBITS = ( 8 * cast( int ) ( __fd_mask ) .sizeof );`;
        static if(is(typeof({ mixin(enumMixinStr___NFDBITS); }))) {
            mixin(enumMixinStr___NFDBITS);
        }
    }
    static if(!is(typeof(FD_SETSIZE))) {
        private enum enumMixinStr_FD_SETSIZE = `enum FD_SETSIZE = 1024;`;
        static if(is(typeof({ mixin(enumMixinStr_FD_SETSIZE); }))) {
            mixin(enumMixinStr_FD_SETSIZE);
        }
    }




    static if(!is(typeof(NFDBITS))) {
        private enum enumMixinStr_NFDBITS = `enum NFDBITS = ( 8 * cast( int ) ( __fd_mask ) .sizeof );`;
        static if(is(typeof({ mixin(enumMixinStr_NFDBITS); }))) {
            mixin(enumMixinStr_NFDBITS);
        }
    }
    static if(!is(typeof(_SYS_TYPES_H))) {
        private enum enumMixinStr__SYS_TYPES_H = `enum _SYS_TYPES_H = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__SYS_TYPES_H); }))) {
            mixin(enumMixinStr__SYS_TYPES_H);
        }
    }
    static if(!is(typeof(__BIT_TYPES_DEFINED__))) {
        private enum enumMixinStr___BIT_TYPES_DEFINED__ = `enum __BIT_TYPES_DEFINED__ = 1;`;
        static if(is(typeof({ mixin(enumMixinStr___BIT_TYPES_DEFINED__); }))) {
            mixin(enumMixinStr___BIT_TYPES_DEFINED__);
        }
    }
    static if(!is(typeof(_TIME_H))) {
        private enum enumMixinStr__TIME_H = `enum _TIME_H = 1;`;
        static if(is(typeof({ mixin(enumMixinStr__TIME_H); }))) {
            mixin(enumMixinStr__TIME_H);
        }
    }




    static if(!is(typeof(TIME_UTC))) {
        private enum enumMixinStr_TIME_UTC = `enum TIME_UTC = 1;`;
        static if(is(typeof({ mixin(enumMixinStr_TIME_UTC); }))) {
            mixin(enumMixinStr_TIME_UTC);
        }
    }
    static if(!is(typeof(SCHAR_MAX))) {
        private enum enumMixinStr_SCHAR_MAX = `enum SCHAR_MAX = 0x7f;`;
        static if(is(typeof({ mixin(enumMixinStr_SCHAR_MAX); }))) {
            mixin(enumMixinStr_SCHAR_MAX);
        }
    }




    static if(!is(typeof(SHRT_MAX))) {
        private enum enumMixinStr_SHRT_MAX = `enum SHRT_MAX = 0x7fff;`;
        static if(is(typeof({ mixin(enumMixinStr_SHRT_MAX); }))) {
            mixin(enumMixinStr_SHRT_MAX);
        }
    }




    static if(!is(typeof(INT_MAX))) {
        private enum enumMixinStr_INT_MAX = `enum INT_MAX = 0x7fffffff;`;
        static if(is(typeof({ mixin(enumMixinStr_INT_MAX); }))) {
            mixin(enumMixinStr_INT_MAX);
        }
    }




    static if(!is(typeof(LONG_MAX))) {
        private enum enumMixinStr_LONG_MAX = `enum LONG_MAX = 0x7fffffffffffffffL;`;
        static if(is(typeof({ mixin(enumMixinStr_LONG_MAX); }))) {
            mixin(enumMixinStr_LONG_MAX);
        }
    }




    static if(!is(typeof(SCHAR_MIN))) {
        private enum enumMixinStr_SCHAR_MIN = `enum SCHAR_MIN = ( - 0x7f - 1 );`;
        static if(is(typeof({ mixin(enumMixinStr_SCHAR_MIN); }))) {
            mixin(enumMixinStr_SCHAR_MIN);
        }
    }




    static if(!is(typeof(SHRT_MIN))) {
        private enum enumMixinStr_SHRT_MIN = `enum SHRT_MIN = ( - 0x7fff - 1 );`;
        static if(is(typeof({ mixin(enumMixinStr_SHRT_MIN); }))) {
            mixin(enumMixinStr_SHRT_MIN);
        }
    }




    static if(!is(typeof(INT_MIN))) {
        private enum enumMixinStr_INT_MIN = `enum INT_MIN = ( - 0x7fffffff - 1 );`;
        static if(is(typeof({ mixin(enumMixinStr_INT_MIN); }))) {
            mixin(enumMixinStr_INT_MIN);
        }
    }




    static if(!is(typeof(LONG_MIN))) {
        private enum enumMixinStr_LONG_MIN = `enum LONG_MIN = ( - 0x7fffffffffffffffL - 1L );`;
        static if(is(typeof({ mixin(enumMixinStr_LONG_MIN); }))) {
            mixin(enumMixinStr_LONG_MIN);
        }
    }




    static if(!is(typeof(UCHAR_MAX))) {
        private enum enumMixinStr_UCHAR_MAX = `enum UCHAR_MAX = ( 0x7f * 2 + 1 );`;
        static if(is(typeof({ mixin(enumMixinStr_UCHAR_MAX); }))) {
            mixin(enumMixinStr_UCHAR_MAX);
        }
    }




    static if(!is(typeof(USHRT_MAX))) {
        private enum enumMixinStr_USHRT_MAX = `enum USHRT_MAX = ( 0x7fff * 2 + 1 );`;
        static if(is(typeof({ mixin(enumMixinStr_USHRT_MAX); }))) {
            mixin(enumMixinStr_USHRT_MAX);
        }
    }




    static if(!is(typeof(UINT_MAX))) {
        private enum enumMixinStr_UINT_MAX = `enum UINT_MAX = ( 0x7fffffff * 2U + 1U );`;
        static if(is(typeof({ mixin(enumMixinStr_UINT_MAX); }))) {
            mixin(enumMixinStr_UINT_MAX);
        }
    }




    static if(!is(typeof(ULONG_MAX))) {
        private enum enumMixinStr_ULONG_MAX = `enum ULONG_MAX = ( 0x7fffffffffffffffL * 2UL + 1UL );`;
        static if(is(typeof({ mixin(enumMixinStr_ULONG_MAX); }))) {
            mixin(enumMixinStr_ULONG_MAX);
        }
    }




    static if(!is(typeof(CHAR_BIT))) {
        private enum enumMixinStr_CHAR_BIT = `enum CHAR_BIT = 8;`;
        static if(is(typeof({ mixin(enumMixinStr_CHAR_BIT); }))) {
            mixin(enumMixinStr_CHAR_BIT);
        }
    }




    static if(!is(typeof(CHAR_MIN))) {
        private enum enumMixinStr_CHAR_MIN = `enum CHAR_MIN = ( - 0x7f - 1 );`;
        static if(is(typeof({ mixin(enumMixinStr_CHAR_MIN); }))) {
            mixin(enumMixinStr_CHAR_MIN);
        }
    }




    static if(!is(typeof(CHAR_MAX))) {
        private enum enumMixinStr_CHAR_MAX = `enum CHAR_MAX = 0x7f;`;
        static if(is(typeof({ mixin(enumMixinStr_CHAR_MAX); }))) {
            mixin(enumMixinStr_CHAR_MAX);
        }
    }
    static if(!is(typeof(__GNUC_VA_LIST))) {
        private enum enumMixinStr___GNUC_VA_LIST = `enum __GNUC_VA_LIST = 1;`;
        static if(is(typeof({ mixin(enumMixinStr___GNUC_VA_LIST); }))) {
            mixin(enumMixinStr___GNUC_VA_LIST);
        }
    }
    static if(!is(typeof(NULL))) {
        private enum enumMixinStr_NULL = `enum NULL = ( cast( void * ) 0 );`;
        static if(is(typeof({ mixin(enumMixinStr_NULL); }))) {
            mixin(enumMixinStr_NULL);
        }
    }





}


struct __va_list_tag;
